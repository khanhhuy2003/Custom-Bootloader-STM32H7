
Backup_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  080600e0  080600e0  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005974  080603ac  080603ac  000003ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08065d20  08065d20  00005d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08066220  08066220  00006220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08066228  08066228  00006228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0806622c  0806622c  0000622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08066230  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001fc  24000010  08066240  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400020c  08066240  0000720c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010b6a  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002387  00000000  00000000  00017ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c30  00000000  00000000  00019f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000954  00000000  00000000  0001ab60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031f28  00000000  00000000  0001b4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010224  00000000  00000000  0004d3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001411c2  00000000  00000000  0005d600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0019e7c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000031d4  00000000  00000000  0019e808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  001a19dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080603ac <__do_global_dtors_aux>:
 80603ac:	b510      	push	{r4, lr}
 80603ae:	4c05      	ldr	r4, [pc, #20]	@ (80603c4 <__do_global_dtors_aux+0x18>)
 80603b0:	7823      	ldrb	r3, [r4, #0]
 80603b2:	b933      	cbnz	r3, 80603c2 <__do_global_dtors_aux+0x16>
 80603b4:	4b04      	ldr	r3, [pc, #16]	@ (80603c8 <__do_global_dtors_aux+0x1c>)
 80603b6:	b113      	cbz	r3, 80603be <__do_global_dtors_aux+0x12>
 80603b8:	4804      	ldr	r0, [pc, #16]	@ (80603cc <__do_global_dtors_aux+0x20>)
 80603ba:	f3af 8000 	nop.w
 80603be:	2301      	movs	r3, #1
 80603c0:	7023      	strb	r3, [r4, #0]
 80603c2:	bd10      	pop	{r4, pc}
 80603c4:	24000010 	.word	0x24000010
 80603c8:	00000000 	.word	0x00000000
 80603cc:	08065d08 	.word	0x08065d08

080603d0 <frame_dummy>:
 80603d0:	b508      	push	{r3, lr}
 80603d2:	4b03      	ldr	r3, [pc, #12]	@ (80603e0 <frame_dummy+0x10>)
 80603d4:	b11b      	cbz	r3, 80603de <frame_dummy+0xe>
 80603d6:	4903      	ldr	r1, [pc, #12]	@ (80603e4 <frame_dummy+0x14>)
 80603d8:	4803      	ldr	r0, [pc, #12]	@ (80603e8 <frame_dummy+0x18>)
 80603da:	f3af 8000 	nop.w
 80603de:	bd08      	pop	{r3, pc}
 80603e0:	00000000 	.word	0x00000000
 80603e4:	24000014 	.word	0x24000014
 80603e8:	08065d08 	.word	0x08065d08

080603ec <strlen>:
 80603ec:	4603      	mov	r3, r0
 80603ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80603f2:	2a00      	cmp	r2, #0
 80603f4:	d1fb      	bne.n	80603ee <strlen+0x2>
 80603f6:	1a18      	subs	r0, r3, r0
 80603f8:	3801      	subs	r0, #1
 80603fa:	4770      	bx	lr

080603fc <__aeabi_uldivmod>:
 80603fc:	b953      	cbnz	r3, 8060414 <__aeabi_uldivmod+0x18>
 80603fe:	b94a      	cbnz	r2, 8060414 <__aeabi_uldivmod+0x18>
 8060400:	2900      	cmp	r1, #0
 8060402:	bf08      	it	eq
 8060404:	2800      	cmpeq	r0, #0
 8060406:	bf1c      	itt	ne
 8060408:	f04f 31ff 	movne.w	r1, #4294967295
 806040c:	f04f 30ff 	movne.w	r0, #4294967295
 8060410:	f000 b988 	b.w	8060724 <__aeabi_idiv0>
 8060414:	f1ad 0c08 	sub.w	ip, sp, #8
 8060418:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 806041c:	f000 f806 	bl	806042c <__udivmoddi4>
 8060420:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060428:	b004      	add	sp, #16
 806042a:	4770      	bx	lr

0806042c <__udivmoddi4>:
 806042c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8060430:	9d08      	ldr	r5, [sp, #32]
 8060432:	468e      	mov	lr, r1
 8060434:	4604      	mov	r4, r0
 8060436:	4688      	mov	r8, r1
 8060438:	2b00      	cmp	r3, #0
 806043a:	d14a      	bne.n	80604d2 <__udivmoddi4+0xa6>
 806043c:	428a      	cmp	r2, r1
 806043e:	4617      	mov	r7, r2
 8060440:	d962      	bls.n	8060508 <__udivmoddi4+0xdc>
 8060442:	fab2 f682 	clz	r6, r2
 8060446:	b14e      	cbz	r6, 806045c <__udivmoddi4+0x30>
 8060448:	f1c6 0320 	rsb	r3, r6, #32
 806044c:	fa01 f806 	lsl.w	r8, r1, r6
 8060450:	fa20 f303 	lsr.w	r3, r0, r3
 8060454:	40b7      	lsls	r7, r6
 8060456:	ea43 0808 	orr.w	r8, r3, r8
 806045a:	40b4      	lsls	r4, r6
 806045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060460:	fa1f fc87 	uxth.w	ip, r7
 8060464:	fbb8 f1fe 	udiv	r1, r8, lr
 8060468:	0c23      	lsrs	r3, r4, #16
 806046a:	fb0e 8811 	mls	r8, lr, r1, r8
 806046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8060472:	fb01 f20c 	mul.w	r2, r1, ip
 8060476:	429a      	cmp	r2, r3
 8060478:	d909      	bls.n	806048e <__udivmoddi4+0x62>
 806047a:	18fb      	adds	r3, r7, r3
 806047c:	f101 30ff 	add.w	r0, r1, #4294967295
 8060480:	f080 80ea 	bcs.w	8060658 <__udivmoddi4+0x22c>
 8060484:	429a      	cmp	r2, r3
 8060486:	f240 80e7 	bls.w	8060658 <__udivmoddi4+0x22c>
 806048a:	3902      	subs	r1, #2
 806048c:	443b      	add	r3, r7
 806048e:	1a9a      	subs	r2, r3, r2
 8060490:	b2a3      	uxth	r3, r4
 8060492:	fbb2 f0fe 	udiv	r0, r2, lr
 8060496:	fb0e 2210 	mls	r2, lr, r0, r2
 806049a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 806049e:	fb00 fc0c 	mul.w	ip, r0, ip
 80604a2:	459c      	cmp	ip, r3
 80604a4:	d909      	bls.n	80604ba <__udivmoddi4+0x8e>
 80604a6:	18fb      	adds	r3, r7, r3
 80604a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80604ac:	f080 80d6 	bcs.w	806065c <__udivmoddi4+0x230>
 80604b0:	459c      	cmp	ip, r3
 80604b2:	f240 80d3 	bls.w	806065c <__udivmoddi4+0x230>
 80604b6:	443b      	add	r3, r7
 80604b8:	3802      	subs	r0, #2
 80604ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80604be:	eba3 030c 	sub.w	r3, r3, ip
 80604c2:	2100      	movs	r1, #0
 80604c4:	b11d      	cbz	r5, 80604ce <__udivmoddi4+0xa2>
 80604c6:	40f3      	lsrs	r3, r6
 80604c8:	2200      	movs	r2, #0
 80604ca:	e9c5 3200 	strd	r3, r2, [r5]
 80604ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80604d2:	428b      	cmp	r3, r1
 80604d4:	d905      	bls.n	80604e2 <__udivmoddi4+0xb6>
 80604d6:	b10d      	cbz	r5, 80604dc <__udivmoddi4+0xb0>
 80604d8:	e9c5 0100 	strd	r0, r1, [r5]
 80604dc:	2100      	movs	r1, #0
 80604de:	4608      	mov	r0, r1
 80604e0:	e7f5      	b.n	80604ce <__udivmoddi4+0xa2>
 80604e2:	fab3 f183 	clz	r1, r3
 80604e6:	2900      	cmp	r1, #0
 80604e8:	d146      	bne.n	8060578 <__udivmoddi4+0x14c>
 80604ea:	4573      	cmp	r3, lr
 80604ec:	d302      	bcc.n	80604f4 <__udivmoddi4+0xc8>
 80604ee:	4282      	cmp	r2, r0
 80604f0:	f200 8105 	bhi.w	80606fe <__udivmoddi4+0x2d2>
 80604f4:	1a84      	subs	r4, r0, r2
 80604f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80604fa:	2001      	movs	r0, #1
 80604fc:	4690      	mov	r8, r2
 80604fe:	2d00      	cmp	r5, #0
 8060500:	d0e5      	beq.n	80604ce <__udivmoddi4+0xa2>
 8060502:	e9c5 4800 	strd	r4, r8, [r5]
 8060506:	e7e2      	b.n	80604ce <__udivmoddi4+0xa2>
 8060508:	2a00      	cmp	r2, #0
 806050a:	f000 8090 	beq.w	806062e <__udivmoddi4+0x202>
 806050e:	fab2 f682 	clz	r6, r2
 8060512:	2e00      	cmp	r6, #0
 8060514:	f040 80a4 	bne.w	8060660 <__udivmoddi4+0x234>
 8060518:	1a8a      	subs	r2, r1, r2
 806051a:	0c03      	lsrs	r3, r0, #16
 806051c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060520:	b280      	uxth	r0, r0
 8060522:	b2bc      	uxth	r4, r7
 8060524:	2101      	movs	r1, #1
 8060526:	fbb2 fcfe 	udiv	ip, r2, lr
 806052a:	fb0e 221c 	mls	r2, lr, ip, r2
 806052e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8060532:	fb04 f20c 	mul.w	r2, r4, ip
 8060536:	429a      	cmp	r2, r3
 8060538:	d907      	bls.n	806054a <__udivmoddi4+0x11e>
 806053a:	18fb      	adds	r3, r7, r3
 806053c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8060540:	d202      	bcs.n	8060548 <__udivmoddi4+0x11c>
 8060542:	429a      	cmp	r2, r3
 8060544:	f200 80e0 	bhi.w	8060708 <__udivmoddi4+0x2dc>
 8060548:	46c4      	mov	ip, r8
 806054a:	1a9b      	subs	r3, r3, r2
 806054c:	fbb3 f2fe 	udiv	r2, r3, lr
 8060550:	fb0e 3312 	mls	r3, lr, r2, r3
 8060554:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8060558:	fb02 f404 	mul.w	r4, r2, r4
 806055c:	429c      	cmp	r4, r3
 806055e:	d907      	bls.n	8060570 <__udivmoddi4+0x144>
 8060560:	18fb      	adds	r3, r7, r3
 8060562:	f102 30ff 	add.w	r0, r2, #4294967295
 8060566:	d202      	bcs.n	806056e <__udivmoddi4+0x142>
 8060568:	429c      	cmp	r4, r3
 806056a:	f200 80ca 	bhi.w	8060702 <__udivmoddi4+0x2d6>
 806056e:	4602      	mov	r2, r0
 8060570:	1b1b      	subs	r3, r3, r4
 8060572:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8060576:	e7a5      	b.n	80604c4 <__udivmoddi4+0x98>
 8060578:	f1c1 0620 	rsb	r6, r1, #32
 806057c:	408b      	lsls	r3, r1
 806057e:	fa22 f706 	lsr.w	r7, r2, r6
 8060582:	431f      	orrs	r7, r3
 8060584:	fa0e f401 	lsl.w	r4, lr, r1
 8060588:	fa20 f306 	lsr.w	r3, r0, r6
 806058c:	fa2e fe06 	lsr.w	lr, lr, r6
 8060590:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8060594:	4323      	orrs	r3, r4
 8060596:	fa00 f801 	lsl.w	r8, r0, r1
 806059a:	fa1f fc87 	uxth.w	ip, r7
 806059e:	fbbe f0f9 	udiv	r0, lr, r9
 80605a2:	0c1c      	lsrs	r4, r3, #16
 80605a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80605a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80605ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80605b0:	45a6      	cmp	lr, r4
 80605b2:	fa02 f201 	lsl.w	r2, r2, r1
 80605b6:	d909      	bls.n	80605cc <__udivmoddi4+0x1a0>
 80605b8:	193c      	adds	r4, r7, r4
 80605ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80605be:	f080 809c 	bcs.w	80606fa <__udivmoddi4+0x2ce>
 80605c2:	45a6      	cmp	lr, r4
 80605c4:	f240 8099 	bls.w	80606fa <__udivmoddi4+0x2ce>
 80605c8:	3802      	subs	r0, #2
 80605ca:	443c      	add	r4, r7
 80605cc:	eba4 040e 	sub.w	r4, r4, lr
 80605d0:	fa1f fe83 	uxth.w	lr, r3
 80605d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80605d8:	fb09 4413 	mls	r4, r9, r3, r4
 80605dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80605e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80605e4:	45a4      	cmp	ip, r4
 80605e6:	d908      	bls.n	80605fa <__udivmoddi4+0x1ce>
 80605e8:	193c      	adds	r4, r7, r4
 80605ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80605ee:	f080 8082 	bcs.w	80606f6 <__udivmoddi4+0x2ca>
 80605f2:	45a4      	cmp	ip, r4
 80605f4:	d97f      	bls.n	80606f6 <__udivmoddi4+0x2ca>
 80605f6:	3b02      	subs	r3, #2
 80605f8:	443c      	add	r4, r7
 80605fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80605fe:	eba4 040c 	sub.w	r4, r4, ip
 8060602:	fba0 ec02 	umull	lr, ip, r0, r2
 8060606:	4564      	cmp	r4, ip
 8060608:	4673      	mov	r3, lr
 806060a:	46e1      	mov	r9, ip
 806060c:	d362      	bcc.n	80606d4 <__udivmoddi4+0x2a8>
 806060e:	d05f      	beq.n	80606d0 <__udivmoddi4+0x2a4>
 8060610:	b15d      	cbz	r5, 806062a <__udivmoddi4+0x1fe>
 8060612:	ebb8 0203 	subs.w	r2, r8, r3
 8060616:	eb64 0409 	sbc.w	r4, r4, r9
 806061a:	fa04 f606 	lsl.w	r6, r4, r6
 806061e:	fa22 f301 	lsr.w	r3, r2, r1
 8060622:	431e      	orrs	r6, r3
 8060624:	40cc      	lsrs	r4, r1
 8060626:	e9c5 6400 	strd	r6, r4, [r5]
 806062a:	2100      	movs	r1, #0
 806062c:	e74f      	b.n	80604ce <__udivmoddi4+0xa2>
 806062e:	fbb1 fcf2 	udiv	ip, r1, r2
 8060632:	0c01      	lsrs	r1, r0, #16
 8060634:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8060638:	b280      	uxth	r0, r0
 806063a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 806063e:	463b      	mov	r3, r7
 8060640:	4638      	mov	r0, r7
 8060642:	463c      	mov	r4, r7
 8060644:	46b8      	mov	r8, r7
 8060646:	46be      	mov	lr, r7
 8060648:	2620      	movs	r6, #32
 806064a:	fbb1 f1f7 	udiv	r1, r1, r7
 806064e:	eba2 0208 	sub.w	r2, r2, r8
 8060652:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8060656:	e766      	b.n	8060526 <__udivmoddi4+0xfa>
 8060658:	4601      	mov	r1, r0
 806065a:	e718      	b.n	806048e <__udivmoddi4+0x62>
 806065c:	4610      	mov	r0, r2
 806065e:	e72c      	b.n	80604ba <__udivmoddi4+0x8e>
 8060660:	f1c6 0220 	rsb	r2, r6, #32
 8060664:	fa2e f302 	lsr.w	r3, lr, r2
 8060668:	40b7      	lsls	r7, r6
 806066a:	40b1      	lsls	r1, r6
 806066c:	fa20 f202 	lsr.w	r2, r0, r2
 8060670:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8060674:	430a      	orrs	r2, r1
 8060676:	fbb3 f8fe 	udiv	r8, r3, lr
 806067a:	b2bc      	uxth	r4, r7
 806067c:	fb0e 3318 	mls	r3, lr, r8, r3
 8060680:	0c11      	lsrs	r1, r2, #16
 8060682:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8060686:	fb08 f904 	mul.w	r9, r8, r4
 806068a:	40b0      	lsls	r0, r6
 806068c:	4589      	cmp	r9, r1
 806068e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8060692:	b280      	uxth	r0, r0
 8060694:	d93e      	bls.n	8060714 <__udivmoddi4+0x2e8>
 8060696:	1879      	adds	r1, r7, r1
 8060698:	f108 3cff 	add.w	ip, r8, #4294967295
 806069c:	d201      	bcs.n	80606a2 <__udivmoddi4+0x276>
 806069e:	4589      	cmp	r9, r1
 80606a0:	d81f      	bhi.n	80606e2 <__udivmoddi4+0x2b6>
 80606a2:	eba1 0109 	sub.w	r1, r1, r9
 80606a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80606aa:	fb09 f804 	mul.w	r8, r9, r4
 80606ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80606b2:	b292      	uxth	r2, r2
 80606b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80606b8:	4542      	cmp	r2, r8
 80606ba:	d229      	bcs.n	8060710 <__udivmoddi4+0x2e4>
 80606bc:	18ba      	adds	r2, r7, r2
 80606be:	f109 31ff 	add.w	r1, r9, #4294967295
 80606c2:	d2c4      	bcs.n	806064e <__udivmoddi4+0x222>
 80606c4:	4542      	cmp	r2, r8
 80606c6:	d2c2      	bcs.n	806064e <__udivmoddi4+0x222>
 80606c8:	f1a9 0102 	sub.w	r1, r9, #2
 80606cc:	443a      	add	r2, r7
 80606ce:	e7be      	b.n	806064e <__udivmoddi4+0x222>
 80606d0:	45f0      	cmp	r8, lr
 80606d2:	d29d      	bcs.n	8060610 <__udivmoddi4+0x1e4>
 80606d4:	ebbe 0302 	subs.w	r3, lr, r2
 80606d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80606dc:	3801      	subs	r0, #1
 80606de:	46e1      	mov	r9, ip
 80606e0:	e796      	b.n	8060610 <__udivmoddi4+0x1e4>
 80606e2:	eba7 0909 	sub.w	r9, r7, r9
 80606e6:	4449      	add	r1, r9
 80606e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80606ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80606f0:	fb09 f804 	mul.w	r8, r9, r4
 80606f4:	e7db      	b.n	80606ae <__udivmoddi4+0x282>
 80606f6:	4673      	mov	r3, lr
 80606f8:	e77f      	b.n	80605fa <__udivmoddi4+0x1ce>
 80606fa:	4650      	mov	r0, sl
 80606fc:	e766      	b.n	80605cc <__udivmoddi4+0x1a0>
 80606fe:	4608      	mov	r0, r1
 8060700:	e6fd      	b.n	80604fe <__udivmoddi4+0xd2>
 8060702:	443b      	add	r3, r7
 8060704:	3a02      	subs	r2, #2
 8060706:	e733      	b.n	8060570 <__udivmoddi4+0x144>
 8060708:	f1ac 0c02 	sub.w	ip, ip, #2
 806070c:	443b      	add	r3, r7
 806070e:	e71c      	b.n	806054a <__udivmoddi4+0x11e>
 8060710:	4649      	mov	r1, r9
 8060712:	e79c      	b.n	806064e <__udivmoddi4+0x222>
 8060714:	eba1 0109 	sub.w	r1, r1, r9
 8060718:	46c4      	mov	ip, r8
 806071a:	fbb1 f9fe 	udiv	r9, r1, lr
 806071e:	fb09 f804 	mul.w	r8, r9, r4
 8060722:	e7c4      	b.n	80606ae <__udivmoddi4+0x282>

08060724 <__aeabi_idiv0>:
 8060724:	4770      	bx	lr
 8060726:	bf00      	nop

08060728 <crc32_custom>:
    0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};

uint32_t crc32_custom(uint32_t crc, const uint8_t *buf, size_t len)
{
 8060728:	b480      	push	{r7}
 806072a:	b087      	sub	sp, #28
 806072c:	af00      	add	r7, sp, #0
 806072e:	60f8      	str	r0, [r7, #12]
 8060730:	60b9      	str	r1, [r7, #8]
 8060732:	607a      	str	r2, [r7, #4]
    if (buf == NULL) return 0;
 8060734:	68bb      	ldr	r3, [r7, #8]
 8060736:	2b00      	cmp	r3, #0
 8060738:	d101      	bne.n	806073e <crc32_custom+0x16>
 806073a:	2300      	movs	r3, #0
 806073c:	e01d      	b.n	806077a <crc32_custom+0x52>

    crc = crc ^ 0xFFFFFFFF;
 806073e:	68fb      	ldr	r3, [r7, #12]
 8060740:	43db      	mvns	r3, r3
 8060742:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; i < len; i++) {
 8060744:	2300      	movs	r3, #0
 8060746:	617b      	str	r3, [r7, #20]
 8060748:	e011      	b.n	806076e <crc32_custom+0x46>
        crc = crc32_table[(crc ^ buf[i]) & 0xFF] ^ (crc >> 8);
 806074a:	68ba      	ldr	r2, [r7, #8]
 806074c:	697b      	ldr	r3, [r7, #20]
 806074e:	4413      	add	r3, r2
 8060750:	781b      	ldrb	r3, [r3, #0]
 8060752:	461a      	mov	r2, r3
 8060754:	68fb      	ldr	r3, [r7, #12]
 8060756:	4053      	eors	r3, r2
 8060758:	b2db      	uxtb	r3, r3
 806075a:	4a0b      	ldr	r2, [pc, #44]	@ (8060788 <crc32_custom+0x60>)
 806075c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8060760:	68fb      	ldr	r3, [r7, #12]
 8060762:	0a1b      	lsrs	r3, r3, #8
 8060764:	4053      	eors	r3, r2
 8060766:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < len; i++) {
 8060768:	697b      	ldr	r3, [r7, #20]
 806076a:	3301      	adds	r3, #1
 806076c:	617b      	str	r3, [r7, #20]
 806076e:	697a      	ldr	r2, [r7, #20]
 8060770:	687b      	ldr	r3, [r7, #4]
 8060772:	429a      	cmp	r2, r3
 8060774:	d3e9      	bcc.n	806074a <crc32_custom+0x22>
    }

    return crc ^ 0xFFFFFFFF;
 8060776:	68fb      	ldr	r3, [r7, #12]
 8060778:	43db      	mvns	r3, r3
}
 806077a:	4618      	mov	r0, r3
 806077c:	371c      	adds	r7, #28
 806077e:	46bd      	mov	sp, r7
 8060780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060784:	4770      	bx	lr
 8060786:	bf00      	nop
 8060788:	08065de8 	.word	0x08065de8

0806078c <crc32>:

uint32_t crc32(const void *data, size_t size)
{
 806078c:	b580      	push	{r7, lr}
 806078e:	b082      	sub	sp, #8
 8060790:	af00      	add	r7, sp, #0
 8060792:	6078      	str	r0, [r7, #4]
 8060794:	6039      	str	r1, [r7, #0]
    return crc32_custom(0, (const uint8_t*)data, size);
 8060796:	683a      	ldr	r2, [r7, #0]
 8060798:	6879      	ldr	r1, [r7, #4]
 806079a:	2000      	movs	r0, #0
 806079c:	f7ff ffc4 	bl	8060728 <crc32_custom>
 80607a0:	4603      	mov	r3, r0
}
 80607a2:	4618      	mov	r0, r3
 80607a4:	3708      	adds	r7, #8
 80607a6:	46bd      	mov	sp, r7
 80607a8:	bd80      	pop	{r7, pc}

080607aa <del_mem>:
//
//    // Nếu không còn chỗ trống, trả về VERSION_OK_FLAG_ADDR_END
//    return VERSION_OK_FLAG_ADDR_END;
//}

int del_mem(uint8_t start, uint8_t number_of_sector){
 80607aa:	b580      	push	{r7, lr}
 80607ac:	b088      	sub	sp, #32
 80607ae:	af00      	add	r7, sp, #0
 80607b0:	4603      	mov	r3, r0
 80607b2:	460a      	mov	r2, r1
 80607b4:	71fb      	strb	r3, [r7, #7]
 80607b6:	4613      	mov	r3, r2
 80607b8:	71bb      	strb	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80607ba:	f000 fea1 	bl	8061500 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 80607be:	2300      	movs	r3, #0
 80607c0:	60bb      	str	r3, [r7, #8]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80607c2:	2300      	movs	r3, #0
 80607c4:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80607c6:	2320      	movs	r3, #32
 80607c8:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.Banks = FLASH_BANK_1;
 80607ca:	2301      	movs	r3, #1
 80607cc:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector = start;
 80607ce:	79fb      	ldrb	r3, [r7, #7]
 80607d0:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = number_of_sector;
 80607d2:	79bb      	ldrb	r3, [r7, #6]
 80607d4:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK)
 80607d6:	f107 0208 	add.w	r2, r7, #8
 80607da:	f107 030c 	add.w	r3, r7, #12
 80607de:	4611      	mov	r1, r2
 80607e0:	4618      	mov	r0, r3
 80607e2:	f000 ff1d 	bl	8061620 <HAL_FLASHEx_Erase>
 80607e6:	4603      	mov	r3, r0
 80607e8:	2b00      	cmp	r3, #0
 80607ea:	d103      	bne.n	80607f4 <del_mem+0x4a>
    {
        // Erase failed
    	HAL_FLASH_Lock();
 80607ec:	f000 feaa 	bl	8061544 <HAL_FLASH_Lock>
    	return 1;
 80607f0:	2301      	movs	r3, #1
 80607f2:	e002      	b.n	80607fa <del_mem+0x50>
    }
    else
    {
    	HAL_FLASH_Lock();
 80607f4:	f000 fea6 	bl	8061544 <HAL_FLASH_Lock>
        return 0;
 80607f8:	2300      	movs	r3, #0
    }
}
 80607fa:	4618      	mov	r0, r3
 80607fc:	3720      	adds	r7, #32
 80607fe:	46bd      	mov	sp, r7
 8060800:	bd80      	pop	{r7, pc}
	...

08060804 <jump_to_bl_code_uart>:

void jump_to_bl_code_uart(){
 8060804:	b580      	push	{r7, lr}
 8060806:	b084      	sub	sp, #16
 8060808:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 806080a:	b672      	cpsid	i
}
 806080c:	bf00      	nop
	__disable_irq();
	uint32_t app_msp = *(volatile uint32_t* )BL_ADDR;
 806080e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8060812:	681b      	ldr	r3, [r3, #0]
 8060814:	60fb      	str	r3, [r7, #12]
	uint32_t app_reset_handler = *(volatile uint32_t* )(BL_ADDR + 4);
 8060816:	4b0d      	ldr	r3, [pc, #52]	@ (806084c <jump_to_bl_code_uart+0x48>)
 8060818:	681b      	ldr	r3, [r3, #0]
 806081a:	60bb      	str	r3, [r7, #8]
 806081c:	68fb      	ldr	r3, [r7, #12]
 806081e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8060820:	683b      	ldr	r3, [r7, #0]
 8060822:	f383 8808 	msr	MSP, r3
}
 8060826:	bf00      	nop
   __set_MSP(app_msp);
   SCB->VTOR = BL_ADDR;
 8060828:	4b09      	ldr	r3, [pc, #36]	@ (8060850 <jump_to_bl_code_uart+0x4c>)
 806082a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 806082e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8060830:	f3bf 8f4f 	dsb	sy
}
 8060834:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8060836:	f3bf 8f6f 	isb	sy
}
 806083a:	bf00      	nop
   __DSB();
   __ISB();
   void (*Jump_To_APP)(void) = (void (*)(void))app_reset_handler;
 806083c:	68bb      	ldr	r3, [r7, #8]
 806083e:	607b      	str	r3, [r7, #4]
   Jump_To_APP();
 8060840:	687b      	ldr	r3, [r7, #4]
 8060842:	4798      	blx	r3

}
 8060844:	bf00      	nop
 8060846:	3710      	adds	r7, #16
 8060848:	46bd      	mov	sp, r7
 806084a:	bd80      	pop	{r7, pc}
 806084c:	08000004 	.word	0x08000004
 8060850:	e000ed00 	.word	0xe000ed00

08060854 <set_run_ok_flag>:
//        }
//        HAL_UART_Transmit(&huart1, (uint8_t *)" The firmware works OK\r\n", 32, HAL_MAX_DELAY);
//        HAL_FLASH_Lock();
//    }
//}
void set_run_ok_flag(void) {
 8060854:	b590      	push	{r4, r7, lr}
 8060856:	b0a9      	sub	sp, #164	@ 0xa4
 8060858:	af00      	add	r7, sp, #0
 806085a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 806085e:	3ba0      	subs	r3, #160	@ 0xa0
 8060860:	331f      	adds	r3, #31
 8060862:	095b      	lsrs	r3, r3, #5
 8060864:	015c      	lsls	r4, r3, #5
    uint32_t temp_addr = 0x080C0000;
 8060866:	4b1d      	ldr	r3, [pc, #116]	@ (80608dc <set_run_ok_flag+0x88>)
 8060868:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    FirmwareUserStatus status_read;
    del_mem(FLASH_SECTOR_6, 1);
 806086c:	2101      	movs	r1, #1
 806086e:	2006      	movs	r0, #6
 8060870:	f7ff ff9b 	bl	80607aa <del_mem>

    if (status_read.run_ok_flag != RUN_OK_VALUE) {
 8060874:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8060876:	4a1a      	ldr	r2, [pc, #104]	@ (80608e0 <set_run_ok_flag+0x8c>)
 8060878:	4293      	cmp	r3, r2
 806087a:	d02b      	beq.n	80608d4 <set_run_ok_flag+0x80>
        FirmwareUserStatus new_status;
        new_status.run_ok_flag = RUN_OK_VALUE;
 806087c:	4b18      	ldr	r3, [pc, #96]	@ (80608e0 <set_run_ok_flag+0x8c>)
 806087e:	6423      	str	r3, [r4, #64]	@ 0x40
        new_status.retry_counter = 0;
 8060880:	2300      	movs	r3, #0
 8060882:	6463      	str	r3, [r4, #68]	@ 0x44

        uint64_t status_block[8] __attribute__((aligned(32)));
        memset(status_block, 0xFF, sizeof(status_block));
 8060884:	2240      	movs	r2, #64	@ 0x40
 8060886:	21ff      	movs	r1, #255	@ 0xff
 8060888:	4620      	mov	r0, r4
 806088a:	f005 fa11 	bl	8065cb0 <memset>
        memcpy(status_block, &new_status, 8);
 806088e:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
 8060892:	e9c4 2300 	strd	r2, r3, [r4]

        HAL_FLASH_Unlock();
 8060896:	f000 fe33 	bl	8061500 <HAL_FLASH_Unlock>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, temp_addr, (uint32_t)&status_block) != HAL_OK) {
 806089a:	4623      	mov	r3, r4
 806089c:	461a      	mov	r2, r3
 806089e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80608a2:	2001      	movs	r0, #1
 80608a4:	f000 fdbc 	bl	8061420 <HAL_FLASH_Program>
 80608a8:	4603      	mov	r3, r0
 80608aa:	2b00      	cmp	r3, #0
 80608ac:	d009      	beq.n	80608c2 <set_run_ok_flag+0x6e>
            HAL_UART_Transmit(&huart1, (uint8_t *)" Can not write the run_Ok_flag\r\n", 32, HAL_MAX_DELAY);
 80608ae:	f04f 33ff 	mov.w	r3, #4294967295
 80608b2:	2220      	movs	r2, #32
 80608b4:	490b      	ldr	r1, [pc, #44]	@ (80608e4 <set_run_ok_flag+0x90>)
 80608b6:	480c      	ldr	r0, [pc, #48]	@ (80608e8 <set_run_ok_flag+0x94>)
 80608b8:	f003 ff14 	bl	80646e4 <HAL_UART_Transmit>
            HAL_FLASH_Lock();
 80608bc:	f000 fe42 	bl	8061544 <HAL_FLASH_Lock>
 80608c0:	e008      	b.n	80608d4 <set_run_ok_flag+0x80>
            return;
        }
        HAL_FLASH_Lock();
 80608c2:	f000 fe3f 	bl	8061544 <HAL_FLASH_Lock>

        HAL_UART_Transmit(&huart1, (uint8_t *)" The firmware works OK\r\n", 32, HAL_MAX_DELAY);
 80608c6:	f04f 33ff 	mov.w	r3, #4294967295
 80608ca:	2220      	movs	r2, #32
 80608cc:	4907      	ldr	r1, [pc, #28]	@ (80608ec <set_run_ok_flag+0x98>)
 80608ce:	4806      	ldr	r0, [pc, #24]	@ (80608e8 <set_run_ok_flag+0x94>)
 80608d0:	f003 ff08 	bl	80646e4 <HAL_UART_Transmit>
    }
}
 80608d4:	37a4      	adds	r7, #164	@ 0xa4
 80608d6:	46bd      	mov	sp, r7
 80608d8:	bd90      	pop	{r4, r7, pc}
 80608da:	bf00      	nop
 80608dc:	080c0000 	.word	0x080c0000
 80608e0:	deadbeef 	.word	0xdeadbeef
 80608e4:	08065d20 	.word	0x08065d20
 80608e8:	24000158 	.word	0x24000158
 80608ec:	08065d44 	.word	0x08065d44

080608f0 <set_user_to_bl_flag>:

void set_user_to_bl_flag(void) {
 80608f0:	b590      	push	{r4, r7, lr}
 80608f2:	b099      	sub	sp, #100	@ 0x64
 80608f4:	af00      	add	r7, sp, #0
 80608f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80608fa:	3b60      	subs	r3, #96	@ 0x60
 80608fc:	331f      	adds	r3, #31
 80608fe:	095b      	lsrs	r3, r3, #5
 8060900:	015c      	lsls	r4, r3, #5


    uint32_t temp_addr = 0x080A0000;
 8060902:	4b16      	ldr	r3, [pc, #88]	@ (806095c <set_user_to_bl_flag+0x6c>)
 8060904:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t user_to_bl_value = USER_TO_BL_VALUE;
 8060906:	4b16      	ldr	r3, [pc, #88]	@ (8060960 <set_user_to_bl_flag+0x70>)
 8060908:	65bb      	str	r3, [r7, #88]	@ 0x58

    uint64_t status_block[8] __attribute__((aligned(32)));
    memset(status_block, 0xFF, sizeof(status_block));
 806090a:	2240      	movs	r2, #64	@ 0x40
 806090c:	21ff      	movs	r1, #255	@ 0xff
 806090e:	4620      	mov	r0, r4
 8060910:	f005 f9ce 	bl	8065cb0 <memset>
    memcpy(status_block, &user_to_bl_value, sizeof(user_to_bl_value));
 8060914:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8060916:	6023      	str	r3, [r4, #0]

    HAL_FLASH_Unlock();
 8060918:	f000 fdf2 	bl	8061500 <HAL_FLASH_Unlock>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, temp_addr, (uint32_t)&status_block) != HAL_OK) {
 806091c:	4623      	mov	r3, r4
 806091e:	461a      	mov	r2, r3
 8060920:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8060922:	2001      	movs	r0, #1
 8060924:	f000 fd7c 	bl	8061420 <HAL_FLASH_Program>
 8060928:	4603      	mov	r3, r0
 806092a:	2b00      	cmp	r3, #0
 806092c:	d009      	beq.n	8060942 <set_user_to_bl_flag+0x52>
        HAL_UART_Transmit(&huart1, (uint8_t *)"Failed to write user_to_bl_flag\r\n", 36, HAL_MAX_DELAY);
 806092e:	f04f 33ff 	mov.w	r3, #4294967295
 8060932:	2224      	movs	r2, #36	@ 0x24
 8060934:	490b      	ldr	r1, [pc, #44]	@ (8060964 <set_user_to_bl_flag+0x74>)
 8060936:	480c      	ldr	r0, [pc, #48]	@ (8060968 <set_user_to_bl_flag+0x78>)
 8060938:	f003 fed4 	bl	80646e4 <HAL_UART_Transmit>
        HAL_FLASH_Lock();
 806093c:	f000 fe02 	bl	8061544 <HAL_FLASH_Lock>
 8060940:	e008      	b.n	8060954 <set_user_to_bl_flag+0x64>
        return;
    }

    HAL_FLASH_Lock();
 8060942:	f000 fdff 	bl	8061544 <HAL_FLASH_Lock>
    HAL_UART_Transmit(&huart1, (uint8_t *)"✅ Good\r\n", 9, HAL_MAX_DELAY);
 8060946:	f04f 33ff 	mov.w	r3, #4294967295
 806094a:	2209      	movs	r2, #9
 806094c:	4907      	ldr	r1, [pc, #28]	@ (806096c <set_user_to_bl_flag+0x7c>)
 806094e:	4806      	ldr	r0, [pc, #24]	@ (8060968 <set_user_to_bl_flag+0x78>)
 8060950:	f003 fec8 	bl	80646e4 <HAL_UART_Transmit>
}
 8060954:	3764      	adds	r7, #100	@ 0x64
 8060956:	46bd      	mov	sp, r7
 8060958:	bd90      	pop	{r4, r7, pc}
 806095a:	bf00      	nop
 806095c:	080a0000 	.word	0x080a0000
 8060960:	deadbeef 	.word	0xdeadbeef
 8060964:	08065d60 	.word	0x08065d60
 8060968:	24000158 	.word	0x24000158
 806096c:	08065d84 	.word	0x08065d84

08060970 <user_code_go_back_to_bootloader>:


void user_code_go_back_to_bootloader(uint8_t* buffer){
 8060970:	b580      	push	{r7, lr}
 8060972:	b088      	sub	sp, #32
 8060974:	af00      	add	r7, sp, #0
 8060976:	6078      	str	r0, [r7, #4]
	uint32_t len = buffer[0] + 1;
 8060978:	687b      	ldr	r3, [r7, #4]
 806097a:	781b      	ldrb	r3, [r3, #0]
 806097c:	3301      	adds	r3, #1
 806097e:	61fb      	str	r3, [r7, #28]
	uint32_t crc_host = crc32(buffer, len - 4);
 8060980:	69fb      	ldr	r3, [r7, #28]
 8060982:	3b04      	subs	r3, #4
 8060984:	4619      	mov	r1, r3
 8060986:	6878      	ldr	r0, [r7, #4]
 8060988:	f7ff ff00 	bl	806078c <crc32>
 806098c:	61b8      	str	r0, [r7, #24]
	uint32_t crc_recv = 0;
 806098e:	2300      	movs	r3, #0
 8060990:	60fb      	str	r3, [r7, #12]
	memcpy(&crc_recv, &buffer[len - 4], 4);
 8060992:	69fb      	ldr	r3, [r7, #28]
 8060994:	3b04      	subs	r3, #4
 8060996:	687a      	ldr	r2, [r7, #4]
 8060998:	4413      	add	r3, r2
 806099a:	681b      	ldr	r3, [r3, #0]
 806099c:	60fb      	str	r3, [r7, #12]
	if (crc_host == crc_recv) {
 806099e:	68fb      	ldr	r3, [r7, #12]
 80609a0:	69ba      	ldr	r2, [r7, #24]
 80609a2:	429a      	cmp	r2, r3
 80609a4:	d111      	bne.n	80609ca <user_code_go_back_to_bootloader+0x5a>
		const char *msg = "Preparing to go back to bootloader\r\n";
 80609a6:	4b11      	ldr	r3, [pc, #68]	@ (80609ec <user_code_go_back_to_bootloader+0x7c>)
 80609a8:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80609aa:	6938      	ldr	r0, [r7, #16]
 80609ac:	f7ff fd1e 	bl	80603ec <strlen>
 80609b0:	4603      	mov	r3, r0
 80609b2:	b29a      	uxth	r2, r3
 80609b4:	f04f 33ff 	mov.w	r3, #4294967295
 80609b8:	6939      	ldr	r1, [r7, #16]
 80609ba:	480d      	ldr	r0, [pc, #52]	@ (80609f0 <user_code_go_back_to_bootloader+0x80>)
 80609bc:	f003 fe92 	bl	80646e4 <HAL_UART_Transmit>
		set_user_to_bl_flag();
 80609c0:	f7ff ff96 	bl	80608f0 <set_user_to_bl_flag>
		jump_to_bl_code_uart();
 80609c4:	f7ff ff1e 	bl	8060804 <jump_to_bl_code_uart>
	} else {
		const char *msg = "CRC failed\r\n";
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	}
}
 80609c8:	e00c      	b.n	80609e4 <user_code_go_back_to_bootloader+0x74>
		const char *msg = "CRC failed\r\n";
 80609ca:	4b0a      	ldr	r3, [pc, #40]	@ (80609f4 <user_code_go_back_to_bootloader+0x84>)
 80609cc:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80609ce:	6978      	ldr	r0, [r7, #20]
 80609d0:	f7ff fd0c 	bl	80603ec <strlen>
 80609d4:	4603      	mov	r3, r0
 80609d6:	b29a      	uxth	r2, r3
 80609d8:	f04f 33ff 	mov.w	r3, #4294967295
 80609dc:	6979      	ldr	r1, [r7, #20]
 80609de:	4804      	ldr	r0, [pc, #16]	@ (80609f0 <user_code_go_back_to_bootloader+0x80>)
 80609e0:	f003 fe80 	bl	80646e4 <HAL_UART_Transmit>
}
 80609e4:	bf00      	nop
 80609e6:	3720      	adds	r7, #32
 80609e8:	46bd      	mov	sp, r7
 80609ea:	bd80      	pop	{r7, pc}
 80609ec:	08065d90 	.word	0x08065d90
 80609f0:	24000158 	.word	0x24000158
 80609f4:	08065db8 	.word	0x08065db8

080609f8 <processing_uart_command>:
void processing_uart_command(){
 80609f8:	b580      	push	{r7, lr}
 80609fa:	b082      	sub	sp, #8
 80609fc:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 80609fe:	2300      	movs	r3, #0
 8060a00:	71fb      	strb	r3, [r7, #7]
	while(1){
	memset(user_buffer, 0, 300);
 8060a02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8060a06:	2100      	movs	r1, #0
 8060a08:	480f      	ldr	r0, [pc, #60]	@ (8060a48 <processing_uart_command+0x50>)
 8060a0a:	f005 f951 	bl	8065cb0 <memset>
	HAL_UART_Receive(&huart1, user_buffer, 1, HAL_MAX_DELAY);
 8060a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8060a12:	2201      	movs	r2, #1
 8060a14:	490c      	ldr	r1, [pc, #48]	@ (8060a48 <processing_uart_command+0x50>)
 8060a16:	480d      	ldr	r0, [pc, #52]	@ (8060a4c <processing_uart_command+0x54>)
 8060a18:	f003 fef2 	bl	8064800 <HAL_UART_Receive>
	rcv_len = user_buffer[0];
 8060a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8060a48 <processing_uart_command+0x50>)
 8060a1e:	781b      	ldrb	r3, [r3, #0]
 8060a20:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(&huart1, &user_buffer[1], rcv_len, HAL_MAX_DELAY);
 8060a22:	79fb      	ldrb	r3, [r7, #7]
 8060a24:	b29a      	uxth	r2, r3
 8060a26:	f04f 33ff 	mov.w	r3, #4294967295
 8060a2a:	4909      	ldr	r1, [pc, #36]	@ (8060a50 <processing_uart_command+0x58>)
 8060a2c:	4807      	ldr	r0, [pc, #28]	@ (8060a4c <processing_uart_command+0x54>)
 8060a2e:	f003 fee7 	bl	8064800 <HAL_UART_Receive>
	switch(user_buffer[1]){
 8060a32:	4b05      	ldr	r3, [pc, #20]	@ (8060a48 <processing_uart_command+0x50>)
 8060a34:	785b      	ldrb	r3, [r3, #1]
 8060a36:	2b56      	cmp	r3, #86	@ 0x56
 8060a38:	d103      	bne.n	8060a42 <processing_uart_command+0x4a>
	case USER_GOBACK_BL:
		user_code_go_back_to_bootloader(user_buffer);
 8060a3a:	4803      	ldr	r0, [pc, #12]	@ (8060a48 <processing_uart_command+0x50>)
 8060a3c:	f7ff ff98 	bl	8060970 <user_code_go_back_to_bootloader>
		break;
 8060a40:	e000      	b.n	8060a44 <processing_uart_command+0x4c>
	default:
		break;
 8060a42:	bf00      	nop
	memset(user_buffer, 0, 300);
 8060a44:	e7dd      	b.n	8060a02 <processing_uart_command+0xa>
 8060a46:	bf00      	nop
 8060a48:	2400002c 	.word	0x2400002c
 8060a4c:	24000158 	.word	0x24000158
 8060a50:	2400002d 	.word	0x2400002d

08060a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8060a54:	b580      	push	{r7, lr}
 8060a56:	b082      	sub	sp, #8
 8060a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8060a5a:	f000 f939 	bl	8060cd0 <MPU_Config>
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8060a5e:	f000 faf1 	bl	8061044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8060a62:	f000 f823 	bl	8060aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8060a66:	f000 f8dd 	bl	8060c24 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8060a6a:	f000 f88f 	bl	8060b8c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char *command = "This is the user applicaiton 1\n";
 8060a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8060aa0 <main+0x4c>)
 8060a70:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, command, strlen(command), HAL_MAX_DELAY);
 8060a72:	6878      	ldr	r0, [r7, #4]
 8060a74:	f7ff fcba 	bl	80603ec <strlen>
 8060a78:	4603      	mov	r3, r0
 8060a7a:	b29a      	uxth	r2, r3
 8060a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8060a80:	6879      	ldr	r1, [r7, #4]
 8060a82:	4808      	ldr	r0, [pc, #32]	@ (8060aa4 <main+0x50>)
 8060a84:	f003 fe2e 	bl	80646e4 <HAL_UART_Transmit>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8060a88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8060a8c:	4806      	ldr	r0, [pc, #24]	@ (8060aa8 <main+0x54>)
 8060a8e:	f001 f85c 	bl	8061b4a <HAL_GPIO_TogglePin>
  set_run_ok_flag();
 8060a92:	f7ff fedf 	bl	8060854 <set_run_ok_flag>
  processing_uart_command();
 8060a96:	f7ff ffaf 	bl	80609f8 <processing_uart_command>

  while (1)
 8060a9a:	bf00      	nop
 8060a9c:	e7fd      	b.n	8060a9a <main+0x46>
 8060a9e:	bf00      	nop
 8060aa0:	08065dc8 	.word	0x08065dc8
 8060aa4:	24000158 	.word	0x24000158
 8060aa8:	58020000 	.word	0x58020000

08060aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8060aac:	b580      	push	{r7, lr}
 8060aae:	b09c      	sub	sp, #112	@ 0x70
 8060ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8060ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8060ab6:	224c      	movs	r2, #76	@ 0x4c
 8060ab8:	2100      	movs	r1, #0
 8060aba:	4618      	mov	r0, r3
 8060abc:	f005 f8f8 	bl	8065cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8060ac0:	1d3b      	adds	r3, r7, #4
 8060ac2:	2220      	movs	r2, #32
 8060ac4:	2100      	movs	r1, #0
 8060ac6:	4618      	mov	r0, r3
 8060ac8:	f005 f8f2 	bl	8065cb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8060acc:	2002      	movs	r0, #2
 8060ace:	f001 f857 	bl	8061b80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8060ad2:	2300      	movs	r3, #0
 8060ad4:	603b      	str	r3, [r7, #0]
 8060ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8060b88 <SystemClock_Config+0xdc>)
 8060ad8:	699b      	ldr	r3, [r3, #24]
 8060ada:	4a2b      	ldr	r2, [pc, #172]	@ (8060b88 <SystemClock_Config+0xdc>)
 8060adc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8060ae0:	6193      	str	r3, [r2, #24]
 8060ae2:	4b29      	ldr	r3, [pc, #164]	@ (8060b88 <SystemClock_Config+0xdc>)
 8060ae4:	699b      	ldr	r3, [r3, #24]
 8060ae6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8060aea:	603b      	str	r3, [r7, #0]
 8060aec:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8060aee:	bf00      	nop
 8060af0:	4b25      	ldr	r3, [pc, #148]	@ (8060b88 <SystemClock_Config+0xdc>)
 8060af2:	699b      	ldr	r3, [r3, #24]
 8060af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8060af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8060afc:	d1f8      	bne.n	8060af0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8060afe:	2302      	movs	r3, #2
 8060b00:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8060b02:	2301      	movs	r3, #1
 8060b04:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8060b06:	2340      	movs	r3, #64	@ 0x40
 8060b08:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8060b0a:	2302      	movs	r3, #2
 8060b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8060b0e:	2300      	movs	r3, #0
 8060b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8060b12:	2304      	movs	r3, #4
 8060b14:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8060b16:	2322      	movs	r3, #34	@ 0x22
 8060b18:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8060b1a:	2301      	movs	r3, #1
 8060b1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8060b1e:	2302      	movs	r3, #2
 8060b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8060b22:	2302      	movs	r3, #2
 8060b24:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8060b26:	230c      	movs	r3, #12
 8060b28:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8060b2a:	2300      	movs	r3, #0
 8060b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8060b2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8060b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8060b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8060b38:	4618      	mov	r0, r3
 8060b3a:	f001 f85b 	bl	8061bf4 <HAL_RCC_OscConfig>
 8060b3e:	4603      	mov	r3, r0
 8060b40:	2b00      	cmp	r3, #0
 8060b42:	d001      	beq.n	8060b48 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8060b44:	f000 f8f0 	bl	8060d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8060b48:	233f      	movs	r3, #63	@ 0x3f
 8060b4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8060b4c:	2303      	movs	r3, #3
 8060b4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8060b50:	2300      	movs	r3, #0
 8060b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8060b54:	2308      	movs	r3, #8
 8060b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8060b58:	2340      	movs	r3, #64	@ 0x40
 8060b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8060b5c:	2340      	movs	r3, #64	@ 0x40
 8060b5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8060b60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8060b64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8060b66:	2340      	movs	r3, #64	@ 0x40
 8060b68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8060b6a:	1d3b      	adds	r3, r7, #4
 8060b6c:	2103      	movs	r1, #3
 8060b6e:	4618      	mov	r0, r3
 8060b70:	f001 fc1a 	bl	80623a8 <HAL_RCC_ClockConfig>
 8060b74:	4603      	mov	r3, r0
 8060b76:	2b00      	cmp	r3, #0
 8060b78:	d001      	beq.n	8060b7e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8060b7a:	f000 f8d5 	bl	8060d28 <Error_Handler>
  }
}
 8060b7e:	bf00      	nop
 8060b80:	3770      	adds	r7, #112	@ 0x70
 8060b82:	46bd      	mov	sp, r7
 8060b84:	bd80      	pop	{r7, pc}
 8060b86:	bf00      	nop
 8060b88:	58024800 	.word	0x58024800

08060b8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART1_UART_Init(void)
{
 8060b8c:	b580      	push	{r7, lr}
 8060b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8060b90:	4b22      	ldr	r3, [pc, #136]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060b92:	4a23      	ldr	r2, [pc, #140]	@ (8060c20 <MX_USART1_UART_Init+0x94>)
 8060b94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8060b96:	4b21      	ldr	r3, [pc, #132]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060b98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8060b9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8060b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060ba0:	2200      	movs	r2, #0
 8060ba2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8060ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060ba6:	2200      	movs	r2, #0
 8060ba8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8060baa:	4b1c      	ldr	r3, [pc, #112]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060bac:	2200      	movs	r2, #0
 8060bae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8060bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060bb2:	220c      	movs	r2, #12
 8060bb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8060bb6:	4b19      	ldr	r3, [pc, #100]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060bb8:	2200      	movs	r2, #0
 8060bba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8060bbc:	4b17      	ldr	r3, [pc, #92]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060bbe:	2200      	movs	r2, #0
 8060bc0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8060bc2:	4b16      	ldr	r3, [pc, #88]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060bc4:	2200      	movs	r2, #0
 8060bc6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8060bc8:	4b14      	ldr	r3, [pc, #80]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060bca:	2200      	movs	r2, #0
 8060bcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8060bce:	4b13      	ldr	r3, [pc, #76]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060bd0:	2200      	movs	r2, #0
 8060bd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8060bd4:	4811      	ldr	r0, [pc, #68]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060bd6:	f003 fd35 	bl	8064644 <HAL_UART_Init>
 8060bda:	4603      	mov	r3, r0
 8060bdc:	2b00      	cmp	r3, #0
 8060bde:	d001      	beq.n	8060be4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8060be0:	f000 f8a2 	bl	8060d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8060be4:	2100      	movs	r1, #0
 8060be6:	480d      	ldr	r0, [pc, #52]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060be8:	f004 ff97 	bl	8065b1a <HAL_UARTEx_SetTxFifoThreshold>
 8060bec:	4603      	mov	r3, r0
 8060bee:	2b00      	cmp	r3, #0
 8060bf0:	d001      	beq.n	8060bf6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8060bf2:	f000 f899 	bl	8060d28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8060bf6:	2100      	movs	r1, #0
 8060bf8:	4808      	ldr	r0, [pc, #32]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060bfa:	f004 ffcc 	bl	8065b96 <HAL_UARTEx_SetRxFifoThreshold>
 8060bfe:	4603      	mov	r3, r0
 8060c00:	2b00      	cmp	r3, #0
 8060c02:	d001      	beq.n	8060c08 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8060c04:	f000 f890 	bl	8060d28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8060c08:	4804      	ldr	r0, [pc, #16]	@ (8060c1c <MX_USART1_UART_Init+0x90>)
 8060c0a:	f004 ff4d 	bl	8065aa8 <HAL_UARTEx_DisableFifoMode>
 8060c0e:	4603      	mov	r3, r0
 8060c10:	2b00      	cmp	r3, #0
 8060c12:	d001      	beq.n	8060c18 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8060c14:	f000 f888 	bl	8060d28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8060c18:	bf00      	nop
 8060c1a:	bd80      	pop	{r7, pc}
 8060c1c:	24000158 	.word	0x24000158
 8060c20:	40011000 	.word	0x40011000

08060c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8060c24:	b580      	push	{r7, lr}
 8060c26:	b088      	sub	sp, #32
 8060c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8060c2a:	f107 030c 	add.w	r3, r7, #12
 8060c2e:	2200      	movs	r2, #0
 8060c30:	601a      	str	r2, [r3, #0]
 8060c32:	605a      	str	r2, [r3, #4]
 8060c34:	609a      	str	r2, [r3, #8]
 8060c36:	60da      	str	r2, [r3, #12]
 8060c38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8060c3a:	4b23      	ldr	r3, [pc, #140]	@ (8060cc8 <MX_GPIO_Init+0xa4>)
 8060c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8060c40:	4a21      	ldr	r2, [pc, #132]	@ (8060cc8 <MX_GPIO_Init+0xa4>)
 8060c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8060c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8060c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8060cc8 <MX_GPIO_Init+0xa4>)
 8060c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8060c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8060c54:	60bb      	str	r3, [r7, #8]
 8060c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8060c58:	4b1b      	ldr	r3, [pc, #108]	@ (8060cc8 <MX_GPIO_Init+0xa4>)
 8060c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8060c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8060cc8 <MX_GPIO_Init+0xa4>)
 8060c60:	f043 0302 	orr.w	r3, r3, #2
 8060c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8060c68:	4b17      	ldr	r3, [pc, #92]	@ (8060cc8 <MX_GPIO_Init+0xa4>)
 8060c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8060c6e:	f003 0302 	and.w	r3, r3, #2
 8060c72:	607b      	str	r3, [r7, #4]
 8060c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8060c76:	4b14      	ldr	r3, [pc, #80]	@ (8060cc8 <MX_GPIO_Init+0xa4>)
 8060c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8060c7c:	4a12      	ldr	r2, [pc, #72]	@ (8060cc8 <MX_GPIO_Init+0xa4>)
 8060c7e:	f043 0301 	orr.w	r3, r3, #1
 8060c82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8060c86:	4b10      	ldr	r3, [pc, #64]	@ (8060cc8 <MX_GPIO_Init+0xa4>)
 8060c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8060c8c:	f003 0301 	and.w	r3, r3, #1
 8060c90:	603b      	str	r3, [r7, #0]
 8060c92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8060c94:	2200      	movs	r2, #0
 8060c96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8060c9a:	480c      	ldr	r0, [pc, #48]	@ (8060ccc <MX_GPIO_Init+0xa8>)
 8060c9c:	f000 ff3c 	bl	8061b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8060ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8060ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8060ca6:	2301      	movs	r3, #1
 8060ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060caa:	2300      	movs	r3, #0
 8060cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8060cae:	2300      	movs	r3, #0
 8060cb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8060cb2:	f107 030c 	add.w	r3, r7, #12
 8060cb6:	4619      	mov	r1, r3
 8060cb8:	4804      	ldr	r0, [pc, #16]	@ (8060ccc <MX_GPIO_Init+0xa8>)
 8060cba:	f000 fd85 	bl	80617c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8060cbe:	bf00      	nop
 8060cc0:	3720      	adds	r7, #32
 8060cc2:	46bd      	mov	sp, r7
 8060cc4:	bd80      	pop	{r7, pc}
 8060cc6:	bf00      	nop
 8060cc8:	58024400 	.word	0x58024400
 8060ccc:	58020000 	.word	0x58020000

08060cd0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8060cd0:	b580      	push	{r7, lr}
 8060cd2:	b084      	sub	sp, #16
 8060cd4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8060cd6:	463b      	mov	r3, r7
 8060cd8:	2200      	movs	r2, #0
 8060cda:	601a      	str	r2, [r3, #0]
 8060cdc:	605a      	str	r2, [r3, #4]
 8060cde:	609a      	str	r2, [r3, #8]
 8060ce0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8060ce2:	f000 fb25 	bl	8061330 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8060ce6:	2301      	movs	r3, #1
 8060ce8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8060cea:	2300      	movs	r3, #0
 8060cec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8060cee:	2300      	movs	r3, #0
 8060cf0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8060cf2:	231f      	movs	r3, #31
 8060cf4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8060cf6:	2387      	movs	r3, #135	@ 0x87
 8060cf8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8060cfa:	2300      	movs	r3, #0
 8060cfc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8060cfe:	2303      	movs	r3, #3
 8060d00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8060d02:	2301      	movs	r3, #1
 8060d04:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8060d06:	2301      	movs	r3, #1
 8060d08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8060d0a:	2300      	movs	r3, #0
 8060d0c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8060d0e:	2300      	movs	r3, #0
 8060d10:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8060d12:	463b      	mov	r3, r7
 8060d14:	4618      	mov	r0, r3
 8060d16:	f000 fb43 	bl	80613a0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8060d1a:	2004      	movs	r0, #4
 8060d1c:	f000 fb20 	bl	8061360 <HAL_MPU_Enable>

}
 8060d20:	bf00      	nop
 8060d22:	3710      	adds	r7, #16
 8060d24:	46bd      	mov	sp, r7
 8060d26:	bd80      	pop	{r7, pc}

08060d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8060d28:	b480      	push	{r7}
 8060d2a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8060d2c:	b672      	cpsid	i
}
 8060d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8060d30:	bf00      	nop
 8060d32:	e7fd      	b.n	8060d30 <Error_Handler+0x8>

08060d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8060d34:	b480      	push	{r7}
 8060d36:	b083      	sub	sp, #12
 8060d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8060d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8060d64 <HAL_MspInit+0x30>)
 8060d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8060d40:	4a08      	ldr	r2, [pc, #32]	@ (8060d64 <HAL_MspInit+0x30>)
 8060d42:	f043 0302 	orr.w	r3, r3, #2
 8060d46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8060d4a:	4b06      	ldr	r3, [pc, #24]	@ (8060d64 <HAL_MspInit+0x30>)
 8060d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8060d50:	f003 0302 	and.w	r3, r3, #2
 8060d54:	607b      	str	r3, [r7, #4]
 8060d56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8060d58:	bf00      	nop
 8060d5a:	370c      	adds	r7, #12
 8060d5c:	46bd      	mov	sp, r7
 8060d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060d62:	4770      	bx	lr
 8060d64:	58024400 	.word	0x58024400

08060d68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8060d68:	b580      	push	{r7, lr}
 8060d6a:	b0b8      	sub	sp, #224	@ 0xe0
 8060d6c:	af00      	add	r7, sp, #0
 8060d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8060d70:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8060d74:	2200      	movs	r2, #0
 8060d76:	601a      	str	r2, [r3, #0]
 8060d78:	605a      	str	r2, [r3, #4]
 8060d7a:	609a      	str	r2, [r3, #8]
 8060d7c:	60da      	str	r2, [r3, #12]
 8060d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8060d80:	f107 0310 	add.w	r3, r7, #16
 8060d84:	22b8      	movs	r2, #184	@ 0xb8
 8060d86:	2100      	movs	r1, #0
 8060d88:	4618      	mov	r0, r3
 8060d8a:	f004 ff91 	bl	8065cb0 <memset>
  if(huart->Instance==USART1)
 8060d8e:	687b      	ldr	r3, [r7, #4]
 8060d90:	681b      	ldr	r3, [r3, #0]
 8060d92:	4a27      	ldr	r2, [pc, #156]	@ (8060e30 <HAL_UART_MspInit+0xc8>)
 8060d94:	4293      	cmp	r3, r2
 8060d96:	d146      	bne.n	8060e26 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8060d98:	f04f 0201 	mov.w	r2, #1
 8060d9c:	f04f 0300 	mov.w	r3, #0
 8060da0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8060da4:	2300      	movs	r3, #0
 8060da6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8060daa:	f107 0310 	add.w	r3, r7, #16
 8060dae:	4618      	mov	r0, r3
 8060db0:	f001 fe86 	bl	8062ac0 <HAL_RCCEx_PeriphCLKConfig>
 8060db4:	4603      	mov	r3, r0
 8060db6:	2b00      	cmp	r3, #0
 8060db8:	d001      	beq.n	8060dbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8060dba:	f7ff ffb5 	bl	8060d28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8060dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8060e34 <HAL_UART_MspInit+0xcc>)
 8060dc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8060dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8060e34 <HAL_UART_MspInit+0xcc>)
 8060dc6:	f043 0310 	orr.w	r3, r3, #16
 8060dca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8060dce:	4b19      	ldr	r3, [pc, #100]	@ (8060e34 <HAL_UART_MspInit+0xcc>)
 8060dd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8060dd4:	f003 0310 	and.w	r3, r3, #16
 8060dd8:	60fb      	str	r3, [r7, #12]
 8060dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8060ddc:	4b15      	ldr	r3, [pc, #84]	@ (8060e34 <HAL_UART_MspInit+0xcc>)
 8060dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8060de2:	4a14      	ldr	r2, [pc, #80]	@ (8060e34 <HAL_UART_MspInit+0xcc>)
 8060de4:	f043 0302 	orr.w	r3, r3, #2
 8060de8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8060dec:	4b11      	ldr	r3, [pc, #68]	@ (8060e34 <HAL_UART_MspInit+0xcc>)
 8060dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8060df2:	f003 0302 	and.w	r3, r3, #2
 8060df6:	60bb      	str	r3, [r7, #8]
 8060df8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8060dfa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8060dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8060e02:	2302      	movs	r3, #2
 8060e04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8060e08:	2300      	movs	r3, #0
 8060e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8060e0e:	2300      	movs	r3, #0
 8060e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8060e14:	2304      	movs	r3, #4
 8060e16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8060e1a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8060e1e:	4619      	mov	r1, r3
 8060e20:	4805      	ldr	r0, [pc, #20]	@ (8060e38 <HAL_UART_MspInit+0xd0>)
 8060e22:	f000 fcd1 	bl	80617c8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8060e26:	bf00      	nop
 8060e28:	37e0      	adds	r7, #224	@ 0xe0
 8060e2a:	46bd      	mov	sp, r7
 8060e2c:	bd80      	pop	{r7, pc}
 8060e2e:	bf00      	nop
 8060e30:	40011000 	.word	0x40011000
 8060e34:	58024400 	.word	0x58024400
 8060e38:	58020400 	.word	0x58020400

08060e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8060e3c:	b480      	push	{r7}
 8060e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8060e40:	bf00      	nop
 8060e42:	e7fd      	b.n	8060e40 <NMI_Handler+0x4>

08060e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8060e44:	b480      	push	{r7}
 8060e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8060e48:	bf00      	nop
 8060e4a:	e7fd      	b.n	8060e48 <HardFault_Handler+0x4>

08060e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8060e4c:	b480      	push	{r7}
 8060e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8060e50:	bf00      	nop
 8060e52:	e7fd      	b.n	8060e50 <MemManage_Handler+0x4>

08060e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8060e54:	b480      	push	{r7}
 8060e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8060e58:	bf00      	nop
 8060e5a:	e7fd      	b.n	8060e58 <BusFault_Handler+0x4>

08060e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8060e5c:	b480      	push	{r7}
 8060e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8060e60:	bf00      	nop
 8060e62:	e7fd      	b.n	8060e60 <UsageFault_Handler+0x4>

08060e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8060e64:	b480      	push	{r7}
 8060e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8060e68:	bf00      	nop
 8060e6a:	46bd      	mov	sp, r7
 8060e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060e70:	4770      	bx	lr

08060e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8060e72:	b480      	push	{r7}
 8060e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8060e76:	bf00      	nop
 8060e78:	46bd      	mov	sp, r7
 8060e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060e7e:	4770      	bx	lr

08060e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8060e80:	b480      	push	{r7}
 8060e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8060e84:	bf00      	nop
 8060e86:	46bd      	mov	sp, r7
 8060e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060e8c:	4770      	bx	lr

08060e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8060e8e:	b580      	push	{r7, lr}
 8060e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8060e92:	f000 f949 	bl	8061128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8060e96:	bf00      	nop
 8060e98:	bd80      	pop	{r7, pc}
	...

08060e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8060e9c:	b480      	push	{r7}
 8060e9e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8060ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8060f9c <SystemInit+0x100>)
 8060ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8060ea6:	4a3d      	ldr	r2, [pc, #244]	@ (8060f9c <SystemInit+0x100>)
 8060ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8060eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8060eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8060fa0 <SystemInit+0x104>)
 8060eb2:	681b      	ldr	r3, [r3, #0]
 8060eb4:	f003 030f 	and.w	r3, r3, #15
 8060eb8:	2b06      	cmp	r3, #6
 8060eba:	d807      	bhi.n	8060ecc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8060ebc:	4b38      	ldr	r3, [pc, #224]	@ (8060fa0 <SystemInit+0x104>)
 8060ebe:	681b      	ldr	r3, [r3, #0]
 8060ec0:	f023 030f 	bic.w	r3, r3, #15
 8060ec4:	4a36      	ldr	r2, [pc, #216]	@ (8060fa0 <SystemInit+0x104>)
 8060ec6:	f043 0307 	orr.w	r3, r3, #7
 8060eca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8060ecc:	4b35      	ldr	r3, [pc, #212]	@ (8060fa4 <SystemInit+0x108>)
 8060ece:	681b      	ldr	r3, [r3, #0]
 8060ed0:	4a34      	ldr	r2, [pc, #208]	@ (8060fa4 <SystemInit+0x108>)
 8060ed2:	f043 0301 	orr.w	r3, r3, #1
 8060ed6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8060ed8:	4b32      	ldr	r3, [pc, #200]	@ (8060fa4 <SystemInit+0x108>)
 8060eda:	2200      	movs	r2, #0
 8060edc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8060ede:	4b31      	ldr	r3, [pc, #196]	@ (8060fa4 <SystemInit+0x108>)
 8060ee0:	681a      	ldr	r2, [r3, #0]
 8060ee2:	4930      	ldr	r1, [pc, #192]	@ (8060fa4 <SystemInit+0x108>)
 8060ee4:	4b30      	ldr	r3, [pc, #192]	@ (8060fa8 <SystemInit+0x10c>)
 8060ee6:	4013      	ands	r3, r2
 8060ee8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8060eea:	4b2d      	ldr	r3, [pc, #180]	@ (8060fa0 <SystemInit+0x104>)
 8060eec:	681b      	ldr	r3, [r3, #0]
 8060eee:	f003 0308 	and.w	r3, r3, #8
 8060ef2:	2b00      	cmp	r3, #0
 8060ef4:	d007      	beq.n	8060f06 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8060ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8060fa0 <SystemInit+0x104>)
 8060ef8:	681b      	ldr	r3, [r3, #0]
 8060efa:	f023 030f 	bic.w	r3, r3, #15
 8060efe:	4a28      	ldr	r2, [pc, #160]	@ (8060fa0 <SystemInit+0x104>)
 8060f00:	f043 0307 	orr.w	r3, r3, #7
 8060f04:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8060f06:	4b27      	ldr	r3, [pc, #156]	@ (8060fa4 <SystemInit+0x108>)
 8060f08:	2200      	movs	r2, #0
 8060f0a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8060f0c:	4b25      	ldr	r3, [pc, #148]	@ (8060fa4 <SystemInit+0x108>)
 8060f0e:	2200      	movs	r2, #0
 8060f10:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8060f12:	4b24      	ldr	r3, [pc, #144]	@ (8060fa4 <SystemInit+0x108>)
 8060f14:	2200      	movs	r2, #0
 8060f16:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8060f18:	4b22      	ldr	r3, [pc, #136]	@ (8060fa4 <SystemInit+0x108>)
 8060f1a:	4a24      	ldr	r2, [pc, #144]	@ (8060fac <SystemInit+0x110>)
 8060f1c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8060f1e:	4b21      	ldr	r3, [pc, #132]	@ (8060fa4 <SystemInit+0x108>)
 8060f20:	4a23      	ldr	r2, [pc, #140]	@ (8060fb0 <SystemInit+0x114>)
 8060f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8060f24:	4b1f      	ldr	r3, [pc, #124]	@ (8060fa4 <SystemInit+0x108>)
 8060f26:	4a23      	ldr	r2, [pc, #140]	@ (8060fb4 <SystemInit+0x118>)
 8060f28:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8060f2a:	4b1e      	ldr	r3, [pc, #120]	@ (8060fa4 <SystemInit+0x108>)
 8060f2c:	2200      	movs	r2, #0
 8060f2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8060f30:	4b1c      	ldr	r3, [pc, #112]	@ (8060fa4 <SystemInit+0x108>)
 8060f32:	4a20      	ldr	r2, [pc, #128]	@ (8060fb4 <SystemInit+0x118>)
 8060f34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8060f36:	4b1b      	ldr	r3, [pc, #108]	@ (8060fa4 <SystemInit+0x108>)
 8060f38:	2200      	movs	r2, #0
 8060f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8060f3c:	4b19      	ldr	r3, [pc, #100]	@ (8060fa4 <SystemInit+0x108>)
 8060f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8060fb4 <SystemInit+0x118>)
 8060f40:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8060f42:	4b18      	ldr	r3, [pc, #96]	@ (8060fa4 <SystemInit+0x108>)
 8060f44:	2200      	movs	r2, #0
 8060f46:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8060f48:	4b16      	ldr	r3, [pc, #88]	@ (8060fa4 <SystemInit+0x108>)
 8060f4a:	681b      	ldr	r3, [r3, #0]
 8060f4c:	4a15      	ldr	r2, [pc, #84]	@ (8060fa4 <SystemInit+0x108>)
 8060f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8060f52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8060f54:	4b13      	ldr	r3, [pc, #76]	@ (8060fa4 <SystemInit+0x108>)
 8060f56:	2200      	movs	r2, #0
 8060f58:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8060f5a:	4b12      	ldr	r3, [pc, #72]	@ (8060fa4 <SystemInit+0x108>)
 8060f5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8060f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8060f64:	2b00      	cmp	r3, #0
 8060f66:	d113      	bne.n	8060f90 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8060f68:	4b0e      	ldr	r3, [pc, #56]	@ (8060fa4 <SystemInit+0x108>)
 8060f6a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8060f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8060fa4 <SystemInit+0x108>)
 8060f70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8060f74:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8060f78:	4b0f      	ldr	r3, [pc, #60]	@ (8060fb8 <SystemInit+0x11c>)
 8060f7a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8060f7e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8060f80:	4b08      	ldr	r3, [pc, #32]	@ (8060fa4 <SystemInit+0x108>)
 8060f82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8060f86:	4a07      	ldr	r2, [pc, #28]	@ (8060fa4 <SystemInit+0x108>)
 8060f88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8060f8c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8060f90:	bf00      	nop
 8060f92:	46bd      	mov	sp, r7
 8060f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060f98:	4770      	bx	lr
 8060f9a:	bf00      	nop
 8060f9c:	e000ed00 	.word	0xe000ed00
 8060fa0:	52002000 	.word	0x52002000
 8060fa4:	58024400 	.word	0x58024400
 8060fa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8060fac:	02020200 	.word	0x02020200
 8060fb0:	01ff0000 	.word	0x01ff0000
 8060fb4:	01010280 	.word	0x01010280
 8060fb8:	52004000 	.word	0x52004000

08060fbc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8060fbc:	b480      	push	{r7}
 8060fbe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8060fc0:	4b09      	ldr	r3, [pc, #36]	@ (8060fe8 <ExitRun0Mode+0x2c>)
 8060fc2:	68db      	ldr	r3, [r3, #12]
 8060fc4:	4a08      	ldr	r2, [pc, #32]	@ (8060fe8 <ExitRun0Mode+0x2c>)
 8060fc6:	f043 0302 	orr.w	r3, r3, #2
 8060fca:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8060fcc:	bf00      	nop
 8060fce:	4b06      	ldr	r3, [pc, #24]	@ (8060fe8 <ExitRun0Mode+0x2c>)
 8060fd0:	685b      	ldr	r3, [r3, #4]
 8060fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8060fd6:	2b00      	cmp	r3, #0
 8060fd8:	d0f9      	beq.n	8060fce <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8060fda:	bf00      	nop
 8060fdc:	bf00      	nop
 8060fde:	46bd      	mov	sp, r7
 8060fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060fe4:	4770      	bx	lr
 8060fe6:	bf00      	nop
 8060fe8:	58024800 	.word	0x58024800

08060fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8060fec:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8061028 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8060ff0:	f7ff ffe4 	bl	8060fbc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8060ff4:	f7ff ff52 	bl	8060e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8060ff8:	480c      	ldr	r0, [pc, #48]	@ (806102c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8060ffa:	490d      	ldr	r1, [pc, #52]	@ (8061030 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8060ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8061034 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8060ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8061000:	e002      	b.n	8061008 <LoopCopyDataInit>

08061002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8061002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8061004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8061006:	3304      	adds	r3, #4

08061008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8061008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 806100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 806100c:	d3f9      	bcc.n	8061002 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 806100e:	4a0a      	ldr	r2, [pc, #40]	@ (8061038 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8061010:	4c0a      	ldr	r4, [pc, #40]	@ (806103c <LoopFillZerobss+0x22>)
  movs r3, #0
 8061012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8061014:	e001      	b.n	806101a <LoopFillZerobss>

08061016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8061016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8061018:	3204      	adds	r2, #4

0806101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 806101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 806101c:	d3fb      	bcc.n	8061016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 806101e:	f004 fe4f 	bl	8065cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8061022:	f7ff fd17 	bl	8060a54 <main>
  bx  lr
 8061026:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8061028:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 806102c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8061030:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8061034:	08066230 	.word	0x08066230
  ldr r2, =_sbss
 8061038:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 806103c:	2400020c 	.word	0x2400020c

08061040 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8061040:	e7fe      	b.n	8061040 <ADC3_IRQHandler>
	...

08061044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8061044:	b580      	push	{r7, lr}
 8061046:	b082      	sub	sp, #8
 8061048:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 806104a:	2003      	movs	r0, #3
 806104c:	f000 f93e 	bl	80612cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8061050:	f001 fb60 	bl	8062714 <HAL_RCC_GetSysClockFreq>
 8061054:	4602      	mov	r2, r0
 8061056:	4b15      	ldr	r3, [pc, #84]	@ (80610ac <HAL_Init+0x68>)
 8061058:	699b      	ldr	r3, [r3, #24]
 806105a:	0a1b      	lsrs	r3, r3, #8
 806105c:	f003 030f 	and.w	r3, r3, #15
 8061060:	4913      	ldr	r1, [pc, #76]	@ (80610b0 <HAL_Init+0x6c>)
 8061062:	5ccb      	ldrb	r3, [r1, r3]
 8061064:	f003 031f 	and.w	r3, r3, #31
 8061068:	fa22 f303 	lsr.w	r3, r2, r3
 806106c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 806106e:	4b0f      	ldr	r3, [pc, #60]	@ (80610ac <HAL_Init+0x68>)
 8061070:	699b      	ldr	r3, [r3, #24]
 8061072:	f003 030f 	and.w	r3, r3, #15
 8061076:	4a0e      	ldr	r2, [pc, #56]	@ (80610b0 <HAL_Init+0x6c>)
 8061078:	5cd3      	ldrb	r3, [r2, r3]
 806107a:	f003 031f 	and.w	r3, r3, #31
 806107e:	687a      	ldr	r2, [r7, #4]
 8061080:	fa22 f303 	lsr.w	r3, r2, r3
 8061084:	4a0b      	ldr	r2, [pc, #44]	@ (80610b4 <HAL_Init+0x70>)
 8061086:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8061088:	4a0b      	ldr	r2, [pc, #44]	@ (80610b8 <HAL_Init+0x74>)
 806108a:	687b      	ldr	r3, [r7, #4]
 806108c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 806108e:	200f      	movs	r0, #15
 8061090:	f000 f814 	bl	80610bc <HAL_InitTick>
 8061094:	4603      	mov	r3, r0
 8061096:	2b00      	cmp	r3, #0
 8061098:	d001      	beq.n	806109e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 806109a:	2301      	movs	r3, #1
 806109c:	e002      	b.n	80610a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 806109e:	f7ff fe49 	bl	8060d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80610a2:	2300      	movs	r3, #0
}
 80610a4:	4618      	mov	r0, r3
 80610a6:	3708      	adds	r7, #8
 80610a8:	46bd      	mov	sp, r7
 80610aa:	bd80      	pop	{r7, pc}
 80610ac:	58024400 	.word	0x58024400
 80610b0:	080661e8 	.word	0x080661e8
 80610b4:	24000004 	.word	0x24000004
 80610b8:	24000000 	.word	0x24000000

080610bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80610bc:	b580      	push	{r7, lr}
 80610be:	b082      	sub	sp, #8
 80610c0:	af00      	add	r7, sp, #0
 80610c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80610c4:	4b15      	ldr	r3, [pc, #84]	@ (806111c <HAL_InitTick+0x60>)
 80610c6:	781b      	ldrb	r3, [r3, #0]
 80610c8:	2b00      	cmp	r3, #0
 80610ca:	d101      	bne.n	80610d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80610cc:	2301      	movs	r3, #1
 80610ce:	e021      	b.n	8061114 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80610d0:	4b13      	ldr	r3, [pc, #76]	@ (8061120 <HAL_InitTick+0x64>)
 80610d2:	681a      	ldr	r2, [r3, #0]
 80610d4:	4b11      	ldr	r3, [pc, #68]	@ (806111c <HAL_InitTick+0x60>)
 80610d6:	781b      	ldrb	r3, [r3, #0]
 80610d8:	4619      	mov	r1, r3
 80610da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80610de:	fbb3 f3f1 	udiv	r3, r3, r1
 80610e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80610e6:	4618      	mov	r0, r3
 80610e8:	f000 f915 	bl	8061316 <HAL_SYSTICK_Config>
 80610ec:	4603      	mov	r3, r0
 80610ee:	2b00      	cmp	r3, #0
 80610f0:	d001      	beq.n	80610f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80610f2:	2301      	movs	r3, #1
 80610f4:	e00e      	b.n	8061114 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80610f6:	687b      	ldr	r3, [r7, #4]
 80610f8:	2b0f      	cmp	r3, #15
 80610fa:	d80a      	bhi.n	8061112 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80610fc:	2200      	movs	r2, #0
 80610fe:	6879      	ldr	r1, [r7, #4]
 8061100:	f04f 30ff 	mov.w	r0, #4294967295
 8061104:	f000 f8ed 	bl	80612e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8061108:	4a06      	ldr	r2, [pc, #24]	@ (8061124 <HAL_InitTick+0x68>)
 806110a:	687b      	ldr	r3, [r7, #4]
 806110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 806110e:	2300      	movs	r3, #0
 8061110:	e000      	b.n	8061114 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8061112:	2301      	movs	r3, #1
}
 8061114:	4618      	mov	r0, r3
 8061116:	3708      	adds	r7, #8
 8061118:	46bd      	mov	sp, r7
 806111a:	bd80      	pop	{r7, pc}
 806111c:	2400000c 	.word	0x2400000c
 8061120:	24000000 	.word	0x24000000
 8061124:	24000008 	.word	0x24000008

08061128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8061128:	b480      	push	{r7}
 806112a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 806112c:	4b06      	ldr	r3, [pc, #24]	@ (8061148 <HAL_IncTick+0x20>)
 806112e:	781b      	ldrb	r3, [r3, #0]
 8061130:	461a      	mov	r2, r3
 8061132:	4b06      	ldr	r3, [pc, #24]	@ (806114c <HAL_IncTick+0x24>)
 8061134:	681b      	ldr	r3, [r3, #0]
 8061136:	4413      	add	r3, r2
 8061138:	4a04      	ldr	r2, [pc, #16]	@ (806114c <HAL_IncTick+0x24>)
 806113a:	6013      	str	r3, [r2, #0]
}
 806113c:	bf00      	nop
 806113e:	46bd      	mov	sp, r7
 8061140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061144:	4770      	bx	lr
 8061146:	bf00      	nop
 8061148:	2400000c 	.word	0x2400000c
 806114c:	240001ec 	.word	0x240001ec

08061150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8061150:	b480      	push	{r7}
 8061152:	af00      	add	r7, sp, #0
  return uwTick;
 8061154:	4b03      	ldr	r3, [pc, #12]	@ (8061164 <HAL_GetTick+0x14>)
 8061156:	681b      	ldr	r3, [r3, #0]
}
 8061158:	4618      	mov	r0, r3
 806115a:	46bd      	mov	sp, r7
 806115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061160:	4770      	bx	lr
 8061162:	bf00      	nop
 8061164:	240001ec 	.word	0x240001ec

08061168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8061168:	b480      	push	{r7}
 806116a:	b085      	sub	sp, #20
 806116c:	af00      	add	r7, sp, #0
 806116e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8061170:	687b      	ldr	r3, [r7, #4]
 8061172:	f003 0307 	and.w	r3, r3, #7
 8061176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8061178:	4b0b      	ldr	r3, [pc, #44]	@ (80611a8 <__NVIC_SetPriorityGrouping+0x40>)
 806117a:	68db      	ldr	r3, [r3, #12]
 806117c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 806117e:	68ba      	ldr	r2, [r7, #8]
 8061180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8061184:	4013      	ands	r3, r2
 8061186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8061188:	68fb      	ldr	r3, [r7, #12]
 806118a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 806118c:	68bb      	ldr	r3, [r7, #8]
 806118e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8061190:	4b06      	ldr	r3, [pc, #24]	@ (80611ac <__NVIC_SetPriorityGrouping+0x44>)
 8061192:	4313      	orrs	r3, r2
 8061194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8061196:	4a04      	ldr	r2, [pc, #16]	@ (80611a8 <__NVIC_SetPriorityGrouping+0x40>)
 8061198:	68bb      	ldr	r3, [r7, #8]
 806119a:	60d3      	str	r3, [r2, #12]
}
 806119c:	bf00      	nop
 806119e:	3714      	adds	r7, #20
 80611a0:	46bd      	mov	sp, r7
 80611a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80611a6:	4770      	bx	lr
 80611a8:	e000ed00 	.word	0xe000ed00
 80611ac:	05fa0000 	.word	0x05fa0000

080611b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80611b0:	b480      	push	{r7}
 80611b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80611b4:	4b04      	ldr	r3, [pc, #16]	@ (80611c8 <__NVIC_GetPriorityGrouping+0x18>)
 80611b6:	68db      	ldr	r3, [r3, #12]
 80611b8:	0a1b      	lsrs	r3, r3, #8
 80611ba:	f003 0307 	and.w	r3, r3, #7
}
 80611be:	4618      	mov	r0, r3
 80611c0:	46bd      	mov	sp, r7
 80611c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80611c6:	4770      	bx	lr
 80611c8:	e000ed00 	.word	0xe000ed00

080611cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80611cc:	b480      	push	{r7}
 80611ce:	b083      	sub	sp, #12
 80611d0:	af00      	add	r7, sp, #0
 80611d2:	4603      	mov	r3, r0
 80611d4:	6039      	str	r1, [r7, #0]
 80611d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80611d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80611dc:	2b00      	cmp	r3, #0
 80611de:	db0a      	blt.n	80611f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80611e0:	683b      	ldr	r3, [r7, #0]
 80611e2:	b2da      	uxtb	r2, r3
 80611e4:	490c      	ldr	r1, [pc, #48]	@ (8061218 <__NVIC_SetPriority+0x4c>)
 80611e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80611ea:	0112      	lsls	r2, r2, #4
 80611ec:	b2d2      	uxtb	r2, r2
 80611ee:	440b      	add	r3, r1
 80611f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80611f4:	e00a      	b.n	806120c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80611f6:	683b      	ldr	r3, [r7, #0]
 80611f8:	b2da      	uxtb	r2, r3
 80611fa:	4908      	ldr	r1, [pc, #32]	@ (806121c <__NVIC_SetPriority+0x50>)
 80611fc:	88fb      	ldrh	r3, [r7, #6]
 80611fe:	f003 030f 	and.w	r3, r3, #15
 8061202:	3b04      	subs	r3, #4
 8061204:	0112      	lsls	r2, r2, #4
 8061206:	b2d2      	uxtb	r2, r2
 8061208:	440b      	add	r3, r1
 806120a:	761a      	strb	r2, [r3, #24]
}
 806120c:	bf00      	nop
 806120e:	370c      	adds	r7, #12
 8061210:	46bd      	mov	sp, r7
 8061212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061216:	4770      	bx	lr
 8061218:	e000e100 	.word	0xe000e100
 806121c:	e000ed00 	.word	0xe000ed00

08061220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8061220:	b480      	push	{r7}
 8061222:	b089      	sub	sp, #36	@ 0x24
 8061224:	af00      	add	r7, sp, #0
 8061226:	60f8      	str	r0, [r7, #12]
 8061228:	60b9      	str	r1, [r7, #8]
 806122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 806122c:	68fb      	ldr	r3, [r7, #12]
 806122e:	f003 0307 	and.w	r3, r3, #7
 8061232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8061234:	69fb      	ldr	r3, [r7, #28]
 8061236:	f1c3 0307 	rsb	r3, r3, #7
 806123a:	2b04      	cmp	r3, #4
 806123c:	bf28      	it	cs
 806123e:	2304      	movcs	r3, #4
 8061240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8061242:	69fb      	ldr	r3, [r7, #28]
 8061244:	3304      	adds	r3, #4
 8061246:	2b06      	cmp	r3, #6
 8061248:	d902      	bls.n	8061250 <NVIC_EncodePriority+0x30>
 806124a:	69fb      	ldr	r3, [r7, #28]
 806124c:	3b03      	subs	r3, #3
 806124e:	e000      	b.n	8061252 <NVIC_EncodePriority+0x32>
 8061250:	2300      	movs	r3, #0
 8061252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8061254:	f04f 32ff 	mov.w	r2, #4294967295
 8061258:	69bb      	ldr	r3, [r7, #24]
 806125a:	fa02 f303 	lsl.w	r3, r2, r3
 806125e:	43da      	mvns	r2, r3
 8061260:	68bb      	ldr	r3, [r7, #8]
 8061262:	401a      	ands	r2, r3
 8061264:	697b      	ldr	r3, [r7, #20]
 8061266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8061268:	f04f 31ff 	mov.w	r1, #4294967295
 806126c:	697b      	ldr	r3, [r7, #20]
 806126e:	fa01 f303 	lsl.w	r3, r1, r3
 8061272:	43d9      	mvns	r1, r3
 8061274:	687b      	ldr	r3, [r7, #4]
 8061276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8061278:	4313      	orrs	r3, r2
         );
}
 806127a:	4618      	mov	r0, r3
 806127c:	3724      	adds	r7, #36	@ 0x24
 806127e:	46bd      	mov	sp, r7
 8061280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061284:	4770      	bx	lr
	...

08061288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8061288:	b580      	push	{r7, lr}
 806128a:	b082      	sub	sp, #8
 806128c:	af00      	add	r7, sp, #0
 806128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8061290:	687b      	ldr	r3, [r7, #4]
 8061292:	3b01      	subs	r3, #1
 8061294:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8061298:	d301      	bcc.n	806129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 806129a:	2301      	movs	r3, #1
 806129c:	e00f      	b.n	80612be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 806129e:	4a0a      	ldr	r2, [pc, #40]	@ (80612c8 <SysTick_Config+0x40>)
 80612a0:	687b      	ldr	r3, [r7, #4]
 80612a2:	3b01      	subs	r3, #1
 80612a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80612a6:	210f      	movs	r1, #15
 80612a8:	f04f 30ff 	mov.w	r0, #4294967295
 80612ac:	f7ff ff8e 	bl	80611cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80612b0:	4b05      	ldr	r3, [pc, #20]	@ (80612c8 <SysTick_Config+0x40>)
 80612b2:	2200      	movs	r2, #0
 80612b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80612b6:	4b04      	ldr	r3, [pc, #16]	@ (80612c8 <SysTick_Config+0x40>)
 80612b8:	2207      	movs	r2, #7
 80612ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80612bc:	2300      	movs	r3, #0
}
 80612be:	4618      	mov	r0, r3
 80612c0:	3708      	adds	r7, #8
 80612c2:	46bd      	mov	sp, r7
 80612c4:	bd80      	pop	{r7, pc}
 80612c6:	bf00      	nop
 80612c8:	e000e010 	.word	0xe000e010

080612cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80612cc:	b580      	push	{r7, lr}
 80612ce:	b082      	sub	sp, #8
 80612d0:	af00      	add	r7, sp, #0
 80612d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80612d4:	6878      	ldr	r0, [r7, #4]
 80612d6:	f7ff ff47 	bl	8061168 <__NVIC_SetPriorityGrouping>
}
 80612da:	bf00      	nop
 80612dc:	3708      	adds	r7, #8
 80612de:	46bd      	mov	sp, r7
 80612e0:	bd80      	pop	{r7, pc}

080612e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80612e2:	b580      	push	{r7, lr}
 80612e4:	b086      	sub	sp, #24
 80612e6:	af00      	add	r7, sp, #0
 80612e8:	4603      	mov	r3, r0
 80612ea:	60b9      	str	r1, [r7, #8]
 80612ec:	607a      	str	r2, [r7, #4]
 80612ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80612f0:	f7ff ff5e 	bl	80611b0 <__NVIC_GetPriorityGrouping>
 80612f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80612f6:	687a      	ldr	r2, [r7, #4]
 80612f8:	68b9      	ldr	r1, [r7, #8]
 80612fa:	6978      	ldr	r0, [r7, #20]
 80612fc:	f7ff ff90 	bl	8061220 <NVIC_EncodePriority>
 8061300:	4602      	mov	r2, r0
 8061302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8061306:	4611      	mov	r1, r2
 8061308:	4618      	mov	r0, r3
 806130a:	f7ff ff5f 	bl	80611cc <__NVIC_SetPriority>
}
 806130e:	bf00      	nop
 8061310:	3718      	adds	r7, #24
 8061312:	46bd      	mov	sp, r7
 8061314:	bd80      	pop	{r7, pc}

08061316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8061316:	b580      	push	{r7, lr}
 8061318:	b082      	sub	sp, #8
 806131a:	af00      	add	r7, sp, #0
 806131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 806131e:	6878      	ldr	r0, [r7, #4]
 8061320:	f7ff ffb2 	bl	8061288 <SysTick_Config>
 8061324:	4603      	mov	r3, r0
}
 8061326:	4618      	mov	r0, r3
 8061328:	3708      	adds	r7, #8
 806132a:	46bd      	mov	sp, r7
 806132c:	bd80      	pop	{r7, pc}
	...

08061330 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8061330:	b480      	push	{r7}
 8061332:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8061334:	f3bf 8f5f 	dmb	sy
}
 8061338:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 806133a:	4b07      	ldr	r3, [pc, #28]	@ (8061358 <HAL_MPU_Disable+0x28>)
 806133c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806133e:	4a06      	ldr	r2, [pc, #24]	@ (8061358 <HAL_MPU_Disable+0x28>)
 8061340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8061344:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8061346:	4b05      	ldr	r3, [pc, #20]	@ (806135c <HAL_MPU_Disable+0x2c>)
 8061348:	2200      	movs	r2, #0
 806134a:	605a      	str	r2, [r3, #4]
}
 806134c:	bf00      	nop
 806134e:	46bd      	mov	sp, r7
 8061350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061354:	4770      	bx	lr
 8061356:	bf00      	nop
 8061358:	e000ed00 	.word	0xe000ed00
 806135c:	e000ed90 	.word	0xe000ed90

08061360 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8061360:	b480      	push	{r7}
 8061362:	b083      	sub	sp, #12
 8061364:	af00      	add	r7, sp, #0
 8061366:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8061368:	4a0b      	ldr	r2, [pc, #44]	@ (8061398 <HAL_MPU_Enable+0x38>)
 806136a:	687b      	ldr	r3, [r7, #4]
 806136c:	f043 0301 	orr.w	r3, r3, #1
 8061370:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8061372:	4b0a      	ldr	r3, [pc, #40]	@ (806139c <HAL_MPU_Enable+0x3c>)
 8061374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8061376:	4a09      	ldr	r2, [pc, #36]	@ (806139c <HAL_MPU_Enable+0x3c>)
 8061378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 806137c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 806137e:	f3bf 8f4f 	dsb	sy
}
 8061382:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8061384:	f3bf 8f6f 	isb	sy
}
 8061388:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 806138a:	bf00      	nop
 806138c:	370c      	adds	r7, #12
 806138e:	46bd      	mov	sp, r7
 8061390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061394:	4770      	bx	lr
 8061396:	bf00      	nop
 8061398:	e000ed90 	.word	0xe000ed90
 806139c:	e000ed00 	.word	0xe000ed00

080613a0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80613a0:	b480      	push	{r7}
 80613a2:	b083      	sub	sp, #12
 80613a4:	af00      	add	r7, sp, #0
 80613a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80613a8:	687b      	ldr	r3, [r7, #4]
 80613aa:	785a      	ldrb	r2, [r3, #1]
 80613ac:	4b1b      	ldr	r3, [pc, #108]	@ (806141c <HAL_MPU_ConfigRegion+0x7c>)
 80613ae:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80613b0:	4b1a      	ldr	r3, [pc, #104]	@ (806141c <HAL_MPU_ConfigRegion+0x7c>)
 80613b2:	691b      	ldr	r3, [r3, #16]
 80613b4:	4a19      	ldr	r2, [pc, #100]	@ (806141c <HAL_MPU_ConfigRegion+0x7c>)
 80613b6:	f023 0301 	bic.w	r3, r3, #1
 80613ba:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80613bc:	4a17      	ldr	r2, [pc, #92]	@ (806141c <HAL_MPU_ConfigRegion+0x7c>)
 80613be:	687b      	ldr	r3, [r7, #4]
 80613c0:	685b      	ldr	r3, [r3, #4]
 80613c2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80613c4:	687b      	ldr	r3, [r7, #4]
 80613c6:	7b1b      	ldrb	r3, [r3, #12]
 80613c8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80613ca:	687b      	ldr	r3, [r7, #4]
 80613cc:	7adb      	ldrb	r3, [r3, #11]
 80613ce:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80613d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80613d2:	687b      	ldr	r3, [r7, #4]
 80613d4:	7a9b      	ldrb	r3, [r3, #10]
 80613d6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80613d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80613da:	687b      	ldr	r3, [r7, #4]
 80613dc:	7b5b      	ldrb	r3, [r3, #13]
 80613de:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80613e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80613e2:	687b      	ldr	r3, [r7, #4]
 80613e4:	7b9b      	ldrb	r3, [r3, #14]
 80613e6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80613e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80613ea:	687b      	ldr	r3, [r7, #4]
 80613ec:	7bdb      	ldrb	r3, [r3, #15]
 80613ee:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80613f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80613f2:	687b      	ldr	r3, [r7, #4]
 80613f4:	7a5b      	ldrb	r3, [r3, #9]
 80613f6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80613f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80613fa:	687b      	ldr	r3, [r7, #4]
 80613fc:	7a1b      	ldrb	r3, [r3, #8]
 80613fe:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8061400:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8061402:	687a      	ldr	r2, [r7, #4]
 8061404:	7812      	ldrb	r2, [r2, #0]
 8061406:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8061408:	4a04      	ldr	r2, [pc, #16]	@ (806141c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 806140a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 806140c:	6113      	str	r3, [r2, #16]
}
 806140e:	bf00      	nop
 8061410:	370c      	adds	r7, #12
 8061412:	46bd      	mov	sp, r7
 8061414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061418:	4770      	bx	lr
 806141a:	bf00      	nop
 806141c:	e000ed90 	.word	0xe000ed90

08061420 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8061420:	b580      	push	{r7, lr}
 8061422:	b08a      	sub	sp, #40	@ 0x28
 8061424:	af00      	add	r7, sp, #0
 8061426:	60f8      	str	r0, [r7, #12]
 8061428:	60b9      	str	r1, [r7, #8]
 806142a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 806142c:	68bb      	ldr	r3, [r7, #8]
 806142e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8061430:	687b      	ldr	r3, [r7, #4]
 8061432:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8061434:	2308      	movs	r3, #8
 8061436:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8061438:	4b2f      	ldr	r3, [pc, #188]	@ (80614f8 <HAL_FLASH_Program+0xd8>)
 806143a:	7d1b      	ldrb	r3, [r3, #20]
 806143c:	2b01      	cmp	r3, #1
 806143e:	d101      	bne.n	8061444 <HAL_FLASH_Program+0x24>
 8061440:	2302      	movs	r3, #2
 8061442:	e054      	b.n	80614ee <HAL_FLASH_Program+0xce>
 8061444:	4b2c      	ldr	r3, [pc, #176]	@ (80614f8 <HAL_FLASH_Program+0xd8>)
 8061446:	2201      	movs	r2, #1
 8061448:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 806144a:	68bb      	ldr	r3, [r7, #8]
 806144c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8061450:	d316      	bcc.n	8061480 <HAL_FLASH_Program+0x60>
 8061452:	68bb      	ldr	r3, [r7, #8]
 8061454:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8061458:	d212      	bcs.n	8061480 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 806145a:	2301      	movs	r3, #1
 806145c:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 806145e:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8061460:	4b25      	ldr	r3, [pc, #148]	@ (80614f8 <HAL_FLASH_Program+0xd8>)
 8061462:	2200      	movs	r2, #0
 8061464:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8061466:	6979      	ldr	r1, [r7, #20]
 8061468:	f24c 3050 	movw	r0, #50000	@ 0xc350
 806146c:	f000 f882 	bl	8061574 <FLASH_WaitForLastOperation>
 8061470:	4603      	mov	r3, r0
 8061472:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8061476:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 806147a:	2b00      	cmp	r3, #0
 806147c:	d132      	bne.n	80614e4 <HAL_FLASH_Program+0xc4>
 806147e:	e001      	b.n	8061484 <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 8061480:	2301      	movs	r3, #1
 8061482:	e034      	b.n	80614ee <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8061484:	4b1d      	ldr	r3, [pc, #116]	@ (80614fc <HAL_FLASH_Program+0xdc>)
 8061486:	68db      	ldr	r3, [r3, #12]
 8061488:	4a1c      	ldr	r2, [pc, #112]	@ (80614fc <HAL_FLASH_Program+0xdc>)
 806148a:	f043 0302 	orr.w	r3, r3, #2
 806148e:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8061490:	f3bf 8f6f 	isb	sy
}
 8061494:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8061496:	f3bf 8f4f 	dsb	sy
}
 806149a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 806149c:	69fb      	ldr	r3, [r7, #28]
 806149e:	681a      	ldr	r2, [r3, #0]
 80614a0:	6a3b      	ldr	r3, [r7, #32]
 80614a2:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80614a4:	6a3b      	ldr	r3, [r7, #32]
 80614a6:	3304      	adds	r3, #4
 80614a8:	623b      	str	r3, [r7, #32]
        src_addr++;
 80614aa:	69fb      	ldr	r3, [r7, #28]
 80614ac:	3304      	adds	r3, #4
 80614ae:	61fb      	str	r3, [r7, #28]
        row_index--;
 80614b0:	7efb      	ldrb	r3, [r7, #27]
 80614b2:	3b01      	subs	r3, #1
 80614b4:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 80614b6:	7efb      	ldrb	r3, [r7, #27]
 80614b8:	2b00      	cmp	r3, #0
 80614ba:	d1ef      	bne.n	806149c <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 80614bc:	f3bf 8f6f 	isb	sy
}
 80614c0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80614c2:	f3bf 8f4f 	dsb	sy
}
 80614c6:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80614c8:	6979      	ldr	r1, [r7, #20]
 80614ca:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80614ce:	f000 f851 	bl	8061574 <FLASH_WaitForLastOperation>
 80614d2:	4603      	mov	r3, r0
 80614d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80614d8:	4b08      	ldr	r3, [pc, #32]	@ (80614fc <HAL_FLASH_Program+0xdc>)
 80614da:	68db      	ldr	r3, [r3, #12]
 80614dc:	4a07      	ldr	r2, [pc, #28]	@ (80614fc <HAL_FLASH_Program+0xdc>)
 80614de:	f023 0302 	bic.w	r3, r3, #2
 80614e2:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80614e4:	4b04      	ldr	r3, [pc, #16]	@ (80614f8 <HAL_FLASH_Program+0xd8>)
 80614e6:	2200      	movs	r2, #0
 80614e8:	751a      	strb	r2, [r3, #20]

  return status;
 80614ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80614ee:	4618      	mov	r0, r3
 80614f0:	3728      	adds	r7, #40	@ 0x28
 80614f2:	46bd      	mov	sp, r7
 80614f4:	bd80      	pop	{r7, pc}
 80614f6:	bf00      	nop
 80614f8:	240001f0 	.word	0x240001f0
 80614fc:	52002000 	.word	0x52002000

08061500 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8061500:	b480      	push	{r7}
 8061502:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8061504:	4b0c      	ldr	r3, [pc, #48]	@ (8061538 <HAL_FLASH_Unlock+0x38>)
 8061506:	68db      	ldr	r3, [r3, #12]
 8061508:	f003 0301 	and.w	r3, r3, #1
 806150c:	2b00      	cmp	r3, #0
 806150e:	d00d      	beq.n	806152c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8061510:	4b09      	ldr	r3, [pc, #36]	@ (8061538 <HAL_FLASH_Unlock+0x38>)
 8061512:	4a0a      	ldr	r2, [pc, #40]	@ (806153c <HAL_FLASH_Unlock+0x3c>)
 8061514:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8061516:	4b08      	ldr	r3, [pc, #32]	@ (8061538 <HAL_FLASH_Unlock+0x38>)
 8061518:	4a09      	ldr	r2, [pc, #36]	@ (8061540 <HAL_FLASH_Unlock+0x40>)
 806151a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 806151c:	4b06      	ldr	r3, [pc, #24]	@ (8061538 <HAL_FLASH_Unlock+0x38>)
 806151e:	68db      	ldr	r3, [r3, #12]
 8061520:	f003 0301 	and.w	r3, r3, #1
 8061524:	2b00      	cmp	r3, #0
 8061526:	d001      	beq.n	806152c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8061528:	2301      	movs	r3, #1
 806152a:	e000      	b.n	806152e <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 806152c:	2300      	movs	r3, #0
}
 806152e:	4618      	mov	r0, r3
 8061530:	46bd      	mov	sp, r7
 8061532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061536:	4770      	bx	lr
 8061538:	52002000 	.word	0x52002000
 806153c:	45670123 	.word	0x45670123
 8061540:	cdef89ab 	.word	0xcdef89ab

08061544 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8061544:	b480      	push	{r7}
 8061546:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8061548:	4b09      	ldr	r3, [pc, #36]	@ (8061570 <HAL_FLASH_Lock+0x2c>)
 806154a:	68db      	ldr	r3, [r3, #12]
 806154c:	4a08      	ldr	r2, [pc, #32]	@ (8061570 <HAL_FLASH_Lock+0x2c>)
 806154e:	f043 0301 	orr.w	r3, r3, #1
 8061552:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8061554:	4b06      	ldr	r3, [pc, #24]	@ (8061570 <HAL_FLASH_Lock+0x2c>)
 8061556:	68db      	ldr	r3, [r3, #12]
 8061558:	f003 0301 	and.w	r3, r3, #1
 806155c:	2b00      	cmp	r3, #0
 806155e:	d101      	bne.n	8061564 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8061560:	2301      	movs	r3, #1
 8061562:	e000      	b.n	8061566 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8061564:	2300      	movs	r3, #0
}
 8061566:	4618      	mov	r0, r3
 8061568:	46bd      	mov	sp, r7
 806156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806156e:	4770      	bx	lr
 8061570:	52002000 	.word	0x52002000

08061574 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8061574:	b580      	push	{r7, lr}
 8061576:	b086      	sub	sp, #24
 8061578:	af00      	add	r7, sp, #0
 806157a:	6078      	str	r0, [r7, #4]
 806157c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 806157e:	2304      	movs	r3, #4
 8061580:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8061582:	2300      	movs	r3, #0
 8061584:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8061586:	f7ff fde3 	bl	8061150 <HAL_GetTick>
 806158a:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 806158c:	e010      	b.n	80615b0 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 806158e:	687b      	ldr	r3, [r7, #4]
 8061590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8061594:	d00c      	beq.n	80615b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8061596:	f7ff fddb 	bl	8061150 <HAL_GetTick>
 806159a:	4602      	mov	r2, r0
 806159c:	68fb      	ldr	r3, [r7, #12]
 806159e:	1ad3      	subs	r3, r2, r3
 80615a0:	687a      	ldr	r2, [r7, #4]
 80615a2:	429a      	cmp	r2, r3
 80615a4:	d302      	bcc.n	80615ac <FLASH_WaitForLastOperation+0x38>
 80615a6:	687b      	ldr	r3, [r7, #4]
 80615a8:	2b00      	cmp	r3, #0
 80615aa:	d101      	bne.n	80615b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80615ac:	2303      	movs	r3, #3
 80615ae:	e02d      	b.n	806160c <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80615b0:	4b18      	ldr	r3, [pc, #96]	@ (8061614 <FLASH_WaitForLastOperation+0xa0>)
 80615b2:	691a      	ldr	r2, [r3, #16]
 80615b4:	693b      	ldr	r3, [r7, #16]
 80615b6:	4013      	ands	r3, r2
 80615b8:	693a      	ldr	r2, [r7, #16]
 80615ba:	429a      	cmp	r2, r3
 80615bc:	d0e7      	beq.n	806158e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80615be:	683b      	ldr	r3, [r7, #0]
 80615c0:	2b01      	cmp	r3, #1
 80615c2:	d104      	bne.n	80615ce <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80615c4:	4b13      	ldr	r3, [pc, #76]	@ (8061614 <FLASH_WaitForLastOperation+0xa0>)
 80615c6:	691a      	ldr	r2, [r3, #16]
 80615c8:	4b13      	ldr	r3, [pc, #76]	@ (8061618 <FLASH_WaitForLastOperation+0xa4>)
 80615ca:	4013      	ands	r3, r2
 80615cc:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80615ce:	697b      	ldr	r3, [r7, #20]
 80615d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80615d4:	2b00      	cmp	r3, #0
 80615d6:	d00a      	beq.n	80615ee <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80615d8:	4b10      	ldr	r3, [pc, #64]	@ (806161c <FLASH_WaitForLastOperation+0xa8>)
 80615da:	699a      	ldr	r2, [r3, #24]
 80615dc:	697b      	ldr	r3, [r7, #20]
 80615de:	4313      	orrs	r3, r2
 80615e0:	4a0e      	ldr	r2, [pc, #56]	@ (806161c <FLASH_WaitForLastOperation+0xa8>)
 80615e2:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80615e4:	4a0b      	ldr	r2, [pc, #44]	@ (8061614 <FLASH_WaitForLastOperation+0xa0>)
 80615e6:	697b      	ldr	r3, [r7, #20]
 80615e8:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 80615ea:	2301      	movs	r3, #1
 80615ec:	e00e      	b.n	806160c <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80615ee:	683b      	ldr	r3, [r7, #0]
 80615f0:	2b01      	cmp	r3, #1
 80615f2:	d10a      	bne.n	806160a <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80615f4:	4b07      	ldr	r3, [pc, #28]	@ (8061614 <FLASH_WaitForLastOperation+0xa0>)
 80615f6:	691b      	ldr	r3, [r3, #16]
 80615f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80615fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8061600:	d103      	bne.n	806160a <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8061602:	4b04      	ldr	r3, [pc, #16]	@ (8061614 <FLASH_WaitForLastOperation+0xa0>)
 8061604:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8061608:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 806160a:	2300      	movs	r3, #0
}
 806160c:	4618      	mov	r0, r3
 806160e:	3718      	adds	r7, #24
 8061610:	46bd      	mov	sp, r7
 8061612:	bd80      	pop	{r7, pc}
 8061614:	52002000 	.word	0x52002000
 8061618:	17ee0000 	.word	0x17ee0000
 806161c:	240001f0 	.word	0x240001f0

08061620 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8061620:	b580      	push	{r7, lr}
 8061622:	b084      	sub	sp, #16
 8061624:	af00      	add	r7, sp, #0
 8061626:	6078      	str	r0, [r7, #4]
 8061628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 806162a:	2300      	movs	r3, #0
 806162c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 806162e:	4b3f      	ldr	r3, [pc, #252]	@ (806172c <HAL_FLASHEx_Erase+0x10c>)
 8061630:	7d1b      	ldrb	r3, [r3, #20]
 8061632:	2b01      	cmp	r3, #1
 8061634:	d101      	bne.n	806163a <HAL_FLASHEx_Erase+0x1a>
 8061636:	2302      	movs	r3, #2
 8061638:	e074      	b.n	8061724 <HAL_FLASHEx_Erase+0x104>
 806163a:	4b3c      	ldr	r3, [pc, #240]	@ (806172c <HAL_FLASHEx_Erase+0x10c>)
 806163c:	2201      	movs	r2, #1
 806163e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8061640:	4b3a      	ldr	r3, [pc, #232]	@ (806172c <HAL_FLASHEx_Erase+0x10c>)
 8061642:	2200      	movs	r2, #0
 8061644:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8061646:	687b      	ldr	r3, [r7, #4]
 8061648:	685b      	ldr	r3, [r3, #4]
 806164a:	f003 0301 	and.w	r3, r3, #1
 806164e:	2b00      	cmp	r3, #0
 8061650:	d009      	beq.n	8061666 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8061652:	2101      	movs	r1, #1
 8061654:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8061658:	f7ff ff8c 	bl	8061574 <FLASH_WaitForLastOperation>
 806165c:	4603      	mov	r3, r0
 806165e:	2b00      	cmp	r3, #0
 8061660:	d001      	beq.n	8061666 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8061662:	2301      	movs	r3, #1
 8061664:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8061666:	7bfb      	ldrb	r3, [r7, #15]
 8061668:	2b00      	cmp	r3, #0
 806166a:	d157      	bne.n	806171c <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 806166c:	687b      	ldr	r3, [r7, #4]
 806166e:	681b      	ldr	r3, [r3, #0]
 8061670:	2b01      	cmp	r3, #1
 8061672:	d11e      	bne.n	80616b2 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8061674:	687b      	ldr	r3, [r7, #4]
 8061676:	691a      	ldr	r2, [r3, #16]
 8061678:	687b      	ldr	r3, [r7, #4]
 806167a:	685b      	ldr	r3, [r3, #4]
 806167c:	4619      	mov	r1, r3
 806167e:	4610      	mov	r0, r2
 8061680:	f000 f85a 	bl	8061738 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8061684:	687b      	ldr	r3, [r7, #4]
 8061686:	685b      	ldr	r3, [r3, #4]
 8061688:	f003 0301 	and.w	r3, r3, #1
 806168c:	2b00      	cmp	r3, #0
 806168e:	d045      	beq.n	806171c <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8061690:	2101      	movs	r1, #1
 8061692:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8061696:	f7ff ff6d 	bl	8061574 <FLASH_WaitForLastOperation>
 806169a:	4603      	mov	r3, r0
 806169c:	2b00      	cmp	r3, #0
 806169e:	d001      	beq.n	80616a4 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 80616a0:	2301      	movs	r3, #1
 80616a2:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80616a4:	4b22      	ldr	r3, [pc, #136]	@ (8061730 <HAL_FLASHEx_Erase+0x110>)
 80616a6:	68db      	ldr	r3, [r3, #12]
 80616a8:	4a21      	ldr	r2, [pc, #132]	@ (8061730 <HAL_FLASHEx_Erase+0x110>)
 80616aa:	f023 0308 	bic.w	r3, r3, #8
 80616ae:	60d3      	str	r3, [r2, #12]
 80616b0:	e034      	b.n	806171c <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80616b2:	683b      	ldr	r3, [r7, #0]
 80616b4:	f04f 32ff 	mov.w	r2, #4294967295
 80616b8:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80616ba:	687b      	ldr	r3, [r7, #4]
 80616bc:	689b      	ldr	r3, [r3, #8]
 80616be:	60bb      	str	r3, [r7, #8]
 80616c0:	e024      	b.n	806170c <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80616c2:	687b      	ldr	r3, [r7, #4]
 80616c4:	6859      	ldr	r1, [r3, #4]
 80616c6:	687b      	ldr	r3, [r7, #4]
 80616c8:	691b      	ldr	r3, [r3, #16]
 80616ca:	461a      	mov	r2, r3
 80616cc:	68b8      	ldr	r0, [r7, #8]
 80616ce:	f000 f857 	bl	8061780 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80616d2:	687b      	ldr	r3, [r7, #4]
 80616d4:	685b      	ldr	r3, [r3, #4]
 80616d6:	f003 0301 	and.w	r3, r3, #1
 80616da:	2b00      	cmp	r3, #0
 80616dc:	d00c      	beq.n	80616f8 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80616de:	2101      	movs	r1, #1
 80616e0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80616e4:	f7ff ff46 	bl	8061574 <FLASH_WaitForLastOperation>
 80616e8:	4603      	mov	r3, r0
 80616ea:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80616ec:	4b10      	ldr	r3, [pc, #64]	@ (8061730 <HAL_FLASHEx_Erase+0x110>)
 80616ee:	68da      	ldr	r2, [r3, #12]
 80616f0:	490f      	ldr	r1, [pc, #60]	@ (8061730 <HAL_FLASHEx_Erase+0x110>)
 80616f2:	4b10      	ldr	r3, [pc, #64]	@ (8061734 <HAL_FLASHEx_Erase+0x114>)
 80616f4:	4013      	ands	r3, r2
 80616f6:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80616f8:	7bfb      	ldrb	r3, [r7, #15]
 80616fa:	2b00      	cmp	r3, #0
 80616fc:	d003      	beq.n	8061706 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80616fe:	683b      	ldr	r3, [r7, #0]
 8061700:	68ba      	ldr	r2, [r7, #8]
 8061702:	601a      	str	r2, [r3, #0]
          break;
 8061704:	e00a      	b.n	806171c <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8061706:	68bb      	ldr	r3, [r7, #8]
 8061708:	3301      	adds	r3, #1
 806170a:	60bb      	str	r3, [r7, #8]
 806170c:	687b      	ldr	r3, [r7, #4]
 806170e:	68da      	ldr	r2, [r3, #12]
 8061710:	687b      	ldr	r3, [r7, #4]
 8061712:	689b      	ldr	r3, [r3, #8]
 8061714:	4413      	add	r3, r2
 8061716:	68ba      	ldr	r2, [r7, #8]
 8061718:	429a      	cmp	r2, r3
 806171a:	d3d2      	bcc.n	80616c2 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 806171c:	4b03      	ldr	r3, [pc, #12]	@ (806172c <HAL_FLASHEx_Erase+0x10c>)
 806171e:	2200      	movs	r2, #0
 8061720:	751a      	strb	r2, [r3, #20]

  return status;
 8061722:	7bfb      	ldrb	r3, [r7, #15]
}
 8061724:	4618      	mov	r0, r3
 8061726:	3710      	adds	r7, #16
 8061728:	46bd      	mov	sp, r7
 806172a:	bd80      	pop	{r7, pc}
 806172c:	240001f0 	.word	0x240001f0
 8061730:	52002000 	.word	0x52002000
 8061734:	fffff8fb 	.word	0xfffff8fb

08061738 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8061738:	b480      	push	{r7}
 806173a:	b083      	sub	sp, #12
 806173c:	af00      	add	r7, sp, #0
 806173e:	6078      	str	r0, [r7, #4]
 8061740:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8061742:	683b      	ldr	r3, [r7, #0]
 8061744:	f003 0301 	and.w	r3, r3, #1
 8061748:	2b00      	cmp	r3, #0
 806174a:	d011      	beq.n	8061770 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 806174c:	4b0b      	ldr	r3, [pc, #44]	@ (806177c <FLASH_MassErase+0x44>)
 806174e:	68db      	ldr	r3, [r3, #12]
 8061750:	4a0a      	ldr	r2, [pc, #40]	@ (806177c <FLASH_MassErase+0x44>)
 8061752:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8061756:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8061758:	4b08      	ldr	r3, [pc, #32]	@ (806177c <FLASH_MassErase+0x44>)
 806175a:	68da      	ldr	r2, [r3, #12]
 806175c:	4907      	ldr	r1, [pc, #28]	@ (806177c <FLASH_MassErase+0x44>)
 806175e:	687b      	ldr	r3, [r7, #4]
 8061760:	4313      	orrs	r3, r2
 8061762:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8061764:	4b05      	ldr	r3, [pc, #20]	@ (806177c <FLASH_MassErase+0x44>)
 8061766:	68db      	ldr	r3, [r3, #12]
 8061768:	4a04      	ldr	r2, [pc, #16]	@ (806177c <FLASH_MassErase+0x44>)
 806176a:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 806176e:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8061770:	bf00      	nop
 8061772:	370c      	adds	r7, #12
 8061774:	46bd      	mov	sp, r7
 8061776:	f85d 7b04 	ldr.w	r7, [sp], #4
 806177a:	4770      	bx	lr
 806177c:	52002000 	.word	0x52002000

08061780 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8061780:	b480      	push	{r7}
 8061782:	b085      	sub	sp, #20
 8061784:	af00      	add	r7, sp, #0
 8061786:	60f8      	str	r0, [r7, #12]
 8061788:	60b9      	str	r1, [r7, #8]
 806178a:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 806178c:	68bb      	ldr	r3, [r7, #8]
 806178e:	f003 0301 	and.w	r3, r3, #1
 8061792:	2b00      	cmp	r3, #0
 8061794:	d010      	beq.n	80617b8 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8061796:	4b0b      	ldr	r3, [pc, #44]	@ (80617c4 <FLASH_Erase_Sector+0x44>)
 8061798:	68db      	ldr	r3, [r3, #12]
 806179a:	4a0a      	ldr	r2, [pc, #40]	@ (80617c4 <FLASH_Erase_Sector+0x44>)
 806179c:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 80617a0:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80617a2:	4b08      	ldr	r3, [pc, #32]	@ (80617c4 <FLASH_Erase_Sector+0x44>)
 80617a4:	68da      	ldr	r2, [r3, #12]
 80617a6:	68fb      	ldr	r3, [r7, #12]
 80617a8:	0219      	lsls	r1, r3, #8
 80617aa:	687b      	ldr	r3, [r7, #4]
 80617ac:	430b      	orrs	r3, r1
 80617ae:	4313      	orrs	r3, r2
 80617b0:	4a04      	ldr	r2, [pc, #16]	@ (80617c4 <FLASH_Erase_Sector+0x44>)
 80617b2:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80617b6:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80617b8:	bf00      	nop
 80617ba:	3714      	adds	r7, #20
 80617bc:	46bd      	mov	sp, r7
 80617be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80617c2:	4770      	bx	lr
 80617c4:	52002000 	.word	0x52002000

080617c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80617c8:	b480      	push	{r7}
 80617ca:	b089      	sub	sp, #36	@ 0x24
 80617cc:	af00      	add	r7, sp, #0
 80617ce:	6078      	str	r0, [r7, #4]
 80617d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80617d2:	2300      	movs	r3, #0
 80617d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80617d6:	4b86      	ldr	r3, [pc, #536]	@ (80619f0 <HAL_GPIO_Init+0x228>)
 80617d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80617da:	e18c      	b.n	8061af6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80617dc:	683b      	ldr	r3, [r7, #0]
 80617de:	681a      	ldr	r2, [r3, #0]
 80617e0:	2101      	movs	r1, #1
 80617e2:	69fb      	ldr	r3, [r7, #28]
 80617e4:	fa01 f303 	lsl.w	r3, r1, r3
 80617e8:	4013      	ands	r3, r2
 80617ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80617ec:	693b      	ldr	r3, [r7, #16]
 80617ee:	2b00      	cmp	r3, #0
 80617f0:	f000 817e 	beq.w	8061af0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80617f4:	683b      	ldr	r3, [r7, #0]
 80617f6:	685b      	ldr	r3, [r3, #4]
 80617f8:	f003 0303 	and.w	r3, r3, #3
 80617fc:	2b01      	cmp	r3, #1
 80617fe:	d005      	beq.n	806180c <HAL_GPIO_Init+0x44>
 8061800:	683b      	ldr	r3, [r7, #0]
 8061802:	685b      	ldr	r3, [r3, #4]
 8061804:	f003 0303 	and.w	r3, r3, #3
 8061808:	2b02      	cmp	r3, #2
 806180a:	d130      	bne.n	806186e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 806180c:	687b      	ldr	r3, [r7, #4]
 806180e:	689b      	ldr	r3, [r3, #8]
 8061810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8061812:	69fb      	ldr	r3, [r7, #28]
 8061814:	005b      	lsls	r3, r3, #1
 8061816:	2203      	movs	r2, #3
 8061818:	fa02 f303 	lsl.w	r3, r2, r3
 806181c:	43db      	mvns	r3, r3
 806181e:	69ba      	ldr	r2, [r7, #24]
 8061820:	4013      	ands	r3, r2
 8061822:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8061824:	683b      	ldr	r3, [r7, #0]
 8061826:	68da      	ldr	r2, [r3, #12]
 8061828:	69fb      	ldr	r3, [r7, #28]
 806182a:	005b      	lsls	r3, r3, #1
 806182c:	fa02 f303 	lsl.w	r3, r2, r3
 8061830:	69ba      	ldr	r2, [r7, #24]
 8061832:	4313      	orrs	r3, r2
 8061834:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8061836:	687b      	ldr	r3, [r7, #4]
 8061838:	69ba      	ldr	r2, [r7, #24]
 806183a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 806183c:	687b      	ldr	r3, [r7, #4]
 806183e:	685b      	ldr	r3, [r3, #4]
 8061840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8061842:	2201      	movs	r2, #1
 8061844:	69fb      	ldr	r3, [r7, #28]
 8061846:	fa02 f303 	lsl.w	r3, r2, r3
 806184a:	43db      	mvns	r3, r3
 806184c:	69ba      	ldr	r2, [r7, #24]
 806184e:	4013      	ands	r3, r2
 8061850:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8061852:	683b      	ldr	r3, [r7, #0]
 8061854:	685b      	ldr	r3, [r3, #4]
 8061856:	091b      	lsrs	r3, r3, #4
 8061858:	f003 0201 	and.w	r2, r3, #1
 806185c:	69fb      	ldr	r3, [r7, #28]
 806185e:	fa02 f303 	lsl.w	r3, r2, r3
 8061862:	69ba      	ldr	r2, [r7, #24]
 8061864:	4313      	orrs	r3, r2
 8061866:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8061868:	687b      	ldr	r3, [r7, #4]
 806186a:	69ba      	ldr	r2, [r7, #24]
 806186c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 806186e:	683b      	ldr	r3, [r7, #0]
 8061870:	685b      	ldr	r3, [r3, #4]
 8061872:	f003 0303 	and.w	r3, r3, #3
 8061876:	2b03      	cmp	r3, #3
 8061878:	d017      	beq.n	80618aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 806187a:	687b      	ldr	r3, [r7, #4]
 806187c:	68db      	ldr	r3, [r3, #12]
 806187e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8061880:	69fb      	ldr	r3, [r7, #28]
 8061882:	005b      	lsls	r3, r3, #1
 8061884:	2203      	movs	r2, #3
 8061886:	fa02 f303 	lsl.w	r3, r2, r3
 806188a:	43db      	mvns	r3, r3
 806188c:	69ba      	ldr	r2, [r7, #24]
 806188e:	4013      	ands	r3, r2
 8061890:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8061892:	683b      	ldr	r3, [r7, #0]
 8061894:	689a      	ldr	r2, [r3, #8]
 8061896:	69fb      	ldr	r3, [r7, #28]
 8061898:	005b      	lsls	r3, r3, #1
 806189a:	fa02 f303 	lsl.w	r3, r2, r3
 806189e:	69ba      	ldr	r2, [r7, #24]
 80618a0:	4313      	orrs	r3, r2
 80618a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80618a4:	687b      	ldr	r3, [r7, #4]
 80618a6:	69ba      	ldr	r2, [r7, #24]
 80618a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80618aa:	683b      	ldr	r3, [r7, #0]
 80618ac:	685b      	ldr	r3, [r3, #4]
 80618ae:	f003 0303 	and.w	r3, r3, #3
 80618b2:	2b02      	cmp	r3, #2
 80618b4:	d123      	bne.n	80618fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80618b6:	69fb      	ldr	r3, [r7, #28]
 80618b8:	08da      	lsrs	r2, r3, #3
 80618ba:	687b      	ldr	r3, [r7, #4]
 80618bc:	3208      	adds	r2, #8
 80618be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80618c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80618c4:	69fb      	ldr	r3, [r7, #28]
 80618c6:	f003 0307 	and.w	r3, r3, #7
 80618ca:	009b      	lsls	r3, r3, #2
 80618cc:	220f      	movs	r2, #15
 80618ce:	fa02 f303 	lsl.w	r3, r2, r3
 80618d2:	43db      	mvns	r3, r3
 80618d4:	69ba      	ldr	r2, [r7, #24]
 80618d6:	4013      	ands	r3, r2
 80618d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80618da:	683b      	ldr	r3, [r7, #0]
 80618dc:	691a      	ldr	r2, [r3, #16]
 80618de:	69fb      	ldr	r3, [r7, #28]
 80618e0:	f003 0307 	and.w	r3, r3, #7
 80618e4:	009b      	lsls	r3, r3, #2
 80618e6:	fa02 f303 	lsl.w	r3, r2, r3
 80618ea:	69ba      	ldr	r2, [r7, #24]
 80618ec:	4313      	orrs	r3, r2
 80618ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80618f0:	69fb      	ldr	r3, [r7, #28]
 80618f2:	08da      	lsrs	r2, r3, #3
 80618f4:	687b      	ldr	r3, [r7, #4]
 80618f6:	3208      	adds	r2, #8
 80618f8:	69b9      	ldr	r1, [r7, #24]
 80618fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80618fe:	687b      	ldr	r3, [r7, #4]
 8061900:	681b      	ldr	r3, [r3, #0]
 8061902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8061904:	69fb      	ldr	r3, [r7, #28]
 8061906:	005b      	lsls	r3, r3, #1
 8061908:	2203      	movs	r2, #3
 806190a:	fa02 f303 	lsl.w	r3, r2, r3
 806190e:	43db      	mvns	r3, r3
 8061910:	69ba      	ldr	r2, [r7, #24]
 8061912:	4013      	ands	r3, r2
 8061914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8061916:	683b      	ldr	r3, [r7, #0]
 8061918:	685b      	ldr	r3, [r3, #4]
 806191a:	f003 0203 	and.w	r2, r3, #3
 806191e:	69fb      	ldr	r3, [r7, #28]
 8061920:	005b      	lsls	r3, r3, #1
 8061922:	fa02 f303 	lsl.w	r3, r2, r3
 8061926:	69ba      	ldr	r2, [r7, #24]
 8061928:	4313      	orrs	r3, r2
 806192a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 806192c:	687b      	ldr	r3, [r7, #4]
 806192e:	69ba      	ldr	r2, [r7, #24]
 8061930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8061932:	683b      	ldr	r3, [r7, #0]
 8061934:	685b      	ldr	r3, [r3, #4]
 8061936:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 806193a:	2b00      	cmp	r3, #0
 806193c:	f000 80d8 	beq.w	8061af0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8061940:	4b2c      	ldr	r3, [pc, #176]	@ (80619f4 <HAL_GPIO_Init+0x22c>)
 8061942:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8061946:	4a2b      	ldr	r2, [pc, #172]	@ (80619f4 <HAL_GPIO_Init+0x22c>)
 8061948:	f043 0302 	orr.w	r3, r3, #2
 806194c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8061950:	4b28      	ldr	r3, [pc, #160]	@ (80619f4 <HAL_GPIO_Init+0x22c>)
 8061952:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8061956:	f003 0302 	and.w	r3, r3, #2
 806195a:	60fb      	str	r3, [r7, #12]
 806195c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 806195e:	4a26      	ldr	r2, [pc, #152]	@ (80619f8 <HAL_GPIO_Init+0x230>)
 8061960:	69fb      	ldr	r3, [r7, #28]
 8061962:	089b      	lsrs	r3, r3, #2
 8061964:	3302      	adds	r3, #2
 8061966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 806196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 806196c:	69fb      	ldr	r3, [r7, #28]
 806196e:	f003 0303 	and.w	r3, r3, #3
 8061972:	009b      	lsls	r3, r3, #2
 8061974:	220f      	movs	r2, #15
 8061976:	fa02 f303 	lsl.w	r3, r2, r3
 806197a:	43db      	mvns	r3, r3
 806197c:	69ba      	ldr	r2, [r7, #24]
 806197e:	4013      	ands	r3, r2
 8061980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8061982:	687b      	ldr	r3, [r7, #4]
 8061984:	4a1d      	ldr	r2, [pc, #116]	@ (80619fc <HAL_GPIO_Init+0x234>)
 8061986:	4293      	cmp	r3, r2
 8061988:	d04a      	beq.n	8061a20 <HAL_GPIO_Init+0x258>
 806198a:	687b      	ldr	r3, [r7, #4]
 806198c:	4a1c      	ldr	r2, [pc, #112]	@ (8061a00 <HAL_GPIO_Init+0x238>)
 806198e:	4293      	cmp	r3, r2
 8061990:	d02b      	beq.n	80619ea <HAL_GPIO_Init+0x222>
 8061992:	687b      	ldr	r3, [r7, #4]
 8061994:	4a1b      	ldr	r2, [pc, #108]	@ (8061a04 <HAL_GPIO_Init+0x23c>)
 8061996:	4293      	cmp	r3, r2
 8061998:	d025      	beq.n	80619e6 <HAL_GPIO_Init+0x21e>
 806199a:	687b      	ldr	r3, [r7, #4]
 806199c:	4a1a      	ldr	r2, [pc, #104]	@ (8061a08 <HAL_GPIO_Init+0x240>)
 806199e:	4293      	cmp	r3, r2
 80619a0:	d01f      	beq.n	80619e2 <HAL_GPIO_Init+0x21a>
 80619a2:	687b      	ldr	r3, [r7, #4]
 80619a4:	4a19      	ldr	r2, [pc, #100]	@ (8061a0c <HAL_GPIO_Init+0x244>)
 80619a6:	4293      	cmp	r3, r2
 80619a8:	d019      	beq.n	80619de <HAL_GPIO_Init+0x216>
 80619aa:	687b      	ldr	r3, [r7, #4]
 80619ac:	4a18      	ldr	r2, [pc, #96]	@ (8061a10 <HAL_GPIO_Init+0x248>)
 80619ae:	4293      	cmp	r3, r2
 80619b0:	d013      	beq.n	80619da <HAL_GPIO_Init+0x212>
 80619b2:	687b      	ldr	r3, [r7, #4]
 80619b4:	4a17      	ldr	r2, [pc, #92]	@ (8061a14 <HAL_GPIO_Init+0x24c>)
 80619b6:	4293      	cmp	r3, r2
 80619b8:	d00d      	beq.n	80619d6 <HAL_GPIO_Init+0x20e>
 80619ba:	687b      	ldr	r3, [r7, #4]
 80619bc:	4a16      	ldr	r2, [pc, #88]	@ (8061a18 <HAL_GPIO_Init+0x250>)
 80619be:	4293      	cmp	r3, r2
 80619c0:	d007      	beq.n	80619d2 <HAL_GPIO_Init+0x20a>
 80619c2:	687b      	ldr	r3, [r7, #4]
 80619c4:	4a15      	ldr	r2, [pc, #84]	@ (8061a1c <HAL_GPIO_Init+0x254>)
 80619c6:	4293      	cmp	r3, r2
 80619c8:	d101      	bne.n	80619ce <HAL_GPIO_Init+0x206>
 80619ca:	2309      	movs	r3, #9
 80619cc:	e029      	b.n	8061a22 <HAL_GPIO_Init+0x25a>
 80619ce:	230a      	movs	r3, #10
 80619d0:	e027      	b.n	8061a22 <HAL_GPIO_Init+0x25a>
 80619d2:	2307      	movs	r3, #7
 80619d4:	e025      	b.n	8061a22 <HAL_GPIO_Init+0x25a>
 80619d6:	2306      	movs	r3, #6
 80619d8:	e023      	b.n	8061a22 <HAL_GPIO_Init+0x25a>
 80619da:	2305      	movs	r3, #5
 80619dc:	e021      	b.n	8061a22 <HAL_GPIO_Init+0x25a>
 80619de:	2304      	movs	r3, #4
 80619e0:	e01f      	b.n	8061a22 <HAL_GPIO_Init+0x25a>
 80619e2:	2303      	movs	r3, #3
 80619e4:	e01d      	b.n	8061a22 <HAL_GPIO_Init+0x25a>
 80619e6:	2302      	movs	r3, #2
 80619e8:	e01b      	b.n	8061a22 <HAL_GPIO_Init+0x25a>
 80619ea:	2301      	movs	r3, #1
 80619ec:	e019      	b.n	8061a22 <HAL_GPIO_Init+0x25a>
 80619ee:	bf00      	nop
 80619f0:	58000080 	.word	0x58000080
 80619f4:	58024400 	.word	0x58024400
 80619f8:	58000400 	.word	0x58000400
 80619fc:	58020000 	.word	0x58020000
 8061a00:	58020400 	.word	0x58020400
 8061a04:	58020800 	.word	0x58020800
 8061a08:	58020c00 	.word	0x58020c00
 8061a0c:	58021000 	.word	0x58021000
 8061a10:	58021400 	.word	0x58021400
 8061a14:	58021800 	.word	0x58021800
 8061a18:	58021c00 	.word	0x58021c00
 8061a1c:	58022400 	.word	0x58022400
 8061a20:	2300      	movs	r3, #0
 8061a22:	69fa      	ldr	r2, [r7, #28]
 8061a24:	f002 0203 	and.w	r2, r2, #3
 8061a28:	0092      	lsls	r2, r2, #2
 8061a2a:	4093      	lsls	r3, r2
 8061a2c:	69ba      	ldr	r2, [r7, #24]
 8061a2e:	4313      	orrs	r3, r2
 8061a30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8061a32:	4938      	ldr	r1, [pc, #224]	@ (8061b14 <HAL_GPIO_Init+0x34c>)
 8061a34:	69fb      	ldr	r3, [r7, #28]
 8061a36:	089b      	lsrs	r3, r3, #2
 8061a38:	3302      	adds	r3, #2
 8061a3a:	69ba      	ldr	r2, [r7, #24]
 8061a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8061a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8061a44:	681b      	ldr	r3, [r3, #0]
 8061a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8061a48:	693b      	ldr	r3, [r7, #16]
 8061a4a:	43db      	mvns	r3, r3
 8061a4c:	69ba      	ldr	r2, [r7, #24]
 8061a4e:	4013      	ands	r3, r2
 8061a50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8061a52:	683b      	ldr	r3, [r7, #0]
 8061a54:	685b      	ldr	r3, [r3, #4]
 8061a56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8061a5a:	2b00      	cmp	r3, #0
 8061a5c:	d003      	beq.n	8061a66 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8061a5e:	69ba      	ldr	r2, [r7, #24]
 8061a60:	693b      	ldr	r3, [r7, #16]
 8061a62:	4313      	orrs	r3, r2
 8061a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8061a66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8061a6a:	69bb      	ldr	r3, [r7, #24]
 8061a6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8061a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8061a72:	685b      	ldr	r3, [r3, #4]
 8061a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8061a76:	693b      	ldr	r3, [r7, #16]
 8061a78:	43db      	mvns	r3, r3
 8061a7a:	69ba      	ldr	r2, [r7, #24]
 8061a7c:	4013      	ands	r3, r2
 8061a7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8061a80:	683b      	ldr	r3, [r7, #0]
 8061a82:	685b      	ldr	r3, [r3, #4]
 8061a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8061a88:	2b00      	cmp	r3, #0
 8061a8a:	d003      	beq.n	8061a94 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8061a8c:	69ba      	ldr	r2, [r7, #24]
 8061a8e:	693b      	ldr	r3, [r7, #16]
 8061a90:	4313      	orrs	r3, r2
 8061a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8061a94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8061a98:	69bb      	ldr	r3, [r7, #24]
 8061a9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8061a9c:	697b      	ldr	r3, [r7, #20]
 8061a9e:	685b      	ldr	r3, [r3, #4]
 8061aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8061aa2:	693b      	ldr	r3, [r7, #16]
 8061aa4:	43db      	mvns	r3, r3
 8061aa6:	69ba      	ldr	r2, [r7, #24]
 8061aa8:	4013      	ands	r3, r2
 8061aaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8061aac:	683b      	ldr	r3, [r7, #0]
 8061aae:	685b      	ldr	r3, [r3, #4]
 8061ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8061ab4:	2b00      	cmp	r3, #0
 8061ab6:	d003      	beq.n	8061ac0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8061ab8:	69ba      	ldr	r2, [r7, #24]
 8061aba:	693b      	ldr	r3, [r7, #16]
 8061abc:	4313      	orrs	r3, r2
 8061abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8061ac0:	697b      	ldr	r3, [r7, #20]
 8061ac2:	69ba      	ldr	r2, [r7, #24]
 8061ac4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8061ac6:	697b      	ldr	r3, [r7, #20]
 8061ac8:	681b      	ldr	r3, [r3, #0]
 8061aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8061acc:	693b      	ldr	r3, [r7, #16]
 8061ace:	43db      	mvns	r3, r3
 8061ad0:	69ba      	ldr	r2, [r7, #24]
 8061ad2:	4013      	ands	r3, r2
 8061ad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8061ad6:	683b      	ldr	r3, [r7, #0]
 8061ad8:	685b      	ldr	r3, [r3, #4]
 8061ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8061ade:	2b00      	cmp	r3, #0
 8061ae0:	d003      	beq.n	8061aea <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8061ae2:	69ba      	ldr	r2, [r7, #24]
 8061ae4:	693b      	ldr	r3, [r7, #16]
 8061ae6:	4313      	orrs	r3, r2
 8061ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8061aea:	697b      	ldr	r3, [r7, #20]
 8061aec:	69ba      	ldr	r2, [r7, #24]
 8061aee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8061af0:	69fb      	ldr	r3, [r7, #28]
 8061af2:	3301      	adds	r3, #1
 8061af4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8061af6:	683b      	ldr	r3, [r7, #0]
 8061af8:	681a      	ldr	r2, [r3, #0]
 8061afa:	69fb      	ldr	r3, [r7, #28]
 8061afc:	fa22 f303 	lsr.w	r3, r2, r3
 8061b00:	2b00      	cmp	r3, #0
 8061b02:	f47f ae6b 	bne.w	80617dc <HAL_GPIO_Init+0x14>
  }
}
 8061b06:	bf00      	nop
 8061b08:	bf00      	nop
 8061b0a:	3724      	adds	r7, #36	@ 0x24
 8061b0c:	46bd      	mov	sp, r7
 8061b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061b12:	4770      	bx	lr
 8061b14:	58000400 	.word	0x58000400

08061b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8061b18:	b480      	push	{r7}
 8061b1a:	b083      	sub	sp, #12
 8061b1c:	af00      	add	r7, sp, #0
 8061b1e:	6078      	str	r0, [r7, #4]
 8061b20:	460b      	mov	r3, r1
 8061b22:	807b      	strh	r3, [r7, #2]
 8061b24:	4613      	mov	r3, r2
 8061b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8061b28:	787b      	ldrb	r3, [r7, #1]
 8061b2a:	2b00      	cmp	r3, #0
 8061b2c:	d003      	beq.n	8061b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8061b2e:	887a      	ldrh	r2, [r7, #2]
 8061b30:	687b      	ldr	r3, [r7, #4]
 8061b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8061b34:	e003      	b.n	8061b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8061b36:	887b      	ldrh	r3, [r7, #2]
 8061b38:	041a      	lsls	r2, r3, #16
 8061b3a:	687b      	ldr	r3, [r7, #4]
 8061b3c:	619a      	str	r2, [r3, #24]
}
 8061b3e:	bf00      	nop
 8061b40:	370c      	adds	r7, #12
 8061b42:	46bd      	mov	sp, r7
 8061b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061b48:	4770      	bx	lr

08061b4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8061b4a:	b480      	push	{r7}
 8061b4c:	b085      	sub	sp, #20
 8061b4e:	af00      	add	r7, sp, #0
 8061b50:	6078      	str	r0, [r7, #4]
 8061b52:	460b      	mov	r3, r1
 8061b54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8061b56:	687b      	ldr	r3, [r7, #4]
 8061b58:	695b      	ldr	r3, [r3, #20]
 8061b5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8061b5c:	887a      	ldrh	r2, [r7, #2]
 8061b5e:	68fb      	ldr	r3, [r7, #12]
 8061b60:	4013      	ands	r3, r2
 8061b62:	041a      	lsls	r2, r3, #16
 8061b64:	68fb      	ldr	r3, [r7, #12]
 8061b66:	43d9      	mvns	r1, r3
 8061b68:	887b      	ldrh	r3, [r7, #2]
 8061b6a:	400b      	ands	r3, r1
 8061b6c:	431a      	orrs	r2, r3
 8061b6e:	687b      	ldr	r3, [r7, #4]
 8061b70:	619a      	str	r2, [r3, #24]
}
 8061b72:	bf00      	nop
 8061b74:	3714      	adds	r7, #20
 8061b76:	46bd      	mov	sp, r7
 8061b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8061b7c:	4770      	bx	lr
	...

08061b80 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8061b80:	b580      	push	{r7, lr}
 8061b82:	b084      	sub	sp, #16
 8061b84:	af00      	add	r7, sp, #0
 8061b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8061b88:	4b19      	ldr	r3, [pc, #100]	@ (8061bf0 <HAL_PWREx_ConfigSupply+0x70>)
 8061b8a:	68db      	ldr	r3, [r3, #12]
 8061b8c:	f003 0304 	and.w	r3, r3, #4
 8061b90:	2b04      	cmp	r3, #4
 8061b92:	d00a      	beq.n	8061baa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8061b94:	4b16      	ldr	r3, [pc, #88]	@ (8061bf0 <HAL_PWREx_ConfigSupply+0x70>)
 8061b96:	68db      	ldr	r3, [r3, #12]
 8061b98:	f003 0307 	and.w	r3, r3, #7
 8061b9c:	687a      	ldr	r2, [r7, #4]
 8061b9e:	429a      	cmp	r2, r3
 8061ba0:	d001      	beq.n	8061ba6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8061ba2:	2301      	movs	r3, #1
 8061ba4:	e01f      	b.n	8061be6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8061ba6:	2300      	movs	r3, #0
 8061ba8:	e01d      	b.n	8061be6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8061baa:	4b11      	ldr	r3, [pc, #68]	@ (8061bf0 <HAL_PWREx_ConfigSupply+0x70>)
 8061bac:	68db      	ldr	r3, [r3, #12]
 8061bae:	f023 0207 	bic.w	r2, r3, #7
 8061bb2:	490f      	ldr	r1, [pc, #60]	@ (8061bf0 <HAL_PWREx_ConfigSupply+0x70>)
 8061bb4:	687b      	ldr	r3, [r7, #4]
 8061bb6:	4313      	orrs	r3, r2
 8061bb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8061bba:	f7ff fac9 	bl	8061150 <HAL_GetTick>
 8061bbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8061bc0:	e009      	b.n	8061bd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8061bc2:	f7ff fac5 	bl	8061150 <HAL_GetTick>
 8061bc6:	4602      	mov	r2, r0
 8061bc8:	68fb      	ldr	r3, [r7, #12]
 8061bca:	1ad3      	subs	r3, r2, r3
 8061bcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8061bd0:	d901      	bls.n	8061bd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8061bd2:	2301      	movs	r3, #1
 8061bd4:	e007      	b.n	8061be6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8061bd6:	4b06      	ldr	r3, [pc, #24]	@ (8061bf0 <HAL_PWREx_ConfigSupply+0x70>)
 8061bd8:	685b      	ldr	r3, [r3, #4]
 8061bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8061bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8061be2:	d1ee      	bne.n	8061bc2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8061be4:	2300      	movs	r3, #0
}
 8061be6:	4618      	mov	r0, r3
 8061be8:	3710      	adds	r7, #16
 8061bea:	46bd      	mov	sp, r7
 8061bec:	bd80      	pop	{r7, pc}
 8061bee:	bf00      	nop
 8061bf0:	58024800 	.word	0x58024800

08061bf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8061bf4:	b580      	push	{r7, lr}
 8061bf6:	b08c      	sub	sp, #48	@ 0x30
 8061bf8:	af00      	add	r7, sp, #0
 8061bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8061bfc:	687b      	ldr	r3, [r7, #4]
 8061bfe:	2b00      	cmp	r3, #0
 8061c00:	d101      	bne.n	8061c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8061c02:	2301      	movs	r3, #1
 8061c04:	e3c8      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8061c06:	687b      	ldr	r3, [r7, #4]
 8061c08:	681b      	ldr	r3, [r3, #0]
 8061c0a:	f003 0301 	and.w	r3, r3, #1
 8061c0e:	2b00      	cmp	r3, #0
 8061c10:	f000 8087 	beq.w	8061d22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8061c14:	4b88      	ldr	r3, [pc, #544]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c16:	691b      	ldr	r3, [r3, #16]
 8061c18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8061c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8061c1e:	4b86      	ldr	r3, [pc, #536]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8061c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8061c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8061c26:	2b10      	cmp	r3, #16
 8061c28:	d007      	beq.n	8061c3a <HAL_RCC_OscConfig+0x46>
 8061c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8061c2c:	2b18      	cmp	r3, #24
 8061c2e:	d110      	bne.n	8061c52 <HAL_RCC_OscConfig+0x5e>
 8061c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8061c32:	f003 0303 	and.w	r3, r3, #3
 8061c36:	2b02      	cmp	r3, #2
 8061c38:	d10b      	bne.n	8061c52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8061c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c3c:	681b      	ldr	r3, [r3, #0]
 8061c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8061c42:	2b00      	cmp	r3, #0
 8061c44:	d06c      	beq.n	8061d20 <HAL_RCC_OscConfig+0x12c>
 8061c46:	687b      	ldr	r3, [r7, #4]
 8061c48:	685b      	ldr	r3, [r3, #4]
 8061c4a:	2b00      	cmp	r3, #0
 8061c4c:	d168      	bne.n	8061d20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8061c4e:	2301      	movs	r3, #1
 8061c50:	e3a2      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8061c52:	687b      	ldr	r3, [r7, #4]
 8061c54:	685b      	ldr	r3, [r3, #4]
 8061c56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8061c5a:	d106      	bne.n	8061c6a <HAL_RCC_OscConfig+0x76>
 8061c5c:	4b76      	ldr	r3, [pc, #472]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c5e:	681b      	ldr	r3, [r3, #0]
 8061c60:	4a75      	ldr	r2, [pc, #468]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8061c66:	6013      	str	r3, [r2, #0]
 8061c68:	e02e      	b.n	8061cc8 <HAL_RCC_OscConfig+0xd4>
 8061c6a:	687b      	ldr	r3, [r7, #4]
 8061c6c:	685b      	ldr	r3, [r3, #4]
 8061c6e:	2b00      	cmp	r3, #0
 8061c70:	d10c      	bne.n	8061c8c <HAL_RCC_OscConfig+0x98>
 8061c72:	4b71      	ldr	r3, [pc, #452]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c74:	681b      	ldr	r3, [r3, #0]
 8061c76:	4a70      	ldr	r2, [pc, #448]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8061c7c:	6013      	str	r3, [r2, #0]
 8061c7e:	4b6e      	ldr	r3, [pc, #440]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c80:	681b      	ldr	r3, [r3, #0]
 8061c82:	4a6d      	ldr	r2, [pc, #436]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8061c88:	6013      	str	r3, [r2, #0]
 8061c8a:	e01d      	b.n	8061cc8 <HAL_RCC_OscConfig+0xd4>
 8061c8c:	687b      	ldr	r3, [r7, #4]
 8061c8e:	685b      	ldr	r3, [r3, #4]
 8061c90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8061c94:	d10c      	bne.n	8061cb0 <HAL_RCC_OscConfig+0xbc>
 8061c96:	4b68      	ldr	r3, [pc, #416]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c98:	681b      	ldr	r3, [r3, #0]
 8061c9a:	4a67      	ldr	r2, [pc, #412]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061c9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8061ca0:	6013      	str	r3, [r2, #0]
 8061ca2:	4b65      	ldr	r3, [pc, #404]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061ca4:	681b      	ldr	r3, [r3, #0]
 8061ca6:	4a64      	ldr	r2, [pc, #400]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8061cac:	6013      	str	r3, [r2, #0]
 8061cae:	e00b      	b.n	8061cc8 <HAL_RCC_OscConfig+0xd4>
 8061cb0:	4b61      	ldr	r3, [pc, #388]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061cb2:	681b      	ldr	r3, [r3, #0]
 8061cb4:	4a60      	ldr	r2, [pc, #384]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061cb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8061cba:	6013      	str	r3, [r2, #0]
 8061cbc:	4b5e      	ldr	r3, [pc, #376]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061cbe:	681b      	ldr	r3, [r3, #0]
 8061cc0:	4a5d      	ldr	r2, [pc, #372]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061cc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8061cc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8061cc8:	687b      	ldr	r3, [r7, #4]
 8061cca:	685b      	ldr	r3, [r3, #4]
 8061ccc:	2b00      	cmp	r3, #0
 8061cce:	d013      	beq.n	8061cf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061cd0:	f7ff fa3e 	bl	8061150 <HAL_GetTick>
 8061cd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8061cd6:	e008      	b.n	8061cea <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8061cd8:	f7ff fa3a 	bl	8061150 <HAL_GetTick>
 8061cdc:	4602      	mov	r2, r0
 8061cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061ce0:	1ad3      	subs	r3, r2, r3
 8061ce2:	2b64      	cmp	r3, #100	@ 0x64
 8061ce4:	d901      	bls.n	8061cea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8061ce6:	2303      	movs	r3, #3
 8061ce8:	e356      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8061cea:	4b53      	ldr	r3, [pc, #332]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061cec:	681b      	ldr	r3, [r3, #0]
 8061cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8061cf2:	2b00      	cmp	r3, #0
 8061cf4:	d0f0      	beq.n	8061cd8 <HAL_RCC_OscConfig+0xe4>
 8061cf6:	e014      	b.n	8061d22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061cf8:	f7ff fa2a 	bl	8061150 <HAL_GetTick>
 8061cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8061cfe:	e008      	b.n	8061d12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8061d00:	f7ff fa26 	bl	8061150 <HAL_GetTick>
 8061d04:	4602      	mov	r2, r0
 8061d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061d08:	1ad3      	subs	r3, r2, r3
 8061d0a:	2b64      	cmp	r3, #100	@ 0x64
 8061d0c:	d901      	bls.n	8061d12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8061d0e:	2303      	movs	r3, #3
 8061d10:	e342      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8061d12:	4b49      	ldr	r3, [pc, #292]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061d14:	681b      	ldr	r3, [r3, #0]
 8061d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8061d1a:	2b00      	cmp	r3, #0
 8061d1c:	d1f0      	bne.n	8061d00 <HAL_RCC_OscConfig+0x10c>
 8061d1e:	e000      	b.n	8061d22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8061d20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8061d22:	687b      	ldr	r3, [r7, #4]
 8061d24:	681b      	ldr	r3, [r3, #0]
 8061d26:	f003 0302 	and.w	r3, r3, #2
 8061d2a:	2b00      	cmp	r3, #0
 8061d2c:	f000 808c 	beq.w	8061e48 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8061d30:	4b41      	ldr	r3, [pc, #260]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061d32:	691b      	ldr	r3, [r3, #16]
 8061d34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8061d38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8061d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8061d3e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8061d40:	6a3b      	ldr	r3, [r7, #32]
 8061d42:	2b00      	cmp	r3, #0
 8061d44:	d007      	beq.n	8061d56 <HAL_RCC_OscConfig+0x162>
 8061d46:	6a3b      	ldr	r3, [r7, #32]
 8061d48:	2b18      	cmp	r3, #24
 8061d4a:	d137      	bne.n	8061dbc <HAL_RCC_OscConfig+0x1c8>
 8061d4c:	69fb      	ldr	r3, [r7, #28]
 8061d4e:	f003 0303 	and.w	r3, r3, #3
 8061d52:	2b00      	cmp	r3, #0
 8061d54:	d132      	bne.n	8061dbc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8061d56:	4b38      	ldr	r3, [pc, #224]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061d58:	681b      	ldr	r3, [r3, #0]
 8061d5a:	f003 0304 	and.w	r3, r3, #4
 8061d5e:	2b00      	cmp	r3, #0
 8061d60:	d005      	beq.n	8061d6e <HAL_RCC_OscConfig+0x17a>
 8061d62:	687b      	ldr	r3, [r7, #4]
 8061d64:	68db      	ldr	r3, [r3, #12]
 8061d66:	2b00      	cmp	r3, #0
 8061d68:	d101      	bne.n	8061d6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8061d6a:	2301      	movs	r3, #1
 8061d6c:	e314      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8061d6e:	4b32      	ldr	r3, [pc, #200]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061d70:	681b      	ldr	r3, [r3, #0]
 8061d72:	f023 0219 	bic.w	r2, r3, #25
 8061d76:	687b      	ldr	r3, [r7, #4]
 8061d78:	68db      	ldr	r3, [r3, #12]
 8061d7a:	492f      	ldr	r1, [pc, #188]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061d7c:	4313      	orrs	r3, r2
 8061d7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061d80:	f7ff f9e6 	bl	8061150 <HAL_GetTick>
 8061d84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8061d86:	e008      	b.n	8061d9a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8061d88:	f7ff f9e2 	bl	8061150 <HAL_GetTick>
 8061d8c:	4602      	mov	r2, r0
 8061d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061d90:	1ad3      	subs	r3, r2, r3
 8061d92:	2b02      	cmp	r3, #2
 8061d94:	d901      	bls.n	8061d9a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8061d96:	2303      	movs	r3, #3
 8061d98:	e2fe      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8061d9a:	4b27      	ldr	r3, [pc, #156]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061d9c:	681b      	ldr	r3, [r3, #0]
 8061d9e:	f003 0304 	and.w	r3, r3, #4
 8061da2:	2b00      	cmp	r3, #0
 8061da4:	d0f0      	beq.n	8061d88 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8061da6:	4b24      	ldr	r3, [pc, #144]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061da8:	685b      	ldr	r3, [r3, #4]
 8061daa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8061dae:	687b      	ldr	r3, [r7, #4]
 8061db0:	691b      	ldr	r3, [r3, #16]
 8061db2:	061b      	lsls	r3, r3, #24
 8061db4:	4920      	ldr	r1, [pc, #128]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061db6:	4313      	orrs	r3, r2
 8061db8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8061dba:	e045      	b.n	8061e48 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8061dbc:	687b      	ldr	r3, [r7, #4]
 8061dbe:	68db      	ldr	r3, [r3, #12]
 8061dc0:	2b00      	cmp	r3, #0
 8061dc2:	d026      	beq.n	8061e12 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8061dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061dc6:	681b      	ldr	r3, [r3, #0]
 8061dc8:	f023 0219 	bic.w	r2, r3, #25
 8061dcc:	687b      	ldr	r3, [r7, #4]
 8061dce:	68db      	ldr	r3, [r3, #12]
 8061dd0:	4919      	ldr	r1, [pc, #100]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061dd2:	4313      	orrs	r3, r2
 8061dd4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061dd6:	f7ff f9bb 	bl	8061150 <HAL_GetTick>
 8061dda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8061ddc:	e008      	b.n	8061df0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8061dde:	f7ff f9b7 	bl	8061150 <HAL_GetTick>
 8061de2:	4602      	mov	r2, r0
 8061de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061de6:	1ad3      	subs	r3, r2, r3
 8061de8:	2b02      	cmp	r3, #2
 8061dea:	d901      	bls.n	8061df0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8061dec:	2303      	movs	r3, #3
 8061dee:	e2d3      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8061df0:	4b11      	ldr	r3, [pc, #68]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061df2:	681b      	ldr	r3, [r3, #0]
 8061df4:	f003 0304 	and.w	r3, r3, #4
 8061df8:	2b00      	cmp	r3, #0
 8061dfa:	d0f0      	beq.n	8061dde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8061dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061dfe:	685b      	ldr	r3, [r3, #4]
 8061e00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8061e04:	687b      	ldr	r3, [r7, #4]
 8061e06:	691b      	ldr	r3, [r3, #16]
 8061e08:	061b      	lsls	r3, r3, #24
 8061e0a:	490b      	ldr	r1, [pc, #44]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061e0c:	4313      	orrs	r3, r2
 8061e0e:	604b      	str	r3, [r1, #4]
 8061e10:	e01a      	b.n	8061e48 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8061e12:	4b09      	ldr	r3, [pc, #36]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061e14:	681b      	ldr	r3, [r3, #0]
 8061e16:	4a08      	ldr	r2, [pc, #32]	@ (8061e38 <HAL_RCC_OscConfig+0x244>)
 8061e18:	f023 0301 	bic.w	r3, r3, #1
 8061e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061e1e:	f7ff f997 	bl	8061150 <HAL_GetTick>
 8061e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8061e24:	e00a      	b.n	8061e3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8061e26:	f7ff f993 	bl	8061150 <HAL_GetTick>
 8061e2a:	4602      	mov	r2, r0
 8061e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061e2e:	1ad3      	subs	r3, r2, r3
 8061e30:	2b02      	cmp	r3, #2
 8061e32:	d903      	bls.n	8061e3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8061e34:	2303      	movs	r3, #3
 8061e36:	e2af      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
 8061e38:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8061e3c:	4b96      	ldr	r3, [pc, #600]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061e3e:	681b      	ldr	r3, [r3, #0]
 8061e40:	f003 0304 	and.w	r3, r3, #4
 8061e44:	2b00      	cmp	r3, #0
 8061e46:	d1ee      	bne.n	8061e26 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8061e48:	687b      	ldr	r3, [r7, #4]
 8061e4a:	681b      	ldr	r3, [r3, #0]
 8061e4c:	f003 0310 	and.w	r3, r3, #16
 8061e50:	2b00      	cmp	r3, #0
 8061e52:	d06a      	beq.n	8061f2a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8061e54:	4b90      	ldr	r3, [pc, #576]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061e56:	691b      	ldr	r3, [r3, #16]
 8061e58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8061e5c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8061e5e:	4b8e      	ldr	r3, [pc, #568]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8061e62:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8061e64:	69bb      	ldr	r3, [r7, #24]
 8061e66:	2b08      	cmp	r3, #8
 8061e68:	d007      	beq.n	8061e7a <HAL_RCC_OscConfig+0x286>
 8061e6a:	69bb      	ldr	r3, [r7, #24]
 8061e6c:	2b18      	cmp	r3, #24
 8061e6e:	d11b      	bne.n	8061ea8 <HAL_RCC_OscConfig+0x2b4>
 8061e70:	697b      	ldr	r3, [r7, #20]
 8061e72:	f003 0303 	and.w	r3, r3, #3
 8061e76:	2b01      	cmp	r3, #1
 8061e78:	d116      	bne.n	8061ea8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8061e7a:	4b87      	ldr	r3, [pc, #540]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061e7c:	681b      	ldr	r3, [r3, #0]
 8061e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8061e82:	2b00      	cmp	r3, #0
 8061e84:	d005      	beq.n	8061e92 <HAL_RCC_OscConfig+0x29e>
 8061e86:	687b      	ldr	r3, [r7, #4]
 8061e88:	69db      	ldr	r3, [r3, #28]
 8061e8a:	2b80      	cmp	r3, #128	@ 0x80
 8061e8c:	d001      	beq.n	8061e92 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8061e8e:	2301      	movs	r3, #1
 8061e90:	e282      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8061e92:	4b81      	ldr	r3, [pc, #516]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061e94:	68db      	ldr	r3, [r3, #12]
 8061e96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8061e9a:	687b      	ldr	r3, [r7, #4]
 8061e9c:	6a1b      	ldr	r3, [r3, #32]
 8061e9e:	061b      	lsls	r3, r3, #24
 8061ea0:	497d      	ldr	r1, [pc, #500]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061ea2:	4313      	orrs	r3, r2
 8061ea4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8061ea6:	e040      	b.n	8061f2a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8061ea8:	687b      	ldr	r3, [r7, #4]
 8061eaa:	69db      	ldr	r3, [r3, #28]
 8061eac:	2b00      	cmp	r3, #0
 8061eae:	d023      	beq.n	8061ef8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8061eb0:	4b79      	ldr	r3, [pc, #484]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061eb2:	681b      	ldr	r3, [r3, #0]
 8061eb4:	4a78      	ldr	r2, [pc, #480]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8061eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061ebc:	f7ff f948 	bl	8061150 <HAL_GetTick>
 8061ec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8061ec2:	e008      	b.n	8061ed6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8061ec4:	f7ff f944 	bl	8061150 <HAL_GetTick>
 8061ec8:	4602      	mov	r2, r0
 8061eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061ecc:	1ad3      	subs	r3, r2, r3
 8061ece:	2b02      	cmp	r3, #2
 8061ed0:	d901      	bls.n	8061ed6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8061ed2:	2303      	movs	r3, #3
 8061ed4:	e260      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8061ed6:	4b70      	ldr	r3, [pc, #448]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061ed8:	681b      	ldr	r3, [r3, #0]
 8061eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8061ede:	2b00      	cmp	r3, #0
 8061ee0:	d0f0      	beq.n	8061ec4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8061ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061ee4:	68db      	ldr	r3, [r3, #12]
 8061ee6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8061eea:	687b      	ldr	r3, [r7, #4]
 8061eec:	6a1b      	ldr	r3, [r3, #32]
 8061eee:	061b      	lsls	r3, r3, #24
 8061ef0:	4969      	ldr	r1, [pc, #420]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061ef2:	4313      	orrs	r3, r2
 8061ef4:	60cb      	str	r3, [r1, #12]
 8061ef6:	e018      	b.n	8061f2a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8061ef8:	4b67      	ldr	r3, [pc, #412]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061efa:	681b      	ldr	r3, [r3, #0]
 8061efc:	4a66      	ldr	r2, [pc, #408]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8061f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061f04:	f7ff f924 	bl	8061150 <HAL_GetTick>
 8061f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8061f0a:	e008      	b.n	8061f1e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8061f0c:	f7ff f920 	bl	8061150 <HAL_GetTick>
 8061f10:	4602      	mov	r2, r0
 8061f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061f14:	1ad3      	subs	r3, r2, r3
 8061f16:	2b02      	cmp	r3, #2
 8061f18:	d901      	bls.n	8061f1e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8061f1a:	2303      	movs	r3, #3
 8061f1c:	e23c      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8061f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061f20:	681b      	ldr	r3, [r3, #0]
 8061f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8061f26:	2b00      	cmp	r3, #0
 8061f28:	d1f0      	bne.n	8061f0c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8061f2a:	687b      	ldr	r3, [r7, #4]
 8061f2c:	681b      	ldr	r3, [r3, #0]
 8061f2e:	f003 0308 	and.w	r3, r3, #8
 8061f32:	2b00      	cmp	r3, #0
 8061f34:	d036      	beq.n	8061fa4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8061f36:	687b      	ldr	r3, [r7, #4]
 8061f38:	695b      	ldr	r3, [r3, #20]
 8061f3a:	2b00      	cmp	r3, #0
 8061f3c:	d019      	beq.n	8061f72 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8061f3e:	4b56      	ldr	r3, [pc, #344]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8061f42:	4a55      	ldr	r2, [pc, #340]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061f44:	f043 0301 	orr.w	r3, r3, #1
 8061f48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061f4a:	f7ff f901 	bl	8061150 <HAL_GetTick>
 8061f4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8061f50:	e008      	b.n	8061f64 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8061f52:	f7ff f8fd 	bl	8061150 <HAL_GetTick>
 8061f56:	4602      	mov	r2, r0
 8061f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061f5a:	1ad3      	subs	r3, r2, r3
 8061f5c:	2b02      	cmp	r3, #2
 8061f5e:	d901      	bls.n	8061f64 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8061f60:	2303      	movs	r3, #3
 8061f62:	e219      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8061f64:	4b4c      	ldr	r3, [pc, #304]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061f66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8061f68:	f003 0302 	and.w	r3, r3, #2
 8061f6c:	2b00      	cmp	r3, #0
 8061f6e:	d0f0      	beq.n	8061f52 <HAL_RCC_OscConfig+0x35e>
 8061f70:	e018      	b.n	8061fa4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8061f72:	4b49      	ldr	r3, [pc, #292]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8061f76:	4a48      	ldr	r2, [pc, #288]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061f78:	f023 0301 	bic.w	r3, r3, #1
 8061f7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061f7e:	f7ff f8e7 	bl	8061150 <HAL_GetTick>
 8061f82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8061f84:	e008      	b.n	8061f98 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8061f86:	f7ff f8e3 	bl	8061150 <HAL_GetTick>
 8061f8a:	4602      	mov	r2, r0
 8061f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061f8e:	1ad3      	subs	r3, r2, r3
 8061f90:	2b02      	cmp	r3, #2
 8061f92:	d901      	bls.n	8061f98 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8061f94:	2303      	movs	r3, #3
 8061f96:	e1ff      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8061f98:	4b3f      	ldr	r3, [pc, #252]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8061f9c:	f003 0302 	and.w	r3, r3, #2
 8061fa0:	2b00      	cmp	r3, #0
 8061fa2:	d1f0      	bne.n	8061f86 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8061fa4:	687b      	ldr	r3, [r7, #4]
 8061fa6:	681b      	ldr	r3, [r3, #0]
 8061fa8:	f003 0320 	and.w	r3, r3, #32
 8061fac:	2b00      	cmp	r3, #0
 8061fae:	d036      	beq.n	806201e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8061fb0:	687b      	ldr	r3, [r7, #4]
 8061fb2:	699b      	ldr	r3, [r3, #24]
 8061fb4:	2b00      	cmp	r3, #0
 8061fb6:	d019      	beq.n	8061fec <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8061fb8:	4b37      	ldr	r3, [pc, #220]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061fba:	681b      	ldr	r3, [r3, #0]
 8061fbc:	4a36      	ldr	r2, [pc, #216]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061fbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8061fc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8061fc4:	f7ff f8c4 	bl	8061150 <HAL_GetTick>
 8061fc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8061fca:	e008      	b.n	8061fde <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8061fcc:	f7ff f8c0 	bl	8061150 <HAL_GetTick>
 8061fd0:	4602      	mov	r2, r0
 8061fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8061fd4:	1ad3      	subs	r3, r2, r3
 8061fd6:	2b02      	cmp	r3, #2
 8061fd8:	d901      	bls.n	8061fde <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8061fda:	2303      	movs	r3, #3
 8061fdc:	e1dc      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8061fde:	4b2e      	ldr	r3, [pc, #184]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061fe0:	681b      	ldr	r3, [r3, #0]
 8061fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8061fe6:	2b00      	cmp	r3, #0
 8061fe8:	d0f0      	beq.n	8061fcc <HAL_RCC_OscConfig+0x3d8>
 8061fea:	e018      	b.n	806201e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8061fec:	4b2a      	ldr	r3, [pc, #168]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061fee:	681b      	ldr	r3, [r3, #0]
 8061ff0:	4a29      	ldr	r2, [pc, #164]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8061ff2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8061ff6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8061ff8:	f7ff f8aa 	bl	8061150 <HAL_GetTick>
 8061ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8061ffe:	e008      	b.n	8062012 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8062000:	f7ff f8a6 	bl	8061150 <HAL_GetTick>
 8062004:	4602      	mov	r2, r0
 8062006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8062008:	1ad3      	subs	r3, r2, r3
 806200a:	2b02      	cmp	r3, #2
 806200c:	d901      	bls.n	8062012 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 806200e:	2303      	movs	r3, #3
 8062010:	e1c2      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8062012:	4b21      	ldr	r3, [pc, #132]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8062014:	681b      	ldr	r3, [r3, #0]
 8062016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 806201a:	2b00      	cmp	r3, #0
 806201c:	d1f0      	bne.n	8062000 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 806201e:	687b      	ldr	r3, [r7, #4]
 8062020:	681b      	ldr	r3, [r3, #0]
 8062022:	f003 0304 	and.w	r3, r3, #4
 8062026:	2b00      	cmp	r3, #0
 8062028:	f000 8086 	beq.w	8062138 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 806202c:	4b1b      	ldr	r3, [pc, #108]	@ (806209c <HAL_RCC_OscConfig+0x4a8>)
 806202e:	681b      	ldr	r3, [r3, #0]
 8062030:	4a1a      	ldr	r2, [pc, #104]	@ (806209c <HAL_RCC_OscConfig+0x4a8>)
 8062032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8062036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8062038:	f7ff f88a 	bl	8061150 <HAL_GetTick>
 806203c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 806203e:	e008      	b.n	8062052 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8062040:	f7ff f886 	bl	8061150 <HAL_GetTick>
 8062044:	4602      	mov	r2, r0
 8062046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8062048:	1ad3      	subs	r3, r2, r3
 806204a:	2b64      	cmp	r3, #100	@ 0x64
 806204c:	d901      	bls.n	8062052 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 806204e:	2303      	movs	r3, #3
 8062050:	e1a2      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8062052:	4b12      	ldr	r3, [pc, #72]	@ (806209c <HAL_RCC_OscConfig+0x4a8>)
 8062054:	681b      	ldr	r3, [r3, #0]
 8062056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 806205a:	2b00      	cmp	r3, #0
 806205c:	d0f0      	beq.n	8062040 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 806205e:	687b      	ldr	r3, [r7, #4]
 8062060:	689b      	ldr	r3, [r3, #8]
 8062062:	2b01      	cmp	r3, #1
 8062064:	d106      	bne.n	8062074 <HAL_RCC_OscConfig+0x480>
 8062066:	4b0c      	ldr	r3, [pc, #48]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8062068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806206a:	4a0b      	ldr	r2, [pc, #44]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 806206c:	f043 0301 	orr.w	r3, r3, #1
 8062070:	6713      	str	r3, [r2, #112]	@ 0x70
 8062072:	e032      	b.n	80620da <HAL_RCC_OscConfig+0x4e6>
 8062074:	687b      	ldr	r3, [r7, #4]
 8062076:	689b      	ldr	r3, [r3, #8]
 8062078:	2b00      	cmp	r3, #0
 806207a:	d111      	bne.n	80620a0 <HAL_RCC_OscConfig+0x4ac>
 806207c:	4b06      	ldr	r3, [pc, #24]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 806207e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8062080:	4a05      	ldr	r2, [pc, #20]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 8062082:	f023 0301 	bic.w	r3, r3, #1
 8062086:	6713      	str	r3, [r2, #112]	@ 0x70
 8062088:	4b03      	ldr	r3, [pc, #12]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 806208a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806208c:	4a02      	ldr	r2, [pc, #8]	@ (8062098 <HAL_RCC_OscConfig+0x4a4>)
 806208e:	f023 0304 	bic.w	r3, r3, #4
 8062092:	6713      	str	r3, [r2, #112]	@ 0x70
 8062094:	e021      	b.n	80620da <HAL_RCC_OscConfig+0x4e6>
 8062096:	bf00      	nop
 8062098:	58024400 	.word	0x58024400
 806209c:	58024800 	.word	0x58024800
 80620a0:	687b      	ldr	r3, [r7, #4]
 80620a2:	689b      	ldr	r3, [r3, #8]
 80620a4:	2b05      	cmp	r3, #5
 80620a6:	d10c      	bne.n	80620c2 <HAL_RCC_OscConfig+0x4ce>
 80620a8:	4b83      	ldr	r3, [pc, #524]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80620aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80620ac:	4a82      	ldr	r2, [pc, #520]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80620ae:	f043 0304 	orr.w	r3, r3, #4
 80620b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80620b4:	4b80      	ldr	r3, [pc, #512]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80620b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80620b8:	4a7f      	ldr	r2, [pc, #508]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80620ba:	f043 0301 	orr.w	r3, r3, #1
 80620be:	6713      	str	r3, [r2, #112]	@ 0x70
 80620c0:	e00b      	b.n	80620da <HAL_RCC_OscConfig+0x4e6>
 80620c2:	4b7d      	ldr	r3, [pc, #500]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80620c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80620c6:	4a7c      	ldr	r2, [pc, #496]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80620c8:	f023 0301 	bic.w	r3, r3, #1
 80620cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80620ce:	4b7a      	ldr	r3, [pc, #488]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80620d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80620d2:	4a79      	ldr	r2, [pc, #484]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80620d4:	f023 0304 	bic.w	r3, r3, #4
 80620d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80620da:	687b      	ldr	r3, [r7, #4]
 80620dc:	689b      	ldr	r3, [r3, #8]
 80620de:	2b00      	cmp	r3, #0
 80620e0:	d015      	beq.n	806210e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80620e2:	f7ff f835 	bl	8061150 <HAL_GetTick>
 80620e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80620e8:	e00a      	b.n	8062100 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80620ea:	f7ff f831 	bl	8061150 <HAL_GetTick>
 80620ee:	4602      	mov	r2, r0
 80620f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80620f2:	1ad3      	subs	r3, r2, r3
 80620f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80620f8:	4293      	cmp	r3, r2
 80620fa:	d901      	bls.n	8062100 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80620fc:	2303      	movs	r3, #3
 80620fe:	e14b      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8062100:	4b6d      	ldr	r3, [pc, #436]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8062104:	f003 0302 	and.w	r3, r3, #2
 8062108:	2b00      	cmp	r3, #0
 806210a:	d0ee      	beq.n	80620ea <HAL_RCC_OscConfig+0x4f6>
 806210c:	e014      	b.n	8062138 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 806210e:	f7ff f81f 	bl	8061150 <HAL_GetTick>
 8062112:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8062114:	e00a      	b.n	806212c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8062116:	f7ff f81b 	bl	8061150 <HAL_GetTick>
 806211a:	4602      	mov	r2, r0
 806211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806211e:	1ad3      	subs	r3, r2, r3
 8062120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8062124:	4293      	cmp	r3, r2
 8062126:	d901      	bls.n	806212c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8062128:	2303      	movs	r3, #3
 806212a:	e135      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 806212c:	4b62      	ldr	r3, [pc, #392]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806212e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8062130:	f003 0302 	and.w	r3, r3, #2
 8062134:	2b00      	cmp	r3, #0
 8062136:	d1ee      	bne.n	8062116 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8062138:	687b      	ldr	r3, [r7, #4]
 806213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806213c:	2b00      	cmp	r3, #0
 806213e:	f000 812a 	beq.w	8062396 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8062142:	4b5d      	ldr	r3, [pc, #372]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062144:	691b      	ldr	r3, [r3, #16]
 8062146:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 806214a:	2b18      	cmp	r3, #24
 806214c:	f000 80ba 	beq.w	80622c4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8062150:	687b      	ldr	r3, [r7, #4]
 8062152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8062154:	2b02      	cmp	r3, #2
 8062156:	f040 8095 	bne.w	8062284 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 806215a:	4b57      	ldr	r3, [pc, #348]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806215c:	681b      	ldr	r3, [r3, #0]
 806215e:	4a56      	ldr	r2, [pc, #344]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062160:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8062164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8062166:	f7fe fff3 	bl	8061150 <HAL_GetTick>
 806216a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 806216c:	e008      	b.n	8062180 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 806216e:	f7fe ffef 	bl	8061150 <HAL_GetTick>
 8062172:	4602      	mov	r2, r0
 8062174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8062176:	1ad3      	subs	r3, r2, r3
 8062178:	2b02      	cmp	r3, #2
 806217a:	d901      	bls.n	8062180 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 806217c:	2303      	movs	r3, #3
 806217e:	e10b      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8062180:	4b4d      	ldr	r3, [pc, #308]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062182:	681b      	ldr	r3, [r3, #0]
 8062184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8062188:	2b00      	cmp	r3, #0
 806218a:	d1f0      	bne.n	806216e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 806218c:	4b4a      	ldr	r3, [pc, #296]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806218e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8062190:	4b4a      	ldr	r3, [pc, #296]	@ (80622bc <HAL_RCC_OscConfig+0x6c8>)
 8062192:	4013      	ands	r3, r2
 8062194:	687a      	ldr	r2, [r7, #4]
 8062196:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8062198:	687a      	ldr	r2, [r7, #4]
 806219a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 806219c:	0112      	lsls	r2, r2, #4
 806219e:	430a      	orrs	r2, r1
 80621a0:	4945      	ldr	r1, [pc, #276]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80621a2:	4313      	orrs	r3, r2
 80621a4:	628b      	str	r3, [r1, #40]	@ 0x28
 80621a6:	687b      	ldr	r3, [r7, #4]
 80621a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80621aa:	3b01      	subs	r3, #1
 80621ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80621b0:	687b      	ldr	r3, [r7, #4]
 80621b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80621b4:	3b01      	subs	r3, #1
 80621b6:	025b      	lsls	r3, r3, #9
 80621b8:	b29b      	uxth	r3, r3
 80621ba:	431a      	orrs	r2, r3
 80621bc:	687b      	ldr	r3, [r7, #4]
 80621be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80621c0:	3b01      	subs	r3, #1
 80621c2:	041b      	lsls	r3, r3, #16
 80621c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80621c8:	431a      	orrs	r2, r3
 80621ca:	687b      	ldr	r3, [r7, #4]
 80621cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80621ce:	3b01      	subs	r3, #1
 80621d0:	061b      	lsls	r3, r3, #24
 80621d2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80621d6:	4938      	ldr	r1, [pc, #224]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80621d8:	4313      	orrs	r3, r2
 80621da:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80621dc:	4b36      	ldr	r3, [pc, #216]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80621de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80621e0:	4a35      	ldr	r2, [pc, #212]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80621e2:	f023 0301 	bic.w	r3, r3, #1
 80621e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80621e8:	4b33      	ldr	r3, [pc, #204]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80621ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80621ec:	4b34      	ldr	r3, [pc, #208]	@ (80622c0 <HAL_RCC_OscConfig+0x6cc>)
 80621ee:	4013      	ands	r3, r2
 80621f0:	687a      	ldr	r2, [r7, #4]
 80621f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80621f4:	00d2      	lsls	r2, r2, #3
 80621f6:	4930      	ldr	r1, [pc, #192]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80621f8:	4313      	orrs	r3, r2
 80621fa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80621fc:	4b2e      	ldr	r3, [pc, #184]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80621fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062200:	f023 020c 	bic.w	r2, r3, #12
 8062204:	687b      	ldr	r3, [r7, #4]
 8062206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8062208:	492b      	ldr	r1, [pc, #172]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806220a:	4313      	orrs	r3, r2
 806220c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 806220e:	4b2a      	ldr	r3, [pc, #168]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062212:	f023 0202 	bic.w	r2, r3, #2
 8062216:	687b      	ldr	r3, [r7, #4]
 8062218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 806221a:	4927      	ldr	r1, [pc, #156]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806221c:	4313      	orrs	r3, r2
 806221e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8062220:	4b25      	ldr	r3, [pc, #148]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062224:	4a24      	ldr	r2, [pc, #144]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 806222a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 806222c:	4b22      	ldr	r3, [pc, #136]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062230:	4a21      	ldr	r2, [pc, #132]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8062236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8062238:	4b1f      	ldr	r3, [pc, #124]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806223c:	4a1e      	ldr	r2, [pc, #120]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806223e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8062242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8062244:	4b1c      	ldr	r3, [pc, #112]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062248:	4a1b      	ldr	r2, [pc, #108]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806224a:	f043 0301 	orr.w	r3, r3, #1
 806224e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8062250:	4b19      	ldr	r3, [pc, #100]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062252:	681b      	ldr	r3, [r3, #0]
 8062254:	4a18      	ldr	r2, [pc, #96]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 806225a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 806225c:	f7fe ff78 	bl	8061150 <HAL_GetTick>
 8062260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8062262:	e008      	b.n	8062276 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8062264:	f7fe ff74 	bl	8061150 <HAL_GetTick>
 8062268:	4602      	mov	r2, r0
 806226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 806226c:	1ad3      	subs	r3, r2, r3
 806226e:	2b02      	cmp	r3, #2
 8062270:	d901      	bls.n	8062276 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8062272:	2303      	movs	r3, #3
 8062274:	e090      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8062276:	4b10      	ldr	r3, [pc, #64]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062278:	681b      	ldr	r3, [r3, #0]
 806227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 806227e:	2b00      	cmp	r3, #0
 8062280:	d0f0      	beq.n	8062264 <HAL_RCC_OscConfig+0x670>
 8062282:	e088      	b.n	8062396 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8062284:	4b0c      	ldr	r3, [pc, #48]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 8062286:	681b      	ldr	r3, [r3, #0]
 8062288:	4a0b      	ldr	r2, [pc, #44]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 806228a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 806228e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8062290:	f7fe ff5e 	bl	8061150 <HAL_GetTick>
 8062294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8062296:	e008      	b.n	80622aa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8062298:	f7fe ff5a 	bl	8061150 <HAL_GetTick>
 806229c:	4602      	mov	r2, r0
 806229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80622a0:	1ad3      	subs	r3, r2, r3
 80622a2:	2b02      	cmp	r3, #2
 80622a4:	d901      	bls.n	80622aa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80622a6:	2303      	movs	r3, #3
 80622a8:	e076      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80622aa:	4b03      	ldr	r3, [pc, #12]	@ (80622b8 <HAL_RCC_OscConfig+0x6c4>)
 80622ac:	681b      	ldr	r3, [r3, #0]
 80622ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80622b2:	2b00      	cmp	r3, #0
 80622b4:	d1f0      	bne.n	8062298 <HAL_RCC_OscConfig+0x6a4>
 80622b6:	e06e      	b.n	8062396 <HAL_RCC_OscConfig+0x7a2>
 80622b8:	58024400 	.word	0x58024400
 80622bc:	fffffc0c 	.word	0xfffffc0c
 80622c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80622c4:	4b36      	ldr	r3, [pc, #216]	@ (80623a0 <HAL_RCC_OscConfig+0x7ac>)
 80622c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80622c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80622ca:	4b35      	ldr	r3, [pc, #212]	@ (80623a0 <HAL_RCC_OscConfig+0x7ac>)
 80622cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80622ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80622d0:	687b      	ldr	r3, [r7, #4]
 80622d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80622d4:	2b01      	cmp	r3, #1
 80622d6:	d031      	beq.n	806233c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80622d8:	693b      	ldr	r3, [r7, #16]
 80622da:	f003 0203 	and.w	r2, r3, #3
 80622de:	687b      	ldr	r3, [r7, #4]
 80622e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80622e2:	429a      	cmp	r2, r3
 80622e4:	d12a      	bne.n	806233c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80622e6:	693b      	ldr	r3, [r7, #16]
 80622e8:	091b      	lsrs	r3, r3, #4
 80622ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80622ee:	687b      	ldr	r3, [r7, #4]
 80622f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80622f2:	429a      	cmp	r2, r3
 80622f4:	d122      	bne.n	806233c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80622f6:	68fb      	ldr	r3, [r7, #12]
 80622f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80622fc:	687b      	ldr	r3, [r7, #4]
 80622fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8062300:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8062302:	429a      	cmp	r2, r3
 8062304:	d11a      	bne.n	806233c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8062306:	68fb      	ldr	r3, [r7, #12]
 8062308:	0a5b      	lsrs	r3, r3, #9
 806230a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 806230e:	687b      	ldr	r3, [r7, #4]
 8062310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062312:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8062314:	429a      	cmp	r2, r3
 8062316:	d111      	bne.n	806233c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8062318:	68fb      	ldr	r3, [r7, #12]
 806231a:	0c1b      	lsrs	r3, r3, #16
 806231c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8062320:	687b      	ldr	r3, [r7, #4]
 8062322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8062324:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8062326:	429a      	cmp	r2, r3
 8062328:	d108      	bne.n	806233c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 806232a:	68fb      	ldr	r3, [r7, #12]
 806232c:	0e1b      	lsrs	r3, r3, #24
 806232e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8062332:	687b      	ldr	r3, [r7, #4]
 8062334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8062336:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8062338:	429a      	cmp	r2, r3
 806233a:	d001      	beq.n	8062340 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 806233c:	2301      	movs	r3, #1
 806233e:	e02b      	b.n	8062398 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8062340:	4b17      	ldr	r3, [pc, #92]	@ (80623a0 <HAL_RCC_OscConfig+0x7ac>)
 8062342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8062344:	08db      	lsrs	r3, r3, #3
 8062346:	f3c3 030c 	ubfx	r3, r3, #0, #13
 806234a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 806234c:	687b      	ldr	r3, [r7, #4]
 806234e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8062350:	693a      	ldr	r2, [r7, #16]
 8062352:	429a      	cmp	r2, r3
 8062354:	d01f      	beq.n	8062396 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8062356:	4b12      	ldr	r3, [pc, #72]	@ (80623a0 <HAL_RCC_OscConfig+0x7ac>)
 8062358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806235a:	4a11      	ldr	r2, [pc, #68]	@ (80623a0 <HAL_RCC_OscConfig+0x7ac>)
 806235c:	f023 0301 	bic.w	r3, r3, #1
 8062360:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8062362:	f7fe fef5 	bl	8061150 <HAL_GetTick>
 8062366:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8062368:	bf00      	nop
 806236a:	f7fe fef1 	bl	8061150 <HAL_GetTick>
 806236e:	4602      	mov	r2, r0
 8062370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8062372:	4293      	cmp	r3, r2
 8062374:	d0f9      	beq.n	806236a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8062376:	4b0a      	ldr	r3, [pc, #40]	@ (80623a0 <HAL_RCC_OscConfig+0x7ac>)
 8062378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 806237a:	4b0a      	ldr	r3, [pc, #40]	@ (80623a4 <HAL_RCC_OscConfig+0x7b0>)
 806237c:	4013      	ands	r3, r2
 806237e:	687a      	ldr	r2, [r7, #4]
 8062380:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8062382:	00d2      	lsls	r2, r2, #3
 8062384:	4906      	ldr	r1, [pc, #24]	@ (80623a0 <HAL_RCC_OscConfig+0x7ac>)
 8062386:	4313      	orrs	r3, r2
 8062388:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 806238a:	4b05      	ldr	r3, [pc, #20]	@ (80623a0 <HAL_RCC_OscConfig+0x7ac>)
 806238c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806238e:	4a04      	ldr	r2, [pc, #16]	@ (80623a0 <HAL_RCC_OscConfig+0x7ac>)
 8062390:	f043 0301 	orr.w	r3, r3, #1
 8062394:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8062396:	2300      	movs	r3, #0
}
 8062398:	4618      	mov	r0, r3
 806239a:	3730      	adds	r7, #48	@ 0x30
 806239c:	46bd      	mov	sp, r7
 806239e:	bd80      	pop	{r7, pc}
 80623a0:	58024400 	.word	0x58024400
 80623a4:	ffff0007 	.word	0xffff0007

080623a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80623a8:	b580      	push	{r7, lr}
 80623aa:	b086      	sub	sp, #24
 80623ac:	af00      	add	r7, sp, #0
 80623ae:	6078      	str	r0, [r7, #4]
 80623b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80623b2:	687b      	ldr	r3, [r7, #4]
 80623b4:	2b00      	cmp	r3, #0
 80623b6:	d101      	bne.n	80623bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80623b8:	2301      	movs	r3, #1
 80623ba:	e19c      	b.n	80626f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80623bc:	4b8a      	ldr	r3, [pc, #552]	@ (80625e8 <HAL_RCC_ClockConfig+0x240>)
 80623be:	681b      	ldr	r3, [r3, #0]
 80623c0:	f003 030f 	and.w	r3, r3, #15
 80623c4:	683a      	ldr	r2, [r7, #0]
 80623c6:	429a      	cmp	r2, r3
 80623c8:	d910      	bls.n	80623ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80623ca:	4b87      	ldr	r3, [pc, #540]	@ (80625e8 <HAL_RCC_ClockConfig+0x240>)
 80623cc:	681b      	ldr	r3, [r3, #0]
 80623ce:	f023 020f 	bic.w	r2, r3, #15
 80623d2:	4985      	ldr	r1, [pc, #532]	@ (80625e8 <HAL_RCC_ClockConfig+0x240>)
 80623d4:	683b      	ldr	r3, [r7, #0]
 80623d6:	4313      	orrs	r3, r2
 80623d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80623da:	4b83      	ldr	r3, [pc, #524]	@ (80625e8 <HAL_RCC_ClockConfig+0x240>)
 80623dc:	681b      	ldr	r3, [r3, #0]
 80623de:	f003 030f 	and.w	r3, r3, #15
 80623e2:	683a      	ldr	r2, [r7, #0]
 80623e4:	429a      	cmp	r2, r3
 80623e6:	d001      	beq.n	80623ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80623e8:	2301      	movs	r3, #1
 80623ea:	e184      	b.n	80626f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80623ec:	687b      	ldr	r3, [r7, #4]
 80623ee:	681b      	ldr	r3, [r3, #0]
 80623f0:	f003 0304 	and.w	r3, r3, #4
 80623f4:	2b00      	cmp	r3, #0
 80623f6:	d010      	beq.n	806241a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80623f8:	687b      	ldr	r3, [r7, #4]
 80623fa:	691a      	ldr	r2, [r3, #16]
 80623fc:	4b7b      	ldr	r3, [pc, #492]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80623fe:	699b      	ldr	r3, [r3, #24]
 8062400:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8062404:	429a      	cmp	r2, r3
 8062406:	d908      	bls.n	806241a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8062408:	4b78      	ldr	r3, [pc, #480]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 806240a:	699b      	ldr	r3, [r3, #24]
 806240c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8062410:	687b      	ldr	r3, [r7, #4]
 8062412:	691b      	ldr	r3, [r3, #16]
 8062414:	4975      	ldr	r1, [pc, #468]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 8062416:	4313      	orrs	r3, r2
 8062418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 806241a:	687b      	ldr	r3, [r7, #4]
 806241c:	681b      	ldr	r3, [r3, #0]
 806241e:	f003 0308 	and.w	r3, r3, #8
 8062422:	2b00      	cmp	r3, #0
 8062424:	d010      	beq.n	8062448 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8062426:	687b      	ldr	r3, [r7, #4]
 8062428:	695a      	ldr	r2, [r3, #20]
 806242a:	4b70      	ldr	r3, [pc, #448]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 806242c:	69db      	ldr	r3, [r3, #28]
 806242e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8062432:	429a      	cmp	r2, r3
 8062434:	d908      	bls.n	8062448 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8062436:	4b6d      	ldr	r3, [pc, #436]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 8062438:	69db      	ldr	r3, [r3, #28]
 806243a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 806243e:	687b      	ldr	r3, [r7, #4]
 8062440:	695b      	ldr	r3, [r3, #20]
 8062442:	496a      	ldr	r1, [pc, #424]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 8062444:	4313      	orrs	r3, r2
 8062446:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8062448:	687b      	ldr	r3, [r7, #4]
 806244a:	681b      	ldr	r3, [r3, #0]
 806244c:	f003 0310 	and.w	r3, r3, #16
 8062450:	2b00      	cmp	r3, #0
 8062452:	d010      	beq.n	8062476 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8062454:	687b      	ldr	r3, [r7, #4]
 8062456:	699a      	ldr	r2, [r3, #24]
 8062458:	4b64      	ldr	r3, [pc, #400]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 806245a:	69db      	ldr	r3, [r3, #28]
 806245c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8062460:	429a      	cmp	r2, r3
 8062462:	d908      	bls.n	8062476 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8062464:	4b61      	ldr	r3, [pc, #388]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 8062466:	69db      	ldr	r3, [r3, #28]
 8062468:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 806246c:	687b      	ldr	r3, [r7, #4]
 806246e:	699b      	ldr	r3, [r3, #24]
 8062470:	495e      	ldr	r1, [pc, #376]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 8062472:	4313      	orrs	r3, r2
 8062474:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8062476:	687b      	ldr	r3, [r7, #4]
 8062478:	681b      	ldr	r3, [r3, #0]
 806247a:	f003 0320 	and.w	r3, r3, #32
 806247e:	2b00      	cmp	r3, #0
 8062480:	d010      	beq.n	80624a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8062482:	687b      	ldr	r3, [r7, #4]
 8062484:	69da      	ldr	r2, [r3, #28]
 8062486:	4b59      	ldr	r3, [pc, #356]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 8062488:	6a1b      	ldr	r3, [r3, #32]
 806248a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 806248e:	429a      	cmp	r2, r3
 8062490:	d908      	bls.n	80624a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8062492:	4b56      	ldr	r3, [pc, #344]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 8062494:	6a1b      	ldr	r3, [r3, #32]
 8062496:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 806249a:	687b      	ldr	r3, [r7, #4]
 806249c:	69db      	ldr	r3, [r3, #28]
 806249e:	4953      	ldr	r1, [pc, #332]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80624a0:	4313      	orrs	r3, r2
 80624a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80624a4:	687b      	ldr	r3, [r7, #4]
 80624a6:	681b      	ldr	r3, [r3, #0]
 80624a8:	f003 0302 	and.w	r3, r3, #2
 80624ac:	2b00      	cmp	r3, #0
 80624ae:	d010      	beq.n	80624d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80624b0:	687b      	ldr	r3, [r7, #4]
 80624b2:	68da      	ldr	r2, [r3, #12]
 80624b4:	4b4d      	ldr	r3, [pc, #308]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80624b6:	699b      	ldr	r3, [r3, #24]
 80624b8:	f003 030f 	and.w	r3, r3, #15
 80624bc:	429a      	cmp	r2, r3
 80624be:	d908      	bls.n	80624d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80624c0:	4b4a      	ldr	r3, [pc, #296]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80624c2:	699b      	ldr	r3, [r3, #24]
 80624c4:	f023 020f 	bic.w	r2, r3, #15
 80624c8:	687b      	ldr	r3, [r7, #4]
 80624ca:	68db      	ldr	r3, [r3, #12]
 80624cc:	4947      	ldr	r1, [pc, #284]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80624ce:	4313      	orrs	r3, r2
 80624d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80624d2:	687b      	ldr	r3, [r7, #4]
 80624d4:	681b      	ldr	r3, [r3, #0]
 80624d6:	f003 0301 	and.w	r3, r3, #1
 80624da:	2b00      	cmp	r3, #0
 80624dc:	d055      	beq.n	806258a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80624de:	4b43      	ldr	r3, [pc, #268]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80624e0:	699b      	ldr	r3, [r3, #24]
 80624e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80624e6:	687b      	ldr	r3, [r7, #4]
 80624e8:	689b      	ldr	r3, [r3, #8]
 80624ea:	4940      	ldr	r1, [pc, #256]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80624ec:	4313      	orrs	r3, r2
 80624ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80624f0:	687b      	ldr	r3, [r7, #4]
 80624f2:	685b      	ldr	r3, [r3, #4]
 80624f4:	2b02      	cmp	r3, #2
 80624f6:	d107      	bne.n	8062508 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80624f8:	4b3c      	ldr	r3, [pc, #240]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80624fa:	681b      	ldr	r3, [r3, #0]
 80624fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8062500:	2b00      	cmp	r3, #0
 8062502:	d121      	bne.n	8062548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8062504:	2301      	movs	r3, #1
 8062506:	e0f6      	b.n	80626f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8062508:	687b      	ldr	r3, [r7, #4]
 806250a:	685b      	ldr	r3, [r3, #4]
 806250c:	2b03      	cmp	r3, #3
 806250e:	d107      	bne.n	8062520 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8062510:	4b36      	ldr	r3, [pc, #216]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 8062512:	681b      	ldr	r3, [r3, #0]
 8062514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8062518:	2b00      	cmp	r3, #0
 806251a:	d115      	bne.n	8062548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 806251c:	2301      	movs	r3, #1
 806251e:	e0ea      	b.n	80626f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8062520:	687b      	ldr	r3, [r7, #4]
 8062522:	685b      	ldr	r3, [r3, #4]
 8062524:	2b01      	cmp	r3, #1
 8062526:	d107      	bne.n	8062538 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8062528:	4b30      	ldr	r3, [pc, #192]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 806252a:	681b      	ldr	r3, [r3, #0]
 806252c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8062530:	2b00      	cmp	r3, #0
 8062532:	d109      	bne.n	8062548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8062534:	2301      	movs	r3, #1
 8062536:	e0de      	b.n	80626f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8062538:	4b2c      	ldr	r3, [pc, #176]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 806253a:	681b      	ldr	r3, [r3, #0]
 806253c:	f003 0304 	and.w	r3, r3, #4
 8062540:	2b00      	cmp	r3, #0
 8062542:	d101      	bne.n	8062548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8062544:	2301      	movs	r3, #1
 8062546:	e0d6      	b.n	80626f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8062548:	4b28      	ldr	r3, [pc, #160]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 806254a:	691b      	ldr	r3, [r3, #16]
 806254c:	f023 0207 	bic.w	r2, r3, #7
 8062550:	687b      	ldr	r3, [r7, #4]
 8062552:	685b      	ldr	r3, [r3, #4]
 8062554:	4925      	ldr	r1, [pc, #148]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 8062556:	4313      	orrs	r3, r2
 8062558:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 806255a:	f7fe fdf9 	bl	8061150 <HAL_GetTick>
 806255e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8062560:	e00a      	b.n	8062578 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8062562:	f7fe fdf5 	bl	8061150 <HAL_GetTick>
 8062566:	4602      	mov	r2, r0
 8062568:	697b      	ldr	r3, [r7, #20]
 806256a:	1ad3      	subs	r3, r2, r3
 806256c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8062570:	4293      	cmp	r3, r2
 8062572:	d901      	bls.n	8062578 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8062574:	2303      	movs	r3, #3
 8062576:	e0be      	b.n	80626f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8062578:	4b1c      	ldr	r3, [pc, #112]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 806257a:	691b      	ldr	r3, [r3, #16]
 806257c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8062580:	687b      	ldr	r3, [r7, #4]
 8062582:	685b      	ldr	r3, [r3, #4]
 8062584:	00db      	lsls	r3, r3, #3
 8062586:	429a      	cmp	r2, r3
 8062588:	d1eb      	bne.n	8062562 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 806258a:	687b      	ldr	r3, [r7, #4]
 806258c:	681b      	ldr	r3, [r3, #0]
 806258e:	f003 0302 	and.w	r3, r3, #2
 8062592:	2b00      	cmp	r3, #0
 8062594:	d010      	beq.n	80625b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8062596:	687b      	ldr	r3, [r7, #4]
 8062598:	68da      	ldr	r2, [r3, #12]
 806259a:	4b14      	ldr	r3, [pc, #80]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 806259c:	699b      	ldr	r3, [r3, #24]
 806259e:	f003 030f 	and.w	r3, r3, #15
 80625a2:	429a      	cmp	r2, r3
 80625a4:	d208      	bcs.n	80625b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80625a6:	4b11      	ldr	r3, [pc, #68]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80625a8:	699b      	ldr	r3, [r3, #24]
 80625aa:	f023 020f 	bic.w	r2, r3, #15
 80625ae:	687b      	ldr	r3, [r7, #4]
 80625b0:	68db      	ldr	r3, [r3, #12]
 80625b2:	490e      	ldr	r1, [pc, #56]	@ (80625ec <HAL_RCC_ClockConfig+0x244>)
 80625b4:	4313      	orrs	r3, r2
 80625b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80625b8:	4b0b      	ldr	r3, [pc, #44]	@ (80625e8 <HAL_RCC_ClockConfig+0x240>)
 80625ba:	681b      	ldr	r3, [r3, #0]
 80625bc:	f003 030f 	and.w	r3, r3, #15
 80625c0:	683a      	ldr	r2, [r7, #0]
 80625c2:	429a      	cmp	r2, r3
 80625c4:	d214      	bcs.n	80625f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80625c6:	4b08      	ldr	r3, [pc, #32]	@ (80625e8 <HAL_RCC_ClockConfig+0x240>)
 80625c8:	681b      	ldr	r3, [r3, #0]
 80625ca:	f023 020f 	bic.w	r2, r3, #15
 80625ce:	4906      	ldr	r1, [pc, #24]	@ (80625e8 <HAL_RCC_ClockConfig+0x240>)
 80625d0:	683b      	ldr	r3, [r7, #0]
 80625d2:	4313      	orrs	r3, r2
 80625d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80625d6:	4b04      	ldr	r3, [pc, #16]	@ (80625e8 <HAL_RCC_ClockConfig+0x240>)
 80625d8:	681b      	ldr	r3, [r3, #0]
 80625da:	f003 030f 	and.w	r3, r3, #15
 80625de:	683a      	ldr	r2, [r7, #0]
 80625e0:	429a      	cmp	r2, r3
 80625e2:	d005      	beq.n	80625f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80625e4:	2301      	movs	r3, #1
 80625e6:	e086      	b.n	80626f6 <HAL_RCC_ClockConfig+0x34e>
 80625e8:	52002000 	.word	0x52002000
 80625ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80625f0:	687b      	ldr	r3, [r7, #4]
 80625f2:	681b      	ldr	r3, [r3, #0]
 80625f4:	f003 0304 	and.w	r3, r3, #4
 80625f8:	2b00      	cmp	r3, #0
 80625fa:	d010      	beq.n	806261e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80625fc:	687b      	ldr	r3, [r7, #4]
 80625fe:	691a      	ldr	r2, [r3, #16]
 8062600:	4b3f      	ldr	r3, [pc, #252]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 8062602:	699b      	ldr	r3, [r3, #24]
 8062604:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8062608:	429a      	cmp	r2, r3
 806260a:	d208      	bcs.n	806261e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 806260c:	4b3c      	ldr	r3, [pc, #240]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 806260e:	699b      	ldr	r3, [r3, #24]
 8062610:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8062614:	687b      	ldr	r3, [r7, #4]
 8062616:	691b      	ldr	r3, [r3, #16]
 8062618:	4939      	ldr	r1, [pc, #228]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 806261a:	4313      	orrs	r3, r2
 806261c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 806261e:	687b      	ldr	r3, [r7, #4]
 8062620:	681b      	ldr	r3, [r3, #0]
 8062622:	f003 0308 	and.w	r3, r3, #8
 8062626:	2b00      	cmp	r3, #0
 8062628:	d010      	beq.n	806264c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 806262a:	687b      	ldr	r3, [r7, #4]
 806262c:	695a      	ldr	r2, [r3, #20]
 806262e:	4b34      	ldr	r3, [pc, #208]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 8062630:	69db      	ldr	r3, [r3, #28]
 8062632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8062636:	429a      	cmp	r2, r3
 8062638:	d208      	bcs.n	806264c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 806263a:	4b31      	ldr	r3, [pc, #196]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 806263c:	69db      	ldr	r3, [r3, #28]
 806263e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8062642:	687b      	ldr	r3, [r7, #4]
 8062644:	695b      	ldr	r3, [r3, #20]
 8062646:	492e      	ldr	r1, [pc, #184]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 8062648:	4313      	orrs	r3, r2
 806264a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 806264c:	687b      	ldr	r3, [r7, #4]
 806264e:	681b      	ldr	r3, [r3, #0]
 8062650:	f003 0310 	and.w	r3, r3, #16
 8062654:	2b00      	cmp	r3, #0
 8062656:	d010      	beq.n	806267a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8062658:	687b      	ldr	r3, [r7, #4]
 806265a:	699a      	ldr	r2, [r3, #24]
 806265c:	4b28      	ldr	r3, [pc, #160]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 806265e:	69db      	ldr	r3, [r3, #28]
 8062660:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8062664:	429a      	cmp	r2, r3
 8062666:	d208      	bcs.n	806267a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8062668:	4b25      	ldr	r3, [pc, #148]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 806266a:	69db      	ldr	r3, [r3, #28]
 806266c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8062670:	687b      	ldr	r3, [r7, #4]
 8062672:	699b      	ldr	r3, [r3, #24]
 8062674:	4922      	ldr	r1, [pc, #136]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 8062676:	4313      	orrs	r3, r2
 8062678:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 806267a:	687b      	ldr	r3, [r7, #4]
 806267c:	681b      	ldr	r3, [r3, #0]
 806267e:	f003 0320 	and.w	r3, r3, #32
 8062682:	2b00      	cmp	r3, #0
 8062684:	d010      	beq.n	80626a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8062686:	687b      	ldr	r3, [r7, #4]
 8062688:	69da      	ldr	r2, [r3, #28]
 806268a:	4b1d      	ldr	r3, [pc, #116]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 806268c:	6a1b      	ldr	r3, [r3, #32]
 806268e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8062692:	429a      	cmp	r2, r3
 8062694:	d208      	bcs.n	80626a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8062696:	4b1a      	ldr	r3, [pc, #104]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 8062698:	6a1b      	ldr	r3, [r3, #32]
 806269a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 806269e:	687b      	ldr	r3, [r7, #4]
 80626a0:	69db      	ldr	r3, [r3, #28]
 80626a2:	4917      	ldr	r1, [pc, #92]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 80626a4:	4313      	orrs	r3, r2
 80626a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80626a8:	f000 f834 	bl	8062714 <HAL_RCC_GetSysClockFreq>
 80626ac:	4602      	mov	r2, r0
 80626ae:	4b14      	ldr	r3, [pc, #80]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 80626b0:	699b      	ldr	r3, [r3, #24]
 80626b2:	0a1b      	lsrs	r3, r3, #8
 80626b4:	f003 030f 	and.w	r3, r3, #15
 80626b8:	4912      	ldr	r1, [pc, #72]	@ (8062704 <HAL_RCC_ClockConfig+0x35c>)
 80626ba:	5ccb      	ldrb	r3, [r1, r3]
 80626bc:	f003 031f 	and.w	r3, r3, #31
 80626c0:	fa22 f303 	lsr.w	r3, r2, r3
 80626c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80626c6:	4b0e      	ldr	r3, [pc, #56]	@ (8062700 <HAL_RCC_ClockConfig+0x358>)
 80626c8:	699b      	ldr	r3, [r3, #24]
 80626ca:	f003 030f 	and.w	r3, r3, #15
 80626ce:	4a0d      	ldr	r2, [pc, #52]	@ (8062704 <HAL_RCC_ClockConfig+0x35c>)
 80626d0:	5cd3      	ldrb	r3, [r2, r3]
 80626d2:	f003 031f 	and.w	r3, r3, #31
 80626d6:	693a      	ldr	r2, [r7, #16]
 80626d8:	fa22 f303 	lsr.w	r3, r2, r3
 80626dc:	4a0a      	ldr	r2, [pc, #40]	@ (8062708 <HAL_RCC_ClockConfig+0x360>)
 80626de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80626e0:	4a0a      	ldr	r2, [pc, #40]	@ (806270c <HAL_RCC_ClockConfig+0x364>)
 80626e2:	693b      	ldr	r3, [r7, #16]
 80626e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80626e6:	4b0a      	ldr	r3, [pc, #40]	@ (8062710 <HAL_RCC_ClockConfig+0x368>)
 80626e8:	681b      	ldr	r3, [r3, #0]
 80626ea:	4618      	mov	r0, r3
 80626ec:	f7fe fce6 	bl	80610bc <HAL_InitTick>
 80626f0:	4603      	mov	r3, r0
 80626f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80626f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80626f6:	4618      	mov	r0, r3
 80626f8:	3718      	adds	r7, #24
 80626fa:	46bd      	mov	sp, r7
 80626fc:	bd80      	pop	{r7, pc}
 80626fe:	bf00      	nop
 8062700:	58024400 	.word	0x58024400
 8062704:	080661e8 	.word	0x080661e8
 8062708:	24000004 	.word	0x24000004
 806270c:	24000000 	.word	0x24000000
 8062710:	24000008 	.word	0x24000008

08062714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8062714:	b480      	push	{r7}
 8062716:	b089      	sub	sp, #36	@ 0x24
 8062718:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 806271a:	4bb3      	ldr	r3, [pc, #716]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 806271c:	691b      	ldr	r3, [r3, #16]
 806271e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8062722:	2b18      	cmp	r3, #24
 8062724:	f200 8155 	bhi.w	80629d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8062728:	a201      	add	r2, pc, #4	@ (adr r2, 8062730 <HAL_RCC_GetSysClockFreq+0x1c>)
 806272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806272e:	bf00      	nop
 8062730:	08062795 	.word	0x08062795
 8062734:	080629d3 	.word	0x080629d3
 8062738:	080629d3 	.word	0x080629d3
 806273c:	080629d3 	.word	0x080629d3
 8062740:	080629d3 	.word	0x080629d3
 8062744:	080629d3 	.word	0x080629d3
 8062748:	080629d3 	.word	0x080629d3
 806274c:	080629d3 	.word	0x080629d3
 8062750:	080627bb 	.word	0x080627bb
 8062754:	080629d3 	.word	0x080629d3
 8062758:	080629d3 	.word	0x080629d3
 806275c:	080629d3 	.word	0x080629d3
 8062760:	080629d3 	.word	0x080629d3
 8062764:	080629d3 	.word	0x080629d3
 8062768:	080629d3 	.word	0x080629d3
 806276c:	080629d3 	.word	0x080629d3
 8062770:	080627c1 	.word	0x080627c1
 8062774:	080629d3 	.word	0x080629d3
 8062778:	080629d3 	.word	0x080629d3
 806277c:	080629d3 	.word	0x080629d3
 8062780:	080629d3 	.word	0x080629d3
 8062784:	080629d3 	.word	0x080629d3
 8062788:	080629d3 	.word	0x080629d3
 806278c:	080629d3 	.word	0x080629d3
 8062790:	080627c7 	.word	0x080627c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8062794:	4b94      	ldr	r3, [pc, #592]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8062796:	681b      	ldr	r3, [r3, #0]
 8062798:	f003 0320 	and.w	r3, r3, #32
 806279c:	2b00      	cmp	r3, #0
 806279e:	d009      	beq.n	80627b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80627a0:	4b91      	ldr	r3, [pc, #580]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80627a2:	681b      	ldr	r3, [r3, #0]
 80627a4:	08db      	lsrs	r3, r3, #3
 80627a6:	f003 0303 	and.w	r3, r3, #3
 80627aa:	4a90      	ldr	r2, [pc, #576]	@ (80629ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80627ac:	fa22 f303 	lsr.w	r3, r2, r3
 80627b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80627b2:	e111      	b.n	80629d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80627b4:	4b8d      	ldr	r3, [pc, #564]	@ (80629ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80627b6:	61bb      	str	r3, [r7, #24]
      break;
 80627b8:	e10e      	b.n	80629d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80627ba:	4b8d      	ldr	r3, [pc, #564]	@ (80629f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80627bc:	61bb      	str	r3, [r7, #24]
      break;
 80627be:	e10b      	b.n	80629d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80627c0:	4b8c      	ldr	r3, [pc, #560]	@ (80629f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80627c2:	61bb      	str	r3, [r7, #24]
      break;
 80627c4:	e108      	b.n	80629d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80627c6:	4b88      	ldr	r3, [pc, #544]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80627c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80627ca:	f003 0303 	and.w	r3, r3, #3
 80627ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80627d0:	4b85      	ldr	r3, [pc, #532]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80627d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80627d4:	091b      	lsrs	r3, r3, #4
 80627d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80627da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80627dc:	4b82      	ldr	r3, [pc, #520]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80627de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80627e0:	f003 0301 	and.w	r3, r3, #1
 80627e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80627e6:	4b80      	ldr	r3, [pc, #512]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80627e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80627ea:	08db      	lsrs	r3, r3, #3
 80627ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80627f0:	68fa      	ldr	r2, [r7, #12]
 80627f2:	fb02 f303 	mul.w	r3, r2, r3
 80627f6:	ee07 3a90 	vmov	s15, r3
 80627fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80627fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8062802:	693b      	ldr	r3, [r7, #16]
 8062804:	2b00      	cmp	r3, #0
 8062806:	f000 80e1 	beq.w	80629cc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 806280a:	697b      	ldr	r3, [r7, #20]
 806280c:	2b02      	cmp	r3, #2
 806280e:	f000 8083 	beq.w	8062918 <HAL_RCC_GetSysClockFreq+0x204>
 8062812:	697b      	ldr	r3, [r7, #20]
 8062814:	2b02      	cmp	r3, #2
 8062816:	f200 80a1 	bhi.w	806295c <HAL_RCC_GetSysClockFreq+0x248>
 806281a:	697b      	ldr	r3, [r7, #20]
 806281c:	2b00      	cmp	r3, #0
 806281e:	d003      	beq.n	8062828 <HAL_RCC_GetSysClockFreq+0x114>
 8062820:	697b      	ldr	r3, [r7, #20]
 8062822:	2b01      	cmp	r3, #1
 8062824:	d056      	beq.n	80628d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8062826:	e099      	b.n	806295c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8062828:	4b6f      	ldr	r3, [pc, #444]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 806282a:	681b      	ldr	r3, [r3, #0]
 806282c:	f003 0320 	and.w	r3, r3, #32
 8062830:	2b00      	cmp	r3, #0
 8062832:	d02d      	beq.n	8062890 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8062834:	4b6c      	ldr	r3, [pc, #432]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8062836:	681b      	ldr	r3, [r3, #0]
 8062838:	08db      	lsrs	r3, r3, #3
 806283a:	f003 0303 	and.w	r3, r3, #3
 806283e:	4a6b      	ldr	r2, [pc, #428]	@ (80629ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8062840:	fa22 f303 	lsr.w	r3, r2, r3
 8062844:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8062846:	687b      	ldr	r3, [r7, #4]
 8062848:	ee07 3a90 	vmov	s15, r3
 806284c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8062850:	693b      	ldr	r3, [r7, #16]
 8062852:	ee07 3a90 	vmov	s15, r3
 8062856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806285a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 806285e:	4b62      	ldr	r3, [pc, #392]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8062860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8062862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8062866:	ee07 3a90 	vmov	s15, r3
 806286a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 806286e:	ed97 6a02 	vldr	s12, [r7, #8]
 8062872:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80629f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8062876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 806287a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 806287e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8062882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8062886:	ee67 7a27 	vmul.f32	s15, s14, s15
 806288a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 806288e:	e087      	b.n	80629a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8062890:	693b      	ldr	r3, [r7, #16]
 8062892:	ee07 3a90 	vmov	s15, r3
 8062896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806289a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80629fc <HAL_RCC_GetSysClockFreq+0x2e8>
 806289e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80628a2:	4b51      	ldr	r3, [pc, #324]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80628a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80628a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80628aa:	ee07 3a90 	vmov	s15, r3
 80628ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80628b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80628b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80629f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80628ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80628be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80628c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80628c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80628ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80628ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80628d2:	e065      	b.n	80629a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80628d4:	693b      	ldr	r3, [r7, #16]
 80628d6:	ee07 3a90 	vmov	s15, r3
 80628da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80628de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8062a00 <HAL_RCC_GetSysClockFreq+0x2ec>
 80628e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80628e6:	4b40      	ldr	r3, [pc, #256]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80628e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80628ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80628ee:	ee07 3a90 	vmov	s15, r3
 80628f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80628f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80628fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80629f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80628fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8062902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8062906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 806290a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8062912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8062916:	e043      	b.n	80629a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8062918:	693b      	ldr	r3, [r7, #16]
 806291a:	ee07 3a90 	vmov	s15, r3
 806291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8062922:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8062a04 <HAL_RCC_GetSysClockFreq+0x2f0>
 8062926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 806292a:	4b2f      	ldr	r3, [pc, #188]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 806292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 806292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8062932:	ee07 3a90 	vmov	s15, r3
 8062936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 806293a:	ed97 6a02 	vldr	s12, [r7, #8]
 806293e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80629f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8062942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8062946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 806294a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 806294e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8062952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8062956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 806295a:	e021      	b.n	80629a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 806295c:	693b      	ldr	r3, [r7, #16]
 806295e:	ee07 3a90 	vmov	s15, r3
 8062962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8062966:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8062a00 <HAL_RCC_GetSysClockFreq+0x2ec>
 806296a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 806296e:	4b1e      	ldr	r3, [pc, #120]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8062970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8062972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8062976:	ee07 3a90 	vmov	s15, r3
 806297a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 806297e:	ed97 6a02 	vldr	s12, [r7, #8]
 8062982:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80629f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8062986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 806298a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 806298e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8062992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8062996:	ee67 7a27 	vmul.f32	s15, s14, s15
 806299a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 806299e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80629a0:	4b11      	ldr	r3, [pc, #68]	@ (80629e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80629a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80629a4:	0a5b      	lsrs	r3, r3, #9
 80629a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80629aa:	3301      	adds	r3, #1
 80629ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80629ae:	683b      	ldr	r3, [r7, #0]
 80629b0:	ee07 3a90 	vmov	s15, r3
 80629b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80629b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80629bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80629c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80629c4:	ee17 3a90 	vmov	r3, s15
 80629c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80629ca:	e005      	b.n	80629d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80629cc:	2300      	movs	r3, #0
 80629ce:	61bb      	str	r3, [r7, #24]
      break;
 80629d0:	e002      	b.n	80629d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80629d2:	4b07      	ldr	r3, [pc, #28]	@ (80629f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80629d4:	61bb      	str	r3, [r7, #24]
      break;
 80629d6:	bf00      	nop
  }

  return sysclockfreq;
 80629d8:	69bb      	ldr	r3, [r7, #24]
}
 80629da:	4618      	mov	r0, r3
 80629dc:	3724      	adds	r7, #36	@ 0x24
 80629de:	46bd      	mov	sp, r7
 80629e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80629e4:	4770      	bx	lr
 80629e6:	bf00      	nop
 80629e8:	58024400 	.word	0x58024400
 80629ec:	03d09000 	.word	0x03d09000
 80629f0:	003d0900 	.word	0x003d0900
 80629f4:	017d7840 	.word	0x017d7840
 80629f8:	46000000 	.word	0x46000000
 80629fc:	4c742400 	.word	0x4c742400
 8062a00:	4a742400 	.word	0x4a742400
 8062a04:	4bbebc20 	.word	0x4bbebc20

08062a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8062a08:	b580      	push	{r7, lr}
 8062a0a:	b082      	sub	sp, #8
 8062a0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8062a0e:	f7ff fe81 	bl	8062714 <HAL_RCC_GetSysClockFreq>
 8062a12:	4602      	mov	r2, r0
 8062a14:	4b10      	ldr	r3, [pc, #64]	@ (8062a58 <HAL_RCC_GetHCLKFreq+0x50>)
 8062a16:	699b      	ldr	r3, [r3, #24]
 8062a18:	0a1b      	lsrs	r3, r3, #8
 8062a1a:	f003 030f 	and.w	r3, r3, #15
 8062a1e:	490f      	ldr	r1, [pc, #60]	@ (8062a5c <HAL_RCC_GetHCLKFreq+0x54>)
 8062a20:	5ccb      	ldrb	r3, [r1, r3]
 8062a22:	f003 031f 	and.w	r3, r3, #31
 8062a26:	fa22 f303 	lsr.w	r3, r2, r3
 8062a2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8062a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8062a58 <HAL_RCC_GetHCLKFreq+0x50>)
 8062a2e:	699b      	ldr	r3, [r3, #24]
 8062a30:	f003 030f 	and.w	r3, r3, #15
 8062a34:	4a09      	ldr	r2, [pc, #36]	@ (8062a5c <HAL_RCC_GetHCLKFreq+0x54>)
 8062a36:	5cd3      	ldrb	r3, [r2, r3]
 8062a38:	f003 031f 	and.w	r3, r3, #31
 8062a3c:	687a      	ldr	r2, [r7, #4]
 8062a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8062a42:	4a07      	ldr	r2, [pc, #28]	@ (8062a60 <HAL_RCC_GetHCLKFreq+0x58>)
 8062a44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8062a46:	4a07      	ldr	r2, [pc, #28]	@ (8062a64 <HAL_RCC_GetHCLKFreq+0x5c>)
 8062a48:	687b      	ldr	r3, [r7, #4]
 8062a4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8062a4c:	4b04      	ldr	r3, [pc, #16]	@ (8062a60 <HAL_RCC_GetHCLKFreq+0x58>)
 8062a4e:	681b      	ldr	r3, [r3, #0]
}
 8062a50:	4618      	mov	r0, r3
 8062a52:	3708      	adds	r7, #8
 8062a54:	46bd      	mov	sp, r7
 8062a56:	bd80      	pop	{r7, pc}
 8062a58:	58024400 	.word	0x58024400
 8062a5c:	080661e8 	.word	0x080661e8
 8062a60:	24000004 	.word	0x24000004
 8062a64:	24000000 	.word	0x24000000

08062a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8062a68:	b580      	push	{r7, lr}
 8062a6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8062a6c:	f7ff ffcc 	bl	8062a08 <HAL_RCC_GetHCLKFreq>
 8062a70:	4602      	mov	r2, r0
 8062a72:	4b06      	ldr	r3, [pc, #24]	@ (8062a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8062a74:	69db      	ldr	r3, [r3, #28]
 8062a76:	091b      	lsrs	r3, r3, #4
 8062a78:	f003 0307 	and.w	r3, r3, #7
 8062a7c:	4904      	ldr	r1, [pc, #16]	@ (8062a90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8062a7e:	5ccb      	ldrb	r3, [r1, r3]
 8062a80:	f003 031f 	and.w	r3, r3, #31
 8062a84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8062a88:	4618      	mov	r0, r3
 8062a8a:	bd80      	pop	{r7, pc}
 8062a8c:	58024400 	.word	0x58024400
 8062a90:	080661e8 	.word	0x080661e8

08062a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8062a94:	b580      	push	{r7, lr}
 8062a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8062a98:	f7ff ffb6 	bl	8062a08 <HAL_RCC_GetHCLKFreq>
 8062a9c:	4602      	mov	r2, r0
 8062a9e:	4b06      	ldr	r3, [pc, #24]	@ (8062ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8062aa0:	69db      	ldr	r3, [r3, #28]
 8062aa2:	0a1b      	lsrs	r3, r3, #8
 8062aa4:	f003 0307 	and.w	r3, r3, #7
 8062aa8:	4904      	ldr	r1, [pc, #16]	@ (8062abc <HAL_RCC_GetPCLK2Freq+0x28>)
 8062aaa:	5ccb      	ldrb	r3, [r1, r3]
 8062aac:	f003 031f 	and.w	r3, r3, #31
 8062ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8062ab4:	4618      	mov	r0, r3
 8062ab6:	bd80      	pop	{r7, pc}
 8062ab8:	58024400 	.word	0x58024400
 8062abc:	080661e8 	.word	0x080661e8

08062ac0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8062ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8062ac4:	b0c6      	sub	sp, #280	@ 0x118
 8062ac6:	af00      	add	r7, sp, #0
 8062ac8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8062acc:	2300      	movs	r3, #0
 8062ace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8062ad2:	2300      	movs	r3, #0
 8062ad4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8062ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8062ae0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8062ae4:	2500      	movs	r5, #0
 8062ae6:	ea54 0305 	orrs.w	r3, r4, r5
 8062aea:	d049      	beq.n	8062b80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8062aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8062af2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8062af6:	d02f      	beq.n	8062b58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8062af8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8062afc:	d828      	bhi.n	8062b50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8062afe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8062b02:	d01a      	beq.n	8062b3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8062b04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8062b08:	d822      	bhi.n	8062b50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8062b0a:	2b00      	cmp	r3, #0
 8062b0c:	d003      	beq.n	8062b16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8062b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8062b12:	d007      	beq.n	8062b24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8062b14:	e01c      	b.n	8062b50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8062b16:	4bab      	ldr	r3, [pc, #684]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062b1a:	4aaa      	ldr	r2, [pc, #680]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8062b20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8062b22:	e01a      	b.n	8062b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8062b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062b28:	3308      	adds	r3, #8
 8062b2a:	2102      	movs	r1, #2
 8062b2c:	4618      	mov	r0, r3
 8062b2e:	f001 fc25 	bl	806437c <RCCEx_PLL2_Config>
 8062b32:	4603      	mov	r3, r0
 8062b34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8062b38:	e00f      	b.n	8062b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8062b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062b3e:	3328      	adds	r3, #40	@ 0x28
 8062b40:	2102      	movs	r1, #2
 8062b42:	4618      	mov	r0, r3
 8062b44:	f001 fccc 	bl	80644e0 <RCCEx_PLL3_Config>
 8062b48:	4603      	mov	r3, r0
 8062b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8062b4e:	e004      	b.n	8062b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8062b50:	2301      	movs	r3, #1
 8062b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8062b56:	e000      	b.n	8062b5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8062b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8062b5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062b5e:	2b00      	cmp	r3, #0
 8062b60:	d10a      	bne.n	8062b78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8062b62:	4b98      	ldr	r3, [pc, #608]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8062b66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8062b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8062b70:	4a94      	ldr	r2, [pc, #592]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062b72:	430b      	orrs	r3, r1
 8062b74:	6513      	str	r3, [r2, #80]	@ 0x50
 8062b76:	e003      	b.n	8062b80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8062b78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062b7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8062b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8062b88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8062b8c:	f04f 0900 	mov.w	r9, #0
 8062b90:	ea58 0309 	orrs.w	r3, r8, r9
 8062b94:	d047      	beq.n	8062c26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8062b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8062b9c:	2b04      	cmp	r3, #4
 8062b9e:	d82a      	bhi.n	8062bf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8062ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8062ba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8062ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8062ba6:	bf00      	nop
 8062ba8:	08062bbd 	.word	0x08062bbd
 8062bac:	08062bcb 	.word	0x08062bcb
 8062bb0:	08062be1 	.word	0x08062be1
 8062bb4:	08062bff 	.word	0x08062bff
 8062bb8:	08062bff 	.word	0x08062bff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8062bbc:	4b81      	ldr	r3, [pc, #516]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062bc0:	4a80      	ldr	r2, [pc, #512]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8062bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8062bc8:	e01a      	b.n	8062c00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8062bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062bce:	3308      	adds	r3, #8
 8062bd0:	2100      	movs	r1, #0
 8062bd2:	4618      	mov	r0, r3
 8062bd4:	f001 fbd2 	bl	806437c <RCCEx_PLL2_Config>
 8062bd8:	4603      	mov	r3, r0
 8062bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8062bde:	e00f      	b.n	8062c00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8062be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062be4:	3328      	adds	r3, #40	@ 0x28
 8062be6:	2100      	movs	r1, #0
 8062be8:	4618      	mov	r0, r3
 8062bea:	f001 fc79 	bl	80644e0 <RCCEx_PLL3_Config>
 8062bee:	4603      	mov	r3, r0
 8062bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8062bf4:	e004      	b.n	8062c00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8062bf6:	2301      	movs	r3, #1
 8062bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8062bfc:	e000      	b.n	8062c00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8062bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8062c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062c04:	2b00      	cmp	r3, #0
 8062c06:	d10a      	bne.n	8062c1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8062c08:	4b6e      	ldr	r3, [pc, #440]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8062c0c:	f023 0107 	bic.w	r1, r3, #7
 8062c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8062c16:	4a6b      	ldr	r2, [pc, #428]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062c18:	430b      	orrs	r3, r1
 8062c1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8062c1c:	e003      	b.n	8062c26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8062c1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062c22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8062c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8062c2e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8062c32:	f04f 0b00 	mov.w	fp, #0
 8062c36:	ea5a 030b 	orrs.w	r3, sl, fp
 8062c3a:	d05b      	beq.n	8062cf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8062c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062c40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8062c44:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8062c48:	d03b      	beq.n	8062cc2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8062c4a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8062c4e:	d834      	bhi.n	8062cba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8062c50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8062c54:	d037      	beq.n	8062cc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8062c56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8062c5a:	d82e      	bhi.n	8062cba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8062c5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8062c60:	d033      	beq.n	8062cca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8062c62:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8062c66:	d828      	bhi.n	8062cba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8062c68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8062c6c:	d01a      	beq.n	8062ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8062c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8062c72:	d822      	bhi.n	8062cba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8062c74:	2b00      	cmp	r3, #0
 8062c76:	d003      	beq.n	8062c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8062c78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8062c7c:	d007      	beq.n	8062c8e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8062c7e:	e01c      	b.n	8062cba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8062c80:	4b50      	ldr	r3, [pc, #320]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062c84:	4a4f      	ldr	r2, [pc, #316]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8062c8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8062c8c:	e01e      	b.n	8062ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8062c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062c92:	3308      	adds	r3, #8
 8062c94:	2100      	movs	r1, #0
 8062c96:	4618      	mov	r0, r3
 8062c98:	f001 fb70 	bl	806437c <RCCEx_PLL2_Config>
 8062c9c:	4603      	mov	r3, r0
 8062c9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8062ca2:	e013      	b.n	8062ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8062ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062ca8:	3328      	adds	r3, #40	@ 0x28
 8062caa:	2100      	movs	r1, #0
 8062cac:	4618      	mov	r0, r3
 8062cae:	f001 fc17 	bl	80644e0 <RCCEx_PLL3_Config>
 8062cb2:	4603      	mov	r3, r0
 8062cb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8062cb8:	e008      	b.n	8062ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8062cba:	2301      	movs	r3, #1
 8062cbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8062cc0:	e004      	b.n	8062ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8062cc2:	bf00      	nop
 8062cc4:	e002      	b.n	8062ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8062cc6:	bf00      	nop
 8062cc8:	e000      	b.n	8062ccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8062cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8062ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062cd0:	2b00      	cmp	r3, #0
 8062cd2:	d10b      	bne.n	8062cec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8062cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8062cd8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8062cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062ce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8062ce4:	4a37      	ldr	r2, [pc, #220]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062ce6:	430b      	orrs	r3, r1
 8062ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8062cea:	e003      	b.n	8062cf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8062cec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062cf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8062cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8062cfc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8062d00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8062d04:	2300      	movs	r3, #0
 8062d06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8062d0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8062d0e:	460b      	mov	r3, r1
 8062d10:	4313      	orrs	r3, r2
 8062d12:	d05d      	beq.n	8062dd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8062d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062d18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8062d1c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8062d20:	d03b      	beq.n	8062d9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8062d22:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8062d26:	d834      	bhi.n	8062d92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8062d28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8062d2c:	d037      	beq.n	8062d9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8062d2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8062d32:	d82e      	bhi.n	8062d92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8062d34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8062d38:	d033      	beq.n	8062da2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8062d3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8062d3e:	d828      	bhi.n	8062d92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8062d40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8062d44:	d01a      	beq.n	8062d7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8062d46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8062d4a:	d822      	bhi.n	8062d92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8062d4c:	2b00      	cmp	r3, #0
 8062d4e:	d003      	beq.n	8062d58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8062d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8062d54:	d007      	beq.n	8062d66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8062d56:	e01c      	b.n	8062d92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8062d58:	4b1a      	ldr	r3, [pc, #104]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062d5c:	4a19      	ldr	r2, [pc, #100]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8062d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8062d64:	e01e      	b.n	8062da4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8062d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062d6a:	3308      	adds	r3, #8
 8062d6c:	2100      	movs	r1, #0
 8062d6e:	4618      	mov	r0, r3
 8062d70:	f001 fb04 	bl	806437c <RCCEx_PLL2_Config>
 8062d74:	4603      	mov	r3, r0
 8062d76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8062d7a:	e013      	b.n	8062da4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8062d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062d80:	3328      	adds	r3, #40	@ 0x28
 8062d82:	2100      	movs	r1, #0
 8062d84:	4618      	mov	r0, r3
 8062d86:	f001 fbab 	bl	80644e0 <RCCEx_PLL3_Config>
 8062d8a:	4603      	mov	r3, r0
 8062d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8062d90:	e008      	b.n	8062da4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8062d92:	2301      	movs	r3, #1
 8062d94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8062d98:	e004      	b.n	8062da4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8062d9a:	bf00      	nop
 8062d9c:	e002      	b.n	8062da4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8062d9e:	bf00      	nop
 8062da0:	e000      	b.n	8062da4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8062da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8062da4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062da8:	2b00      	cmp	r3, #0
 8062daa:	d10d      	bne.n	8062dc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8062dac:	4b05      	ldr	r3, [pc, #20]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8062db0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8062db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062db8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8062dbc:	4a01      	ldr	r2, [pc, #4]	@ (8062dc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8062dbe:	430b      	orrs	r3, r1
 8062dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8062dc2:	e005      	b.n	8062dd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8062dc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8062dc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062dcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8062dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8062dd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8062ddc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8062de0:	2300      	movs	r3, #0
 8062de2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8062de6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8062dea:	460b      	mov	r3, r1
 8062dec:	4313      	orrs	r3, r2
 8062dee:	d03a      	beq.n	8062e66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8062df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8062df6:	2b30      	cmp	r3, #48	@ 0x30
 8062df8:	d01f      	beq.n	8062e3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8062dfa:	2b30      	cmp	r3, #48	@ 0x30
 8062dfc:	d819      	bhi.n	8062e32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8062dfe:	2b20      	cmp	r3, #32
 8062e00:	d00c      	beq.n	8062e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8062e02:	2b20      	cmp	r3, #32
 8062e04:	d815      	bhi.n	8062e32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8062e06:	2b00      	cmp	r3, #0
 8062e08:	d019      	beq.n	8062e3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8062e0a:	2b10      	cmp	r3, #16
 8062e0c:	d111      	bne.n	8062e32 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8062e0e:	4baa      	ldr	r3, [pc, #680]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062e12:	4aa9      	ldr	r2, [pc, #676]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8062e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8062e1a:	e011      	b.n	8062e40 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8062e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062e20:	3308      	adds	r3, #8
 8062e22:	2102      	movs	r1, #2
 8062e24:	4618      	mov	r0, r3
 8062e26:	f001 faa9 	bl	806437c <RCCEx_PLL2_Config>
 8062e2a:	4603      	mov	r3, r0
 8062e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8062e30:	e006      	b.n	8062e40 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8062e32:	2301      	movs	r3, #1
 8062e34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8062e38:	e002      	b.n	8062e40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8062e3a:	bf00      	nop
 8062e3c:	e000      	b.n	8062e40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8062e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8062e40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062e44:	2b00      	cmp	r3, #0
 8062e46:	d10a      	bne.n	8062e5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8062e48:	4b9b      	ldr	r3, [pc, #620]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8062e4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8062e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8062e56:	4a98      	ldr	r2, [pc, #608]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062e58:	430b      	orrs	r3, r1
 8062e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8062e5c:	e003      	b.n	8062e66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8062e5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062e62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8062e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8062e6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8062e72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8062e76:	2300      	movs	r3, #0
 8062e78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8062e7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8062e80:	460b      	mov	r3, r1
 8062e82:	4313      	orrs	r3, r2
 8062e84:	d051      	beq.n	8062f2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8062e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8062e8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8062e90:	d035      	beq.n	8062efe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8062e92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8062e96:	d82e      	bhi.n	8062ef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8062e98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8062e9c:	d031      	beq.n	8062f02 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8062e9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8062ea2:	d828      	bhi.n	8062ef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8062ea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8062ea8:	d01a      	beq.n	8062ee0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8062eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8062eae:	d822      	bhi.n	8062ef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8062eb0:	2b00      	cmp	r3, #0
 8062eb2:	d003      	beq.n	8062ebc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8062eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8062eb8:	d007      	beq.n	8062eca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8062eba:	e01c      	b.n	8062ef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8062ebc:	4b7e      	ldr	r3, [pc, #504]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8062ec0:	4a7d      	ldr	r2, [pc, #500]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062ec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8062ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8062ec8:	e01c      	b.n	8062f04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8062eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062ece:	3308      	adds	r3, #8
 8062ed0:	2100      	movs	r1, #0
 8062ed2:	4618      	mov	r0, r3
 8062ed4:	f001 fa52 	bl	806437c <RCCEx_PLL2_Config>
 8062ed8:	4603      	mov	r3, r0
 8062eda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8062ede:	e011      	b.n	8062f04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8062ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062ee4:	3328      	adds	r3, #40	@ 0x28
 8062ee6:	2100      	movs	r1, #0
 8062ee8:	4618      	mov	r0, r3
 8062eea:	f001 faf9 	bl	80644e0 <RCCEx_PLL3_Config>
 8062eee:	4603      	mov	r3, r0
 8062ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8062ef4:	e006      	b.n	8062f04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8062ef6:	2301      	movs	r3, #1
 8062ef8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8062efc:	e002      	b.n	8062f04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8062efe:	bf00      	nop
 8062f00:	e000      	b.n	8062f04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8062f02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8062f04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062f08:	2b00      	cmp	r3, #0
 8062f0a:	d10a      	bne.n	8062f22 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8062f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8062f10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8062f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062f18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8062f1a:	4a67      	ldr	r2, [pc, #412]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062f1c:	430b      	orrs	r3, r1
 8062f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8062f20:	e003      	b.n	8062f2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8062f22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062f26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8062f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8062f32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8062f36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8062f3a:	2300      	movs	r3, #0
 8062f3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8062f40:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8062f44:	460b      	mov	r3, r1
 8062f46:	4313      	orrs	r3, r2
 8062f48:	d053      	beq.n	8062ff2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8062f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8062f50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8062f54:	d033      	beq.n	8062fbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8062f56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8062f5a:	d82c      	bhi.n	8062fb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8062f5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8062f60:	d02f      	beq.n	8062fc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8062f62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8062f66:	d826      	bhi.n	8062fb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8062f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8062f6c:	d02b      	beq.n	8062fc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8062f6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8062f72:	d820      	bhi.n	8062fb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8062f74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8062f78:	d012      	beq.n	8062fa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8062f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8062f7e:	d81a      	bhi.n	8062fb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8062f80:	2b00      	cmp	r3, #0
 8062f82:	d022      	beq.n	8062fca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8062f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8062f88:	d115      	bne.n	8062fb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8062f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062f8e:	3308      	adds	r3, #8
 8062f90:	2101      	movs	r1, #1
 8062f92:	4618      	mov	r0, r3
 8062f94:	f001 f9f2 	bl	806437c <RCCEx_PLL2_Config>
 8062f98:	4603      	mov	r3, r0
 8062f9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8062f9e:	e015      	b.n	8062fcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8062fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062fa4:	3328      	adds	r3, #40	@ 0x28
 8062fa6:	2101      	movs	r1, #1
 8062fa8:	4618      	mov	r0, r3
 8062faa:	f001 fa99 	bl	80644e0 <RCCEx_PLL3_Config>
 8062fae:	4603      	mov	r3, r0
 8062fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8062fb4:	e00a      	b.n	8062fcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8062fb6:	2301      	movs	r3, #1
 8062fb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8062fbc:	e006      	b.n	8062fcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8062fbe:	bf00      	nop
 8062fc0:	e004      	b.n	8062fcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8062fc2:	bf00      	nop
 8062fc4:	e002      	b.n	8062fcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8062fc6:	bf00      	nop
 8062fc8:	e000      	b.n	8062fcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8062fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8062fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062fd0:	2b00      	cmp	r3, #0
 8062fd2:	d10a      	bne.n	8062fea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8062fd4:	4b38      	ldr	r3, [pc, #224]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8062fd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8062fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8062fe2:	4a35      	ldr	r2, [pc, #212]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8062fe4:	430b      	orrs	r3, r1
 8062fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8062fe8:	e003      	b.n	8062ff2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8062fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8062fee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8062ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8062ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8062ffa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8062ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8063002:	2300      	movs	r3, #0
 8063004:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8063008:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 806300c:	460b      	mov	r3, r1
 806300e:	4313      	orrs	r3, r2
 8063010:	d058      	beq.n	80630c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8063012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063016:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 806301a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 806301e:	d033      	beq.n	8063088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8063020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8063024:	d82c      	bhi.n	8063080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8063026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 806302a:	d02f      	beq.n	806308c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 806302c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8063030:	d826      	bhi.n	8063080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8063032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8063036:	d02b      	beq.n	8063090 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8063038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 806303c:	d820      	bhi.n	8063080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 806303e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8063042:	d012      	beq.n	806306a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8063044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8063048:	d81a      	bhi.n	8063080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 806304a:	2b00      	cmp	r3, #0
 806304c:	d022      	beq.n	8063094 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 806304e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8063052:	d115      	bne.n	8063080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8063054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063058:	3308      	adds	r3, #8
 806305a:	2101      	movs	r1, #1
 806305c:	4618      	mov	r0, r3
 806305e:	f001 f98d 	bl	806437c <RCCEx_PLL2_Config>
 8063062:	4603      	mov	r3, r0
 8063064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8063068:	e015      	b.n	8063096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 806306a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806306e:	3328      	adds	r3, #40	@ 0x28
 8063070:	2101      	movs	r1, #1
 8063072:	4618      	mov	r0, r3
 8063074:	f001 fa34 	bl	80644e0 <RCCEx_PLL3_Config>
 8063078:	4603      	mov	r3, r0
 806307a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 806307e:	e00a      	b.n	8063096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8063080:	2301      	movs	r3, #1
 8063082:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8063086:	e006      	b.n	8063096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8063088:	bf00      	nop
 806308a:	e004      	b.n	8063096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 806308c:	bf00      	nop
 806308e:	e002      	b.n	8063096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8063090:	bf00      	nop
 8063092:	e000      	b.n	8063096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8063094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8063096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 806309a:	2b00      	cmp	r3, #0
 806309c:	d10e      	bne.n	80630bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 806309e:	4b06      	ldr	r3, [pc, #24]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80630a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80630a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80630a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80630aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80630ae:	4a02      	ldr	r2, [pc, #8]	@ (80630b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80630b0:	430b      	orrs	r3, r1
 80630b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80630b4:	e006      	b.n	80630c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80630b6:	bf00      	nop
 80630b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80630bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80630c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80630c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80630c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80630cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80630d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80630d4:	2300      	movs	r3, #0
 80630d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80630da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80630de:	460b      	mov	r3, r1
 80630e0:	4313      	orrs	r3, r2
 80630e2:	d037      	beq.n	8063154 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80630e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80630e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80630ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80630ee:	d00e      	beq.n	806310e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80630f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80630f4:	d816      	bhi.n	8063124 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80630f6:	2b00      	cmp	r3, #0
 80630f8:	d018      	beq.n	806312c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80630fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80630fe:	d111      	bne.n	8063124 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8063100:	4bc4      	ldr	r3, [pc, #784]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8063104:	4ac3      	ldr	r2, [pc, #780]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 806310a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 806310c:	e00f      	b.n	806312e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 806310e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063112:	3308      	adds	r3, #8
 8063114:	2101      	movs	r1, #1
 8063116:	4618      	mov	r0, r3
 8063118:	f001 f930 	bl	806437c <RCCEx_PLL2_Config>
 806311c:	4603      	mov	r3, r0
 806311e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8063122:	e004      	b.n	806312e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8063124:	2301      	movs	r3, #1
 8063126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 806312a:	e000      	b.n	806312e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 806312c:	bf00      	nop
    }

    if (ret == HAL_OK)
 806312e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063132:	2b00      	cmp	r3, #0
 8063134:	d10a      	bne.n	806314c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8063136:	4bb7      	ldr	r3, [pc, #732]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 806313a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 806313e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8063144:	4ab3      	ldr	r2, [pc, #716]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063146:	430b      	orrs	r3, r1
 8063148:	6513      	str	r3, [r2, #80]	@ 0x50
 806314a:	e003      	b.n	8063154 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 806314c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8063154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063158:	e9d3 2300 	ldrd	r2, r3, [r3]
 806315c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8063160:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8063164:	2300      	movs	r3, #0
 8063166:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 806316a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 806316e:	460b      	mov	r3, r1
 8063170:	4313      	orrs	r3, r2
 8063172:	d039      	beq.n	80631e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8063174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 806317a:	2b03      	cmp	r3, #3
 806317c:	d81c      	bhi.n	80631b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 806317e:	a201      	add	r2, pc, #4	@ (adr r2, 8063184 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8063180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8063184:	080631c1 	.word	0x080631c1
 8063188:	08063195 	.word	0x08063195
 806318c:	080631a3 	.word	0x080631a3
 8063190:	080631c1 	.word	0x080631c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8063194:	4b9f      	ldr	r3, [pc, #636]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8063198:	4a9e      	ldr	r2, [pc, #632]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 806319a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 806319e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80631a0:	e00f      	b.n	80631c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80631a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80631a6:	3308      	adds	r3, #8
 80631a8:	2102      	movs	r1, #2
 80631aa:	4618      	mov	r0, r3
 80631ac:	f001 f8e6 	bl	806437c <RCCEx_PLL2_Config>
 80631b0:	4603      	mov	r3, r0
 80631b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80631b6:	e004      	b.n	80631c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80631b8:	2301      	movs	r3, #1
 80631ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80631be:	e000      	b.n	80631c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80631c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80631c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80631c6:	2b00      	cmp	r3, #0
 80631c8:	d10a      	bne.n	80631e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80631ca:	4b92      	ldr	r3, [pc, #584]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80631cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80631ce:	f023 0103 	bic.w	r1, r3, #3
 80631d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80631d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80631d8:	4a8e      	ldr	r2, [pc, #568]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80631da:	430b      	orrs	r3, r1
 80631dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80631de:	e003      	b.n	80631e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80631e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80631e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80631e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80631ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80631f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80631f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80631f8:	2300      	movs	r3, #0
 80631fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80631fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8063202:	460b      	mov	r3, r1
 8063204:	4313      	orrs	r3, r2
 8063206:	f000 8099 	beq.w	806333c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 806320a:	4b83      	ldr	r3, [pc, #524]	@ (8063418 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 806320c:	681b      	ldr	r3, [r3, #0]
 806320e:	4a82      	ldr	r2, [pc, #520]	@ (8063418 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8063210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8063214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8063216:	f7fd ff9b 	bl	8061150 <HAL_GetTick>
 806321a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 806321e:	e00b      	b.n	8063238 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8063220:	f7fd ff96 	bl	8061150 <HAL_GetTick>
 8063224:	4602      	mov	r2, r0
 8063226:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 806322a:	1ad3      	subs	r3, r2, r3
 806322c:	2b64      	cmp	r3, #100	@ 0x64
 806322e:	d903      	bls.n	8063238 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8063230:	2303      	movs	r3, #3
 8063232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8063236:	e005      	b.n	8063244 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8063238:	4b77      	ldr	r3, [pc, #476]	@ (8063418 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 806323a:	681b      	ldr	r3, [r3, #0]
 806323c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8063240:	2b00      	cmp	r3, #0
 8063242:	d0ed      	beq.n	8063220 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8063244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063248:	2b00      	cmp	r3, #0
 806324a:	d173      	bne.n	8063334 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 806324c:	4b71      	ldr	r3, [pc, #452]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 806324e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8063250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063254:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8063258:	4053      	eors	r3, r2
 806325a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 806325e:	2b00      	cmp	r3, #0
 8063260:	d015      	beq.n	806328e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8063262:	4b6c      	ldr	r3, [pc, #432]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8063266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 806326a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 806326e:	4b69      	ldr	r3, [pc, #420]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8063272:	4a68      	ldr	r2, [pc, #416]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8063278:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 806327a:	4b66      	ldr	r3, [pc, #408]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 806327c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 806327e:	4a65      	ldr	r2, [pc, #404]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8063284:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8063286:	4a63      	ldr	r2, [pc, #396]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 806328c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 806328e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8063296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 806329a:	d118      	bne.n	80632ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 806329c:	f7fd ff58 	bl	8061150 <HAL_GetTick>
 80632a0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80632a4:	e00d      	b.n	80632c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80632a6:	f7fd ff53 	bl	8061150 <HAL_GetTick>
 80632aa:	4602      	mov	r2, r0
 80632ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80632b0:	1ad2      	subs	r2, r2, r3
 80632b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80632b6:	429a      	cmp	r2, r3
 80632b8:	d903      	bls.n	80632c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80632ba:	2303      	movs	r3, #3
 80632bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80632c0:	e005      	b.n	80632ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80632c2:	4b54      	ldr	r3, [pc, #336]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80632c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80632c6:	f003 0302 	and.w	r3, r3, #2
 80632ca:	2b00      	cmp	r3, #0
 80632cc:	d0eb      	beq.n	80632a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80632ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80632d2:	2b00      	cmp	r3, #0
 80632d4:	d129      	bne.n	806332a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80632d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80632da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80632de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80632e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80632e6:	d10e      	bne.n	8063306 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80632e8:	4b4a      	ldr	r3, [pc, #296]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80632ea:	691b      	ldr	r3, [r3, #16]
 80632ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80632f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80632f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80632f8:	091a      	lsrs	r2, r3, #4
 80632fa:	4b48      	ldr	r3, [pc, #288]	@ (806341c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80632fc:	4013      	ands	r3, r2
 80632fe:	4a45      	ldr	r2, [pc, #276]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063300:	430b      	orrs	r3, r1
 8063302:	6113      	str	r3, [r2, #16]
 8063304:	e005      	b.n	8063312 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8063306:	4b43      	ldr	r3, [pc, #268]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063308:	691b      	ldr	r3, [r3, #16]
 806330a:	4a42      	ldr	r2, [pc, #264]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 806330c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8063310:	6113      	str	r3, [r2, #16]
 8063312:	4b40      	ldr	r3, [pc, #256]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063314:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8063316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806331a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 806331e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8063322:	4a3c      	ldr	r2, [pc, #240]	@ (8063414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8063324:	430b      	orrs	r3, r1
 8063326:	6713      	str	r3, [r2, #112]	@ 0x70
 8063328:	e008      	b.n	806333c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 806332a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 806332e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8063332:	e003      	b.n	806333c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 806333c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063344:	f002 0301 	and.w	r3, r2, #1
 8063348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 806334c:	2300      	movs	r3, #0
 806334e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8063352:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8063356:	460b      	mov	r3, r1
 8063358:	4313      	orrs	r3, r2
 806335a:	f000 808f 	beq.w	806347c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 806335e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8063364:	2b28      	cmp	r3, #40	@ 0x28
 8063366:	d871      	bhi.n	806344c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8063368:	a201      	add	r2, pc, #4	@ (adr r2, 8063370 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 806336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806336e:	bf00      	nop
 8063370:	08063455 	.word	0x08063455
 8063374:	0806344d 	.word	0x0806344d
 8063378:	0806344d 	.word	0x0806344d
 806337c:	0806344d 	.word	0x0806344d
 8063380:	0806344d 	.word	0x0806344d
 8063384:	0806344d 	.word	0x0806344d
 8063388:	0806344d 	.word	0x0806344d
 806338c:	0806344d 	.word	0x0806344d
 8063390:	08063421 	.word	0x08063421
 8063394:	0806344d 	.word	0x0806344d
 8063398:	0806344d 	.word	0x0806344d
 806339c:	0806344d 	.word	0x0806344d
 80633a0:	0806344d 	.word	0x0806344d
 80633a4:	0806344d 	.word	0x0806344d
 80633a8:	0806344d 	.word	0x0806344d
 80633ac:	0806344d 	.word	0x0806344d
 80633b0:	08063437 	.word	0x08063437
 80633b4:	0806344d 	.word	0x0806344d
 80633b8:	0806344d 	.word	0x0806344d
 80633bc:	0806344d 	.word	0x0806344d
 80633c0:	0806344d 	.word	0x0806344d
 80633c4:	0806344d 	.word	0x0806344d
 80633c8:	0806344d 	.word	0x0806344d
 80633cc:	0806344d 	.word	0x0806344d
 80633d0:	08063455 	.word	0x08063455
 80633d4:	0806344d 	.word	0x0806344d
 80633d8:	0806344d 	.word	0x0806344d
 80633dc:	0806344d 	.word	0x0806344d
 80633e0:	0806344d 	.word	0x0806344d
 80633e4:	0806344d 	.word	0x0806344d
 80633e8:	0806344d 	.word	0x0806344d
 80633ec:	0806344d 	.word	0x0806344d
 80633f0:	08063455 	.word	0x08063455
 80633f4:	0806344d 	.word	0x0806344d
 80633f8:	0806344d 	.word	0x0806344d
 80633fc:	0806344d 	.word	0x0806344d
 8063400:	0806344d 	.word	0x0806344d
 8063404:	0806344d 	.word	0x0806344d
 8063408:	0806344d 	.word	0x0806344d
 806340c:	0806344d 	.word	0x0806344d
 8063410:	08063455 	.word	0x08063455
 8063414:	58024400 	.word	0x58024400
 8063418:	58024800 	.word	0x58024800
 806341c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8063420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063424:	3308      	adds	r3, #8
 8063426:	2101      	movs	r1, #1
 8063428:	4618      	mov	r0, r3
 806342a:	f000 ffa7 	bl	806437c <RCCEx_PLL2_Config>
 806342e:	4603      	mov	r3, r0
 8063430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8063434:	e00f      	b.n	8063456 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8063436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806343a:	3328      	adds	r3, #40	@ 0x28
 806343c:	2101      	movs	r1, #1
 806343e:	4618      	mov	r0, r3
 8063440:	f001 f84e 	bl	80644e0 <RCCEx_PLL3_Config>
 8063444:	4603      	mov	r3, r0
 8063446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 806344a:	e004      	b.n	8063456 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 806344c:	2301      	movs	r3, #1
 806344e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8063452:	e000      	b.n	8063456 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8063454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8063456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 806345a:	2b00      	cmp	r3, #0
 806345c:	d10a      	bne.n	8063474 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 806345e:	4bbf      	ldr	r3, [pc, #764]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8063460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8063462:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8063466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806346a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 806346c:	4abb      	ldr	r2, [pc, #748]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 806346e:	430b      	orrs	r3, r1
 8063470:	6553      	str	r3, [r2, #84]	@ 0x54
 8063472:	e003      	b.n	806347c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063478:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 806347c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063484:	f002 0302 	and.w	r3, r2, #2
 8063488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 806348c:	2300      	movs	r3, #0
 806348e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8063492:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8063496:	460b      	mov	r3, r1
 8063498:	4313      	orrs	r3, r2
 806349a:	d041      	beq.n	8063520 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 806349c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80634a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80634a2:	2b05      	cmp	r3, #5
 80634a4:	d824      	bhi.n	80634f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80634a6:	a201      	add	r2, pc, #4	@ (adr r2, 80634ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80634a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80634ac:	080634f9 	.word	0x080634f9
 80634b0:	080634c5 	.word	0x080634c5
 80634b4:	080634db 	.word	0x080634db
 80634b8:	080634f9 	.word	0x080634f9
 80634bc:	080634f9 	.word	0x080634f9
 80634c0:	080634f9 	.word	0x080634f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80634c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80634c8:	3308      	adds	r3, #8
 80634ca:	2101      	movs	r1, #1
 80634cc:	4618      	mov	r0, r3
 80634ce:	f000 ff55 	bl	806437c <RCCEx_PLL2_Config>
 80634d2:	4603      	mov	r3, r0
 80634d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80634d8:	e00f      	b.n	80634fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80634da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80634de:	3328      	adds	r3, #40	@ 0x28
 80634e0:	2101      	movs	r1, #1
 80634e2:	4618      	mov	r0, r3
 80634e4:	f000 fffc 	bl	80644e0 <RCCEx_PLL3_Config>
 80634e8:	4603      	mov	r3, r0
 80634ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80634ee:	e004      	b.n	80634fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80634f0:	2301      	movs	r3, #1
 80634f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80634f6:	e000      	b.n	80634fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80634f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80634fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80634fe:	2b00      	cmp	r3, #0
 8063500:	d10a      	bne.n	8063518 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8063502:	4b96      	ldr	r3, [pc, #600]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8063504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8063506:	f023 0107 	bic.w	r1, r3, #7
 806350a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806350e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8063510:	4a92      	ldr	r2, [pc, #584]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8063512:	430b      	orrs	r3, r1
 8063514:	6553      	str	r3, [r2, #84]	@ 0x54
 8063516:	e003      	b.n	8063520 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 806351c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8063520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063528:	f002 0304 	and.w	r3, r2, #4
 806352c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8063530:	2300      	movs	r3, #0
 8063532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8063536:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 806353a:	460b      	mov	r3, r1
 806353c:	4313      	orrs	r3, r2
 806353e:	d044      	beq.n	80635ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8063540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8063548:	2b05      	cmp	r3, #5
 806354a:	d825      	bhi.n	8063598 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 806354c:	a201      	add	r2, pc, #4	@ (adr r2, 8063554 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 806354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8063552:	bf00      	nop
 8063554:	080635a1 	.word	0x080635a1
 8063558:	0806356d 	.word	0x0806356d
 806355c:	08063583 	.word	0x08063583
 8063560:	080635a1 	.word	0x080635a1
 8063564:	080635a1 	.word	0x080635a1
 8063568:	080635a1 	.word	0x080635a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 806356c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063570:	3308      	adds	r3, #8
 8063572:	2101      	movs	r1, #1
 8063574:	4618      	mov	r0, r3
 8063576:	f000 ff01 	bl	806437c <RCCEx_PLL2_Config>
 806357a:	4603      	mov	r3, r0
 806357c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8063580:	e00f      	b.n	80635a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8063582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063586:	3328      	adds	r3, #40	@ 0x28
 8063588:	2101      	movs	r1, #1
 806358a:	4618      	mov	r0, r3
 806358c:	f000 ffa8 	bl	80644e0 <RCCEx_PLL3_Config>
 8063590:	4603      	mov	r3, r0
 8063592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8063596:	e004      	b.n	80635a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8063598:	2301      	movs	r3, #1
 806359a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 806359e:	e000      	b.n	80635a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80635a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80635a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80635a6:	2b00      	cmp	r3, #0
 80635a8:	d10b      	bne.n	80635c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80635aa:	4b6c      	ldr	r3, [pc, #432]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80635ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80635ae:	f023 0107 	bic.w	r1, r3, #7
 80635b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80635b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80635ba:	4a68      	ldr	r2, [pc, #416]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80635bc:	430b      	orrs	r3, r1
 80635be:	6593      	str	r3, [r2, #88]	@ 0x58
 80635c0:	e003      	b.n	80635ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80635c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80635c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80635ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80635ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80635d2:	f002 0320 	and.w	r3, r2, #32
 80635d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80635da:	2300      	movs	r3, #0
 80635dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80635e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80635e4:	460b      	mov	r3, r1
 80635e6:	4313      	orrs	r3, r2
 80635e8:	d055      	beq.n	8063696 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80635ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80635ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80635f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80635f6:	d033      	beq.n	8063660 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80635f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80635fc:	d82c      	bhi.n	8063658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80635fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8063602:	d02f      	beq.n	8063664 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8063604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8063608:	d826      	bhi.n	8063658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 806360a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 806360e:	d02b      	beq.n	8063668 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8063610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8063614:	d820      	bhi.n	8063658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8063616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 806361a:	d012      	beq.n	8063642 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 806361c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8063620:	d81a      	bhi.n	8063658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8063622:	2b00      	cmp	r3, #0
 8063624:	d022      	beq.n	806366c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8063626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 806362a:	d115      	bne.n	8063658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 806362c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063630:	3308      	adds	r3, #8
 8063632:	2100      	movs	r1, #0
 8063634:	4618      	mov	r0, r3
 8063636:	f000 fea1 	bl	806437c <RCCEx_PLL2_Config>
 806363a:	4603      	mov	r3, r0
 806363c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8063640:	e015      	b.n	806366e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8063642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063646:	3328      	adds	r3, #40	@ 0x28
 8063648:	2102      	movs	r1, #2
 806364a:	4618      	mov	r0, r3
 806364c:	f000 ff48 	bl	80644e0 <RCCEx_PLL3_Config>
 8063650:	4603      	mov	r3, r0
 8063652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8063656:	e00a      	b.n	806366e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8063658:	2301      	movs	r3, #1
 806365a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 806365e:	e006      	b.n	806366e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8063660:	bf00      	nop
 8063662:	e004      	b.n	806366e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8063664:	bf00      	nop
 8063666:	e002      	b.n	806366e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8063668:	bf00      	nop
 806366a:	e000      	b.n	806366e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 806366c:	bf00      	nop
    }

    if (ret == HAL_OK)
 806366e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063672:	2b00      	cmp	r3, #0
 8063674:	d10b      	bne.n	806368e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8063676:	4b39      	ldr	r3, [pc, #228]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8063678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 806367a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 806367e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8063686:	4a35      	ldr	r2, [pc, #212]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8063688:	430b      	orrs	r3, r1
 806368a:	6553      	str	r3, [r2, #84]	@ 0x54
 806368c:	e003      	b.n	8063696 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 806368e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063692:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8063696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 806369e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80636a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80636a6:	2300      	movs	r3, #0
 80636a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80636ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80636b0:	460b      	mov	r3, r1
 80636b2:	4313      	orrs	r3, r2
 80636b4:	d058      	beq.n	8063768 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80636b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80636ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80636be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80636c2:	d033      	beq.n	806372c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80636c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80636c8:	d82c      	bhi.n	8063724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80636ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80636ce:	d02f      	beq.n	8063730 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80636d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80636d4:	d826      	bhi.n	8063724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80636d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80636da:	d02b      	beq.n	8063734 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80636dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80636e0:	d820      	bhi.n	8063724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80636e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80636e6:	d012      	beq.n	806370e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80636e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80636ec:	d81a      	bhi.n	8063724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80636ee:	2b00      	cmp	r3, #0
 80636f0:	d022      	beq.n	8063738 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80636f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80636f6:	d115      	bne.n	8063724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80636f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80636fc:	3308      	adds	r3, #8
 80636fe:	2100      	movs	r1, #0
 8063700:	4618      	mov	r0, r3
 8063702:	f000 fe3b 	bl	806437c <RCCEx_PLL2_Config>
 8063706:	4603      	mov	r3, r0
 8063708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 806370c:	e015      	b.n	806373a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 806370e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063712:	3328      	adds	r3, #40	@ 0x28
 8063714:	2102      	movs	r1, #2
 8063716:	4618      	mov	r0, r3
 8063718:	f000 fee2 	bl	80644e0 <RCCEx_PLL3_Config>
 806371c:	4603      	mov	r3, r0
 806371e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8063722:	e00a      	b.n	806373a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8063724:	2301      	movs	r3, #1
 8063726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 806372a:	e006      	b.n	806373a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 806372c:	bf00      	nop
 806372e:	e004      	b.n	806373a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8063730:	bf00      	nop
 8063732:	e002      	b.n	806373a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8063734:	bf00      	nop
 8063736:	e000      	b.n	806373a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8063738:	bf00      	nop
    }

    if (ret == HAL_OK)
 806373a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 806373e:	2b00      	cmp	r3, #0
 8063740:	d10e      	bne.n	8063760 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8063742:	4b06      	ldr	r3, [pc, #24]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8063744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8063746:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 806374a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806374e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8063752:	4a02      	ldr	r2, [pc, #8]	@ (806375c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8063754:	430b      	orrs	r3, r1
 8063756:	6593      	str	r3, [r2, #88]	@ 0x58
 8063758:	e006      	b.n	8063768 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 806375a:	bf00      	nop
 806375c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8063768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063770:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8063774:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8063778:	2300      	movs	r3, #0
 806377a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 806377e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8063782:	460b      	mov	r3, r1
 8063784:	4313      	orrs	r3, r2
 8063786:	d055      	beq.n	8063834 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8063788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806378c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8063790:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8063794:	d033      	beq.n	80637fe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8063796:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 806379a:	d82c      	bhi.n	80637f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 806379c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80637a0:	d02f      	beq.n	8063802 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80637a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80637a6:	d826      	bhi.n	80637f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80637a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80637ac:	d02b      	beq.n	8063806 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80637ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80637b2:	d820      	bhi.n	80637f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80637b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80637b8:	d012      	beq.n	80637e0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80637ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80637be:	d81a      	bhi.n	80637f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80637c0:	2b00      	cmp	r3, #0
 80637c2:	d022      	beq.n	806380a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80637c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80637c8:	d115      	bne.n	80637f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80637ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80637ce:	3308      	adds	r3, #8
 80637d0:	2100      	movs	r1, #0
 80637d2:	4618      	mov	r0, r3
 80637d4:	f000 fdd2 	bl	806437c <RCCEx_PLL2_Config>
 80637d8:	4603      	mov	r3, r0
 80637da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80637de:	e015      	b.n	806380c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80637e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80637e4:	3328      	adds	r3, #40	@ 0x28
 80637e6:	2102      	movs	r1, #2
 80637e8:	4618      	mov	r0, r3
 80637ea:	f000 fe79 	bl	80644e0 <RCCEx_PLL3_Config>
 80637ee:	4603      	mov	r3, r0
 80637f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80637f4:	e00a      	b.n	806380c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80637f6:	2301      	movs	r3, #1
 80637f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80637fc:	e006      	b.n	806380c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80637fe:	bf00      	nop
 8063800:	e004      	b.n	806380c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8063802:	bf00      	nop
 8063804:	e002      	b.n	806380c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8063806:	bf00      	nop
 8063808:	e000      	b.n	806380c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 806380a:	bf00      	nop
    }

    if (ret == HAL_OK)
 806380c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063810:	2b00      	cmp	r3, #0
 8063812:	d10b      	bne.n	806382c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8063814:	4ba0      	ldr	r3, [pc, #640]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8063816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8063818:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 806381c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063820:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8063824:	4a9c      	ldr	r2, [pc, #624]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8063826:	430b      	orrs	r3, r1
 8063828:	6593      	str	r3, [r2, #88]	@ 0x58
 806382a:	e003      	b.n	8063834 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 806382c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063830:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8063834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063838:	e9d3 2300 	ldrd	r2, r3, [r3]
 806383c:	f002 0308 	and.w	r3, r2, #8
 8063840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8063844:	2300      	movs	r3, #0
 8063846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 806384a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 806384e:	460b      	mov	r3, r1
 8063850:	4313      	orrs	r3, r2
 8063852:	d01e      	beq.n	8063892 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8063854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 806385c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8063860:	d10c      	bne.n	806387c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8063862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063866:	3328      	adds	r3, #40	@ 0x28
 8063868:	2102      	movs	r1, #2
 806386a:	4618      	mov	r0, r3
 806386c:	f000 fe38 	bl	80644e0 <RCCEx_PLL3_Config>
 8063870:	4603      	mov	r3, r0
 8063872:	2b00      	cmp	r3, #0
 8063874:	d002      	beq.n	806387c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8063876:	2301      	movs	r3, #1
 8063878:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 806387c:	4b86      	ldr	r3, [pc, #536]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 806387e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8063880:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8063884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 806388c:	4a82      	ldr	r2, [pc, #520]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 806388e:	430b      	orrs	r3, r1
 8063890:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8063892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063896:	e9d3 2300 	ldrd	r2, r3, [r3]
 806389a:	f002 0310 	and.w	r3, r2, #16
 806389e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80638a2:	2300      	movs	r3, #0
 80638a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80638a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80638ac:	460b      	mov	r3, r1
 80638ae:	4313      	orrs	r3, r2
 80638b0:	d01e      	beq.n	80638f0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80638b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80638b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80638ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80638be:	d10c      	bne.n	80638da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80638c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80638c4:	3328      	adds	r3, #40	@ 0x28
 80638c6:	2102      	movs	r1, #2
 80638c8:	4618      	mov	r0, r3
 80638ca:	f000 fe09 	bl	80644e0 <RCCEx_PLL3_Config>
 80638ce:	4603      	mov	r3, r0
 80638d0:	2b00      	cmp	r3, #0
 80638d2:	d002      	beq.n	80638da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80638d4:	2301      	movs	r3, #1
 80638d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80638da:	4b6f      	ldr	r3, [pc, #444]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80638dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80638de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80638e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80638e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80638ea:	4a6b      	ldr	r2, [pc, #428]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80638ec:	430b      	orrs	r3, r1
 80638ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80638f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80638f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80638f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80638fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80638fe:	2300      	movs	r3, #0
 8063900:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8063902:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8063906:	460b      	mov	r3, r1
 8063908:	4313      	orrs	r3, r2
 806390a:	d03e      	beq.n	806398a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 806390c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8063914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8063918:	d022      	beq.n	8063960 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 806391a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 806391e:	d81b      	bhi.n	8063958 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8063920:	2b00      	cmp	r3, #0
 8063922:	d003      	beq.n	806392c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8063924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8063928:	d00b      	beq.n	8063942 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 806392a:	e015      	b.n	8063958 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 806392c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063930:	3308      	adds	r3, #8
 8063932:	2100      	movs	r1, #0
 8063934:	4618      	mov	r0, r3
 8063936:	f000 fd21 	bl	806437c <RCCEx_PLL2_Config>
 806393a:	4603      	mov	r3, r0
 806393c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8063940:	e00f      	b.n	8063962 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8063942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063946:	3328      	adds	r3, #40	@ 0x28
 8063948:	2102      	movs	r1, #2
 806394a:	4618      	mov	r0, r3
 806394c:	f000 fdc8 	bl	80644e0 <RCCEx_PLL3_Config>
 8063950:	4603      	mov	r3, r0
 8063952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8063956:	e004      	b.n	8063962 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8063958:	2301      	movs	r3, #1
 806395a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 806395e:	e000      	b.n	8063962 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8063960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8063962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063966:	2b00      	cmp	r3, #0
 8063968:	d10b      	bne.n	8063982 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 806396a:	4b4b      	ldr	r3, [pc, #300]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 806396c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 806396e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8063972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 806397a:	4a47      	ldr	r2, [pc, #284]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 806397c:	430b      	orrs	r3, r1
 806397e:	6593      	str	r3, [r2, #88]	@ 0x58
 8063980:	e003      	b.n	806398a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 806398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 806398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063992:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8063996:	673b      	str	r3, [r7, #112]	@ 0x70
 8063998:	2300      	movs	r3, #0
 806399a:	677b      	str	r3, [r7, #116]	@ 0x74
 806399c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80639a0:	460b      	mov	r3, r1
 80639a2:	4313      	orrs	r3, r2
 80639a4:	d03b      	beq.n	8063a1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80639a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80639aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80639ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80639b2:	d01f      	beq.n	80639f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80639b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80639b8:	d818      	bhi.n	80639ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80639ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80639be:	d003      	beq.n	80639c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80639c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80639c4:	d007      	beq.n	80639d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80639c6:	e011      	b.n	80639ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80639c8:	4b33      	ldr	r3, [pc, #204]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80639ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80639cc:	4a32      	ldr	r2, [pc, #200]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80639ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80639d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80639d4:	e00f      	b.n	80639f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80639d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80639da:	3328      	adds	r3, #40	@ 0x28
 80639dc:	2101      	movs	r1, #1
 80639de:	4618      	mov	r0, r3
 80639e0:	f000 fd7e 	bl	80644e0 <RCCEx_PLL3_Config>
 80639e4:	4603      	mov	r3, r0
 80639e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80639ea:	e004      	b.n	80639f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80639ec:	2301      	movs	r3, #1
 80639ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80639f2:	e000      	b.n	80639f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80639f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80639f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80639fa:	2b00      	cmp	r3, #0
 80639fc:	d10b      	bne.n	8063a16 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80639fe:	4b26      	ldr	r3, [pc, #152]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8063a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8063a02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8063a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8063a0e:	4a22      	ldr	r2, [pc, #136]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8063a10:	430b      	orrs	r3, r1
 8063a12:	6553      	str	r3, [r2, #84]	@ 0x54
 8063a14:	e003      	b.n	8063a1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063a1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8063a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063a26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8063a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8063a2c:	2300      	movs	r3, #0
 8063a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8063a30:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8063a34:	460b      	mov	r3, r1
 8063a36:	4313      	orrs	r3, r2
 8063a38:	d034      	beq.n	8063aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8063a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8063a40:	2b00      	cmp	r3, #0
 8063a42:	d003      	beq.n	8063a4c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8063a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8063a48:	d007      	beq.n	8063a5a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8063a4a:	e011      	b.n	8063a70 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8063a4c:	4b12      	ldr	r3, [pc, #72]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8063a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8063a50:	4a11      	ldr	r2, [pc, #68]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8063a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8063a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8063a58:	e00e      	b.n	8063a78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8063a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063a5e:	3308      	adds	r3, #8
 8063a60:	2102      	movs	r1, #2
 8063a62:	4618      	mov	r0, r3
 8063a64:	f000 fc8a 	bl	806437c <RCCEx_PLL2_Config>
 8063a68:	4603      	mov	r3, r0
 8063a6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8063a6e:	e003      	b.n	8063a78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8063a70:	2301      	movs	r3, #1
 8063a72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8063a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8063a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063a7c:	2b00      	cmp	r3, #0
 8063a7e:	d10d      	bne.n	8063a9c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8063a80:	4b05      	ldr	r3, [pc, #20]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8063a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8063a84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8063a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8063a8e:	4a02      	ldr	r2, [pc, #8]	@ (8063a98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8063a90:	430b      	orrs	r3, r1
 8063a92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8063a94:	e006      	b.n	8063aa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8063a96:	bf00      	nop
 8063a98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063a9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063aa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8063aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063aac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8063ab0:	663b      	str	r3, [r7, #96]	@ 0x60
 8063ab2:	2300      	movs	r3, #0
 8063ab4:	667b      	str	r3, [r7, #100]	@ 0x64
 8063ab6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8063aba:	460b      	mov	r3, r1
 8063abc:	4313      	orrs	r3, r2
 8063abe:	d00c      	beq.n	8063ada <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8063ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063ac4:	3328      	adds	r3, #40	@ 0x28
 8063ac6:	2102      	movs	r1, #2
 8063ac8:	4618      	mov	r0, r3
 8063aca:	f000 fd09 	bl	80644e0 <RCCEx_PLL3_Config>
 8063ace:	4603      	mov	r3, r0
 8063ad0:	2b00      	cmp	r3, #0
 8063ad2:	d002      	beq.n	8063ada <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8063ad4:	2301      	movs	r3, #1
 8063ad6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8063ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063ae2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8063ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8063ae8:	2300      	movs	r3, #0
 8063aea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8063aec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8063af0:	460b      	mov	r3, r1
 8063af2:	4313      	orrs	r3, r2
 8063af4:	d036      	beq.n	8063b64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8063af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063afa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8063afc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8063b00:	d018      	beq.n	8063b34 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8063b02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8063b06:	d811      	bhi.n	8063b2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8063b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8063b0c:	d014      	beq.n	8063b38 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8063b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8063b12:	d80b      	bhi.n	8063b2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8063b14:	2b00      	cmp	r3, #0
 8063b16:	d011      	beq.n	8063b3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8063b18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8063b1c:	d106      	bne.n	8063b2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8063b1e:	4bb7      	ldr	r3, [pc, #732]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8063b22:	4ab6      	ldr	r2, [pc, #728]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8063b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8063b2a:	e008      	b.n	8063b3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8063b2c:	2301      	movs	r3, #1
 8063b2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8063b32:	e004      	b.n	8063b3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8063b34:	bf00      	nop
 8063b36:	e002      	b.n	8063b3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8063b38:	bf00      	nop
 8063b3a:	e000      	b.n	8063b3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8063b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8063b3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063b42:	2b00      	cmp	r3, #0
 8063b44:	d10a      	bne.n	8063b5c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8063b46:	4bad      	ldr	r3, [pc, #692]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8063b4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8063b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063b52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8063b54:	4aa9      	ldr	r2, [pc, #676]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063b56:	430b      	orrs	r3, r1
 8063b58:	6553      	str	r3, [r2, #84]	@ 0x54
 8063b5a:	e003      	b.n	8063b64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8063b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063b6c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8063b70:	653b      	str	r3, [r7, #80]	@ 0x50
 8063b72:	2300      	movs	r3, #0
 8063b74:	657b      	str	r3, [r7, #84]	@ 0x54
 8063b76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8063b7a:	460b      	mov	r3, r1
 8063b7c:	4313      	orrs	r3, r2
 8063b7e:	d009      	beq.n	8063b94 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8063b80:	4b9e      	ldr	r3, [pc, #632]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8063b84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8063b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8063b8e:	4a9b      	ldr	r2, [pc, #620]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063b90:	430b      	orrs	r3, r1
 8063b92:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8063b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063b9c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8063ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8063ba2:	2300      	movs	r3, #0
 8063ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8063ba6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8063baa:	460b      	mov	r3, r1
 8063bac:	4313      	orrs	r3, r2
 8063bae:	d009      	beq.n	8063bc4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8063bb0:	4b92      	ldr	r3, [pc, #584]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8063bb4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8063bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063bbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8063bbe:	4a8f      	ldr	r2, [pc, #572]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063bc0:	430b      	orrs	r3, r1
 8063bc2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8063bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063bcc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8063bd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8063bd2:	2300      	movs	r3, #0
 8063bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8063bd6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8063bda:	460b      	mov	r3, r1
 8063bdc:	4313      	orrs	r3, r2
 8063bde:	d00e      	beq.n	8063bfe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8063be0:	4b86      	ldr	r3, [pc, #536]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063be2:	691b      	ldr	r3, [r3, #16]
 8063be4:	4a85      	ldr	r2, [pc, #532]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063be6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8063bea:	6113      	str	r3, [r2, #16]
 8063bec:	4b83      	ldr	r3, [pc, #524]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063bee:	6919      	ldr	r1, [r3, #16]
 8063bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063bf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8063bf8:	4a80      	ldr	r2, [pc, #512]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063bfa:	430b      	orrs	r3, r1
 8063bfc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8063bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063c06:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8063c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8063c0c:	2300      	movs	r3, #0
 8063c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8063c10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8063c14:	460b      	mov	r3, r1
 8063c16:	4313      	orrs	r3, r2
 8063c18:	d009      	beq.n	8063c2e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8063c1a:	4b78      	ldr	r3, [pc, #480]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8063c1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8063c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8063c28:	4a74      	ldr	r2, [pc, #464]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063c2a:	430b      	orrs	r3, r1
 8063c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8063c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063c36:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8063c3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8063c3c:	2300      	movs	r3, #0
 8063c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8063c40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8063c44:	460b      	mov	r3, r1
 8063c46:	4313      	orrs	r3, r2
 8063c48:	d00a      	beq.n	8063c60 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8063c4a:	4b6c      	ldr	r3, [pc, #432]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8063c4e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8063c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8063c5a:	4a68      	ldr	r2, [pc, #416]	@ (8063dfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8063c5c:	430b      	orrs	r3, r1
 8063c5e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8063c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063c68:	2100      	movs	r1, #0
 8063c6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8063c6c:	f003 0301 	and.w	r3, r3, #1
 8063c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8063c72:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8063c76:	460b      	mov	r3, r1
 8063c78:	4313      	orrs	r3, r2
 8063c7a:	d011      	beq.n	8063ca0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8063c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063c80:	3308      	adds	r3, #8
 8063c82:	2100      	movs	r1, #0
 8063c84:	4618      	mov	r0, r3
 8063c86:	f000 fb79 	bl	806437c <RCCEx_PLL2_Config>
 8063c8a:	4603      	mov	r3, r0
 8063c8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8063c90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063c94:	2b00      	cmp	r3, #0
 8063c96:	d003      	beq.n	8063ca0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063c98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063c9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8063ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063ca8:	2100      	movs	r1, #0
 8063caa:	6239      	str	r1, [r7, #32]
 8063cac:	f003 0302 	and.w	r3, r3, #2
 8063cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8063cb2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8063cb6:	460b      	mov	r3, r1
 8063cb8:	4313      	orrs	r3, r2
 8063cba:	d011      	beq.n	8063ce0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8063cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063cc0:	3308      	adds	r3, #8
 8063cc2:	2101      	movs	r1, #1
 8063cc4:	4618      	mov	r0, r3
 8063cc6:	f000 fb59 	bl	806437c <RCCEx_PLL2_Config>
 8063cca:	4603      	mov	r3, r0
 8063ccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8063cd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063cd4:	2b00      	cmp	r3, #0
 8063cd6:	d003      	beq.n	8063ce0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063cdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8063ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063ce8:	2100      	movs	r1, #0
 8063cea:	61b9      	str	r1, [r7, #24]
 8063cec:	f003 0304 	and.w	r3, r3, #4
 8063cf0:	61fb      	str	r3, [r7, #28]
 8063cf2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8063cf6:	460b      	mov	r3, r1
 8063cf8:	4313      	orrs	r3, r2
 8063cfa:	d011      	beq.n	8063d20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8063cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063d00:	3308      	adds	r3, #8
 8063d02:	2102      	movs	r1, #2
 8063d04:	4618      	mov	r0, r3
 8063d06:	f000 fb39 	bl	806437c <RCCEx_PLL2_Config>
 8063d0a:	4603      	mov	r3, r0
 8063d0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8063d10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063d14:	2b00      	cmp	r3, #0
 8063d16:	d003      	beq.n	8063d20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063d18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063d1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8063d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063d28:	2100      	movs	r1, #0
 8063d2a:	6139      	str	r1, [r7, #16]
 8063d2c:	f003 0308 	and.w	r3, r3, #8
 8063d30:	617b      	str	r3, [r7, #20]
 8063d32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8063d36:	460b      	mov	r3, r1
 8063d38:	4313      	orrs	r3, r2
 8063d3a:	d011      	beq.n	8063d60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8063d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063d40:	3328      	adds	r3, #40	@ 0x28
 8063d42:	2100      	movs	r1, #0
 8063d44:	4618      	mov	r0, r3
 8063d46:	f000 fbcb 	bl	80644e0 <RCCEx_PLL3_Config>
 8063d4a:	4603      	mov	r3, r0
 8063d4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8063d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063d54:	2b00      	cmp	r3, #0
 8063d56:	d003      	beq.n	8063d60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063d58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063d5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8063d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063d68:	2100      	movs	r1, #0
 8063d6a:	60b9      	str	r1, [r7, #8]
 8063d6c:	f003 0310 	and.w	r3, r3, #16
 8063d70:	60fb      	str	r3, [r7, #12]
 8063d72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8063d76:	460b      	mov	r3, r1
 8063d78:	4313      	orrs	r3, r2
 8063d7a:	d011      	beq.n	8063da0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8063d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063d80:	3328      	adds	r3, #40	@ 0x28
 8063d82:	2101      	movs	r1, #1
 8063d84:	4618      	mov	r0, r3
 8063d86:	f000 fbab 	bl	80644e0 <RCCEx_PLL3_Config>
 8063d8a:	4603      	mov	r3, r0
 8063d8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8063d90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063d94:	2b00      	cmp	r3, #0
 8063d96:	d003      	beq.n	8063da0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063d98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063d9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8063da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8063da8:	2100      	movs	r1, #0
 8063daa:	6039      	str	r1, [r7, #0]
 8063dac:	f003 0320 	and.w	r3, r3, #32
 8063db0:	607b      	str	r3, [r7, #4]
 8063db2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8063db6:	460b      	mov	r3, r1
 8063db8:	4313      	orrs	r3, r2
 8063dba:	d011      	beq.n	8063de0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8063dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8063dc0:	3328      	adds	r3, #40	@ 0x28
 8063dc2:	2102      	movs	r1, #2
 8063dc4:	4618      	mov	r0, r3
 8063dc6:	f000 fb8b 	bl	80644e0 <RCCEx_PLL3_Config>
 8063dca:	4603      	mov	r3, r0
 8063dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8063dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063dd4:	2b00      	cmp	r3, #0
 8063dd6:	d003      	beq.n	8063de0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8063dd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8063ddc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8063de0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8063de4:	2b00      	cmp	r3, #0
 8063de6:	d101      	bne.n	8063dec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8063de8:	2300      	movs	r3, #0
 8063dea:	e000      	b.n	8063dee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8063dec:	2301      	movs	r3, #1
}
 8063dee:	4618      	mov	r0, r3
 8063df0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8063df4:	46bd      	mov	sp, r7
 8063df6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8063dfa:	bf00      	nop
 8063dfc:	58024400 	.word	0x58024400

08063e00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8063e00:	b580      	push	{r7, lr}
 8063e02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8063e04:	f7fe fe00 	bl	8062a08 <HAL_RCC_GetHCLKFreq>
 8063e08:	4602      	mov	r2, r0
 8063e0a:	4b06      	ldr	r3, [pc, #24]	@ (8063e24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8063e0c:	6a1b      	ldr	r3, [r3, #32]
 8063e0e:	091b      	lsrs	r3, r3, #4
 8063e10:	f003 0307 	and.w	r3, r3, #7
 8063e14:	4904      	ldr	r1, [pc, #16]	@ (8063e28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8063e16:	5ccb      	ldrb	r3, [r1, r3]
 8063e18:	f003 031f 	and.w	r3, r3, #31
 8063e1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8063e20:	4618      	mov	r0, r3
 8063e22:	bd80      	pop	{r7, pc}
 8063e24:	58024400 	.word	0x58024400
 8063e28:	080661e8 	.word	0x080661e8

08063e2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8063e2c:	b480      	push	{r7}
 8063e2e:	b089      	sub	sp, #36	@ 0x24
 8063e30:	af00      	add	r7, sp, #0
 8063e32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8063e34:	4ba1      	ldr	r3, [pc, #644]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8063e38:	f003 0303 	and.w	r3, r3, #3
 8063e3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8063e3e:	4b9f      	ldr	r3, [pc, #636]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8063e42:	0b1b      	lsrs	r3, r3, #12
 8063e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8063e48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8063e4a:	4b9c      	ldr	r3, [pc, #624]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8063e4e:	091b      	lsrs	r3, r3, #4
 8063e50:	f003 0301 	and.w	r3, r3, #1
 8063e54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8063e56:	4b99      	ldr	r3, [pc, #612]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8063e5a:	08db      	lsrs	r3, r3, #3
 8063e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8063e60:	693a      	ldr	r2, [r7, #16]
 8063e62:	fb02 f303 	mul.w	r3, r2, r3
 8063e66:	ee07 3a90 	vmov	s15, r3
 8063e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063e6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8063e72:	697b      	ldr	r3, [r7, #20]
 8063e74:	2b00      	cmp	r3, #0
 8063e76:	f000 8111 	beq.w	806409c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8063e7a:	69bb      	ldr	r3, [r7, #24]
 8063e7c:	2b02      	cmp	r3, #2
 8063e7e:	f000 8083 	beq.w	8063f88 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8063e82:	69bb      	ldr	r3, [r7, #24]
 8063e84:	2b02      	cmp	r3, #2
 8063e86:	f200 80a1 	bhi.w	8063fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8063e8a:	69bb      	ldr	r3, [r7, #24]
 8063e8c:	2b00      	cmp	r3, #0
 8063e8e:	d003      	beq.n	8063e98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8063e90:	69bb      	ldr	r3, [r7, #24]
 8063e92:	2b01      	cmp	r3, #1
 8063e94:	d056      	beq.n	8063f44 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8063e96:	e099      	b.n	8063fcc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8063e98:	4b88      	ldr	r3, [pc, #544]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063e9a:	681b      	ldr	r3, [r3, #0]
 8063e9c:	f003 0320 	and.w	r3, r3, #32
 8063ea0:	2b00      	cmp	r3, #0
 8063ea2:	d02d      	beq.n	8063f00 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8063ea4:	4b85      	ldr	r3, [pc, #532]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063ea6:	681b      	ldr	r3, [r3, #0]
 8063ea8:	08db      	lsrs	r3, r3, #3
 8063eaa:	f003 0303 	and.w	r3, r3, #3
 8063eae:	4a84      	ldr	r2, [pc, #528]	@ (80640c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8063eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8063eb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8063eb6:	68bb      	ldr	r3, [r7, #8]
 8063eb8:	ee07 3a90 	vmov	s15, r3
 8063ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063ec0:	697b      	ldr	r3, [r7, #20]
 8063ec2:	ee07 3a90 	vmov	s15, r3
 8063ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063ece:	4b7b      	ldr	r3, [pc, #492]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8063ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063ed6:	ee07 3a90 	vmov	s15, r3
 8063eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8063ee2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80640c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8063ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8063eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8063ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8063ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8063efa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8063efe:	e087      	b.n	8064010 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8063f00:	697b      	ldr	r3, [r7, #20]
 8063f02:	ee07 3a90 	vmov	s15, r3
 8063f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063f0a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80640c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8063f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063f12:	4b6a      	ldr	r3, [pc, #424]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8063f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063f1a:	ee07 3a90 	vmov	s15, r3
 8063f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8063f26:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80640c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8063f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8063f32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8063f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8063f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8063f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8063f42:	e065      	b.n	8064010 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8063f44:	697b      	ldr	r3, [r7, #20]
 8063f46:	ee07 3a90 	vmov	s15, r3
 8063f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063f4e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80640cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8063f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063f56:	4b59      	ldr	r3, [pc, #356]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8063f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063f5e:	ee07 3a90 	vmov	s15, r3
 8063f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8063f6a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80640c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8063f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8063f76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8063f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8063f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8063f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8063f86:	e043      	b.n	8064010 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8063f88:	697b      	ldr	r3, [r7, #20]
 8063f8a:	ee07 3a90 	vmov	s15, r3
 8063f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063f92:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80640d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8063f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063f9a:	4b48      	ldr	r3, [pc, #288]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8063f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063fa2:	ee07 3a90 	vmov	s15, r3
 8063fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8063fae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80640c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8063fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8063fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8063fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8063fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8063fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8063fca:	e021      	b.n	8064010 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8063fcc:	697b      	ldr	r3, [r7, #20]
 8063fce:	ee07 3a90 	vmov	s15, r3
 8063fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8063fd6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80640cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8063fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8063fde:	4b37      	ldr	r3, [pc, #220]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8063fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8063fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8063fe6:	ee07 3a90 	vmov	s15, r3
 8063fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8063fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8063ff2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80640c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8063ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8063ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8063ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8064002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8064006:	ee67 7a27 	vmul.f32	s15, s14, s15
 806400a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 806400e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8064010:	4b2a      	ldr	r3, [pc, #168]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8064012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8064014:	0a5b      	lsrs	r3, r3, #9
 8064016:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 806401a:	ee07 3a90 	vmov	s15, r3
 806401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8064022:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8064026:	ee37 7a87 	vadd.f32	s14, s15, s14
 806402a:	edd7 6a07 	vldr	s13, [r7, #28]
 806402e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8064032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8064036:	ee17 2a90 	vmov	r2, s15
 806403a:	687b      	ldr	r3, [r7, #4]
 806403c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 806403e:	4b1f      	ldr	r3, [pc, #124]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8064040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8064042:	0c1b      	lsrs	r3, r3, #16
 8064044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8064048:	ee07 3a90 	vmov	s15, r3
 806404c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8064050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8064054:	ee37 7a87 	vadd.f32	s14, s15, s14
 8064058:	edd7 6a07 	vldr	s13, [r7, #28]
 806405c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8064060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8064064:	ee17 2a90 	vmov	r2, s15
 8064068:	687b      	ldr	r3, [r7, #4]
 806406a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 806406c:	4b13      	ldr	r3, [pc, #76]	@ (80640bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 806406e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8064070:	0e1b      	lsrs	r3, r3, #24
 8064072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8064076:	ee07 3a90 	vmov	s15, r3
 806407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806407e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8064082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8064086:	edd7 6a07 	vldr	s13, [r7, #28]
 806408a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 806408e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8064092:	ee17 2a90 	vmov	r2, s15
 8064096:	687b      	ldr	r3, [r7, #4]
 8064098:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 806409a:	e008      	b.n	80640ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 806409c:	687b      	ldr	r3, [r7, #4]
 806409e:	2200      	movs	r2, #0
 80640a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80640a2:	687b      	ldr	r3, [r7, #4]
 80640a4:	2200      	movs	r2, #0
 80640a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80640a8:	687b      	ldr	r3, [r7, #4]
 80640aa:	2200      	movs	r2, #0
 80640ac:	609a      	str	r2, [r3, #8]
}
 80640ae:	bf00      	nop
 80640b0:	3724      	adds	r7, #36	@ 0x24
 80640b2:	46bd      	mov	sp, r7
 80640b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80640b8:	4770      	bx	lr
 80640ba:	bf00      	nop
 80640bc:	58024400 	.word	0x58024400
 80640c0:	03d09000 	.word	0x03d09000
 80640c4:	46000000 	.word	0x46000000
 80640c8:	4c742400 	.word	0x4c742400
 80640cc:	4a742400 	.word	0x4a742400
 80640d0:	4bbebc20 	.word	0x4bbebc20

080640d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80640d4:	b480      	push	{r7}
 80640d6:	b089      	sub	sp, #36	@ 0x24
 80640d8:	af00      	add	r7, sp, #0
 80640da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80640dc:	4ba1      	ldr	r3, [pc, #644]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80640de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80640e0:	f003 0303 	and.w	r3, r3, #3
 80640e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80640e6:	4b9f      	ldr	r3, [pc, #636]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80640e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80640ea:	0d1b      	lsrs	r3, r3, #20
 80640ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80640f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80640f2:	4b9c      	ldr	r3, [pc, #624]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80640f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80640f6:	0a1b      	lsrs	r3, r3, #8
 80640f8:	f003 0301 	and.w	r3, r3, #1
 80640fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80640fe:	4b99      	ldr	r3, [pc, #612]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8064100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8064102:	08db      	lsrs	r3, r3, #3
 8064104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8064108:	693a      	ldr	r2, [r7, #16]
 806410a:	fb02 f303 	mul.w	r3, r2, r3
 806410e:	ee07 3a90 	vmov	s15, r3
 8064112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8064116:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 806411a:	697b      	ldr	r3, [r7, #20]
 806411c:	2b00      	cmp	r3, #0
 806411e:	f000 8111 	beq.w	8064344 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8064122:	69bb      	ldr	r3, [r7, #24]
 8064124:	2b02      	cmp	r3, #2
 8064126:	f000 8083 	beq.w	8064230 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 806412a:	69bb      	ldr	r3, [r7, #24]
 806412c:	2b02      	cmp	r3, #2
 806412e:	f200 80a1 	bhi.w	8064274 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8064132:	69bb      	ldr	r3, [r7, #24]
 8064134:	2b00      	cmp	r3, #0
 8064136:	d003      	beq.n	8064140 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8064138:	69bb      	ldr	r3, [r7, #24]
 806413a:	2b01      	cmp	r3, #1
 806413c:	d056      	beq.n	80641ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 806413e:	e099      	b.n	8064274 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8064140:	4b88      	ldr	r3, [pc, #544]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8064142:	681b      	ldr	r3, [r3, #0]
 8064144:	f003 0320 	and.w	r3, r3, #32
 8064148:	2b00      	cmp	r3, #0
 806414a:	d02d      	beq.n	80641a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 806414c:	4b85      	ldr	r3, [pc, #532]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 806414e:	681b      	ldr	r3, [r3, #0]
 8064150:	08db      	lsrs	r3, r3, #3
 8064152:	f003 0303 	and.w	r3, r3, #3
 8064156:	4a84      	ldr	r2, [pc, #528]	@ (8064368 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8064158:	fa22 f303 	lsr.w	r3, r2, r3
 806415c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 806415e:	68bb      	ldr	r3, [r7, #8]
 8064160:	ee07 3a90 	vmov	s15, r3
 8064164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8064168:	697b      	ldr	r3, [r7, #20]
 806416a:	ee07 3a90 	vmov	s15, r3
 806416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8064172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8064176:	4b7b      	ldr	r3, [pc, #492]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8064178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806417e:	ee07 3a90 	vmov	s15, r3
 8064182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8064186:	ed97 6a03 	vldr	s12, [r7, #12]
 806418a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 806436c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 806418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8064192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8064196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 806419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80641a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80641a6:	e087      	b.n	80642b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80641a8:	697b      	ldr	r3, [r7, #20]
 80641aa:	ee07 3a90 	vmov	s15, r3
 80641ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80641b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8064370 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80641b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80641ba:	4b6a      	ldr	r3, [pc, #424]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80641bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80641be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80641c2:	ee07 3a90 	vmov	s15, r3
 80641c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80641ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80641ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 806436c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80641d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80641d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80641da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80641de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80641e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80641e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80641ea:	e065      	b.n	80642b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80641ec:	697b      	ldr	r3, [r7, #20]
 80641ee:	ee07 3a90 	vmov	s15, r3
 80641f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80641f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8064374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80641fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80641fe:	4b59      	ldr	r3, [pc, #356]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8064200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8064202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8064206:	ee07 3a90 	vmov	s15, r3
 806420a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 806420e:	ed97 6a03 	vldr	s12, [r7, #12]
 8064212:	eddf 5a56 	vldr	s11, [pc, #344]	@ 806436c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8064216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 806421a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 806421e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8064222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8064226:	ee67 7a27 	vmul.f32	s15, s14, s15
 806422a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 806422e:	e043      	b.n	80642b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8064230:	697b      	ldr	r3, [r7, #20]
 8064232:	ee07 3a90 	vmov	s15, r3
 8064236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806423a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8064378 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 806423e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8064242:	4b48      	ldr	r3, [pc, #288]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8064244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8064246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806424a:	ee07 3a90 	vmov	s15, r3
 806424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8064252:	ed97 6a03 	vldr	s12, [r7, #12]
 8064256:	eddf 5a45 	vldr	s11, [pc, #276]	@ 806436c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 806425a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 806425e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8064262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8064266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 806426a:	ee67 7a27 	vmul.f32	s15, s14, s15
 806426e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8064272:	e021      	b.n	80642b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8064274:	697b      	ldr	r3, [r7, #20]
 8064276:	ee07 3a90 	vmov	s15, r3
 806427a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 806427e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8064374 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8064282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8064286:	4b37      	ldr	r3, [pc, #220]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8064288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 806428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 806428e:	ee07 3a90 	vmov	s15, r3
 8064292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8064296:	ed97 6a03 	vldr	s12, [r7, #12]
 806429a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 806436c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 806429e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80642a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80642a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80642aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80642ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80642b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80642b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80642b8:	4b2a      	ldr	r3, [pc, #168]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80642ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80642bc:	0a5b      	lsrs	r3, r3, #9
 80642be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80642c2:	ee07 3a90 	vmov	s15, r3
 80642c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80642ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80642ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80642d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80642d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80642da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80642de:	ee17 2a90 	vmov	r2, s15
 80642e2:	687b      	ldr	r3, [r7, #4]
 80642e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80642e6:	4b1f      	ldr	r3, [pc, #124]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80642e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80642ea:	0c1b      	lsrs	r3, r3, #16
 80642ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80642f0:	ee07 3a90 	vmov	s15, r3
 80642f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80642f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80642fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8064300:	edd7 6a07 	vldr	s13, [r7, #28]
 8064304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8064308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 806430c:	ee17 2a90 	vmov	r2, s15
 8064310:	687b      	ldr	r3, [r7, #4]
 8064312:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8064314:	4b13      	ldr	r3, [pc, #76]	@ (8064364 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8064316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8064318:	0e1b      	lsrs	r3, r3, #24
 806431a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 806431e:	ee07 3a90 	vmov	s15, r3
 8064322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8064326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 806432a:	ee37 7a87 	vadd.f32	s14, s15, s14
 806432e:	edd7 6a07 	vldr	s13, [r7, #28]
 8064332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8064336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 806433a:	ee17 2a90 	vmov	r2, s15
 806433e:	687b      	ldr	r3, [r7, #4]
 8064340:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8064342:	e008      	b.n	8064356 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8064344:	687b      	ldr	r3, [r7, #4]
 8064346:	2200      	movs	r2, #0
 8064348:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 806434a:	687b      	ldr	r3, [r7, #4]
 806434c:	2200      	movs	r2, #0
 806434e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8064350:	687b      	ldr	r3, [r7, #4]
 8064352:	2200      	movs	r2, #0
 8064354:	609a      	str	r2, [r3, #8]
}
 8064356:	bf00      	nop
 8064358:	3724      	adds	r7, #36	@ 0x24
 806435a:	46bd      	mov	sp, r7
 806435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8064360:	4770      	bx	lr
 8064362:	bf00      	nop
 8064364:	58024400 	.word	0x58024400
 8064368:	03d09000 	.word	0x03d09000
 806436c:	46000000 	.word	0x46000000
 8064370:	4c742400 	.word	0x4c742400
 8064374:	4a742400 	.word	0x4a742400
 8064378:	4bbebc20 	.word	0x4bbebc20

0806437c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 806437c:	b580      	push	{r7, lr}
 806437e:	b084      	sub	sp, #16
 8064380:	af00      	add	r7, sp, #0
 8064382:	6078      	str	r0, [r7, #4]
 8064384:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8064386:	2300      	movs	r3, #0
 8064388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 806438a:	4b53      	ldr	r3, [pc, #332]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 806438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806438e:	f003 0303 	and.w	r3, r3, #3
 8064392:	2b03      	cmp	r3, #3
 8064394:	d101      	bne.n	806439a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8064396:	2301      	movs	r3, #1
 8064398:	e099      	b.n	80644ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 806439a:	4b4f      	ldr	r3, [pc, #316]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 806439c:	681b      	ldr	r3, [r3, #0]
 806439e:	4a4e      	ldr	r2, [pc, #312]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 80643a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80643a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80643a6:	f7fc fed3 	bl	8061150 <HAL_GetTick>
 80643aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80643ac:	e008      	b.n	80643c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80643ae:	f7fc fecf 	bl	8061150 <HAL_GetTick>
 80643b2:	4602      	mov	r2, r0
 80643b4:	68bb      	ldr	r3, [r7, #8]
 80643b6:	1ad3      	subs	r3, r2, r3
 80643b8:	2b02      	cmp	r3, #2
 80643ba:	d901      	bls.n	80643c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80643bc:	2303      	movs	r3, #3
 80643be:	e086      	b.n	80644ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80643c0:	4b45      	ldr	r3, [pc, #276]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 80643c2:	681b      	ldr	r3, [r3, #0]
 80643c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80643c8:	2b00      	cmp	r3, #0
 80643ca:	d1f0      	bne.n	80643ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80643cc:	4b42      	ldr	r3, [pc, #264]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 80643ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80643d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80643d4:	687b      	ldr	r3, [r7, #4]
 80643d6:	681b      	ldr	r3, [r3, #0]
 80643d8:	031b      	lsls	r3, r3, #12
 80643da:	493f      	ldr	r1, [pc, #252]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 80643dc:	4313      	orrs	r3, r2
 80643de:	628b      	str	r3, [r1, #40]	@ 0x28
 80643e0:	687b      	ldr	r3, [r7, #4]
 80643e2:	685b      	ldr	r3, [r3, #4]
 80643e4:	3b01      	subs	r3, #1
 80643e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80643ea:	687b      	ldr	r3, [r7, #4]
 80643ec:	689b      	ldr	r3, [r3, #8]
 80643ee:	3b01      	subs	r3, #1
 80643f0:	025b      	lsls	r3, r3, #9
 80643f2:	b29b      	uxth	r3, r3
 80643f4:	431a      	orrs	r2, r3
 80643f6:	687b      	ldr	r3, [r7, #4]
 80643f8:	68db      	ldr	r3, [r3, #12]
 80643fa:	3b01      	subs	r3, #1
 80643fc:	041b      	lsls	r3, r3, #16
 80643fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8064402:	431a      	orrs	r2, r3
 8064404:	687b      	ldr	r3, [r7, #4]
 8064406:	691b      	ldr	r3, [r3, #16]
 8064408:	3b01      	subs	r3, #1
 806440a:	061b      	lsls	r3, r3, #24
 806440c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8064410:	4931      	ldr	r1, [pc, #196]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064412:	4313      	orrs	r3, r2
 8064414:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8064416:	4b30      	ldr	r3, [pc, #192]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806441a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 806441e:	687b      	ldr	r3, [r7, #4]
 8064420:	695b      	ldr	r3, [r3, #20]
 8064422:	492d      	ldr	r1, [pc, #180]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064424:	4313      	orrs	r3, r2
 8064426:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8064428:	4b2b      	ldr	r3, [pc, #172]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 806442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806442c:	f023 0220 	bic.w	r2, r3, #32
 8064430:	687b      	ldr	r3, [r7, #4]
 8064432:	699b      	ldr	r3, [r3, #24]
 8064434:	4928      	ldr	r1, [pc, #160]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064436:	4313      	orrs	r3, r2
 8064438:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 806443a:	4b27      	ldr	r3, [pc, #156]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 806443c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806443e:	4a26      	ldr	r2, [pc, #152]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064440:	f023 0310 	bic.w	r3, r3, #16
 8064444:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8064446:	4b24      	ldr	r3, [pc, #144]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064448:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 806444a:	4b24      	ldr	r3, [pc, #144]	@ (80644dc <RCCEx_PLL2_Config+0x160>)
 806444c:	4013      	ands	r3, r2
 806444e:	687a      	ldr	r2, [r7, #4]
 8064450:	69d2      	ldr	r2, [r2, #28]
 8064452:	00d2      	lsls	r2, r2, #3
 8064454:	4920      	ldr	r1, [pc, #128]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064456:	4313      	orrs	r3, r2
 8064458:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 806445a:	4b1f      	ldr	r3, [pc, #124]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 806445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806445e:	4a1e      	ldr	r2, [pc, #120]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064460:	f043 0310 	orr.w	r3, r3, #16
 8064464:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8064466:	683b      	ldr	r3, [r7, #0]
 8064468:	2b00      	cmp	r3, #0
 806446a:	d106      	bne.n	806447a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 806446c:	4b1a      	ldr	r3, [pc, #104]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 806446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8064470:	4a19      	ldr	r2, [pc, #100]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064472:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8064476:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8064478:	e00f      	b.n	806449a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 806447a:	683b      	ldr	r3, [r7, #0]
 806447c:	2b01      	cmp	r3, #1
 806447e:	d106      	bne.n	806448e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8064480:	4b15      	ldr	r3, [pc, #84]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8064484:	4a14      	ldr	r2, [pc, #80]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 806448a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 806448c:	e005      	b.n	806449a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 806448e:	4b12      	ldr	r3, [pc, #72]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8064492:	4a11      	ldr	r2, [pc, #68]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 8064494:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8064498:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 806449a:	4b0f      	ldr	r3, [pc, #60]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 806449c:	681b      	ldr	r3, [r3, #0]
 806449e:	4a0e      	ldr	r2, [pc, #56]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 80644a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80644a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80644a6:	f7fc fe53 	bl	8061150 <HAL_GetTick>
 80644aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80644ac:	e008      	b.n	80644c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80644ae:	f7fc fe4f 	bl	8061150 <HAL_GetTick>
 80644b2:	4602      	mov	r2, r0
 80644b4:	68bb      	ldr	r3, [r7, #8]
 80644b6:	1ad3      	subs	r3, r2, r3
 80644b8:	2b02      	cmp	r3, #2
 80644ba:	d901      	bls.n	80644c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80644bc:	2303      	movs	r3, #3
 80644be:	e006      	b.n	80644ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80644c0:	4b05      	ldr	r3, [pc, #20]	@ (80644d8 <RCCEx_PLL2_Config+0x15c>)
 80644c2:	681b      	ldr	r3, [r3, #0]
 80644c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80644c8:	2b00      	cmp	r3, #0
 80644ca:	d0f0      	beq.n	80644ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80644cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80644ce:	4618      	mov	r0, r3
 80644d0:	3710      	adds	r7, #16
 80644d2:	46bd      	mov	sp, r7
 80644d4:	bd80      	pop	{r7, pc}
 80644d6:	bf00      	nop
 80644d8:	58024400 	.word	0x58024400
 80644dc:	ffff0007 	.word	0xffff0007

080644e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80644e0:	b580      	push	{r7, lr}
 80644e2:	b084      	sub	sp, #16
 80644e4:	af00      	add	r7, sp, #0
 80644e6:	6078      	str	r0, [r7, #4]
 80644e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80644ea:	2300      	movs	r3, #0
 80644ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80644ee:	4b53      	ldr	r3, [pc, #332]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80644f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80644f2:	f003 0303 	and.w	r3, r3, #3
 80644f6:	2b03      	cmp	r3, #3
 80644f8:	d101      	bne.n	80644fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80644fa:	2301      	movs	r3, #1
 80644fc:	e099      	b.n	8064632 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80644fe:	4b4f      	ldr	r3, [pc, #316]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064500:	681b      	ldr	r3, [r3, #0]
 8064502:	4a4e      	ldr	r2, [pc, #312]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8064508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 806450a:	f7fc fe21 	bl	8061150 <HAL_GetTick>
 806450e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8064510:	e008      	b.n	8064524 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8064512:	f7fc fe1d 	bl	8061150 <HAL_GetTick>
 8064516:	4602      	mov	r2, r0
 8064518:	68bb      	ldr	r3, [r7, #8]
 806451a:	1ad3      	subs	r3, r2, r3
 806451c:	2b02      	cmp	r3, #2
 806451e:	d901      	bls.n	8064524 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8064520:	2303      	movs	r3, #3
 8064522:	e086      	b.n	8064632 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8064524:	4b45      	ldr	r3, [pc, #276]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064526:	681b      	ldr	r3, [r3, #0]
 8064528:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 806452c:	2b00      	cmp	r3, #0
 806452e:	d1f0      	bne.n	8064512 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8064530:	4b42      	ldr	r3, [pc, #264]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8064534:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8064538:	687b      	ldr	r3, [r7, #4]
 806453a:	681b      	ldr	r3, [r3, #0]
 806453c:	051b      	lsls	r3, r3, #20
 806453e:	493f      	ldr	r1, [pc, #252]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064540:	4313      	orrs	r3, r2
 8064542:	628b      	str	r3, [r1, #40]	@ 0x28
 8064544:	687b      	ldr	r3, [r7, #4]
 8064546:	685b      	ldr	r3, [r3, #4]
 8064548:	3b01      	subs	r3, #1
 806454a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 806454e:	687b      	ldr	r3, [r7, #4]
 8064550:	689b      	ldr	r3, [r3, #8]
 8064552:	3b01      	subs	r3, #1
 8064554:	025b      	lsls	r3, r3, #9
 8064556:	b29b      	uxth	r3, r3
 8064558:	431a      	orrs	r2, r3
 806455a:	687b      	ldr	r3, [r7, #4]
 806455c:	68db      	ldr	r3, [r3, #12]
 806455e:	3b01      	subs	r3, #1
 8064560:	041b      	lsls	r3, r3, #16
 8064562:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8064566:	431a      	orrs	r2, r3
 8064568:	687b      	ldr	r3, [r7, #4]
 806456a:	691b      	ldr	r3, [r3, #16]
 806456c:	3b01      	subs	r3, #1
 806456e:	061b      	lsls	r3, r3, #24
 8064570:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8064574:	4931      	ldr	r1, [pc, #196]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064576:	4313      	orrs	r3, r2
 8064578:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 806457a:	4b30      	ldr	r3, [pc, #192]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 806457c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 806457e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8064582:	687b      	ldr	r3, [r7, #4]
 8064584:	695b      	ldr	r3, [r3, #20]
 8064586:	492d      	ldr	r1, [pc, #180]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064588:	4313      	orrs	r3, r2
 806458a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 806458c:	4b2b      	ldr	r3, [pc, #172]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 806458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8064590:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8064594:	687b      	ldr	r3, [r7, #4]
 8064596:	699b      	ldr	r3, [r3, #24]
 8064598:	4928      	ldr	r1, [pc, #160]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 806459a:	4313      	orrs	r3, r2
 806459c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 806459e:	4b27      	ldr	r3, [pc, #156]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80645a2:	4a26      	ldr	r2, [pc, #152]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80645a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80645aa:	4b24      	ldr	r3, [pc, #144]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80645ae:	4b24      	ldr	r3, [pc, #144]	@ (8064640 <RCCEx_PLL3_Config+0x160>)
 80645b0:	4013      	ands	r3, r2
 80645b2:	687a      	ldr	r2, [r7, #4]
 80645b4:	69d2      	ldr	r2, [r2, #28]
 80645b6:	00d2      	lsls	r2, r2, #3
 80645b8:	4920      	ldr	r1, [pc, #128]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645ba:	4313      	orrs	r3, r2
 80645bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80645be:	4b1f      	ldr	r3, [pc, #124]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80645c2:	4a1e      	ldr	r2, [pc, #120]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80645c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80645ca:	683b      	ldr	r3, [r7, #0]
 80645cc:	2b00      	cmp	r3, #0
 80645ce:	d106      	bne.n	80645de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80645d0:	4b1a      	ldr	r3, [pc, #104]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80645d4:	4a19      	ldr	r2, [pc, #100]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80645da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80645dc:	e00f      	b.n	80645fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80645de:	683b      	ldr	r3, [r7, #0]
 80645e0:	2b01      	cmp	r3, #1
 80645e2:	d106      	bne.n	80645f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80645e4:	4b15      	ldr	r3, [pc, #84]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80645e8:	4a14      	ldr	r2, [pc, #80]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80645ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80645f0:	e005      	b.n	80645fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80645f2:	4b12      	ldr	r3, [pc, #72]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80645f6:	4a11      	ldr	r2, [pc, #68]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 80645f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80645fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80645fe:	4b0f      	ldr	r3, [pc, #60]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064600:	681b      	ldr	r3, [r3, #0]
 8064602:	4a0e      	ldr	r2, [pc, #56]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8064608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 806460a:	f7fc fda1 	bl	8061150 <HAL_GetTick>
 806460e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8064610:	e008      	b.n	8064624 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8064612:	f7fc fd9d 	bl	8061150 <HAL_GetTick>
 8064616:	4602      	mov	r2, r0
 8064618:	68bb      	ldr	r3, [r7, #8]
 806461a:	1ad3      	subs	r3, r2, r3
 806461c:	2b02      	cmp	r3, #2
 806461e:	d901      	bls.n	8064624 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8064620:	2303      	movs	r3, #3
 8064622:	e006      	b.n	8064632 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8064624:	4b05      	ldr	r3, [pc, #20]	@ (806463c <RCCEx_PLL3_Config+0x15c>)
 8064626:	681b      	ldr	r3, [r3, #0]
 8064628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 806462c:	2b00      	cmp	r3, #0
 806462e:	d0f0      	beq.n	8064612 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8064630:	7bfb      	ldrb	r3, [r7, #15]
}
 8064632:	4618      	mov	r0, r3
 8064634:	3710      	adds	r7, #16
 8064636:	46bd      	mov	sp, r7
 8064638:	bd80      	pop	{r7, pc}
 806463a:	bf00      	nop
 806463c:	58024400 	.word	0x58024400
 8064640:	ffff0007 	.word	0xffff0007

08064644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8064644:	b580      	push	{r7, lr}
 8064646:	b082      	sub	sp, #8
 8064648:	af00      	add	r7, sp, #0
 806464a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 806464c:	687b      	ldr	r3, [r7, #4]
 806464e:	2b00      	cmp	r3, #0
 8064650:	d101      	bne.n	8064656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8064652:	2301      	movs	r3, #1
 8064654:	e042      	b.n	80646dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8064656:	687b      	ldr	r3, [r7, #4]
 8064658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 806465c:	2b00      	cmp	r3, #0
 806465e:	d106      	bne.n	806466e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8064660:	687b      	ldr	r3, [r7, #4]
 8064662:	2200      	movs	r2, #0
 8064664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8064668:	6878      	ldr	r0, [r7, #4]
 806466a:	f7fc fb7d 	bl	8060d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 806466e:	687b      	ldr	r3, [r7, #4]
 8064670:	2224      	movs	r2, #36	@ 0x24
 8064672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8064676:	687b      	ldr	r3, [r7, #4]
 8064678:	681b      	ldr	r3, [r3, #0]
 806467a:	681a      	ldr	r2, [r3, #0]
 806467c:	687b      	ldr	r3, [r7, #4]
 806467e:	681b      	ldr	r3, [r3, #0]
 8064680:	f022 0201 	bic.w	r2, r2, #1
 8064684:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8064686:	687b      	ldr	r3, [r7, #4]
 8064688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806468a:	2b00      	cmp	r3, #0
 806468c:	d002      	beq.n	8064694 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 806468e:	6878      	ldr	r0, [r7, #4]
 8064690:	f000 ffea 	bl	8065668 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8064694:	6878      	ldr	r0, [r7, #4]
 8064696:	f000 f97b 	bl	8064990 <UART_SetConfig>
 806469a:	4603      	mov	r3, r0
 806469c:	2b01      	cmp	r3, #1
 806469e:	d101      	bne.n	80646a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80646a0:	2301      	movs	r3, #1
 80646a2:	e01b      	b.n	80646dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80646a4:	687b      	ldr	r3, [r7, #4]
 80646a6:	681b      	ldr	r3, [r3, #0]
 80646a8:	685a      	ldr	r2, [r3, #4]
 80646aa:	687b      	ldr	r3, [r7, #4]
 80646ac:	681b      	ldr	r3, [r3, #0]
 80646ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80646b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80646b4:	687b      	ldr	r3, [r7, #4]
 80646b6:	681b      	ldr	r3, [r3, #0]
 80646b8:	689a      	ldr	r2, [r3, #8]
 80646ba:	687b      	ldr	r3, [r7, #4]
 80646bc:	681b      	ldr	r3, [r3, #0]
 80646be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80646c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80646c4:	687b      	ldr	r3, [r7, #4]
 80646c6:	681b      	ldr	r3, [r3, #0]
 80646c8:	681a      	ldr	r2, [r3, #0]
 80646ca:	687b      	ldr	r3, [r7, #4]
 80646cc:	681b      	ldr	r3, [r3, #0]
 80646ce:	f042 0201 	orr.w	r2, r2, #1
 80646d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80646d4:	6878      	ldr	r0, [r7, #4]
 80646d6:	f001 f869 	bl	80657ac <UART_CheckIdleState>
 80646da:	4603      	mov	r3, r0
}
 80646dc:	4618      	mov	r0, r3
 80646de:	3708      	adds	r7, #8
 80646e0:	46bd      	mov	sp, r7
 80646e2:	bd80      	pop	{r7, pc}

080646e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80646e4:	b580      	push	{r7, lr}
 80646e6:	b08a      	sub	sp, #40	@ 0x28
 80646e8:	af02      	add	r7, sp, #8
 80646ea:	60f8      	str	r0, [r7, #12]
 80646ec:	60b9      	str	r1, [r7, #8]
 80646ee:	603b      	str	r3, [r7, #0]
 80646f0:	4613      	mov	r3, r2
 80646f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80646f4:	68fb      	ldr	r3, [r7, #12]
 80646f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80646fa:	2b20      	cmp	r3, #32
 80646fc:	d17b      	bne.n	80647f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80646fe:	68bb      	ldr	r3, [r7, #8]
 8064700:	2b00      	cmp	r3, #0
 8064702:	d002      	beq.n	806470a <HAL_UART_Transmit+0x26>
 8064704:	88fb      	ldrh	r3, [r7, #6]
 8064706:	2b00      	cmp	r3, #0
 8064708:	d101      	bne.n	806470e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 806470a:	2301      	movs	r3, #1
 806470c:	e074      	b.n	80647f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 806470e:	68fb      	ldr	r3, [r7, #12]
 8064710:	2200      	movs	r2, #0
 8064712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8064716:	68fb      	ldr	r3, [r7, #12]
 8064718:	2221      	movs	r2, #33	@ 0x21
 806471a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 806471e:	f7fc fd17 	bl	8061150 <HAL_GetTick>
 8064722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8064724:	68fb      	ldr	r3, [r7, #12]
 8064726:	88fa      	ldrh	r2, [r7, #6]
 8064728:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 806472c:	68fb      	ldr	r3, [r7, #12]
 806472e:	88fa      	ldrh	r2, [r7, #6]
 8064730:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8064734:	68fb      	ldr	r3, [r7, #12]
 8064736:	689b      	ldr	r3, [r3, #8]
 8064738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 806473c:	d108      	bne.n	8064750 <HAL_UART_Transmit+0x6c>
 806473e:	68fb      	ldr	r3, [r7, #12]
 8064740:	691b      	ldr	r3, [r3, #16]
 8064742:	2b00      	cmp	r3, #0
 8064744:	d104      	bne.n	8064750 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8064746:	2300      	movs	r3, #0
 8064748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 806474a:	68bb      	ldr	r3, [r7, #8]
 806474c:	61bb      	str	r3, [r7, #24]
 806474e:	e003      	b.n	8064758 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8064750:	68bb      	ldr	r3, [r7, #8]
 8064752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8064754:	2300      	movs	r3, #0
 8064756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8064758:	e030      	b.n	80647bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 806475a:	683b      	ldr	r3, [r7, #0]
 806475c:	9300      	str	r3, [sp, #0]
 806475e:	697b      	ldr	r3, [r7, #20]
 8064760:	2200      	movs	r2, #0
 8064762:	2180      	movs	r1, #128	@ 0x80
 8064764:	68f8      	ldr	r0, [r7, #12]
 8064766:	f001 f8cb 	bl	8065900 <UART_WaitOnFlagUntilTimeout>
 806476a:	4603      	mov	r3, r0
 806476c:	2b00      	cmp	r3, #0
 806476e:	d005      	beq.n	806477c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8064770:	68fb      	ldr	r3, [r7, #12]
 8064772:	2220      	movs	r2, #32
 8064774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8064778:	2303      	movs	r3, #3
 806477a:	e03d      	b.n	80647f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 806477c:	69fb      	ldr	r3, [r7, #28]
 806477e:	2b00      	cmp	r3, #0
 8064780:	d10b      	bne.n	806479a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8064782:	69bb      	ldr	r3, [r7, #24]
 8064784:	881b      	ldrh	r3, [r3, #0]
 8064786:	461a      	mov	r2, r3
 8064788:	68fb      	ldr	r3, [r7, #12]
 806478a:	681b      	ldr	r3, [r3, #0]
 806478c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8064790:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8064792:	69bb      	ldr	r3, [r7, #24]
 8064794:	3302      	adds	r3, #2
 8064796:	61bb      	str	r3, [r7, #24]
 8064798:	e007      	b.n	80647aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 806479a:	69fb      	ldr	r3, [r7, #28]
 806479c:	781a      	ldrb	r2, [r3, #0]
 806479e:	68fb      	ldr	r3, [r7, #12]
 80647a0:	681b      	ldr	r3, [r3, #0]
 80647a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80647a4:	69fb      	ldr	r3, [r7, #28]
 80647a6:	3301      	adds	r3, #1
 80647a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80647aa:	68fb      	ldr	r3, [r7, #12]
 80647ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80647b0:	b29b      	uxth	r3, r3
 80647b2:	3b01      	subs	r3, #1
 80647b4:	b29a      	uxth	r2, r3
 80647b6:	68fb      	ldr	r3, [r7, #12]
 80647b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80647bc:	68fb      	ldr	r3, [r7, #12]
 80647be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80647c2:	b29b      	uxth	r3, r3
 80647c4:	2b00      	cmp	r3, #0
 80647c6:	d1c8      	bne.n	806475a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80647c8:	683b      	ldr	r3, [r7, #0]
 80647ca:	9300      	str	r3, [sp, #0]
 80647cc:	697b      	ldr	r3, [r7, #20]
 80647ce:	2200      	movs	r2, #0
 80647d0:	2140      	movs	r1, #64	@ 0x40
 80647d2:	68f8      	ldr	r0, [r7, #12]
 80647d4:	f001 f894 	bl	8065900 <UART_WaitOnFlagUntilTimeout>
 80647d8:	4603      	mov	r3, r0
 80647da:	2b00      	cmp	r3, #0
 80647dc:	d005      	beq.n	80647ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80647de:	68fb      	ldr	r3, [r7, #12]
 80647e0:	2220      	movs	r2, #32
 80647e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80647e6:	2303      	movs	r3, #3
 80647e8:	e006      	b.n	80647f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80647ea:	68fb      	ldr	r3, [r7, #12]
 80647ec:	2220      	movs	r2, #32
 80647ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80647f2:	2300      	movs	r3, #0
 80647f4:	e000      	b.n	80647f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80647f6:	2302      	movs	r3, #2
  }
}
 80647f8:	4618      	mov	r0, r3
 80647fa:	3720      	adds	r7, #32
 80647fc:	46bd      	mov	sp, r7
 80647fe:	bd80      	pop	{r7, pc}

08064800 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8064800:	b580      	push	{r7, lr}
 8064802:	b08a      	sub	sp, #40	@ 0x28
 8064804:	af02      	add	r7, sp, #8
 8064806:	60f8      	str	r0, [r7, #12]
 8064808:	60b9      	str	r1, [r7, #8]
 806480a:	603b      	str	r3, [r7, #0]
 806480c:	4613      	mov	r3, r2
 806480e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8064810:	68fb      	ldr	r3, [r7, #12]
 8064812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8064816:	2b20      	cmp	r3, #32
 8064818:	f040 80b5 	bne.w	8064986 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 806481c:	68bb      	ldr	r3, [r7, #8]
 806481e:	2b00      	cmp	r3, #0
 8064820:	d002      	beq.n	8064828 <HAL_UART_Receive+0x28>
 8064822:	88fb      	ldrh	r3, [r7, #6]
 8064824:	2b00      	cmp	r3, #0
 8064826:	d101      	bne.n	806482c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8064828:	2301      	movs	r3, #1
 806482a:	e0ad      	b.n	8064988 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 806482c:	68fb      	ldr	r3, [r7, #12]
 806482e:	2200      	movs	r2, #0
 8064830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8064834:	68fb      	ldr	r3, [r7, #12]
 8064836:	2222      	movs	r2, #34	@ 0x22
 8064838:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 806483c:	68fb      	ldr	r3, [r7, #12]
 806483e:	2200      	movs	r2, #0
 8064840:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8064842:	f7fc fc85 	bl	8061150 <HAL_GetTick>
 8064846:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8064848:	68fb      	ldr	r3, [r7, #12]
 806484a:	88fa      	ldrh	r2, [r7, #6]
 806484c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8064850:	68fb      	ldr	r3, [r7, #12]
 8064852:	88fa      	ldrh	r2, [r7, #6]
 8064854:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8064858:	68fb      	ldr	r3, [r7, #12]
 806485a:	689b      	ldr	r3, [r3, #8]
 806485c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8064860:	d10e      	bne.n	8064880 <HAL_UART_Receive+0x80>
 8064862:	68fb      	ldr	r3, [r7, #12]
 8064864:	691b      	ldr	r3, [r3, #16]
 8064866:	2b00      	cmp	r3, #0
 8064868:	d105      	bne.n	8064876 <HAL_UART_Receive+0x76>
 806486a:	68fb      	ldr	r3, [r7, #12]
 806486c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8064870:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8064874:	e02d      	b.n	80648d2 <HAL_UART_Receive+0xd2>
 8064876:	68fb      	ldr	r3, [r7, #12]
 8064878:	22ff      	movs	r2, #255	@ 0xff
 806487a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 806487e:	e028      	b.n	80648d2 <HAL_UART_Receive+0xd2>
 8064880:	68fb      	ldr	r3, [r7, #12]
 8064882:	689b      	ldr	r3, [r3, #8]
 8064884:	2b00      	cmp	r3, #0
 8064886:	d10d      	bne.n	80648a4 <HAL_UART_Receive+0xa4>
 8064888:	68fb      	ldr	r3, [r7, #12]
 806488a:	691b      	ldr	r3, [r3, #16]
 806488c:	2b00      	cmp	r3, #0
 806488e:	d104      	bne.n	806489a <HAL_UART_Receive+0x9a>
 8064890:	68fb      	ldr	r3, [r7, #12]
 8064892:	22ff      	movs	r2, #255	@ 0xff
 8064894:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8064898:	e01b      	b.n	80648d2 <HAL_UART_Receive+0xd2>
 806489a:	68fb      	ldr	r3, [r7, #12]
 806489c:	227f      	movs	r2, #127	@ 0x7f
 806489e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80648a2:	e016      	b.n	80648d2 <HAL_UART_Receive+0xd2>
 80648a4:	68fb      	ldr	r3, [r7, #12]
 80648a6:	689b      	ldr	r3, [r3, #8]
 80648a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80648ac:	d10d      	bne.n	80648ca <HAL_UART_Receive+0xca>
 80648ae:	68fb      	ldr	r3, [r7, #12]
 80648b0:	691b      	ldr	r3, [r3, #16]
 80648b2:	2b00      	cmp	r3, #0
 80648b4:	d104      	bne.n	80648c0 <HAL_UART_Receive+0xc0>
 80648b6:	68fb      	ldr	r3, [r7, #12]
 80648b8:	227f      	movs	r2, #127	@ 0x7f
 80648ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80648be:	e008      	b.n	80648d2 <HAL_UART_Receive+0xd2>
 80648c0:	68fb      	ldr	r3, [r7, #12]
 80648c2:	223f      	movs	r2, #63	@ 0x3f
 80648c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80648c8:	e003      	b.n	80648d2 <HAL_UART_Receive+0xd2>
 80648ca:	68fb      	ldr	r3, [r7, #12]
 80648cc:	2200      	movs	r2, #0
 80648ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80648d2:	68fb      	ldr	r3, [r7, #12]
 80648d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80648d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80648da:	68fb      	ldr	r3, [r7, #12]
 80648dc:	689b      	ldr	r3, [r3, #8]
 80648de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80648e2:	d108      	bne.n	80648f6 <HAL_UART_Receive+0xf6>
 80648e4:	68fb      	ldr	r3, [r7, #12]
 80648e6:	691b      	ldr	r3, [r3, #16]
 80648e8:	2b00      	cmp	r3, #0
 80648ea:	d104      	bne.n	80648f6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80648ec:	2300      	movs	r3, #0
 80648ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80648f0:	68bb      	ldr	r3, [r7, #8]
 80648f2:	61bb      	str	r3, [r7, #24]
 80648f4:	e003      	b.n	80648fe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80648f6:	68bb      	ldr	r3, [r7, #8]
 80648f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80648fa:	2300      	movs	r3, #0
 80648fc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80648fe:	e036      	b.n	806496e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8064900:	683b      	ldr	r3, [r7, #0]
 8064902:	9300      	str	r3, [sp, #0]
 8064904:	697b      	ldr	r3, [r7, #20]
 8064906:	2200      	movs	r2, #0
 8064908:	2120      	movs	r1, #32
 806490a:	68f8      	ldr	r0, [r7, #12]
 806490c:	f000 fff8 	bl	8065900 <UART_WaitOnFlagUntilTimeout>
 8064910:	4603      	mov	r3, r0
 8064912:	2b00      	cmp	r3, #0
 8064914:	d005      	beq.n	8064922 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8064916:	68fb      	ldr	r3, [r7, #12]
 8064918:	2220      	movs	r2, #32
 806491a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 806491e:	2303      	movs	r3, #3
 8064920:	e032      	b.n	8064988 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8064922:	69fb      	ldr	r3, [r7, #28]
 8064924:	2b00      	cmp	r3, #0
 8064926:	d10c      	bne.n	8064942 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8064928:	68fb      	ldr	r3, [r7, #12]
 806492a:	681b      	ldr	r3, [r3, #0]
 806492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806492e:	b29a      	uxth	r2, r3
 8064930:	8a7b      	ldrh	r3, [r7, #18]
 8064932:	4013      	ands	r3, r2
 8064934:	b29a      	uxth	r2, r3
 8064936:	69bb      	ldr	r3, [r7, #24]
 8064938:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 806493a:	69bb      	ldr	r3, [r7, #24]
 806493c:	3302      	adds	r3, #2
 806493e:	61bb      	str	r3, [r7, #24]
 8064940:	e00c      	b.n	806495c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8064942:	68fb      	ldr	r3, [r7, #12]
 8064944:	681b      	ldr	r3, [r3, #0]
 8064946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8064948:	b2da      	uxtb	r2, r3
 806494a:	8a7b      	ldrh	r3, [r7, #18]
 806494c:	b2db      	uxtb	r3, r3
 806494e:	4013      	ands	r3, r2
 8064950:	b2da      	uxtb	r2, r3
 8064952:	69fb      	ldr	r3, [r7, #28]
 8064954:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8064956:	69fb      	ldr	r3, [r7, #28]
 8064958:	3301      	adds	r3, #1
 806495a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 806495c:	68fb      	ldr	r3, [r7, #12]
 806495e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8064962:	b29b      	uxth	r3, r3
 8064964:	3b01      	subs	r3, #1
 8064966:	b29a      	uxth	r2, r3
 8064968:	68fb      	ldr	r3, [r7, #12]
 806496a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 806496e:	68fb      	ldr	r3, [r7, #12]
 8064970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8064974:	b29b      	uxth	r3, r3
 8064976:	2b00      	cmp	r3, #0
 8064978:	d1c2      	bne.n	8064900 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 806497a:	68fb      	ldr	r3, [r7, #12]
 806497c:	2220      	movs	r2, #32
 806497e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8064982:	2300      	movs	r3, #0
 8064984:	e000      	b.n	8064988 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8064986:	2302      	movs	r3, #2
  }
}
 8064988:	4618      	mov	r0, r3
 806498a:	3720      	adds	r7, #32
 806498c:	46bd      	mov	sp, r7
 806498e:	bd80      	pop	{r7, pc}

08064990 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8064990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8064994:	b092      	sub	sp, #72	@ 0x48
 8064996:	af00      	add	r7, sp, #0
 8064998:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 806499a:	2300      	movs	r3, #0
 806499c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80649a0:	697b      	ldr	r3, [r7, #20]
 80649a2:	689a      	ldr	r2, [r3, #8]
 80649a4:	697b      	ldr	r3, [r7, #20]
 80649a6:	691b      	ldr	r3, [r3, #16]
 80649a8:	431a      	orrs	r2, r3
 80649aa:	697b      	ldr	r3, [r7, #20]
 80649ac:	695b      	ldr	r3, [r3, #20]
 80649ae:	431a      	orrs	r2, r3
 80649b0:	697b      	ldr	r3, [r7, #20]
 80649b2:	69db      	ldr	r3, [r3, #28]
 80649b4:	4313      	orrs	r3, r2
 80649b6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80649b8:	697b      	ldr	r3, [r7, #20]
 80649ba:	681b      	ldr	r3, [r3, #0]
 80649bc:	681a      	ldr	r2, [r3, #0]
 80649be:	4bbe      	ldr	r3, [pc, #760]	@ (8064cb8 <UART_SetConfig+0x328>)
 80649c0:	4013      	ands	r3, r2
 80649c2:	697a      	ldr	r2, [r7, #20]
 80649c4:	6812      	ldr	r2, [r2, #0]
 80649c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80649c8:	430b      	orrs	r3, r1
 80649ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80649cc:	697b      	ldr	r3, [r7, #20]
 80649ce:	681b      	ldr	r3, [r3, #0]
 80649d0:	685b      	ldr	r3, [r3, #4]
 80649d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80649d6:	697b      	ldr	r3, [r7, #20]
 80649d8:	68da      	ldr	r2, [r3, #12]
 80649da:	697b      	ldr	r3, [r7, #20]
 80649dc:	681b      	ldr	r3, [r3, #0]
 80649de:	430a      	orrs	r2, r1
 80649e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80649e2:	697b      	ldr	r3, [r7, #20]
 80649e4:	699b      	ldr	r3, [r3, #24]
 80649e6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80649e8:	697b      	ldr	r3, [r7, #20]
 80649ea:	681b      	ldr	r3, [r3, #0]
 80649ec:	4ab3      	ldr	r2, [pc, #716]	@ (8064cbc <UART_SetConfig+0x32c>)
 80649ee:	4293      	cmp	r3, r2
 80649f0:	d004      	beq.n	80649fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80649f2:	697b      	ldr	r3, [r7, #20]
 80649f4:	6a1b      	ldr	r3, [r3, #32]
 80649f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80649f8:	4313      	orrs	r3, r2
 80649fa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80649fc:	697b      	ldr	r3, [r7, #20]
 80649fe:	681b      	ldr	r3, [r3, #0]
 8064a00:	689a      	ldr	r2, [r3, #8]
 8064a02:	4baf      	ldr	r3, [pc, #700]	@ (8064cc0 <UART_SetConfig+0x330>)
 8064a04:	4013      	ands	r3, r2
 8064a06:	697a      	ldr	r2, [r7, #20]
 8064a08:	6812      	ldr	r2, [r2, #0]
 8064a0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8064a0c:	430b      	orrs	r3, r1
 8064a0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8064a10:	697b      	ldr	r3, [r7, #20]
 8064a12:	681b      	ldr	r3, [r3, #0]
 8064a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8064a16:	f023 010f 	bic.w	r1, r3, #15
 8064a1a:	697b      	ldr	r3, [r7, #20]
 8064a1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8064a1e:	697b      	ldr	r3, [r7, #20]
 8064a20:	681b      	ldr	r3, [r3, #0]
 8064a22:	430a      	orrs	r2, r1
 8064a24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8064a26:	697b      	ldr	r3, [r7, #20]
 8064a28:	681b      	ldr	r3, [r3, #0]
 8064a2a:	4aa6      	ldr	r2, [pc, #664]	@ (8064cc4 <UART_SetConfig+0x334>)
 8064a2c:	4293      	cmp	r3, r2
 8064a2e:	d177      	bne.n	8064b20 <UART_SetConfig+0x190>
 8064a30:	4ba5      	ldr	r3, [pc, #660]	@ (8064cc8 <UART_SetConfig+0x338>)
 8064a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064a34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8064a38:	2b28      	cmp	r3, #40	@ 0x28
 8064a3a:	d86d      	bhi.n	8064b18 <UART_SetConfig+0x188>
 8064a3c:	a201      	add	r2, pc, #4	@ (adr r2, 8064a44 <UART_SetConfig+0xb4>)
 8064a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064a42:	bf00      	nop
 8064a44:	08064ae9 	.word	0x08064ae9
 8064a48:	08064b19 	.word	0x08064b19
 8064a4c:	08064b19 	.word	0x08064b19
 8064a50:	08064b19 	.word	0x08064b19
 8064a54:	08064b19 	.word	0x08064b19
 8064a58:	08064b19 	.word	0x08064b19
 8064a5c:	08064b19 	.word	0x08064b19
 8064a60:	08064b19 	.word	0x08064b19
 8064a64:	08064af1 	.word	0x08064af1
 8064a68:	08064b19 	.word	0x08064b19
 8064a6c:	08064b19 	.word	0x08064b19
 8064a70:	08064b19 	.word	0x08064b19
 8064a74:	08064b19 	.word	0x08064b19
 8064a78:	08064b19 	.word	0x08064b19
 8064a7c:	08064b19 	.word	0x08064b19
 8064a80:	08064b19 	.word	0x08064b19
 8064a84:	08064af9 	.word	0x08064af9
 8064a88:	08064b19 	.word	0x08064b19
 8064a8c:	08064b19 	.word	0x08064b19
 8064a90:	08064b19 	.word	0x08064b19
 8064a94:	08064b19 	.word	0x08064b19
 8064a98:	08064b19 	.word	0x08064b19
 8064a9c:	08064b19 	.word	0x08064b19
 8064aa0:	08064b19 	.word	0x08064b19
 8064aa4:	08064b01 	.word	0x08064b01
 8064aa8:	08064b19 	.word	0x08064b19
 8064aac:	08064b19 	.word	0x08064b19
 8064ab0:	08064b19 	.word	0x08064b19
 8064ab4:	08064b19 	.word	0x08064b19
 8064ab8:	08064b19 	.word	0x08064b19
 8064abc:	08064b19 	.word	0x08064b19
 8064ac0:	08064b19 	.word	0x08064b19
 8064ac4:	08064b09 	.word	0x08064b09
 8064ac8:	08064b19 	.word	0x08064b19
 8064acc:	08064b19 	.word	0x08064b19
 8064ad0:	08064b19 	.word	0x08064b19
 8064ad4:	08064b19 	.word	0x08064b19
 8064ad8:	08064b19 	.word	0x08064b19
 8064adc:	08064b19 	.word	0x08064b19
 8064ae0:	08064b19 	.word	0x08064b19
 8064ae4:	08064b11 	.word	0x08064b11
 8064ae8:	2301      	movs	r3, #1
 8064aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064aee:	e326      	b.n	806513e <UART_SetConfig+0x7ae>
 8064af0:	2304      	movs	r3, #4
 8064af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064af6:	e322      	b.n	806513e <UART_SetConfig+0x7ae>
 8064af8:	2308      	movs	r3, #8
 8064afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064afe:	e31e      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b00:	2310      	movs	r3, #16
 8064b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b06:	e31a      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b08:	2320      	movs	r3, #32
 8064b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b0e:	e316      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b10:	2340      	movs	r3, #64	@ 0x40
 8064b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b16:	e312      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b18:	2380      	movs	r3, #128	@ 0x80
 8064b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b1e:	e30e      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b20:	697b      	ldr	r3, [r7, #20]
 8064b22:	681b      	ldr	r3, [r3, #0]
 8064b24:	4a69      	ldr	r2, [pc, #420]	@ (8064ccc <UART_SetConfig+0x33c>)
 8064b26:	4293      	cmp	r3, r2
 8064b28:	d130      	bne.n	8064b8c <UART_SetConfig+0x1fc>
 8064b2a:	4b67      	ldr	r3, [pc, #412]	@ (8064cc8 <UART_SetConfig+0x338>)
 8064b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064b2e:	f003 0307 	and.w	r3, r3, #7
 8064b32:	2b05      	cmp	r3, #5
 8064b34:	d826      	bhi.n	8064b84 <UART_SetConfig+0x1f4>
 8064b36:	a201      	add	r2, pc, #4	@ (adr r2, 8064b3c <UART_SetConfig+0x1ac>)
 8064b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064b3c:	08064b55 	.word	0x08064b55
 8064b40:	08064b5d 	.word	0x08064b5d
 8064b44:	08064b65 	.word	0x08064b65
 8064b48:	08064b6d 	.word	0x08064b6d
 8064b4c:	08064b75 	.word	0x08064b75
 8064b50:	08064b7d 	.word	0x08064b7d
 8064b54:	2300      	movs	r3, #0
 8064b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b5a:	e2f0      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b5c:	2304      	movs	r3, #4
 8064b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b62:	e2ec      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b64:	2308      	movs	r3, #8
 8064b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b6a:	e2e8      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b6c:	2310      	movs	r3, #16
 8064b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b72:	e2e4      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b74:	2320      	movs	r3, #32
 8064b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b7a:	e2e0      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b7c:	2340      	movs	r3, #64	@ 0x40
 8064b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b82:	e2dc      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b84:	2380      	movs	r3, #128	@ 0x80
 8064b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064b8a:	e2d8      	b.n	806513e <UART_SetConfig+0x7ae>
 8064b8c:	697b      	ldr	r3, [r7, #20]
 8064b8e:	681b      	ldr	r3, [r3, #0]
 8064b90:	4a4f      	ldr	r2, [pc, #316]	@ (8064cd0 <UART_SetConfig+0x340>)
 8064b92:	4293      	cmp	r3, r2
 8064b94:	d130      	bne.n	8064bf8 <UART_SetConfig+0x268>
 8064b96:	4b4c      	ldr	r3, [pc, #304]	@ (8064cc8 <UART_SetConfig+0x338>)
 8064b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064b9a:	f003 0307 	and.w	r3, r3, #7
 8064b9e:	2b05      	cmp	r3, #5
 8064ba0:	d826      	bhi.n	8064bf0 <UART_SetConfig+0x260>
 8064ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8064ba8 <UART_SetConfig+0x218>)
 8064ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064ba8:	08064bc1 	.word	0x08064bc1
 8064bac:	08064bc9 	.word	0x08064bc9
 8064bb0:	08064bd1 	.word	0x08064bd1
 8064bb4:	08064bd9 	.word	0x08064bd9
 8064bb8:	08064be1 	.word	0x08064be1
 8064bbc:	08064be9 	.word	0x08064be9
 8064bc0:	2300      	movs	r3, #0
 8064bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064bc6:	e2ba      	b.n	806513e <UART_SetConfig+0x7ae>
 8064bc8:	2304      	movs	r3, #4
 8064bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064bce:	e2b6      	b.n	806513e <UART_SetConfig+0x7ae>
 8064bd0:	2308      	movs	r3, #8
 8064bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064bd6:	e2b2      	b.n	806513e <UART_SetConfig+0x7ae>
 8064bd8:	2310      	movs	r3, #16
 8064bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064bde:	e2ae      	b.n	806513e <UART_SetConfig+0x7ae>
 8064be0:	2320      	movs	r3, #32
 8064be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064be6:	e2aa      	b.n	806513e <UART_SetConfig+0x7ae>
 8064be8:	2340      	movs	r3, #64	@ 0x40
 8064bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064bee:	e2a6      	b.n	806513e <UART_SetConfig+0x7ae>
 8064bf0:	2380      	movs	r3, #128	@ 0x80
 8064bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064bf6:	e2a2      	b.n	806513e <UART_SetConfig+0x7ae>
 8064bf8:	697b      	ldr	r3, [r7, #20]
 8064bfa:	681b      	ldr	r3, [r3, #0]
 8064bfc:	4a35      	ldr	r2, [pc, #212]	@ (8064cd4 <UART_SetConfig+0x344>)
 8064bfe:	4293      	cmp	r3, r2
 8064c00:	d130      	bne.n	8064c64 <UART_SetConfig+0x2d4>
 8064c02:	4b31      	ldr	r3, [pc, #196]	@ (8064cc8 <UART_SetConfig+0x338>)
 8064c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064c06:	f003 0307 	and.w	r3, r3, #7
 8064c0a:	2b05      	cmp	r3, #5
 8064c0c:	d826      	bhi.n	8064c5c <UART_SetConfig+0x2cc>
 8064c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8064c14 <UART_SetConfig+0x284>)
 8064c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064c14:	08064c2d 	.word	0x08064c2d
 8064c18:	08064c35 	.word	0x08064c35
 8064c1c:	08064c3d 	.word	0x08064c3d
 8064c20:	08064c45 	.word	0x08064c45
 8064c24:	08064c4d 	.word	0x08064c4d
 8064c28:	08064c55 	.word	0x08064c55
 8064c2c:	2300      	movs	r3, #0
 8064c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064c32:	e284      	b.n	806513e <UART_SetConfig+0x7ae>
 8064c34:	2304      	movs	r3, #4
 8064c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064c3a:	e280      	b.n	806513e <UART_SetConfig+0x7ae>
 8064c3c:	2308      	movs	r3, #8
 8064c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064c42:	e27c      	b.n	806513e <UART_SetConfig+0x7ae>
 8064c44:	2310      	movs	r3, #16
 8064c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064c4a:	e278      	b.n	806513e <UART_SetConfig+0x7ae>
 8064c4c:	2320      	movs	r3, #32
 8064c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064c52:	e274      	b.n	806513e <UART_SetConfig+0x7ae>
 8064c54:	2340      	movs	r3, #64	@ 0x40
 8064c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064c5a:	e270      	b.n	806513e <UART_SetConfig+0x7ae>
 8064c5c:	2380      	movs	r3, #128	@ 0x80
 8064c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064c62:	e26c      	b.n	806513e <UART_SetConfig+0x7ae>
 8064c64:	697b      	ldr	r3, [r7, #20]
 8064c66:	681b      	ldr	r3, [r3, #0]
 8064c68:	4a1b      	ldr	r2, [pc, #108]	@ (8064cd8 <UART_SetConfig+0x348>)
 8064c6a:	4293      	cmp	r3, r2
 8064c6c:	d142      	bne.n	8064cf4 <UART_SetConfig+0x364>
 8064c6e:	4b16      	ldr	r3, [pc, #88]	@ (8064cc8 <UART_SetConfig+0x338>)
 8064c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064c72:	f003 0307 	and.w	r3, r3, #7
 8064c76:	2b05      	cmp	r3, #5
 8064c78:	d838      	bhi.n	8064cec <UART_SetConfig+0x35c>
 8064c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8064c80 <UART_SetConfig+0x2f0>)
 8064c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064c80:	08064c99 	.word	0x08064c99
 8064c84:	08064ca1 	.word	0x08064ca1
 8064c88:	08064ca9 	.word	0x08064ca9
 8064c8c:	08064cb1 	.word	0x08064cb1
 8064c90:	08064cdd 	.word	0x08064cdd
 8064c94:	08064ce5 	.word	0x08064ce5
 8064c98:	2300      	movs	r3, #0
 8064c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064c9e:	e24e      	b.n	806513e <UART_SetConfig+0x7ae>
 8064ca0:	2304      	movs	r3, #4
 8064ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064ca6:	e24a      	b.n	806513e <UART_SetConfig+0x7ae>
 8064ca8:	2308      	movs	r3, #8
 8064caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064cae:	e246      	b.n	806513e <UART_SetConfig+0x7ae>
 8064cb0:	2310      	movs	r3, #16
 8064cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064cb6:	e242      	b.n	806513e <UART_SetConfig+0x7ae>
 8064cb8:	cfff69f3 	.word	0xcfff69f3
 8064cbc:	58000c00 	.word	0x58000c00
 8064cc0:	11fff4ff 	.word	0x11fff4ff
 8064cc4:	40011000 	.word	0x40011000
 8064cc8:	58024400 	.word	0x58024400
 8064ccc:	40004400 	.word	0x40004400
 8064cd0:	40004800 	.word	0x40004800
 8064cd4:	40004c00 	.word	0x40004c00
 8064cd8:	40005000 	.word	0x40005000
 8064cdc:	2320      	movs	r3, #32
 8064cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064ce2:	e22c      	b.n	806513e <UART_SetConfig+0x7ae>
 8064ce4:	2340      	movs	r3, #64	@ 0x40
 8064ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064cea:	e228      	b.n	806513e <UART_SetConfig+0x7ae>
 8064cec:	2380      	movs	r3, #128	@ 0x80
 8064cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064cf2:	e224      	b.n	806513e <UART_SetConfig+0x7ae>
 8064cf4:	697b      	ldr	r3, [r7, #20]
 8064cf6:	681b      	ldr	r3, [r3, #0]
 8064cf8:	4ab1      	ldr	r2, [pc, #708]	@ (8064fc0 <UART_SetConfig+0x630>)
 8064cfa:	4293      	cmp	r3, r2
 8064cfc:	d176      	bne.n	8064dec <UART_SetConfig+0x45c>
 8064cfe:	4bb1      	ldr	r3, [pc, #708]	@ (8064fc4 <UART_SetConfig+0x634>)
 8064d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8064d06:	2b28      	cmp	r3, #40	@ 0x28
 8064d08:	d86c      	bhi.n	8064de4 <UART_SetConfig+0x454>
 8064d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8064d10 <UART_SetConfig+0x380>)
 8064d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064d10:	08064db5 	.word	0x08064db5
 8064d14:	08064de5 	.word	0x08064de5
 8064d18:	08064de5 	.word	0x08064de5
 8064d1c:	08064de5 	.word	0x08064de5
 8064d20:	08064de5 	.word	0x08064de5
 8064d24:	08064de5 	.word	0x08064de5
 8064d28:	08064de5 	.word	0x08064de5
 8064d2c:	08064de5 	.word	0x08064de5
 8064d30:	08064dbd 	.word	0x08064dbd
 8064d34:	08064de5 	.word	0x08064de5
 8064d38:	08064de5 	.word	0x08064de5
 8064d3c:	08064de5 	.word	0x08064de5
 8064d40:	08064de5 	.word	0x08064de5
 8064d44:	08064de5 	.word	0x08064de5
 8064d48:	08064de5 	.word	0x08064de5
 8064d4c:	08064de5 	.word	0x08064de5
 8064d50:	08064dc5 	.word	0x08064dc5
 8064d54:	08064de5 	.word	0x08064de5
 8064d58:	08064de5 	.word	0x08064de5
 8064d5c:	08064de5 	.word	0x08064de5
 8064d60:	08064de5 	.word	0x08064de5
 8064d64:	08064de5 	.word	0x08064de5
 8064d68:	08064de5 	.word	0x08064de5
 8064d6c:	08064de5 	.word	0x08064de5
 8064d70:	08064dcd 	.word	0x08064dcd
 8064d74:	08064de5 	.word	0x08064de5
 8064d78:	08064de5 	.word	0x08064de5
 8064d7c:	08064de5 	.word	0x08064de5
 8064d80:	08064de5 	.word	0x08064de5
 8064d84:	08064de5 	.word	0x08064de5
 8064d88:	08064de5 	.word	0x08064de5
 8064d8c:	08064de5 	.word	0x08064de5
 8064d90:	08064dd5 	.word	0x08064dd5
 8064d94:	08064de5 	.word	0x08064de5
 8064d98:	08064de5 	.word	0x08064de5
 8064d9c:	08064de5 	.word	0x08064de5
 8064da0:	08064de5 	.word	0x08064de5
 8064da4:	08064de5 	.word	0x08064de5
 8064da8:	08064de5 	.word	0x08064de5
 8064dac:	08064de5 	.word	0x08064de5
 8064db0:	08064ddd 	.word	0x08064ddd
 8064db4:	2301      	movs	r3, #1
 8064db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064dba:	e1c0      	b.n	806513e <UART_SetConfig+0x7ae>
 8064dbc:	2304      	movs	r3, #4
 8064dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064dc2:	e1bc      	b.n	806513e <UART_SetConfig+0x7ae>
 8064dc4:	2308      	movs	r3, #8
 8064dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064dca:	e1b8      	b.n	806513e <UART_SetConfig+0x7ae>
 8064dcc:	2310      	movs	r3, #16
 8064dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064dd2:	e1b4      	b.n	806513e <UART_SetConfig+0x7ae>
 8064dd4:	2320      	movs	r3, #32
 8064dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064dda:	e1b0      	b.n	806513e <UART_SetConfig+0x7ae>
 8064ddc:	2340      	movs	r3, #64	@ 0x40
 8064dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064de2:	e1ac      	b.n	806513e <UART_SetConfig+0x7ae>
 8064de4:	2380      	movs	r3, #128	@ 0x80
 8064de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064dea:	e1a8      	b.n	806513e <UART_SetConfig+0x7ae>
 8064dec:	697b      	ldr	r3, [r7, #20]
 8064dee:	681b      	ldr	r3, [r3, #0]
 8064df0:	4a75      	ldr	r2, [pc, #468]	@ (8064fc8 <UART_SetConfig+0x638>)
 8064df2:	4293      	cmp	r3, r2
 8064df4:	d130      	bne.n	8064e58 <UART_SetConfig+0x4c8>
 8064df6:	4b73      	ldr	r3, [pc, #460]	@ (8064fc4 <UART_SetConfig+0x634>)
 8064df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064dfa:	f003 0307 	and.w	r3, r3, #7
 8064dfe:	2b05      	cmp	r3, #5
 8064e00:	d826      	bhi.n	8064e50 <UART_SetConfig+0x4c0>
 8064e02:	a201      	add	r2, pc, #4	@ (adr r2, 8064e08 <UART_SetConfig+0x478>)
 8064e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064e08:	08064e21 	.word	0x08064e21
 8064e0c:	08064e29 	.word	0x08064e29
 8064e10:	08064e31 	.word	0x08064e31
 8064e14:	08064e39 	.word	0x08064e39
 8064e18:	08064e41 	.word	0x08064e41
 8064e1c:	08064e49 	.word	0x08064e49
 8064e20:	2300      	movs	r3, #0
 8064e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064e26:	e18a      	b.n	806513e <UART_SetConfig+0x7ae>
 8064e28:	2304      	movs	r3, #4
 8064e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064e2e:	e186      	b.n	806513e <UART_SetConfig+0x7ae>
 8064e30:	2308      	movs	r3, #8
 8064e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064e36:	e182      	b.n	806513e <UART_SetConfig+0x7ae>
 8064e38:	2310      	movs	r3, #16
 8064e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064e3e:	e17e      	b.n	806513e <UART_SetConfig+0x7ae>
 8064e40:	2320      	movs	r3, #32
 8064e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064e46:	e17a      	b.n	806513e <UART_SetConfig+0x7ae>
 8064e48:	2340      	movs	r3, #64	@ 0x40
 8064e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064e4e:	e176      	b.n	806513e <UART_SetConfig+0x7ae>
 8064e50:	2380      	movs	r3, #128	@ 0x80
 8064e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064e56:	e172      	b.n	806513e <UART_SetConfig+0x7ae>
 8064e58:	697b      	ldr	r3, [r7, #20]
 8064e5a:	681b      	ldr	r3, [r3, #0]
 8064e5c:	4a5b      	ldr	r2, [pc, #364]	@ (8064fcc <UART_SetConfig+0x63c>)
 8064e5e:	4293      	cmp	r3, r2
 8064e60:	d130      	bne.n	8064ec4 <UART_SetConfig+0x534>
 8064e62:	4b58      	ldr	r3, [pc, #352]	@ (8064fc4 <UART_SetConfig+0x634>)
 8064e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064e66:	f003 0307 	and.w	r3, r3, #7
 8064e6a:	2b05      	cmp	r3, #5
 8064e6c:	d826      	bhi.n	8064ebc <UART_SetConfig+0x52c>
 8064e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8064e74 <UART_SetConfig+0x4e4>)
 8064e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064e74:	08064e8d 	.word	0x08064e8d
 8064e78:	08064e95 	.word	0x08064e95
 8064e7c:	08064e9d 	.word	0x08064e9d
 8064e80:	08064ea5 	.word	0x08064ea5
 8064e84:	08064ead 	.word	0x08064ead
 8064e88:	08064eb5 	.word	0x08064eb5
 8064e8c:	2300      	movs	r3, #0
 8064e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064e92:	e154      	b.n	806513e <UART_SetConfig+0x7ae>
 8064e94:	2304      	movs	r3, #4
 8064e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064e9a:	e150      	b.n	806513e <UART_SetConfig+0x7ae>
 8064e9c:	2308      	movs	r3, #8
 8064e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064ea2:	e14c      	b.n	806513e <UART_SetConfig+0x7ae>
 8064ea4:	2310      	movs	r3, #16
 8064ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064eaa:	e148      	b.n	806513e <UART_SetConfig+0x7ae>
 8064eac:	2320      	movs	r3, #32
 8064eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064eb2:	e144      	b.n	806513e <UART_SetConfig+0x7ae>
 8064eb4:	2340      	movs	r3, #64	@ 0x40
 8064eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064eba:	e140      	b.n	806513e <UART_SetConfig+0x7ae>
 8064ebc:	2380      	movs	r3, #128	@ 0x80
 8064ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064ec2:	e13c      	b.n	806513e <UART_SetConfig+0x7ae>
 8064ec4:	697b      	ldr	r3, [r7, #20]
 8064ec6:	681b      	ldr	r3, [r3, #0]
 8064ec8:	4a41      	ldr	r2, [pc, #260]	@ (8064fd0 <UART_SetConfig+0x640>)
 8064eca:	4293      	cmp	r3, r2
 8064ecc:	f040 8082 	bne.w	8064fd4 <UART_SetConfig+0x644>
 8064ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8064fc4 <UART_SetConfig+0x634>)
 8064ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064ed4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8064ed8:	2b28      	cmp	r3, #40	@ 0x28
 8064eda:	d86d      	bhi.n	8064fb8 <UART_SetConfig+0x628>
 8064edc:	a201      	add	r2, pc, #4	@ (adr r2, 8064ee4 <UART_SetConfig+0x554>)
 8064ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064ee2:	bf00      	nop
 8064ee4:	08064f89 	.word	0x08064f89
 8064ee8:	08064fb9 	.word	0x08064fb9
 8064eec:	08064fb9 	.word	0x08064fb9
 8064ef0:	08064fb9 	.word	0x08064fb9
 8064ef4:	08064fb9 	.word	0x08064fb9
 8064ef8:	08064fb9 	.word	0x08064fb9
 8064efc:	08064fb9 	.word	0x08064fb9
 8064f00:	08064fb9 	.word	0x08064fb9
 8064f04:	08064f91 	.word	0x08064f91
 8064f08:	08064fb9 	.word	0x08064fb9
 8064f0c:	08064fb9 	.word	0x08064fb9
 8064f10:	08064fb9 	.word	0x08064fb9
 8064f14:	08064fb9 	.word	0x08064fb9
 8064f18:	08064fb9 	.word	0x08064fb9
 8064f1c:	08064fb9 	.word	0x08064fb9
 8064f20:	08064fb9 	.word	0x08064fb9
 8064f24:	08064f99 	.word	0x08064f99
 8064f28:	08064fb9 	.word	0x08064fb9
 8064f2c:	08064fb9 	.word	0x08064fb9
 8064f30:	08064fb9 	.word	0x08064fb9
 8064f34:	08064fb9 	.word	0x08064fb9
 8064f38:	08064fb9 	.word	0x08064fb9
 8064f3c:	08064fb9 	.word	0x08064fb9
 8064f40:	08064fb9 	.word	0x08064fb9
 8064f44:	08064fa1 	.word	0x08064fa1
 8064f48:	08064fb9 	.word	0x08064fb9
 8064f4c:	08064fb9 	.word	0x08064fb9
 8064f50:	08064fb9 	.word	0x08064fb9
 8064f54:	08064fb9 	.word	0x08064fb9
 8064f58:	08064fb9 	.word	0x08064fb9
 8064f5c:	08064fb9 	.word	0x08064fb9
 8064f60:	08064fb9 	.word	0x08064fb9
 8064f64:	08064fa9 	.word	0x08064fa9
 8064f68:	08064fb9 	.word	0x08064fb9
 8064f6c:	08064fb9 	.word	0x08064fb9
 8064f70:	08064fb9 	.word	0x08064fb9
 8064f74:	08064fb9 	.word	0x08064fb9
 8064f78:	08064fb9 	.word	0x08064fb9
 8064f7c:	08064fb9 	.word	0x08064fb9
 8064f80:	08064fb9 	.word	0x08064fb9
 8064f84:	08064fb1 	.word	0x08064fb1
 8064f88:	2301      	movs	r3, #1
 8064f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064f8e:	e0d6      	b.n	806513e <UART_SetConfig+0x7ae>
 8064f90:	2304      	movs	r3, #4
 8064f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064f96:	e0d2      	b.n	806513e <UART_SetConfig+0x7ae>
 8064f98:	2308      	movs	r3, #8
 8064f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064f9e:	e0ce      	b.n	806513e <UART_SetConfig+0x7ae>
 8064fa0:	2310      	movs	r3, #16
 8064fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064fa6:	e0ca      	b.n	806513e <UART_SetConfig+0x7ae>
 8064fa8:	2320      	movs	r3, #32
 8064faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064fae:	e0c6      	b.n	806513e <UART_SetConfig+0x7ae>
 8064fb0:	2340      	movs	r3, #64	@ 0x40
 8064fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064fb6:	e0c2      	b.n	806513e <UART_SetConfig+0x7ae>
 8064fb8:	2380      	movs	r3, #128	@ 0x80
 8064fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8064fbe:	e0be      	b.n	806513e <UART_SetConfig+0x7ae>
 8064fc0:	40011400 	.word	0x40011400
 8064fc4:	58024400 	.word	0x58024400
 8064fc8:	40007800 	.word	0x40007800
 8064fcc:	40007c00 	.word	0x40007c00
 8064fd0:	40011800 	.word	0x40011800
 8064fd4:	697b      	ldr	r3, [r7, #20]
 8064fd6:	681b      	ldr	r3, [r3, #0]
 8064fd8:	4aad      	ldr	r2, [pc, #692]	@ (8065290 <UART_SetConfig+0x900>)
 8064fda:	4293      	cmp	r3, r2
 8064fdc:	d176      	bne.n	80650cc <UART_SetConfig+0x73c>
 8064fde:	4bad      	ldr	r3, [pc, #692]	@ (8065294 <UART_SetConfig+0x904>)
 8064fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8064fe2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8064fe6:	2b28      	cmp	r3, #40	@ 0x28
 8064fe8:	d86c      	bhi.n	80650c4 <UART_SetConfig+0x734>
 8064fea:	a201      	add	r2, pc, #4	@ (adr r2, 8064ff0 <UART_SetConfig+0x660>)
 8064fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8064ff0:	08065095 	.word	0x08065095
 8064ff4:	080650c5 	.word	0x080650c5
 8064ff8:	080650c5 	.word	0x080650c5
 8064ffc:	080650c5 	.word	0x080650c5
 8065000:	080650c5 	.word	0x080650c5
 8065004:	080650c5 	.word	0x080650c5
 8065008:	080650c5 	.word	0x080650c5
 806500c:	080650c5 	.word	0x080650c5
 8065010:	0806509d 	.word	0x0806509d
 8065014:	080650c5 	.word	0x080650c5
 8065018:	080650c5 	.word	0x080650c5
 806501c:	080650c5 	.word	0x080650c5
 8065020:	080650c5 	.word	0x080650c5
 8065024:	080650c5 	.word	0x080650c5
 8065028:	080650c5 	.word	0x080650c5
 806502c:	080650c5 	.word	0x080650c5
 8065030:	080650a5 	.word	0x080650a5
 8065034:	080650c5 	.word	0x080650c5
 8065038:	080650c5 	.word	0x080650c5
 806503c:	080650c5 	.word	0x080650c5
 8065040:	080650c5 	.word	0x080650c5
 8065044:	080650c5 	.word	0x080650c5
 8065048:	080650c5 	.word	0x080650c5
 806504c:	080650c5 	.word	0x080650c5
 8065050:	080650ad 	.word	0x080650ad
 8065054:	080650c5 	.word	0x080650c5
 8065058:	080650c5 	.word	0x080650c5
 806505c:	080650c5 	.word	0x080650c5
 8065060:	080650c5 	.word	0x080650c5
 8065064:	080650c5 	.word	0x080650c5
 8065068:	080650c5 	.word	0x080650c5
 806506c:	080650c5 	.word	0x080650c5
 8065070:	080650b5 	.word	0x080650b5
 8065074:	080650c5 	.word	0x080650c5
 8065078:	080650c5 	.word	0x080650c5
 806507c:	080650c5 	.word	0x080650c5
 8065080:	080650c5 	.word	0x080650c5
 8065084:	080650c5 	.word	0x080650c5
 8065088:	080650c5 	.word	0x080650c5
 806508c:	080650c5 	.word	0x080650c5
 8065090:	080650bd 	.word	0x080650bd
 8065094:	2301      	movs	r3, #1
 8065096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 806509a:	e050      	b.n	806513e <UART_SetConfig+0x7ae>
 806509c:	2304      	movs	r3, #4
 806509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80650a2:	e04c      	b.n	806513e <UART_SetConfig+0x7ae>
 80650a4:	2308      	movs	r3, #8
 80650a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80650aa:	e048      	b.n	806513e <UART_SetConfig+0x7ae>
 80650ac:	2310      	movs	r3, #16
 80650ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80650b2:	e044      	b.n	806513e <UART_SetConfig+0x7ae>
 80650b4:	2320      	movs	r3, #32
 80650b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80650ba:	e040      	b.n	806513e <UART_SetConfig+0x7ae>
 80650bc:	2340      	movs	r3, #64	@ 0x40
 80650be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80650c2:	e03c      	b.n	806513e <UART_SetConfig+0x7ae>
 80650c4:	2380      	movs	r3, #128	@ 0x80
 80650c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80650ca:	e038      	b.n	806513e <UART_SetConfig+0x7ae>
 80650cc:	697b      	ldr	r3, [r7, #20]
 80650ce:	681b      	ldr	r3, [r3, #0]
 80650d0:	4a71      	ldr	r2, [pc, #452]	@ (8065298 <UART_SetConfig+0x908>)
 80650d2:	4293      	cmp	r3, r2
 80650d4:	d130      	bne.n	8065138 <UART_SetConfig+0x7a8>
 80650d6:	4b6f      	ldr	r3, [pc, #444]	@ (8065294 <UART_SetConfig+0x904>)
 80650d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80650da:	f003 0307 	and.w	r3, r3, #7
 80650de:	2b05      	cmp	r3, #5
 80650e0:	d826      	bhi.n	8065130 <UART_SetConfig+0x7a0>
 80650e2:	a201      	add	r2, pc, #4	@ (adr r2, 80650e8 <UART_SetConfig+0x758>)
 80650e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80650e8:	08065101 	.word	0x08065101
 80650ec:	08065109 	.word	0x08065109
 80650f0:	08065111 	.word	0x08065111
 80650f4:	08065119 	.word	0x08065119
 80650f8:	08065121 	.word	0x08065121
 80650fc:	08065129 	.word	0x08065129
 8065100:	2302      	movs	r3, #2
 8065102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8065106:	e01a      	b.n	806513e <UART_SetConfig+0x7ae>
 8065108:	2304      	movs	r3, #4
 806510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 806510e:	e016      	b.n	806513e <UART_SetConfig+0x7ae>
 8065110:	2308      	movs	r3, #8
 8065112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8065116:	e012      	b.n	806513e <UART_SetConfig+0x7ae>
 8065118:	2310      	movs	r3, #16
 806511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 806511e:	e00e      	b.n	806513e <UART_SetConfig+0x7ae>
 8065120:	2320      	movs	r3, #32
 8065122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8065126:	e00a      	b.n	806513e <UART_SetConfig+0x7ae>
 8065128:	2340      	movs	r3, #64	@ 0x40
 806512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 806512e:	e006      	b.n	806513e <UART_SetConfig+0x7ae>
 8065130:	2380      	movs	r3, #128	@ 0x80
 8065132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8065136:	e002      	b.n	806513e <UART_SetConfig+0x7ae>
 8065138:	2380      	movs	r3, #128	@ 0x80
 806513a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 806513e:	697b      	ldr	r3, [r7, #20]
 8065140:	681b      	ldr	r3, [r3, #0]
 8065142:	4a55      	ldr	r2, [pc, #340]	@ (8065298 <UART_SetConfig+0x908>)
 8065144:	4293      	cmp	r3, r2
 8065146:	f040 80f8 	bne.w	806533a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 806514a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 806514e:	2b20      	cmp	r3, #32
 8065150:	dc46      	bgt.n	80651e0 <UART_SetConfig+0x850>
 8065152:	2b02      	cmp	r3, #2
 8065154:	db75      	blt.n	8065242 <UART_SetConfig+0x8b2>
 8065156:	3b02      	subs	r3, #2
 8065158:	2b1e      	cmp	r3, #30
 806515a:	d872      	bhi.n	8065242 <UART_SetConfig+0x8b2>
 806515c:	a201      	add	r2, pc, #4	@ (adr r2, 8065164 <UART_SetConfig+0x7d4>)
 806515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8065162:	bf00      	nop
 8065164:	080651e7 	.word	0x080651e7
 8065168:	08065243 	.word	0x08065243
 806516c:	080651ef 	.word	0x080651ef
 8065170:	08065243 	.word	0x08065243
 8065174:	08065243 	.word	0x08065243
 8065178:	08065243 	.word	0x08065243
 806517c:	080651ff 	.word	0x080651ff
 8065180:	08065243 	.word	0x08065243
 8065184:	08065243 	.word	0x08065243
 8065188:	08065243 	.word	0x08065243
 806518c:	08065243 	.word	0x08065243
 8065190:	08065243 	.word	0x08065243
 8065194:	08065243 	.word	0x08065243
 8065198:	08065243 	.word	0x08065243
 806519c:	0806520f 	.word	0x0806520f
 80651a0:	08065243 	.word	0x08065243
 80651a4:	08065243 	.word	0x08065243
 80651a8:	08065243 	.word	0x08065243
 80651ac:	08065243 	.word	0x08065243
 80651b0:	08065243 	.word	0x08065243
 80651b4:	08065243 	.word	0x08065243
 80651b8:	08065243 	.word	0x08065243
 80651bc:	08065243 	.word	0x08065243
 80651c0:	08065243 	.word	0x08065243
 80651c4:	08065243 	.word	0x08065243
 80651c8:	08065243 	.word	0x08065243
 80651cc:	08065243 	.word	0x08065243
 80651d0:	08065243 	.word	0x08065243
 80651d4:	08065243 	.word	0x08065243
 80651d8:	08065243 	.word	0x08065243
 80651dc:	08065235 	.word	0x08065235
 80651e0:	2b40      	cmp	r3, #64	@ 0x40
 80651e2:	d02a      	beq.n	806523a <UART_SetConfig+0x8aa>
 80651e4:	e02d      	b.n	8065242 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80651e6:	f7fe fe0b 	bl	8063e00 <HAL_RCCEx_GetD3PCLK1Freq>
 80651ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80651ec:	e02f      	b.n	806524e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80651ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80651f2:	4618      	mov	r0, r3
 80651f4:	f7fe fe1a 	bl	8063e2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80651f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80651fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80651fc:	e027      	b.n	806524e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80651fe:	f107 0318 	add.w	r3, r7, #24
 8065202:	4618      	mov	r0, r3
 8065204:	f7fe ff66 	bl	80640d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8065208:	69fb      	ldr	r3, [r7, #28]
 806520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 806520c:	e01f      	b.n	806524e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 806520e:	4b21      	ldr	r3, [pc, #132]	@ (8065294 <UART_SetConfig+0x904>)
 8065210:	681b      	ldr	r3, [r3, #0]
 8065212:	f003 0320 	and.w	r3, r3, #32
 8065216:	2b00      	cmp	r3, #0
 8065218:	d009      	beq.n	806522e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 806521a:	4b1e      	ldr	r3, [pc, #120]	@ (8065294 <UART_SetConfig+0x904>)
 806521c:	681b      	ldr	r3, [r3, #0]
 806521e:	08db      	lsrs	r3, r3, #3
 8065220:	f003 0303 	and.w	r3, r3, #3
 8065224:	4a1d      	ldr	r2, [pc, #116]	@ (806529c <UART_SetConfig+0x90c>)
 8065226:	fa22 f303 	lsr.w	r3, r2, r3
 806522a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 806522c:	e00f      	b.n	806524e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 806522e:	4b1b      	ldr	r3, [pc, #108]	@ (806529c <UART_SetConfig+0x90c>)
 8065230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065232:	e00c      	b.n	806524e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8065234:	4b1a      	ldr	r3, [pc, #104]	@ (80652a0 <UART_SetConfig+0x910>)
 8065236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065238:	e009      	b.n	806524e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 806523a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 806523e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065240:	e005      	b.n	806524e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8065242:	2300      	movs	r3, #0
 8065244:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8065246:	2301      	movs	r3, #1
 8065248:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 806524c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 806524e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8065250:	2b00      	cmp	r3, #0
 8065252:	f000 81ee 	beq.w	8065632 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8065256:	697b      	ldr	r3, [r7, #20]
 8065258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 806525a:	4a12      	ldr	r2, [pc, #72]	@ (80652a4 <UART_SetConfig+0x914>)
 806525c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8065260:	461a      	mov	r2, r3
 8065262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8065264:	fbb3 f3f2 	udiv	r3, r3, r2
 8065268:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 806526a:	697b      	ldr	r3, [r7, #20]
 806526c:	685a      	ldr	r2, [r3, #4]
 806526e:	4613      	mov	r3, r2
 8065270:	005b      	lsls	r3, r3, #1
 8065272:	4413      	add	r3, r2
 8065274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8065276:	429a      	cmp	r2, r3
 8065278:	d305      	bcc.n	8065286 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 806527a:	697b      	ldr	r3, [r7, #20]
 806527c:	685b      	ldr	r3, [r3, #4]
 806527e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8065280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8065282:	429a      	cmp	r2, r3
 8065284:	d910      	bls.n	80652a8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8065286:	2301      	movs	r3, #1
 8065288:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 806528c:	e1d1      	b.n	8065632 <UART_SetConfig+0xca2>
 806528e:	bf00      	nop
 8065290:	40011c00 	.word	0x40011c00
 8065294:	58024400 	.word	0x58024400
 8065298:	58000c00 	.word	0x58000c00
 806529c:	03d09000 	.word	0x03d09000
 80652a0:	003d0900 	.word	0x003d0900
 80652a4:	080661f8 	.word	0x080661f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80652a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80652aa:	2200      	movs	r2, #0
 80652ac:	60bb      	str	r3, [r7, #8]
 80652ae:	60fa      	str	r2, [r7, #12]
 80652b0:	697b      	ldr	r3, [r7, #20]
 80652b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80652b4:	4ac0      	ldr	r2, [pc, #768]	@ (80655b8 <UART_SetConfig+0xc28>)
 80652b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80652ba:	b29b      	uxth	r3, r3
 80652bc:	2200      	movs	r2, #0
 80652be:	603b      	str	r3, [r7, #0]
 80652c0:	607a      	str	r2, [r7, #4]
 80652c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80652c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80652ca:	f7fb f897 	bl	80603fc <__aeabi_uldivmod>
 80652ce:	4602      	mov	r2, r0
 80652d0:	460b      	mov	r3, r1
 80652d2:	4610      	mov	r0, r2
 80652d4:	4619      	mov	r1, r3
 80652d6:	f04f 0200 	mov.w	r2, #0
 80652da:	f04f 0300 	mov.w	r3, #0
 80652de:	020b      	lsls	r3, r1, #8
 80652e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80652e4:	0202      	lsls	r2, r0, #8
 80652e6:	6979      	ldr	r1, [r7, #20]
 80652e8:	6849      	ldr	r1, [r1, #4]
 80652ea:	0849      	lsrs	r1, r1, #1
 80652ec:	2000      	movs	r0, #0
 80652ee:	460c      	mov	r4, r1
 80652f0:	4605      	mov	r5, r0
 80652f2:	eb12 0804 	adds.w	r8, r2, r4
 80652f6:	eb43 0905 	adc.w	r9, r3, r5
 80652fa:	697b      	ldr	r3, [r7, #20]
 80652fc:	685b      	ldr	r3, [r3, #4]
 80652fe:	2200      	movs	r2, #0
 8065300:	469a      	mov	sl, r3
 8065302:	4693      	mov	fp, r2
 8065304:	4652      	mov	r2, sl
 8065306:	465b      	mov	r3, fp
 8065308:	4640      	mov	r0, r8
 806530a:	4649      	mov	r1, r9
 806530c:	f7fb f876 	bl	80603fc <__aeabi_uldivmod>
 8065310:	4602      	mov	r2, r0
 8065312:	460b      	mov	r3, r1
 8065314:	4613      	mov	r3, r2
 8065316:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8065318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806531a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 806531e:	d308      	bcc.n	8065332 <UART_SetConfig+0x9a2>
 8065320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8065326:	d204      	bcs.n	8065332 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8065328:	697b      	ldr	r3, [r7, #20]
 806532a:	681b      	ldr	r3, [r3, #0]
 806532c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 806532e:	60da      	str	r2, [r3, #12]
 8065330:	e17f      	b.n	8065632 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8065332:	2301      	movs	r3, #1
 8065334:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8065338:	e17b      	b.n	8065632 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 806533a:	697b      	ldr	r3, [r7, #20]
 806533c:	69db      	ldr	r3, [r3, #28]
 806533e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8065342:	f040 80bd 	bne.w	80654c0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8065346:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 806534a:	2b20      	cmp	r3, #32
 806534c:	dc48      	bgt.n	80653e0 <UART_SetConfig+0xa50>
 806534e:	2b00      	cmp	r3, #0
 8065350:	db7b      	blt.n	806544a <UART_SetConfig+0xaba>
 8065352:	2b20      	cmp	r3, #32
 8065354:	d879      	bhi.n	806544a <UART_SetConfig+0xaba>
 8065356:	a201      	add	r2, pc, #4	@ (adr r2, 806535c <UART_SetConfig+0x9cc>)
 8065358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806535c:	080653e7 	.word	0x080653e7
 8065360:	080653ef 	.word	0x080653ef
 8065364:	0806544b 	.word	0x0806544b
 8065368:	0806544b 	.word	0x0806544b
 806536c:	080653f7 	.word	0x080653f7
 8065370:	0806544b 	.word	0x0806544b
 8065374:	0806544b 	.word	0x0806544b
 8065378:	0806544b 	.word	0x0806544b
 806537c:	08065407 	.word	0x08065407
 8065380:	0806544b 	.word	0x0806544b
 8065384:	0806544b 	.word	0x0806544b
 8065388:	0806544b 	.word	0x0806544b
 806538c:	0806544b 	.word	0x0806544b
 8065390:	0806544b 	.word	0x0806544b
 8065394:	0806544b 	.word	0x0806544b
 8065398:	0806544b 	.word	0x0806544b
 806539c:	08065417 	.word	0x08065417
 80653a0:	0806544b 	.word	0x0806544b
 80653a4:	0806544b 	.word	0x0806544b
 80653a8:	0806544b 	.word	0x0806544b
 80653ac:	0806544b 	.word	0x0806544b
 80653b0:	0806544b 	.word	0x0806544b
 80653b4:	0806544b 	.word	0x0806544b
 80653b8:	0806544b 	.word	0x0806544b
 80653bc:	0806544b 	.word	0x0806544b
 80653c0:	0806544b 	.word	0x0806544b
 80653c4:	0806544b 	.word	0x0806544b
 80653c8:	0806544b 	.word	0x0806544b
 80653cc:	0806544b 	.word	0x0806544b
 80653d0:	0806544b 	.word	0x0806544b
 80653d4:	0806544b 	.word	0x0806544b
 80653d8:	0806544b 	.word	0x0806544b
 80653dc:	0806543d 	.word	0x0806543d
 80653e0:	2b40      	cmp	r3, #64	@ 0x40
 80653e2:	d02e      	beq.n	8065442 <UART_SetConfig+0xab2>
 80653e4:	e031      	b.n	806544a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80653e6:	f7fd fb3f 	bl	8062a68 <HAL_RCC_GetPCLK1Freq>
 80653ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80653ec:	e033      	b.n	8065456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80653ee:	f7fd fb51 	bl	8062a94 <HAL_RCC_GetPCLK2Freq>
 80653f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80653f4:	e02f      	b.n	8065456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80653f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80653fa:	4618      	mov	r0, r3
 80653fc:	f7fe fd16 	bl	8063e2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8065400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8065402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065404:	e027      	b.n	8065456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8065406:	f107 0318 	add.w	r3, r7, #24
 806540a:	4618      	mov	r0, r3
 806540c:	f7fe fe62 	bl	80640d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8065410:	69fb      	ldr	r3, [r7, #28]
 8065412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065414:	e01f      	b.n	8065456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8065416:	4b69      	ldr	r3, [pc, #420]	@ (80655bc <UART_SetConfig+0xc2c>)
 8065418:	681b      	ldr	r3, [r3, #0]
 806541a:	f003 0320 	and.w	r3, r3, #32
 806541e:	2b00      	cmp	r3, #0
 8065420:	d009      	beq.n	8065436 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8065422:	4b66      	ldr	r3, [pc, #408]	@ (80655bc <UART_SetConfig+0xc2c>)
 8065424:	681b      	ldr	r3, [r3, #0]
 8065426:	08db      	lsrs	r3, r3, #3
 8065428:	f003 0303 	and.w	r3, r3, #3
 806542c:	4a64      	ldr	r2, [pc, #400]	@ (80655c0 <UART_SetConfig+0xc30>)
 806542e:	fa22 f303 	lsr.w	r3, r2, r3
 8065432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8065434:	e00f      	b.n	8065456 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8065436:	4b62      	ldr	r3, [pc, #392]	@ (80655c0 <UART_SetConfig+0xc30>)
 8065438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 806543a:	e00c      	b.n	8065456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 806543c:	4b61      	ldr	r3, [pc, #388]	@ (80655c4 <UART_SetConfig+0xc34>)
 806543e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065440:	e009      	b.n	8065456 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8065442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8065446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065448:	e005      	b.n	8065456 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 806544a:	2300      	movs	r3, #0
 806544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 806544e:	2301      	movs	r3, #1
 8065450:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8065454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8065456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8065458:	2b00      	cmp	r3, #0
 806545a:	f000 80ea 	beq.w	8065632 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 806545e:	697b      	ldr	r3, [r7, #20]
 8065460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8065462:	4a55      	ldr	r2, [pc, #340]	@ (80655b8 <UART_SetConfig+0xc28>)
 8065464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8065468:	461a      	mov	r2, r3
 806546a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 806546c:	fbb3 f3f2 	udiv	r3, r3, r2
 8065470:	005a      	lsls	r2, r3, #1
 8065472:	697b      	ldr	r3, [r7, #20]
 8065474:	685b      	ldr	r3, [r3, #4]
 8065476:	085b      	lsrs	r3, r3, #1
 8065478:	441a      	add	r2, r3
 806547a:	697b      	ldr	r3, [r7, #20]
 806547c:	685b      	ldr	r3, [r3, #4]
 806547e:	fbb2 f3f3 	udiv	r3, r2, r3
 8065482:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8065484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065486:	2b0f      	cmp	r3, #15
 8065488:	d916      	bls.n	80654b8 <UART_SetConfig+0xb28>
 806548a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806548c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8065490:	d212      	bcs.n	80654b8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8065492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065494:	b29b      	uxth	r3, r3
 8065496:	f023 030f 	bic.w	r3, r3, #15
 806549a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 806549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806549e:	085b      	lsrs	r3, r3, #1
 80654a0:	b29b      	uxth	r3, r3
 80654a2:	f003 0307 	and.w	r3, r3, #7
 80654a6:	b29a      	uxth	r2, r3
 80654a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80654aa:	4313      	orrs	r3, r2
 80654ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80654ae:	697b      	ldr	r3, [r7, #20]
 80654b0:	681b      	ldr	r3, [r3, #0]
 80654b2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80654b4:	60da      	str	r2, [r3, #12]
 80654b6:	e0bc      	b.n	8065632 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80654b8:	2301      	movs	r3, #1
 80654ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80654be:	e0b8      	b.n	8065632 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80654c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80654c4:	2b20      	cmp	r3, #32
 80654c6:	dc4b      	bgt.n	8065560 <UART_SetConfig+0xbd0>
 80654c8:	2b00      	cmp	r3, #0
 80654ca:	f2c0 8087 	blt.w	80655dc <UART_SetConfig+0xc4c>
 80654ce:	2b20      	cmp	r3, #32
 80654d0:	f200 8084 	bhi.w	80655dc <UART_SetConfig+0xc4c>
 80654d4:	a201      	add	r2, pc, #4	@ (adr r2, 80654dc <UART_SetConfig+0xb4c>)
 80654d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80654da:	bf00      	nop
 80654dc:	08065567 	.word	0x08065567
 80654e0:	0806556f 	.word	0x0806556f
 80654e4:	080655dd 	.word	0x080655dd
 80654e8:	080655dd 	.word	0x080655dd
 80654ec:	08065577 	.word	0x08065577
 80654f0:	080655dd 	.word	0x080655dd
 80654f4:	080655dd 	.word	0x080655dd
 80654f8:	080655dd 	.word	0x080655dd
 80654fc:	08065587 	.word	0x08065587
 8065500:	080655dd 	.word	0x080655dd
 8065504:	080655dd 	.word	0x080655dd
 8065508:	080655dd 	.word	0x080655dd
 806550c:	080655dd 	.word	0x080655dd
 8065510:	080655dd 	.word	0x080655dd
 8065514:	080655dd 	.word	0x080655dd
 8065518:	080655dd 	.word	0x080655dd
 806551c:	08065597 	.word	0x08065597
 8065520:	080655dd 	.word	0x080655dd
 8065524:	080655dd 	.word	0x080655dd
 8065528:	080655dd 	.word	0x080655dd
 806552c:	080655dd 	.word	0x080655dd
 8065530:	080655dd 	.word	0x080655dd
 8065534:	080655dd 	.word	0x080655dd
 8065538:	080655dd 	.word	0x080655dd
 806553c:	080655dd 	.word	0x080655dd
 8065540:	080655dd 	.word	0x080655dd
 8065544:	080655dd 	.word	0x080655dd
 8065548:	080655dd 	.word	0x080655dd
 806554c:	080655dd 	.word	0x080655dd
 8065550:	080655dd 	.word	0x080655dd
 8065554:	080655dd 	.word	0x080655dd
 8065558:	080655dd 	.word	0x080655dd
 806555c:	080655cf 	.word	0x080655cf
 8065560:	2b40      	cmp	r3, #64	@ 0x40
 8065562:	d037      	beq.n	80655d4 <UART_SetConfig+0xc44>
 8065564:	e03a      	b.n	80655dc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8065566:	f7fd fa7f 	bl	8062a68 <HAL_RCC_GetPCLK1Freq>
 806556a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 806556c:	e03c      	b.n	80655e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 806556e:	f7fd fa91 	bl	8062a94 <HAL_RCC_GetPCLK2Freq>
 8065572:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8065574:	e038      	b.n	80655e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8065576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 806557a:	4618      	mov	r0, r3
 806557c:	f7fe fc56 	bl	8063e2c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8065580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8065582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065584:	e030      	b.n	80655e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8065586:	f107 0318 	add.w	r3, r7, #24
 806558a:	4618      	mov	r0, r3
 806558c:	f7fe fda2 	bl	80640d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8065590:	69fb      	ldr	r3, [r7, #28]
 8065592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8065594:	e028      	b.n	80655e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8065596:	4b09      	ldr	r3, [pc, #36]	@ (80655bc <UART_SetConfig+0xc2c>)
 8065598:	681b      	ldr	r3, [r3, #0]
 806559a:	f003 0320 	and.w	r3, r3, #32
 806559e:	2b00      	cmp	r3, #0
 80655a0:	d012      	beq.n	80655c8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80655a2:	4b06      	ldr	r3, [pc, #24]	@ (80655bc <UART_SetConfig+0xc2c>)
 80655a4:	681b      	ldr	r3, [r3, #0]
 80655a6:	08db      	lsrs	r3, r3, #3
 80655a8:	f003 0303 	and.w	r3, r3, #3
 80655ac:	4a04      	ldr	r2, [pc, #16]	@ (80655c0 <UART_SetConfig+0xc30>)
 80655ae:	fa22 f303 	lsr.w	r3, r2, r3
 80655b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80655b4:	e018      	b.n	80655e8 <UART_SetConfig+0xc58>
 80655b6:	bf00      	nop
 80655b8:	080661f8 	.word	0x080661f8
 80655bc:	58024400 	.word	0x58024400
 80655c0:	03d09000 	.word	0x03d09000
 80655c4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80655c8:	4b24      	ldr	r3, [pc, #144]	@ (806565c <UART_SetConfig+0xccc>)
 80655ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80655cc:	e00c      	b.n	80655e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80655ce:	4b24      	ldr	r3, [pc, #144]	@ (8065660 <UART_SetConfig+0xcd0>)
 80655d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80655d2:	e009      	b.n	80655e8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80655d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80655d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80655da:	e005      	b.n	80655e8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80655dc:	2300      	movs	r3, #0
 80655de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80655e0:	2301      	movs	r3, #1
 80655e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80655e6:	bf00      	nop
    }

    if (pclk != 0U)
 80655e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80655ea:	2b00      	cmp	r3, #0
 80655ec:	d021      	beq.n	8065632 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80655ee:	697b      	ldr	r3, [r7, #20]
 80655f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80655f2:	4a1c      	ldr	r2, [pc, #112]	@ (8065664 <UART_SetConfig+0xcd4>)
 80655f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80655f8:	461a      	mov	r2, r3
 80655fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80655fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8065600:	697b      	ldr	r3, [r7, #20]
 8065602:	685b      	ldr	r3, [r3, #4]
 8065604:	085b      	lsrs	r3, r3, #1
 8065606:	441a      	add	r2, r3
 8065608:	697b      	ldr	r3, [r7, #20]
 806560a:	685b      	ldr	r3, [r3, #4]
 806560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8065610:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8065612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065614:	2b0f      	cmp	r3, #15
 8065616:	d909      	bls.n	806562c <UART_SetConfig+0xc9c>
 8065618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 806561a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 806561e:	d205      	bcs.n	806562c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8065620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065622:	b29a      	uxth	r2, r3
 8065624:	697b      	ldr	r3, [r7, #20]
 8065626:	681b      	ldr	r3, [r3, #0]
 8065628:	60da      	str	r2, [r3, #12]
 806562a:	e002      	b.n	8065632 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 806562c:	2301      	movs	r3, #1
 806562e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8065632:	697b      	ldr	r3, [r7, #20]
 8065634:	2201      	movs	r2, #1
 8065636:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 806563a:	697b      	ldr	r3, [r7, #20]
 806563c:	2201      	movs	r2, #1
 806563e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8065642:	697b      	ldr	r3, [r7, #20]
 8065644:	2200      	movs	r2, #0
 8065646:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8065648:	697b      	ldr	r3, [r7, #20]
 806564a:	2200      	movs	r2, #0
 806564c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 806564e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8065652:	4618      	mov	r0, r3
 8065654:	3748      	adds	r7, #72	@ 0x48
 8065656:	46bd      	mov	sp, r7
 8065658:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 806565c:	03d09000 	.word	0x03d09000
 8065660:	003d0900 	.word	0x003d0900
 8065664:	080661f8 	.word	0x080661f8

08065668 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8065668:	b480      	push	{r7}
 806566a:	b083      	sub	sp, #12
 806566c:	af00      	add	r7, sp, #0
 806566e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8065670:	687b      	ldr	r3, [r7, #4]
 8065672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8065674:	f003 0308 	and.w	r3, r3, #8
 8065678:	2b00      	cmp	r3, #0
 806567a:	d00a      	beq.n	8065692 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 806567c:	687b      	ldr	r3, [r7, #4]
 806567e:	681b      	ldr	r3, [r3, #0]
 8065680:	685b      	ldr	r3, [r3, #4]
 8065682:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8065686:	687b      	ldr	r3, [r7, #4]
 8065688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 806568a:	687b      	ldr	r3, [r7, #4]
 806568c:	681b      	ldr	r3, [r3, #0]
 806568e:	430a      	orrs	r2, r1
 8065690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8065692:	687b      	ldr	r3, [r7, #4]
 8065694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8065696:	f003 0301 	and.w	r3, r3, #1
 806569a:	2b00      	cmp	r3, #0
 806569c:	d00a      	beq.n	80656b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 806569e:	687b      	ldr	r3, [r7, #4]
 80656a0:	681b      	ldr	r3, [r3, #0]
 80656a2:	685b      	ldr	r3, [r3, #4]
 80656a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80656a8:	687b      	ldr	r3, [r7, #4]
 80656aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80656ac:	687b      	ldr	r3, [r7, #4]
 80656ae:	681b      	ldr	r3, [r3, #0]
 80656b0:	430a      	orrs	r2, r1
 80656b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80656b4:	687b      	ldr	r3, [r7, #4]
 80656b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80656b8:	f003 0302 	and.w	r3, r3, #2
 80656bc:	2b00      	cmp	r3, #0
 80656be:	d00a      	beq.n	80656d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80656c0:	687b      	ldr	r3, [r7, #4]
 80656c2:	681b      	ldr	r3, [r3, #0]
 80656c4:	685b      	ldr	r3, [r3, #4]
 80656c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80656ca:	687b      	ldr	r3, [r7, #4]
 80656cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80656ce:	687b      	ldr	r3, [r7, #4]
 80656d0:	681b      	ldr	r3, [r3, #0]
 80656d2:	430a      	orrs	r2, r1
 80656d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80656d6:	687b      	ldr	r3, [r7, #4]
 80656d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80656da:	f003 0304 	and.w	r3, r3, #4
 80656de:	2b00      	cmp	r3, #0
 80656e0:	d00a      	beq.n	80656f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80656e2:	687b      	ldr	r3, [r7, #4]
 80656e4:	681b      	ldr	r3, [r3, #0]
 80656e6:	685b      	ldr	r3, [r3, #4]
 80656e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80656ec:	687b      	ldr	r3, [r7, #4]
 80656ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80656f0:	687b      	ldr	r3, [r7, #4]
 80656f2:	681b      	ldr	r3, [r3, #0]
 80656f4:	430a      	orrs	r2, r1
 80656f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80656f8:	687b      	ldr	r3, [r7, #4]
 80656fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80656fc:	f003 0310 	and.w	r3, r3, #16
 8065700:	2b00      	cmp	r3, #0
 8065702:	d00a      	beq.n	806571a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8065704:	687b      	ldr	r3, [r7, #4]
 8065706:	681b      	ldr	r3, [r3, #0]
 8065708:	689b      	ldr	r3, [r3, #8]
 806570a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 806570e:	687b      	ldr	r3, [r7, #4]
 8065710:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8065712:	687b      	ldr	r3, [r7, #4]
 8065714:	681b      	ldr	r3, [r3, #0]
 8065716:	430a      	orrs	r2, r1
 8065718:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 806571a:	687b      	ldr	r3, [r7, #4]
 806571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 806571e:	f003 0320 	and.w	r3, r3, #32
 8065722:	2b00      	cmp	r3, #0
 8065724:	d00a      	beq.n	806573c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8065726:	687b      	ldr	r3, [r7, #4]
 8065728:	681b      	ldr	r3, [r3, #0]
 806572a:	689b      	ldr	r3, [r3, #8]
 806572c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8065730:	687b      	ldr	r3, [r7, #4]
 8065732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8065734:	687b      	ldr	r3, [r7, #4]
 8065736:	681b      	ldr	r3, [r3, #0]
 8065738:	430a      	orrs	r2, r1
 806573a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 806573c:	687b      	ldr	r3, [r7, #4]
 806573e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8065740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8065744:	2b00      	cmp	r3, #0
 8065746:	d01a      	beq.n	806577e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8065748:	687b      	ldr	r3, [r7, #4]
 806574a:	681b      	ldr	r3, [r3, #0]
 806574c:	685b      	ldr	r3, [r3, #4]
 806574e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8065752:	687b      	ldr	r3, [r7, #4]
 8065754:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8065756:	687b      	ldr	r3, [r7, #4]
 8065758:	681b      	ldr	r3, [r3, #0]
 806575a:	430a      	orrs	r2, r1
 806575c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 806575e:	687b      	ldr	r3, [r7, #4]
 8065760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8065762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8065766:	d10a      	bne.n	806577e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8065768:	687b      	ldr	r3, [r7, #4]
 806576a:	681b      	ldr	r3, [r3, #0]
 806576c:	685b      	ldr	r3, [r3, #4]
 806576e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8065772:	687b      	ldr	r3, [r7, #4]
 8065774:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8065776:	687b      	ldr	r3, [r7, #4]
 8065778:	681b      	ldr	r3, [r3, #0]
 806577a:	430a      	orrs	r2, r1
 806577c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 806577e:	687b      	ldr	r3, [r7, #4]
 8065780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8065782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8065786:	2b00      	cmp	r3, #0
 8065788:	d00a      	beq.n	80657a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 806578a:	687b      	ldr	r3, [r7, #4]
 806578c:	681b      	ldr	r3, [r3, #0]
 806578e:	685b      	ldr	r3, [r3, #4]
 8065790:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8065794:	687b      	ldr	r3, [r7, #4]
 8065796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8065798:	687b      	ldr	r3, [r7, #4]
 806579a:	681b      	ldr	r3, [r3, #0]
 806579c:	430a      	orrs	r2, r1
 806579e:	605a      	str	r2, [r3, #4]
  }
}
 80657a0:	bf00      	nop
 80657a2:	370c      	adds	r7, #12
 80657a4:	46bd      	mov	sp, r7
 80657a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80657aa:	4770      	bx	lr

080657ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80657ac:	b580      	push	{r7, lr}
 80657ae:	b098      	sub	sp, #96	@ 0x60
 80657b0:	af02      	add	r7, sp, #8
 80657b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80657b4:	687b      	ldr	r3, [r7, #4]
 80657b6:	2200      	movs	r2, #0
 80657b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80657bc:	f7fb fcc8 	bl	8061150 <HAL_GetTick>
 80657c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80657c2:	687b      	ldr	r3, [r7, #4]
 80657c4:	681b      	ldr	r3, [r3, #0]
 80657c6:	681b      	ldr	r3, [r3, #0]
 80657c8:	f003 0308 	and.w	r3, r3, #8
 80657cc:	2b08      	cmp	r3, #8
 80657ce:	d12f      	bne.n	8065830 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80657d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80657d4:	9300      	str	r3, [sp, #0]
 80657d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80657d8:	2200      	movs	r2, #0
 80657da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80657de:	6878      	ldr	r0, [r7, #4]
 80657e0:	f000 f88e 	bl	8065900 <UART_WaitOnFlagUntilTimeout>
 80657e4:	4603      	mov	r3, r0
 80657e6:	2b00      	cmp	r3, #0
 80657e8:	d022      	beq.n	8065830 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80657ea:	687b      	ldr	r3, [r7, #4]
 80657ec:	681b      	ldr	r3, [r3, #0]
 80657ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80657f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80657f2:	e853 3f00 	ldrex	r3, [r3]
 80657f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80657f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80657fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80657fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8065800:	687b      	ldr	r3, [r7, #4]
 8065802:	681b      	ldr	r3, [r3, #0]
 8065804:	461a      	mov	r2, r3
 8065806:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8065808:	647b      	str	r3, [r7, #68]	@ 0x44
 806580a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806580c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 806580e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8065810:	e841 2300 	strex	r3, r2, [r1]
 8065814:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8065816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8065818:	2b00      	cmp	r3, #0
 806581a:	d1e6      	bne.n	80657ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 806581c:	687b      	ldr	r3, [r7, #4]
 806581e:	2220      	movs	r2, #32
 8065820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8065824:	687b      	ldr	r3, [r7, #4]
 8065826:	2200      	movs	r2, #0
 8065828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 806582c:	2303      	movs	r3, #3
 806582e:	e063      	b.n	80658f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8065830:	687b      	ldr	r3, [r7, #4]
 8065832:	681b      	ldr	r3, [r3, #0]
 8065834:	681b      	ldr	r3, [r3, #0]
 8065836:	f003 0304 	and.w	r3, r3, #4
 806583a:	2b04      	cmp	r3, #4
 806583c:	d149      	bne.n	80658d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 806583e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8065842:	9300      	str	r3, [sp, #0]
 8065844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8065846:	2200      	movs	r2, #0
 8065848:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 806584c:	6878      	ldr	r0, [r7, #4]
 806584e:	f000 f857 	bl	8065900 <UART_WaitOnFlagUntilTimeout>
 8065852:	4603      	mov	r3, r0
 8065854:	2b00      	cmp	r3, #0
 8065856:	d03c      	beq.n	80658d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8065858:	687b      	ldr	r3, [r7, #4]
 806585a:	681b      	ldr	r3, [r3, #0]
 806585c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 806585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8065860:	e853 3f00 	ldrex	r3, [r3]
 8065864:	623b      	str	r3, [r7, #32]
   return(result);
 8065866:	6a3b      	ldr	r3, [r7, #32]
 8065868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 806586c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 806586e:	687b      	ldr	r3, [r7, #4]
 8065870:	681b      	ldr	r3, [r3, #0]
 8065872:	461a      	mov	r2, r3
 8065874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8065876:	633b      	str	r3, [r7, #48]	@ 0x30
 8065878:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 806587a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 806587c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 806587e:	e841 2300 	strex	r3, r2, [r1]
 8065882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8065884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8065886:	2b00      	cmp	r3, #0
 8065888:	d1e6      	bne.n	8065858 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 806588a:	687b      	ldr	r3, [r7, #4]
 806588c:	681b      	ldr	r3, [r3, #0]
 806588e:	3308      	adds	r3, #8
 8065890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8065892:	693b      	ldr	r3, [r7, #16]
 8065894:	e853 3f00 	ldrex	r3, [r3]
 8065898:	60fb      	str	r3, [r7, #12]
   return(result);
 806589a:	68fb      	ldr	r3, [r7, #12]
 806589c:	f023 0301 	bic.w	r3, r3, #1
 80658a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80658a2:	687b      	ldr	r3, [r7, #4]
 80658a4:	681b      	ldr	r3, [r3, #0]
 80658a6:	3308      	adds	r3, #8
 80658a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80658aa:	61fa      	str	r2, [r7, #28]
 80658ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80658ae:	69b9      	ldr	r1, [r7, #24]
 80658b0:	69fa      	ldr	r2, [r7, #28]
 80658b2:	e841 2300 	strex	r3, r2, [r1]
 80658b6:	617b      	str	r3, [r7, #20]
   return(result);
 80658b8:	697b      	ldr	r3, [r7, #20]
 80658ba:	2b00      	cmp	r3, #0
 80658bc:	d1e5      	bne.n	806588a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80658be:	687b      	ldr	r3, [r7, #4]
 80658c0:	2220      	movs	r2, #32
 80658c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80658c6:	687b      	ldr	r3, [r7, #4]
 80658c8:	2200      	movs	r2, #0
 80658ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80658ce:	2303      	movs	r3, #3
 80658d0:	e012      	b.n	80658f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80658d2:	687b      	ldr	r3, [r7, #4]
 80658d4:	2220      	movs	r2, #32
 80658d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80658da:	687b      	ldr	r3, [r7, #4]
 80658dc:	2220      	movs	r2, #32
 80658de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80658e2:	687b      	ldr	r3, [r7, #4]
 80658e4:	2200      	movs	r2, #0
 80658e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80658e8:	687b      	ldr	r3, [r7, #4]
 80658ea:	2200      	movs	r2, #0
 80658ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80658ee:	687b      	ldr	r3, [r7, #4]
 80658f0:	2200      	movs	r2, #0
 80658f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80658f6:	2300      	movs	r3, #0
}
 80658f8:	4618      	mov	r0, r3
 80658fa:	3758      	adds	r7, #88	@ 0x58
 80658fc:	46bd      	mov	sp, r7
 80658fe:	bd80      	pop	{r7, pc}

08065900 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8065900:	b580      	push	{r7, lr}
 8065902:	b084      	sub	sp, #16
 8065904:	af00      	add	r7, sp, #0
 8065906:	60f8      	str	r0, [r7, #12]
 8065908:	60b9      	str	r1, [r7, #8]
 806590a:	603b      	str	r3, [r7, #0]
 806590c:	4613      	mov	r3, r2
 806590e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8065910:	e04f      	b.n	80659b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8065912:	69bb      	ldr	r3, [r7, #24]
 8065914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8065918:	d04b      	beq.n	80659b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 806591a:	f7fb fc19 	bl	8061150 <HAL_GetTick>
 806591e:	4602      	mov	r2, r0
 8065920:	683b      	ldr	r3, [r7, #0]
 8065922:	1ad3      	subs	r3, r2, r3
 8065924:	69ba      	ldr	r2, [r7, #24]
 8065926:	429a      	cmp	r2, r3
 8065928:	d302      	bcc.n	8065930 <UART_WaitOnFlagUntilTimeout+0x30>
 806592a:	69bb      	ldr	r3, [r7, #24]
 806592c:	2b00      	cmp	r3, #0
 806592e:	d101      	bne.n	8065934 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8065930:	2303      	movs	r3, #3
 8065932:	e04e      	b.n	80659d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8065934:	68fb      	ldr	r3, [r7, #12]
 8065936:	681b      	ldr	r3, [r3, #0]
 8065938:	681b      	ldr	r3, [r3, #0]
 806593a:	f003 0304 	and.w	r3, r3, #4
 806593e:	2b00      	cmp	r3, #0
 8065940:	d037      	beq.n	80659b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8065942:	68bb      	ldr	r3, [r7, #8]
 8065944:	2b80      	cmp	r3, #128	@ 0x80
 8065946:	d034      	beq.n	80659b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8065948:	68bb      	ldr	r3, [r7, #8]
 806594a:	2b40      	cmp	r3, #64	@ 0x40
 806594c:	d031      	beq.n	80659b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 806594e:	68fb      	ldr	r3, [r7, #12]
 8065950:	681b      	ldr	r3, [r3, #0]
 8065952:	69db      	ldr	r3, [r3, #28]
 8065954:	f003 0308 	and.w	r3, r3, #8
 8065958:	2b08      	cmp	r3, #8
 806595a:	d110      	bne.n	806597e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 806595c:	68fb      	ldr	r3, [r7, #12]
 806595e:	681b      	ldr	r3, [r3, #0]
 8065960:	2208      	movs	r2, #8
 8065962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8065964:	68f8      	ldr	r0, [r7, #12]
 8065966:	f000 f839 	bl	80659dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 806596a:	68fb      	ldr	r3, [r7, #12]
 806596c:	2208      	movs	r2, #8
 806596e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8065972:	68fb      	ldr	r3, [r7, #12]
 8065974:	2200      	movs	r2, #0
 8065976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 806597a:	2301      	movs	r3, #1
 806597c:	e029      	b.n	80659d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 806597e:	68fb      	ldr	r3, [r7, #12]
 8065980:	681b      	ldr	r3, [r3, #0]
 8065982:	69db      	ldr	r3, [r3, #28]
 8065984:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8065988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 806598c:	d111      	bne.n	80659b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 806598e:	68fb      	ldr	r3, [r7, #12]
 8065990:	681b      	ldr	r3, [r3, #0]
 8065992:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8065996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8065998:	68f8      	ldr	r0, [r7, #12]
 806599a:	f000 f81f 	bl	80659dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 806599e:	68fb      	ldr	r3, [r7, #12]
 80659a0:	2220      	movs	r2, #32
 80659a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80659a6:	68fb      	ldr	r3, [r7, #12]
 80659a8:	2200      	movs	r2, #0
 80659aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80659ae:	2303      	movs	r3, #3
 80659b0:	e00f      	b.n	80659d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80659b2:	68fb      	ldr	r3, [r7, #12]
 80659b4:	681b      	ldr	r3, [r3, #0]
 80659b6:	69da      	ldr	r2, [r3, #28]
 80659b8:	68bb      	ldr	r3, [r7, #8]
 80659ba:	4013      	ands	r3, r2
 80659bc:	68ba      	ldr	r2, [r7, #8]
 80659be:	429a      	cmp	r2, r3
 80659c0:	bf0c      	ite	eq
 80659c2:	2301      	moveq	r3, #1
 80659c4:	2300      	movne	r3, #0
 80659c6:	b2db      	uxtb	r3, r3
 80659c8:	461a      	mov	r2, r3
 80659ca:	79fb      	ldrb	r3, [r7, #7]
 80659cc:	429a      	cmp	r2, r3
 80659ce:	d0a0      	beq.n	8065912 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80659d0:	2300      	movs	r3, #0
}
 80659d2:	4618      	mov	r0, r3
 80659d4:	3710      	adds	r7, #16
 80659d6:	46bd      	mov	sp, r7
 80659d8:	bd80      	pop	{r7, pc}
	...

080659dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80659dc:	b480      	push	{r7}
 80659de:	b095      	sub	sp, #84	@ 0x54
 80659e0:	af00      	add	r7, sp, #0
 80659e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80659e4:	687b      	ldr	r3, [r7, #4]
 80659e6:	681b      	ldr	r3, [r3, #0]
 80659e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80659ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80659ec:	e853 3f00 	ldrex	r3, [r3]
 80659f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80659f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80659f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80659f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80659fa:	687b      	ldr	r3, [r7, #4]
 80659fc:	681b      	ldr	r3, [r3, #0]
 80659fe:	461a      	mov	r2, r3
 8065a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8065a02:	643b      	str	r3, [r7, #64]	@ 0x40
 8065a04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8065a06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8065a08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8065a0a:	e841 2300 	strex	r3, r2, [r1]
 8065a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8065a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8065a12:	2b00      	cmp	r3, #0
 8065a14:	d1e6      	bne.n	80659e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8065a16:	687b      	ldr	r3, [r7, #4]
 8065a18:	681b      	ldr	r3, [r3, #0]
 8065a1a:	3308      	adds	r3, #8
 8065a1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8065a1e:	6a3b      	ldr	r3, [r7, #32]
 8065a20:	e853 3f00 	ldrex	r3, [r3]
 8065a24:	61fb      	str	r3, [r7, #28]
   return(result);
 8065a26:	69fa      	ldr	r2, [r7, #28]
 8065a28:	4b1e      	ldr	r3, [pc, #120]	@ (8065aa4 <UART_EndRxTransfer+0xc8>)
 8065a2a:	4013      	ands	r3, r2
 8065a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8065a2e:	687b      	ldr	r3, [r7, #4]
 8065a30:	681b      	ldr	r3, [r3, #0]
 8065a32:	3308      	adds	r3, #8
 8065a34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8065a36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8065a38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8065a3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8065a3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8065a3e:	e841 2300 	strex	r3, r2, [r1]
 8065a42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8065a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8065a46:	2b00      	cmp	r3, #0
 8065a48:	d1e5      	bne.n	8065a16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8065a4a:	687b      	ldr	r3, [r7, #4]
 8065a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8065a4e:	2b01      	cmp	r3, #1
 8065a50:	d118      	bne.n	8065a84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8065a52:	687b      	ldr	r3, [r7, #4]
 8065a54:	681b      	ldr	r3, [r3, #0]
 8065a56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8065a58:	68fb      	ldr	r3, [r7, #12]
 8065a5a:	e853 3f00 	ldrex	r3, [r3]
 8065a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8065a60:	68bb      	ldr	r3, [r7, #8]
 8065a62:	f023 0310 	bic.w	r3, r3, #16
 8065a66:	647b      	str	r3, [r7, #68]	@ 0x44
 8065a68:	687b      	ldr	r3, [r7, #4]
 8065a6a:	681b      	ldr	r3, [r3, #0]
 8065a6c:	461a      	mov	r2, r3
 8065a6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8065a70:	61bb      	str	r3, [r7, #24]
 8065a72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8065a74:	6979      	ldr	r1, [r7, #20]
 8065a76:	69ba      	ldr	r2, [r7, #24]
 8065a78:	e841 2300 	strex	r3, r2, [r1]
 8065a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8065a7e:	693b      	ldr	r3, [r7, #16]
 8065a80:	2b00      	cmp	r3, #0
 8065a82:	d1e6      	bne.n	8065a52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8065a84:	687b      	ldr	r3, [r7, #4]
 8065a86:	2220      	movs	r2, #32
 8065a88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8065a8c:	687b      	ldr	r3, [r7, #4]
 8065a8e:	2200      	movs	r2, #0
 8065a90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8065a92:	687b      	ldr	r3, [r7, #4]
 8065a94:	2200      	movs	r2, #0
 8065a96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8065a98:	bf00      	nop
 8065a9a:	3754      	adds	r7, #84	@ 0x54
 8065a9c:	46bd      	mov	sp, r7
 8065a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065aa2:	4770      	bx	lr
 8065aa4:	effffffe 	.word	0xeffffffe

08065aa8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8065aa8:	b480      	push	{r7}
 8065aaa:	b085      	sub	sp, #20
 8065aac:	af00      	add	r7, sp, #0
 8065aae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8065ab0:	687b      	ldr	r3, [r7, #4]
 8065ab2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8065ab6:	2b01      	cmp	r3, #1
 8065ab8:	d101      	bne.n	8065abe <HAL_UARTEx_DisableFifoMode+0x16>
 8065aba:	2302      	movs	r3, #2
 8065abc:	e027      	b.n	8065b0e <HAL_UARTEx_DisableFifoMode+0x66>
 8065abe:	687b      	ldr	r3, [r7, #4]
 8065ac0:	2201      	movs	r2, #1
 8065ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8065ac6:	687b      	ldr	r3, [r7, #4]
 8065ac8:	2224      	movs	r2, #36	@ 0x24
 8065aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8065ace:	687b      	ldr	r3, [r7, #4]
 8065ad0:	681b      	ldr	r3, [r3, #0]
 8065ad2:	681b      	ldr	r3, [r3, #0]
 8065ad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8065ad6:	687b      	ldr	r3, [r7, #4]
 8065ad8:	681b      	ldr	r3, [r3, #0]
 8065ada:	681a      	ldr	r2, [r3, #0]
 8065adc:	687b      	ldr	r3, [r7, #4]
 8065ade:	681b      	ldr	r3, [r3, #0]
 8065ae0:	f022 0201 	bic.w	r2, r2, #1
 8065ae4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8065ae6:	68fb      	ldr	r3, [r7, #12]
 8065ae8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8065aec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8065aee:	687b      	ldr	r3, [r7, #4]
 8065af0:	2200      	movs	r2, #0
 8065af2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8065af4:	687b      	ldr	r3, [r7, #4]
 8065af6:	681b      	ldr	r3, [r3, #0]
 8065af8:	68fa      	ldr	r2, [r7, #12]
 8065afa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8065afc:	687b      	ldr	r3, [r7, #4]
 8065afe:	2220      	movs	r2, #32
 8065b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8065b04:	687b      	ldr	r3, [r7, #4]
 8065b06:	2200      	movs	r2, #0
 8065b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8065b0c:	2300      	movs	r3, #0
}
 8065b0e:	4618      	mov	r0, r3
 8065b10:	3714      	adds	r7, #20
 8065b12:	46bd      	mov	sp, r7
 8065b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065b18:	4770      	bx	lr

08065b1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8065b1a:	b580      	push	{r7, lr}
 8065b1c:	b084      	sub	sp, #16
 8065b1e:	af00      	add	r7, sp, #0
 8065b20:	6078      	str	r0, [r7, #4]
 8065b22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8065b24:	687b      	ldr	r3, [r7, #4]
 8065b26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8065b2a:	2b01      	cmp	r3, #1
 8065b2c:	d101      	bne.n	8065b32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8065b2e:	2302      	movs	r3, #2
 8065b30:	e02d      	b.n	8065b8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8065b32:	687b      	ldr	r3, [r7, #4]
 8065b34:	2201      	movs	r2, #1
 8065b36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8065b3a:	687b      	ldr	r3, [r7, #4]
 8065b3c:	2224      	movs	r2, #36	@ 0x24
 8065b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8065b42:	687b      	ldr	r3, [r7, #4]
 8065b44:	681b      	ldr	r3, [r3, #0]
 8065b46:	681b      	ldr	r3, [r3, #0]
 8065b48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8065b4a:	687b      	ldr	r3, [r7, #4]
 8065b4c:	681b      	ldr	r3, [r3, #0]
 8065b4e:	681a      	ldr	r2, [r3, #0]
 8065b50:	687b      	ldr	r3, [r7, #4]
 8065b52:	681b      	ldr	r3, [r3, #0]
 8065b54:	f022 0201 	bic.w	r2, r2, #1
 8065b58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8065b5a:	687b      	ldr	r3, [r7, #4]
 8065b5c:	681b      	ldr	r3, [r3, #0]
 8065b5e:	689b      	ldr	r3, [r3, #8]
 8065b60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8065b64:	687b      	ldr	r3, [r7, #4]
 8065b66:	681b      	ldr	r3, [r3, #0]
 8065b68:	683a      	ldr	r2, [r7, #0]
 8065b6a:	430a      	orrs	r2, r1
 8065b6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8065b6e:	6878      	ldr	r0, [r7, #4]
 8065b70:	f000 f850 	bl	8065c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8065b74:	687b      	ldr	r3, [r7, #4]
 8065b76:	681b      	ldr	r3, [r3, #0]
 8065b78:	68fa      	ldr	r2, [r7, #12]
 8065b7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8065b7c:	687b      	ldr	r3, [r7, #4]
 8065b7e:	2220      	movs	r2, #32
 8065b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8065b84:	687b      	ldr	r3, [r7, #4]
 8065b86:	2200      	movs	r2, #0
 8065b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8065b8c:	2300      	movs	r3, #0
}
 8065b8e:	4618      	mov	r0, r3
 8065b90:	3710      	adds	r7, #16
 8065b92:	46bd      	mov	sp, r7
 8065b94:	bd80      	pop	{r7, pc}

08065b96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8065b96:	b580      	push	{r7, lr}
 8065b98:	b084      	sub	sp, #16
 8065b9a:	af00      	add	r7, sp, #0
 8065b9c:	6078      	str	r0, [r7, #4]
 8065b9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8065ba0:	687b      	ldr	r3, [r7, #4]
 8065ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8065ba6:	2b01      	cmp	r3, #1
 8065ba8:	d101      	bne.n	8065bae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8065baa:	2302      	movs	r3, #2
 8065bac:	e02d      	b.n	8065c0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8065bae:	687b      	ldr	r3, [r7, #4]
 8065bb0:	2201      	movs	r2, #1
 8065bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8065bb6:	687b      	ldr	r3, [r7, #4]
 8065bb8:	2224      	movs	r2, #36	@ 0x24
 8065bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8065bbe:	687b      	ldr	r3, [r7, #4]
 8065bc0:	681b      	ldr	r3, [r3, #0]
 8065bc2:	681b      	ldr	r3, [r3, #0]
 8065bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8065bc6:	687b      	ldr	r3, [r7, #4]
 8065bc8:	681b      	ldr	r3, [r3, #0]
 8065bca:	681a      	ldr	r2, [r3, #0]
 8065bcc:	687b      	ldr	r3, [r7, #4]
 8065bce:	681b      	ldr	r3, [r3, #0]
 8065bd0:	f022 0201 	bic.w	r2, r2, #1
 8065bd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8065bd6:	687b      	ldr	r3, [r7, #4]
 8065bd8:	681b      	ldr	r3, [r3, #0]
 8065bda:	689b      	ldr	r3, [r3, #8]
 8065bdc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8065be0:	687b      	ldr	r3, [r7, #4]
 8065be2:	681b      	ldr	r3, [r3, #0]
 8065be4:	683a      	ldr	r2, [r7, #0]
 8065be6:	430a      	orrs	r2, r1
 8065be8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8065bea:	6878      	ldr	r0, [r7, #4]
 8065bec:	f000 f812 	bl	8065c14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8065bf0:	687b      	ldr	r3, [r7, #4]
 8065bf2:	681b      	ldr	r3, [r3, #0]
 8065bf4:	68fa      	ldr	r2, [r7, #12]
 8065bf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8065bf8:	687b      	ldr	r3, [r7, #4]
 8065bfa:	2220      	movs	r2, #32
 8065bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8065c00:	687b      	ldr	r3, [r7, #4]
 8065c02:	2200      	movs	r2, #0
 8065c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8065c08:	2300      	movs	r3, #0
}
 8065c0a:	4618      	mov	r0, r3
 8065c0c:	3710      	adds	r7, #16
 8065c0e:	46bd      	mov	sp, r7
 8065c10:	bd80      	pop	{r7, pc}
	...

08065c14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8065c14:	b480      	push	{r7}
 8065c16:	b085      	sub	sp, #20
 8065c18:	af00      	add	r7, sp, #0
 8065c1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8065c1c:	687b      	ldr	r3, [r7, #4]
 8065c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8065c20:	2b00      	cmp	r3, #0
 8065c22:	d108      	bne.n	8065c36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8065c24:	687b      	ldr	r3, [r7, #4]
 8065c26:	2201      	movs	r2, #1
 8065c28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8065c2c:	687b      	ldr	r3, [r7, #4]
 8065c2e:	2201      	movs	r2, #1
 8065c30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8065c34:	e031      	b.n	8065c9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8065c36:	2310      	movs	r3, #16
 8065c38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8065c3a:	2310      	movs	r3, #16
 8065c3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8065c3e:	687b      	ldr	r3, [r7, #4]
 8065c40:	681b      	ldr	r3, [r3, #0]
 8065c42:	689b      	ldr	r3, [r3, #8]
 8065c44:	0e5b      	lsrs	r3, r3, #25
 8065c46:	b2db      	uxtb	r3, r3
 8065c48:	f003 0307 	and.w	r3, r3, #7
 8065c4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8065c4e:	687b      	ldr	r3, [r7, #4]
 8065c50:	681b      	ldr	r3, [r3, #0]
 8065c52:	689b      	ldr	r3, [r3, #8]
 8065c54:	0f5b      	lsrs	r3, r3, #29
 8065c56:	b2db      	uxtb	r3, r3
 8065c58:	f003 0307 	and.w	r3, r3, #7
 8065c5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8065c5e:	7bbb      	ldrb	r3, [r7, #14]
 8065c60:	7b3a      	ldrb	r2, [r7, #12]
 8065c62:	4911      	ldr	r1, [pc, #68]	@ (8065ca8 <UARTEx_SetNbDataToProcess+0x94>)
 8065c64:	5c8a      	ldrb	r2, [r1, r2]
 8065c66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8065c6a:	7b3a      	ldrb	r2, [r7, #12]
 8065c6c:	490f      	ldr	r1, [pc, #60]	@ (8065cac <UARTEx_SetNbDataToProcess+0x98>)
 8065c6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8065c70:	fb93 f3f2 	sdiv	r3, r3, r2
 8065c74:	b29a      	uxth	r2, r3
 8065c76:	687b      	ldr	r3, [r7, #4]
 8065c78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8065c7c:	7bfb      	ldrb	r3, [r7, #15]
 8065c7e:	7b7a      	ldrb	r2, [r7, #13]
 8065c80:	4909      	ldr	r1, [pc, #36]	@ (8065ca8 <UARTEx_SetNbDataToProcess+0x94>)
 8065c82:	5c8a      	ldrb	r2, [r1, r2]
 8065c84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8065c88:	7b7a      	ldrb	r2, [r7, #13]
 8065c8a:	4908      	ldr	r1, [pc, #32]	@ (8065cac <UARTEx_SetNbDataToProcess+0x98>)
 8065c8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8065c8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8065c92:	b29a      	uxth	r2, r3
 8065c94:	687b      	ldr	r3, [r7, #4]
 8065c96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8065c9a:	bf00      	nop
 8065c9c:	3714      	adds	r7, #20
 8065c9e:	46bd      	mov	sp, r7
 8065ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8065ca4:	4770      	bx	lr
 8065ca6:	bf00      	nop
 8065ca8:	08066210 	.word	0x08066210
 8065cac:	08066218 	.word	0x08066218

08065cb0 <memset>:
 8065cb0:	4402      	add	r2, r0
 8065cb2:	4603      	mov	r3, r0
 8065cb4:	4293      	cmp	r3, r2
 8065cb6:	d100      	bne.n	8065cba <memset+0xa>
 8065cb8:	4770      	bx	lr
 8065cba:	f803 1b01 	strb.w	r1, [r3], #1
 8065cbe:	e7f9      	b.n	8065cb4 <memset+0x4>

08065cc0 <__libc_init_array>:
 8065cc0:	b570      	push	{r4, r5, r6, lr}
 8065cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8065cf8 <__libc_init_array+0x38>)
 8065cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8065cfc <__libc_init_array+0x3c>)
 8065cc6:	1b64      	subs	r4, r4, r5
 8065cc8:	10a4      	asrs	r4, r4, #2
 8065cca:	2600      	movs	r6, #0
 8065ccc:	42a6      	cmp	r6, r4
 8065cce:	d109      	bne.n	8065ce4 <__libc_init_array+0x24>
 8065cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8065d00 <__libc_init_array+0x40>)
 8065cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8065d04 <__libc_init_array+0x44>)
 8065cd4:	f000 f818 	bl	8065d08 <_init>
 8065cd8:	1b64      	subs	r4, r4, r5
 8065cda:	10a4      	asrs	r4, r4, #2
 8065cdc:	2600      	movs	r6, #0
 8065cde:	42a6      	cmp	r6, r4
 8065ce0:	d105      	bne.n	8065cee <__libc_init_array+0x2e>
 8065ce2:	bd70      	pop	{r4, r5, r6, pc}
 8065ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8065ce8:	4798      	blx	r3
 8065cea:	3601      	adds	r6, #1
 8065cec:	e7ee      	b.n	8065ccc <__libc_init_array+0xc>
 8065cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8065cf2:	4798      	blx	r3
 8065cf4:	3601      	adds	r6, #1
 8065cf6:	e7f2      	b.n	8065cde <__libc_init_array+0x1e>
 8065cf8:	08066228 	.word	0x08066228
 8065cfc:	08066228 	.word	0x08066228
 8065d00:	08066228 	.word	0x08066228
 8065d04:	0806622c 	.word	0x0806622c

08065d08 <_init>:
 8065d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8065d0a:	bf00      	nop
 8065d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8065d0e:	bc08      	pop	{r3}
 8065d10:	469e      	mov	lr, r3
 8065d12:	4770      	bx	lr

08065d14 <_fini>:
 8065d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8065d16:	bf00      	nop
 8065d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8065d1a:	bc08      	pop	{r3}
 8065d1c:	469e      	mov	lr, r3
 8065d1e:	4770      	bx	lr
