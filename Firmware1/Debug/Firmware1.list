
Firmware1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ed4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  080161a4  080161a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801742c  0801742c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017434  08017434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08017438  08017438  00018438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000009c  24000000  0801743c  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002644  2400009c  080174d8  0001909c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240026e0  080174d8  000196e0  2**0
                  ALLOC
  9 .lwip_sec     00000400  30000000  30000000  0001a000  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001909c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022d1c  00000000  00000000  000190ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000044ba  00000000  00000000  0003bde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a88  00000000  00000000  000402a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014e2  00000000  00000000  00041d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037793  00000000  00000000  0004320a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026753  00000000  00000000  0007a99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00157e0c  00000000  00000000  000a10f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001f8efc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007598  00000000  00000000  001f8f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000066  00000000  00000000  002004d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400009c 	.word	0x2400009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801618c 	.word	0x0801618c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a0 	.word	0x240000a0
 800030c:	0801618c 	.word	0x0801618c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <crc32_custom>:
    0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};

uint32_t crc32_custom(uint32_t crc, const uint8_t *buf, size_t len)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
    if (buf == NULL) return 0;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <crc32_custom+0x16>
 80006fe:	2300      	movs	r3, #0
 8000700:	e01d      	b.n	800073e <crc32_custom+0x52>

    crc = crc ^ 0xFFFFFFFF;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	43db      	mvns	r3, r3
 8000706:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; i < len; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e011      	b.n	8000732 <crc32_custom+0x46>
        crc = crc32_table[(crc ^ buf[i]) & 0xFF] ^ (crc >> 8);
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4053      	eors	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <crc32_custom+0x60>)
 8000720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	4053      	eors	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < len; i++) {
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	3301      	adds	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	429a      	cmp	r2, r3
 8000738:	d3e9      	bcc.n	800070e <crc32_custom+0x22>
    }

    return crc ^ 0xFFFFFFFF;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	43db      	mvns	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	371c      	adds	r7, #28
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	080165a4 	.word	0x080165a4

08000750 <crc32>:

uint32_t crc32(const void *data, size_t size)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
    return crc32_custom(0, (const uint8_t*)data, size);
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ffc4 	bl	80006ec <crc32_custom>
 8000764:	4603      	mov	r3, r0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <MX_GPIO_Init+0xa4>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	4a21      	ldr	r2, [pc, #132]	@ (8000814 <MX_GPIO_Init+0xa4>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_GPIO_Init+0xa4>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007e6:	480c      	ldr	r0, [pc, #48]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007e8:	f003 f8a4 	bl	8003934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0xa8>)
 8000806:	f002 feed 	bl	80035e4 <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58024400 	.word	0x58024400
 8000818:	58020000 	.word	0x58020000

0800081c <check_signature_magic_number_app_1>:
	    0xDEADBEEFDEADBEEF,
	    0xDEADBEEFDEADBEEF,
	    0xDEADBEEFDEADBEEF,
	    0xDEADBEEFDEADBEEF
};
bool check_signature_magic_number_app_1(){
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; i++){
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e014      	b.n	8000852 <check_signature_magic_number_app_1+0x36>
    	if(SIGNATURE_FLAG_APP1_P[i] != expected_magic_number[i]){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	00da      	lsls	r2, r3, #3
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <check_signature_magic_number_app_1+0x4c>)
 800082e:	4413      	add	r3, r2
 8000830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000834:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <check_signature_magic_number_app_1+0x50>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	4413      	add	r3, r2
 800083c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000840:	4299      	cmp	r1, r3
 8000842:	bf08      	it	eq
 8000844:	4290      	cmpeq	r0, r2
 8000846:	d001      	beq.n	800084c <check_signature_magic_number_app_1+0x30>
    		return false;
 8000848:	2300      	movs	r3, #0
 800084a:	e006      	b.n	800085a <check_signature_magic_number_app_1+0x3e>
    for(int i = 0; i < 4; i++){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b03      	cmp	r3, #3
 8000856:	dde7      	ble.n	8000828 <check_signature_magic_number_app_1+0xc>
    	}
    }
    return true;
 8000858:	2301      	movs	r3, #1
}// Check signature
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	080e0000 	.word	0x080e0000
 800086c:	24000000 	.word	0x24000000

08000870 <check_signature_magic_number_app_2>:
bool check_signature_magic_number_app_2(){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; i++){
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	e014      	b.n	80008a6 <check_signature_magic_number_app_2+0x36>
    	if(SIGNATURE_FLAG_APP2_P[i] != expected_magic_number[i]){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	00da      	lsls	r2, r3, #3
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <check_signature_magic_number_app_2+0x4c>)
 8000882:	4413      	add	r3, r2
 8000884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <check_signature_magic_number_app_2+0x50>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000894:	4299      	cmp	r1, r3
 8000896:	bf08      	it	eq
 8000898:	4290      	cmpeq	r0, r2
 800089a:	d001      	beq.n	80008a0 <check_signature_magic_number_app_2+0x30>
    		return false;
 800089c:	2300      	movs	r3, #0
 800089e:	e006      	b.n	80008ae <check_signature_magic_number_app_2+0x3e>
    for(int i = 0; i < 4; i++){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	dde7      	ble.n	800087c <check_signature_magic_number_app_2+0xc>
    	}
    }
    return true;
 80008ac:	2301      	movs	r3, #1
}//
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	080e0020 	.word	0x080e0020
 80008c0:	24000000 	.word	0x24000000

080008c4 <cal_flash_used_app_1>:
uint32_t cal_flash_used_app_1(void) {
 80008c4:	b4f0      	push	{r4, r5, r6, r7}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
    uint32_t count;
    __asm__ volatile (
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	4912      	ldr	r1, [pc, #72]	@ (8000918 <done+0x12>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <done+0x16>)

080008d2 <loop_start>:
 80008d2:	4291      	cmp	r1, r2
 80008d4:	da17      	bge.n	8000906 <done>
 80008d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80008da:	f851 4b04 	ldr.w	r4, [r1], #4
 80008de:	f851 5b04 	ldr.w	r5, [r1], #4
 80008e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80008e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ea:	d109      	bne.n	8000900 <inc>
 80008ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008f0:	d106      	bne.n	8000900 <inc>
 80008f2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80008f6:	d103      	bne.n	8000900 <inc>
 80008f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80008fc:	d100      	bne.n	8000900 <inc>
 80008fe:	e7e8      	b.n	80008d2 <loop_start>

08000900 <inc>:
 8000900:	f100 0001 	add.w	r0, r0, #1
 8000904:	e7e5      	b.n	80008d2 <loop_start>

08000906 <done>:
 8000906:	4684      	mov	ip, r0
 8000908:	4663      	mov	r3, ip
 800090a:	607b      	str	r3, [r7, #4]
        "mov %[out], r0\n"
        : [out] "=r" (count)
        :
        : "r0", "r1", "r2", "r3", "r4", "r5", "r6"
    );
    return count;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bcf0      	pop	{r4, r5, r6, r7}
 8000916:	4770      	bx	lr
 8000918:	08020000 	.word	0x08020000
 800091c:	0805ffff 	.word	0x0805ffff

08000920 <cal_flash_used_app_2>:

uint32_t cal_flash_used_app_2(void) {
 8000920:	b4f0      	push	{r4, r5, r6, r7}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
    uint32_t count;
    __asm__ volatile (
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4912      	ldr	r1, [pc, #72]	@ (8000974 <flash1_done+0x12>)
 800092c:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <flash1_done+0x16>)

0800092e <flash1_loop_start>:
 800092e:	4291      	cmp	r1, r2
 8000930:	da17      	bge.n	8000962 <flash1_done>
 8000932:	f851 3b04 	ldr.w	r3, [r1], #4
 8000936:	f851 4b04 	ldr.w	r4, [r1], #4
 800093a:	f851 5b04 	ldr.w	r5, [r1], #4
 800093e:	f851 6b04 	ldr.w	r6, [r1], #4
 8000942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000946:	d109      	bne.n	800095c <flash1_inc>
 8000948:	f1b4 3fff 	cmp.w	r4, #4294967295
 800094c:	d106      	bne.n	800095c <flash1_inc>
 800094e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000952:	d103      	bne.n	800095c <flash1_inc>
 8000954:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000958:	d100      	bne.n	800095c <flash1_inc>
 800095a:	e7e8      	b.n	800092e <flash1_loop_start>

0800095c <flash1_inc>:
 800095c:	f100 0001 	add.w	r0, r0, #1
 8000960:	e7e5      	b.n	800092e <flash1_loop_start>

08000962 <flash1_done>:
 8000962:	4684      	mov	ip, r0
 8000964:	4663      	mov	r3, ip
 8000966:	607b      	str	r3, [r7, #4]
        : [out] "=r" (count)
        :
        : "r0", "r1", "r2", "r3", "r4", "r5", "r6"
    );

    return count;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bcf0      	pop	{r4, r5, r6, r7}
 8000972:	4770      	bx	lr
 8000974:	08060000 	.word	0x08060000
 8000978:	0809ffff 	.word	0x0809ffff

0800097c <del_mem>:
int del_mem(uint8_t start, uint8_t number_of_sector){
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	460a      	mov	r2, r1
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	71bb      	strb	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800098c:	f002 fcc6 	bl	800331c <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000998:	2320      	movs	r3, #32
 800099a:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.Banks = FLASH_BANK_1;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector = start;
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = number_of_sector;
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK)
 80009a8:	f107 0208 	add.w	r2, r7, #8
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fd42 	bl	800343c <HAL_FLASHEx_Erase>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <del_mem+0x4a>
    {
        // Erase failed
    	HAL_FLASH_Lock();
 80009be:	f002 fccf 	bl	8003360 <HAL_FLASH_Lock>
    	return 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e002      	b.n	80009cc <del_mem+0x50>
    }
    else
    {
    	HAL_FLASH_Lock();
 80009c6:	f002 fccb 	bl	8003360 <HAL_FLASH_Lock>
        return 0;
 80009ca:	2300      	movs	r3, #0
    }
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <clear_flag>:
void clear_flag(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	del_mem(FLASH_SECTOR_5, 1);
 80009d8:	2101      	movs	r1, #1
 80009da:	2005      	movs	r0, #5
 80009dc:	f7ff ffce 	bl	800097c <del_mem>
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <bl_jump_to_code_uart>:
void bl_jump_to_code_uart(uint8_t *buffer){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint32_t len = buffer[0] + 1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
	uint32_t crc_host = crc32(buffer, len - 4);
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3b04      	subs	r3, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fea8 	bl	8000750 <crc32>
 8000a00:	6138      	str	r0, [r7, #16]
	uint32_t crc_recv = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
	memcpy(&crc_recv, &buffer[len - 4], 4);
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3b04      	subs	r3, #4
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60bb      	str	r3, [r7, #8]

	if (crc_host == crc_recv) {
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d00c      	beq.n	8000a34 <bl_jump_to_code_uart+0x50>
//			const char *msg = "Signature failed \r\n";
//			HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
//			return;
//		}
	} else {
		const char *msg = "CRC failed\r\n";
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <bl_jump_to_code_uart+0x58>)
 8000a1c:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff fc76 	bl	8000310 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	68f9      	ldr	r1, [r7, #12]
 8000a2e:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <bl_jump_to_code_uart+0x5c>)
 8000a30:	f006 f902 	bl	8006c38 <HAL_UART_Transmit>
	}

}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	080161a4 	.word	0x080161a4
 8000a40:	24000294 	.word	0x24000294

08000a44 <bl_check_connect_uart>:

void bl_check_connect_uart(uint8_t *buffer) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	uint32_t len = buffer[0] + 1;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
	uint32_t crc_host = crc32(buffer, len - 4);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	3b04      	subs	r3, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fe78 	bl	8000750 <crc32>
 8000a60:	61b8      	str	r0, [r7, #24]
	uint32_t crc_recv = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
	memcpy(&crc_recv, &buffer[len - 4], 4);
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b04      	subs	r3, #4
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]

	if (crc_host == crc_recv) {
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d10d      	bne.n	8000a96 <bl_check_connect_uart+0x52>
		const char *msg = "OK from Bootloader STM32\r\n";
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <bl_check_connect_uart+0x74>)
 8000a7c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a7e:	6938      	ldr	r0, [r7, #16]
 8000a80:	f7ff fc46 	bl	8000310 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	6939      	ldr	r1, [r7, #16]
 8000a8e:	480b      	ldr	r0, [pc, #44]	@ (8000abc <bl_check_connect_uart+0x78>)
 8000a90:	f006 f8d2 	bl	8006c38 <HAL_UART_Transmit>
	} else {
		const char *msg = "CRC failed\r\n";
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	}
}
 8000a94:	e00c      	b.n	8000ab0 <bl_check_connect_uart+0x6c>
		const char *msg = "CRC failed\r\n";
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <bl_check_connect_uart+0x7c>)
 8000a98:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a9a:	6978      	ldr	r0, [r7, #20]
 8000a9c:	f7ff fc38 	bl	8000310 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	6979      	ldr	r1, [r7, #20]
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <bl_check_connect_uart+0x78>)
 8000aac:	f006 f8c4 	bl	8006c38 <HAL_UART_Transmit>
}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	080161b4 	.word	0x080161b4
 8000abc:	24000294 	.word	0x24000294
 8000ac0:	080161a4 	.word	0x080161a4

08000ac4 <bl_reset_metadata_state>:
static volatile  uint32_t current_verified_app_base = 0;
void bl_reset_metadata_state(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
    current_verified_app_base = 0;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <bl_reset_metadata_state+0x14>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	240001f4 	.word	0x240001f4

08000adc <bl_write_mem_uart>:
}__attribute__((packed, aligned(32))) FirmwareMetadata;
typedef struct{
	uint32_t run_ok_flag;
	uint32_t retry_counter;
}__attribute__((packed, aligned(32))) FirmwareUserStatus;
void bl_write_mem_uart(uint8_t *buffer) {
 8000adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ae0:	f5ad 6da7 	sub.w	sp, sp, #1336	@ 0x538
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000aea:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000aee:	6018      	str	r0, [r3, #0]
 8000af0:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000af4:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8000af8:	331f      	adds	r3, #31
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	015c      	lsls	r4, r3, #5
	FirmwareMetadata F;
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
 8000afe:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f008 fa0a 	bl	8008f1c <mbedtls_aes_init>
    mbedtls_aes_setkey_dec(&aes, aes_key, 128);
 8000b08:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	49d7      	ldr	r1, [pc, #860]	@ (8000e6c <bl_write_mem_uart+0x390>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f008 fc03 	bl	800931c <mbedtls_aes_setkey_dec>

    uint32_t command_len = buffer[0] + 1;
 8000b16:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b1a:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    uint32_t crc_host = crc32(buffer, command_len - 4);
 8000b28:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8000b2c:	1f1a      	subs	r2, r3, #4
 8000b2e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b32:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b36:	4611      	mov	r1, r2
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f7ff fe09 	bl	8000750 <crc32>
 8000b3e:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
    uint32_t crc_recv;
    memcpy(&crc_recv, &buffer[command_len - 4], 4);
 8000b42:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8000b46:	3b04      	subs	r3, #4
 8000b48:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8000b4c:	f2a2 522c 	subw	r2, r2, #1324	@ 0x52c
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000b60:	601a      	str	r2, [r3, #0]

    if (crc_host != crc_recv) {
 8000b62:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b66:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d007      	beq.n	8000b84 <bl_write_mem_uart+0xa8>
        HAL_UART_Transmit(&huart1, (uint8_t *)"CRC failed\r\n", 12, HAL_MAX_DELAY);
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	220c      	movs	r2, #12
 8000b7a:	49bd      	ldr	r1, [pc, #756]	@ (8000e70 <bl_write_mem_uart+0x394>)
 8000b7c:	48bd      	ldr	r0, [pc, #756]	@ (8000e74 <bl_write_mem_uart+0x398>)
 8000b7e:	f006 f85b 	bl	8006c38 <HAL_UART_Transmit>
        return;
 8000b82:	e284      	b.n	800108e <bl_write_mem_uart+0x5b2>
    }

    uint32_t address;
    uint8_t size_firmware;
    memcpy(&address, &buffer[2], 4);
 8000b84:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b88:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3302      	adds	r3, #2
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b98:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000b9c:	601a      	str	r2, [r3, #0]
    memcpy(&size_firmware, &buffer[6], 1);
 8000b9e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ba2:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3306      	adds	r3, #6
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bb0:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000bb4:	701a      	strb	r2, [r3, #0]

    uint8_t *firmware = &buffer[7];
 8000bb6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bba:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3307      	adds	r3, #7
 8000bc2:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518

    if (address == APP1_ADDR_START || address == APP2_ADDR_START) {//First chunk, check metedata
 8000bc6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4aa9      	ldr	r2, [pc, #676]	@ (8000e78 <bl_write_mem_uart+0x39c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d008      	beq.n	8000be8 <bl_write_mem_uart+0x10c>
 8000bd6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4aa6      	ldr	r2, [pc, #664]	@ (8000e7c <bl_write_mem_uart+0x3a0>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	f040 815e 	bne.w	8000ea4 <bl_write_mem_uart+0x3c8>
        uint32_t version;
        uint32_t total_firmware_length;
        memcpy(&version, &firmware[0], 4);
 8000be8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bf4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8000bf8:	601a      	str	r2, [r3, #0]
        memcpy(&total_firmware_length, &firmware[4], 4);
 8000bfa:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000bfe:	3304      	adds	r3, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c08:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000c0c:	601a      	str	r2, [r3, #0]
        if (total_firmware_length > 256000) {
 8000c0e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c12:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f5b3 3f7a 	cmp.w	r3, #256000	@ 0x3e800
 8000c1c:	d909      	bls.n	8000c32 <bl_write_mem_uart+0x156>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ FIRMWARE TOO LARGE\r\n", 24, HAL_MAX_DELAY);
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	2218      	movs	r2, #24
 8000c24:	4996      	ldr	r1, [pc, #600]	@ (8000e80 <bl_write_mem_uart+0x3a4>)
 8000c26:	4893      	ldr	r0, [pc, #588]	@ (8000e74 <bl_write_mem_uart+0x398>)
 8000c28:	f006 f806 	bl	8006c38 <HAL_UART_Transmit>
            bl_reset_metadata_state();
 8000c2c:	f7ff ff4a 	bl	8000ac4 <bl_reset_metadata_state>
            return;
 8000c30:	e22d      	b.n	800108e <bl_write_mem_uart+0x5b2>
        }

        //Lấy ECC signature
        uint8_t *sig = &firmware[8];  // 64 bytes //ECC
 8000c32:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000c36:	3308      	adds	r3, #8
 8000c38:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
        uint8_t version_data[8];
        memcpy(version_data, &firmware[0], 8);
 8000c3c:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c40:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8000c44:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8000c48:	6810      	ldr	r0, [r2, #0]
 8000c4a:	6851      	ldr	r1, [r2, #4]
 8000c4c:	c303      	stmia	r3!, {r0, r1}
        uint32_t version_ex;
        memcpy(&version_ex, &firmware[0], 4);
 8000c4e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c5a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c5e:	601a      	str	r2, [r3, #0]

        F.address = address + 224;
 8000c60:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c64:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	33e0      	adds	r3, #224	@ 0xe0
 8000c6c:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
        F.version = version_ex;
 8000c70:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c74:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0

        uint64_t *flag_ptr = (uint64_t *)SAVED_VER_ADDR;
 8000c7e:	4b81      	ldr	r3, [pc, #516]	@ (8000e84 <bl_write_mem_uart+0x3a8>)
 8000c80:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
        while (*flag_ptr != 0xFFFFFFFFFFFFFFFFULL) {
 8000c84:	e01c      	b.n	8000cc0 <bl_write_mem_uart+0x1e4>
            uint32_t stored_version = *(uint32_t *)flag_ptr;
 8000c86:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
            if (version_ex <= stored_version) {
 8000c90:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c94:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d309      	bcc.n	8000cb6 <bl_write_mem_uart+0x1da>
                HAL_UART_Transmit(&huart1, (uint8_t *)"Version is too old\r\n", 24, HAL_MAX_DELAY);
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	2218      	movs	r2, #24
 8000ca8:	4977      	ldr	r1, [pc, #476]	@ (8000e88 <bl_write_mem_uart+0x3ac>)
 8000caa:	4872      	ldr	r0, [pc, #456]	@ (8000e74 <bl_write_mem_uart+0x398>)
 8000cac:	f005 ffc4 	bl	8006c38 <HAL_UART_Transmit>
                bl_reset_metadata_state();
 8000cb0:	f7ff ff08 	bl	8000ac4 <bl_reset_metadata_state>
                return;
 8000cb4:	e1eb      	b.n	800108e <bl_write_mem_uart+0x5b2>
            }
            flag_ptr += 4;
 8000cb6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8000cba:	3320      	adds	r3, #32
 8000cbc:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
        while (*flag_ptr != 0xFFFFFFFFFFFFFFFFULL) {
 8000cc0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	bf08      	it	eq
 8000cce:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000cd2:	d1d8      	bne.n	8000c86 <bl_write_mem_uart+0x1aa>
        }
        uint8_t hash[32];
        mbedtls_sha256(version_data, 8, hash, 0); // 0 = SHA256
 8000cd4:	f107 020c 	add.w	r2, r7, #12
 8000cd8:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 8000cdc:	2300      	movs	r3, #0
 8000cde:	2108      	movs	r1, #8
 8000ce0:	f014 fd6e 	bl	80157c0 <mbedtls_sha256>
        mbedtls_ecdsa_context ctx;
        mbedtls_ecdsa_init(&ctx);
 8000ce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00d f941 	bl	800df70 <mbedtls_ecdsa_init>
        mbedtls_ecp_group_load(&ctx.grp, MBEDTLS_ECP_DP_SECP256R1);
 8000cee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f010 fb5b 	bl	80113b0 <mbedtls_ecp_group_load>
        mbedtls_mpi_read_binary(&ctx.Q.X, public_key, 32);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cfe:	3388      	adds	r3, #136	@ 0x88
 8000d00:	2220      	movs	r2, #32
 8000d02:	4962      	ldr	r1, [pc, #392]	@ (8000e8c <bl_write_mem_uart+0x3b0>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f009 ff7d 	bl	800ac04 <mbedtls_mpi_read_binary>
        mbedtls_mpi_read_binary(&ctx.Q.Y, public_key + 32, 32);
 8000d0a:	4961      	ldr	r1, [pc, #388]	@ (8000e90 <bl_write_mem_uart+0x3b4>)
 8000d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d10:	3394      	adds	r3, #148	@ 0x94
 8000d12:	2220      	movs	r2, #32
 8000d14:	4618      	mov	r0, r3
 8000d16:	f009 ff75 	bl	800ac04 <mbedtls_mpi_read_binary>
        mbedtls_mpi_lset(&ctx.Q.Z, 1);
 8000d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1e:	33a0      	adds	r3, #160	@ 0xa0
 8000d20:	2101      	movs	r1, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f009 fcda 	bl	800a6dc <mbedtls_mpi_lset>

        mbedtls_mpi r, s;
        mbedtls_mpi_init(&r); mbedtls_mpi_init(&s);
 8000d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 fa94 	bl	800a25a <mbedtls_mpi_init>
 8000d32:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d36:	4618      	mov	r0, r3
 8000d38:	f009 fa8f 	bl	800a25a <mbedtls_mpi_init>
        mbedtls_mpi_read_binary(&r, sig, 32);
 8000d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d40:	2220      	movs	r2, #32
 8000d42:	f8d7 1514 	ldr.w	r1, [r7, #1300]	@ 0x514
 8000d46:	4618      	mov	r0, r3
 8000d48:	f009 ff5c 	bl	800ac04 <mbedtls_mpi_read_binary>
        mbedtls_mpi_read_binary(&s, sig + 32, 32);
 8000d4c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8000d50:	f103 0120 	add.w	r1, r3, #32
 8000d54:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d58:	2220      	movs	r2, #32
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f009 ff52 	bl	800ac04 <mbedtls_mpi_read_binary>

        int ret = mbedtls_ecdsa_verify(&ctx.grp, hash, 32, &ctx.Q, &r, &s);
 8000d60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d64:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8000d68:	f107 010c 	add.w	r1, r7, #12
 8000d6c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000d70:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	2220      	movs	r2, #32
 8000d80:	f00d f8de 	bl	800df40 <mbedtls_ecdsa_verify>
 8000d84:	f8c7 0510 	str.w	r0, [r7, #1296]	@ 0x510

        mbedtls_mpi_free(&r); mbedtls_mpi_free(&s);
 8000d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f009 fa77 	bl	800a280 <mbedtls_mpi_free>
 8000d92:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d96:	4618      	mov	r0, r3
 8000d98:	f009 fa72 	bl	800a280 <mbedtls_mpi_free>
        mbedtls_ecdsa_free(&ctx);
 8000d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da0:	4618      	mov	r0, r3
 8000da2:	f00d f8f0 	bl	800df86 <mbedtls_ecdsa_free>

        if (ret != 0) {
 8000da6:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d009      	beq.n	8000dc2 <bl_write_mem_uart+0x2e6>
            HAL_UART_Transmit(&huart1, (uint8_t *)"Metadata Signature FAIL\r\n", 28, HAL_MAX_DELAY);
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	221c      	movs	r2, #28
 8000db4:	4937      	ldr	r1, [pc, #220]	@ (8000e94 <bl_write_mem_uart+0x3b8>)
 8000db6:	482f      	ldr	r0, [pc, #188]	@ (8000e74 <bl_write_mem_uart+0x398>)
 8000db8:	f005 ff3e 	bl	8006c38 <HAL_UART_Transmit>
            bl_reset_metadata_state();
 8000dbc:	f7ff fe82 	bl	8000ac4 <bl_reset_metadata_state>
            return;
 8000dc0:	e165      	b.n	800108e <bl_write_mem_uart+0x5b2>
        }
        uint64_t version_block[8] __attribute__((aligned(32))); // 64 bytes
        memset(version_block, 0xFF, sizeof(version_block));
 8000dc2:	2240      	movs	r2, #64	@ 0x40
 8000dc4:	21ff      	movs	r1, #255	@ 0xff
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f014 fe2a 	bl	8015a20 <memset>
        memcpy(version_block, &F, 8); // chỉ lưu version
 8000dcc:	e9d4 2338 	ldrd	r2, r3, [r4, #224]	@ 0xe0
 8000dd0:	e9c4 2300 	strd	r2, r3, [r4]

        HAL_FLASH_Unlock();
 8000dd4:	f002 faa2 	bl	800331c <HAL_FLASH_Unlock>
        uint32_t dummy_flag = SAVED_VER_ADDR; //0x08020000
 8000dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <bl_write_mem_uart+0x3a8>)
 8000dda:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
        uint64_t temp;
        while (1) {
            memcpy(&temp, dummy_flag, sizeof(temp));
 8000dde:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8000de2:	f8d3 8000 	ldr.w	r8, [r3]
 8000de6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8000dea:	4642      	mov	r2, r8
 8000dec:	464b      	mov	r3, r9
 8000dee:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
            if (temp == 0xFFFFFFFFFFFFFFFFULL) break;
 8000df2:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8000df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfa:	bf08      	it	eq
 8000dfc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000e00:	d005      	beq.n	8000e0e <bl_write_mem_uart+0x332>
            dummy_flag += 32;
 8000e02:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8000e06:	3320      	adds	r3, #32
 8000e08:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
            memcpy(&temp, dummy_flag, sizeof(temp));
 8000e0c:	e7e7      	b.n	8000dde <bl_write_mem_uart+0x302>
            if (temp == 0xFFFFFFFFFFFFFFFFULL) break;
 8000e0e:	bf00      	nop
        }
        if (((uint32_t)dummy_flag % 32) != 0) {
 8000e10:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d007      	beq.n	8000e2c <bl_write_mem_uart+0x350>
            HAL_UART_Transmit(&huart1, (uint8_t *)"Addr not aligned\r\n", 22, HAL_MAX_DELAY);
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	2216      	movs	r2, #22
 8000e22:	491d      	ldr	r1, [pc, #116]	@ (8000e98 <bl_write_mem_uart+0x3bc>)
 8000e24:	4813      	ldr	r0, [pc, #76]	@ (8000e74 <bl_write_mem_uart+0x398>)
 8000e26:	f005 ff07 	bl	8006c38 <HAL_UART_Transmit>
            return;
 8000e2a:	e130      	b.n	800108e <bl_write_mem_uart+0x5b2>
        }

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD , dummy_flag , (uint32_t)&version_block) != HAL_OK) {
 8000e2c:	4623      	mov	r3, r4
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f8d7 1528 	ldr.w	r1, [r7, #1320]	@ 0x528
 8000e34:	2001      	movs	r0, #1
 8000e36:	f002 fa01 	bl	800323c <HAL_FLASH_Program>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00b      	beq.n	8000e58 <bl_write_mem_uart+0x37c>
			HAL_FLASH_Lock();
 8000e40:	f002 fa8e 	bl	8003360 <HAL_FLASH_Lock>
			HAL_UART_Transmit(&huart1, (uint8_t *)"WRITE ERROR\r\n", 14, HAL_MAX_DELAY);
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	220e      	movs	r2, #14
 8000e4a:	4914      	ldr	r1, [pc, #80]	@ (8000e9c <bl_write_mem_uart+0x3c0>)
 8000e4c:	4809      	ldr	r0, [pc, #36]	@ (8000e74 <bl_write_mem_uart+0x398>)
 8000e4e:	f005 fef3 	bl	8006c38 <HAL_UART_Transmit>
			bl_reset_metadata_state();
 8000e52:	f7ff fe37 	bl	8000ac4 <bl_reset_metadata_state>
			return;
 8000e56:	e11a      	b.n	800108e <bl_write_mem_uart+0x5b2>
		}
	    HAL_FLASH_Lock();
 8000e58:	f002 fa82 	bl	8003360 <HAL_FLASH_Lock>
	    //current_verified_app_base = 1;
        HAL_UART_Transmit(&huart1, (uint8_t *)"Metadata Signature OK\r\n", 26, HAL_MAX_DELAY);
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e60:	221a      	movs	r2, #26
 8000e62:	490f      	ldr	r1, [pc, #60]	@ (8000ea0 <bl_write_mem_uart+0x3c4>)
 8000e64:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <bl_write_mem_uart+0x398>)
 8000e66:	f005 fee7 	bl	8006c38 <HAL_UART_Transmit>

        return;
 8000e6a:	e110      	b.n	800108e <bl_write_mem_uart+0x5b2>
 8000e6c:	080169e4 	.word	0x080169e4
 8000e70:	080161a4 	.word	0x080161a4
 8000e74:	24000294 	.word	0x24000294
 8000e78:	08020000 	.word	0x08020000
 8000e7c:	08060000 	.word	0x08060000
 8000e80:	080161d0 	.word	0x080161d0
 8000e84:	080174a0 	.word	0x080174a0
 8000e88:	080161ec 	.word	0x080161ec
 8000e8c:	080169a4 	.word	0x080169a4
 8000e90:	080169c4 	.word	0x080169c4
 8000e94:	08016204 	.word	0x08016204
 8000e98:	08016220 	.word	0x08016220
 8000e9c:	08016234 	.word	0x08016234
 8000ea0:	08016244 	.word	0x08016244

//    if(current_verified_app_base != 1){
//    	HAL_UART_Transmit(&huart1, (uint8_t *)"9999\r\n", 30, HAL_MAX_DELAY);
//    	return;
//    }
	if (address < 0x08000000 || address + size_firmware > 0x08200000 || address % 32 != 0) {
 8000ea4:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ea8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000eb2:	d317      	bcc.n	8000ee4 <bl_write_mem_uart+0x408>
 8000eb4:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000eb8:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ec4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8000ed0:	d808      	bhi.n	8000ee4 <bl_write_mem_uart+0x408>
 8000ed2:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ed6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 031f 	and.w	r3, r3, #31
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d019      	beq.n	8000f18 <bl_write_mem_uart+0x43c>
		char msg[64];
		sprintf(msg, "0x%08lX\r\n", address);
 8000ee4:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ee8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ef2:	4969      	ldr	r1, [pc, #420]	@ (8001098 <bl_write_mem_uart+0x5bc>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f014 fd47 	bl	8015988 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000efa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa06 	bl	8000310 <strlen>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f10:	4862      	ldr	r0, [pc, #392]	@ (800109c <bl_write_mem_uart+0x5c0>)
 8000f12:	f005 fe91 	bl	8006c38 <HAL_UART_Transmit>
 8000f16:	e0ba      	b.n	800108e <bl_write_mem_uart+0x5b2>
		//HAL_UART_Transmit(&huart1, (uint8_t *)"INVALID FIRMWARE ADDRESS\r\n", 25, HAL_MAX_DELAY);
		return;
	}
	if (address == APP1_ADDR_START + 224 || address == APP2_ADDR_START + 224) {
 8000f18:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000f1c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a5f      	ldr	r2, [pc, #380]	@ (80010a0 <bl_write_mem_uart+0x5c4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d007      	beq.n	8000f38 <bl_write_mem_uart+0x45c>
 8000f28:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000f2c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a5c      	ldr	r2, [pc, #368]	@ (80010a4 <bl_write_mem_uart+0x5c8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d105      	bne.n	8000f44 <bl_write_mem_uart+0x468>
	    memcpy(iv, AES_IV, 16);  // reset IV ở chunk đầu tiên, bởi vì khi ghi liên tiếp app có thể app 2 sẽ lấy giá trị IV còn tổn lại ở lần ghi app 1
 8000f38:	4a5b      	ldr	r2, [pc, #364]	@ (80010a8 <bl_write_mem_uart+0x5cc>)
 8000f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80010ac <bl_write_mem_uart+0x5d0>)
 8000f3c:	4615      	mov	r5, r2
 8000f3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f40:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}//AES-CBC là chế độ mã hóa có trạng thái, mỗi chunk phụ thuộc vào IV trước đó.

	uint8_t padded_input[224];
	uint8_t decrypted_firmware[224];
	memset(padded_input, 0xFF, sizeof(padded_input));
 8000f44:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000f48:	22e0      	movs	r2, #224	@ 0xe0
 8000f4a:	21ff      	movs	r1, #255	@ 0xff
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f014 fd67 	bl	8015a20 <memset>
	memcpy(padded_input, firmware, size_firmware);
 8000f52:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000f56:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000f62:	f8d7 1518 	ldr.w	r1, [r7, #1304]	@ 0x518
 8000f66:	4618      	mov	r0, r3
 8000f68:	f014 fd9e 	bl	8015aa8 <memcpy>


	if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, 224, iv, padded_input, decrypted_firmware)) {
 8000f6c:	f507 707d 	add.w	r0, r7, #1012	@ 0x3f4
 8000f70:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80010a8 <bl_write_mem_uart+0x5cc>)
 8000f7e:	22e0      	movs	r2, #224	@ 0xe0
 8000f80:	2100      	movs	r1, #0
 8000f82:	f009 f8da 	bl	800a13a <mbedtls_aes_crypt_cbc>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <bl_write_mem_uart+0x4c0>
		HAL_UART_Transmit(&huart1, (uint8_t *)"DECRYPT FAILED\r\n", 17, HAL_MAX_DELAY);
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f90:	2211      	movs	r2, #17
 8000f92:	4947      	ldr	r1, [pc, #284]	@ (80010b0 <bl_write_mem_uart+0x5d4>)
 8000f94:	4841      	ldr	r0, [pc, #260]	@ (800109c <bl_write_mem_uart+0x5c0>)
 8000f96:	f005 fe4f 	bl	8006c38 <HAL_UART_Transmit>
		return;
 8000f9a:	e078      	b.n	800108e <bl_write_mem_uart+0x5b2>
	}
	memcpy(iv, &padded_input[224 - 16], 16);
 8000f9c:	4a42      	ldr	r2, [pc, #264]	@ (80010a8 <bl_write_mem_uart+0x5cc>)
 8000f9e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000fa2:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8000fa6:	4615      	mov	r5, r2
 8000fa8:	33d0      	adds	r3, #208	@ 0xd0
 8000faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
}
 8000fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb6:	f3bf 8f6f 	isb	sy
}
 8000fba:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	@ (80010b4 <bl_write_mem_uart+0x5d8>)
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80010b4 <bl_write_mem_uart+0x5d8>)
 8000fc2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000fc6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80010b4 <bl_write_mem_uart+0x5d8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fd0:	f3bf 8f4f 	dsb	sy
}
 8000fd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd6:	f3bf 8f6f 	isb	sy
}
 8000fda:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fdc:	bf00      	nop
	/*
	 * decrypt
	 */
	SCB_DisableICache();
	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000fde:	f002 f99d 	bl	800331c <HAL_FLASH_Unlock>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d007      	beq.n	8000ff8 <bl_write_mem_uart+0x51c>
		HAL_UART_Transmit(&huart1, (uint8_t *)"UNLOCK ERROR\r\n", 15, HAL_MAX_DELAY);
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	220f      	movs	r2, #15
 8000fee:	4932      	ldr	r1, [pc, #200]	@ (80010b8 <bl_write_mem_uart+0x5dc>)
 8000ff0:	482a      	ldr	r0, [pc, #168]	@ (800109c <bl_write_mem_uart+0x5c0>)
 8000ff2:	f005 fe21 	bl	8006c38 <HAL_UART_Transmit>
		return;
 8000ff6:	e04a      	b.n	800108e <bl_write_mem_uart+0x5b2>
	}
	uint64_t val[28] __attribute__((aligned(32)));
	memset(val, 0xFF, sizeof(val));
 8000ff8:	22e0      	movs	r2, #224	@ 0xe0
 8000ffa:	21ff      	movs	r1, #255	@ 0xff
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f014 fd0f 	bl	8015a20 <memset>
	memcpy(val, decrypted_firmware, size_firmware);
 8001002:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8001006:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8001012:	4619      	mov	r1, r3
 8001014:	4620      	mov	r0, r4
 8001016:	f014 fd47 	bl	8015aa8 <memcpy>
	for (uint32_t offset = 0; offset < size_firmware; offset += 32) {
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8001020:	e022      	b.n	8001068 <bl_write_mem_uart+0x58c>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, address + offset, (uint32_t)&val[offset / 8]) != HAL_OK) {
 8001022:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8001026:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001030:	18d1      	adds	r1, r2, r3
 8001032:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4423      	add	r3, r4
 800103c:	461a      	mov	r2, r3
 800103e:	2001      	movs	r0, #1
 8001040:	f002 f8fc 	bl	800323c <HAL_FLASH_Program>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d009      	beq.n	800105e <bl_write_mem_uart+0x582>
			HAL_FLASH_Lock();
 800104a:	f002 f989 	bl	8003360 <HAL_FLASH_Lock>
			HAL_UART_Transmit(&huart1, (uint8_t *)"WRITE ERROR\r\n", 14, HAL_MAX_DELAY);
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	220e      	movs	r2, #14
 8001054:	4919      	ldr	r1, [pc, #100]	@ (80010bc <bl_write_mem_uart+0x5e0>)
 8001056:	4811      	ldr	r0, [pc, #68]	@ (800109c <bl_write_mem_uart+0x5c0>)
 8001058:	f005 fdee 	bl	8006c38 <HAL_UART_Transmit>
			return;
 800105c:	e017      	b.n	800108e <bl_write_mem_uart+0x5b2>
	for (uint32_t offset = 0; offset < size_firmware; offset += 32) {
 800105e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001062:	3320      	adds	r3, #32
 8001064:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8001068:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800106c:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001078:	4293      	cmp	r3, r2
 800107a:	d3d2      	bcc.n	8001022 <bl_write_mem_uart+0x546>
		}
	}
	HAL_FLASH_Lock();
 800107c:	f002 f970 	bl	8003360 <HAL_FLASH_Lock>
	HAL_UART_Transmit(&huart1, (uint8_t *)"WRITE OK\r\n", 10, HAL_MAX_DELAY);
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
 8001084:	220a      	movs	r2, #10
 8001086:	490e      	ldr	r1, [pc, #56]	@ (80010c0 <bl_write_mem_uart+0x5e4>)
 8001088:	4804      	ldr	r0, [pc, #16]	@ (800109c <bl_write_mem_uart+0x5c0>)
 800108a:	f005 fdd5 	bl	8006c38 <HAL_UART_Transmit>
}
 800108e:	f507 67a6 	add.w	r7, r7, #1328	@ 0x530
 8001092:	46bd      	mov	sp, r7
 8001094:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001098:	0801625c 	.word	0x0801625c
 800109c:	24000294 	.word	0x24000294
 80010a0:	080200e0 	.word	0x080200e0
 80010a4:	080600e0 	.word	0x080600e0
 80010a8:	240001e4 	.word	0x240001e4
 80010ac:	080169f4 	.word	0x080169f4
 80010b0:	08016268 	.word	0x08016268
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	0801627c 	.word	0x0801627c
 80010bc:	08016234 	.word	0x08016234
 80010c0:	0801628c 	.word	0x0801628c

080010c4 <bl_del_mem>:
void bl_del_mem(uint8_t* buffer){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	@ 0x30
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    uint32_t command_len = buffer[0] + 1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	3301      	adds	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t host_crc = crc32(buffer, command_len - 4);
 80010d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010d6:	3b04      	subs	r3, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fb38 	bl	8000750 <crc32>
 80010e0:	62b8      	str	r0, [r7, #40]	@ 0x28
    uint32_t crc_recv = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
    memcpy(&crc_recv, &buffer[command_len - 4], 4);
 80010e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010e8:	3b04      	subs	r3, #4
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	613b      	str	r3, [r7, #16]
    if(host_crc == crc_recv){
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d171      	bne.n	80011de <bl_del_mem+0x11a>
    	uint32_t addr = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
    	memcpy(&addr, &buffer[2], 4);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3302      	adds	r3, #2
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]

        if (addr != APP1_ADDR_START && addr != APP2_ADDR_START) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4a3d      	ldr	r2, [pc, #244]	@ (8001200 <bl_del_mem+0x13c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00b      	beq.n	8001126 <bl_del_mem+0x62>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4a3c      	ldr	r2, [pc, #240]	@ (8001204 <bl_del_mem+0x140>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <bl_del_mem+0x62>
            HAL_UART_Transmit(&huart1, (uint8_t *)"INVALID ERASE ADDR\r\n", 21, HAL_MAX_DELAY);
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	2215      	movs	r2, #21
 800111c:	493a      	ldr	r1, [pc, #232]	@ (8001208 <bl_del_mem+0x144>)
 800111e:	483b      	ldr	r0, [pc, #236]	@ (800120c <bl_del_mem+0x148>)
 8001120:	f005 fd8a 	bl	8006c38 <HAL_UART_Transmit>
            return;
 8001124:	e069      	b.n	80011fa <bl_del_mem+0x136>
        }
        else if(addr == APP1_ADDR_START){
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4a35      	ldr	r2, [pc, #212]	@ (8001200 <bl_del_mem+0x13c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d129      	bne.n	8001182 <bl_del_mem+0xbe>
        	if(del_mem(FLASH_SECTOR_1, 2) == 1 && del_mem(FLASH_SECTOR_7, 1) == 1 ){
 800112e:	2102      	movs	r1, #2
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fc23 	bl	800097c <del_mem>
 8001136:	4603      	mov	r3, r0
 8001138:	2b01      	cmp	r3, #1
 800113a:	d114      	bne.n	8001166 <bl_del_mem+0xa2>
 800113c:	2101      	movs	r1, #1
 800113e:	2007      	movs	r0, #7
 8001140:	f7ff fc1c 	bl	800097c <del_mem>
 8001144:	4603      	mov	r3, r0
 8001146:	2b01      	cmp	r3, #1
 8001148:	d10d      	bne.n	8001166 <bl_del_mem+0xa2>
            	const char *msg = "DELETE APP 1 SUCCESSFULLY\r\n";
 800114a:	4b31      	ldr	r3, [pc, #196]	@ (8001210 <bl_del_mem+0x14c>)
 800114c:	61bb      	str	r3, [r7, #24]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800114e:	69b8      	ldr	r0, [r7, #24]
 8001150:	f7ff f8de 	bl	8000310 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	69b9      	ldr	r1, [r7, #24]
 800115e:	482b      	ldr	r0, [pc, #172]	@ (800120c <bl_del_mem+0x148>)
 8001160:	f005 fd6a 	bl	8006c38 <HAL_UART_Transmit>
            	return;
 8001164:	e049      	b.n	80011fa <bl_del_mem+0x136>
        	}
        	else{
            	const char *msg = "DELETE APP 1 FAILED\r\n";
 8001166:	4b2b      	ldr	r3, [pc, #172]	@ (8001214 <bl_del_mem+0x150>)
 8001168:	617b      	str	r3, [r7, #20]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff f8d0 	bl	8000310 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	6979      	ldr	r1, [r7, #20]
 800117a:	4824      	ldr	r0, [pc, #144]	@ (800120c <bl_del_mem+0x148>)
 800117c:	f005 fd5c 	bl	8006c38 <HAL_UART_Transmit>
            	return;
 8001180:	e03b      	b.n	80011fa <bl_del_mem+0x136>
        	}
        }
        else if(addr == APP2_ADDR_START){
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4a1f      	ldr	r2, [pc, #124]	@ (8001204 <bl_del_mem+0x140>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d137      	bne.n	80011fa <bl_del_mem+0x136>
        	if(del_mem(FLASH_SECTOR_3, 2) == 1 && del_mem(FLASH_SECTOR_7, 1) == 1){
 800118a:	2102      	movs	r1, #2
 800118c:	2003      	movs	r0, #3
 800118e:	f7ff fbf5 	bl	800097c <del_mem>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	d114      	bne.n	80011c2 <bl_del_mem+0xfe>
 8001198:	2101      	movs	r1, #1
 800119a:	2007      	movs	r0, #7
 800119c:	f7ff fbee 	bl	800097c <del_mem>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d10d      	bne.n	80011c2 <bl_del_mem+0xfe>
            	const char *msg = "DELETE APP 2 SUCCESSFULLY\r\n";
 80011a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <bl_del_mem+0x154>)
 80011a8:	623b      	str	r3, [r7, #32]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80011aa:	6a38      	ldr	r0, [r7, #32]
 80011ac:	f7ff f8b0 	bl	8000310 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	6a39      	ldr	r1, [r7, #32]
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <bl_del_mem+0x148>)
 80011bc:	f005 fd3c 	bl	8006c38 <HAL_UART_Transmit>
            	return;
 80011c0:	e01b      	b.n	80011fa <bl_del_mem+0x136>
        	}
        	else{
            	const char *msg = "DELETE DELETE APP2 FAILED\r\n";
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <bl_del_mem+0x158>)
 80011c4:	61fb      	str	r3, [r7, #28]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80011c6:	69f8      	ldr	r0, [r7, #28]
 80011c8:	f7ff f8a2 	bl	8000310 <strlen>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	69f9      	ldr	r1, [r7, #28]
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <bl_del_mem+0x148>)
 80011d8:	f005 fd2e 	bl	8006c38 <HAL_UART_Transmit>
            	return;
 80011dc:	e00d      	b.n	80011fa <bl_del_mem+0x136>
        	}

        }
    }
    else{
		const char *msg = "CRC failed\r\n";
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <bl_del_mem+0x15c>)
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80011e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011e4:	f7ff f894 	bl	8000310 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011f2:	4806      	ldr	r0, [pc, #24]	@ (800120c <bl_del_mem+0x148>)
 80011f4:	f005 fd20 	bl	8006c38 <HAL_UART_Transmit>
		return;
 80011f8:	bf00      	nop
    }
}
 80011fa:	3730      	adds	r7, #48	@ 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	08020000 	.word	0x08020000
 8001204:	08060000 	.word	0x08060000
 8001208:	08016298 	.word	0x08016298
 800120c:	24000294 	.word	0x24000294
 8001210:	080162b0 	.word	0x080162b0
 8001214:	080162cc 	.word	0x080162cc
 8001218:	080162e4 	.word	0x080162e4
 800121c:	08016300 	.word	0x08016300
 8001220:	080161a4 	.word	0x080161a4

08001224 <bl_check_mem_uart>:
void bl_check_mem_uart(uint8_t *buffer) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b0ae      	sub	sp, #184	@ 0xb8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	uint32_t command_len = buffer[0] + 1;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	uint32_t crc_host = crc32(buffer, command_len - 4);
 8001236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800123a:	3b04      	subs	r3, #4
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fa86 	bl	8000750 <crc32>
 8001244:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
	uint32_t crc_recv;
	memcpy(&crc_recv, &buffer[command_len - 4], 4);
 8001248:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800124c:	3b04      	subs	r3, #4
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4413      	add	r3, r2
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (crc_host != crc_recv) {
 8001258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800125c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001260:	429a      	cmp	r2, r3
 8001262:	d010      	beq.n	8001286 <bl_check_mem_uart+0x62>
		const char *msg = "CRC failed\r\n";
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <bl_check_mem_uart+0xac>)
 8001266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800126a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 800126e:	f7ff f84f 	bl	8000310 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29a      	uxth	r2, r3
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800127e:	4815      	ldr	r0, [pc, #84]	@ (80012d4 <bl_check_mem_uart+0xb0>)
 8001280:	f005 fcda 	bl	8006c38 <HAL_UART_Transmit>
 8001284:	e020      	b.n	80012c8 <bl_check_mem_uart+0xa4>
		return ;
	}
	char dummy[150];
	uint32_t result1 = cal_flash_used_app_1();
 8001286:	f7ff fb1d 	bl	80008c4 <cal_flash_used_app_1>
 800128a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	uint32_t result2 = cal_flash_used_app_2();
 800128e:	f7ff fb47 	bl	8000920 <cal_flash_used_app_2>
 8001292:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	sprintf(dummy, "Segment 1 of flash use %d / 256000 bytes and Segment 2 of flash use %d /256000 bytes. \n", result1 * 16, result2 * 16);
 8001296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800129a:	011a      	lsls	r2, r3, #4
 800129c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	f107 0008 	add.w	r0, r7, #8
 80012a6:	490c      	ldr	r1, [pc, #48]	@ (80012d8 <bl_check_mem_uart+0xb4>)
 80012a8:	f014 fb6e 	bl	8015988 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)dummy, strlen(dummy), HAL_MAX_DELAY);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f82d 	bl	8000310 <strlen>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f107 0108 	add.w	r1, r7, #8
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <bl_check_mem_uart+0xb0>)
 80012c4:	f005 fcb8 	bl	8006c38 <HAL_UART_Transmit>
}
 80012c8:	37b8      	adds	r7, #184	@ 0xb8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	080161a4 	.word	0x080161a4
 80012d4:	24000294 	.word	0x24000294
 80012d8:	0801631c 	.word	0x0801631c

080012dc <bl_verify_signature>:

void bl_verify_signature(uint8_t *buffer) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b0e6      	sub	sp, #408	@ 0x198
 80012e0:	af02      	add	r7, sp, #8
 80012e2:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80012e6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80012ea:	6018      	str	r0, [r3, #0]
    uint32_t command_len = buffer[0] + 1;
 80012ec:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80012f0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    uint32_t crc_recv = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    memcpy(&crc_recv, &buffer[command_len - 4], 4);
 8001304:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001308:	3b04      	subs	r3, #4
 800130a:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 800130e:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	4413      	add	r3, r2
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    uint32_t host_crc = crc32(buffer, command_len - 4);
 800131c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001320:	1f1a      	subs	r2, r3, #4
 8001322:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001326:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800132a:	4611      	mov	r1, r2
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	f7ff fa0f 	bl	8000750 <crc32>
 8001332:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180

    if (crc_recv != host_crc) {
 8001336:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800133a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800133e:	429a      	cmp	r2, r3
 8001340:	d007      	beq.n	8001352 <bl_verify_signature+0x76>
        HAL_UART_Transmit(&huart1, (uint8_t *)"CRC mismatch\r\n", 14, HAL_MAX_DELAY);
 8001342:	f04f 33ff 	mov.w	r3, #4294967295
 8001346:	220e      	movs	r2, #14
 8001348:	4998      	ldr	r1, [pc, #608]	@ (80015ac <bl_verify_signature+0x2d0>)
 800134a:	4899      	ldr	r0, [pc, #612]	@ (80015b0 <bl_verify_signature+0x2d4>)
 800134c:	f005 fc74 	bl	8006c38 <HAL_UART_Transmit>
        return;
 8001350:	e128      	b.n	80015a4 <bl_verify_signature+0x2c8>
    }

    uint8_t *payload = &buffer[2];  // Skip LTF
 8001352:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001356:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3302      	adds	r3, #2
 800135e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    uint32_t user_app_address = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    memcpy(&user_app_address, &payload[0], 4);
 8001368:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    uint32_t firmware_len = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    memcpy(&firmware_len, &payload[4], 4);
 8001378:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800137c:	3304      	adds	r3, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

    uint8_t *host_hash = &payload[8];          // SHA256 (32 bytes)
 8001384:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001388:	3308      	adds	r3, #8
 800138a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    uint8_t *sig = &payload[8 + 32];           // ECC Signature (64 bytes)
 800138e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001392:	3328      	adds	r3, #40	@ 0x28
 8001394:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    uint8_t calc_hash[32];
    mbedtls_sha256_context sha_ctx;
    mbedtls_sha256_init(&sha_ctx);
 8001398:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800139c:	4618      	mov	r0, r3
 800139e:	f012 fa29 	bl	80137f4 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret(&sha_ctx, 0); // 0 = SHA256
 80013a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f012 fa41 	bl	8013830 <mbedtls_sha256_starts_ret>
    user_app_address += 224;
 80013ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80013b2:	33e0      	adds	r3, #224	@ 0xe0
 80013b4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    for (uint32_t i = 0; i < firmware_len; i++) {
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80013be:	e017      	b.n	80013f0 <bl_verify_signature+0x114>
        uint8_t byte = *(uint8_t *)(user_app_address + i);
 80013c0:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80013c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80013c8:	4413      	add	r3, r2
 80013ca:	781a      	ldrb	r2, [r3, #0]
 80013cc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80013d0:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 80013d4:	701a      	strb	r2, [r3, #0]
        mbedtls_sha256_update_ret(&sha_ctx, &byte, 1);
 80013d6:	f107 010f 	add.w	r1, r7, #15
 80013da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013de:	2201      	movs	r2, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f013 ffd9 	bl	8015398 <mbedtls_sha256_update_ret>
    for (uint32_t i = 0; i < firmware_len; i++) {
 80013e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80013ea:	3301      	adds	r3, #1
 80013ec:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80013f0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80013f4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d3e1      	bcc.n	80013c0 <bl_verify_signature+0xe4>
    }
    mbedtls_sha256_finish_ret(&sha_ctx, calc_hash);
 80013fc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001400:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f014 f83b 	bl	8015482 <mbedtls_sha256_finish_ret>
    mbedtls_sha256_free(&sha_ctx);
 800140c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001410:	4618      	mov	r0, r3
 8001412:	f012 f9fc 	bl	801380e <mbedtls_sha256_free>

    if (memcmp(host_hash, calc_hash, 32) != 0) {
 8001416:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800141a:	2220      	movs	r2, #32
 800141c:	4619      	mov	r1, r3
 800141e:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001422:	f014 fad3 	bl	80159cc <memcmp>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <bl_verify_signature+0x160>
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ SHA256 mismatch\r\n", 21, HAL_MAX_DELAY);
 800142c:	f04f 33ff 	mov.w	r3, #4294967295
 8001430:	2215      	movs	r2, #21
 8001432:	4960      	ldr	r1, [pc, #384]	@ (80015b4 <bl_verify_signature+0x2d8>)
 8001434:	485e      	ldr	r0, [pc, #376]	@ (80015b0 <bl_verify_signature+0x2d4>)
 8001436:	f005 fbff 	bl	8006c38 <HAL_UART_Transmit>
        return;
 800143a:	e0b3      	b.n	80015a4 <bl_verify_signature+0x2c8>
    }
    mbedtls_ecdsa_context ctx;
    mbedtls_ecdsa_init(&ctx);
 800143c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001440:	4618      	mov	r0, r3
 8001442:	f00c fd95 	bl	800df70 <mbedtls_ecdsa_init>
    mbedtls_ecp_group_load(&ctx.grp, MBEDTLS_ECP_DP_SECP256R1);
 8001446:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800144a:	2103      	movs	r1, #3
 800144c:	4618      	mov	r0, r3
 800144e:	f00f ffaf 	bl	80113b0 <mbedtls_ecp_group_load>
    mbedtls_mpi_read_binary(&ctx.Q.X, public_key, 32);
 8001452:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001456:	3388      	adds	r3, #136	@ 0x88
 8001458:	2220      	movs	r2, #32
 800145a:	4957      	ldr	r1, [pc, #348]	@ (80015b8 <bl_verify_signature+0x2dc>)
 800145c:	4618      	mov	r0, r3
 800145e:	f009 fbd1 	bl	800ac04 <mbedtls_mpi_read_binary>
    mbedtls_mpi_read_binary(&ctx.Q.Y, public_key + 32, 32);
 8001462:	4956      	ldr	r1, [pc, #344]	@ (80015bc <bl_verify_signature+0x2e0>)
 8001464:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001468:	3394      	adds	r3, #148	@ 0x94
 800146a:	2220      	movs	r2, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f009 fbc9 	bl	800ac04 <mbedtls_mpi_read_binary>
    mbedtls_mpi_lset(&ctx.Q.Z, 1);
 8001472:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001476:	33a0      	adds	r3, #160	@ 0xa0
 8001478:	2101      	movs	r1, #1
 800147a:	4618      	mov	r0, r3
 800147c:	f009 f92e 	bl	800a6dc <mbedtls_mpi_lset>
    mbedtls_mpi r, s;
    mbedtls_mpi_init(&r); mbedtls_mpi_init(&s);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4618      	mov	r0, r3
 8001486:	f008 fee8 	bl	800a25a <mbedtls_mpi_init>
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	4618      	mov	r0, r3
 8001490:	f008 fee3 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_read_binary(&r, sig, 32);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	2220      	movs	r2, #32
 800149a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800149e:	4618      	mov	r0, r3
 80014a0:	f009 fbb0 	bl	800ac04 <mbedtls_mpi_read_binary>
    mbedtls_mpi_read_binary(&s, sig + 32, 32);
 80014a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80014a8:	f103 0120 	add.w	r1, r3, #32
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	2220      	movs	r2, #32
 80014b2:	4618      	mov	r0, r3
 80014b4:	f009 fba6 	bl	800ac04 <mbedtls_mpi_read_binary>

    int ret = mbedtls_ecdsa_verify(&ctx.grp, calc_hash, 32, &ctx.Q, &r, &s);
 80014b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014bc:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 80014c0:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80014c4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	2220      	movs	r2, #32
 80014d8:	f00c fd32 	bl	800df40 <mbedtls_ecdsa_verify>
 80014dc:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170

    mbedtls_mpi_free(&r); mbedtls_mpi_free(&s);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4618      	mov	r0, r3
 80014e6:	f008 fecb 	bl	800a280 <mbedtls_mpi_free>
 80014ea:	f107 0310 	add.w	r3, r7, #16
 80014ee:	4618      	mov	r0, r3
 80014f0:	f008 fec6 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_ecdsa_free(&ctx);
 80014f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f8:	4618      	mov	r0, r3
 80014fa:	f00c fd44 	bl	800df86 <mbedtls_ecdsa_free>

    if (ret != 0) {
 80014fe:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <bl_verify_signature+0x23a>
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Signature and Integrity FAIL\r\n", 33, HAL_MAX_DELAY);
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	2221      	movs	r2, #33	@ 0x21
 800150c:	492c      	ldr	r1, [pc, #176]	@ (80015c0 <bl_verify_signature+0x2e4>)
 800150e:	4828      	ldr	r0, [pc, #160]	@ (80015b0 <bl_verify_signature+0x2d4>)
 8001510:	f005 fb92 	bl	8006c38 <HAL_UART_Transmit>
        return;
 8001514:	e046      	b.n	80015a4 <bl_verify_signature+0x2c8>
    }

    HAL_FLASH_Unlock();
 8001516:	f001 ff01 	bl	800331c <HAL_FLASH_Unlock>

    uint32_t sig_flag_addr = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    uint32_t status_flag_addr = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    if (user_app_address == APP1_ADDR_START + 224) {
 8001526:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800152a:	4a26      	ldr	r2, [pc, #152]	@ (80015c4 <bl_verify_signature+0x2e8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d106      	bne.n	800153e <bl_verify_signature+0x262>
        sig_flag_addr = SIGNATURE_FLAG_APP1;
 8001530:	4b25      	ldr	r3, [pc, #148]	@ (80015c8 <bl_verify_signature+0x2ec>)
 8001532:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
        status_flag_addr = STATUS_FLAG_APP1;
 8001536:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <bl_verify_signature+0x2f0>)
 8001538:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800153c:	e015      	b.n	800156a <bl_verify_signature+0x28e>
    } else if (user_app_address == APP2_ADDR_START + 224) {
 800153e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001542:	4a23      	ldr	r2, [pc, #140]	@ (80015d0 <bl_verify_signature+0x2f4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d106      	bne.n	8001556 <bl_verify_signature+0x27a>
        sig_flag_addr = SIGNATURE_FLAG_APP2;
 8001548:	4b22      	ldr	r3, [pc, #136]	@ (80015d4 <bl_verify_signature+0x2f8>)
 800154a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
        status_flag_addr = STATUS_FLAG_APP2;
 800154e:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <bl_verify_signature+0x2fc>)
 8001550:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001554:	e009      	b.n	800156a <bl_verify_signature+0x28e>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t *)"Unknown APP address\r\n", 24, HAL_MAX_DELAY);
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	2218      	movs	r2, #24
 800155c:	491f      	ldr	r1, [pc, #124]	@ (80015dc <bl_verify_signature+0x300>)
 800155e:	4814      	ldr	r0, [pc, #80]	@ (80015b0 <bl_verify_signature+0x2d4>)
 8001560:	f005 fb6a 	bl	8006c38 <HAL_UART_Transmit>
        HAL_FLASH_Lock();
 8001564:	f001 fefc 	bl	8003360 <HAL_FLASH_Lock>
        return;
 8001568:	e01c      	b.n	80015a4 <bl_verify_signature+0x2c8>
    }

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, sig_flag_addr, (uint32_t)expected_magic_number) != HAL_OK) {
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <bl_verify_signature+0x304>)
 800156c:	461a      	mov	r2, r3
 800156e:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8001572:	2001      	movs	r0, #1
 8001574:	f001 fe62 	bl	800323c <HAL_FLASH_Program>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <bl_verify_signature+0x2b6>
        HAL_UART_Transmit(&huart1, (uint8_t *)"Failed to write flags\r\n", 26, HAL_MAX_DELAY);
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	221a      	movs	r2, #26
 8001584:	4917      	ldr	r1, [pc, #92]	@ (80015e4 <bl_verify_signature+0x308>)
 8001586:	480a      	ldr	r0, [pc, #40]	@ (80015b0 <bl_verify_signature+0x2d4>)
 8001588:	f005 fb56 	bl	8006c38 <HAL_UART_Transmit>
        HAL_FLASH_Lock();
 800158c:	f001 fee8 	bl	8003360 <HAL_FLASH_Lock>
        return;
 8001590:	e008      	b.n	80015a4 <bl_verify_signature+0x2c8>
    }

    HAL_FLASH_Lock();
 8001592:	f001 fee5 	bl	8003360 <HAL_FLASH_Lock>

    HAL_UART_Transmit(&huart1, (uint8_t *)"Signature and Integrity OK\r\n", 31, HAL_MAX_DELAY);
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	221f      	movs	r2, #31
 800159c:	4912      	ldr	r1, [pc, #72]	@ (80015e8 <bl_verify_signature+0x30c>)
 800159e:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <bl_verify_signature+0x2d4>)
 80015a0:	f005 fb4a 	bl	8006c38 <HAL_UART_Transmit>
}
 80015a4:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	08016374 	.word	0x08016374
 80015b0:	24000294 	.word	0x24000294
 80015b4:	08016384 	.word	0x08016384
 80015b8:	080169a4 	.word	0x080169a4
 80015bc:	080169c4 	.word	0x080169c4
 80015c0:	0801639c 	.word	0x0801639c
 80015c4:	080200e0 	.word	0x080200e0
 80015c8:	080e0000 	.word	0x080e0000
 80015cc:	080c0000 	.word	0x080c0000
 80015d0:	080600e0 	.word	0x080600e0
 80015d4:	080e0020 	.word	0x080e0020
 80015d8:	080c0020 	.word	0x080c0020
 80015dc:	080163c0 	.word	0x080163c0
 80015e0:	24000000 	.word	0x24000000
 80015e4:	080163d8 	.word	0x080163d8
 80015e8:	080163f0 	.word	0x080163f0

080015ec <bl_check_version>:
void bl_check_version(uint8_t* buffer){
 80015ec:	b5b0      	push	{r4, r5, r7, lr}
 80015ee:	b0ac      	sub	sp, #176	@ 0xb0
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
    uint32_t len = buffer[0] + 1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    uint32_t crc_host = crc32(buffer, len - 4);
 80015fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001602:	3b04      	subs	r3, #4
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff f8a2 	bl	8000750 <crc32>
 800160c:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    uint32_t crc_recv = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    memcpy(&crc_recv, &buffer[len - 4], 4);
 8001616:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800161a:	3b04      	subs	r3, #4
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (crc_host == crc_recv) {
 8001626:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800162a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800162e:	429a      	cmp	r2, r3
 8001630:	d152      	bne.n	80016d8 <bl_check_version+0xec>
        uint32_t dummy_flag = SAVED_VER_ADDR;
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <bl_check_version+0x114>)
 8001634:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        uint64_t temp;
        char msg[128];
        uint8_t first = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
        HAL_UART_Transmit(&huart1, (uint8_t *)"{ \"versions\": [", 15, HAL_MAX_DELAY);
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	220f      	movs	r2, #15
 8001644:	492f      	ldr	r1, [pc, #188]	@ (8001704 <bl_check_version+0x118>)
 8001646:	4830      	ldr	r0, [pc, #192]	@ (8001708 <bl_check_version+0x11c>)
 8001648:	f005 faf6 	bl	8006c38 <HAL_UART_Transmit>
        while (1) {
            memcpy(&temp, (void*)dummy_flag, sizeof(temp));
 800164c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001650:	681c      	ldr	r4, [r3, #0]
 8001652:	685d      	ldr	r5, [r3, #4]
 8001654:	4622      	mov	r2, r4
 8001656:	462b      	mov	r3, r5
 8001658:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
            if (temp == 0xFFFFFFFFFFFFFFFFULL) break;
 800165c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001664:	bf08      	it	eq
 8001666:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800166a:	d107      	bne.n	800167c <bl_check_version+0x90>
            sprintf(msg, "\"0x%08lX\"", version);
            HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
            first = 0;
            dummy_flag += 32;
        }
        HAL_UART_Transmit(&huart1, (uint8_t *)"] }\r\n", 5, HAL_MAX_DELAY);
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
 8001670:	2205      	movs	r2, #5
 8001672:	4926      	ldr	r1, [pc, #152]	@ (800170c <bl_check_version+0x120>)
 8001674:	4824      	ldr	r0, [pc, #144]	@ (8001708 <bl_check_version+0x11c>)
 8001676:	f005 fadf 	bl	8006c38 <HAL_UART_Transmit>

    } else {
        const char *msg = "❌ CRC failed\r\n";
        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 800167a:	e03d      	b.n	80016f8 <bl_check_version+0x10c>
            memcpy(&version, &temp, 4);
 800167c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001680:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            if (!first) HAL_UART_Transmit(&huart1, (uint8_t *)", ", 2, HAL_MAX_DELAY);
 8001684:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001688:	2b00      	cmp	r3, #0
 800168a:	d106      	bne.n	800169a <bl_check_version+0xae>
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	2202      	movs	r2, #2
 8001692:	491f      	ldr	r1, [pc, #124]	@ (8001710 <bl_check_version+0x124>)
 8001694:	481c      	ldr	r0, [pc, #112]	@ (8001708 <bl_check_version+0x11c>)
 8001696:	f005 facf 	bl	8006c38 <HAL_UART_Transmit>
            sprintf(msg, "\"0x%08lX\"", version);
 800169a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	491c      	ldr	r1, [pc, #112]	@ (8001714 <bl_check_version+0x128>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f014 f96f 	bl	8015988 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fe2e 	bl	8000310 <strlen>
 80016b4:	4603      	mov	r3, r0
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	f107 010c 	add.w	r1, r7, #12
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295
 80016c0:	4811      	ldr	r0, [pc, #68]	@ (8001708 <bl_check_version+0x11c>)
 80016c2:	f005 fab9 	bl	8006c38 <HAL_UART_Transmit>
            first = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
            dummy_flag += 32;
 80016cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016d0:	3320      	adds	r3, #32
 80016d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while (1) {
 80016d6:	e7b9      	b.n	800164c <bl_check_version+0x60>
        const char *msg = "❌ CRC failed\r\n";
 80016d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001718 <bl_check_version+0x12c>)
 80016da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80016de:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80016e2:	f7fe fe15 	bl	8000310 <strlen>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <bl_check_version+0x11c>)
 80016f4:	f005 faa0 	bl	8006c38 <HAL_UART_Transmit>
}
 80016f8:	bf00      	nop
 80016fa:	37b0      	adds	r7, #176	@ 0xb0
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001700:	080174a0 	.word	0x080174a0
 8001704:	08016410 	.word	0x08016410
 8001708:	24000294 	.word	0x24000294
 800170c:	08016420 	.word	0x08016420
 8001710:	08016428 	.word	0x08016428
 8001714:	0801642c 	.word	0x0801642c
 8001718:	08016438 	.word	0x08016438

0800171c <jump_to_user_code_uart>:
void jump_to_user_code_uart(uint32_t addr){
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001724:	b672      	cpsid	i
}
 8001726:	bf00      	nop
	__disable_irq();
	uint32_t app_msp = *(volatile uint32_t* )addr;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	617b      	str	r3, [r7, #20]
	uint32_t app_reset_handler = *(volatile uint32_t* )(addr + 4);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3304      	adds	r3, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	f383 8808 	msr	MSP, r3
}
 8001740:	bf00      	nop
   __set_MSP(app_msp);
   SCB->VTOR = addr;
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <jump_to_user_code_uart+0x3c>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6093      	str	r3, [r2, #8]
   void (*Jump_To_APP)(void) = (void (*)(void))app_reset_handler;
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	60fb      	str	r3, [r7, #12]
   Jump_To_APP();
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4798      	blx	r3

}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <check_ECC_Flag>:
int check_ECC_Flag(uint32_t addr){
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	if(addr == 0x080200E0){
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a0f      	ldr	r2, [pc, #60]	@ (80017a4 <check_ECC_Flag+0x48>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d108      	bne.n	800177e <check_ECC_Flag+0x22>
		if(check_signature_magic_number_app_1()){
 800176c:	f7ff f856 	bl	800081c <check_signature_magic_number_app_1>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <check_ECC_Flag+0x1e>
			return 1;
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <check_ECC_Flag+0x3e>
		}
		else{
			return 0;
 800177a:	2300      	movs	r3, #0
 800177c:	e00d      	b.n	800179a <check_ECC_Flag+0x3e>
		}
	}
	else if(addr == 0x080600E0){
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <check_ECC_Flag+0x4c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d108      	bne.n	8001798 <check_ECC_Flag+0x3c>
		if(check_signature_magic_number_app_2()){
 8001786:	f7ff f873 	bl	8000870 <check_signature_magic_number_app_2>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <check_ECC_Flag+0x38>
			return 1;
 8001790:	2301      	movs	r3, #1
 8001792:	e002      	b.n	800179a <check_ECC_Flag+0x3e>
		}
		else{
			return 0;
 8001794:	2300      	movs	r3, #0
 8001796:	e000      	b.n	800179a <check_ECC_Flag+0x3e>
		}
	}
	return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	080200e0 	.word	0x080200e0
 80017a8:	080600e0 	.word	0x080600e0

080017ac <is_run_ok_flag_set>:
int is_fail_counter_exceeded(uint32_t status_addr) {
	FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
    return (status->retry_counter > MAX_FAILED_ALLOWED);
}
int is_run_ok_flag_set(uint32_t status_addr) {
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	60fb      	str	r3, [r7, #12]
    return (status->run_ok_flag == RUN_OK_VALUE);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <is_run_ok_flag_set+0x28>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	bf0c      	ite	eq
 80017c2:	2301      	moveq	r3, #1
 80017c4:	2300      	movne	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	deadbeef 	.word	0xdeadbeef

080017d8 <get_fail_counter>:
uint8_t get_fail_counter(uint32_t status_addr) {
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b0a3      	sub	sp, #140	@ 0x8c
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80017e4:	3b80      	subs	r3, #128	@ 0x80
 80017e6:	331f      	adds	r3, #31
 80017e8:	095b      	lsrs	r3, r3, #5
 80017ea:	015c      	lsls	r4, r3, #5
    FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    //del_mem(FLASH_SECTOR_6, 1);
    if (status->retry_counter == 0xFFFFFFFF){
 80017f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fc:	d121      	bne.n	8001842 <get_fail_counter+0x6a>
        FirmwareUserStatus new_status;
        new_status.run_ok_flag = 0xFFFFFFFF;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	6423      	str	r3, [r4, #64]	@ 0x40
        new_status.retry_counter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	6463      	str	r3, [r4, #68]	@ 0x44
        uint64_t status_block[8] __attribute__((aligned(32))); // 64 bytes
        memset(status_block, 0xFF, sizeof(status_block));
 8001808:	2240      	movs	r2, #64	@ 0x40
 800180a:	21ff      	movs	r1, #255	@ 0xff
 800180c:	4620      	mov	r0, r4
 800180e:	f014 f907 	bl	8015a20 <memset>
        memcpy(status_block, &new_status, 8); // chỉ lưu version
 8001812:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
 8001816:	e9c4 2300 	strd	r2, r3, [r4]
        HAL_FLASH_Unlock();
 800181a:	f001 fd7f 	bl	800331c <HAL_FLASH_Unlock>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, status_addr, (uint32_t)&status_block) != HAL_OK) {
 800181e:	4623      	mov	r3, r4
 8001820:	461a      	mov	r2, r3
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	2001      	movs	r0, #1
 8001826:	f001 fd09 	bl	800323c <HAL_FLASH_Program>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <get_fail_counter+0x66>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ 8888Failed to write status flags\r\n", 26, HAL_MAX_DELAY);
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	221a      	movs	r2, #26
 8001836:	4907      	ldr	r1, [pc, #28]	@ (8001854 <get_fail_counter+0x7c>)
 8001838:	4807      	ldr	r0, [pc, #28]	@ (8001858 <get_fail_counter+0x80>)
 800183a:	f005 f9fd 	bl	8006c38 <HAL_UART_Transmit>

        }
        HAL_FLASH_Lock();
 800183e:	f001 fd8f 	bl	8003360 <HAL_FLASH_Lock>
    }
    return status->retry_counter;
 8001842:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	b2db      	uxtb	r3, r3
}
 800184a:	4618      	mov	r0, r3
 800184c:	378c      	adds	r7, #140	@ 0x8c
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	0801644c 	.word	0x0801644c
 8001858:	24000294 	.word	0x24000294

0800185c <increase_fail_counter>:
void increase_fail_counter(uint32_t status_addr){
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	b0a3      	sub	sp, #140	@ 0x8c
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001868:	3b80      	subs	r3, #128	@ 0x80
 800186a:	331f      	adds	r3, #31
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	015e      	lsls	r6, r3, #5

	FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	del_mem(FLASH_SECTOR_6, 1); //delete before change retry_counter = 1
 8001876:	2101      	movs	r1, #1
 8001878:	2006      	movs	r0, #6
 800187a:	f7ff f87f 	bl	800097c <del_mem>
    if (status->retry_counter == 0xFFFFFFFF){
 800187e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d126      	bne.n	80018d8 <increase_fail_counter+0x7c>
        FirmwareUserStatus new_status;
        new_status.run_ok_flag = 0xFFFFFFFF;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	6433      	str	r3, [r6, #64]	@ 0x40
        new_status.retry_counter = 1;
 8001890:	2301      	movs	r3, #1
 8001892:	6473      	str	r3, [r6, #68]	@ 0x44
        uint64_t status_block[8] __attribute__((aligned(32))); // 64 bytes
        memset(status_block, 0xFF, sizeof(status_block));
 8001894:	2240      	movs	r2, #64	@ 0x40
 8001896:	21ff      	movs	r1, #255	@ 0xff
 8001898:	4630      	mov	r0, r6
 800189a:	f014 f8c1 	bl	8015a20 <memset>
        memcpy(status_block, &new_status, sizeof(FirmwareUserStatus)); // chỉ lưu version
 800189e:	4635      	mov	r5, r6
 80018a0:	f106 0440 	add.w	r4, r6, #64	@ 0x40
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018ac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        HAL_FLASH_Unlock();
 80018b0:	f001 fd34 	bl	800331c <HAL_FLASH_Unlock>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, status_addr, (uint32_t)&status_block) != HAL_OK) {
 80018b4:	4633      	mov	r3, r6
 80018b6:	461a      	mov	r2, r3
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	2001      	movs	r0, #1
 80018bc:	f001 fcbe 	bl	800323c <HAL_FLASH_Program>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d006      	beq.n	80018d4 <increase_fail_counter+0x78>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ 9999Failed to write status flags\r\n", 26, HAL_MAX_DELAY);
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	221a      	movs	r2, #26
 80018cc:	4904      	ldr	r1, [pc, #16]	@ (80018e0 <increase_fail_counter+0x84>)
 80018ce:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <increase_fail_counter+0x88>)
 80018d0:	f005 f9b2 	bl	8006c38 <HAL_UART_Transmit>

        }
        HAL_FLASH_Lock();
 80018d4:	f001 fd44 	bl	8003360 <HAL_FLASH_Lock>
    }
}
 80018d8:	bf00      	nop
 80018da:	378c      	adds	r7, #140	@ 0x8c
 80018dc:	46bd      	mov	sp, r7
 80018de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e0:	08016474 	.word	0x08016474
 80018e4:	24000294 	.word	0x24000294

080018e8 <count_version_in_flash>:
int count_version_in_flash(){
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
    int count = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
    uint32_t *temp_addr_flash = (uint32_t *)SAVED_VER_ADDR;
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <count_version_in_flash+0x34>)
 80018f4:	603b      	str	r3, [r7, #0]

    while (*temp_addr_flash != 0xFFFFFFFF) {
 80018f6:	e005      	b.n	8001904 <count_version_in_flash+0x1c>
        count++;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3301      	adds	r3, #1
 80018fc:	607b      	str	r3, [r7, #4]
        temp_addr_flash += 8;  // Tăng theo đơn vị 4 bytes
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	3320      	adds	r3, #32
 8001902:	603b      	str	r3, [r7, #0]
    while (*temp_addr_flash != 0xFFFFFFFF) {
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190c:	d1f4      	bne.n	80018f8 <count_version_in_flash+0x10>
    }
    return count;
 800190e:	687b      	ldr	r3, [r7, #4]
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	080174a0 	.word	0x080174a0

08001920 <check_condition_jump_to_code_uart>:
void check_condition_jump_to_code_uart() {
 8001920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001924:	b08d      	sub	sp, #52	@ 0x34
 8001926:	af00      	add	r7, sp, #0
 8001928:	466b      	mov	r3, sp
 800192a:	461e      	mov	r6, r3
    FirmwareMetadata *F = (FirmwareMetadata*)SAVED_VER_ADDR;
 800192c:	4b67      	ldr	r3, [pc, #412]	@ (8001acc <check_condition_jump_to_code_uart+0x1ac>)
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int count_max = count_version_in_flash();
 8001930:	f7ff ffda 	bl	80018e8 <count_version_in_flash>
 8001934:	6238      	str	r0, [r7, #32]
    FirmwareMetadata valid_firmware[count_max];
 8001936:	6a39      	ldr	r1, [r7, #32]
 8001938:	1e4b      	subs	r3, r1, #1
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	460a      	mov	r2, r1
 800193e:	2300      	movs	r3, #0
 8001940:	4690      	mov	r8, r2
 8001942:	4699      	mov	r9, r3
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8001950:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8001954:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8001958:	460a      	mov	r2, r1
 800195a:	2300      	movs	r3, #0
 800195c:	4614      	mov	r4, r2
 800195e:	461d      	mov	r5, r3
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	022b      	lsls	r3, r5, #8
 800196a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800196e:	0222      	lsls	r2, r4, #8
 8001970:	460b      	mov	r3, r1
 8001972:	015b      	lsls	r3, r3, #5
 8001974:	3318      	adds	r3, #24
 8001976:	3307      	adds	r3, #7
 8001978:	08db      	lsrs	r3, r3, #3
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	ebad 0d03 	sub.w	sp, sp, r3
 8001980:	466b      	mov	r3, sp
 8001982:	331f      	adds	r3, #31
 8001984:	095b      	lsrs	r3, r3, #5
 8001986:	015b      	lsls	r3, r3, #5
 8001988:	61bb      	str	r3, [r7, #24]
    int count  = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Collect valid firmware
    while (F->version != 0xFFFFFFFF && F->address != 0xFFFFFFFF && count < count_max) {
 800198e:	e011      	b.n	80019b4 <check_condition_jump_to_code_uart+0x94>
        valid_firmware[count++] = *F++;
 8001990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001992:	f102 0320 	add.w	r3, r2, #32
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199a:	1c59      	adds	r1, r3, #1
 800199c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800199e:	69b9      	ldr	r1, [r7, #24]
 80019a0:	015b      	lsls	r3, r3, #5
 80019a2:	440b      	add	r3, r1
 80019a4:	461c      	mov	r4, r3
 80019a6:	4615      	mov	r5, r2
 80019a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (F->version != 0xFFFFFFFF && F->address != 0xFFFFFFFF && count < count_max) {
 80019b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d008      	beq.n	80019d0 <check_condition_jump_to_code_uart+0xb0>
 80019be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c6:	d003      	beq.n	80019d0 <check_condition_jump_to_code_uart+0xb0>
 80019c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbdf      	blt.n	8001990 <check_condition_jump_to_code_uart+0x70>
    }
    if (count == 0) {
 80019d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d107      	bne.n	80019e6 <check_condition_jump_to_code_uart+0xc6>
        HAL_UART_Transmit(&huart1, (uint8_t *)"No valid firmware found\r\n", 28, HAL_MAX_DELAY);
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	221c      	movs	r2, #28
 80019dc:	493c      	ldr	r1, [pc, #240]	@ (8001ad0 <check_condition_jump_to_code_uart+0x1b0>)
 80019de:	483d      	ldr	r0, [pc, #244]	@ (8001ad4 <check_condition_jump_to_code_uart+0x1b4>)
 80019e0:	f005 f92a 	bl	8006c38 <HAL_UART_Transmit>
        return;
 80019e4:	e06d      	b.n	8001ac2 <check_condition_jump_to_code_uart+0x1a2>
    }
    uint32_t stay_in_bl_app =  *(uint32_t *)USER_TO_BL;
 80019e6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad8 <check_condition_jump_to_code_uart+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	617b      	str	r3, [r7, #20]
	if(stay_in_bl_app == 0xDEADBEEF){
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	4a3b      	ldr	r2, [pc, #236]	@ (8001adc <check_condition_jump_to_code_uart+0x1bc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d065      	beq.n	8001ac0 <check_condition_jump_to_code_uart+0x1a0>
//            return;
//        } else {
//            continue;
//        }
//    }
	uint32_t newest_addr = valid_firmware[count - 1].address;
 80019f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f6:	3b01      	subs	r3, #1
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	015b      	lsls	r3, r3, #5
 80019fc:	4413      	add	r3, r2
 80019fe:	3304      	adds	r3, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	613b      	str	r3, [r7, #16]
	for (int i = count - 1; i >= 0; i--) {
 8001a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a06:	3b01      	subs	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a0a:	e04d      	b.n	8001aa8 <check_condition_jump_to_code_uart+0x188>
	    uint32_t addr = valid_firmware[i].address;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a10:	015b      	lsls	r3, r3, #5
 8001a12:	4413      	add	r3, r2
 8001a14:	3304      	adds	r3, #4
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]
	    uint32_t status_addr = STATUS_ADDR_APP1_FLAG; // bạn nên sửa theo addr nếu muốn hỗ trợ cả APP2
 8001a1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <check_condition_jump_to_code_uart+0x1c0>)
 8001a1c:	60bb      	str	r3, [r7, #8]
	    if (addr == newest_addr && i != count - 1) continue;
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d104      	bne.n	8001a30 <check_condition_jump_to_code_uart+0x110>
 8001a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d135      	bne.n	8001a9c <check_condition_jump_to_code_uart+0x17c>

	    if (!check_ECC_Flag(addr)) continue;
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7ff fe93 	bl	800175c <check_ECC_Flag>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d031      	beq.n	8001aa0 <check_condition_jump_to_code_uart+0x180>

	    // Nếu là firmware mới nhất
	    if (i == count - 1) {
 8001a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d11f      	bne.n	8001a86 <check_condition_jump_to_code_uart+0x166>
	        uint8_t fail_counter = get_fail_counter(status_addr);
 8001a46:	68b8      	ldr	r0, [r7, #8]
 8001a48:	f7ff fec6 	bl	80017d8 <get_fail_counter>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
	        if (fail_counter == 0) {
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10d      	bne.n	8001a72 <check_condition_jump_to_code_uart+0x152>
	            HAL_UART_Transmit(&huart1, (uint8_t *)"First run - increasing fail counter\r\n", 41, HAL_MAX_DELAY);
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	2229      	movs	r2, #41	@ 0x29
 8001a5c:	4921      	ldr	r1, [pc, #132]	@ (8001ae4 <check_condition_jump_to_code_uart+0x1c4>)
 8001a5e:	481d      	ldr	r0, [pc, #116]	@ (8001ad4 <check_condition_jump_to_code_uart+0x1b4>)
 8001a60:	f005 f8ea 	bl	8006c38 <HAL_UART_Transmit>
	            increase_fail_counter(status_addr);
 8001a64:	68b8      	ldr	r0, [r7, #8]
 8001a66:	f7ff fef9 	bl	800185c <increase_fail_counter>
	            jump_to_user_code_uart(addr);
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff fe56 	bl	800171c <jump_to_user_code_uart>
	            return;
 8001a70:	e027      	b.n	8001ac2 <check_condition_jump_to_code_uart+0x1a2>
	        } else if (is_run_ok_flag_set(status_addr)) {
 8001a72:	68b8      	ldr	r0, [r7, #8]
 8001a74:	f7ff fe9a 	bl	80017ac <is_run_ok_flag_set>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d011      	beq.n	8001aa2 <check_condition_jump_to_code_uart+0x182>
	            jump_to_user_code_uart(addr);
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f7ff fe4c 	bl	800171c <jump_to_user_code_uart>
	            return;
 8001a84:	e01d      	b.n	8001ac2 <check_condition_jump_to_code_uart+0x1a2>
	        }
	    } else {
	        // Firmware cũ hơn, không cần check run_ok
	        HAL_UART_Transmit(&huart1, (uint8_t *)"Rolling back to previous firmware\r\n", 36, HAL_MAX_DELAY);
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	2224      	movs	r2, #36	@ 0x24
 8001a8c:	4916      	ldr	r1, [pc, #88]	@ (8001ae8 <check_condition_jump_to_code_uart+0x1c8>)
 8001a8e:	4811      	ldr	r0, [pc, #68]	@ (8001ad4 <check_condition_jump_to_code_uart+0x1b4>)
 8001a90:	f005 f8d2 	bl	8006c38 <HAL_UART_Transmit>
	        jump_to_user_code_uart(addr);
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff fe41 	bl	800171c <jump_to_user_code_uart>
	        return;
 8001a9a:	e012      	b.n	8001ac2 <check_condition_jump_to_code_uart+0x1a2>
	    if (addr == newest_addr && i != count - 1) continue;
 8001a9c:	bf00      	nop
 8001a9e:	e000      	b.n	8001aa2 <check_condition_jump_to_code_uart+0x182>
	    if (!check_ECC_Flag(addr)) continue;
 8001aa0:	bf00      	nop
	for (int i = count - 1; i >= 0; i--) {
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	daae      	bge.n	8001a0c <check_condition_jump_to_code_uart+0xec>
	    }
	}
    HAL_UART_Transmit(&huart1, (uint8_t *)"All firmwares failed, staying in bootloader\r\n", 48, HAL_MAX_DELAY);
 8001aae:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab2:	2230      	movs	r2, #48	@ 0x30
 8001ab4:	490d      	ldr	r1, [pc, #52]	@ (8001aec <check_condition_jump_to_code_uart+0x1cc>)
 8001ab6:	4807      	ldr	r0, [pc, #28]	@ (8001ad4 <check_condition_jump_to_code_uart+0x1b4>)
 8001ab8:	f005 f8be 	bl	8006c38 <HAL_UART_Transmit>
 8001abc:	46b5      	mov	sp, r6
 8001abe:	e001      	b.n	8001ac4 <check_condition_jump_to_code_uart+0x1a4>
		return;
 8001ac0:	bf00      	nop
        return;
 8001ac2:	46b5      	mov	sp, r6
}
 8001ac4:	3734      	adds	r7, #52	@ 0x34
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001acc:	080174a0 	.word	0x080174a0
 8001ad0:	0801649c 	.word	0x0801649c
 8001ad4:	24000294 	.word	0x24000294
 8001ad8:	080a0000 	.word	0x080a0000
 8001adc:	deadbeef 	.word	0xdeadbeef
 8001ae0:	080c0000 	.word	0x080c0000
 8001ae4:	080164b8 	.word	0x080164b8
 8001ae8:	080164e0 	.word	0x080164e0
 8001aec:	08016504 	.word	0x08016504

08001af0 <process_uart_command>:

void process_uart_command() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	71fb      	strb	r3, [r7, #7]
	while(1){
	memset(rx_buffer, 0, 300);
 8001afa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001afe:	2100      	movs	r1, #0
 8001b00:	482e      	ldr	r0, [pc, #184]	@ (8001bbc <process_uart_command+0xcc>)
 8001b02:	f013 ff8d 	bl	8015a20 <memset>
	HAL_UART_Receive(&huart1, rx_buffer, 1, HAL_MAX_DELAY);
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	492b      	ldr	r1, [pc, #172]	@ (8001bbc <process_uart_command+0xcc>)
 8001b0e:	482c      	ldr	r0, [pc, #176]	@ (8001bc0 <process_uart_command+0xd0>)
 8001b10:	f005 f920 	bl	8006d54 <HAL_UART_Receive>
	rcv_len = rx_buffer[0];
 8001b14:	4b29      	ldr	r3, [pc, #164]	@ (8001bbc <process_uart_command+0xcc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(&huart1, &rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	4928      	ldr	r1, [pc, #160]	@ (8001bc4 <process_uart_command+0xd4>)
 8001b24:	4826      	ldr	r0, [pc, #152]	@ (8001bc0 <process_uart_command+0xd0>)
 8001b26:	f005 f915 	bl	8006d54 <HAL_UART_Receive>
	switch(rx_buffer[1]){
 8001b2a:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <process_uart_command+0xcc>)
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	3b50      	subs	r3, #80	@ 0x50
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d8e2      	bhi.n	8001afa <process_uart_command+0xa>
 8001b34:	a201      	add	r2, pc, #4	@ (adr r2, 8001b3c <process_uart_command+0x4c>)
 8001b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3a:	bf00      	nop
 8001b3c:	08001b81 	.word	0x08001b81
 8001b40:	08001b89 	.word	0x08001b89
 8001b44:	08001afb 	.word	0x08001afb
 8001b48:	08001b91 	.word	0x08001b91
 8001b4c:	08001b99 	.word	0x08001b99
 8001b50:	08001ba1 	.word	0x08001ba1
 8001b54:	08001afb 	.word	0x08001afb
 8001b58:	08001afb 	.word	0x08001afb
 8001b5c:	08001ba9 	.word	0x08001ba9
 8001b60:	08001afb 	.word	0x08001afb
 8001b64:	08001afb 	.word	0x08001afb
 8001b68:	08001afb 	.word	0x08001afb
 8001b6c:	08001afb 	.word	0x08001afb
 8001b70:	08001afb 	.word	0x08001afb
 8001b74:	08001afb 	.word	0x08001afb
 8001b78:	08001afb 	.word	0x08001afb
 8001b7c:	08001bb1 	.word	0x08001bb1
	case BL_CHECK_CONNECTION:
		bl_check_connect_uart(rx_buffer);
 8001b80:	480e      	ldr	r0, [pc, #56]	@ (8001bbc <process_uart_command+0xcc>)
 8001b82:	f7fe ff5f 	bl	8000a44 <bl_check_connect_uart>
		break;
 8001b86:	e018      	b.n	8001bba <process_uart_command+0xca>
	case BL_WRITE_MEM:
		bl_write_mem_uart(rx_buffer);
 8001b88:	480c      	ldr	r0, [pc, #48]	@ (8001bbc <process_uart_command+0xcc>)
 8001b8a:	f7fe ffa7 	bl	8000adc <bl_write_mem_uart>
		break;
 8001b8e:	e014      	b.n	8001bba <process_uart_command+0xca>
	case BL_CHECK_MEM:
		bl_check_mem_uart(rx_buffer);
 8001b90:	480a      	ldr	r0, [pc, #40]	@ (8001bbc <process_uart_command+0xcc>)
 8001b92:	f7ff fb47 	bl	8001224 <bl_check_mem_uart>
		break;
 8001b96:	e010      	b.n	8001bba <process_uart_command+0xca>
	case BL_DEL_MEM:
		bl_del_mem(rx_buffer);
 8001b98:	4808      	ldr	r0, [pc, #32]	@ (8001bbc <process_uart_command+0xcc>)
 8001b9a:	f7ff fa93 	bl	80010c4 <bl_del_mem>
		break;
 8001b9e:	e00c      	b.n	8001bba <process_uart_command+0xca>
	case BL_JUMP_TO_USER_CODE:
		bl_jump_to_code_uart(rx_buffer);
 8001ba0:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <process_uart_command+0xcc>)
 8001ba2:	f7fe ff1f 	bl	80009e4 <bl_jump_to_code_uart>
		break;
 8001ba6:	e008      	b.n	8001bba <process_uart_command+0xca>
	case BL_VERIFY_SIGNATURE:
		bl_verify_signature(rx_buffer);
 8001ba8:	4804      	ldr	r0, [pc, #16]	@ (8001bbc <process_uart_command+0xcc>)
 8001baa:	f7ff fb97 	bl	80012dc <bl_verify_signature>
		break;
 8001bae:	e004      	b.n	8001bba <process_uart_command+0xca>
	case BL_CHECK_PREVIOUS_VERSION:
		bl_check_version(rx_buffer);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <process_uart_command+0xcc>)
 8001bb2:	f7ff fd1b 	bl	80015ec <bl_check_version>
		break;
 8001bb6:	bf00      	nop
 8001bb8:	e79f      	b.n	8001afa <process_uart_command+0xa>
	memset(rx_buffer, 0, 300);
 8001bba:	e79e      	b.n	8001afa <process_uart_command+0xa>
 8001bbc:	240000b8 	.word	0x240000b8
 8001bc0:	24000294 	.word	0x24000294
 8001bc4:	240000b9 	.word	0x240000b9

08001bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001bcc:	f000 f8aa 	bl	8001d24 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c40 <main+0x78>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d11b      	bne.n	8001c14 <main+0x4c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bdc:	f3bf 8f4f 	dsb	sy
}
 8001be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001be2:	f3bf 8f6f 	isb	sy
}
 8001be6:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001be8:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <main+0x78>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bf0:	f3bf 8f4f 	dsb	sy
}
 8001bf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bf6:	f3bf 8f6f 	isb	sy
}
 8001bfa:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bfc:	4b10      	ldr	r3, [pc, #64]	@ (8001c40 <main+0x78>)
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	4a0f      	ldr	r2, [pc, #60]	@ (8001c40 <main+0x78>)
 8001c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c06:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c08:	f3bf 8f4f 	dsb	sy
}
 8001c0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c0e:	f3bf 8f6f 	isb	sy
}
 8001c12:	e000      	b.n	8001c16 <main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001c14:	bf00      	nop
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c16:	f000 fbf9 	bl	800240c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1a:	f000 f813 	bl	8001c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1e:	f7fe fda7 	bl	8000770 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001c22:	f000 faa9 	bl	8002178 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001c26:	f000 fb07 	bl	8002238 <MX_USART1_UART_Init>
  //MX_RNG_Init();
  MX_MBEDTLS_Init();
 8001c2a:	f006 ff3b 	bl	8008aa4 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */

  check_condition_jump_to_code_uart();
 8001c2e:	f7ff fe77 	bl	8001920 <check_condition_jump_to_code_uart>
  clear_flag();
 8001c32:	f7fe fecf 	bl	80009d4 <clear_flag>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  process_uart_command();
 8001c36:	f7ff ff5b 	bl	8001af0 <process_uart_command>
  while (1)
 8001c3a:	bf00      	nop
 8001c3c:	e7fd      	b.n	8001c3a <main+0x72>
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09c      	sub	sp, #112	@ 0x70
 8001c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4e:	224c      	movs	r2, #76	@ 0x4c
 8001c50:	2100      	movs	r1, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	f013 fee4 	bl	8015a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f013 fede 	bl	8015a20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c64:	2002      	movs	r0, #2
 8001c66:	f001 fe7f 	bl	8003968 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	603b      	str	r3, [r7, #0]
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d20 <SystemClock_Config+0xdc>)
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	4a2b      	ldr	r2, [pc, #172]	@ (8001d20 <SystemClock_Config+0xdc>)
 8001c74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c78:	6193      	str	r3, [r2, #24]
 8001c7a:	4b29      	ldr	r3, [pc, #164]	@ (8001d20 <SystemClock_Config+0xdc>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c86:	bf00      	nop
 8001c88:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <SystemClock_Config+0xdc>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c94:	d1f8      	bne.n	8001c88 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001c96:	2321      	movs	r3, #33	@ 0x21
 8001c98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cac:	2301      	movs	r3, #1
 8001cae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8001cb0:	2344      	movs	r3, #68	@ 0x44
 8001cb2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 11;
 8001cb8:	230b      	movs	r3, #11
 8001cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001cc8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 fe82 	bl	80039dc <HAL_RCC_OscConfig>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cde:	f000 f887 	bl	8001df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce2:	233f      	movs	r3, #63	@ 0x3f
 8001ce4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001cee:	2308      	movs	r3, #8
 8001cf0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001cf2:	2340      	movs	r3, #64	@ 0x40
 8001cf4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001cf6:	2340      	movs	r3, #64	@ 0x40
 8001cf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001cfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cfe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d00:	2340      	movs	r3, #64	@ 0x40
 8001d02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2103      	movs	r1, #3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 fa41 	bl	8004190 <HAL_RCC_ClockConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001d14:	f000 f86c 	bl	8001df0 <Error_Handler>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3770      	adds	r7, #112	@ 0x70
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	58024800 	.word	0x58024800

08001d24 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001d2a:	463b      	mov	r3, r7
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001d36:	f000 fca5 	bl	8002684 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d46:	231f      	movs	r3, #31
 8001d48:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001d4a:	2387      	movs	r3, #135	@ 0x87
 8001d4c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d52:	2300      	movs	r3, #0
 8001d54:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d56:	2301      	movs	r3, #1
 8001d58:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d66:	463b      	mov	r3, r7
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fcc3 	bl	80026f4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001d72:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001d76:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001d78:	2309      	movs	r3, #9
 8001d7a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001d80:	2303      	movs	r3, #3
 8001d82:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d90:	463b      	mov	r3, r7
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fcae 	bl	80026f4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <MPU_Config+0xa4>)
 8001d9e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001da0:	230d      	movs	r3, #13
 8001da2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001db0:	463b      	mov	r3, r7
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fc9e 	bl	80026f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001db8:	2004      	movs	r0, #4
 8001dba:	f000 fc7b 	bl	80026b4 <HAL_MPU_Enable>

}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	30004000 	.word	0x30004000

08001dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
////
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001dde:	f000 fb51 	bl	8002484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
////
  /* USER CODE END Callback 1 */
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40010000 	.word	0x40010000

08001df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <Error_Handler+0x8>

08001dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	@ (8001e2c <HAL_MspInit+0x30>)
 8001e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e08:	4a08      	ldr	r2, [pc, #32]	@ (8001e2c <HAL_MspInit+0x30>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e12:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_MspInit+0x30>)
 8001e14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	58024400 	.word	0x58024400

08001e30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08e      	sub	sp, #56	@ 0x38
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b0f      	cmp	r3, #15
 8001e3c:	d844      	bhi.n	8001ec8 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	2019      	movs	r0, #25
 8001e44:	f000 fbf6 	bl	8002634 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e48:	2019      	movs	r0, #25
 8001e4a:	f000 fc0d 	bl	8002668 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001e4e:	4a24      	ldr	r2, [pc, #144]	@ (8001ee0 <HAL_InitTick+0xb0>)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e54:	4b23      	ldr	r3, [pc, #140]	@ (8001ee4 <HAL_InitTick+0xb4>)
 8001e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ee4 <HAL_InitTick+0xb4>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <HAL_InitTick+0xb4>)
 8001e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e72:	f107 020c 	add.w	r2, r7, #12
 8001e76:	f107 0310 	add.w	r3, r7, #16
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 fd13 	bl	80048a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e82:	f002 fcfb 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 8001e86:	4603      	mov	r3, r0
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e8e:	4a16      	ldr	r2, [pc, #88]	@ (8001ee8 <HAL_InitTick+0xb8>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	0c9b      	lsrs	r3, r3, #18
 8001e96:	3b01      	subs	r3, #1
 8001e98:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e9a:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_InitTick+0xbc>)
 8001e9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ef0 <HAL_InitTick+0xc0>)
 8001e9e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ea0:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <HAL_InitTick+0xbc>)
 8001ea2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ea6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ea8:	4a10      	ldr	r2, [pc, #64]	@ (8001eec <HAL_InitTick+0xbc>)
 8001eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eac:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001eae:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <HAL_InitTick+0xbc>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <HAL_InitTick+0xbc>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001eba:	480c      	ldr	r0, [pc, #48]	@ (8001eec <HAL_InitTick+0xbc>)
 8001ebc:	f004 faf8 	bl	80064b0 <HAL_TIM_Base_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d107      	bne.n	8001ed6 <HAL_InitTick+0xa6>
 8001ec6:	e001      	b.n	8001ecc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e005      	b.n	8001ed8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ecc:	4807      	ldr	r0, [pc, #28]	@ (8001eec <HAL_InitTick+0xbc>)
 8001ece:	f004 fb47 	bl	8006560 <HAL_TIM_Base_Start_IT>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	e000      	b.n	8001ed8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3738      	adds	r7, #56	@ 0x38
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	24000028 	.word	0x24000028
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	431bde83 	.word	0x431bde83
 8001eec:	240001f8 	.word	0x240001f8
 8001ef0:	40010000 	.word	0x40010000

08001ef4 <__NVIC_SystemReset>:
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001ef8:	f3bf 8f4f 	dsb	sy
}
 8001efc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <__NVIC_SystemReset+0x24>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001f06:	4904      	ldr	r1, [pc, #16]	@ (8001f18 <__NVIC_SystemReset+0x24>)
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <__NVIC_SystemReset+0x28>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f0e:	f3bf 8f4f 	dsb	sy
}
 8001f12:	bf00      	nop
    __NOP();
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <__NVIC_SystemReset+0x20>
 8001f18:	e000ed00 	.word	0xe000ed00
 8001f1c:	05fa0004 	.word	0x05fa0004

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <NMI_Handler+0x4>

08001f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8001f2c:	f7ff ffe2 	bl	8001ef4 <__NVIC_SystemReset>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <MemManage_Handler+0x4>

08001f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f84:	4802      	ldr	r0, [pc, #8]	@ (8001f90 <TIM1_UP_IRQHandler+0x10>)
 8001f86:	f004 fb71 	bl	800666c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	240001f8 	.word	0x240001f8

08001f94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f98:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <USART1_IRQHandler+0x10>)
 8001f9a:	f004 ffa3 	bl	8006ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	24000294 	.word	0x24000294

08001fa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <TIM6_DAC_IRQHandler+0x10>)
 8001fae:	f004 fb5d 	bl	800666c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	24000248 	.word	0x24000248

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	@ (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	@ (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f013 fd30 	bl	8015a50 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	@ (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	24050000 	.word	0x24050000
 800201c:	00000400 	.word	0x00000400
 8002020:	24000244 	.word	0x24000244
 8002024:	240026e0 	.word	0x240026e0

08002028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800202c:	4b3e      	ldr	r3, [pc, #248]	@ (8002128 <SystemInit+0x100>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002032:	4a3d      	ldr	r2, [pc, #244]	@ (8002128 <SystemInit+0x100>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800203c:	4b3b      	ldr	r3, [pc, #236]	@ (800212c <SystemInit+0x104>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	2b06      	cmp	r3, #6
 8002046:	d807      	bhi.n	8002058 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002048:	4b38      	ldr	r3, [pc, #224]	@ (800212c <SystemInit+0x104>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 030f 	bic.w	r3, r3, #15
 8002050:	4a36      	ldr	r2, [pc, #216]	@ (800212c <SystemInit+0x104>)
 8002052:	f043 0307 	orr.w	r3, r3, #7
 8002056:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002058:	4b35      	ldr	r3, [pc, #212]	@ (8002130 <SystemInit+0x108>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a34      	ldr	r2, [pc, #208]	@ (8002130 <SystemInit+0x108>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002064:	4b32      	ldr	r3, [pc, #200]	@ (8002130 <SystemInit+0x108>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800206a:	4b31      	ldr	r3, [pc, #196]	@ (8002130 <SystemInit+0x108>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4930      	ldr	r1, [pc, #192]	@ (8002130 <SystemInit+0x108>)
 8002070:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <SystemInit+0x10c>)
 8002072:	4013      	ands	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002076:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <SystemInit+0x104>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002082:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <SystemInit+0x104>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 030f 	bic.w	r3, r3, #15
 800208a:	4a28      	ldr	r2, [pc, #160]	@ (800212c <SystemInit+0x104>)
 800208c:	f043 0307 	orr.w	r3, r3, #7
 8002090:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002092:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <SystemInit+0x108>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002098:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <SystemInit+0x108>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800209e:	4b24      	ldr	r3, [pc, #144]	@ (8002130 <SystemInit+0x108>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020a4:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <SystemInit+0x108>)
 80020a6:	4a24      	ldr	r2, [pc, #144]	@ (8002138 <SystemInit+0x110>)
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80020aa:	4b21      	ldr	r3, [pc, #132]	@ (8002130 <SystemInit+0x108>)
 80020ac:	4a23      	ldr	r2, [pc, #140]	@ (800213c <SystemInit+0x114>)
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80020b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002130 <SystemInit+0x108>)
 80020b2:	4a23      	ldr	r2, [pc, #140]	@ (8002140 <SystemInit+0x118>)
 80020b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <SystemInit+0x108>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <SystemInit+0x108>)
 80020be:	4a20      	ldr	r2, [pc, #128]	@ (8002140 <SystemInit+0x118>)
 80020c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <SystemInit+0x108>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <SystemInit+0x108>)
 80020ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002140 <SystemInit+0x118>)
 80020cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020ce:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <SystemInit+0x108>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020d4:	4b16      	ldr	r3, [pc, #88]	@ (8002130 <SystemInit+0x108>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a15      	ldr	r2, [pc, #84]	@ (8002130 <SystemInit+0x108>)
 80020da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020e0:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <SystemInit+0x108>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80020e6:	4b12      	ldr	r3, [pc, #72]	@ (8002130 <SystemInit+0x108>)
 80020e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d113      	bne.n	800211c <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80020f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <SystemInit+0x108>)
 80020f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <SystemInit+0x108>)
 80020fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002100:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002104:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <SystemInit+0x11c>)
 8002106:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800210a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <SystemInit+0x108>)
 800210e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002112:	4a07      	ldr	r2, [pc, #28]	@ (8002130 <SystemInit+0x108>)
 8002114:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002118:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00
 800212c:	52002000 	.word	0x52002000
 8002130:	58024400 	.word	0x58024400
 8002134:	eaf6ed7f 	.word	0xeaf6ed7f
 8002138:	02020200 	.word	0x02020200
 800213c:	01ff0000 	.word	0x01ff0000
 8002140:	01010280 	.word	0x01010280
 8002144:	52004000 	.word	0x52004000

08002148 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <ExitRun0Mode+0x2c>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a08      	ldr	r2, [pc, #32]	@ (8002174 <ExitRun0Mode+0x2c>)
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002158:	bf00      	nop
 800215a:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <ExitRun0Mode+0x2c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f9      	beq.n	800215a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	58024800 	.word	0x58024800

08002178 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <MX_TIM6_Init+0x68>)
 800218a:	4a16      	ldr	r2, [pc, #88]	@ (80021e4 <MX_TIM6_Init+0x6c>)
 800218c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 800218e:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <MX_TIM6_Init+0x68>)
 8002190:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8002194:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <MX_TIM6_Init+0x68>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800219c:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <MX_TIM6_Init+0x68>)
 800219e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <MX_TIM6_Init+0x68>)
 80021a6:	2280      	movs	r2, #128	@ 0x80
 80021a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021aa:	480d      	ldr	r0, [pc, #52]	@ (80021e0 <MX_TIM6_Init+0x68>)
 80021ac:	f004 f980 	bl	80064b0 <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80021b6:	f7ff fe1b 	bl	8001df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	@ (80021e0 <MX_TIM6_Init+0x68>)
 80021c8:	f004 fc2c 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80021d2:	f7ff fe0d 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	24000248 	.word	0x24000248
 80021e4:	40001000 	.word	0x40001000

080021e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002230 <HAL_TIM_Base_MspInit+0x48>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d116      	bne.n	8002228 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <HAL_TIM_Base_MspInit+0x4c>)
 80021fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002200:	4a0c      	ldr	r2, [pc, #48]	@ (8002234 <HAL_TIM_Base_MspInit+0x4c>)
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_TIM_Base_MspInit+0x4c>)
 800220c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	210f      	movs	r1, #15
 800221c:	2036      	movs	r0, #54	@ 0x36
 800221e:	f000 fa09 	bl	8002634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002222:	2036      	movs	r0, #54	@ 0x36
 8002224:	f000 fa20 	bl	8002668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40001000 	.word	0x40001000
 8002234:	58024400 	.word	0x58024400

08002238 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800223c:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800223e:	4a23      	ldr	r2, [pc, #140]	@ (80022cc <MX_USART1_UART_Init+0x94>)
 8002240:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002242:	4b21      	ldr	r3, [pc, #132]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002248:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224a:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800224c:	2200      	movs	r2, #0
 800224e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002250:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002256:	4b1c      	ldr	r3, [pc, #112]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800225c:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800225e:	220c      	movs	r2, #12
 8002260:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002262:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002264:	2200      	movs	r2, #0
 8002266:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800226a:	2200      	movs	r2, #0
 800226c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800226e:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002270:	2200      	movs	r2, #0
 8002272:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800227a:	4b13      	ldr	r3, [pc, #76]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 800227c:	2200      	movs	r2, #0
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002280:	4811      	ldr	r0, [pc, #68]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002282:	f004 fc89 	bl	8006b98 <HAL_UART_Init>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800228c:	f7ff fdb0 	bl	8001df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002290:	2100      	movs	r1, #0
 8002292:	480d      	ldr	r0, [pc, #52]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 8002294:	f006 fb3c 	bl	8008910 <HAL_UARTEx_SetTxFifoThreshold>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800229e:	f7ff fda7 	bl	8001df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a2:	2100      	movs	r1, #0
 80022a4:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 80022a6:	f006 fb71 	bl	800898c <HAL_UARTEx_SetRxFifoThreshold>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022b0:	f7ff fd9e 	bl	8001df0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	@ (80022c8 <MX_USART1_UART_Init+0x90>)
 80022b6:	f006 faf2 	bl	800889e <HAL_UARTEx_DisableFifoMode>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022c0:	f7ff fd96 	bl	8001df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	24000294 	.word	0x24000294
 80022cc:	40011000 	.word	0x40011000

080022d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0b8      	sub	sp, #224	@ 0xe0
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	22b8      	movs	r2, #184	@ 0xb8
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f013 fb95 	bl	8015a20 <memset>
  if(uartHandle->Instance==USART1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2b      	ldr	r2, [pc, #172]	@ (80023a8 <HAL_UART_MspInit+0xd8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d14e      	bne.n	800239e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002300:	f04f 0201 	mov.w	r2, #1
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	4618      	mov	r0, r3
 8002318:	f002 fb08 	bl	800492c <HAL_RCCEx_PeriphCLKConfig>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002322:	f7ff fd65 	bl	8001df0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002326:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_UART_MspInit+0xdc>)
 8002328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800232c:	4a1f      	ldr	r2, [pc, #124]	@ (80023ac <HAL_UART_MspInit+0xdc>)
 800232e:	f043 0310 	orr.w	r3, r3, #16
 8002332:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_UART_MspInit+0xdc>)
 8002338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_UART_MspInit+0xdc>)
 8002346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800234a:	4a18      	ldr	r2, [pc, #96]	@ (80023ac <HAL_UART_MspInit+0xdc>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002354:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_UART_MspInit+0xdc>)
 8002356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002362:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002366:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800237c:	2304      	movs	r3, #4
 800237e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002382:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002386:	4619      	mov	r1, r3
 8002388:	4809      	ldr	r0, [pc, #36]	@ (80023b0 <HAL_UART_MspInit+0xe0>)
 800238a:	f001 f92b 	bl	80035e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	2025      	movs	r0, #37	@ 0x25
 8002394:	f000 f94e 	bl	8002634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002398:	2025      	movs	r0, #37	@ 0x25
 800239a:	f000 f965 	bl	8002668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800239e:	bf00      	nop
 80023a0:	37e0      	adds	r7, #224	@ 0xe0
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40011000 	.word	0x40011000
 80023ac:	58024400 	.word	0x58024400
 80023b0:	58020400 	.word	0x58020400

080023b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80023b4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80023f0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80023b8:	f7ff fec6 	bl	8002148 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023bc:	f7ff fe34 	bl	8002028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c0:	480c      	ldr	r0, [pc, #48]	@ (80023f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023c2:	490d      	ldr	r1, [pc, #52]	@ (80023f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023c4:	4a0d      	ldr	r2, [pc, #52]	@ (80023fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c8:	e002      	b.n	80023d0 <LoopCopyDataInit>

080023ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ce:	3304      	adds	r3, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d4:	d3f9      	bcc.n	80023ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023dc:	e001      	b.n	80023e2 <LoopFillZerobss>

080023de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e0:	3204      	adds	r2, #4

080023e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e4:	d3fb      	bcc.n	80023de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e6:	f013 fb39 	bl	8015a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ea:	f7ff fbed 	bl	8001bc8 <main>
  bx  lr
 80023ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023f0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80023f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023f8:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 80023fc:	0801743c 	.word	0x0801743c
  ldr r2, =_sbss
 8002400:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 8002404:	240026e0 	.word	0x240026e0

08002408 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <ADC3_IRQHandler>
	...

0800240c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002412:	2003      	movs	r0, #3
 8002414:	f000 f903 	bl	800261e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002418:	f002 f870 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 800241c:	4602      	mov	r2, r0
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_Init+0x68>)
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	4913      	ldr	r1, [pc, #76]	@ (8002478 <HAL_Init+0x6c>)
 800242a:	5ccb      	ldrb	r3, [r1, r3]
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	fa22 f303 	lsr.w	r3, r2, r3
 8002434:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002436:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <HAL_Init+0x68>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	4a0e      	ldr	r2, [pc, #56]	@ (8002478 <HAL_Init+0x6c>)
 8002440:	5cd3      	ldrb	r3, [r2, r3]
 8002442:	f003 031f 	and.w	r3, r3, #31
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	fa22 f303 	lsr.w	r3, r2, r3
 800244c:	4a0b      	ldr	r2, [pc, #44]	@ (800247c <HAL_Init+0x70>)
 800244e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002450:	4a0b      	ldr	r2, [pc, #44]	@ (8002480 <HAL_Init+0x74>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002456:	200f      	movs	r0, #15
 8002458:	f7ff fcea 	bl	8001e30 <HAL_InitTick>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e002      	b.n	800246c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002466:	f7ff fcc9 	bl	8001dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024400 	.word	0x58024400
 8002478:	08016a04 	.word	0x08016a04
 800247c:	24000024 	.word	0x24000024
 8002480:	24000020 	.word	0x24000020

08002484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002488:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_IncTick+0x20>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_IncTick+0x24>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <HAL_IncTick+0x24>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	2400002c 	.word	0x2400002c
 80024a8:	24000328 	.word	0x24000328

080024ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return uwTick;
 80024b0:	4b03      	ldr	r3, [pc, #12]	@ (80024c0 <HAL_GetTick+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	24000328 	.word	0x24000328

080024c4 <__NVIC_SetPriorityGrouping>:
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <__NVIC_SetPriorityGrouping+0x40>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e0:	4013      	ands	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f2:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <__NVIC_SetPriorityGrouping+0x40>)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	60d3      	str	r3, [r2, #12]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000ed00 	.word	0xe000ed00
 8002508:	05fa0000 	.word	0x05fa0000

0800250c <__NVIC_GetPriorityGrouping>:
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002510:	4b04      	ldr	r3, [pc, #16]	@ (8002524 <__NVIC_GetPriorityGrouping+0x18>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	f003 0307 	and.w	r3, r3, #7
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_EnableIRQ>:
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002536:	2b00      	cmp	r3, #0
 8002538:	db0b      	blt.n	8002552 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	4907      	ldr	r1, [pc, #28]	@ (8002560 <__NVIC_EnableIRQ+0x38>)
 8002542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2001      	movs	r0, #1
 800254a:	fa00 f202 	lsl.w	r2, r0, r2
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000e100 	.word	0xe000e100

08002564 <__NVIC_SetPriority>:
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	6039      	str	r1, [r7, #0]
 800256e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002574:	2b00      	cmp	r3, #0
 8002576:	db0a      	blt.n	800258e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	b2da      	uxtb	r2, r3
 800257c:	490c      	ldr	r1, [pc, #48]	@ (80025b0 <__NVIC_SetPriority+0x4c>)
 800257e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002582:	0112      	lsls	r2, r2, #4
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	440b      	add	r3, r1
 8002588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800258c:	e00a      	b.n	80025a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4908      	ldr	r1, [pc, #32]	@ (80025b4 <__NVIC_SetPriority+0x50>)
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	3b04      	subs	r3, #4
 800259c:	0112      	lsls	r2, r2, #4
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	440b      	add	r3, r1
 80025a2:	761a      	strb	r2, [r3, #24]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000e100 	.word	0xe000e100
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <NVIC_EncodePriority>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	b089      	sub	sp, #36	@ 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f1c3 0307 	rsb	r3, r3, #7
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	bf28      	it	cs
 80025d6:	2304      	movcs	r3, #4
 80025d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3304      	adds	r3, #4
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d902      	bls.n	80025e8 <NVIC_EncodePriority+0x30>
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3b03      	subs	r3, #3
 80025e6:	e000      	b.n	80025ea <NVIC_EncodePriority+0x32>
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43da      	mvns	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	401a      	ands	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002600:	f04f 31ff 	mov.w	r1, #4294967295
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	43d9      	mvns	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002610:	4313      	orrs	r3, r2
}
 8002612:	4618      	mov	r0, r3
 8002614:	3724      	adds	r7, #36	@ 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff ff4c 	bl	80024c4 <__NVIC_SetPriorityGrouping>
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002642:	f7ff ff63 	bl	800250c <__NVIC_GetPriorityGrouping>
 8002646:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	6978      	ldr	r0, [r7, #20]
 800264e:	f7ff ffb3 	bl	80025b8 <NVIC_EncodePriority>
 8002652:	4602      	mov	r2, r0
 8002654:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ff82 	bl	8002564 <__NVIC_SetPriority>
}
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ff56 	bl	8002528 <__NVIC_EnableIRQ>
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002688:	f3bf 8f5f 	dmb	sy
}
 800268c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <HAL_MPU_Disable+0x28>)
 8002690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002692:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <HAL_MPU_Disable+0x28>)
 8002694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002698:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_MPU_Disable+0x2c>)
 800269c:	2200      	movs	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000ed00 	.word	0xe000ed00
 80026b0:	e000ed90 	.word	0xe000ed90

080026b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80026bc:	4a0b      	ldr	r2, [pc, #44]	@ (80026ec <HAL_MPU_Enable+0x38>)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80026c6:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_MPU_Enable+0x3c>)
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <HAL_MPU_Enable+0x3c>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80026d2:	f3bf 8f4f 	dsb	sy
}
 80026d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80026d8:	f3bf 8f6f 	isb	sy
}
 80026dc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed90 	.word	0xe000ed90
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	785a      	ldrb	r2, [r3, #1]
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <HAL_MPU_ConfigRegion+0x7c>)
 8002702:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002704:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_MPU_ConfigRegion+0x7c>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4a19      	ldr	r2, [pc, #100]	@ (8002770 <HAL_MPU_ConfigRegion+0x7c>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002710:	4a17      	ldr	r2, [pc, #92]	@ (8002770 <HAL_MPU_ConfigRegion+0x7c>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7b1b      	ldrb	r3, [r3, #12]
 800271c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7adb      	ldrb	r3, [r3, #11]
 8002722:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002724:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7a9b      	ldrb	r3, [r3, #10]
 800272a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800272c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	7b5b      	ldrb	r3, [r3, #13]
 8002732:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002734:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	7b9b      	ldrb	r3, [r3, #14]
 800273a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800273c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	7bdb      	ldrb	r3, [r3, #15]
 8002742:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002744:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	7a5b      	ldrb	r3, [r3, #9]
 800274a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800274c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7a1b      	ldrb	r3, [r3, #8]
 8002752:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002754:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	7812      	ldrb	r2, [r2, #0]
 800275a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800275c:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800275e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002760:	6113      	str	r3, [r2, #16]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e000ed90 	.word	0xe000ed90

08002774 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800277c:	f7ff fe96 	bl	80024ac <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e2dc      	b.n	8002d46 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d008      	beq.n	80027aa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2280      	movs	r2, #128	@ 0x80
 800279c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e2cd      	b.n	8002d46 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a76      	ldr	r2, [pc, #472]	@ (8002988 <HAL_DMA_Abort+0x214>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d04a      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a74      	ldr	r2, [pc, #464]	@ (800298c <HAL_DMA_Abort+0x218>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d045      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a73      	ldr	r2, [pc, #460]	@ (8002990 <HAL_DMA_Abort+0x21c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d040      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a71      	ldr	r2, [pc, #452]	@ (8002994 <HAL_DMA_Abort+0x220>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d03b      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a70      	ldr	r2, [pc, #448]	@ (8002998 <HAL_DMA_Abort+0x224>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d036      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a6e      	ldr	r2, [pc, #440]	@ (800299c <HAL_DMA_Abort+0x228>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d031      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a6d      	ldr	r2, [pc, #436]	@ (80029a0 <HAL_DMA_Abort+0x22c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d02c      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a6b      	ldr	r2, [pc, #428]	@ (80029a4 <HAL_DMA_Abort+0x230>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d027      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6a      	ldr	r2, [pc, #424]	@ (80029a8 <HAL_DMA_Abort+0x234>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d022      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a68      	ldr	r2, [pc, #416]	@ (80029ac <HAL_DMA_Abort+0x238>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01d      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a67      	ldr	r2, [pc, #412]	@ (80029b0 <HAL_DMA_Abort+0x23c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d018      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a65      	ldr	r2, [pc, #404]	@ (80029b4 <HAL_DMA_Abort+0x240>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a64      	ldr	r2, [pc, #400]	@ (80029b8 <HAL_DMA_Abort+0x244>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a62      	ldr	r2, [pc, #392]	@ (80029bc <HAL_DMA_Abort+0x248>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a61      	ldr	r2, [pc, #388]	@ (80029c0 <HAL_DMA_Abort+0x24c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_DMA_Abort+0xd6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a5f      	ldr	r2, [pc, #380]	@ (80029c4 <HAL_DMA_Abort+0x250>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_DMA_Abort+0xda>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_DMA_Abort+0xdc>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 021e 	bic.w	r2, r2, #30
 8002862:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002872:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e00a      	b.n	8002892 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 020e 	bic.w	r2, r2, #14
 800288a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a3c      	ldr	r2, [pc, #240]	@ (8002988 <HAL_DMA_Abort+0x214>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d072      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a3a      	ldr	r2, [pc, #232]	@ (800298c <HAL_DMA_Abort+0x218>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d06d      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a39      	ldr	r2, [pc, #228]	@ (8002990 <HAL_DMA_Abort+0x21c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d068      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a37      	ldr	r2, [pc, #220]	@ (8002994 <HAL_DMA_Abort+0x220>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d063      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a36      	ldr	r2, [pc, #216]	@ (8002998 <HAL_DMA_Abort+0x224>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d05e      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a34      	ldr	r2, [pc, #208]	@ (800299c <HAL_DMA_Abort+0x228>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d059      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a33      	ldr	r2, [pc, #204]	@ (80029a0 <HAL_DMA_Abort+0x22c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d054      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a31      	ldr	r2, [pc, #196]	@ (80029a4 <HAL_DMA_Abort+0x230>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d04f      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a30      	ldr	r2, [pc, #192]	@ (80029a8 <HAL_DMA_Abort+0x234>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d04a      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a2e      	ldr	r2, [pc, #184]	@ (80029ac <HAL_DMA_Abort+0x238>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d045      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a2d      	ldr	r2, [pc, #180]	@ (80029b0 <HAL_DMA_Abort+0x23c>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d040      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a2b      	ldr	r2, [pc, #172]	@ (80029b4 <HAL_DMA_Abort+0x240>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d03b      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2a      	ldr	r2, [pc, #168]	@ (80029b8 <HAL_DMA_Abort+0x244>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d036      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a28      	ldr	r2, [pc, #160]	@ (80029bc <HAL_DMA_Abort+0x248>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d031      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a27      	ldr	r2, [pc, #156]	@ (80029c0 <HAL_DMA_Abort+0x24c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d02c      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a25      	ldr	r2, [pc, #148]	@ (80029c4 <HAL_DMA_Abort+0x250>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d027      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a24      	ldr	r2, [pc, #144]	@ (80029c8 <HAL_DMA_Abort+0x254>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d022      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a22      	ldr	r2, [pc, #136]	@ (80029cc <HAL_DMA_Abort+0x258>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01d      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a21      	ldr	r2, [pc, #132]	@ (80029d0 <HAL_DMA_Abort+0x25c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d018      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1f      	ldr	r2, [pc, #124]	@ (80029d4 <HAL_DMA_Abort+0x260>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1e      	ldr	r2, [pc, #120]	@ (80029d8 <HAL_DMA_Abort+0x264>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00e      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <HAL_DMA_Abort+0x268>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d009      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <HAL_DMA_Abort+0x26c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d004      	beq.n	8002982 <HAL_DMA_Abort+0x20e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a19      	ldr	r2, [pc, #100]	@ (80029e4 <HAL_DMA_Abort+0x270>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d132      	bne.n	80029e8 <HAL_DMA_Abort+0x274>
 8002982:	2301      	movs	r3, #1
 8002984:	e031      	b.n	80029ea <HAL_DMA_Abort+0x276>
 8002986:	bf00      	nop
 8002988:	40020010 	.word	0x40020010
 800298c:	40020028 	.word	0x40020028
 8002990:	40020040 	.word	0x40020040
 8002994:	40020058 	.word	0x40020058
 8002998:	40020070 	.word	0x40020070
 800299c:	40020088 	.word	0x40020088
 80029a0:	400200a0 	.word	0x400200a0
 80029a4:	400200b8 	.word	0x400200b8
 80029a8:	40020410 	.word	0x40020410
 80029ac:	40020428 	.word	0x40020428
 80029b0:	40020440 	.word	0x40020440
 80029b4:	40020458 	.word	0x40020458
 80029b8:	40020470 	.word	0x40020470
 80029bc:	40020488 	.word	0x40020488
 80029c0:	400204a0 	.word	0x400204a0
 80029c4:	400204b8 	.word	0x400204b8
 80029c8:	58025408 	.word	0x58025408
 80029cc:	5802541c 	.word	0x5802541c
 80029d0:	58025430 	.word	0x58025430
 80029d4:	58025444 	.word	0x58025444
 80029d8:	58025458 	.word	0x58025458
 80029dc:	5802546c 	.word	0x5802546c
 80029e0:	58025480 	.word	0x58025480
 80029e4:	58025494 	.word	0x58025494
 80029e8:	2300      	movs	r3, #0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a6d      	ldr	r2, [pc, #436]	@ (8002bb8 <HAL_DMA_Abort+0x444>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d04a      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a6b      	ldr	r2, [pc, #428]	@ (8002bbc <HAL_DMA_Abort+0x448>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d045      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a6a      	ldr	r2, [pc, #424]	@ (8002bc0 <HAL_DMA_Abort+0x44c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d040      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a68      	ldr	r2, [pc, #416]	@ (8002bc4 <HAL_DMA_Abort+0x450>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d03b      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a67      	ldr	r2, [pc, #412]	@ (8002bc8 <HAL_DMA_Abort+0x454>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d036      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a65      	ldr	r2, [pc, #404]	@ (8002bcc <HAL_DMA_Abort+0x458>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d031      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a64      	ldr	r2, [pc, #400]	@ (8002bd0 <HAL_DMA_Abort+0x45c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d02c      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a62      	ldr	r2, [pc, #392]	@ (8002bd4 <HAL_DMA_Abort+0x460>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d027      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a61      	ldr	r2, [pc, #388]	@ (8002bd8 <HAL_DMA_Abort+0x464>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a5f      	ldr	r2, [pc, #380]	@ (8002bdc <HAL_DMA_Abort+0x468>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01d      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a5e      	ldr	r2, [pc, #376]	@ (8002be0 <HAL_DMA_Abort+0x46c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d018      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a5c      	ldr	r2, [pc, #368]	@ (8002be4 <HAL_DMA_Abort+0x470>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002be8 <HAL_DMA_Abort+0x474>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a59      	ldr	r2, [pc, #356]	@ (8002bec <HAL_DMA_Abort+0x478>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a58      	ldr	r2, [pc, #352]	@ (8002bf0 <HAL_DMA_Abort+0x47c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_DMA_Abort+0x32a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a56      	ldr	r2, [pc, #344]	@ (8002bf4 <HAL_DMA_Abort+0x480>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d108      	bne.n	8002ab0 <HAL_DMA_Abort+0x33c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e007      	b.n	8002ac0 <HAL_DMA_Abort+0x34c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0201 	bic.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002ac0:	e013      	b.n	8002aea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac2:	f7ff fcf3 	bl	80024ac <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d90c      	bls.n	8002aea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e12d      	b.n	8002d46 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1e5      	bne.n	8002ac2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a2f      	ldr	r2, [pc, #188]	@ (8002bb8 <HAL_DMA_Abort+0x444>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d04a      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	@ (8002bbc <HAL_DMA_Abort+0x448>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d045      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc0 <HAL_DMA_Abort+0x44c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d040      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc4 <HAL_DMA_Abort+0x450>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d03b      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a29      	ldr	r2, [pc, #164]	@ (8002bc8 <HAL_DMA_Abort+0x454>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d036      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a27      	ldr	r2, [pc, #156]	@ (8002bcc <HAL_DMA_Abort+0x458>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d031      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a26      	ldr	r2, [pc, #152]	@ (8002bd0 <HAL_DMA_Abort+0x45c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d02c      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a24      	ldr	r2, [pc, #144]	@ (8002bd4 <HAL_DMA_Abort+0x460>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d027      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a23      	ldr	r2, [pc, #140]	@ (8002bd8 <HAL_DMA_Abort+0x464>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d022      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a21      	ldr	r2, [pc, #132]	@ (8002bdc <HAL_DMA_Abort+0x468>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d01d      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a20      	ldr	r2, [pc, #128]	@ (8002be0 <HAL_DMA_Abort+0x46c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1e      	ldr	r2, [pc, #120]	@ (8002be4 <HAL_DMA_Abort+0x470>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a1d      	ldr	r2, [pc, #116]	@ (8002be8 <HAL_DMA_Abort+0x474>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00e      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bec <HAL_DMA_Abort+0x478>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d009      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf0 <HAL_DMA_Abort+0x47c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d004      	beq.n	8002b96 <HAL_DMA_Abort+0x422>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a18      	ldr	r2, [pc, #96]	@ (8002bf4 <HAL_DMA_Abort+0x480>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_DMA_Abort+0x426>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <HAL_DMA_Abort+0x428>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d02b      	beq.n	8002bf8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	223f      	movs	r2, #63	@ 0x3f
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	e02a      	b.n	8002c0e <HAL_DMA_Abort+0x49a>
 8002bb8:	40020010 	.word	0x40020010
 8002bbc:	40020028 	.word	0x40020028
 8002bc0:	40020040 	.word	0x40020040
 8002bc4:	40020058 	.word	0x40020058
 8002bc8:	40020070 	.word	0x40020070
 8002bcc:	40020088 	.word	0x40020088
 8002bd0:	400200a0 	.word	0x400200a0
 8002bd4:	400200b8 	.word	0x400200b8
 8002bd8:	40020410 	.word	0x40020410
 8002bdc:	40020428 	.word	0x40020428
 8002be0:	40020440 	.word	0x40020440
 8002be4:	40020458 	.word	0x40020458
 8002be8:	40020470 	.word	0x40020470
 8002bec:	40020488 	.word	0x40020488
 8002bf0:	400204a0 	.word	0x400204a0
 8002bf4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2201      	movs	r2, #1
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a4f      	ldr	r2, [pc, #316]	@ (8002d50 <HAL_DMA_Abort+0x5dc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d072      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d54 <HAL_DMA_Abort+0x5e0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d06d      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a4c      	ldr	r2, [pc, #304]	@ (8002d58 <HAL_DMA_Abort+0x5e4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d068      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a4a      	ldr	r2, [pc, #296]	@ (8002d5c <HAL_DMA_Abort+0x5e8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d063      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a49      	ldr	r2, [pc, #292]	@ (8002d60 <HAL_DMA_Abort+0x5ec>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d05e      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a47      	ldr	r2, [pc, #284]	@ (8002d64 <HAL_DMA_Abort+0x5f0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d059      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a46      	ldr	r2, [pc, #280]	@ (8002d68 <HAL_DMA_Abort+0x5f4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d054      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a44      	ldr	r2, [pc, #272]	@ (8002d6c <HAL_DMA_Abort+0x5f8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d04f      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a43      	ldr	r2, [pc, #268]	@ (8002d70 <HAL_DMA_Abort+0x5fc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d04a      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a41      	ldr	r2, [pc, #260]	@ (8002d74 <HAL_DMA_Abort+0x600>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d045      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a40      	ldr	r2, [pc, #256]	@ (8002d78 <HAL_DMA_Abort+0x604>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d040      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a3e      	ldr	r2, [pc, #248]	@ (8002d7c <HAL_DMA_Abort+0x608>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d03b      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d80 <HAL_DMA_Abort+0x60c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d036      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a3b      	ldr	r2, [pc, #236]	@ (8002d84 <HAL_DMA_Abort+0x610>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d031      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d88 <HAL_DMA_Abort+0x614>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d02c      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a38      	ldr	r2, [pc, #224]	@ (8002d8c <HAL_DMA_Abort+0x618>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d027      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a37      	ldr	r2, [pc, #220]	@ (8002d90 <HAL_DMA_Abort+0x61c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d022      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a35      	ldr	r2, [pc, #212]	@ (8002d94 <HAL_DMA_Abort+0x620>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01d      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a34      	ldr	r2, [pc, #208]	@ (8002d98 <HAL_DMA_Abort+0x624>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d018      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a32      	ldr	r2, [pc, #200]	@ (8002d9c <HAL_DMA_Abort+0x628>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a31      	ldr	r2, [pc, #196]	@ (8002da0 <HAL_DMA_Abort+0x62c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00e      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8002da4 <HAL_DMA_Abort+0x630>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d009      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2e      	ldr	r2, [pc, #184]	@ (8002da8 <HAL_DMA_Abort+0x634>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d004      	beq.n	8002cfe <HAL_DMA_Abort+0x58a>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8002dac <HAL_DMA_Abort+0x638>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d101      	bne.n	8002d02 <HAL_DMA_Abort+0x58e>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_DMA_Abort+0x590>
 8002d02:	2300      	movs	r3, #0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d015      	beq.n	8002d34 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d10:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00c      	beq.n	8002d34 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d28:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d32:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40020010 	.word	0x40020010
 8002d54:	40020028 	.word	0x40020028
 8002d58:	40020040 	.word	0x40020040
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	40020070 	.word	0x40020070
 8002d64:	40020088 	.word	0x40020088
 8002d68:	400200a0 	.word	0x400200a0
 8002d6c:	400200b8 	.word	0x400200b8
 8002d70:	40020410 	.word	0x40020410
 8002d74:	40020428 	.word	0x40020428
 8002d78:	40020440 	.word	0x40020440
 8002d7c:	40020458 	.word	0x40020458
 8002d80:	40020470 	.word	0x40020470
 8002d84:	40020488 	.word	0x40020488
 8002d88:	400204a0 	.word	0x400204a0
 8002d8c:	400204b8 	.word	0x400204b8
 8002d90:	58025408 	.word	0x58025408
 8002d94:	5802541c 	.word	0x5802541c
 8002d98:	58025430 	.word	0x58025430
 8002d9c:	58025444 	.word	0x58025444
 8002da0:	58025458 	.word	0x58025458
 8002da4:	5802546c 	.word	0x5802546c
 8002da8:	58025480 	.word	0x58025480
 8002dac:	58025494 	.word	0x58025494

08002db0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e237      	b.n	8003232 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2280      	movs	r2, #128	@ 0x80
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e22c      	b.n	8003232 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a5c      	ldr	r2, [pc, #368]	@ (8002f50 <HAL_DMA_Abort_IT+0x1a0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d04a      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f54 <HAL_DMA_Abort_IT+0x1a4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d045      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a59      	ldr	r2, [pc, #356]	@ (8002f58 <HAL_DMA_Abort_IT+0x1a8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d040      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a58      	ldr	r2, [pc, #352]	@ (8002f5c <HAL_DMA_Abort_IT+0x1ac>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d03b      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a56      	ldr	r2, [pc, #344]	@ (8002f60 <HAL_DMA_Abort_IT+0x1b0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d036      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a55      	ldr	r2, [pc, #340]	@ (8002f64 <HAL_DMA_Abort_IT+0x1b4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d031      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a53      	ldr	r2, [pc, #332]	@ (8002f68 <HAL_DMA_Abort_IT+0x1b8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d02c      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a52      	ldr	r2, [pc, #328]	@ (8002f6c <HAL_DMA_Abort_IT+0x1bc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d027      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a50      	ldr	r2, [pc, #320]	@ (8002f70 <HAL_DMA_Abort_IT+0x1c0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d022      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a4f      	ldr	r2, [pc, #316]	@ (8002f74 <HAL_DMA_Abort_IT+0x1c4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d01d      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a4d      	ldr	r2, [pc, #308]	@ (8002f78 <HAL_DMA_Abort_IT+0x1c8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d018      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8002f7c <HAL_DMA_Abort_IT+0x1cc>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d013      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a4a      	ldr	r2, [pc, #296]	@ (8002f80 <HAL_DMA_Abort_IT+0x1d0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00e      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a49      	ldr	r2, [pc, #292]	@ (8002f84 <HAL_DMA_Abort_IT+0x1d4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d009      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a47      	ldr	r2, [pc, #284]	@ (8002f88 <HAL_DMA_Abort_IT+0x1d8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d004      	beq.n	8002e78 <HAL_DMA_Abort_IT+0xc8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a46      	ldr	r2, [pc, #280]	@ (8002f8c <HAL_DMA_Abort_IT+0x1dc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_DMA_Abort_IT+0xcc>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e000      	b.n	8002e7e <HAL_DMA_Abort_IT+0xce>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8086 	beq.w	8002f90 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2204      	movs	r2, #4
 8002e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2f      	ldr	r2, [pc, #188]	@ (8002f50 <HAL_DMA_Abort_IT+0x1a0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d04a      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8002f54 <HAL_DMA_Abort_IT+0x1a4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d045      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f58 <HAL_DMA_Abort_IT+0x1a8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d040      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a2b      	ldr	r2, [pc, #172]	@ (8002f5c <HAL_DMA_Abort_IT+0x1ac>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d03b      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a29      	ldr	r2, [pc, #164]	@ (8002f60 <HAL_DMA_Abort_IT+0x1b0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d036      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a28      	ldr	r2, [pc, #160]	@ (8002f64 <HAL_DMA_Abort_IT+0x1b4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d031      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a26      	ldr	r2, [pc, #152]	@ (8002f68 <HAL_DMA_Abort_IT+0x1b8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d02c      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a25      	ldr	r2, [pc, #148]	@ (8002f6c <HAL_DMA_Abort_IT+0x1bc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d027      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	@ (8002f70 <HAL_DMA_Abort_IT+0x1c0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d022      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a22      	ldr	r2, [pc, #136]	@ (8002f74 <HAL_DMA_Abort_IT+0x1c4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d01d      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a20      	ldr	r2, [pc, #128]	@ (8002f78 <HAL_DMA_Abort_IT+0x1c8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d018      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a1f      	ldr	r2, [pc, #124]	@ (8002f7c <HAL_DMA_Abort_IT+0x1cc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d013      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	@ (8002f80 <HAL_DMA_Abort_IT+0x1d0>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00e      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1c      	ldr	r2, [pc, #112]	@ (8002f84 <HAL_DMA_Abort_IT+0x1d4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d009      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8002f88 <HAL_DMA_Abort_IT+0x1d8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x17c>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a19      	ldr	r2, [pc, #100]	@ (8002f8c <HAL_DMA_Abort_IT+0x1dc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d108      	bne.n	8002f3e <HAL_DMA_Abort_IT+0x18e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e178      	b.n	8003230 <HAL_DMA_Abort_IT+0x480>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e16f      	b.n	8003230 <HAL_DMA_Abort_IT+0x480>
 8002f50:	40020010 	.word	0x40020010
 8002f54:	40020028 	.word	0x40020028
 8002f58:	40020040 	.word	0x40020040
 8002f5c:	40020058 	.word	0x40020058
 8002f60:	40020070 	.word	0x40020070
 8002f64:	40020088 	.word	0x40020088
 8002f68:	400200a0 	.word	0x400200a0
 8002f6c:	400200b8 	.word	0x400200b8
 8002f70:	40020410 	.word	0x40020410
 8002f74:	40020428 	.word	0x40020428
 8002f78:	40020440 	.word	0x40020440
 8002f7c:	40020458 	.word	0x40020458
 8002f80:	40020470 	.word	0x40020470
 8002f84:	40020488 	.word	0x40020488
 8002f88:	400204a0 	.word	0x400204a0
 8002f8c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 020e 	bic.w	r2, r2, #14
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6c      	ldr	r2, [pc, #432]	@ (8003158 <HAL_DMA_Abort_IT+0x3a8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d04a      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6b      	ldr	r2, [pc, #428]	@ (800315c <HAL_DMA_Abort_IT+0x3ac>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d045      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a69      	ldr	r2, [pc, #420]	@ (8003160 <HAL_DMA_Abort_IT+0x3b0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d040      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a68      	ldr	r2, [pc, #416]	@ (8003164 <HAL_DMA_Abort_IT+0x3b4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d03b      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a66      	ldr	r2, [pc, #408]	@ (8003168 <HAL_DMA_Abort_IT+0x3b8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d036      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a65      	ldr	r2, [pc, #404]	@ (800316c <HAL_DMA_Abort_IT+0x3bc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d031      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a63      	ldr	r2, [pc, #396]	@ (8003170 <HAL_DMA_Abort_IT+0x3c0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d02c      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a62      	ldr	r2, [pc, #392]	@ (8003174 <HAL_DMA_Abort_IT+0x3c4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d027      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a60      	ldr	r2, [pc, #384]	@ (8003178 <HAL_DMA_Abort_IT+0x3c8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d022      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a5f      	ldr	r2, [pc, #380]	@ (800317c <HAL_DMA_Abort_IT+0x3cc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d01d      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a5d      	ldr	r2, [pc, #372]	@ (8003180 <HAL_DMA_Abort_IT+0x3d0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d018      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a5c      	ldr	r2, [pc, #368]	@ (8003184 <HAL_DMA_Abort_IT+0x3d4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d013      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a5a      	ldr	r2, [pc, #360]	@ (8003188 <HAL_DMA_Abort_IT+0x3d8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00e      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a59      	ldr	r2, [pc, #356]	@ (800318c <HAL_DMA_Abort_IT+0x3dc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a57      	ldr	r2, [pc, #348]	@ (8003190 <HAL_DMA_Abort_IT+0x3e0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_DMA_Abort_IT+0x290>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a56      	ldr	r2, [pc, #344]	@ (8003194 <HAL_DMA_Abort_IT+0x3e4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d108      	bne.n	8003052 <HAL_DMA_Abort_IT+0x2a2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	e007      	b.n	8003062 <HAL_DMA_Abort_IT+0x2b2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0201 	bic.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a3c      	ldr	r2, [pc, #240]	@ (8003158 <HAL_DMA_Abort_IT+0x3a8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d072      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a3a      	ldr	r2, [pc, #232]	@ (800315c <HAL_DMA_Abort_IT+0x3ac>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d06d      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a39      	ldr	r2, [pc, #228]	@ (8003160 <HAL_DMA_Abort_IT+0x3b0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d068      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a37      	ldr	r2, [pc, #220]	@ (8003164 <HAL_DMA_Abort_IT+0x3b4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d063      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a36      	ldr	r2, [pc, #216]	@ (8003168 <HAL_DMA_Abort_IT+0x3b8>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d05e      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a34      	ldr	r2, [pc, #208]	@ (800316c <HAL_DMA_Abort_IT+0x3bc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d059      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a33      	ldr	r2, [pc, #204]	@ (8003170 <HAL_DMA_Abort_IT+0x3c0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d054      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a31      	ldr	r2, [pc, #196]	@ (8003174 <HAL_DMA_Abort_IT+0x3c4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d04f      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a30      	ldr	r2, [pc, #192]	@ (8003178 <HAL_DMA_Abort_IT+0x3c8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d04a      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a2e      	ldr	r2, [pc, #184]	@ (800317c <HAL_DMA_Abort_IT+0x3cc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d045      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003180 <HAL_DMA_Abort_IT+0x3d0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d040      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003184 <HAL_DMA_Abort_IT+0x3d4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d03b      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2a      	ldr	r2, [pc, #168]	@ (8003188 <HAL_DMA_Abort_IT+0x3d8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d036      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a28      	ldr	r2, [pc, #160]	@ (800318c <HAL_DMA_Abort_IT+0x3dc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d031      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a27      	ldr	r2, [pc, #156]	@ (8003190 <HAL_DMA_Abort_IT+0x3e0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d02c      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a25      	ldr	r2, [pc, #148]	@ (8003194 <HAL_DMA_Abort_IT+0x3e4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d027      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a24      	ldr	r2, [pc, #144]	@ (8003198 <HAL_DMA_Abort_IT+0x3e8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d022      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a22      	ldr	r2, [pc, #136]	@ (800319c <HAL_DMA_Abort_IT+0x3ec>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01d      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a21      	ldr	r2, [pc, #132]	@ (80031a0 <HAL_DMA_Abort_IT+0x3f0>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d018      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a1f      	ldr	r2, [pc, #124]	@ (80031a4 <HAL_DMA_Abort_IT+0x3f4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1e      	ldr	r2, [pc, #120]	@ (80031a8 <HAL_DMA_Abort_IT+0x3f8>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00e      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1c      	ldr	r2, [pc, #112]	@ (80031ac <HAL_DMA_Abort_IT+0x3fc>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a1b      	ldr	r2, [pc, #108]	@ (80031b0 <HAL_DMA_Abort_IT+0x400>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d004      	beq.n	8003152 <HAL_DMA_Abort_IT+0x3a2>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a19      	ldr	r2, [pc, #100]	@ (80031b4 <HAL_DMA_Abort_IT+0x404>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d132      	bne.n	80031b8 <HAL_DMA_Abort_IT+0x408>
 8003152:	2301      	movs	r3, #1
 8003154:	e031      	b.n	80031ba <HAL_DMA_Abort_IT+0x40a>
 8003156:	bf00      	nop
 8003158:	40020010 	.word	0x40020010
 800315c:	40020028 	.word	0x40020028
 8003160:	40020040 	.word	0x40020040
 8003164:	40020058 	.word	0x40020058
 8003168:	40020070 	.word	0x40020070
 800316c:	40020088 	.word	0x40020088
 8003170:	400200a0 	.word	0x400200a0
 8003174:	400200b8 	.word	0x400200b8
 8003178:	40020410 	.word	0x40020410
 800317c:	40020428 	.word	0x40020428
 8003180:	40020440 	.word	0x40020440
 8003184:	40020458 	.word	0x40020458
 8003188:	40020470 	.word	0x40020470
 800318c:	40020488 	.word	0x40020488
 8003190:	400204a0 	.word	0x400204a0
 8003194:	400204b8 	.word	0x400204b8
 8003198:	58025408 	.word	0x58025408
 800319c:	5802541c 	.word	0x5802541c
 80031a0:	58025430 	.word	0x58025430
 80031a4:	58025444 	.word	0x58025444
 80031a8:	58025458 	.word	0x58025458
 80031ac:	5802546c 	.word	0x5802546c
 80031b0:	58025480 	.word	0x58025480
 80031b4:	58025494 	.word	0x58025494
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d028      	beq.n	8003210 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	2201      	movs	r2, #1
 80031de:	409a      	lsls	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003204:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800320e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop

0800323c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	@ 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8003250:	2308      	movs	r3, #8
 8003252:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003254:	4b2f      	ldr	r3, [pc, #188]	@ (8003314 <HAL_FLASH_Program+0xd8>)
 8003256:	7d1b      	ldrb	r3, [r3, #20]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_FLASH_Program+0x24>
 800325c:	2302      	movs	r3, #2
 800325e:	e054      	b.n	800330a <HAL_FLASH_Program+0xce>
 8003260:	4b2c      	ldr	r3, [pc, #176]	@ (8003314 <HAL_FLASH_Program+0xd8>)
 8003262:	2201      	movs	r2, #1
 8003264:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800326c:	d316      	bcc.n	800329c <HAL_FLASH_Program+0x60>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8003274:	d212      	bcs.n	800329c <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8003276:	2301      	movs	r3, #1
 8003278:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800327a:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800327c:	4b25      	ldr	r3, [pc, #148]	@ (8003314 <HAL_FLASH_Program+0xd8>)
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8003282:	6979      	ldr	r1, [r7, #20]
 8003284:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003288:	f000 f882 	bl	8003390 <FLASH_WaitForLastOperation>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8003292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003296:	2b00      	cmp	r3, #0
 8003298:	d132      	bne.n	8003300 <HAL_FLASH_Program+0xc4>
 800329a:	e001      	b.n	80032a0 <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e034      	b.n	800330a <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80032a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003318 <HAL_FLASH_Program+0xdc>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003318 <HAL_FLASH_Program+0xdc>)
 80032a6:	f043 0302 	orr.w	r3, r3, #2
 80032aa:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 80032ac:	f3bf 8f6f 	isb	sy
}
 80032b0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80032b2:	f3bf 8f4f 	dsb	sy
}
 80032b6:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	3304      	adds	r3, #4
 80032c4:	623b      	str	r3, [r7, #32]
        src_addr++;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3304      	adds	r3, #4
 80032ca:	61fb      	str	r3, [r7, #28]
        row_index--;
 80032cc:	7efb      	ldrb	r3, [r7, #27]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 80032d2:	7efb      	ldrb	r3, [r7, #27]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ef      	bne.n	80032b8 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 80032d8:	f3bf 8f6f 	isb	sy
}
 80032dc:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80032de:	f3bf 8f4f 	dsb	sy
}
 80032e2:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80032e4:	6979      	ldr	r1, [r7, #20]
 80032e6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80032ea:	f000 f851 	bl	8003390 <FLASH_WaitForLastOperation>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80032f4:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <HAL_FLASH_Program+0xdc>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a07      	ldr	r2, [pc, #28]	@ (8003318 <HAL_FLASH_Program+0xdc>)
 80032fa:	f023 0302 	bic.w	r3, r3, #2
 80032fe:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003300:	4b04      	ldr	r3, [pc, #16]	@ (8003314 <HAL_FLASH_Program+0xd8>)
 8003302:	2200      	movs	r2, #0
 8003304:	751a      	strb	r2, [r3, #20]

  return status;
 8003306:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800330a:	4618      	mov	r0, r3
 800330c:	3728      	adds	r7, #40	@ 0x28
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2400032c 	.word	0x2400032c
 8003318:	52002000 	.word	0x52002000

0800331c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8003320:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <HAL_FLASH_Unlock+0x38>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800332c:	4b09      	ldr	r3, [pc, #36]	@ (8003354 <HAL_FLASH_Unlock+0x38>)
 800332e:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <HAL_FLASH_Unlock+0x3c>)
 8003330:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8003332:	4b08      	ldr	r3, [pc, #32]	@ (8003354 <HAL_FLASH_Unlock+0x38>)
 8003334:	4a09      	ldr	r2, [pc, #36]	@ (800335c <HAL_FLASH_Unlock+0x40>)
 8003336:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8003338:	4b06      	ldr	r3, [pc, #24]	@ (8003354 <HAL_FLASH_Unlock+0x38>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	52002000 	.word	0x52002000
 8003358:	45670123 	.word	0x45670123
 800335c:	cdef89ab 	.word	0xcdef89ab

08003360 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8003364:	4b09      	ldr	r3, [pc, #36]	@ (800338c <HAL_FLASH_Lock+0x2c>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a08      	ldr	r2, [pc, #32]	@ (800338c <HAL_FLASH_Lock+0x2c>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8003370:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_FLASH_Lock+0x2c>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	52002000 	.word	0x52002000

08003390 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800339a:	2304      	movs	r3, #4
 800339c:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033a2:	f7ff f883 	bl	80024ac <HAL_GetTick>
 80033a6:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80033a8:	e010      	b.n	80033cc <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d00c      	beq.n	80033cc <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7ff f87b 	bl	80024ac <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <FLASH_WaitForLastOperation+0x38>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e02d      	b.n	8003428 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80033cc:	4b18      	ldr	r3, [pc, #96]	@ (8003430 <FLASH_WaitForLastOperation+0xa0>)
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d0e7      	beq.n	80033aa <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d104      	bne.n	80033ea <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80033e0:	4b13      	ldr	r3, [pc, #76]	@ (8003430 <FLASH_WaitForLastOperation+0xa0>)
 80033e2:	691a      	ldr	r2, [r3, #16]
 80033e4:	4b13      	ldr	r3, [pc, #76]	@ (8003434 <FLASH_WaitForLastOperation+0xa4>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80033f4:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <FLASH_WaitForLastOperation+0xa8>)
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003438 <FLASH_WaitForLastOperation+0xa8>)
 80033fe:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8003400:	4a0b      	ldr	r2, [pc, #44]	@ (8003430 <FLASH_WaitForLastOperation+0xa0>)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e00e      	b.n	8003428 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d10a      	bne.n	8003426 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8003410:	4b07      	ldr	r3, [pc, #28]	@ (8003430 <FLASH_WaitForLastOperation+0xa0>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800341c:	d103      	bne.n	8003426 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800341e:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <FLASH_WaitForLastOperation+0xa0>)
 8003420:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003424:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	52002000 	.word	0x52002000
 8003434:	17ee0000 	.word	0x17ee0000
 8003438:	2400032c 	.word	0x2400032c

0800343c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800344a:	4b3f      	ldr	r3, [pc, #252]	@ (8003548 <HAL_FLASHEx_Erase+0x10c>)
 800344c:	7d1b      	ldrb	r3, [r3, #20]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d101      	bne.n	8003456 <HAL_FLASHEx_Erase+0x1a>
 8003452:	2302      	movs	r3, #2
 8003454:	e074      	b.n	8003540 <HAL_FLASHEx_Erase+0x104>
 8003456:	4b3c      	ldr	r3, [pc, #240]	@ (8003548 <HAL_FLASHEx_Erase+0x10c>)
 8003458:	2201      	movs	r2, #1
 800345a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800345c:	4b3a      	ldr	r3, [pc, #232]	@ (8003548 <HAL_FLASHEx_Erase+0x10c>)
 800345e:	2200      	movs	r2, #0
 8003460:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800346e:	2101      	movs	r1, #1
 8003470:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003474:	f7ff ff8c 	bl	8003390 <FLASH_WaitForLastOperation>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d157      	bne.n	8003538 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d11e      	bne.n	80034ce <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4619      	mov	r1, r3
 800349a:	4610      	mov	r0, r2
 800349c:	f000 f85a 	bl	8003554 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d045      	beq.n	8003538 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80034ac:	2101      	movs	r1, #1
 80034ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80034b2:	f7ff ff6d 	bl	8003390 <FLASH_WaitForLastOperation>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80034c0:	4b22      	ldr	r3, [pc, #136]	@ (800354c <HAL_FLASHEx_Erase+0x110>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a21      	ldr	r2, [pc, #132]	@ (800354c <HAL_FLASHEx_Erase+0x110>)
 80034c6:	f023 0308 	bic.w	r3, r3, #8
 80034ca:	60d3      	str	r3, [r2, #12]
 80034cc:	e034      	b.n	8003538 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	e024      	b.n	8003528 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6859      	ldr	r1, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	461a      	mov	r2, r3
 80034e8:	68b8      	ldr	r0, [r7, #8]
 80034ea:	f000 f857 	bl	800359c <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80034fa:	2101      	movs	r1, #1
 80034fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003500:	f7ff ff46 	bl	8003390 <FLASH_WaitForLastOperation>
 8003504:	4603      	mov	r3, r0
 8003506:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8003508:	4b10      	ldr	r3, [pc, #64]	@ (800354c <HAL_FLASHEx_Erase+0x110>)
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	490f      	ldr	r1, [pc, #60]	@ (800354c <HAL_FLASHEx_Erase+0x110>)
 800350e:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <HAL_FLASHEx_Erase+0x114>)
 8003510:	4013      	ands	r3, r2
 8003512:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	601a      	str	r2, [r3, #0]
          break;
 8003520:	e00a      	b.n	8003538 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3301      	adds	r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4413      	add	r3, r2
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d3d2      	bcc.n	80034de <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003538:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <HAL_FLASHEx_Erase+0x10c>)
 800353a:	2200      	movs	r2, #0
 800353c:	751a      	strb	r2, [r3, #20]

  return status;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	2400032c 	.word	0x2400032c
 800354c:	52002000 	.word	0x52002000
 8003550:	fffff8fb 	.word	0xfffff8fb

08003554 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d011      	beq.n	800358c <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8003568:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <FLASH_MassErase+0x44>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a0a      	ldr	r2, [pc, #40]	@ (8003598 <FLASH_MassErase+0x44>)
 800356e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003572:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8003574:	4b08      	ldr	r3, [pc, #32]	@ (8003598 <FLASH_MassErase+0x44>)
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	4907      	ldr	r1, [pc, #28]	@ (8003598 <FLASH_MassErase+0x44>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4313      	orrs	r3, r2
 800357e:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8003580:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <FLASH_MassErase+0x44>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4a04      	ldr	r2, [pc, #16]	@ (8003598 <FLASH_MassErase+0x44>)
 8003586:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800358a:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	52002000 	.word	0x52002000

0800359c <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80035b2:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <FLASH_Erase_Sector+0x44>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	4a0a      	ldr	r2, [pc, #40]	@ (80035e0 <FLASH_Erase_Sector+0x44>)
 80035b8:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 80035bc:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80035be:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <FLASH_Erase_Sector+0x44>)
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	0219      	lsls	r1, r3, #8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	4a04      	ldr	r2, [pc, #16]	@ (80035e0 <FLASH_Erase_Sector+0x44>)
 80035ce:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80035d2:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	52002000 	.word	0x52002000

080035e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	@ 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035f2:	4b86      	ldr	r3, [pc, #536]	@ (800380c <HAL_GPIO_Init+0x228>)
 80035f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035f6:	e18c      	b.n	8003912 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	2101      	movs	r1, #1
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 817e 	beq.w	800390c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d005      	beq.n	8003628 <HAL_GPIO_Init+0x44>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d130      	bne.n	800368a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	2203      	movs	r2, #3
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4313      	orrs	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800365e:	2201      	movs	r2, #1
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 0201 	and.w	r2, r3, #1
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b03      	cmp	r3, #3
 8003694:	d017      	beq.n	80036c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	2203      	movs	r2, #3
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	4013      	ands	r3, r2
 80036ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d123      	bne.n	800371a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	08da      	lsrs	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3208      	adds	r2, #8
 80036da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	220f      	movs	r2, #15
 80036ea:	fa02 f303 	lsl.w	r3, r2, r3
 80036ee:	43db      	mvns	r3, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4013      	ands	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3208      	adds	r2, #8
 8003714:	69b9      	ldr	r1, [r7, #24]
 8003716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	2203      	movs	r2, #3
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0203 	and.w	r2, r3, #3
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80d8 	beq.w	800390c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800375c:	4b2c      	ldr	r3, [pc, #176]	@ (8003810 <HAL_GPIO_Init+0x22c>)
 800375e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003762:	4a2b      	ldr	r2, [pc, #172]	@ (8003810 <HAL_GPIO_Init+0x22c>)
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800376c:	4b28      	ldr	r3, [pc, #160]	@ (8003810 <HAL_GPIO_Init+0x22c>)
 800376e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800377a:	4a26      	ldr	r2, [pc, #152]	@ (8003814 <HAL_GPIO_Init+0x230>)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	3302      	adds	r3, #2
 8003782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	220f      	movs	r2, #15
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4013      	ands	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <HAL_GPIO_Init+0x234>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04a      	beq.n	800383c <HAL_GPIO_Init+0x258>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <HAL_GPIO_Init+0x238>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02b      	beq.n	8003806 <HAL_GPIO_Init+0x222>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003820 <HAL_GPIO_Init+0x23c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d025      	beq.n	8003802 <HAL_GPIO_Init+0x21e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003824 <HAL_GPIO_Init+0x240>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01f      	beq.n	80037fe <HAL_GPIO_Init+0x21a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <HAL_GPIO_Init+0x244>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d019      	beq.n	80037fa <HAL_GPIO_Init+0x216>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a18      	ldr	r2, [pc, #96]	@ (800382c <HAL_GPIO_Init+0x248>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_GPIO_Init+0x212>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a17      	ldr	r2, [pc, #92]	@ (8003830 <HAL_GPIO_Init+0x24c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00d      	beq.n	80037f2 <HAL_GPIO_Init+0x20e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a16      	ldr	r2, [pc, #88]	@ (8003834 <HAL_GPIO_Init+0x250>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <HAL_GPIO_Init+0x20a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a15      	ldr	r2, [pc, #84]	@ (8003838 <HAL_GPIO_Init+0x254>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_GPIO_Init+0x206>
 80037e6:	2309      	movs	r3, #9
 80037e8:	e029      	b.n	800383e <HAL_GPIO_Init+0x25a>
 80037ea:	230a      	movs	r3, #10
 80037ec:	e027      	b.n	800383e <HAL_GPIO_Init+0x25a>
 80037ee:	2307      	movs	r3, #7
 80037f0:	e025      	b.n	800383e <HAL_GPIO_Init+0x25a>
 80037f2:	2306      	movs	r3, #6
 80037f4:	e023      	b.n	800383e <HAL_GPIO_Init+0x25a>
 80037f6:	2305      	movs	r3, #5
 80037f8:	e021      	b.n	800383e <HAL_GPIO_Init+0x25a>
 80037fa:	2304      	movs	r3, #4
 80037fc:	e01f      	b.n	800383e <HAL_GPIO_Init+0x25a>
 80037fe:	2303      	movs	r3, #3
 8003800:	e01d      	b.n	800383e <HAL_GPIO_Init+0x25a>
 8003802:	2302      	movs	r3, #2
 8003804:	e01b      	b.n	800383e <HAL_GPIO_Init+0x25a>
 8003806:	2301      	movs	r3, #1
 8003808:	e019      	b.n	800383e <HAL_GPIO_Init+0x25a>
 800380a:	bf00      	nop
 800380c:	58000080 	.word	0x58000080
 8003810:	58024400 	.word	0x58024400
 8003814:	58000400 	.word	0x58000400
 8003818:	58020000 	.word	0x58020000
 800381c:	58020400 	.word	0x58020400
 8003820:	58020800 	.word	0x58020800
 8003824:	58020c00 	.word	0x58020c00
 8003828:	58021000 	.word	0x58021000
 800382c:	58021400 	.word	0x58021400
 8003830:	58021800 	.word	0x58021800
 8003834:	58021c00 	.word	0x58021c00
 8003838:	58022400 	.word	0x58022400
 800383c:	2300      	movs	r3, #0
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	f002 0203 	and.w	r2, r2, #3
 8003844:	0092      	lsls	r2, r2, #2
 8003846:	4093      	lsls	r3, r2
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4313      	orrs	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800384e:	4938      	ldr	r1, [pc, #224]	@ (8003930 <HAL_GPIO_Init+0x34c>)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	089b      	lsrs	r3, r3, #2
 8003854:	3302      	adds	r3, #2
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3301      	adds	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	f47f ae6b 	bne.w	80035f8 <HAL_GPIO_Init+0x14>
  }
}
 8003922:	bf00      	nop
 8003924:	bf00      	nop
 8003926:	3724      	adds	r7, #36	@ 0x24
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	58000400 	.word	0x58000400

08003934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
 8003940:	4613      	mov	r3, r2
 8003942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003944:	787b      	ldrb	r3, [r7, #1]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800394a:	887a      	ldrh	r2, [r7, #2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003950:	e003      	b.n	800395a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	041a      	lsls	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
	...

08003968 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003970:	4b19      	ldr	r3, [pc, #100]	@ (80039d8 <HAL_PWREx_ConfigSupply+0x70>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d00a      	beq.n	8003992 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800397c:	4b16      	ldr	r3, [pc, #88]	@ (80039d8 <HAL_PWREx_ConfigSupply+0x70>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e01f      	b.n	80039ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e01d      	b.n	80039ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003992:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <HAL_PWREx_ConfigSupply+0x70>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f023 0207 	bic.w	r2, r3, #7
 800399a:	490f      	ldr	r1, [pc, #60]	@ (80039d8 <HAL_PWREx_ConfigSupply+0x70>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80039a2:	f7fe fd83 	bl	80024ac <HAL_GetTick>
 80039a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039a8:	e009      	b.n	80039be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80039aa:	f7fe fd7f 	bl	80024ac <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039b8:	d901      	bls.n	80039be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e007      	b.n	80039ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80039be:	4b06      	ldr	r3, [pc, #24]	@ (80039d8 <HAL_PWREx_ConfigSupply+0x70>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039ca:	d1ee      	bne.n	80039aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	58024800 	.word	0x58024800

080039dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	@ 0x30
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e3c8      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 8087 	beq.w	8003b0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fc:	4b88      	ldr	r3, [pc, #544]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a06:	4b86      	ldr	r3, [pc, #536]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d007      	beq.n	8003a22 <HAL_RCC_OscConfig+0x46>
 8003a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a14:	2b18      	cmp	r3, #24
 8003a16:	d110      	bne.n	8003a3a <HAL_RCC_OscConfig+0x5e>
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d10b      	bne.n	8003a3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a22:	4b7f      	ldr	r3, [pc, #508]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d06c      	beq.n	8003b08 <HAL_RCC_OscConfig+0x12c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d168      	bne.n	8003b08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e3a2      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a42:	d106      	bne.n	8003a52 <HAL_RCC_OscConfig+0x76>
 8003a44:	4b76      	ldr	r3, [pc, #472]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a75      	ldr	r2, [pc, #468]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	e02e      	b.n	8003ab0 <HAL_RCC_OscConfig+0xd4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x98>
 8003a5a:	4b71      	ldr	r3, [pc, #452]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a70      	ldr	r2, [pc, #448]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	4b6e      	ldr	r3, [pc, #440]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6d      	ldr	r2, [pc, #436]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e01d      	b.n	8003ab0 <HAL_RCC_OscConfig+0xd4>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0xbc>
 8003a7e:	4b68      	ldr	r3, [pc, #416]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a67      	ldr	r2, [pc, #412]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b65      	ldr	r3, [pc, #404]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a64      	ldr	r2, [pc, #400]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCC_OscConfig+0xd4>
 8003a98:	4b61      	ldr	r3, [pc, #388]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a60      	ldr	r2, [pc, #384]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5d      	ldr	r2, [pc, #372]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d013      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fcf8 	bl	80024ac <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fcf4 	bl	80024ac <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	@ 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e356      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ad2:	4b53      	ldr	r3, [pc, #332]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0xe4>
 8003ade:	e014      	b.n	8003b0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fe fce4 	bl	80024ac <HAL_GetTick>
 8003ae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae8:	f7fe fce0 	bl	80024ac <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b64      	cmp	r3, #100	@ 0x64
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e342      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003afa:	4b49      	ldr	r3, [pc, #292]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x10c>
 8003b06:	e000      	b.n	8003b0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 808c 	beq.w	8003c30 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b18:	4b41      	ldr	r3, [pc, #260]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b22:	4b3f      	ldr	r3, [pc, #252]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_RCC_OscConfig+0x162>
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	2b18      	cmp	r3, #24
 8003b32:	d137      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1c8>
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d132      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b3e:	4b38      	ldr	r3, [pc, #224]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_RCC_OscConfig+0x17a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e314      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b56:	4b32      	ldr	r3, [pc, #200]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 0219 	bic.w	r2, r3, #25
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	492f      	ldr	r1, [pc, #188]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe fca0 	bl	80024ac <HAL_GetTick>
 8003b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b70:	f7fe fc9c 	bl	80024ac <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e2fe      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b82:	4b27      	ldr	r3, [pc, #156]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8e:	4b24      	ldr	r3, [pc, #144]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	4920      	ldr	r1, [pc, #128]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ba2:	e045      	b.n	8003c30 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d026      	beq.n	8003bfa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bac:	4b1c      	ldr	r3, [pc, #112]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 0219 	bic.w	r2, r3, #25
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4919      	ldr	r1, [pc, #100]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbe:	f7fe fc75 	bl	80024ac <HAL_GetTick>
 8003bc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc6:	f7fe fc71 	bl	80024ac <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e2d3      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd8:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	061b      	lsls	r3, r3, #24
 8003bf2:	490b      	ldr	r1, [pc, #44]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
 8003bf8:	e01a      	b.n	8003c30 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bfa:	4b09      	ldr	r3, [pc, #36]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a08      	ldr	r2, [pc, #32]	@ (8003c20 <HAL_RCC_OscConfig+0x244>)
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fe fc51 	bl	80024ac <HAL_GetTick>
 8003c0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0e:	f7fe fc4d 	bl	80024ac <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d903      	bls.n	8003c24 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e2af      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
 8003c20:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c24:	4b96      	ldr	r3, [pc, #600]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1ee      	bne.n	8003c0e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0310 	and.w	r3, r3, #16
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d06a      	beq.n	8003d12 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c3c:	4b90      	ldr	r3, [pc, #576]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c44:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c46:	4b8e      	ldr	r3, [pc, #568]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d007      	beq.n	8003c62 <HAL_RCC_OscConfig+0x286>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b18      	cmp	r3, #24
 8003c56:	d11b      	bne.n	8003c90 <HAL_RCC_OscConfig+0x2b4>
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d116      	bne.n	8003c90 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c62:	4b87      	ldr	r3, [pc, #540]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x29e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	2b80      	cmp	r3, #128	@ 0x80
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e282      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c7a:	4b81      	ldr	r3, [pc, #516]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	497d      	ldr	r1, [pc, #500]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c8e:	e040      	b.n	8003d12 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d023      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c98:	4b79      	ldr	r3, [pc, #484]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a78      	ldr	r2, [pc, #480]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fc02 	bl	80024ac <HAL_GetTick>
 8003ca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cac:	f7fe fbfe 	bl	80024ac <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e260      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cbe:	4b70      	ldr	r3, [pc, #448]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cca:	4b6d      	ldr	r3, [pc, #436]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	4969      	ldr	r1, [pc, #420]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60cb      	str	r3, [r1, #12]
 8003cde:	e018      	b.n	8003d12 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003ce0:	4b67      	ldr	r3, [pc, #412]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a66      	ldr	r2, [pc, #408]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fe fbde 	bl	80024ac <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cf4:	f7fe fbda 	bl	80024ac <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e23c      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d06:	4b5e      	ldr	r3, [pc, #376]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d036      	beq.n	8003d8c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d019      	beq.n	8003d5a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d26:	4b56      	ldr	r3, [pc, #344]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d2a:	4a55      	ldr	r2, [pc, #340]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fe fbbb 	bl	80024ac <HAL_GetTick>
 8003d36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3a:	f7fe fbb7 	bl	80024ac <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e219      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x35e>
 8003d58:	e018      	b.n	8003d8c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5a:	4b49      	ldr	r3, [pc, #292]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d5e:	4a48      	ldr	r2, [pc, #288]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fe fba1 	bl	80024ac <HAL_GetTick>
 8003d6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fe fb9d 	bl	80024ac <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e1ff      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d80:	4b3f      	ldr	r3, [pc, #252]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003d82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f0      	bne.n	8003d6e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0320 	and.w	r3, r3, #32
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d036      	beq.n	8003e06 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d019      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003da0:	4b37      	ldr	r3, [pc, #220]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a36      	ldr	r2, [pc, #216]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003da6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003daa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dac:	f7fe fb7e 	bl	80024ac <HAL_GetTick>
 8003db0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003db4:	f7fe fb7a 	bl	80024ac <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e1dc      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x3d8>
 8003dd2:	e018      	b.n	8003e06 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a29      	ldr	r2, [pc, #164]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003dda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003de0:	f7fe fb64 	bl	80024ac <HAL_GetTick>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003de8:	f7fe fb60 	bl	80024ac <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e1c2      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dfa:	4b21      	ldr	r3, [pc, #132]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8086 	beq.w	8003f20 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e14:	4b1b      	ldr	r3, [pc, #108]	@ (8003e84 <HAL_RCC_OscConfig+0x4a8>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1a      	ldr	r2, [pc, #104]	@ (8003e84 <HAL_RCC_OscConfig+0x4a8>)
 8003e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e20:	f7fe fb44 	bl	80024ac <HAL_GetTick>
 8003e24:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e28:	f7fe fb40 	bl	80024ac <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b64      	cmp	r3, #100	@ 0x64
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e1a2      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3a:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <HAL_RCC_OscConfig+0x4a8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d106      	bne.n	8003e5c <HAL_RCC_OscConfig+0x480>
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	4a0b      	ldr	r2, [pc, #44]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5a:	e032      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e6>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d111      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4ac>
 8003e64:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e68:	4a05      	ldr	r2, [pc, #20]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003e6a:	f023 0301 	bic.w	r3, r3, #1
 8003e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e70:	4b03      	ldr	r3, [pc, #12]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e74:	4a02      	ldr	r2, [pc, #8]	@ (8003e80 <HAL_RCC_OscConfig+0x4a4>)
 8003e76:	f023 0304 	bic.w	r3, r3, #4
 8003e7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e7c:	e021      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e6>
 8003e7e:	bf00      	nop
 8003e80:	58024400 	.word	0x58024400
 8003e84:	58024800 	.word	0x58024800
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d10c      	bne.n	8003eaa <HAL_RCC_OscConfig+0x4ce>
 8003e90:	4b83      	ldr	r3, [pc, #524]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e94:	4a82      	ldr	r2, [pc, #520]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003e96:	f043 0304 	orr.w	r3, r3, #4
 8003e9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e9c:	4b80      	ldr	r3, [pc, #512]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea0:	4a7f      	ldr	r2, [pc, #508]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea8:	e00b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e6>
 8003eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	4a7c      	ldr	r2, [pc, #496]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	4a79      	ldr	r2, [pc, #484]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d015      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eca:	f7fe faef 	bl	80024ac <HAL_GetTick>
 8003ece:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fe faeb 	bl	80024ac <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e14b      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee8:	4b6d      	ldr	r3, [pc, #436]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ee      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x4f6>
 8003ef4:	e014      	b.n	8003f20 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fe fad9 	bl	80024ac <HAL_GetTick>
 8003efa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003efc:	e00a      	b.n	8003f14 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe fad5 	bl	80024ac <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e135      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f14:	4b62      	ldr	r3, [pc, #392]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ee      	bne.n	8003efe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 812a 	beq.w	800417e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f32:	2b18      	cmp	r3, #24
 8003f34:	f000 80ba 	beq.w	80040ac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	f040 8095 	bne.w	800406c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f42:	4b57      	ldr	r3, [pc, #348]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a56      	ldr	r2, [pc, #344]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003f48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7fe faad 	bl	80024ac <HAL_GetTick>
 8003f52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe faa9 	bl	80024ac <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e10b      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f68:	4b4d      	ldr	r3, [pc, #308]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f74:	4b4a      	ldr	r3, [pc, #296]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003f76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f78:	4b4a      	ldr	r3, [pc, #296]	@ (80040a4 <HAL_RCC_OscConfig+0x6c8>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f84:	0112      	lsls	r2, r2, #4
 8003f86:	430a      	orrs	r2, r1
 8003f88:	4945      	ldr	r1, [pc, #276]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	3b01      	subs	r3, #1
 8003f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	025b      	lsls	r3, r3, #9
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fb0:	431a      	orrs	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	061b      	lsls	r3, r3, #24
 8003fba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fbe:	4938      	ldr	r1, [pc, #224]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003fc4:	4b36      	ldr	r3, [pc, #216]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	4a35      	ldr	r2, [pc, #212]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003fd0:	4b33      	ldr	r3, [pc, #204]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003fd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fd4:	4b34      	ldr	r3, [pc, #208]	@ (80040a8 <HAL_RCC_OscConfig+0x6cc>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003fdc:	00d2      	lsls	r2, r2, #3
 8003fde:	4930      	ldr	r1, [pc, #192]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	f023 020c 	bic.w	r2, r3, #12
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	492b      	ldr	r1, [pc, #172]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8003ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffa:	f023 0202 	bic.w	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	4927      	ldr	r1, [pc, #156]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8004004:	4313      	orrs	r3, r2
 8004006:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004008:	4b25      	ldr	r3, [pc, #148]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	4a24      	ldr	r2, [pc, #144]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 800400e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004014:	4b22      	ldr	r3, [pc, #136]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	4a21      	ldr	r2, [pc, #132]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 800401a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800401e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004020:	4b1f      	ldr	r3, [pc, #124]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	4a1e      	ldr	r2, [pc, #120]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8004026:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800402a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800402c:	4b1c      	ldr	r3, [pc, #112]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	4a1b      	ldr	r2, [pc, #108]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004038:	4b19      	ldr	r3, [pc, #100]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a18      	ldr	r2, [pc, #96]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 800403e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fe fa32 	bl	80024ac <HAL_GetTick>
 8004048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800404a:	e008      	b.n	800405e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404c:	f7fe fa2e 	bl	80024ac <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d901      	bls.n	800405e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e090      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d0f0      	beq.n	800404c <HAL_RCC_OscConfig+0x670>
 800406a:	e088      	b.n	800417e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406c:	4b0c      	ldr	r3, [pc, #48]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0b      	ldr	r2, [pc, #44]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8004072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fe fa18 	bl	80024ac <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004080:	f7fe fa14 	bl	80024ac <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e076      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004092:	4b03      	ldr	r3, [pc, #12]	@ (80040a0 <HAL_RCC_OscConfig+0x6c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x6a4>
 800409e:	e06e      	b.n	800417e <HAL_RCC_OscConfig+0x7a2>
 80040a0:	58024400 	.word	0x58024400
 80040a4:	fffffc0c 	.word	0xfffffc0c
 80040a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80040ac:	4b36      	ldr	r3, [pc, #216]	@ (8004188 <HAL_RCC_OscConfig+0x7ac>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80040b2:	4b35      	ldr	r3, [pc, #212]	@ (8004188 <HAL_RCC_OscConfig+0x7ac>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d031      	beq.n	8004124 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f003 0203 	and.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d12a      	bne.n	8004124 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d122      	bne.n	8004124 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d11a      	bne.n	8004124 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	0a5b      	lsrs	r3, r3, #9
 80040f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d111      	bne.n	8004124 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	0c1b      	lsrs	r3, r3, #16
 8004104:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800410e:	429a      	cmp	r2, r3
 8004110:	d108      	bne.n	8004124 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	0e1b      	lsrs	r3, r3, #24
 8004116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e02b      	b.n	8004180 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004128:	4b17      	ldr	r3, [pc, #92]	@ (8004188 <HAL_RCC_OscConfig+0x7ac>)
 800412a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412c:	08db      	lsrs	r3, r3, #3
 800412e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004132:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	429a      	cmp	r2, r3
 800413c:	d01f      	beq.n	800417e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800413e:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <HAL_RCC_OscConfig+0x7ac>)
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	4a11      	ldr	r2, [pc, #68]	@ (8004188 <HAL_RCC_OscConfig+0x7ac>)
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800414a:	f7fe f9af 	bl	80024ac <HAL_GetTick>
 800414e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004150:	bf00      	nop
 8004152:	f7fe f9ab 	bl	80024ac <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415a:	4293      	cmp	r3, r2
 800415c:	d0f9      	beq.n	8004152 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800415e:	4b0a      	ldr	r3, [pc, #40]	@ (8004188 <HAL_RCC_OscConfig+0x7ac>)
 8004160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004162:	4b0a      	ldr	r3, [pc, #40]	@ (800418c <HAL_RCC_OscConfig+0x7b0>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800416a:	00d2      	lsls	r2, r2, #3
 800416c:	4906      	ldr	r1, [pc, #24]	@ (8004188 <HAL_RCC_OscConfig+0x7ac>)
 800416e:	4313      	orrs	r3, r2
 8004170:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004172:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCC_OscConfig+0x7ac>)
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	4a04      	ldr	r2, [pc, #16]	@ (8004188 <HAL_RCC_OscConfig+0x7ac>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3730      	adds	r7, #48	@ 0x30
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	58024400 	.word	0x58024400
 800418c:	ffff0007 	.word	0xffff0007

08004190 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e19c      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041a4:	4b8a      	ldr	r3, [pc, #552]	@ (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d910      	bls.n	80041d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b87      	ldr	r3, [pc, #540]	@ (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f023 020f 	bic.w	r2, r3, #15
 80041ba:	4985      	ldr	r1, [pc, #532]	@ (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c2:	4b83      	ldr	r3, [pc, #524]	@ (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d001      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e184      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	4b7b      	ldr	r3, [pc, #492]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d908      	bls.n	8004202 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041f0:	4b78      	ldr	r3, [pc, #480]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	4975      	ldr	r1, [pc, #468]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d010      	beq.n	8004230 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	4b70      	ldr	r3, [pc, #448]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800421a:	429a      	cmp	r2, r3
 800421c:	d908      	bls.n	8004230 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800421e:	4b6d      	ldr	r3, [pc, #436]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	496a      	ldr	r1, [pc, #424]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800422c:	4313      	orrs	r3, r2
 800422e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d010      	beq.n	800425e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	4b64      	ldr	r3, [pc, #400]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004248:	429a      	cmp	r2, r3
 800424a:	d908      	bls.n	800425e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800424c:	4b61      	ldr	r3, [pc, #388]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	495e      	ldr	r1, [pc, #376]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800425a:	4313      	orrs	r3, r2
 800425c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	4b59      	ldr	r3, [pc, #356]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004276:	429a      	cmp	r2, r3
 8004278:	d908      	bls.n	800428c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800427a:	4b56      	ldr	r3, [pc, #344]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4953      	ldr	r1, [pc, #332]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004288:	4313      	orrs	r3, r2
 800428a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d010      	beq.n	80042ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	4b4d      	ldr	r3, [pc, #308]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d908      	bls.n	80042ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a8:	4b4a      	ldr	r3, [pc, #296]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f023 020f 	bic.w	r2, r3, #15
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4947      	ldr	r1, [pc, #284]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d055      	beq.n	8004372 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042c6:	4b43      	ldr	r3, [pc, #268]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	4940      	ldr	r1, [pc, #256]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d107      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042e0:	4b3c      	ldr	r3, [pc, #240]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d121      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0f6      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d107      	bne.n	8004308 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042f8:	4b36      	ldr	r3, [pc, #216]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d115      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0ea      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004310:	4b30      	ldr	r3, [pc, #192]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0de      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004320:	4b2c      	ldr	r3, [pc, #176]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0d6      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004330:	4b28      	ldr	r3, [pc, #160]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f023 0207 	bic.w	r2, r3, #7
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4925      	ldr	r1, [pc, #148]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800433e:	4313      	orrs	r3, r2
 8004340:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004342:	f7fe f8b3 	bl	80024ac <HAL_GetTick>
 8004346:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004348:	e00a      	b.n	8004360 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800434a:	f7fe f8af 	bl	80024ac <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0be      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004360:	4b1c      	ldr	r3, [pc, #112]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	429a      	cmp	r2, r3
 8004370:	d1eb      	bne.n	800434a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	4b14      	ldr	r3, [pc, #80]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	429a      	cmp	r2, r3
 800438c:	d208      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438e:	4b11      	ldr	r3, [pc, #68]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f023 020f 	bic.w	r2, r3, #15
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	490e      	ldr	r1, [pc, #56]	@ (80043d4 <HAL_RCC_ClockConfig+0x244>)
 800439c:	4313      	orrs	r3, r2
 800439e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a0:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d214      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b08      	ldr	r3, [pc, #32]	@ (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 020f 	bic.w	r2, r3, #15
 80043b6:	4906      	ldr	r1, [pc, #24]	@ (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b04      	ldr	r3, [pc, #16]	@ (80043d0 <HAL_RCC_ClockConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e086      	b.n	80044de <HAL_RCC_ClockConfig+0x34e>
 80043d0:	52002000 	.word	0x52002000
 80043d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d010      	beq.n	8004406 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	4b3f      	ldr	r3, [pc, #252]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d208      	bcs.n	8004406 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043f4:	4b3c      	ldr	r3, [pc, #240]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4939      	ldr	r1, [pc, #228]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004402:	4313      	orrs	r3, r2
 8004404:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800441e:	429a      	cmp	r2, r3
 8004420:	d208      	bcs.n	8004434 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004422:	4b31      	ldr	r3, [pc, #196]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	492e      	ldr	r1, [pc, #184]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004430:	4313      	orrs	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d010      	beq.n	8004462 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	4b28      	ldr	r3, [pc, #160]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800444c:	429a      	cmp	r2, r3
 800444e:	d208      	bcs.n	8004462 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004450:	4b25      	ldr	r3, [pc, #148]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4922      	ldr	r1, [pc, #136]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 800445e:	4313      	orrs	r3, r2
 8004460:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d010      	beq.n	8004490 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	4b1d      	ldr	r3, [pc, #116]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800447a:	429a      	cmp	r2, r3
 800447c:	d208      	bcs.n	8004490 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800447e:	4b1a      	ldr	r3, [pc, #104]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	4917      	ldr	r1, [pc, #92]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 800448c:	4313      	orrs	r3, r2
 800448e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004490:	f000 f834 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	4912      	ldr	r1, [pc, #72]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044ae:	4b0e      	ldr	r3, [pc, #56]	@ (80044e8 <HAL_RCC_ClockConfig+0x358>)
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	4a0d      	ldr	r2, [pc, #52]	@ (80044ec <HAL_RCC_ClockConfig+0x35c>)
 80044b8:	5cd3      	ldrb	r3, [r2, r3]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	4a0a      	ldr	r2, [pc, #40]	@ (80044f0 <HAL_RCC_ClockConfig+0x360>)
 80044c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044c8:	4a0a      	ldr	r2, [pc, #40]	@ (80044f4 <HAL_RCC_ClockConfig+0x364>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80044ce:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <HAL_RCC_ClockConfig+0x368>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fcac 	bl	8001e30 <HAL_InitTick>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	58024400 	.word	0x58024400
 80044ec:	08016a04 	.word	0x08016a04
 80044f0:	24000024 	.word	0x24000024
 80044f4:	24000020 	.word	0x24000020
 80044f8:	24000028 	.word	0x24000028

080044fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	@ 0x24
 8004500:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004502:	4bb3      	ldr	r3, [pc, #716]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800450a:	2b18      	cmp	r3, #24
 800450c:	f200 8155 	bhi.w	80047ba <HAL_RCC_GetSysClockFreq+0x2be>
 8004510:	a201      	add	r2, pc, #4	@ (adr r2, 8004518 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800457d 	.word	0x0800457d
 800451c:	080047bb 	.word	0x080047bb
 8004520:	080047bb 	.word	0x080047bb
 8004524:	080047bb 	.word	0x080047bb
 8004528:	080047bb 	.word	0x080047bb
 800452c:	080047bb 	.word	0x080047bb
 8004530:	080047bb 	.word	0x080047bb
 8004534:	080047bb 	.word	0x080047bb
 8004538:	080045a3 	.word	0x080045a3
 800453c:	080047bb 	.word	0x080047bb
 8004540:	080047bb 	.word	0x080047bb
 8004544:	080047bb 	.word	0x080047bb
 8004548:	080047bb 	.word	0x080047bb
 800454c:	080047bb 	.word	0x080047bb
 8004550:	080047bb 	.word	0x080047bb
 8004554:	080047bb 	.word	0x080047bb
 8004558:	080045a9 	.word	0x080045a9
 800455c:	080047bb 	.word	0x080047bb
 8004560:	080047bb 	.word	0x080047bb
 8004564:	080047bb 	.word	0x080047bb
 8004568:	080047bb 	.word	0x080047bb
 800456c:	080047bb 	.word	0x080047bb
 8004570:	080047bb 	.word	0x080047bb
 8004574:	080047bb 	.word	0x080047bb
 8004578:	080045af 	.word	0x080045af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800457c:	4b94      	ldr	r3, [pc, #592]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d009      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004588:	4b91      	ldr	r3, [pc, #580]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	08db      	lsrs	r3, r3, #3
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	4a90      	ldr	r2, [pc, #576]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
 8004598:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800459a:	e111      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800459c:	4b8d      	ldr	r3, [pc, #564]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800459e:	61bb      	str	r3, [r7, #24]
      break;
 80045a0:	e10e      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80045a2:	4b8d      	ldr	r3, [pc, #564]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045a4:	61bb      	str	r3, [r7, #24]
      break;
 80045a6:	e10b      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80045a8:	4b8c      	ldr	r3, [pc, #560]	@ (80047dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045aa:	61bb      	str	r3, [r7, #24]
      break;
 80045ac:	e108      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045ae:	4b88      	ldr	r3, [pc, #544]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80045b8:	4b85      	ldr	r3, [pc, #532]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045c4:	4b82      	ldr	r3, [pc, #520]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80045ce:	4b80      	ldr	r3, [pc, #512]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d2:	08db      	lsrs	r3, r3, #3
 80045d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	fb02 f303 	mul.w	r3, r2, r3
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80e1 	beq.w	80047b4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f000 8083 	beq.w	8004700 <HAL_RCC_GetSysClockFreq+0x204>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	f200 80a1 	bhi.w	8004744 <HAL_RCC_GetSysClockFreq+0x248>
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x114>
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d056      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800460e:	e099      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004610:	4b6f      	ldr	r3, [pc, #444]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02d      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800461c:	4b6c      	ldr	r3, [pc, #432]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	08db      	lsrs	r3, r3, #3
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	4a6b      	ldr	r2, [pc, #428]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
 800462c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	ee07 3a90 	vmov	s15, r3
 8004634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b62      	ldr	r3, [pc, #392]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a02 	vldr	s12, [r7, #8]
 800465a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004676:	e087      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b51      	ldr	r3, [pc, #324]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a02 	vldr	s12, [r7, #8]
 800469e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ba:	e065      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ce:	4b40      	ldr	r3, [pc, #256]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046de:	ed97 6a02 	vldr	s12, [r7, #8]
 80046e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046fe:	e043      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004722:	ed97 6a02 	vldr	s12, [r7, #8]
 8004726:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800472a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004742:	e021      	b.n	8004788 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004756:	4b1e      	ldr	r3, [pc, #120]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004766:	ed97 6a02 	vldr	s12, [r7, #8]
 800476a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80047e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800476e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800477a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004782:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004786:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004788:	4b11      	ldr	r3, [pc, #68]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478c:	0a5b      	lsrs	r3, r3, #9
 800478e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004792:	3301      	adds	r3, #1
 8004794:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ac:	ee17 3a90 	vmov	r3, s15
 80047b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80047b2:	e005      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
      break;
 80047b8:	e002      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80047ba:	4b07      	ldr	r3, [pc, #28]	@ (80047d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047bc:	61bb      	str	r3, [r7, #24]
      break;
 80047be:	bf00      	nop
  }

  return sysclockfreq;
 80047c0:	69bb      	ldr	r3, [r7, #24]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3724      	adds	r7, #36	@ 0x24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr
 80047ce:	bf00      	nop
 80047d0:	58024400 	.word	0x58024400
 80047d4:	03d09000 	.word	0x03d09000
 80047d8:	003d0900 	.word	0x003d0900
 80047dc:	007a1200 	.word	0x007a1200
 80047e0:	46000000 	.word	0x46000000
 80047e4:	4c742400 	.word	0x4c742400
 80047e8:	4a742400 	.word	0x4a742400
 80047ec:	4af42400 	.word	0x4af42400

080047f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047f6:	f7ff fe81 	bl	80044fc <HAL_RCC_GetSysClockFreq>
 80047fa:	4602      	mov	r2, r0
 80047fc:	4b10      	ldr	r3, [pc, #64]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x50>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	490f      	ldr	r1, [pc, #60]	@ (8004844 <HAL_RCC_GetHCLKFreq+0x54>)
 8004808:	5ccb      	ldrb	r3, [r1, r3]
 800480a:	f003 031f 	and.w	r3, r3, #31
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004814:	4b0a      	ldr	r3, [pc, #40]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x50>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	4a09      	ldr	r2, [pc, #36]	@ (8004844 <HAL_RCC_GetHCLKFreq+0x54>)
 800481e:	5cd3      	ldrb	r3, [r2, r3]
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	fa22 f303 	lsr.w	r3, r2, r3
 800482a:	4a07      	ldr	r2, [pc, #28]	@ (8004848 <HAL_RCC_GetHCLKFreq+0x58>)
 800482c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800482e:	4a07      	ldr	r2, [pc, #28]	@ (800484c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004834:	4b04      	ldr	r3, [pc, #16]	@ (8004848 <HAL_RCC_GetHCLKFreq+0x58>)
 8004836:	681b      	ldr	r3, [r3, #0]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	58024400 	.word	0x58024400
 8004844:	08016a04 	.word	0x08016a04
 8004848:	24000024 	.word	0x24000024
 800484c:	24000020 	.word	0x24000020

08004850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004854:	f7ff ffcc 	bl	80047f0 <HAL_RCC_GetHCLKFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	4904      	ldr	r1, [pc, #16]	@ (8004878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	58024400 	.word	0x58024400
 8004878:	08016a04 	.word	0x08016a04

0800487c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004880:	f7ff ffb6 	bl	80047f0 <HAL_RCC_GetHCLKFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4904      	ldr	r1, [pc, #16]	@ (80048a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	58024400 	.word	0x58024400
 80048a4:	08016a04 	.word	0x08016a04

080048a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	223f      	movs	r2, #63	@ 0x3f
 80048b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004924 <HAL_RCC_GetClockConfig+0x7c>)
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f003 0207 	and.w	r2, r3, #7
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80048c4:	4b17      	ldr	r3, [pc, #92]	@ (8004924 <HAL_RCC_GetClockConfig+0x7c>)
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80048d0:	4b14      	ldr	r3, [pc, #80]	@ (8004924 <HAL_RCC_GetClockConfig+0x7c>)
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80048dc:	4b11      	ldr	r3, [pc, #68]	@ (8004924 <HAL_RCC_GetClockConfig+0x7c>)
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80048e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004924 <HAL_RCC_GetClockConfig+0x7c>)
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80048f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004924 <HAL_RCC_GetClockConfig+0x7c>)
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004900:	4b08      	ldr	r3, [pc, #32]	@ (8004924 <HAL_RCC_GetClockConfig+0x7c>)
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800490c:	4b06      	ldr	r3, [pc, #24]	@ (8004928 <HAL_RCC_GetClockConfig+0x80>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	601a      	str	r2, [r3, #0]
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	58024400 	.word	0x58024400
 8004928:	52002000 	.word	0x52002000

0800492c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800492c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004930:	b0c6      	sub	sp, #280	@ 0x118
 8004932:	af00      	add	r7, sp, #0
 8004934:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004938:	2300      	movs	r3, #0
 800493a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800493e:	2300      	movs	r3, #0
 8004940:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004950:	2500      	movs	r5, #0
 8004952:	ea54 0305 	orrs.w	r3, r4, r5
 8004956:	d049      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800495e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004962:	d02f      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004964:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004968:	d828      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800496a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800496e:	d01a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004974:	d822      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800497a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800497e:	d007      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004980:	e01c      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004982:	4bab      	ldr	r3, [pc, #684]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004986:	4aaa      	ldr	r2, [pc, #680]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800498c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800498e:	e01a      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004994:	3308      	adds	r3, #8
 8004996:	2102      	movs	r1, #2
 8004998:	4618      	mov	r0, r3
 800499a:	f001 fc25 	bl	80061e8 <RCCEx_PLL2_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049a4:	e00f      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049aa:	3328      	adds	r3, #40	@ 0x28
 80049ac:	2102      	movs	r1, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f001 fccc 	bl	800634c <RCCEx_PLL3_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80049ba:	e004      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80049c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049ce:	4b98      	ldr	r3, [pc, #608]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80049d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049dc:	4a94      	ldr	r2, [pc, #592]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049de:	430b      	orrs	r3, r1
 80049e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80049e2:	e003      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80049f8:	f04f 0900 	mov.w	r9, #0
 80049fc:	ea58 0309 	orrs.w	r3, r8, r9
 8004a00:	d047      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a08:	2b04      	cmp	r3, #4
 8004a0a:	d82a      	bhi.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a12:	bf00      	nop
 8004a14:	08004a29 	.word	0x08004a29
 8004a18:	08004a37 	.word	0x08004a37
 8004a1c:	08004a4d 	.word	0x08004a4d
 8004a20:	08004a6b 	.word	0x08004a6b
 8004a24:	08004a6b 	.word	0x08004a6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a28:	4b81      	ldr	r3, [pc, #516]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2c:	4a80      	ldr	r2, [pc, #512]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a34:	e01a      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a3a:	3308      	adds	r3, #8
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f001 fbd2 	bl	80061e8 <RCCEx_PLL2_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a4a:	e00f      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a50:	3328      	adds	r3, #40	@ 0x28
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 fc79 	bl	800634c <RCCEx_PLL3_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a60:	e004      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a68:	e000      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10a      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a74:	4b6e      	ldr	r3, [pc, #440]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a78:	f023 0107 	bic.w	r1, r3, #7
 8004a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	4a6b      	ldr	r2, [pc, #428]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a88:	e003      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004a9e:	f04f 0b00 	mov.w	fp, #0
 8004aa2:	ea5a 030b 	orrs.w	r3, sl, fp
 8004aa6:	d05b      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ab0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004ab4:	d03b      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004ab6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004aba:	d834      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004abc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ac0:	d037      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004ac2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ac6:	d82e      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004acc:	d033      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004ace:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ad2:	d828      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ad8:	d01a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ade:	d822      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004ae4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ae8:	d007      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004aea:	e01c      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aec:	4b50      	ldr	r3, [pc, #320]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	4a4f      	ldr	r2, [pc, #316]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004af8:	e01e      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004afe:	3308      	adds	r3, #8
 8004b00:	2100      	movs	r1, #0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f001 fb70 	bl	80061e8 <RCCEx_PLL2_Config>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b0e:	e013      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b14:	3328      	adds	r3, #40	@ 0x28
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fc17 	bl	800634c <RCCEx_PLL3_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b24:	e008      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10b      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b40:	4b3b      	ldr	r3, [pc, #236]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b44:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b50:	4a37      	ldr	r2, [pc, #220]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b56:	e003      	b.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b70:	2300      	movs	r3, #0
 8004b72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	d05d      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b88:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b8c:	d03b      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004b8e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b92:	d834      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b98:	d037      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004b9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b9e:	d82e      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ba0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ba4:	d033      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004ba6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004baa:	d828      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004bac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bb0:	d01a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004bb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bb6:	d822      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc0:	d007      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004bc2:	e01c      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	4a19      	ldr	r2, [pc, #100]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bd0:	e01e      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fb04 	bl	80061e8 <RCCEx_PLL2_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004be6:	e013      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bec:	3328      	adds	r3, #40	@ 0x28
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f001 fbab 	bl	800634c <RCCEx_PLL3_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bfc:	e008      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c04:	e004      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004c06:	bf00      	nop
 8004c08:	e002      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004c0a:	bf00      	nop
 8004c0c:	e000      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10d      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c18:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004c28:	4a01      	ldr	r2, [pc, #4]	@ (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c2e:	e005      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004c30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c52:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	d03a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c62:	2b30      	cmp	r3, #48	@ 0x30
 8004c64:	d01f      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004c66:	2b30      	cmp	r3, #48	@ 0x30
 8004c68:	d819      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d00c      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d815      	bhi.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d019      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d111      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7a:	4baa      	ldr	r3, [pc, #680]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	4aa9      	ldr	r2, [pc, #676]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c86:	e011      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	2102      	movs	r1, #2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f001 faa9 	bl	80061e8 <RCCEx_PLL2_Config>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c9c:	e006      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ca4:	e002      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004ca6:	bf00      	nop
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004caa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cb4:	4b9b      	ldr	r3, [pc, #620]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc2:	4a98      	ldr	r2, [pc, #608]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cc8:	e003      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004ce8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004cec:	460b      	mov	r3, r1
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	d051      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cfc:	d035      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d02:	d82e      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004d04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d08:	d031      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004d0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d0e:	d828      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d14:	d01a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d1a:	d822      	bhi.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d24:	d007      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004d26:	e01c      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d28:	4b7e      	ldr	r3, [pc, #504]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	4a7d      	ldr	r2, [pc, #500]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d34:	e01c      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 fa52 	bl	80061e8 <RCCEx_PLL2_Config>
 8004d44:	4603      	mov	r3, r0
 8004d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d4a:	e011      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d50:	3328      	adds	r3, #40	@ 0x28
 8004d52:	2100      	movs	r1, #0
 8004d54:	4618      	mov	r0, r3
 8004d56:	f001 faf9 	bl	800634c <RCCEx_PLL3_Config>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d60:	e006      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d68:	e002      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d78:	4b6a      	ldr	r3, [pc, #424]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d86:	4a67      	ldr	r2, [pc, #412]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d8c:	e003      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004da2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4313      	orrs	r3, r2
 8004db4:	d053      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dc0:	d033      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004dc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dc6:	d82c      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004dc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dcc:	d02f      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004dce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dd2:	d826      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004dd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dd8:	d02b      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004dda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dde:	d820      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004de0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004de4:	d012      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dea:	d81a      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d022      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df4:	d115      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfa:	3308      	adds	r3, #8
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f001 f9f2 	bl	80061e8 <RCCEx_PLL2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e0a:	e015      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e10:	3328      	adds	r3, #40	@ 0x28
 8004e12:	2101      	movs	r1, #1
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 fa99 	bl	800634c <RCCEx_PLL3_Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004e20:	e00a      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e28:	e006      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004e2a:	bf00      	nop
 8004e2c:	e004      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004e2e:	bf00      	nop
 8004e30:	e002      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e40:	4b38      	ldr	r3, [pc, #224]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e4e:	4a35      	ldr	r2, [pc, #212]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e50:	430b      	orrs	r3, r1
 8004e52:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e54:	e003      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	d058      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e8a:	d033      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e90:	d82c      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e96:	d02f      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004e98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9c:	d826      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ea2:	d02b      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004ea4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ea8:	d820      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eae:	d012      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eb4:	d81a      	bhi.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d022      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ebe:	d115      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec4:	3308      	adds	r3, #8
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 f98d 	bl	80061e8 <RCCEx_PLL2_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ed4:	e015      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eda:	3328      	adds	r3, #40	@ 0x28
 8004edc:	2101      	movs	r1, #1
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f001 fa34 	bl	800634c <RCCEx_PLL3_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004eea:	e00a      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ef2:	e006      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ef4:	bf00      	nop
 8004ef6:	e004      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ef8:	bf00      	nop
 8004efa:	e002      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004efc:	bf00      	nop
 8004efe:	e000      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10e      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004f0a:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f1a:	4a02      	ldr	r2, [pc, #8]	@ (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f20:	e006      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004f22:	bf00      	nop
 8004f24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	d037      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f5a:	d00e      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f60:	d816      	bhi.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d018      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004f66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f6a:	d111      	bne.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f6c:	4bc4      	ldr	r3, [pc, #784]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	4ac3      	ldr	r2, [pc, #780]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f78:	e00f      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f7e:	3308      	adds	r3, #8
 8004f80:	2101      	movs	r1, #1
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 f930 	bl	80061e8 <RCCEx_PLL2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f8e:	e004      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f96:	e000      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fa2:	4bb7      	ldr	r3, [pc, #732]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fb0:	4ab3      	ldr	r2, [pc, #716]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004fb6:	e003      	b.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004fd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	d039      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d81c      	bhi.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004fea:	a201      	add	r2, pc, #4	@ (adr r2, 8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	0800502d 	.word	0x0800502d
 8004ff4:	08005001 	.word	0x08005001
 8004ff8:	0800500f 	.word	0x0800500f
 8004ffc:	0800502d 	.word	0x0800502d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005000:	4b9f      	ldr	r3, [pc, #636]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	4a9e      	ldr	r2, [pc, #632]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800500a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800500c:	e00f      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800500e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005012:	3308      	adds	r3, #8
 8005014:	2102      	movs	r1, #2
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f8e6 	bl	80061e8 <RCCEx_PLL2_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005022:	e004      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800502a:	e000      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800502c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800502e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005036:	4b92      	ldr	r3, [pc, #584]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800503a:	f023 0103 	bic.w	r1, r3, #3
 800503e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005044:	4a8e      	ldr	r2, [pc, #568]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005046:	430b      	orrs	r3, r1
 8005048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800504a:	e003      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005060:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005064:	2300      	movs	r3, #0
 8005066:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800506a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800506e:	460b      	mov	r3, r1
 8005070:	4313      	orrs	r3, r2
 8005072:	f000 8099 	beq.w	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005076:	4b83      	ldr	r3, [pc, #524]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a82      	ldr	r2, [pc, #520]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005080:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005082:	f7fd fa13 	bl	80024ac <HAL_GetTick>
 8005086:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800508a:	e00b      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508c:	f7fd fa0e 	bl	80024ac <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b64      	cmp	r3, #100	@ 0x64
 800509a:	d903      	bls.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80050a2:	e005      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050a4:	4b77      	ldr	r3, [pc, #476]	@ (8005284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0ed      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80050b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d173      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80050b8:	4b71      	ldr	r3, [pc, #452]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050c4:	4053      	eors	r3, r2
 80050c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d015      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050ce:	4b6c      	ldr	r3, [pc, #432]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050da:	4b69      	ldr	r3, [pc, #420]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050de:	4a68      	ldr	r2, [pc, #416]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050e6:	4b66      	ldr	r3, [pc, #408]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ea:	4a65      	ldr	r2, [pc, #404]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050f2:	4a63      	ldr	r2, [pc, #396]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005106:	d118      	bne.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fd f9d0 	bl	80024ac <HAL_GetTick>
 800510c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005110:	e00d      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005112:	f7fd f9cb 	bl	80024ac <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800511c:	1ad2      	subs	r2, r2, r3
 800511e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005122:	429a      	cmp	r2, r3
 8005124:	d903      	bls.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800512c:	e005      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800512e:	4b54      	ldr	r3, [pc, #336]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0eb      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800513a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800513e:	2b00      	cmp	r3, #0
 8005140:	d129      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800514a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800514e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005152:	d10e      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005154:	4b4a      	ldr	r3, [pc, #296]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800515c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005164:	091a      	lsrs	r2, r3, #4
 8005166:	4b48      	ldr	r3, [pc, #288]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005168:	4013      	ands	r3, r2
 800516a:	4a45      	ldr	r2, [pc, #276]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800516c:	430b      	orrs	r3, r1
 800516e:	6113      	str	r3, [r2, #16]
 8005170:	e005      	b.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005172:	4b43      	ldr	r3, [pc, #268]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	4a42      	ldr	r2, [pc, #264]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005178:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800517c:	6113      	str	r3, [r2, #16]
 800517e:	4b40      	ldr	r3, [pc, #256]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005180:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005186:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800518a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518e:	4a3c      	ldr	r2, [pc, #240]	@ (8005280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005190:	430b      	orrs	r3, r1
 8005192:	6713      	str	r3, [r2, #112]	@ 0x70
 8005194:	e008      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005196:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800519a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800519e:	e003      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80051a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f002 0301 	and.w	r3, r2, #1
 80051b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051b8:	2300      	movs	r3, #0
 80051ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80051c2:	460b      	mov	r3, r1
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f000 808f 	beq.w	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051d0:	2b28      	cmp	r3, #40	@ 0x28
 80051d2:	d871      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80051d4:	a201      	add	r2, pc, #4	@ (adr r2, 80051dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080052c1 	.word	0x080052c1
 80051e0:	080052b9 	.word	0x080052b9
 80051e4:	080052b9 	.word	0x080052b9
 80051e8:	080052b9 	.word	0x080052b9
 80051ec:	080052b9 	.word	0x080052b9
 80051f0:	080052b9 	.word	0x080052b9
 80051f4:	080052b9 	.word	0x080052b9
 80051f8:	080052b9 	.word	0x080052b9
 80051fc:	0800528d 	.word	0x0800528d
 8005200:	080052b9 	.word	0x080052b9
 8005204:	080052b9 	.word	0x080052b9
 8005208:	080052b9 	.word	0x080052b9
 800520c:	080052b9 	.word	0x080052b9
 8005210:	080052b9 	.word	0x080052b9
 8005214:	080052b9 	.word	0x080052b9
 8005218:	080052b9 	.word	0x080052b9
 800521c:	080052a3 	.word	0x080052a3
 8005220:	080052b9 	.word	0x080052b9
 8005224:	080052b9 	.word	0x080052b9
 8005228:	080052b9 	.word	0x080052b9
 800522c:	080052b9 	.word	0x080052b9
 8005230:	080052b9 	.word	0x080052b9
 8005234:	080052b9 	.word	0x080052b9
 8005238:	080052b9 	.word	0x080052b9
 800523c:	080052c1 	.word	0x080052c1
 8005240:	080052b9 	.word	0x080052b9
 8005244:	080052b9 	.word	0x080052b9
 8005248:	080052b9 	.word	0x080052b9
 800524c:	080052b9 	.word	0x080052b9
 8005250:	080052b9 	.word	0x080052b9
 8005254:	080052b9 	.word	0x080052b9
 8005258:	080052b9 	.word	0x080052b9
 800525c:	080052c1 	.word	0x080052c1
 8005260:	080052b9 	.word	0x080052b9
 8005264:	080052b9 	.word	0x080052b9
 8005268:	080052b9 	.word	0x080052b9
 800526c:	080052b9 	.word	0x080052b9
 8005270:	080052b9 	.word	0x080052b9
 8005274:	080052b9 	.word	0x080052b9
 8005278:	080052b9 	.word	0x080052b9
 800527c:	080052c1 	.word	0x080052c1
 8005280:	58024400 	.word	0x58024400
 8005284:	58024800 	.word	0x58024800
 8005288:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005290:	3308      	adds	r3, #8
 8005292:	2101      	movs	r1, #1
 8005294:	4618      	mov	r0, r3
 8005296:	f000 ffa7 	bl	80061e8 <RCCEx_PLL2_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80052a0:	e00f      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a6:	3328      	adds	r3, #40	@ 0x28
 80052a8:	2101      	movs	r1, #1
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 f84e 	bl	800634c <RCCEx_PLL3_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80052b6:	e004      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052be:	e000      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80052c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052ca:	4bbf      	ldr	r3, [pc, #764]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052d8:	4abb      	ldr	r2, [pc, #748]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052da:	430b      	orrs	r3, r1
 80052dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80052de:	e003      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f002 0302 	and.w	r3, r2, #2
 80052f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052f8:	2300      	movs	r3, #0
 80052fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005302:	460b      	mov	r3, r1
 8005304:	4313      	orrs	r3, r2
 8005306:	d041      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800530e:	2b05      	cmp	r3, #5
 8005310:	d824      	bhi.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005312:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005365 	.word	0x08005365
 800531c:	08005331 	.word	0x08005331
 8005320:	08005347 	.word	0x08005347
 8005324:	08005365 	.word	0x08005365
 8005328:	08005365 	.word	0x08005365
 800532c:	08005365 	.word	0x08005365
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005334:	3308      	adds	r3, #8
 8005336:	2101      	movs	r1, #1
 8005338:	4618      	mov	r0, r3
 800533a:	f000 ff55 	bl	80061e8 <RCCEx_PLL2_Config>
 800533e:	4603      	mov	r3, r0
 8005340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005344:	e00f      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534a:	3328      	adds	r3, #40	@ 0x28
 800534c:	2101      	movs	r1, #1
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fffc 	bl	800634c <RCCEx_PLL3_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800535a:	e004      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005362:	e000      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800536e:	4b96      	ldr	r3, [pc, #600]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005372:	f023 0107 	bic.w	r1, r3, #7
 8005376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800537a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800537c:	4a92      	ldr	r2, [pc, #584]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800537e:	430b      	orrs	r3, r1
 8005380:	6553      	str	r3, [r2, #84]	@ 0x54
 8005382:	e003      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800538c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f002 0304 	and.w	r3, r2, #4
 8005398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80053a2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053a6:	460b      	mov	r3, r1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d044      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80053ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b4:	2b05      	cmp	r3, #5
 80053b6:	d825      	bhi.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80053b8:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	0800540d 	.word	0x0800540d
 80053c4:	080053d9 	.word	0x080053d9
 80053c8:	080053ef 	.word	0x080053ef
 80053cc:	0800540d 	.word	0x0800540d
 80053d0:	0800540d 	.word	0x0800540d
 80053d4:	0800540d 	.word	0x0800540d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053dc:	3308      	adds	r3, #8
 80053de:	2101      	movs	r1, #1
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 ff01 	bl	80061e8 <RCCEx_PLL2_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053ec:	e00f      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f2:	3328      	adds	r3, #40	@ 0x28
 80053f4:	2101      	movs	r1, #1
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 ffa8 	bl	800634c <RCCEx_PLL3_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005402:	e004      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800540a:	e000      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800540c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800540e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10b      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005416:	4b6c      	ldr	r3, [pc, #432]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800541a:	f023 0107 	bic.w	r1, r3, #7
 800541e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005426:	4a68      	ldr	r2, [pc, #416]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005428:	430b      	orrs	r3, r1
 800542a:	6593      	str	r3, [r2, #88]	@ 0x58
 800542c:	e003      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800542e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005432:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543e:	f002 0320 	and.w	r3, r2, #32
 8005442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005446:	2300      	movs	r3, #0
 8005448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800544c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005450:	460b      	mov	r3, r1
 8005452:	4313      	orrs	r3, r2
 8005454:	d055      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800545e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005462:	d033      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005468:	d82c      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800546e:	d02f      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005474:	d826      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005476:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800547a:	d02b      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800547c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005480:	d820      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005486:	d012      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800548c:	d81a      	bhi.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800548e:	2b00      	cmp	r3, #0
 8005490:	d022      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005496:	d115      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800549c:	3308      	adds	r3, #8
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fea1 	bl	80061e8 <RCCEx_PLL2_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054ac:	e015      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b2:	3328      	adds	r3, #40	@ 0x28
 80054b4:	2102      	movs	r1, #2
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 ff48 	bl	800634c <RCCEx_PLL3_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80054c2:	e00a      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054ca:	e006      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80054cc:	bf00      	nop
 80054ce:	e004      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80054d0:	bf00      	nop
 80054d2:	e002      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80054d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054e2:	4b39      	ldr	r3, [pc, #228]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054f2:	4a35      	ldr	r2, [pc, #212]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054f4:	430b      	orrs	r3, r1
 80054f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80054f8:	e003      	b.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800550e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005512:	2300      	movs	r3, #0
 8005514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005518:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800551c:	460b      	mov	r3, r1
 800551e:	4313      	orrs	r3, r2
 8005520:	d058      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800552a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800552e:	d033      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005530:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005534:	d82c      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800553a:	d02f      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800553c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005540:	d826      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005542:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005546:	d02b      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005548:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800554c:	d820      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800554e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005552:	d012      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005558:	d81a      	bhi.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d022      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800555e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005562:	d115      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005568:	3308      	adds	r3, #8
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f000 fe3b 	bl	80061e8 <RCCEx_PLL2_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005578:	e015      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800557a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557e:	3328      	adds	r3, #40	@ 0x28
 8005580:	2102      	movs	r1, #2
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fee2 	bl	800634c <RCCEx_PLL3_Config>
 8005588:	4603      	mov	r3, r0
 800558a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800558e:	e00a      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005596:	e006      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005598:	bf00      	nop
 800559a:	e004      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800559c:	bf00      	nop
 800559e:	e002      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80055a0:	bf00      	nop
 80055a2:	e000      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80055a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10e      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055ae:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80055b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80055b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055be:	4a02      	ldr	r2, [pc, #8]	@ (80055c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80055c4:	e006      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80055c6:	bf00      	nop
 80055c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80055e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055e4:	2300      	movs	r3, #0
 80055e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055ee:	460b      	mov	r3, r1
 80055f0:	4313      	orrs	r3, r2
 80055f2:	d055      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005600:	d033      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005602:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005606:	d82c      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800560c:	d02f      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800560e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005612:	d826      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005614:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005618:	d02b      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800561a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800561e:	d820      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005624:	d012      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8005626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800562a:	d81a      	bhi.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800562c:	2b00      	cmp	r3, #0
 800562e:	d022      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005634:	d115      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563a:	3308      	adds	r3, #8
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fdd2 	bl	80061e8 <RCCEx_PLL2_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800564a:	e015      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800564c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005650:	3328      	adds	r3, #40	@ 0x28
 8005652:	2102      	movs	r1, #2
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fe79 	bl	800634c <RCCEx_PLL3_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005660:	e00a      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005668:	e006      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800566a:	bf00      	nop
 800566c:	e004      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800566e:	bf00      	nop
 8005670:	e002      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005672:	bf00      	nop
 8005674:	e000      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10b      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005680:	4ba0      	ldr	r3, [pc, #640]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005684:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005690:	4a9c      	ldr	r2, [pc, #624]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005692:	430b      	orrs	r3, r1
 8005694:	6593      	str	r3, [r2, #88]	@ 0x58
 8005696:	e003      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800569c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80056a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f002 0308 	and.w	r3, r2, #8
 80056ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056b0:	2300      	movs	r3, #0
 80056b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80056ba:	460b      	mov	r3, r1
 80056bc:	4313      	orrs	r3, r2
 80056be:	d01e      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056cc:	d10c      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d2:	3328      	adds	r3, #40	@ 0x28
 80056d4:	2102      	movs	r1, #2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fe38 	bl	800634c <RCCEx_PLL3_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d002      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80056e8:	4b86      	ldr	r3, [pc, #536]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056f8:	4a82      	ldr	r2, [pc, #520]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f002 0310 	and.w	r3, r2, #16
 800570a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800570e:	2300      	movs	r3, #0
 8005710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005714:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005718:	460b      	mov	r3, r1
 800571a:	4313      	orrs	r3, r2
 800571c:	d01e      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800571e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800572a:	d10c      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800572c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005730:	3328      	adds	r3, #40	@ 0x28
 8005732:	2102      	movs	r1, #2
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fe09 	bl	800634c <RCCEx_PLL3_Config>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005746:	4b6f      	ldr	r3, [pc, #444]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005756:	4a6b      	ldr	r2, [pc, #428]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005758:	430b      	orrs	r3, r1
 800575a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800576a:	2300      	movs	r3, #0
 800576c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800576e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005772:	460b      	mov	r3, r1
 8005774:	4313      	orrs	r3, r2
 8005776:	d03e      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005784:	d022      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800578a:	d81b      	bhi.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005794:	d00b      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005796:	e015      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579c:	3308      	adds	r3, #8
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fd21 	bl	80061e8 <RCCEx_PLL2_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057ac:	e00f      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b2:	3328      	adds	r3, #40	@ 0x28
 80057b4:	2102      	movs	r1, #2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fdc8 	bl	800634c <RCCEx_PLL3_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057c2:	e004      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80057cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057d6:	4b4b      	ldr	r3, [pc, #300]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057e6:	4a47      	ldr	r2, [pc, #284]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ec:	e003      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005802:	673b      	str	r3, [r7, #112]	@ 0x70
 8005804:	2300      	movs	r3, #0
 8005806:	677b      	str	r3, [r7, #116]	@ 0x74
 8005808:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800580c:	460b      	mov	r3, r1
 800580e:	4313      	orrs	r3, r2
 8005810:	d03b      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800581a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800581e:	d01f      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005820:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005824:	d818      	bhi.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800582a:	d003      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800582c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005830:	d007      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005832:	e011      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005834:	4b33      	ldr	r3, [pc, #204]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005838:	4a32      	ldr	r2, [pc, #200]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800583a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800583e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005840:	e00f      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005846:	3328      	adds	r3, #40	@ 0x28
 8005848:	2101      	movs	r1, #1
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fd7e 	bl	800634c <RCCEx_PLL3_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005856:	e004      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800585e:	e000      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005862:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800586a:	4b26      	ldr	r3, [pc, #152]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800587a:	4a22      	ldr	r2, [pc, #136]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800587c:	430b      	orrs	r3, r1
 800587e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005880:	e003      	b.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005882:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005886:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800588a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005892:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005896:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005898:	2300      	movs	r3, #0
 800589a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800589c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80058a0:	460b      	mov	r3, r1
 80058a2:	4313      	orrs	r3, r2
 80058a4:	d034      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80058a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80058b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058b4:	d007      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80058b6:	e011      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b8:	4b12      	ldr	r3, [pc, #72]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	4a11      	ldr	r2, [pc, #68]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058c4:	e00e      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ca:	3308      	adds	r3, #8
 80058cc:	2102      	movs	r1, #2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fc8a 	bl	80061e8 <RCCEx_PLL2_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058da:	e003      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10d      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058ec:	4b05      	ldr	r3, [pc, #20]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fa:	4a02      	ldr	r2, [pc, #8]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058fc:	430b      	orrs	r3, r1
 80058fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005900:	e006      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005902:	bf00      	nop
 8005904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800590c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800591c:	663b      	str	r3, [r7, #96]	@ 0x60
 800591e:	2300      	movs	r3, #0
 8005920:	667b      	str	r3, [r7, #100]	@ 0x64
 8005922:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005926:	460b      	mov	r3, r1
 8005928:	4313      	orrs	r3, r2
 800592a:	d00c      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800592c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005930:	3328      	adds	r3, #40	@ 0x28
 8005932:	2102      	movs	r1, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f000 fd09 	bl	800634c <RCCEx_PLL3_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d002      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005952:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005954:	2300      	movs	r3, #0
 8005956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005958:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800595c:	460b      	mov	r3, r1
 800595e:	4313      	orrs	r3, r2
 8005960:	d036      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800596c:	d018      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800596e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005972:	d811      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005978:	d014      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800597a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800597e:	d80b      	bhi.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d011      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005988:	d106      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800598a:	4bb7      	ldr	r3, [pc, #732]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800598c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598e:	4ab6      	ldr	r2, [pc, #728]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005996:	e008      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800599e:	e004      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80059a0:	bf00      	nop
 80059a2:	e002      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80059a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059b2:	4bad      	ldr	r3, [pc, #692]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059c0:	4aa9      	ldr	r2, [pc, #676]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059c2:	430b      	orrs	r3, r1
 80059c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80059c6:	e003      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80059dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80059de:	2300      	movs	r3, #0
 80059e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80059e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80059e6:	460b      	mov	r3, r1
 80059e8:	4313      	orrs	r3, r2
 80059ea:	d009      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059ec:	4b9e      	ldr	r3, [pc, #632]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fa:	4a9b      	ldr	r2, [pc, #620]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a0e:	2300      	movs	r3, #0
 8005a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a12:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a16:	460b      	mov	r3, r1
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	d009      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a1c:	4b92      	ldr	r3, [pc, #584]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a20:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a2a:	4a8f      	ldr	r2, [pc, #572]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a3e:	2300      	movs	r3, #0
 8005a40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a42:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	d00e      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a4c:	4b86      	ldr	r3, [pc, #536]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	4a85      	ldr	r2, [pc, #532]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a56:	6113      	str	r3, [r2, #16]
 8005a58:	4b83      	ldr	r3, [pc, #524]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a5a:	6919      	ldr	r1, [r3, #16]
 8005a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a64:	4a80      	ldr	r2, [pc, #512]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a66:	430b      	orrs	r3, r1
 8005a68:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a78:	2300      	movs	r3, #0
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a7c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a80:	460b      	mov	r3, r1
 8005a82:	4313      	orrs	r3, r2
 8005a84:	d009      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a86:	4b78      	ldr	r3, [pc, #480]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a94:	4a74      	ldr	r2, [pc, #464]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a96:	430b      	orrs	r3, r1
 8005a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005aa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	4a68      	ldr	r2, [pc, #416]	@ (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	2100      	movs	r1, #0
 8005ad6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ade:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	d011      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aec:	3308      	adds	r3, #8
 8005aee:	2100      	movs	r1, #0
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fb79 	bl	80061e8 <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005afc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	2100      	movs	r1, #0
 8005b16:	6239      	str	r1, [r7, #32]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b22:	460b      	mov	r3, r1
 8005b24:	4313      	orrs	r3, r2
 8005b26:	d011      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	2101      	movs	r1, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fb59 	bl	80061e8 <RCCEx_PLL2_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	2100      	movs	r1, #0
 8005b56:	61b9      	str	r1, [r7, #24]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b62:	460b      	mov	r3, r1
 8005b64:	4313      	orrs	r3, r2
 8005b66:	d011      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	2102      	movs	r1, #2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fb39 	bl	80061e8 <RCCEx_PLL2_Config>
 8005b76:	4603      	mov	r3, r0
 8005b78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	2100      	movs	r1, #0
 8005b96:	6139      	str	r1, [r7, #16]
 8005b98:	f003 0308 	and.w	r3, r3, #8
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	d011      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bac:	3328      	adds	r3, #40	@ 0x28
 8005bae:	2100      	movs	r1, #0
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fbcb 	bl	800634c <RCCEx_PLL3_Config>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005bbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005be2:	460b      	mov	r3, r1
 8005be4:	4313      	orrs	r3, r2
 8005be6:	d011      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bec:	3328      	adds	r3, #40	@ 0x28
 8005bee:	2101      	movs	r1, #1
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f000 fbab 	bl	800634c <RCCEx_PLL3_Config>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	2100      	movs	r1, #0
 8005c16:	6039      	str	r1, [r7, #0]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c22:	460b      	mov	r3, r1
 8005c24:	4313      	orrs	r3, r2
 8005c26:	d011      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2c:	3328      	adds	r3, #40	@ 0x28
 8005c2e:	2102      	movs	r1, #2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fb8b 	bl	800634c <RCCEx_PLL3_Config>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005c4c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	e000      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005c60:	46bd      	mov	sp, r7
 8005c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c66:	bf00      	nop
 8005c68:	58024400 	.word	0x58024400

08005c6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c70:	f7fe fdbe 	bl	80047f0 <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b06      	ldr	r3, [pc, #24]	@ (8005c90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4904      	ldr	r1, [pc, #16]	@ (8005c94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	f003 031f 	and.w	r3, r3, #31
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	58024400 	.word	0x58024400
 8005c94:	08016a04 	.word	0x08016a04

08005c98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	@ 0x24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ca0:	4ba1      	ldr	r3, [pc, #644]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005caa:	4b9f      	ldr	r3, [pc, #636]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	0b1b      	lsrs	r3, r3, #12
 8005cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cb4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cb6:	4b9c      	ldr	r3, [pc, #624]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005cc2:	4b99      	ldr	r3, [pc, #612]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc6:	08db      	lsrs	r3, r3, #3
 8005cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8111 	beq.w	8005f08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	f000 8083 	beq.w	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	f200 80a1 	bhi.w	8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d056      	beq.n	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d02:	e099      	b.n	8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d04:	4b88      	ldr	r3, [pc, #544]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d02d      	beq.n	8005d6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d10:	4b85      	ldr	r3, [pc, #532]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	08db      	lsrs	r3, r3, #3
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	4a84      	ldr	r2, [pc, #528]	@ (8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d6a:	e087      	b.n	8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dae:	e065      	b.n	8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc2:	4b59      	ldr	r3, [pc, #356]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005df2:	e043      	b.n	8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e06:	4b48      	ldr	r3, [pc, #288]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e36:	e021      	b.n	8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e4a:	4b37      	ldr	r3, [pc, #220]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e80:	0a5b      	lsrs	r3, r3, #9
 8005e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e96:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea2:	ee17 2a90 	vmov	r2, s15
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eae:	0c1b      	lsrs	r3, r3, #16
 8005eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ebc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ec0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed0:	ee17 2a90 	vmov	r2, s15
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ed8:	4b13      	ldr	r3, [pc, #76]	@ (8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	0e1b      	lsrs	r3, r3, #24
 8005ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ef2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005efe:	ee17 2a90 	vmov	r2, s15
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f06:	e008      	b.n	8005f1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	609a      	str	r2, [r3, #8]
}
 8005f1a:	bf00      	nop
 8005f1c:	3724      	adds	r7, #36	@ 0x24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	58024400 	.word	0x58024400
 8005f2c:	03d09000 	.word	0x03d09000
 8005f30:	46000000 	.word	0x46000000
 8005f34:	4c742400 	.word	0x4c742400
 8005f38:	4a742400 	.word	0x4a742400
 8005f3c:	4af42400 	.word	0x4af42400

08005f40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b089      	sub	sp, #36	@ 0x24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f48:	4ba1      	ldr	r3, [pc, #644]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f52:	4b9f      	ldr	r3, [pc, #636]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f56:	0d1b      	lsrs	r3, r3, #20
 8005f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f5e:	4b9c      	ldr	r3, [pc, #624]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f6a:	4b99      	ldr	r3, [pc, #612]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8111 	beq.w	80061b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	f000 8083 	beq.w	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	f200 80a1 	bhi.w	80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d056      	beq.n	8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005faa:	e099      	b.n	80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fac:	4b88      	ldr	r3, [pc, #544]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d02d      	beq.n	8006014 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fb8:	4b85      	ldr	r3, [pc, #532]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	08db      	lsrs	r3, r3, #3
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	4a84      	ldr	r2, [pc, #528]	@ (80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b7b      	ldr	r3, [pc, #492]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006012:	e087      	b.n	8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80061dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b6a      	ldr	r3, [pc, #424]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a03 	vldr	s12, [r7, #12]
 800603a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006056:	e065      	b.n	8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b59      	ldr	r3, [pc, #356]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a03 	vldr	s12, [r7, #12]
 800607e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609a:	e043      	b.n	8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b48      	ldr	r3, [pc, #288]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060de:	e021      	b.n	8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80061e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f2:	4b37      	ldr	r3, [pc, #220]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a03 	vldr	s12, [r7, #12]
 8006106:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80061d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006122:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006124:	4b2a      	ldr	r3, [pc, #168]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	0a5b      	lsrs	r3, r3, #9
 800612a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800613a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800613e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614a:	ee17 2a90 	vmov	r2, s15
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006152:	4b1f      	ldr	r3, [pc, #124]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006164:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006168:	ee37 7a87 	vadd.f32	s14, s15, s14
 800616c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006178:	ee17 2a90 	vmov	r2, s15
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006180:	4b13      	ldr	r3, [pc, #76]	@ (80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006184:	0e1b      	lsrs	r3, r3, #24
 8006186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006192:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800619a:	edd7 6a07 	vldr	s13, [r7, #28]
 800619e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a6:	ee17 2a90 	vmov	r2, s15
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061ae:	e008      	b.n	80061c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
}
 80061c2:	bf00      	nop
 80061c4:	3724      	adds	r7, #36	@ 0x24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	58024400 	.word	0x58024400
 80061d4:	03d09000 	.word	0x03d09000
 80061d8:	46000000 	.word	0x46000000
 80061dc:	4c742400 	.word	0x4c742400
 80061e0:	4a742400 	.word	0x4a742400
 80061e4:	4af42400 	.word	0x4af42400

080061e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061f6:	4b53      	ldr	r3, [pc, #332]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80061f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d101      	bne.n	8006206 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e099      	b.n	800633a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006206:	4b4f      	ldr	r3, [pc, #316]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a4e      	ldr	r2, [pc, #312]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 800620c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006212:	f7fc f94b 	bl	80024ac <HAL_GetTick>
 8006216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006218:	e008      	b.n	800622c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800621a:	f7fc f947 	bl	80024ac <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e086      	b.n	800633a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800622c:	4b45      	ldr	r3, [pc, #276]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f0      	bne.n	800621a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006238:	4b42      	ldr	r3, [pc, #264]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	031b      	lsls	r3, r3, #12
 8006246:	493f      	ldr	r1, [pc, #252]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006248:	4313      	orrs	r3, r2
 800624a:	628b      	str	r3, [r1, #40]	@ 0x28
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	3b01      	subs	r3, #1
 8006252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	3b01      	subs	r3, #1
 800625c:	025b      	lsls	r3, r3, #9
 800625e:	b29b      	uxth	r3, r3
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	3b01      	subs	r3, #1
 8006268:	041b      	lsls	r3, r3, #16
 800626a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	3b01      	subs	r3, #1
 8006276:	061b      	lsls	r3, r3, #24
 8006278:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800627c:	4931      	ldr	r1, [pc, #196]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006282:	4b30      	ldr	r3, [pc, #192]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	492d      	ldr	r1, [pc, #180]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006290:	4313      	orrs	r3, r2
 8006292:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006294:	4b2b      	ldr	r3, [pc, #172]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	f023 0220 	bic.w	r2, r3, #32
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	4928      	ldr	r1, [pc, #160]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062a6:	4b27      	ldr	r3, [pc, #156]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062aa:	4a26      	ldr	r2, [pc, #152]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062ac:	f023 0310 	bic.w	r3, r3, #16
 80062b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062b2:	4b24      	ldr	r3, [pc, #144]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062b6:	4b24      	ldr	r3, [pc, #144]	@ (8006348 <RCCEx_PLL2_Config+0x160>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	69d2      	ldr	r2, [r2, #28]
 80062be:	00d2      	lsls	r2, r2, #3
 80062c0:	4920      	ldr	r1, [pc, #128]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062c6:	4b1f      	ldr	r3, [pc, #124]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062cc:	f043 0310 	orr.w	r3, r3, #16
 80062d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062dc:	4a19      	ldr	r2, [pc, #100]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062e4:	e00f      	b.n	8006306 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d106      	bne.n	80062fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062ec:	4b15      	ldr	r3, [pc, #84]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	4a14      	ldr	r2, [pc, #80]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062f8:	e005      	b.n	8006306 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062fa:	4b12      	ldr	r3, [pc, #72]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fe:	4a11      	ldr	r2, [pc, #68]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006300:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006304:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006306:	4b0f      	ldr	r3, [pc, #60]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a0e      	ldr	r2, [pc, #56]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 800630c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006312:	f7fc f8cb 	bl	80024ac <HAL_GetTick>
 8006316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006318:	e008      	b.n	800632c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800631a:	f7fc f8c7 	bl	80024ac <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	2b02      	cmp	r3, #2
 8006326:	d901      	bls.n	800632c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006328:	2303      	movs	r3, #3
 800632a:	e006      	b.n	800633a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800632c:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <RCCEx_PLL2_Config+0x15c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f0      	beq.n	800631a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	58024400 	.word	0x58024400
 8006348:	ffff0007 	.word	0xffff0007

0800634c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800635a:	4b53      	ldr	r3, [pc, #332]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800635c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	2b03      	cmp	r3, #3
 8006364:	d101      	bne.n	800636a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e099      	b.n	800649e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800636a:	4b4f      	ldr	r3, [pc, #316]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a4e      	ldr	r2, [pc, #312]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006376:	f7fc f899 	bl	80024ac <HAL_GetTick>
 800637a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800637c:	e008      	b.n	8006390 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800637e:	f7fc f895 	bl	80024ac <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e086      	b.n	800649e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006390:	4b45      	ldr	r3, [pc, #276]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f0      	bne.n	800637e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800639c:	4b42      	ldr	r3, [pc, #264]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800639e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	051b      	lsls	r3, r3, #20
 80063aa:	493f      	ldr	r1, [pc, #252]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	3b01      	subs	r3, #1
 80063c0:	025b      	lsls	r3, r3, #9
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	041b      	lsls	r3, r3, #16
 80063ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	3b01      	subs	r3, #1
 80063da:	061b      	lsls	r3, r3, #24
 80063dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063e0:	4931      	ldr	r1, [pc, #196]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063e6:	4b30      	ldr	r3, [pc, #192]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	492d      	ldr	r1, [pc, #180]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063f8:	4b2b      	ldr	r3, [pc, #172]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	4928      	ldr	r1, [pc, #160]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800640a:	4b27      	ldr	r3, [pc, #156]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	4a26      	ldr	r2, [pc, #152]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006414:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006416:	4b24      	ldr	r3, [pc, #144]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800641a:	4b24      	ldr	r3, [pc, #144]	@ (80064ac <RCCEx_PLL3_Config+0x160>)
 800641c:	4013      	ands	r3, r2
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	69d2      	ldr	r2, [r2, #28]
 8006422:	00d2      	lsls	r2, r2, #3
 8006424:	4920      	ldr	r1, [pc, #128]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006426:	4313      	orrs	r3, r2
 8006428:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800642a:	4b1f      	ldr	r3, [pc, #124]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	4a1e      	ldr	r2, [pc, #120]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006434:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d106      	bne.n	800644a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800643c:	4b1a      	ldr	r3, [pc, #104]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	4a19      	ldr	r2, [pc, #100]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006442:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006446:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006448:	e00f      	b.n	800646a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d106      	bne.n	800645e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006450:	4b15      	ldr	r3, [pc, #84]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	4a14      	ldr	r2, [pc, #80]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006456:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800645a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800645c:	e005      	b.n	800646a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800645e:	4b12      	ldr	r3, [pc, #72]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006462:	4a11      	ldr	r2, [pc, #68]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006464:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006468:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800646a:	4b0f      	ldr	r3, [pc, #60]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a0e      	ldr	r2, [pc, #56]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006474:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006476:	f7fc f819 	bl	80024ac <HAL_GetTick>
 800647a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800647c:	e008      	b.n	8006490 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800647e:	f7fc f815 	bl	80024ac <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d901      	bls.n	8006490 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e006      	b.n	800649e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <RCCEx_PLL3_Config+0x15c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0f0      	beq.n	800647e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	58024400 	.word	0x58024400
 80064ac:	ffff0007 	.word	0xffff0007

080064b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e049      	b.n	8006556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fb fe86 	bl	80021e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f000 f9ec 	bl	80068cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b01      	cmp	r3, #1
 8006572:	d001      	beq.n	8006578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e05e      	b.n	8006636 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a2b      	ldr	r2, [pc, #172]	@ (8006644 <HAL_TIM_Base_Start_IT+0xe4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d02c      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x94>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a2:	d027      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x94>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a27      	ldr	r2, [pc, #156]	@ (8006648 <HAL_TIM_Base_Start_IT+0xe8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d022      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x94>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a26      	ldr	r2, [pc, #152]	@ (800664c <HAL_TIM_Base_Start_IT+0xec>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d01d      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x94>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a24      	ldr	r2, [pc, #144]	@ (8006650 <HAL_TIM_Base_Start_IT+0xf0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d018      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x94>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a23      	ldr	r2, [pc, #140]	@ (8006654 <HAL_TIM_Base_Start_IT+0xf4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x94>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a21      	ldr	r2, [pc, #132]	@ (8006658 <HAL_TIM_Base_Start_IT+0xf8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00e      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x94>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a20      	ldr	r2, [pc, #128]	@ (800665c <HAL_TIM_Base_Start_IT+0xfc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d009      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x94>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006660 <HAL_TIM_Base_Start_IT+0x100>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d004      	beq.n	80065f4 <HAL_TIM_Base_Start_IT+0x94>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1d      	ldr	r2, [pc, #116]	@ (8006664 <HAL_TIM_Base_Start_IT+0x104>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d115      	bne.n	8006620 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006668 <HAL_TIM_Base_Start_IT+0x108>)
 80065fc:	4013      	ands	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b06      	cmp	r3, #6
 8006604:	d015      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0xd2>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800660c:	d011      	beq.n	8006632 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0201 	orr.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661e:	e008      	b.n	8006632 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	e000      	b.n	8006634 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006632:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40010000 	.word	0x40010000
 8006648:	40000400 	.word	0x40000400
 800664c:	40000800 	.word	0x40000800
 8006650:	40000c00 	.word	0x40000c00
 8006654:	40010400 	.word	0x40010400
 8006658:	40001800 	.word	0x40001800
 800665c:	40014000 	.word	0x40014000
 8006660:	4000e000 	.word	0x4000e000
 8006664:	4000e400 	.word	0x4000e400
 8006668:	00010007 	.word	0x00010007

0800666c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d020      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01b      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0202 	mvn.w	r2, #2
 80066a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f8e9 	bl	800688e <HAL_TIM_IC_CaptureCallback>
 80066bc:	e005      	b.n	80066ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f8db 	bl	800687a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f8ec 	bl	80068a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0304 	and.w	r3, r3, #4
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d020      	beq.n	800671c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01b      	beq.n	800671c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0204 	mvn.w	r2, #4
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2202      	movs	r2, #2
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f8c3 	bl	800688e <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f8b5 	bl	800687a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8c6 	bl	80068a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d020      	beq.n	8006768 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01b      	beq.n	8006768 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0208 	mvn.w	r2, #8
 8006738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2204      	movs	r2, #4
 800673e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f89d 	bl	800688e <HAL_TIM_IC_CaptureCallback>
 8006754:	e005      	b.n	8006762 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f88f 	bl	800687a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f8a0 	bl	80068a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f003 0310 	and.w	r3, r3, #16
 800676e:	2b00      	cmp	r3, #0
 8006770:	d020      	beq.n	80067b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b00      	cmp	r3, #0
 800677a:	d01b      	beq.n	80067b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0210 	mvn.w	r2, #16
 8006784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2208      	movs	r2, #8
 800678a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f877 	bl	800688e <HAL_TIM_IC_CaptureCallback>
 80067a0:	e005      	b.n	80067ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f869 	bl	800687a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f87a 	bl	80068a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00c      	beq.n	80067d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d007      	beq.n	80067d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f06f 0201 	mvn.w	r2, #1
 80067d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7fb fafa 	bl	8001dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d104      	bne.n	80067ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00c      	beq.n	8006806 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80067fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f9b5 	bl	8006b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d007      	beq.n	800682a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f9ad 	bl	8006b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00c      	beq.n	800684e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f834 	bl	80068b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00c      	beq.n	8006872 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f06f 0220 	mvn.w	r2, #32
 800686a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f975 	bl	8006b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006872:	bf00      	nop
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006896:	bf00      	nop
 8006898:	370c      	adds	r7, #12
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068aa:	bf00      	nop
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a47      	ldr	r2, [pc, #284]	@ (80069fc <TIM_Base_SetConfig+0x130>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068ea:	d00f      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a44      	ldr	r2, [pc, #272]	@ (8006a00 <TIM_Base_SetConfig+0x134>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a43      	ldr	r2, [pc, #268]	@ (8006a04 <TIM_Base_SetConfig+0x138>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a42      	ldr	r2, [pc, #264]	@ (8006a08 <TIM_Base_SetConfig+0x13c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a41      	ldr	r2, [pc, #260]	@ (8006a0c <TIM_Base_SetConfig+0x140>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d108      	bne.n	800691e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a36      	ldr	r2, [pc, #216]	@ (80069fc <TIM_Base_SetConfig+0x130>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d027      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692c:	d023      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a33      	ldr	r2, [pc, #204]	@ (8006a00 <TIM_Base_SetConfig+0x134>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01f      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a32      	ldr	r2, [pc, #200]	@ (8006a04 <TIM_Base_SetConfig+0x138>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01b      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a31      	ldr	r2, [pc, #196]	@ (8006a08 <TIM_Base_SetConfig+0x13c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d017      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a30      	ldr	r2, [pc, #192]	@ (8006a0c <TIM_Base_SetConfig+0x140>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2f      	ldr	r2, [pc, #188]	@ (8006a10 <TIM_Base_SetConfig+0x144>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00f      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2e      	ldr	r2, [pc, #184]	@ (8006a14 <TIM_Base_SetConfig+0x148>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00b      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2d      	ldr	r2, [pc, #180]	@ (8006a18 <TIM_Base_SetConfig+0x14c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d007      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2c      	ldr	r2, [pc, #176]	@ (8006a1c <TIM_Base_SetConfig+0x150>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d003      	beq.n	8006976 <TIM_Base_SetConfig+0xaa>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2b      	ldr	r2, [pc, #172]	@ (8006a20 <TIM_Base_SetConfig+0x154>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d108      	bne.n	8006988 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800697c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a14      	ldr	r2, [pc, #80]	@ (80069fc <TIM_Base_SetConfig+0x130>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00f      	beq.n	80069ce <TIM_Base_SetConfig+0x102>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <TIM_Base_SetConfig+0x140>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00b      	beq.n	80069ce <TIM_Base_SetConfig+0x102>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a15      	ldr	r2, [pc, #84]	@ (8006a10 <TIM_Base_SetConfig+0x144>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d007      	beq.n	80069ce <TIM_Base_SetConfig+0x102>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a14      	ldr	r2, [pc, #80]	@ (8006a14 <TIM_Base_SetConfig+0x148>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_Base_SetConfig+0x102>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a13      	ldr	r2, [pc, #76]	@ (8006a18 <TIM_Base_SetConfig+0x14c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d103      	bne.n	80069d6 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f043 0204 	orr.w	r2, r3, #4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	601a      	str	r2, [r3, #0]
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40010400 	.word	0x40010400
 8006a10:	40014000 	.word	0x40014000
 8006a14:	40014400 	.word	0x40014400
 8006a18:	40014800 	.word	0x40014800
 8006a1c:	4000e000 	.word	0x4000e000
 8006a20:	4000e400 	.word	0x4000e400

08006a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e077      	b.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a35      	ldr	r2, [pc, #212]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a34      	ldr	r2, [pc, #208]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d108      	bne.n	8006a82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a25      	ldr	r2, [pc, #148]	@ (8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d02c      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aae:	d027      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a22      	ldr	r2, [pc, #136]	@ (8006b40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d022      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a21      	ldr	r2, [pc, #132]	@ (8006b44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d01d      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d018      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d013      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00e      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b50 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d009      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a18      	ldr	r2, [pc, #96]	@ (8006b54 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d004      	beq.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a17      	ldr	r2, [pc, #92]	@ (8006b58 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d10c      	bne.n	8006b1a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	40010000 	.word	0x40010000
 8006b3c:	40010400 	.word	0x40010400
 8006b40:	40000400 	.word	0x40000400
 8006b44:	40000800 	.word	0x40000800
 8006b48:	40000c00 	.word	0x40000c00
 8006b4c:	40001800 	.word	0x40001800
 8006b50:	40014000 	.word	0x40014000
 8006b54:	4000e000 	.word	0x4000e000
 8006b58:	4000e400 	.word	0x4000e400

08006b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e042      	b.n	8006c30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d106      	bne.n	8006bc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fb fb87 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2224      	movs	r2, #36	@ 0x24
 8006bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 fbe0 	bl	80083a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fd71 	bl	80076d0 <UART_SetConfig>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e01b      	b.n	8006c30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fc5f 	bl	80084ec <UART_CheckIdleState>
 8006c2e:	4603      	mov	r3, r0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08a      	sub	sp, #40	@ 0x28
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	4613      	mov	r3, r2
 8006c46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d17b      	bne.n	8006d4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <HAL_UART_Transmit+0x26>
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e074      	b.n	8006d4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2221      	movs	r2, #33	@ 0x21
 8006c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c72:	f7fb fc1b 	bl	80024ac <HAL_GetTick>
 8006c76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c90:	d108      	bne.n	8006ca4 <HAL_UART_Transmit+0x6c>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d104      	bne.n	8006ca4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	e003      	b.n	8006cac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cac:	e030      	b.n	8006d10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2180      	movs	r1, #128	@ 0x80
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f001 fcc1 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e03d      	b.n	8006d4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10b      	bne.n	8006cee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ce4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	3302      	adds	r3, #2
 8006cea:	61bb      	str	r3, [r7, #24]
 8006cec:	e007      	b.n	8006cfe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	781a      	ldrb	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1c8      	bne.n	8006cae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	2200      	movs	r2, #0
 8006d24:	2140      	movs	r1, #64	@ 0x40
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f001 fc8a 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d005      	beq.n	8006d3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e006      	b.n	8006d4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	e000      	b.n	8006d4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d4a:	2302      	movs	r3, #2
  }
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3720      	adds	r7, #32
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08a      	sub	sp, #40	@ 0x28
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	4613      	mov	r3, r2
 8006d62:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d6a:	2b20      	cmp	r3, #32
 8006d6c:	f040 80b5 	bne.w	8006eda <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_UART_Receive+0x28>
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0ad      	b.n	8006edc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2222      	movs	r2, #34	@ 0x22
 8006d8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d96:	f7fb fb89 	bl	80024ac <HAL_GetTick>
 8006d9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	88fa      	ldrh	r2, [r7, #6]
 8006da0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	88fa      	ldrh	r2, [r7, #6]
 8006da8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db4:	d10e      	bne.n	8006dd4 <HAL_UART_Receive+0x80>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <HAL_UART_Receive+0x76>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006dc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dc8:	e02d      	b.n	8006e26 <HAL_UART_Receive+0xd2>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	22ff      	movs	r2, #255	@ 0xff
 8006dce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dd2:	e028      	b.n	8006e26 <HAL_UART_Receive+0xd2>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10d      	bne.n	8006df8 <HAL_UART_Receive+0xa4>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <HAL_UART_Receive+0x9a>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	22ff      	movs	r2, #255	@ 0xff
 8006de8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dec:	e01b      	b.n	8006e26 <HAL_UART_Receive+0xd2>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	227f      	movs	r2, #127	@ 0x7f
 8006df2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006df6:	e016      	b.n	8006e26 <HAL_UART_Receive+0xd2>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e00:	d10d      	bne.n	8006e1e <HAL_UART_Receive+0xca>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <HAL_UART_Receive+0xc0>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	227f      	movs	r2, #127	@ 0x7f
 8006e0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e12:	e008      	b.n	8006e26 <HAL_UART_Receive+0xd2>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	223f      	movs	r2, #63	@ 0x3f
 8006e18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006e1c:	e003      	b.n	8006e26 <HAL_UART_Receive+0xd2>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006e2c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e36:	d108      	bne.n	8006e4a <HAL_UART_Receive+0xf6>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	61bb      	str	r3, [r7, #24]
 8006e48:	e003      	b.n	8006e52 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e52:	e036      	b.n	8006ec2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2120      	movs	r1, #32
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f001 fbee 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d005      	beq.n	8006e76 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e032      	b.n	8006edc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10c      	bne.n	8006e96 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	8a7b      	ldrh	r3, [r7, #18]
 8006e86:	4013      	ands	r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	3302      	adds	r3, #2
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	e00c      	b.n	8006eb0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	8a7b      	ldrh	r3, [r7, #18]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	b2da      	uxtb	r2, r3
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	3301      	adds	r3, #1
 8006eae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1c2      	bne.n	8006e54 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e000      	b.n	8006edc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006eda:	2302      	movs	r3, #2
  }
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3720      	adds	r7, #32
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b0ba      	sub	sp, #232	@ 0xe8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006f0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006f12:	4013      	ands	r3, r2
 8006f14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006f18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d11b      	bne.n	8006f58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d015      	beq.n	8006f58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f30:	f003 0320 	and.w	r3, r3, #32
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d105      	bne.n	8006f44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8393 	beq.w	8007674 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3
      }
      return;
 8006f56:	e38d      	b.n	8007674 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 8123 	beq.w	80071a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f66:	4b8d      	ldr	r3, [pc, #564]	@ (800719c <HAL_UART_IRQHandler+0x2b8>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006f72:	4b8b      	ldr	r3, [pc, #556]	@ (80071a0 <HAL_UART_IRQHandler+0x2bc>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8116 	beq.w	80071a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d011      	beq.n	8006fac <HAL_UART_IRQHandler+0xc8>
 8006f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa2:	f043 0201 	orr.w	r2, r3, #1
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d011      	beq.n	8006fdc <HAL_UART_IRQHandler+0xf8>
 8006fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2202      	movs	r2, #2
 8006fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd2:	f043 0204 	orr.w	r2, r3, #4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d011      	beq.n	800700c <HAL_UART_IRQHandler+0x128>
 8006fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2204      	movs	r2, #4
 8006ffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007002:	f043 0202 	orr.w	r2, r3, #2
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800700c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	d017      	beq.n	8007048 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d105      	bne.n	8007030 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007024:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007028:	4b5c      	ldr	r3, [pc, #368]	@ (800719c <HAL_UART_IRQHandler+0x2b8>)
 800702a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2208      	movs	r2, #8
 8007036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703e:	f043 0208 	orr.w	r2, r3, #8
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800704c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007050:	2b00      	cmp	r3, #0
 8007052:	d012      	beq.n	800707a <HAL_UART_IRQHandler+0x196>
 8007054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007058:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00c      	beq.n	800707a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007070:	f043 0220 	orr.w	r2, r3, #32
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 82f9 	beq.w	8007678 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800708a:	f003 0320 	and.w	r3, r3, #32
 800708e:	2b00      	cmp	r3, #0
 8007090:	d013      	beq.n	80070ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d105      	bne.n	80070aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800709e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ce:	2b40      	cmp	r3, #64	@ 0x40
 80070d0:	d005      	beq.n	80070de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80070d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d054      	beq.n	8007188 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f001 fb1c 	bl	800871c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070ee:	2b40      	cmp	r3, #64	@ 0x40
 80070f0:	d146      	bne.n	8007180 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	3308      	adds	r3, #8
 80070f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800710c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800711e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800712a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1d9      	bne.n	80070f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007144:	2b00      	cmp	r3, #0
 8007146:	d017      	beq.n	8007178 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800714e:	4a15      	ldr	r2, [pc, #84]	@ (80071a4 <HAL_UART_IRQHandler+0x2c0>)
 8007150:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007158:	4618      	mov	r0, r3
 800715a:	f7fb fe29 	bl	8002db0 <HAL_DMA_Abort_IT>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d019      	beq.n	8007198 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800716a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007172:	4610      	mov	r0, r2
 8007174:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007176:	e00f      	b.n	8007198 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fa93 	bl	80076a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717e:	e00b      	b.n	8007198 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fa8f 	bl	80076a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007186:	e007      	b.n	8007198 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fa8b 	bl	80076a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007196:	e26f      	b.n	8007678 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007198:	bf00      	nop
    return;
 800719a:	e26d      	b.n	8007678 <HAL_UART_IRQHandler+0x794>
 800719c:	10000001 	.word	0x10000001
 80071a0:	04000120 	.word	0x04000120
 80071a4:	080087e9 	.word	0x080087e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	f040 8203 	bne.w	80075b8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80071b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b6:	f003 0310 	and.w	r3, r3, #16
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 81fc 	beq.w	80075b8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80071c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 81f5 	beq.w	80075b8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2210      	movs	r2, #16
 80071d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e0:	2b40      	cmp	r3, #64	@ 0x40
 80071e2:	f040 816d 	bne.w	80074c0 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4aa4      	ldr	r2, [pc, #656]	@ (8007480 <HAL_UART_IRQHandler+0x59c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d068      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4aa1      	ldr	r2, [pc, #644]	@ (8007484 <HAL_UART_IRQHandler+0x5a0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d061      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a9f      	ldr	r2, [pc, #636]	@ (8007488 <HAL_UART_IRQHandler+0x5a4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d05a      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a9c      	ldr	r2, [pc, #624]	@ (800748c <HAL_UART_IRQHandler+0x5a8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d053      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a9a      	ldr	r2, [pc, #616]	@ (8007490 <HAL_UART_IRQHandler+0x5ac>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d04c      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a97      	ldr	r2, [pc, #604]	@ (8007494 <HAL_UART_IRQHandler+0x5b0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d045      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a95      	ldr	r2, [pc, #596]	@ (8007498 <HAL_UART_IRQHandler+0x5b4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d03e      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a92      	ldr	r2, [pc, #584]	@ (800749c <HAL_UART_IRQHandler+0x5b8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d037      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a90      	ldr	r2, [pc, #576]	@ (80074a0 <HAL_UART_IRQHandler+0x5bc>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d030      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a8d      	ldr	r2, [pc, #564]	@ (80074a4 <HAL_UART_IRQHandler+0x5c0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d029      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a8b      	ldr	r2, [pc, #556]	@ (80074a8 <HAL_UART_IRQHandler+0x5c4>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d022      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a88      	ldr	r2, [pc, #544]	@ (80074ac <HAL_UART_IRQHandler+0x5c8>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d01b      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a86      	ldr	r2, [pc, #536]	@ (80074b0 <HAL_UART_IRQHandler+0x5cc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d014      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a83      	ldr	r2, [pc, #524]	@ (80074b4 <HAL_UART_IRQHandler+0x5d0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00d      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a81      	ldr	r2, [pc, #516]	@ (80074b8 <HAL_UART_IRQHandler+0x5d4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d006      	beq.n	80072c6 <HAL_UART_IRQHandler+0x3e2>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a7e      	ldr	r2, [pc, #504]	@ (80074bc <HAL_UART_IRQHandler+0x5d8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d106      	bne.n	80072d4 <HAL_UART_IRQHandler+0x3f0>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	e005      	b.n	80072e0 <HAL_UART_IRQHandler+0x3fc>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80ad 	beq.w	8007448 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072f8:	429a      	cmp	r2, r3
 80072fa:	f080 80a5 	bcs.w	8007448 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007304:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007314:	f000 8087 	beq.w	8007426 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800732c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007334:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007346:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800734e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800735a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1da      	bne.n	8007318 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007372:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3308      	adds	r3, #8
 8007382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007386:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800738a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800738e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e1      	bne.n	8007362 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3308      	adds	r3, #8
 80073a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80073c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80073d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e3      	bne.n	800739e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073f4:	f023 0310 	bic.w	r3, r3, #16
 80073f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007408:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800740c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e4      	bne.n	80073e4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007420:	4618      	mov	r0, r3
 8007422:	f7fb f9a7 	bl	8002774 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2202      	movs	r2, #2
 800742a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007438:	b29b      	uxth	r3, r3
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	b29b      	uxth	r3, r3
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f939 	bl	80076b8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007446:	e119      	b.n	800767c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800744e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007452:	429a      	cmp	r2, r3
 8007454:	f040 8112 	bne.w	800767c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007464:	f040 810a 	bne.w	800767c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f91e 	bl	80076b8 <HAL_UARTEx_RxEventCallback>
      return;
 800747c:	e0fe      	b.n	800767c <HAL_UART_IRQHandler+0x798>
 800747e:	bf00      	nop
 8007480:	40020010 	.word	0x40020010
 8007484:	40020028 	.word	0x40020028
 8007488:	40020040 	.word	0x40020040
 800748c:	40020058 	.word	0x40020058
 8007490:	40020070 	.word	0x40020070
 8007494:	40020088 	.word	0x40020088
 8007498:	400200a0 	.word	0x400200a0
 800749c:	400200b8 	.word	0x400200b8
 80074a0:	40020410 	.word	0x40020410
 80074a4:	40020428 	.word	0x40020428
 80074a8:	40020440 	.word	0x40020440
 80074ac:	40020458 	.word	0x40020458
 80074b0:	40020470 	.word	0x40020470
 80074b4:	40020488 	.word	0x40020488
 80074b8:	400204a0 	.word	0x400204a0
 80074bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80074da:	b29b      	uxth	r3, r3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80cf 	beq.w	8007680 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80074e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 80ca 	beq.w	8007680 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800750e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007510:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007512:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007514:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800751c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e4      	bne.n	80074ec <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	623b      	str	r3, [r7, #32]
   return(result);
 8007532:	6a3a      	ldr	r2, [r7, #32]
 8007534:	4b55      	ldr	r3, [pc, #340]	@ (800768c <HAL_UART_IRQHandler+0x7a8>)
 8007536:	4013      	ands	r3, r2
 8007538:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3308      	adds	r3, #8
 8007542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007546:	633a      	str	r2, [r7, #48]	@ 0x30
 8007548:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800754c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e3      	bne.n	8007522 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	60fb      	str	r3, [r7, #12]
   return(result);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0310 	bic.w	r3, r3, #16
 8007582:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	69b9      	ldr	r1, [r7, #24]
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	617b      	str	r3, [r7, #20]
   return(result);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e4      	bne.n	800756e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f881 	bl	80076b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075b6:	e063      	b.n	8007680 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80075b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00e      	beq.n	80075e2 <HAL_UART_IRQHandler+0x6fe>
 80075c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d008      	beq.n	80075e2 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80075d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 f941 	bl	8008862 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075e0:	e051      	b.n	8007686 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d014      	beq.n	8007618 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80075ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d105      	bne.n	8007606 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d008      	beq.n	8007618 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800760a:	2b00      	cmp	r3, #0
 800760c:	d03a      	beq.n	8007684 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
    }
    return;
 8007616:	e035      	b.n	8007684 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800761c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d009      	beq.n	8007638 <HAL_UART_IRQHandler+0x754>
 8007624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f8eb 	bl	800880c <UART_EndTransmit_IT>
    return;
 8007636:	e026      	b.n	8007686 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800763c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d009      	beq.n	8007658 <HAL_UART_IRQHandler+0x774>
 8007644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007648:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f91a 	bl	800888a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007656:	e016      	b.n	8007686 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800765c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d010      	beq.n	8007686 <HAL_UART_IRQHandler+0x7a2>
 8007664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007668:	2b00      	cmp	r3, #0
 800766a:	da0c      	bge.n	8007686 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f902 	bl	8008876 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007672:	e008      	b.n	8007686 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007674:	bf00      	nop
 8007676:	e006      	b.n	8007686 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007678:	bf00      	nop
 800767a:	e004      	b.n	8007686 <HAL_UART_IRQHandler+0x7a2>
      return;
 800767c:	bf00      	nop
 800767e:	e002      	b.n	8007686 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007680:	bf00      	nop
 8007682:	e000      	b.n	8007686 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007684:	bf00      	nop
  }
}
 8007686:	37e8      	adds	r7, #232	@ 0xe8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	effffffe 	.word	0xeffffffe

08007690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076d4:	b092      	sub	sp, #72	@ 0x48
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4bbe      	ldr	r3, [pc, #760]	@ (80079f8 <UART_SetConfig+0x328>)
 8007700:	4013      	ands	r3, r2
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007708:	430b      	orrs	r3, r1
 800770a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	699b      	ldr	r3, [r3, #24]
 8007726:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4ab3      	ldr	r2, [pc, #716]	@ (80079fc <UART_SetConfig+0x32c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d004      	beq.n	800773c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007738:	4313      	orrs	r3, r2
 800773a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	4baf      	ldr	r3, [pc, #700]	@ (8007a00 <UART_SetConfig+0x330>)
 8007744:	4013      	ands	r3, r2
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	6812      	ldr	r2, [r2, #0]
 800774a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800774c:	430b      	orrs	r3, r1
 800774e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007756:	f023 010f 	bic.w	r1, r3, #15
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4aa6      	ldr	r2, [pc, #664]	@ (8007a04 <UART_SetConfig+0x334>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d177      	bne.n	8007860 <UART_SetConfig+0x190>
 8007770:	4ba5      	ldr	r3, [pc, #660]	@ (8007a08 <UART_SetConfig+0x338>)
 8007772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007774:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007778:	2b28      	cmp	r3, #40	@ 0x28
 800777a:	d86d      	bhi.n	8007858 <UART_SetConfig+0x188>
 800777c:	a201      	add	r2, pc, #4	@ (adr r2, 8007784 <UART_SetConfig+0xb4>)
 800777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007782:	bf00      	nop
 8007784:	08007829 	.word	0x08007829
 8007788:	08007859 	.word	0x08007859
 800778c:	08007859 	.word	0x08007859
 8007790:	08007859 	.word	0x08007859
 8007794:	08007859 	.word	0x08007859
 8007798:	08007859 	.word	0x08007859
 800779c:	08007859 	.word	0x08007859
 80077a0:	08007859 	.word	0x08007859
 80077a4:	08007831 	.word	0x08007831
 80077a8:	08007859 	.word	0x08007859
 80077ac:	08007859 	.word	0x08007859
 80077b0:	08007859 	.word	0x08007859
 80077b4:	08007859 	.word	0x08007859
 80077b8:	08007859 	.word	0x08007859
 80077bc:	08007859 	.word	0x08007859
 80077c0:	08007859 	.word	0x08007859
 80077c4:	08007839 	.word	0x08007839
 80077c8:	08007859 	.word	0x08007859
 80077cc:	08007859 	.word	0x08007859
 80077d0:	08007859 	.word	0x08007859
 80077d4:	08007859 	.word	0x08007859
 80077d8:	08007859 	.word	0x08007859
 80077dc:	08007859 	.word	0x08007859
 80077e0:	08007859 	.word	0x08007859
 80077e4:	08007841 	.word	0x08007841
 80077e8:	08007859 	.word	0x08007859
 80077ec:	08007859 	.word	0x08007859
 80077f0:	08007859 	.word	0x08007859
 80077f4:	08007859 	.word	0x08007859
 80077f8:	08007859 	.word	0x08007859
 80077fc:	08007859 	.word	0x08007859
 8007800:	08007859 	.word	0x08007859
 8007804:	08007849 	.word	0x08007849
 8007808:	08007859 	.word	0x08007859
 800780c:	08007859 	.word	0x08007859
 8007810:	08007859 	.word	0x08007859
 8007814:	08007859 	.word	0x08007859
 8007818:	08007859 	.word	0x08007859
 800781c:	08007859 	.word	0x08007859
 8007820:	08007859 	.word	0x08007859
 8007824:	08007851 	.word	0x08007851
 8007828:	2301      	movs	r3, #1
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e326      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007830:	2304      	movs	r3, #4
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e322      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007838:	2308      	movs	r3, #8
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e31e      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007840:	2310      	movs	r3, #16
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e31a      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007848:	2320      	movs	r3, #32
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e316      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007850:	2340      	movs	r3, #64	@ 0x40
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e312      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007858:	2380      	movs	r3, #128	@ 0x80
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e30e      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a69      	ldr	r2, [pc, #420]	@ (8007a0c <UART_SetConfig+0x33c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d130      	bne.n	80078cc <UART_SetConfig+0x1fc>
 800786a:	4b67      	ldr	r3, [pc, #412]	@ (8007a08 <UART_SetConfig+0x338>)
 800786c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	2b05      	cmp	r3, #5
 8007874:	d826      	bhi.n	80078c4 <UART_SetConfig+0x1f4>
 8007876:	a201      	add	r2, pc, #4	@ (adr r2, 800787c <UART_SetConfig+0x1ac>)
 8007878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800787c:	08007895 	.word	0x08007895
 8007880:	0800789d 	.word	0x0800789d
 8007884:	080078a5 	.word	0x080078a5
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078b5 	.word	0x080078b5
 8007890:	080078bd 	.word	0x080078bd
 8007894:	2300      	movs	r3, #0
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e2f0      	b.n	8007e7e <UART_SetConfig+0x7ae>
 800789c:	2304      	movs	r3, #4
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e2ec      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80078a4:	2308      	movs	r3, #8
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e2e8      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80078ac:	2310      	movs	r3, #16
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e2e4      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80078b4:	2320      	movs	r3, #32
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e2e0      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80078bc:	2340      	movs	r3, #64	@ 0x40
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e2dc      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80078c4:	2380      	movs	r3, #128	@ 0x80
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e2d8      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a4f      	ldr	r2, [pc, #316]	@ (8007a10 <UART_SetConfig+0x340>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d130      	bne.n	8007938 <UART_SetConfig+0x268>
 80078d6:	4b4c      	ldr	r3, [pc, #304]	@ (8007a08 <UART_SetConfig+0x338>)
 80078d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	2b05      	cmp	r3, #5
 80078e0:	d826      	bhi.n	8007930 <UART_SetConfig+0x260>
 80078e2:	a201      	add	r2, pc, #4	@ (adr r2, 80078e8 <UART_SetConfig+0x218>)
 80078e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e8:	08007901 	.word	0x08007901
 80078ec:	08007909 	.word	0x08007909
 80078f0:	08007911 	.word	0x08007911
 80078f4:	08007919 	.word	0x08007919
 80078f8:	08007921 	.word	0x08007921
 80078fc:	08007929 	.word	0x08007929
 8007900:	2300      	movs	r3, #0
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e2ba      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007908:	2304      	movs	r3, #4
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e2b6      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007910:	2308      	movs	r3, #8
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e2b2      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007918:	2310      	movs	r3, #16
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e2ae      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007920:	2320      	movs	r3, #32
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e2aa      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007928:	2340      	movs	r3, #64	@ 0x40
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e2a6      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007930:	2380      	movs	r3, #128	@ 0x80
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e2a2      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a35      	ldr	r2, [pc, #212]	@ (8007a14 <UART_SetConfig+0x344>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d130      	bne.n	80079a4 <UART_SetConfig+0x2d4>
 8007942:	4b31      	ldr	r3, [pc, #196]	@ (8007a08 <UART_SetConfig+0x338>)
 8007944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007946:	f003 0307 	and.w	r3, r3, #7
 800794a:	2b05      	cmp	r3, #5
 800794c:	d826      	bhi.n	800799c <UART_SetConfig+0x2cc>
 800794e:	a201      	add	r2, pc, #4	@ (adr r2, 8007954 <UART_SetConfig+0x284>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	0800796d 	.word	0x0800796d
 8007958:	08007975 	.word	0x08007975
 800795c:	0800797d 	.word	0x0800797d
 8007960:	08007985 	.word	0x08007985
 8007964:	0800798d 	.word	0x0800798d
 8007968:	08007995 	.word	0x08007995
 800796c:	2300      	movs	r3, #0
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e284      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007974:	2304      	movs	r3, #4
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e280      	b.n	8007e7e <UART_SetConfig+0x7ae>
 800797c:	2308      	movs	r3, #8
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e27c      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007984:	2310      	movs	r3, #16
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e278      	b.n	8007e7e <UART_SetConfig+0x7ae>
 800798c:	2320      	movs	r3, #32
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e274      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007994:	2340      	movs	r3, #64	@ 0x40
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e270      	b.n	8007e7e <UART_SetConfig+0x7ae>
 800799c:	2380      	movs	r3, #128	@ 0x80
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e26c      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007a18 <UART_SetConfig+0x348>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d142      	bne.n	8007a34 <UART_SetConfig+0x364>
 80079ae:	4b16      	ldr	r3, [pc, #88]	@ (8007a08 <UART_SetConfig+0x338>)
 80079b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	d838      	bhi.n	8007a2c <UART_SetConfig+0x35c>
 80079ba:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <UART_SetConfig+0x2f0>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	080079d9 	.word	0x080079d9
 80079c4:	080079e1 	.word	0x080079e1
 80079c8:	080079e9 	.word	0x080079e9
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	08007a1d 	.word	0x08007a1d
 80079d4:	08007a25 	.word	0x08007a25
 80079d8:	2300      	movs	r3, #0
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e24e      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80079e0:	2304      	movs	r3, #4
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e24a      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80079e8:	2308      	movs	r3, #8
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e246      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80079f0:	2310      	movs	r3, #16
 80079f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079f6:	e242      	b.n	8007e7e <UART_SetConfig+0x7ae>
 80079f8:	cfff69f3 	.word	0xcfff69f3
 80079fc:	58000c00 	.word	0x58000c00
 8007a00:	11fff4ff 	.word	0x11fff4ff
 8007a04:	40011000 	.word	0x40011000
 8007a08:	58024400 	.word	0x58024400
 8007a0c:	40004400 	.word	0x40004400
 8007a10:	40004800 	.word	0x40004800
 8007a14:	40004c00 	.word	0x40004c00
 8007a18:	40005000 	.word	0x40005000
 8007a1c:	2320      	movs	r3, #32
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a22:	e22c      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007a24:	2340      	movs	r3, #64	@ 0x40
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	e228      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007a2c:	2380      	movs	r3, #128	@ 0x80
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e224      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4ab1      	ldr	r2, [pc, #708]	@ (8007d00 <UART_SetConfig+0x630>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d176      	bne.n	8007b2c <UART_SetConfig+0x45c>
 8007a3e:	4bb1      	ldr	r3, [pc, #708]	@ (8007d04 <UART_SetConfig+0x634>)
 8007a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a46:	2b28      	cmp	r3, #40	@ 0x28
 8007a48:	d86c      	bhi.n	8007b24 <UART_SetConfig+0x454>
 8007a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a50 <UART_SetConfig+0x380>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007af5 	.word	0x08007af5
 8007a54:	08007b25 	.word	0x08007b25
 8007a58:	08007b25 	.word	0x08007b25
 8007a5c:	08007b25 	.word	0x08007b25
 8007a60:	08007b25 	.word	0x08007b25
 8007a64:	08007b25 	.word	0x08007b25
 8007a68:	08007b25 	.word	0x08007b25
 8007a6c:	08007b25 	.word	0x08007b25
 8007a70:	08007afd 	.word	0x08007afd
 8007a74:	08007b25 	.word	0x08007b25
 8007a78:	08007b25 	.word	0x08007b25
 8007a7c:	08007b25 	.word	0x08007b25
 8007a80:	08007b25 	.word	0x08007b25
 8007a84:	08007b25 	.word	0x08007b25
 8007a88:	08007b25 	.word	0x08007b25
 8007a8c:	08007b25 	.word	0x08007b25
 8007a90:	08007b05 	.word	0x08007b05
 8007a94:	08007b25 	.word	0x08007b25
 8007a98:	08007b25 	.word	0x08007b25
 8007a9c:	08007b25 	.word	0x08007b25
 8007aa0:	08007b25 	.word	0x08007b25
 8007aa4:	08007b25 	.word	0x08007b25
 8007aa8:	08007b25 	.word	0x08007b25
 8007aac:	08007b25 	.word	0x08007b25
 8007ab0:	08007b0d 	.word	0x08007b0d
 8007ab4:	08007b25 	.word	0x08007b25
 8007ab8:	08007b25 	.word	0x08007b25
 8007abc:	08007b25 	.word	0x08007b25
 8007ac0:	08007b25 	.word	0x08007b25
 8007ac4:	08007b25 	.word	0x08007b25
 8007ac8:	08007b25 	.word	0x08007b25
 8007acc:	08007b25 	.word	0x08007b25
 8007ad0:	08007b15 	.word	0x08007b15
 8007ad4:	08007b25 	.word	0x08007b25
 8007ad8:	08007b25 	.word	0x08007b25
 8007adc:	08007b25 	.word	0x08007b25
 8007ae0:	08007b25 	.word	0x08007b25
 8007ae4:	08007b25 	.word	0x08007b25
 8007ae8:	08007b25 	.word	0x08007b25
 8007aec:	08007b25 	.word	0x08007b25
 8007af0:	08007b1d 	.word	0x08007b1d
 8007af4:	2301      	movs	r3, #1
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e1c0      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007afc:	2304      	movs	r3, #4
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e1bc      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b04:	2308      	movs	r3, #8
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e1b8      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b0c:	2310      	movs	r3, #16
 8007b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b12:	e1b4      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b14:	2320      	movs	r3, #32
 8007b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1a:	e1b0      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b1c:	2340      	movs	r3, #64	@ 0x40
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e1ac      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b24:	2380      	movs	r3, #128	@ 0x80
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e1a8      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a75      	ldr	r2, [pc, #468]	@ (8007d08 <UART_SetConfig+0x638>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d130      	bne.n	8007b98 <UART_SetConfig+0x4c8>
 8007b36:	4b73      	ldr	r3, [pc, #460]	@ (8007d04 <UART_SetConfig+0x634>)
 8007b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	2b05      	cmp	r3, #5
 8007b40:	d826      	bhi.n	8007b90 <UART_SetConfig+0x4c0>
 8007b42:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <UART_SetConfig+0x478>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007b61 	.word	0x08007b61
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	08007b71 	.word	0x08007b71
 8007b54:	08007b79 	.word	0x08007b79
 8007b58:	08007b81 	.word	0x08007b81
 8007b5c:	08007b89 	.word	0x08007b89
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b66:	e18a      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b68:	2304      	movs	r3, #4
 8007b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6e:	e186      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b70:	2308      	movs	r3, #8
 8007b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b76:	e182      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b78:	2310      	movs	r3, #16
 8007b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7e:	e17e      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b80:	2320      	movs	r3, #32
 8007b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b86:	e17a      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b88:	2340      	movs	r3, #64	@ 0x40
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e176      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b90:	2380      	movs	r3, #128	@ 0x80
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e172      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a5b      	ldr	r2, [pc, #364]	@ (8007d0c <UART_SetConfig+0x63c>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d130      	bne.n	8007c04 <UART_SetConfig+0x534>
 8007ba2:	4b58      	ldr	r3, [pc, #352]	@ (8007d04 <UART_SetConfig+0x634>)
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b05      	cmp	r3, #5
 8007bac:	d826      	bhi.n	8007bfc <UART_SetConfig+0x52c>
 8007bae:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb4 <UART_SetConfig+0x4e4>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007bcd 	.word	0x08007bcd
 8007bb8:	08007bd5 	.word	0x08007bd5
 8007bbc:	08007bdd 	.word	0x08007bdd
 8007bc0:	08007be5 	.word	0x08007be5
 8007bc4:	08007bed 	.word	0x08007bed
 8007bc8:	08007bf5 	.word	0x08007bf5
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd2:	e154      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bda:	e150      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007bdc:	2308      	movs	r3, #8
 8007bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be2:	e14c      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007be4:	2310      	movs	r3, #16
 8007be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bea:	e148      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007bec:	2320      	movs	r3, #32
 8007bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf2:	e144      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007bf4:	2340      	movs	r3, #64	@ 0x40
 8007bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfa:	e140      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007bfc:	2380      	movs	r3, #128	@ 0x80
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c02:	e13c      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a41      	ldr	r2, [pc, #260]	@ (8007d10 <UART_SetConfig+0x640>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	f040 8082 	bne.w	8007d14 <UART_SetConfig+0x644>
 8007c10:	4b3c      	ldr	r3, [pc, #240]	@ (8007d04 <UART_SetConfig+0x634>)
 8007c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c18:	2b28      	cmp	r3, #40	@ 0x28
 8007c1a:	d86d      	bhi.n	8007cf8 <UART_SetConfig+0x628>
 8007c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c24 <UART_SetConfig+0x554>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007cc9 	.word	0x08007cc9
 8007c28:	08007cf9 	.word	0x08007cf9
 8007c2c:	08007cf9 	.word	0x08007cf9
 8007c30:	08007cf9 	.word	0x08007cf9
 8007c34:	08007cf9 	.word	0x08007cf9
 8007c38:	08007cf9 	.word	0x08007cf9
 8007c3c:	08007cf9 	.word	0x08007cf9
 8007c40:	08007cf9 	.word	0x08007cf9
 8007c44:	08007cd1 	.word	0x08007cd1
 8007c48:	08007cf9 	.word	0x08007cf9
 8007c4c:	08007cf9 	.word	0x08007cf9
 8007c50:	08007cf9 	.word	0x08007cf9
 8007c54:	08007cf9 	.word	0x08007cf9
 8007c58:	08007cf9 	.word	0x08007cf9
 8007c5c:	08007cf9 	.word	0x08007cf9
 8007c60:	08007cf9 	.word	0x08007cf9
 8007c64:	08007cd9 	.word	0x08007cd9
 8007c68:	08007cf9 	.word	0x08007cf9
 8007c6c:	08007cf9 	.word	0x08007cf9
 8007c70:	08007cf9 	.word	0x08007cf9
 8007c74:	08007cf9 	.word	0x08007cf9
 8007c78:	08007cf9 	.word	0x08007cf9
 8007c7c:	08007cf9 	.word	0x08007cf9
 8007c80:	08007cf9 	.word	0x08007cf9
 8007c84:	08007ce1 	.word	0x08007ce1
 8007c88:	08007cf9 	.word	0x08007cf9
 8007c8c:	08007cf9 	.word	0x08007cf9
 8007c90:	08007cf9 	.word	0x08007cf9
 8007c94:	08007cf9 	.word	0x08007cf9
 8007c98:	08007cf9 	.word	0x08007cf9
 8007c9c:	08007cf9 	.word	0x08007cf9
 8007ca0:	08007cf9 	.word	0x08007cf9
 8007ca4:	08007ce9 	.word	0x08007ce9
 8007ca8:	08007cf9 	.word	0x08007cf9
 8007cac:	08007cf9 	.word	0x08007cf9
 8007cb0:	08007cf9 	.word	0x08007cf9
 8007cb4:	08007cf9 	.word	0x08007cf9
 8007cb8:	08007cf9 	.word	0x08007cf9
 8007cbc:	08007cf9 	.word	0x08007cf9
 8007cc0:	08007cf9 	.word	0x08007cf9
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	2301      	movs	r3, #1
 8007cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cce:	e0d6      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd6:	e0d2      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cde:	e0ce      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce6:	e0ca      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cee:	e0c6      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007cf0:	2340      	movs	r3, #64	@ 0x40
 8007cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf6:	e0c2      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007cf8:	2380      	movs	r3, #128	@ 0x80
 8007cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfe:	e0be      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007d00:	40011400 	.word	0x40011400
 8007d04:	58024400 	.word	0x58024400
 8007d08:	40007800 	.word	0x40007800
 8007d0c:	40007c00 	.word	0x40007c00
 8007d10:	40011800 	.word	0x40011800
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4aad      	ldr	r2, [pc, #692]	@ (8007fd0 <UART_SetConfig+0x900>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d176      	bne.n	8007e0c <UART_SetConfig+0x73c>
 8007d1e:	4bad      	ldr	r3, [pc, #692]	@ (8007fd4 <UART_SetConfig+0x904>)
 8007d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d26:	2b28      	cmp	r3, #40	@ 0x28
 8007d28:	d86c      	bhi.n	8007e04 <UART_SetConfig+0x734>
 8007d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <UART_SetConfig+0x660>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007dd5 	.word	0x08007dd5
 8007d34:	08007e05 	.word	0x08007e05
 8007d38:	08007e05 	.word	0x08007e05
 8007d3c:	08007e05 	.word	0x08007e05
 8007d40:	08007e05 	.word	0x08007e05
 8007d44:	08007e05 	.word	0x08007e05
 8007d48:	08007e05 	.word	0x08007e05
 8007d4c:	08007e05 	.word	0x08007e05
 8007d50:	08007ddd 	.word	0x08007ddd
 8007d54:	08007e05 	.word	0x08007e05
 8007d58:	08007e05 	.word	0x08007e05
 8007d5c:	08007e05 	.word	0x08007e05
 8007d60:	08007e05 	.word	0x08007e05
 8007d64:	08007e05 	.word	0x08007e05
 8007d68:	08007e05 	.word	0x08007e05
 8007d6c:	08007e05 	.word	0x08007e05
 8007d70:	08007de5 	.word	0x08007de5
 8007d74:	08007e05 	.word	0x08007e05
 8007d78:	08007e05 	.word	0x08007e05
 8007d7c:	08007e05 	.word	0x08007e05
 8007d80:	08007e05 	.word	0x08007e05
 8007d84:	08007e05 	.word	0x08007e05
 8007d88:	08007e05 	.word	0x08007e05
 8007d8c:	08007e05 	.word	0x08007e05
 8007d90:	08007ded 	.word	0x08007ded
 8007d94:	08007e05 	.word	0x08007e05
 8007d98:	08007e05 	.word	0x08007e05
 8007d9c:	08007e05 	.word	0x08007e05
 8007da0:	08007e05 	.word	0x08007e05
 8007da4:	08007e05 	.word	0x08007e05
 8007da8:	08007e05 	.word	0x08007e05
 8007dac:	08007e05 	.word	0x08007e05
 8007db0:	08007df5 	.word	0x08007df5
 8007db4:	08007e05 	.word	0x08007e05
 8007db8:	08007e05 	.word	0x08007e05
 8007dbc:	08007e05 	.word	0x08007e05
 8007dc0:	08007e05 	.word	0x08007e05
 8007dc4:	08007e05 	.word	0x08007e05
 8007dc8:	08007e05 	.word	0x08007e05
 8007dcc:	08007e05 	.word	0x08007e05
 8007dd0:	08007dfd 	.word	0x08007dfd
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dda:	e050      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de2:	e04c      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007de4:	2308      	movs	r3, #8
 8007de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dea:	e048      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007dec:	2310      	movs	r3, #16
 8007dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df2:	e044      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007df4:	2320      	movs	r3, #32
 8007df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfa:	e040      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007dfc:	2340      	movs	r3, #64	@ 0x40
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e03c      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007e04:	2380      	movs	r3, #128	@ 0x80
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0a:	e038      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a71      	ldr	r2, [pc, #452]	@ (8007fd8 <UART_SetConfig+0x908>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d130      	bne.n	8007e78 <UART_SetConfig+0x7a8>
 8007e16:	4b6f      	ldr	r3, [pc, #444]	@ (8007fd4 <UART_SetConfig+0x904>)
 8007e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e1a:	f003 0307 	and.w	r3, r3, #7
 8007e1e:	2b05      	cmp	r3, #5
 8007e20:	d826      	bhi.n	8007e70 <UART_SetConfig+0x7a0>
 8007e22:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <UART_SetConfig+0x758>)
 8007e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e28:	08007e41 	.word	0x08007e41
 8007e2c:	08007e49 	.word	0x08007e49
 8007e30:	08007e51 	.word	0x08007e51
 8007e34:	08007e59 	.word	0x08007e59
 8007e38:	08007e61 	.word	0x08007e61
 8007e3c:	08007e69 	.word	0x08007e69
 8007e40:	2302      	movs	r3, #2
 8007e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e46:	e01a      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007e48:	2304      	movs	r3, #4
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4e:	e016      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007e50:	2308      	movs	r3, #8
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e56:	e012      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007e58:	2310      	movs	r3, #16
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5e:	e00e      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007e60:	2320      	movs	r3, #32
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e66:	e00a      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007e68:	2340      	movs	r3, #64	@ 0x40
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6e:	e006      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007e70:	2380      	movs	r3, #128	@ 0x80
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e76:	e002      	b.n	8007e7e <UART_SetConfig+0x7ae>
 8007e78:	2380      	movs	r3, #128	@ 0x80
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a55      	ldr	r2, [pc, #340]	@ (8007fd8 <UART_SetConfig+0x908>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	f040 80f8 	bne.w	800807a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	dc46      	bgt.n	8007f20 <UART_SetConfig+0x850>
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	db75      	blt.n	8007f82 <UART_SetConfig+0x8b2>
 8007e96:	3b02      	subs	r3, #2
 8007e98:	2b1e      	cmp	r3, #30
 8007e9a:	d872      	bhi.n	8007f82 <UART_SetConfig+0x8b2>
 8007e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea4 <UART_SetConfig+0x7d4>)
 8007e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea2:	bf00      	nop
 8007ea4:	08007f27 	.word	0x08007f27
 8007ea8:	08007f83 	.word	0x08007f83
 8007eac:	08007f2f 	.word	0x08007f2f
 8007eb0:	08007f83 	.word	0x08007f83
 8007eb4:	08007f83 	.word	0x08007f83
 8007eb8:	08007f83 	.word	0x08007f83
 8007ebc:	08007f3f 	.word	0x08007f3f
 8007ec0:	08007f83 	.word	0x08007f83
 8007ec4:	08007f83 	.word	0x08007f83
 8007ec8:	08007f83 	.word	0x08007f83
 8007ecc:	08007f83 	.word	0x08007f83
 8007ed0:	08007f83 	.word	0x08007f83
 8007ed4:	08007f83 	.word	0x08007f83
 8007ed8:	08007f83 	.word	0x08007f83
 8007edc:	08007f4f 	.word	0x08007f4f
 8007ee0:	08007f83 	.word	0x08007f83
 8007ee4:	08007f83 	.word	0x08007f83
 8007ee8:	08007f83 	.word	0x08007f83
 8007eec:	08007f83 	.word	0x08007f83
 8007ef0:	08007f83 	.word	0x08007f83
 8007ef4:	08007f83 	.word	0x08007f83
 8007ef8:	08007f83 	.word	0x08007f83
 8007efc:	08007f83 	.word	0x08007f83
 8007f00:	08007f83 	.word	0x08007f83
 8007f04:	08007f83 	.word	0x08007f83
 8007f08:	08007f83 	.word	0x08007f83
 8007f0c:	08007f83 	.word	0x08007f83
 8007f10:	08007f83 	.word	0x08007f83
 8007f14:	08007f83 	.word	0x08007f83
 8007f18:	08007f83 	.word	0x08007f83
 8007f1c:	08007f75 	.word	0x08007f75
 8007f20:	2b40      	cmp	r3, #64	@ 0x40
 8007f22:	d02a      	beq.n	8007f7a <UART_SetConfig+0x8aa>
 8007f24:	e02d      	b.n	8007f82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007f26:	f7fd fea1 	bl	8005c6c <HAL_RCCEx_GetD3PCLK1Freq>
 8007f2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007f2c:	e02f      	b.n	8007f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fd feb0 	bl	8005c98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f3c:	e027      	b.n	8007f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f3e:	f107 0318 	add.w	r3, r7, #24
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fd fffc 	bl	8005f40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f4c:	e01f      	b.n	8007f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f4e:	4b21      	ldr	r3, [pc, #132]	@ (8007fd4 <UART_SetConfig+0x904>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d009      	beq.n	8007f6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd4 <UART_SetConfig+0x904>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	08db      	lsrs	r3, r3, #3
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	4a1d      	ldr	r2, [pc, #116]	@ (8007fdc <UART_SetConfig+0x90c>)
 8007f66:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f6c:	e00f      	b.n	8007f8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8007fdc <UART_SetConfig+0x90c>)
 8007f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f72:	e00c      	b.n	8007f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f74:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe0 <UART_SetConfig+0x910>)
 8007f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f78:	e009      	b.n	8007f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f80:	e005      	b.n	8007f8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 81ee 	beq.w	8008372 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9a:	4a12      	ldr	r2, [pc, #72]	@ (8007fe4 <UART_SetConfig+0x914>)
 8007f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fa8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	4413      	add	r3, r2
 8007fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d305      	bcc.n	8007fc6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d910      	bls.n	8007fe8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fcc:	e1d1      	b.n	8008372 <UART_SetConfig+0xca2>
 8007fce:	bf00      	nop
 8007fd0:	40011c00 	.word	0x40011c00
 8007fd4:	58024400 	.word	0x58024400
 8007fd8:	58000c00 	.word	0x58000c00
 8007fdc:	03d09000 	.word	0x03d09000
 8007fe0:	003d0900 	.word	0x003d0900
 8007fe4:	08016a14 	.word	0x08016a14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fea:	2200      	movs	r2, #0
 8007fec:	60bb      	str	r3, [r7, #8]
 8007fee:	60fa      	str	r2, [r7, #12]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff4:	4ac0      	ldr	r2, [pc, #768]	@ (80082f8 <UART_SetConfig+0xc28>)
 8007ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	607a      	str	r2, [r7, #4]
 8008002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800800a:	f7f8 f9d9 	bl	80003c0 <__aeabi_uldivmod>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4610      	mov	r0, r2
 8008014:	4619      	mov	r1, r3
 8008016:	f04f 0200 	mov.w	r2, #0
 800801a:	f04f 0300 	mov.w	r3, #0
 800801e:	020b      	lsls	r3, r1, #8
 8008020:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008024:	0202      	lsls	r2, r0, #8
 8008026:	6979      	ldr	r1, [r7, #20]
 8008028:	6849      	ldr	r1, [r1, #4]
 800802a:	0849      	lsrs	r1, r1, #1
 800802c:	2000      	movs	r0, #0
 800802e:	460c      	mov	r4, r1
 8008030:	4605      	mov	r5, r0
 8008032:	eb12 0804 	adds.w	r8, r2, r4
 8008036:	eb43 0905 	adc.w	r9, r3, r5
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	469a      	mov	sl, r3
 8008042:	4693      	mov	fp, r2
 8008044:	4652      	mov	r2, sl
 8008046:	465b      	mov	r3, fp
 8008048:	4640      	mov	r0, r8
 800804a:	4649      	mov	r1, r9
 800804c:	f7f8 f9b8 	bl	80003c0 <__aeabi_uldivmod>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4613      	mov	r3, r2
 8008056:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800805a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800805e:	d308      	bcc.n	8008072 <UART_SetConfig+0x9a2>
 8008060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008062:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008066:	d204      	bcs.n	8008072 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800806e:	60da      	str	r2, [r3, #12]
 8008070:	e17f      	b.n	8008372 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008078:	e17b      	b.n	8008372 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008082:	f040 80bd 	bne.w	8008200 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008086:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800808a:	2b20      	cmp	r3, #32
 800808c:	dc48      	bgt.n	8008120 <UART_SetConfig+0xa50>
 800808e:	2b00      	cmp	r3, #0
 8008090:	db7b      	blt.n	800818a <UART_SetConfig+0xaba>
 8008092:	2b20      	cmp	r3, #32
 8008094:	d879      	bhi.n	800818a <UART_SetConfig+0xaba>
 8008096:	a201      	add	r2, pc, #4	@ (adr r2, 800809c <UART_SetConfig+0x9cc>)
 8008098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809c:	08008127 	.word	0x08008127
 80080a0:	0800812f 	.word	0x0800812f
 80080a4:	0800818b 	.word	0x0800818b
 80080a8:	0800818b 	.word	0x0800818b
 80080ac:	08008137 	.word	0x08008137
 80080b0:	0800818b 	.word	0x0800818b
 80080b4:	0800818b 	.word	0x0800818b
 80080b8:	0800818b 	.word	0x0800818b
 80080bc:	08008147 	.word	0x08008147
 80080c0:	0800818b 	.word	0x0800818b
 80080c4:	0800818b 	.word	0x0800818b
 80080c8:	0800818b 	.word	0x0800818b
 80080cc:	0800818b 	.word	0x0800818b
 80080d0:	0800818b 	.word	0x0800818b
 80080d4:	0800818b 	.word	0x0800818b
 80080d8:	0800818b 	.word	0x0800818b
 80080dc:	08008157 	.word	0x08008157
 80080e0:	0800818b 	.word	0x0800818b
 80080e4:	0800818b 	.word	0x0800818b
 80080e8:	0800818b 	.word	0x0800818b
 80080ec:	0800818b 	.word	0x0800818b
 80080f0:	0800818b 	.word	0x0800818b
 80080f4:	0800818b 	.word	0x0800818b
 80080f8:	0800818b 	.word	0x0800818b
 80080fc:	0800818b 	.word	0x0800818b
 8008100:	0800818b 	.word	0x0800818b
 8008104:	0800818b 	.word	0x0800818b
 8008108:	0800818b 	.word	0x0800818b
 800810c:	0800818b 	.word	0x0800818b
 8008110:	0800818b 	.word	0x0800818b
 8008114:	0800818b 	.word	0x0800818b
 8008118:	0800818b 	.word	0x0800818b
 800811c:	0800817d 	.word	0x0800817d
 8008120:	2b40      	cmp	r3, #64	@ 0x40
 8008122:	d02e      	beq.n	8008182 <UART_SetConfig+0xab2>
 8008124:	e031      	b.n	800818a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008126:	f7fc fb93 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 800812a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800812c:	e033      	b.n	8008196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800812e:	f7fc fba5 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 8008132:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008134:	e02f      	b.n	8008196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008136:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800813a:	4618      	mov	r0, r3
 800813c:	f7fd fdac 	bl	8005c98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008144:	e027      	b.n	8008196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008146:	f107 0318 	add.w	r3, r7, #24
 800814a:	4618      	mov	r0, r3
 800814c:	f7fd fef8 	bl	8005f40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008154:	e01f      	b.n	8008196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008156:	4b69      	ldr	r3, [pc, #420]	@ (80082fc <UART_SetConfig+0xc2c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0320 	and.w	r3, r3, #32
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008162:	4b66      	ldr	r3, [pc, #408]	@ (80082fc <UART_SetConfig+0xc2c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	08db      	lsrs	r3, r3, #3
 8008168:	f003 0303 	and.w	r3, r3, #3
 800816c:	4a64      	ldr	r2, [pc, #400]	@ (8008300 <UART_SetConfig+0xc30>)
 800816e:	fa22 f303 	lsr.w	r3, r2, r3
 8008172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008174:	e00f      	b.n	8008196 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008176:	4b62      	ldr	r3, [pc, #392]	@ (8008300 <UART_SetConfig+0xc30>)
 8008178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800817a:	e00c      	b.n	8008196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800817c:	4b61      	ldr	r3, [pc, #388]	@ (8008304 <UART_SetConfig+0xc34>)
 800817e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008180:	e009      	b.n	8008196 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008188:	e005      	b.n	8008196 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008194:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 80ea 	beq.w	8008372 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a2:	4a55      	ldr	r2, [pc, #340]	@ (80082f8 <UART_SetConfig+0xc28>)
 80081a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081a8:	461a      	mov	r2, r3
 80081aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80081b0:	005a      	lsls	r2, r3, #1
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	085b      	lsrs	r3, r3, #1
 80081b8:	441a      	add	r2, r3
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	fbb2 f3f3 	udiv	r3, r2, r3
 80081c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c6:	2b0f      	cmp	r3, #15
 80081c8:	d916      	bls.n	80081f8 <UART_SetConfig+0xb28>
 80081ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081d0:	d212      	bcs.n	80081f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f023 030f 	bic.w	r3, r3, #15
 80081da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	085b      	lsrs	r3, r3, #1
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081ea:	4313      	orrs	r3, r2
 80081ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80081f4:	60da      	str	r2, [r3, #12]
 80081f6:	e0bc      	b.n	8008372 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081fe:	e0b8      	b.n	8008372 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008200:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008204:	2b20      	cmp	r3, #32
 8008206:	dc4b      	bgt.n	80082a0 <UART_SetConfig+0xbd0>
 8008208:	2b00      	cmp	r3, #0
 800820a:	f2c0 8087 	blt.w	800831c <UART_SetConfig+0xc4c>
 800820e:	2b20      	cmp	r3, #32
 8008210:	f200 8084 	bhi.w	800831c <UART_SetConfig+0xc4c>
 8008214:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <UART_SetConfig+0xb4c>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	080082a7 	.word	0x080082a7
 8008220:	080082af 	.word	0x080082af
 8008224:	0800831d 	.word	0x0800831d
 8008228:	0800831d 	.word	0x0800831d
 800822c:	080082b7 	.word	0x080082b7
 8008230:	0800831d 	.word	0x0800831d
 8008234:	0800831d 	.word	0x0800831d
 8008238:	0800831d 	.word	0x0800831d
 800823c:	080082c7 	.word	0x080082c7
 8008240:	0800831d 	.word	0x0800831d
 8008244:	0800831d 	.word	0x0800831d
 8008248:	0800831d 	.word	0x0800831d
 800824c:	0800831d 	.word	0x0800831d
 8008250:	0800831d 	.word	0x0800831d
 8008254:	0800831d 	.word	0x0800831d
 8008258:	0800831d 	.word	0x0800831d
 800825c:	080082d7 	.word	0x080082d7
 8008260:	0800831d 	.word	0x0800831d
 8008264:	0800831d 	.word	0x0800831d
 8008268:	0800831d 	.word	0x0800831d
 800826c:	0800831d 	.word	0x0800831d
 8008270:	0800831d 	.word	0x0800831d
 8008274:	0800831d 	.word	0x0800831d
 8008278:	0800831d 	.word	0x0800831d
 800827c:	0800831d 	.word	0x0800831d
 8008280:	0800831d 	.word	0x0800831d
 8008284:	0800831d 	.word	0x0800831d
 8008288:	0800831d 	.word	0x0800831d
 800828c:	0800831d 	.word	0x0800831d
 8008290:	0800831d 	.word	0x0800831d
 8008294:	0800831d 	.word	0x0800831d
 8008298:	0800831d 	.word	0x0800831d
 800829c:	0800830f 	.word	0x0800830f
 80082a0:	2b40      	cmp	r3, #64	@ 0x40
 80082a2:	d037      	beq.n	8008314 <UART_SetConfig+0xc44>
 80082a4:	e03a      	b.n	800831c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082a6:	f7fc fad3 	bl	8004850 <HAL_RCC_GetPCLK1Freq>
 80082aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082ac:	e03c      	b.n	8008328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082ae:	f7fc fae5 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 80082b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082b4:	e038      	b.n	8008328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fd fcec 	bl	8005c98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c4:	e030      	b.n	8008328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c6:	f107 0318 	add.w	r3, r7, #24
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fd fe38 	bl	8005f40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d4:	e028      	b.n	8008328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082d6:	4b09      	ldr	r3, [pc, #36]	@ (80082fc <UART_SetConfig+0xc2c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d012      	beq.n	8008308 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082e2:	4b06      	ldr	r3, [pc, #24]	@ (80082fc <UART_SetConfig+0xc2c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	08db      	lsrs	r3, r3, #3
 80082e8:	f003 0303 	and.w	r3, r3, #3
 80082ec:	4a04      	ldr	r2, [pc, #16]	@ (8008300 <UART_SetConfig+0xc30>)
 80082ee:	fa22 f303 	lsr.w	r3, r2, r3
 80082f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082f4:	e018      	b.n	8008328 <UART_SetConfig+0xc58>
 80082f6:	bf00      	nop
 80082f8:	08016a14 	.word	0x08016a14
 80082fc:	58024400 	.word	0x58024400
 8008300:	03d09000 	.word	0x03d09000
 8008304:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008308:	4b24      	ldr	r3, [pc, #144]	@ (800839c <UART_SetConfig+0xccc>)
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800830c:	e00c      	b.n	8008328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800830e:	4b24      	ldr	r3, [pc, #144]	@ (80083a0 <UART_SetConfig+0xcd0>)
 8008310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008312:	e009      	b.n	8008328 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008314:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800831a:	e005      	b.n	8008328 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008326:	bf00      	nop
    }

    if (pclk != 0U)
 8008328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800832a:	2b00      	cmp	r3, #0
 800832c:	d021      	beq.n	8008372 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008332:	4a1c      	ldr	r2, [pc, #112]	@ (80083a4 <UART_SetConfig+0xcd4>)
 8008334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008338:	461a      	mov	r2, r3
 800833a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800833c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	441a      	add	r2, r3
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008350:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008354:	2b0f      	cmp	r3, #15
 8008356:	d909      	bls.n	800836c <UART_SetConfig+0xc9c>
 8008358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800835e:	d205      	bcs.n	800836c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008362:	b29a      	uxth	r2, r3
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60da      	str	r2, [r3, #12]
 800836a:	e002      	b.n	8008372 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2201      	movs	r2, #1
 8008376:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	2201      	movs	r2, #1
 800837e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2200      	movs	r2, #0
 800838c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800838e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008392:	4618      	mov	r0, r3
 8008394:	3748      	adds	r7, #72	@ 0x48
 8008396:	46bd      	mov	sp, r7
 8008398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800839c:	03d09000 	.word	0x03d09000
 80083a0:	003d0900 	.word	0x003d0900
 80083a4:	08016a14 	.word	0x08016a14

080083a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841a:	f003 0304 	and.w	r3, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008484:	2b00      	cmp	r3, #0
 8008486:	d01a      	beq.n	80084be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084a6:	d10a      	bne.n	80084be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b098      	sub	sp, #96	@ 0x60
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084fc:	f7f9 ffd6 	bl	80024ac <HAL_GetTick>
 8008500:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b08      	cmp	r3, #8
 800850e:	d12f      	bne.n	8008570 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008510:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008518:	2200      	movs	r2, #0
 800851a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f88e 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d022      	beq.n	8008570 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800853a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800853e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008548:	647b      	str	r3, [r7, #68]	@ 0x44
 800854a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800854e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e6      	bne.n	800852a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2220      	movs	r2, #32
 8008560:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e063      	b.n	8008638 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0304 	and.w	r3, r3, #4
 800857a:	2b04      	cmp	r3, #4
 800857c:	d149      	bne.n	8008612 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800857e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008586:	2200      	movs	r2, #0
 8008588:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f857 	bl	8008640 <UART_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d03c      	beq.n	8008612 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	623b      	str	r3, [r7, #32]
   return(result);
 80085a6:	6a3b      	ldr	r3, [r7, #32]
 80085a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80085ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80085b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085be:	e841 2300 	strex	r3, r2, [r1]
 80085c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1e6      	bne.n	8008598 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	3308      	adds	r3, #8
 80085d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085ea:	61fa      	str	r2, [r7, #28]
 80085ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	69b9      	ldr	r1, [r7, #24]
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	617b      	str	r3, [r7, #20]
   return(result);
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e5      	bne.n	80085ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2220      	movs	r2, #32
 8008602:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e012      	b.n	8008638 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2220      	movs	r2, #32
 8008616:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2220      	movs	r2, #32
 800861e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3758      	adds	r7, #88	@ 0x58
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	603b      	str	r3, [r7, #0]
 800864c:	4613      	mov	r3, r2
 800864e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008650:	e04f      	b.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008658:	d04b      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800865a:	f7f9 ff27 	bl	80024ac <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	429a      	cmp	r2, r3
 8008668:	d302      	bcc.n	8008670 <UART_WaitOnFlagUntilTimeout+0x30>
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e04e      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d037      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	2b80      	cmp	r3, #128	@ 0x80
 8008686:	d034      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b40      	cmp	r3, #64	@ 0x40
 800868c:	d031      	beq.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	f003 0308 	and.w	r3, r3, #8
 8008698:	2b08      	cmp	r3, #8
 800869a:	d110      	bne.n	80086be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2208      	movs	r2, #8
 80086a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f839 	bl	800871c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2208      	movs	r2, #8
 80086ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e029      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086cc:	d111      	bne.n	80086f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f81f 	bl	800871c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e00f      	b.n	8008712 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	69da      	ldr	r2, [r3, #28]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	4013      	ands	r3, r2
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	429a      	cmp	r2, r3
 8008700:	bf0c      	ite	eq
 8008702:	2301      	moveq	r3, #1
 8008704:	2300      	movne	r3, #0
 8008706:	b2db      	uxtb	r3, r3
 8008708:	461a      	mov	r2, r3
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	429a      	cmp	r2, r3
 800870e:	d0a0      	beq.n	8008652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800871c:	b480      	push	{r7}
 800871e:	b095      	sub	sp, #84	@ 0x54
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008742:	643b      	str	r3, [r7, #64]	@ 0x40
 8008744:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008748:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800874a:	e841 2300 	strex	r3, r2, [r1]
 800874e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1e6      	bne.n	8008724 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3308      	adds	r3, #8
 800875c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875e:	6a3b      	ldr	r3, [r7, #32]
 8008760:	e853 3f00 	ldrex	r3, [r3]
 8008764:	61fb      	str	r3, [r7, #28]
   return(result);
 8008766:	69fa      	ldr	r2, [r7, #28]
 8008768:	4b1e      	ldr	r3, [pc, #120]	@ (80087e4 <UART_EndRxTransfer+0xc8>)
 800876a:	4013      	ands	r3, r2
 800876c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008778:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800877c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800877e:	e841 2300 	strex	r3, r2, [r1]
 8008782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e5      	bne.n	8008756 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800878e:	2b01      	cmp	r3, #1
 8008790:	d118      	bne.n	80087c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	e853 3f00 	ldrex	r3, [r3]
 800879e:	60bb      	str	r3, [r7, #8]
   return(result);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	f023 0310 	bic.w	r3, r3, #16
 80087a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	461a      	mov	r2, r3
 80087ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087b0:	61bb      	str	r3, [r7, #24]
 80087b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6979      	ldr	r1, [r7, #20]
 80087b6:	69ba      	ldr	r2, [r7, #24]
 80087b8:	e841 2300 	strex	r3, r2, [r1]
 80087bc:	613b      	str	r3, [r7, #16]
   return(result);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1e6      	bne.n	8008792 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80087d8:	bf00      	nop
 80087da:	3754      	adds	r7, #84	@ 0x54
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	effffffe 	.word	0xeffffffe

080087e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f7fe ff50 	bl	80076a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008804:	bf00      	nop
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	60bb      	str	r3, [r7, #8]
   return(result);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	61bb      	str	r3, [r7, #24]
 8008834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6979      	ldr	r1, [r7, #20]
 8008838:	69ba      	ldr	r2, [r7, #24]
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	613b      	str	r3, [r7, #16]
   return(result);
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e6      	bne.n	8008814 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7fe ff1b 	bl	8007690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800885a:	bf00      	nop
 800885c:	3720      	adds	r7, #32
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008892:	bf00      	nop
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e027      	b.n	8008904 <HAL_UARTEx_DisableFifoMode+0x66>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2224      	movs	r2, #36	@ 0x24
 80088c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2220      	movs	r2, #32
 80088f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008924:	2302      	movs	r3, #2
 8008926:	e02d      	b.n	8008984 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2224      	movs	r2, #36	@ 0x24
 8008934:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f022 0201 	bic.w	r2, r2, #1
 800894e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	430a      	orrs	r2, r1
 8008962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f84f 	bl	8008a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800899c:	2b01      	cmp	r3, #1
 800899e:	d101      	bne.n	80089a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e02d      	b.n	8008a00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2224      	movs	r2, #36	@ 0x24
 80089b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0201 	bic.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f811 	bl	8008a08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d108      	bne.n	8008a2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a28:	e031      	b.n	8008a8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a2a:	2310      	movs	r3, #16
 8008a2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a2e:	2310      	movs	r3, #16
 8008a30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	0e5b      	lsrs	r3, r3, #25
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	f003 0307 	and.w	r3, r3, #7
 8008a40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	0f5b      	lsrs	r3, r3, #29
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	7b3a      	ldrb	r2, [r7, #12]
 8008a56:	4911      	ldr	r1, [pc, #68]	@ (8008a9c <UARTEx_SetNbDataToProcess+0x94>)
 8008a58:	5c8a      	ldrb	r2, [r1, r2]
 8008a5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a5e:	7b3a      	ldrb	r2, [r7, #12]
 8008a60:	490f      	ldr	r1, [pc, #60]	@ (8008aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8008a62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a64:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	7b7a      	ldrb	r2, [r7, #13]
 8008a74:	4909      	ldr	r1, [pc, #36]	@ (8008a9c <UARTEx_SetNbDataToProcess+0x94>)
 8008a76:	5c8a      	ldrb	r2, [r1, r2]
 8008a78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a7c:	7b7a      	ldrb	r2, [r7, #13]
 8008a7e:	4908      	ldr	r1, [pc, #32]	@ (8008aa0 <UARTEx_SetNbDataToProcess+0x98>)
 8008a80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a82:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a8e:	bf00      	nop
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	08016a2c 	.word	0x08016a2c
 8008aa0:	08016a34 	.word	0x08016a34

08008aa4 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8008aa8:	bf00      	nop
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 8008aba:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008ac8:	e02b      	b.n	8008b22 <aes_gen_tables+0x6e>
    {
        pow[i] = x;
 8008aca:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008ace:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008ad2:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8008ad6:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8008ade:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008ae2:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008ae6:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008aea:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8008aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8008af2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008afc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008b00:	2a00      	cmp	r2, #0
 8008b02:	d001      	beq.n	8008b08 <aes_gen_tables+0x54>
 8008b04:	221b      	movs	r2, #27
 8008b06:	e000      	b.n	8008b0a <aes_gen_tables+0x56>
 8008b08:	2200      	movs	r2, #0
 8008b0a:	405a      	eors	r2, r3
 8008b0c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008b10:	4053      	eors	r3, r2
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8008b18:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008b22:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008b26:	2bff      	cmp	r3, #255	@ 0xff
 8008b28:	ddcf      	ble.n	8008aca <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008b30:	2301      	movs	r3, #1
 8008b32:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008b36:	e01b      	b.n	8008b70 <aes_gen_tables+0xbc>
    {
        RCON[i] = (uint32_t) x;
 8008b38:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008b3c:	49cc      	ldr	r1, [pc, #816]	@ (8008e70 <aes_gen_tables+0x3bc>)
 8008b3e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME( x ) & 0xFF;
 8008b46:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008b50:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008b54:	2a00      	cmp	r2, #0
 8008b56:	d001      	beq.n	8008b5c <aes_gen_tables+0xa8>
 8008b58:	221b      	movs	r2, #27
 8008b5a:	e000      	b.n	8008b5e <aes_gen_tables+0xaa>
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4053      	eors	r3, r2
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8008b66:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008b70:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008b74:	2b09      	cmp	r3, #9
 8008b76:	dddf      	ble.n	8008b38 <aes_gen_tables+0x84>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8008b78:	4bbe      	ldr	r3, [pc, #760]	@ (8008e74 <aes_gen_tables+0x3c0>)
 8008b7a:	2263      	movs	r2, #99	@ 0x63
 8008b7c:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8008b7e:	4bbe      	ldr	r3, [pc, #760]	@ (8008e78 <aes_gen_tables+0x3c4>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

    for( i = 1; i < 256; i++ )
 8008b86:	2301      	movs	r3, #1
 8008b88:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008b8c:	e072      	b.n	8008c74 <aes_gen_tables+0x1c0>
    {
        x = pow[255 - log[i]];
 8008b8e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008b92:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008b96:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8008b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9e:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8008ba2:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008ba6:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bae:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008bb2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008bb6:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8008bba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008bbe:	005a      	lsls	r2, r3, #1
 8008bc0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008bc4:	11db      	asrs	r3, r3, #7
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008bce:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008bd2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008bd6:	4053      	eors	r3, r2
 8008bd8:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008bdc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008be0:	005a      	lsls	r2, r3, #1
 8008be2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008be6:	11db      	asrs	r3, r3, #7
 8008be8:	4313      	orrs	r3, r2
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008bf0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008bf4:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008bf8:	4053      	eors	r3, r2
 8008bfa:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008bfe:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008c02:	005a      	lsls	r2, r3, #1
 8008c04:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008c08:	11db      	asrs	r3, r3, #7
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008c12:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008c16:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008c1a:	4053      	eors	r3, r2
 8008c1c:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008c20:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008c24:	005a      	lsls	r2, r3, #1
 8008c26:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008c2a:	11db      	asrs	r3, r3, #7
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y ^ 0x63;
 8008c34:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008c38:	f083 0363 	eor.w	r3, r3, #99	@ 0x63
 8008c3c:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008c40:	4053      	eors	r3, r2
 8008c42:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        FSb[i] = (unsigned char) x;
 8008c46:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c4a:	b2d9      	uxtb	r1, r3
 8008c4c:	4a89      	ldr	r2, [pc, #548]	@ (8008e74 <aes_gen_tables+0x3c0>)
 8008c4e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c52:	4413      	add	r3, r2
 8008c54:	460a      	mov	r2, r1
 8008c56:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8008c58:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c5c:	b2d9      	uxtb	r1, r3
 8008c5e:	4a86      	ldr	r2, [pc, #536]	@ (8008e78 <aes_gen_tables+0x3c4>)
 8008c60:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c64:	4413      	add	r3, r2
 8008c66:	460a      	mov	r2, r1
 8008c68:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8008c6a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c6e:	3301      	adds	r3, #1
 8008c70:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008c74:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c78:	2bff      	cmp	r3, #255	@ 0xff
 8008c7a:	dd88      	ble.n	8008b8e <aes_gen_tables+0xda>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008c82:	e136      	b.n	8008ef2 <aes_gen_tables+0x43e>
    {
        x = FSb[i];
 8008c84:	4a7b      	ldr	r2, [pc, #492]	@ (8008e74 <aes_gen_tables+0x3c0>)
 8008c86:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c8a:	4413      	add	r3, r2
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
        y = XTIME( x ) & 0xFF;
 8008c92:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008c9c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008ca0:	2a00      	cmp	r2, #0
 8008ca2:	d001      	beq.n	8008ca8 <aes_gen_tables+0x1f4>
 8008ca4:	221b      	movs	r2, #27
 8008ca6:	e000      	b.n	8008caa <aes_gen_tables+0x1f6>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4053      	eors	r3, r2
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        z =  ( y ^ x ) & 0xFF;
 8008cb2:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8008cb6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008cba:	4053      	eors	r3, r2
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8008cc2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008cc6:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 8008cc8:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008ccc:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 8008cce:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008cd2:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8008cd4:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 8008cd6:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 8008cda:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 8008cdc:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 8008cde:	4967      	ldr	r1, [pc, #412]	@ (8008e7c <aes_gen_tables+0x3c8>)
 8008ce0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 8008ce8:	4a64      	ldr	r2, [pc, #400]	@ (8008e7c <aes_gen_tables+0x3c8>)
 8008cea:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cf2:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008cf6:	4962      	ldr	r1, [pc, #392]	@ (8008e80 <aes_gen_tables+0x3cc>)
 8008cf8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8008d00:	4a5f      	ldr	r2, [pc, #380]	@ (8008e80 <aes_gen_tables+0x3cc>)
 8008d02:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d0a:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008d0e:	495d      	ldr	r1, [pc, #372]	@ (8008e84 <aes_gen_tables+0x3d0>)
 8008d10:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 8008d18:	4a5a      	ldr	r2, [pc, #360]	@ (8008e84 <aes_gen_tables+0x3d0>)
 8008d1a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d22:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008d26:	4958      	ldr	r1, [pc, #352]	@ (8008e88 <aes_gen_tables+0x3d4>)
 8008d28:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8008d30:	4a51      	ldr	r2, [pc, #324]	@ (8008e78 <aes_gen_tables+0x3c4>)
 8008d32:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008d36:	4413      	add	r3, r2
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8008d3e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d020      	beq.n	8008d88 <aes_gen_tables+0x2d4>
 8008d46:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d4a:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d50:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d54:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d58:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d60:	441a      	add	r2, r3
 8008d62:	4b4a      	ldr	r3, [pc, #296]	@ (8008e8c <aes_gen_tables+0x3d8>)
 8008d64:	fb83 1302 	smull	r1, r3, r3, r2
 8008d68:	4413      	add	r3, r2
 8008d6a:	11d9      	asrs	r1, r3, #7
 8008d6c:	17d3      	asrs	r3, r2, #31
 8008d6e:	1ac9      	subs	r1, r1, r3
 8008d70:	460b      	mov	r3, r1
 8008d72:	021b      	lsls	r3, r3, #8
 8008d74:	1a5b      	subs	r3, r3, r1
 8008d76:	1ad1      	subs	r1, r2, r3
 8008d78:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d7c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008d80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d84:	4618      	mov	r0, r3
 8008d86:	e000      	b.n	8008d8a <aes_gen_tables+0x2d6>
 8008d88:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8008d8a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d020      	beq.n	8008dd4 <aes_gen_tables+0x320>
 8008d92:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d96:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d9c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008da0:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008da4:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008da8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dac:	441a      	add	r2, r3
 8008dae:	4b37      	ldr	r3, [pc, #220]	@ (8008e8c <aes_gen_tables+0x3d8>)
 8008db0:	fb83 1302 	smull	r1, r3, r3, r2
 8008db4:	4413      	add	r3, r2
 8008db6:	11d9      	asrs	r1, r3, #7
 8008db8:	17d3      	asrs	r3, r2, #31
 8008dba:	1ac9      	subs	r1, r1, r3
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	021b      	lsls	r3, r3, #8
 8008dc0:	1a5b      	subs	r3, r3, r1
 8008dc2:	1ad1      	subs	r1, r2, r3
 8008dc4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008dc8:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008dcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	e000      	b.n	8008dd6 <aes_gen_tables+0x322>
 8008dd4:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8008dd6:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8008dd8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d020      	beq.n	8008e22 <aes_gen_tables+0x36e>
 8008de0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008de4:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dea:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008dee:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008df2:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008df6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dfa:	441a      	add	r2, r3
 8008dfc:	4b23      	ldr	r3, [pc, #140]	@ (8008e8c <aes_gen_tables+0x3d8>)
 8008dfe:	fb83 1302 	smull	r1, r3, r3, r2
 8008e02:	4413      	add	r3, r2
 8008e04:	11d9      	asrs	r1, r3, #7
 8008e06:	17d3      	asrs	r3, r2, #31
 8008e08:	1ac9      	subs	r1, r1, r3
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	1a5b      	subs	r3, r3, r1
 8008e10:	1ad1      	subs	r1, r2, r3
 8008e12:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008e16:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008e1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e1e:	041b      	lsls	r3, r3, #16
 8008e20:	e000      	b.n	8008e24 <aes_gen_tables+0x370>
 8008e22:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8008e24:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8008e26:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d030      	beq.n	8008e90 <aes_gen_tables+0x3dc>
 8008e2e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008e32:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e38:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008e3c:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008e40:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e48:	441a      	add	r2, r3
 8008e4a:	4b10      	ldr	r3, [pc, #64]	@ (8008e8c <aes_gen_tables+0x3d8>)
 8008e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8008e50:	4413      	add	r3, r2
 8008e52:	11d9      	asrs	r1, r3, #7
 8008e54:	17d3      	asrs	r3, r2, #31
 8008e56:	1ac9      	subs	r1, r1, r3
 8008e58:	460b      	mov	r3, r1
 8008e5a:	021b      	lsls	r3, r3, #8
 8008e5c:	1a5b      	subs	r3, r3, r1
 8008e5e:	1ad1      	subs	r1, r2, r3
 8008e60:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008e64:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008e68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	e010      	b.n	8008e92 <aes_gen_tables+0x3de>
 8008e70:	24002548 	.word	0x24002548
 8008e74:	24000348 	.word	0x24000348
 8008e78:	24001448 	.word	0x24001448
 8008e7c:	24000448 	.word	0x24000448
 8008e80:	24000848 	.word	0x24000848
 8008e84:	24000c48 	.word	0x24000c48
 8008e88:	24001048 	.word	0x24001048
 8008e8c:	80808081 	.word	0x80808081
 8008e90:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8008e92:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8008e96:	491d      	ldr	r1, [pc, #116]	@ (8008f0c <aes_gen_tables+0x458>)
 8008e98:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8008ea0:	4a1a      	ldr	r2, [pc, #104]	@ (8008f0c <aes_gen_tables+0x458>)
 8008ea2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eaa:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008eae:	4918      	ldr	r1, [pc, #96]	@ (8008f10 <aes_gen_tables+0x45c>)
 8008eb0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8008eb8:	4a15      	ldr	r2, [pc, #84]	@ (8008f10 <aes_gen_tables+0x45c>)
 8008eba:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ec2:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008ec6:	4913      	ldr	r1, [pc, #76]	@ (8008f14 <aes_gen_tables+0x460>)
 8008ec8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8008ed0:	4a10      	ldr	r2, [pc, #64]	@ (8008f14 <aes_gen_tables+0x460>)
 8008ed2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eda:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008ede:	490e      	ldr	r1, [pc, #56]	@ (8008f18 <aes_gen_tables+0x464>)
 8008ee0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 8008ee8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008eec:	3301      	adds	r3, #1
 8008eee:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008ef2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ef6:	2bff      	cmp	r3, #255	@ 0xff
 8008ef8:	f77f aec4 	ble.w	8008c84 <aes_gen_tables+0x1d0>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8008efc:	bf00      	nop
 8008efe:	bf00      	nop
 8008f00:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	24001548 	.word	0x24001548
 8008f10:	24001948 	.word	0x24001948
 8008f14:	24001d48 	.word	0x24001d48
 8008f18:	24002148 	.word	0x24002148

08008f1c <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8008f24:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008f28:	2100      	movs	r1, #0
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f00c fd78 	bl	8015a20 <memset>
}
 8008f30:	bf00      	nop
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d005      	beq.n	8008f52 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8008f46:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f00a fc40 	bl	80137d0 <mbedtls_platform_zeroize>
 8008f50:	e000      	b.n	8008f54 <mbedtls_aes_free+0x1c>
        return;
 8008f52:	bf00      	nop
}
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f6e:	d012      	beq.n	8008f96 <mbedtls_aes_setkey_enc+0x3a>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f76:	d812      	bhi.n	8008f9e <mbedtls_aes_setkey_enc+0x42>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b80      	cmp	r3, #128	@ 0x80
 8008f7c:	d003      	beq.n	8008f86 <mbedtls_aes_setkey_enc+0x2a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f82:	d004      	beq.n	8008f8e <mbedtls_aes_setkey_enc+0x32>
 8008f84:	e00b      	b.n	8008f9e <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	220a      	movs	r2, #10
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	e00a      	b.n	8008fa4 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	220c      	movs	r2, #12
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	e006      	b.n	8008fa4 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	220e      	movs	r2, #14
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	e002      	b.n	8008fa4 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8008f9e:	f06f 031f 	mvn.w	r3, #31
 8008fa2:	e1b3      	b.n	800930c <mbedtls_aes_setkey_enc+0x3b0>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8008fa4:	4b88      	ldr	r3, [pc, #544]	@ (80091c8 <mbedtls_aes_setkey_enc+0x26c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <mbedtls_aes_setkey_enc+0x5a>
    {
        aes_gen_tables();
 8008fac:	f7ff fd82 	bl	8008ab4 <aes_gen_tables>
        aes_init_done = 1;
 8008fb0:	4b85      	ldr	r3, [pc, #532]	@ (80091c8 <mbedtls_aes_setkey_enc+0x26c>)
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3308      	adds	r3, #8
 8008fba:	613b      	str	r3, [r7, #16]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	e027      	b.n	8009018 <mbedtls_aes_setkey_enc+0xbc>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	4413      	add	r3, r2
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	3301      	adds	r3, #1
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	4413      	add	r3, r2
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	ea41 0203 	orr.w	r2, r1, r3
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	3302      	adds	r3, #2
 8008fec:	68b9      	ldr	r1, [r7, #8]
 8008fee:	440b      	add	r3, r1
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	041b      	lsls	r3, r3, #16
 8008ff4:	ea42 0103 	orr.w	r1, r2, r3
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	3303      	adds	r3, #3
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	4413      	add	r3, r2
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	061a      	lsls	r2, r3, #24
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	6938      	ldr	r0, [r7, #16]
 800900c:	4403      	add	r3, r0
 800900e:	430a      	orrs	r2, r1
 8009010:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	3301      	adds	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	095b      	lsrs	r3, r3, #5
 800901c:	697a      	ldr	r2, [r7, #20]
 800901e:	429a      	cmp	r2, r3
 8009020:	d3d2      	bcc.n	8008fc8 <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2b0e      	cmp	r3, #14
 8009028:	f000 80ca 	beq.w	80091c0 <mbedtls_aes_setkey_enc+0x264>
 800902c:	2b0e      	cmp	r3, #14
 800902e:	f300 816c 	bgt.w	800930a <mbedtls_aes_setkey_enc+0x3ae>
 8009032:	2b0a      	cmp	r3, #10
 8009034:	d002      	beq.n	800903c <mbedtls_aes_setkey_enc+0xe0>
 8009036:	2b0c      	cmp	r3, #12
 8009038:	d057      	beq.n	80090ea <mbedtls_aes_setkey_enc+0x18e>
 800903a:	e166      	b.n	800930a <mbedtls_aes_setkey_enc+0x3ae>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 800903c:	2300      	movs	r3, #0
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	e04f      	b.n	80090e2 <mbedtls_aes_setkey_enc+0x186>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4961      	ldr	r1, [pc, #388]	@ (80091cc <mbedtls_aes_setkey_enc+0x270>)
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800904e:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8009050:	693a      	ldr	r2, [r7, #16]
 8009052:	320c      	adds	r2, #12
 8009054:	6812      	ldr	r2, [r2, #0]
 8009056:	0a12      	lsrs	r2, r2, #8
 8009058:	b2d2      	uxtb	r2, r2
 800905a:	495d      	ldr	r1, [pc, #372]	@ (80091d0 <mbedtls_aes_setkey_enc+0x274>)
 800905c:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 800905e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	330c      	adds	r3, #12
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	0c1b      	lsrs	r3, r3, #16
 8009068:	b2db      	uxtb	r3, r3
 800906a:	4959      	ldr	r1, [pc, #356]	@ (80091d0 <mbedtls_aes_setkey_enc+0x274>)
 800906c:	5ccb      	ldrb	r3, [r1, r3]
 800906e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8009070:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	330c      	adds	r3, #12
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	0e1b      	lsrs	r3, r3, #24
 800907a:	4955      	ldr	r1, [pc, #340]	@ (80091d0 <mbedtls_aes_setkey_enc+0x274>)
 800907c:	5ccb      	ldrb	r3, [r1, r3]
 800907e:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8009080:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	330c      	adds	r3, #12
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	4a50      	ldr	r2, [pc, #320]	@ (80091d0 <mbedtls_aes_setkey_enc+0x274>)
 800908e:	5cd3      	ldrb	r3, [r2, r3]
 8009090:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8009096:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8009098:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	3304      	adds	r3, #4
 800909e:	6819      	ldr	r1, [r3, #0]
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	3310      	adds	r3, #16
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3314      	adds	r3, #20
 80090aa:	404a      	eors	r2, r1
 80090ac:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	3308      	adds	r3, #8
 80090b2:	6819      	ldr	r1, [r3, #0]
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	3314      	adds	r3, #20
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	3318      	adds	r3, #24
 80090be:	404a      	eors	r2, r1
 80090c0:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	330c      	adds	r3, #12
 80090c6:	6819      	ldr	r1, [r3, #0]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	3318      	adds	r3, #24
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	331c      	adds	r3, #28
 80090d2:	404a      	eors	r2, r1
 80090d4:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	3301      	adds	r3, #1
 80090da:	617b      	str	r3, [r7, #20]
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	3310      	adds	r3, #16
 80090e0:	613b      	str	r3, [r7, #16]
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b09      	cmp	r3, #9
 80090e6:	d9ac      	bls.n	8009042 <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 80090e8:	e10f      	b.n	800930a <mbedtls_aes_setkey_enc+0x3ae>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80090ea:	2300      	movs	r3, #0
 80090ec:	617b      	str	r3, [r7, #20]
 80090ee:	e063      	b.n	80091b8 <mbedtls_aes_setkey_enc+0x25c>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	4935      	ldr	r1, [pc, #212]	@ (80091cc <mbedtls_aes_setkey_enc+0x270>)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80090fc:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	3214      	adds	r2, #20
 8009102:	6812      	ldr	r2, [r2, #0]
 8009104:	0a12      	lsrs	r2, r2, #8
 8009106:	b2d2      	uxtb	r2, r2
 8009108:	4931      	ldr	r1, [pc, #196]	@ (80091d0 <mbedtls_aes_setkey_enc+0x274>)
 800910a:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 800910c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3314      	adds	r3, #20
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	0c1b      	lsrs	r3, r3, #16
 8009116:	b2db      	uxtb	r3, r3
 8009118:	492d      	ldr	r1, [pc, #180]	@ (80091d0 <mbedtls_aes_setkey_enc+0x274>)
 800911a:	5ccb      	ldrb	r3, [r1, r3]
 800911c:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 800911e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	3314      	adds	r3, #20
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	0e1b      	lsrs	r3, r3, #24
 8009128:	4929      	ldr	r1, [pc, #164]	@ (80091d0 <mbedtls_aes_setkey_enc+0x274>)
 800912a:	5ccb      	ldrb	r3, [r1, r3]
 800912c:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 800912e:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	3314      	adds	r3, #20
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	b2db      	uxtb	r3, r3
 800913a:	4a25      	ldr	r2, [pc, #148]	@ (80091d0 <mbedtls_aes_setkey_enc+0x274>)
 800913c:	5cd3      	ldrb	r3, [r2, r3]
 800913e:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009144:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8009146:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	3304      	adds	r3, #4
 800914c:	6819      	ldr	r1, [r3, #0]
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	3318      	adds	r3, #24
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	331c      	adds	r3, #28
 8009158:	404a      	eors	r2, r1
 800915a:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	3308      	adds	r3, #8
 8009160:	6819      	ldr	r1, [r3, #0]
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	331c      	adds	r3, #28
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	3320      	adds	r3, #32
 800916c:	404a      	eors	r2, r1
 800916e:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	330c      	adds	r3, #12
 8009174:	6819      	ldr	r1, [r3, #0]
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	3320      	adds	r3, #32
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	3324      	adds	r3, #36	@ 0x24
 8009180:	404a      	eors	r2, r1
 8009182:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	3310      	adds	r3, #16
 8009188:	6819      	ldr	r1, [r3, #0]
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	3324      	adds	r3, #36	@ 0x24
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	3328      	adds	r3, #40	@ 0x28
 8009194:	404a      	eors	r2, r1
 8009196:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	3314      	adds	r3, #20
 800919c:	6819      	ldr	r1, [r3, #0]
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	3328      	adds	r3, #40	@ 0x28
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	332c      	adds	r3, #44	@ 0x2c
 80091a8:	404a      	eors	r2, r1
 80091aa:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	3301      	adds	r3, #1
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	3318      	adds	r3, #24
 80091b6:	613b      	str	r3, [r7, #16]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	2b07      	cmp	r3, #7
 80091bc:	d998      	bls.n	80090f0 <mbedtls_aes_setkey_enc+0x194>
            }
            break;
 80091be:	e0a4      	b.n	800930a <mbedtls_aes_setkey_enc+0x3ae>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80091c0:	2300      	movs	r3, #0
 80091c2:	617b      	str	r3, [r7, #20]
 80091c4:	e09c      	b.n	8009300 <mbedtls_aes_setkey_enc+0x3a4>
 80091c6:	bf00      	nop
 80091c8:	24002570 	.word	0x24002570
 80091cc:	24002548 	.word	0x24002548
 80091d0:	24000348 	.word	0x24000348
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	494e      	ldr	r1, [pc, #312]	@ (8009314 <mbedtls_aes_setkey_enc+0x3b8>)
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80091e0:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	321c      	adds	r2, #28
 80091e6:	6812      	ldr	r2, [r2, #0]
 80091e8:	0a12      	lsrs	r2, r2, #8
 80091ea:	b2d2      	uxtb	r2, r2
 80091ec:	494a      	ldr	r1, [pc, #296]	@ (8009318 <mbedtls_aes_setkey_enc+0x3bc>)
 80091ee:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 80091f0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	331c      	adds	r3, #28
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	0c1b      	lsrs	r3, r3, #16
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	4946      	ldr	r1, [pc, #280]	@ (8009318 <mbedtls_aes_setkey_enc+0x3bc>)
 80091fe:	5ccb      	ldrb	r3, [r1, r3]
 8009200:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8009202:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	331c      	adds	r3, #28
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	0e1b      	lsrs	r3, r3, #24
 800920c:	4942      	ldr	r1, [pc, #264]	@ (8009318 <mbedtls_aes_setkey_enc+0x3bc>)
 800920e:	5ccb      	ldrb	r3, [r1, r3]
 8009210:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8009212:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	331c      	adds	r3, #28
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	b2db      	uxtb	r3, r3
 800921e:	4a3e      	ldr	r2, [pc, #248]	@ (8009318 <mbedtls_aes_setkey_enc+0x3bc>)
 8009220:	5cd3      	ldrb	r3, [r2, r3]
 8009222:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8009228:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800922a:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3304      	adds	r3, #4
 8009230:	6819      	ldr	r1, [r3, #0]
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	3320      	adds	r3, #32
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	3324      	adds	r3, #36	@ 0x24
 800923c:	404a      	eors	r2, r1
 800923e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	3308      	adds	r3, #8
 8009244:	6819      	ldr	r1, [r3, #0]
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	3324      	adds	r3, #36	@ 0x24
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	3328      	adds	r3, #40	@ 0x28
 8009250:	404a      	eors	r2, r1
 8009252:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	330c      	adds	r3, #12
 8009258:	6819      	ldr	r1, [r3, #0]
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	3328      	adds	r3, #40	@ 0x28
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	332c      	adds	r3, #44	@ 0x2c
 8009264:	404a      	eors	r2, r1
 8009266:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	3310      	adds	r3, #16
 800926c:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	322c      	adds	r2, #44	@ 0x2c
 8009272:	6812      	ldr	r2, [r2, #0]
 8009274:	b2d2      	uxtb	r2, r2
 8009276:	4928      	ldr	r1, [pc, #160]	@ (8009318 <mbedtls_aes_setkey_enc+0x3bc>)
 8009278:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 800927a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	332c      	adds	r3, #44	@ 0x2c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	0a1b      	lsrs	r3, r3, #8
 8009284:	b2db      	uxtb	r3, r3
 8009286:	4924      	ldr	r1, [pc, #144]	@ (8009318 <mbedtls_aes_setkey_enc+0x3bc>)
 8009288:	5ccb      	ldrb	r3, [r1, r3]
 800928a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800928c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	332c      	adds	r3, #44	@ 0x2c
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	0c1b      	lsrs	r3, r3, #16
 8009296:	b2db      	uxtb	r3, r3
 8009298:	491f      	ldr	r1, [pc, #124]	@ (8009318 <mbedtls_aes_setkey_enc+0x3bc>)
 800929a:	5ccb      	ldrb	r3, [r1, r3]
 800929c:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800929e:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	332c      	adds	r3, #44	@ 0x2c
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	0e1b      	lsrs	r3, r3, #24
 80092aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009318 <mbedtls_aes_setkey_enc+0x3bc>)
 80092ac:	5cd3      	ldrb	r3, [r2, r3]
 80092ae:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80092b4:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 80092b6:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	3314      	adds	r3, #20
 80092bc:	6819      	ldr	r1, [r3, #0]
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	3330      	adds	r3, #48	@ 0x30
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	3334      	adds	r3, #52	@ 0x34
 80092c8:	404a      	eors	r2, r1
 80092ca:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	3318      	adds	r3, #24
 80092d0:	6819      	ldr	r1, [r3, #0]
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	3334      	adds	r3, #52	@ 0x34
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	3338      	adds	r3, #56	@ 0x38
 80092dc:	404a      	eors	r2, r1
 80092de:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	331c      	adds	r3, #28
 80092e4:	6819      	ldr	r1, [r3, #0]
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	3338      	adds	r3, #56	@ 0x38
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	333c      	adds	r3, #60	@ 0x3c
 80092f0:	404a      	eors	r2, r1
 80092f2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	3301      	adds	r3, #1
 80092f8:	617b      	str	r3, [r7, #20]
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	3320      	adds	r3, #32
 80092fe:	613b      	str	r3, [r7, #16]
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	2b06      	cmp	r3, #6
 8009304:	f67f af66 	bls.w	80091d4 <mbedtls_aes_setkey_enc+0x278>
            }
            break;
 8009308:	bf00      	nop
    }

    return( 0 );
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3718      	adds	r7, #24
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	24002548 	.word	0x24002548
 8009318:	24000348 	.word	0x24000348

0800931c <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b0d0      	sub	sp, #320	@ 0x140
 8009320:	af00      	add	r7, sp, #0
 8009322:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009326:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800932a:	6018      	str	r0, [r3, #0]
 800932c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009330:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009334:	6019      	str	r1, [r3, #0]
 8009336:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800933a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800933e:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8009340:	f107 0314 	add.w	r3, r7, #20
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff fde9 	bl	8008f1c <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800934a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800934e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3308      	adds	r3, #8
 8009356:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800935a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800935e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8009368:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800936a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800936e:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8009372:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009376:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800937a:	f107 0014 	add.w	r0, r7, #20
 800937e:	6812      	ldr	r2, [r2, #0]
 8009380:	6819      	ldr	r1, [r3, #0]
 8009382:	f7ff fdeb 	bl	8008f5c <mbedtls_aes_setkey_enc>
 8009386:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800938a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 80dd 	bne.w	800954e <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 8009394:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009398:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80093a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80093aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80093ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093b2:	685a      	ldr	r2, [r3, #4]
 80093b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80093b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	011b      	lsls	r3, r3, #4
 80093c0:	4413      	add	r3, r2
 80093c2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 80093c6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80093ca:	1d13      	adds	r3, r2, #4
 80093cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80093d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80093d4:	1d19      	adds	r1, r3, #4
 80093d6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80093da:	6812      	ldr	r2, [r2, #0]
 80093dc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80093de:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80093e2:	1d13      	adds	r3, r2, #4
 80093e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80093e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80093ec:	1d19      	adds	r1, r3, #4
 80093ee:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80093f2:	6812      	ldr	r2, [r2, #0]
 80093f4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80093f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80093fa:	1d13      	adds	r3, r2, #4
 80093fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009400:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009404:	1d19      	adds	r1, r3, #4
 8009406:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800940e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009412:	1d13      	adds	r3, r2, #4
 8009414:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009418:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800941c:	1d19      	adds	r1, r3, #4
 800941e:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009422:	6812      	ldr	r2, [r2, #0]
 8009424:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009426:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800942a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3b01      	subs	r3, #1
 8009434:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8009438:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800943c:	3b20      	subs	r3, #32
 800943e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009442:	e04f      	b.n	80094e4 <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 8009444:	2300      	movs	r3, #0
 8009446:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800944a:	e03d      	b.n	80094c8 <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800944c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	b2db      	uxtb	r3, r3
 8009454:	4a44      	ldr	r2, [pc, #272]	@ (8009568 <mbedtls_aes_setkey_dec+0x24c>)
 8009456:	5cd3      	ldrb	r3, [r2, r3]
 8009458:	461a      	mov	r2, r3
 800945a:	4b44      	ldr	r3, [pc, #272]	@ (800956c <mbedtls_aes_setkey_dec+0x250>)
 800945c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8009460:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	0a1b      	lsrs	r3, r3, #8
 8009468:	b2db      	uxtb	r3, r3
 800946a:	493f      	ldr	r1, [pc, #252]	@ (8009568 <mbedtls_aes_setkey_dec+0x24c>)
 800946c:	5ccb      	ldrb	r3, [r1, r3]
 800946e:	4619      	mov	r1, r3
 8009470:	4b3f      	ldr	r3, [pc, #252]	@ (8009570 <mbedtls_aes_setkey_dec+0x254>)
 8009472:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009476:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009478:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	0c1b      	lsrs	r3, r3, #16
 8009480:	b2db      	uxtb	r3, r3
 8009482:	4939      	ldr	r1, [pc, #228]	@ (8009568 <mbedtls_aes_setkey_dec+0x24c>)
 8009484:	5ccb      	ldrb	r3, [r1, r3]
 8009486:	4619      	mov	r1, r3
 8009488:	4b3a      	ldr	r3, [pc, #232]	@ (8009574 <mbedtls_aes_setkey_dec+0x258>)
 800948a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800948e:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8009492:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	0e1b      	lsrs	r3, r3, #24
 800949a:	4a33      	ldr	r2, [pc, #204]	@ (8009568 <mbedtls_aes_setkey_dec+0x24c>)
 800949c:	5cd3      	ldrb	r3, [r2, r3]
 800949e:	461a      	mov	r2, r3
 80094a0:	4b35      	ldr	r3, [pc, #212]	@ (8009578 <mbedtls_aes_setkey_dec+0x25c>)
 80094a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80094a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094aa:	1d18      	adds	r0, r3, #4
 80094ac:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80094b0:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80094b2:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 80094b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80094b8:	3301      	adds	r3, #1
 80094ba:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80094be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80094c2:	3304      	adds	r3, #4
 80094c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80094c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80094cc:	2b03      	cmp	r3, #3
 80094ce:	ddbd      	ble.n	800944c <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80094d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80094d4:	3b01      	subs	r3, #1
 80094d6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80094da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80094de:	3b20      	subs	r3, #32
 80094e0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80094e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	dcab      	bgt.n	8009444 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 80094ec:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80094f0:	1d13      	adds	r3, r2, #4
 80094f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80094f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094fa:	1d19      	adds	r1, r3, #4
 80094fc:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009500:	6812      	ldr	r2, [r2, #0]
 8009502:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009504:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009508:	1d13      	adds	r3, r2, #4
 800950a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800950e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009512:	1d19      	adds	r1, r3, #4
 8009514:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009518:	6812      	ldr	r2, [r2, #0]
 800951a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800951c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009520:	1d13      	adds	r3, r2, #4
 8009522:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009526:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800952a:	1d19      	adds	r1, r3, #4
 800952c:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009530:	6812      	ldr	r2, [r2, #0]
 8009532:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009534:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009538:	1d13      	adds	r3, r2, #4
 800953a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800953e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009542:	1d19      	adds	r1, r3, #4
 8009544:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009548:	6812      	ldr	r2, [r2, #0]
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	e000      	b.n	8009550 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 800954e:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8009550:	f107 0314 	add.w	r3, r7, #20
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff fcef 	bl	8008f38 <mbedtls_aes_free>

    return( ret );
 800955a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 800955e:	4618      	mov	r0, r3
 8009560:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	24000348 	.word	0x24000348
 800956c:	24001548 	.word	0x24001548
 8009570:	24001948 	.word	0x24001948
 8009574:	24001d48 	.word	0x24001d48
 8009578:	24002148 	.word	0x24002148

0800957c <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 800957c:	b480      	push	{r7}
 800957e:	b08f      	sub	sp, #60	@ 0x3c
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	3301      	adds	r3, #1
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	431a      	orrs	r2, r3
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	3302      	adds	r3, #2
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	041b      	lsls	r3, r3, #16
 80095a6:	431a      	orrs	r2, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	3303      	adds	r3, #3
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	061b      	lsls	r3, r3, #24
 80095b0:	4313      	orrs	r3, r2
 80095b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b6:	1d1a      	adds	r2, r3, #4
 80095b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095be:	4053      	eors	r3, r2
 80095c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	3304      	adds	r3, #4
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	461a      	mov	r2, r3
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	3305      	adds	r3, #5
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	431a      	orrs	r2, r3
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	3306      	adds	r3, #6
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	041b      	lsls	r3, r3, #16
 80095dc:	431a      	orrs	r2, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	3307      	adds	r3, #7
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	061b      	lsls	r3, r3, #24
 80095e6:	4313      	orrs	r3, r2
 80095e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ec:	1d1a      	adds	r2, r3, #4
 80095ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095f4:	4053      	eors	r3, r2
 80095f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	3308      	adds	r3, #8
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	461a      	mov	r2, r3
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	3309      	adds	r3, #9
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	021b      	lsls	r3, r3, #8
 8009608:	431a      	orrs	r2, r3
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	330a      	adds	r3, #10
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	041b      	lsls	r3, r3, #16
 8009612:	431a      	orrs	r2, r3
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	330b      	adds	r3, #11
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	061b      	lsls	r3, r3, #24
 800961c:	4313      	orrs	r3, r2
 800961e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009622:	1d1a      	adds	r2, r3, #4
 8009624:	633a      	str	r2, [r7, #48]	@ 0x30
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800962a:	4053      	eors	r3, r2
 800962c:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	330c      	adds	r3, #12
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	461a      	mov	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	330d      	adds	r3, #13
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	021b      	lsls	r3, r3, #8
 800963e:	431a      	orrs	r2, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	330e      	adds	r3, #14
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	041b      	lsls	r3, r3, #16
 8009648:	431a      	orrs	r2, r3
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	330f      	adds	r3, #15
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	061b      	lsls	r3, r3, #24
 8009652:	4313      	orrs	r3, r2
 8009654:	623b      	str	r3, [r7, #32]
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	1d1a      	adds	r2, r3, #4
 800965a:	633a      	str	r2, [r7, #48]	@ 0x30
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6a3a      	ldr	r2, [r7, #32]
 8009660:	4053      	eors	r3, r2
 8009662:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	105b      	asrs	r3, r3, #1
 800966a:	3b01      	subs	r3, #1
 800966c:	637b      	str	r3, [r7, #52]	@ 0x34
 800966e:	e0fa      	b.n	8009866 <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009672:	1d1a      	adds	r2, r3, #4
 8009674:	633a      	str	r2, [r7, #48]	@ 0x30
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800967a:	b2db      	uxtb	r3, r3
 800967c:	49ab      	ldr	r1, [pc, #684]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 800967e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009682:	405a      	eors	r2, r3
 8009684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009686:	0a1b      	lsrs	r3, r3, #8
 8009688:	b2db      	uxtb	r3, r3
 800968a:	49a9      	ldr	r1, [pc, #676]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 800968c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009690:	405a      	eors	r2, r3
 8009692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009694:	0c1b      	lsrs	r3, r3, #16
 8009696:	b2db      	uxtb	r3, r3
 8009698:	49a6      	ldr	r1, [pc, #664]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 800969a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800969e:	405a      	eors	r2, r3
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	0e1b      	lsrs	r3, r3, #24
 80096a4:	49a4      	ldr	r1, [pc, #656]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 80096a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096aa:	4053      	eors	r3, r2
 80096ac:	61fb      	str	r3, [r7, #28]
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	1d1a      	adds	r2, r3, #4
 80096b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	499c      	ldr	r1, [pc, #624]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 80096bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096c0:	405a      	eors	r2, r3
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	0a1b      	lsrs	r3, r3, #8
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	4999      	ldr	r1, [pc, #612]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 80096ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096ce:	405a      	eors	r2, r3
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	0c1b      	lsrs	r3, r3, #16
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	4997      	ldr	r1, [pc, #604]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 80096d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096dc:	405a      	eors	r2, r3
 80096de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e0:	0e1b      	lsrs	r3, r3, #24
 80096e2:	4995      	ldr	r1, [pc, #596]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 80096e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096e8:	4053      	eors	r3, r2
 80096ea:	61bb      	str	r3, [r7, #24]
 80096ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ee:	1d1a      	adds	r2, r3, #4
 80096f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	498c      	ldr	r1, [pc, #560]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 80096fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096fe:	405a      	eors	r2, r3
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	0a1b      	lsrs	r3, r3, #8
 8009704:	b2db      	uxtb	r3, r3
 8009706:	498a      	ldr	r1, [pc, #552]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 8009708:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800970c:	405a      	eors	r2, r3
 800970e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009710:	0c1b      	lsrs	r3, r3, #16
 8009712:	b2db      	uxtb	r3, r3
 8009714:	4987      	ldr	r1, [pc, #540]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009716:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800971a:	405a      	eors	r2, r3
 800971c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971e:	0e1b      	lsrs	r3, r3, #24
 8009720:	4985      	ldr	r1, [pc, #532]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 8009722:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009726:	4053      	eors	r3, r2
 8009728:	617b      	str	r3, [r7, #20]
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	1d1a      	adds	r2, r3, #4
 800972e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	6a3b      	ldr	r3, [r7, #32]
 8009734:	b2db      	uxtb	r3, r3
 8009736:	497d      	ldr	r1, [pc, #500]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 8009738:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800973c:	405a      	eors	r2, r3
 800973e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009740:	0a1b      	lsrs	r3, r3, #8
 8009742:	b2db      	uxtb	r3, r3
 8009744:	497a      	ldr	r1, [pc, #488]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 8009746:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800974a:	405a      	eors	r2, r3
 800974c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974e:	0c1b      	lsrs	r3, r3, #16
 8009750:	b2db      	uxtb	r3, r3
 8009752:	4978      	ldr	r1, [pc, #480]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009754:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009758:	405a      	eors	r2, r3
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	0e1b      	lsrs	r3, r3, #24
 800975e:	4976      	ldr	r1, [pc, #472]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 8009760:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009764:	4053      	eors	r3, r2
 8009766:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976a:	1d1a      	adds	r2, r3, #4
 800976c:	633a      	str	r2, [r7, #48]	@ 0x30
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	b2db      	uxtb	r3, r3
 8009774:	496d      	ldr	r1, [pc, #436]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 8009776:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800977a:	405a      	eors	r2, r3
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	0a1b      	lsrs	r3, r3, #8
 8009780:	b2db      	uxtb	r3, r3
 8009782:	496b      	ldr	r1, [pc, #428]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 8009784:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009788:	405a      	eors	r2, r3
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	0c1b      	lsrs	r3, r3, #16
 800978e:	b2db      	uxtb	r3, r3
 8009790:	4968      	ldr	r1, [pc, #416]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009792:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009796:	405a      	eors	r2, r3
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	0e1b      	lsrs	r3, r3, #24
 800979c:	4966      	ldr	r1, [pc, #408]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 800979e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097a2:	4053      	eors	r3, r2
 80097a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	1d1a      	adds	r2, r3, #4
 80097aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	495e      	ldr	r1, [pc, #376]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 80097b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097b8:	405a      	eors	r2, r3
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	0a1b      	lsrs	r3, r3, #8
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	495b      	ldr	r1, [pc, #364]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 80097c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097c6:	405a      	eors	r2, r3
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	0c1b      	lsrs	r3, r3, #16
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	4959      	ldr	r1, [pc, #356]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 80097d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097d4:	405a      	eors	r2, r3
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	0e1b      	lsrs	r3, r3, #24
 80097da:	4957      	ldr	r1, [pc, #348]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 80097dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097e0:	4053      	eors	r3, r2
 80097e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e6:	1d1a      	adds	r2, r3, #4
 80097e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	494e      	ldr	r1, [pc, #312]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 80097f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097f6:	405a      	eors	r2, r3
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	0a1b      	lsrs	r3, r3, #8
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	494c      	ldr	r1, [pc, #304]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 8009800:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009804:	405a      	eors	r2, r3
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	0c1b      	lsrs	r3, r3, #16
 800980a:	b2db      	uxtb	r3, r3
 800980c:	4949      	ldr	r1, [pc, #292]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 800980e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009812:	405a      	eors	r2, r3
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	0e1b      	lsrs	r3, r3, #24
 8009818:	4947      	ldr	r1, [pc, #284]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 800981a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800981e:	4053      	eors	r3, r2
 8009820:	627b      	str	r3, [r7, #36]	@ 0x24
 8009822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009824:	1d1a      	adds	r2, r3, #4
 8009826:	633a      	str	r2, [r7, #48]	@ 0x30
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	493f      	ldr	r1, [pc, #252]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 8009830:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009834:	405a      	eors	r2, r3
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	0a1b      	lsrs	r3, r3, #8
 800983a:	b2db      	uxtb	r3, r3
 800983c:	493c      	ldr	r1, [pc, #240]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 800983e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009842:	405a      	eors	r2, r3
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	0c1b      	lsrs	r3, r3, #16
 8009848:	b2db      	uxtb	r3, r3
 800984a:	493a      	ldr	r1, [pc, #232]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 800984c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009850:	405a      	eors	r2, r3
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	0e1b      	lsrs	r3, r3, #24
 8009856:	4938      	ldr	r1, [pc, #224]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 8009858:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800985c:	4053      	eors	r3, r2
 800985e:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009862:	3b01      	subs	r3, #1
 8009864:	637b      	str	r3, [r7, #52]	@ 0x34
 8009866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009868:	2b00      	cmp	r3, #0
 800986a:	f73f af01 	bgt.w	8009670 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	1d1a      	adds	r2, r3, #4
 8009872:	633a      	str	r2, [r7, #48]	@ 0x30
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009878:	b2db      	uxtb	r3, r3
 800987a:	492c      	ldr	r1, [pc, #176]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 800987c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009880:	405a      	eors	r2, r3
 8009882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009884:	0a1b      	lsrs	r3, r3, #8
 8009886:	b2db      	uxtb	r3, r3
 8009888:	4929      	ldr	r1, [pc, #164]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 800988a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800988e:	405a      	eors	r2, r3
 8009890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009892:	0c1b      	lsrs	r3, r3, #16
 8009894:	b2db      	uxtb	r3, r3
 8009896:	4927      	ldr	r1, [pc, #156]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800989c:	405a      	eors	r2, r3
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	0e1b      	lsrs	r3, r3, #24
 80098a2:	4925      	ldr	r1, [pc, #148]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 80098a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098a8:	4053      	eors	r3, r2
 80098aa:	61fb      	str	r3, [r7, #28]
 80098ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ae:	1d1a      	adds	r2, r3, #4
 80098b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	491c      	ldr	r1, [pc, #112]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 80098ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098be:	405a      	eors	r2, r3
 80098c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c2:	0a1b      	lsrs	r3, r3, #8
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	491a      	ldr	r1, [pc, #104]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 80098c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098cc:	405a      	eors	r2, r3
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	0c1b      	lsrs	r3, r3, #16
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	4917      	ldr	r1, [pc, #92]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 80098d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098da:	405a      	eors	r2, r3
 80098dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098de:	0e1b      	lsrs	r3, r3, #24
 80098e0:	4915      	ldr	r1, [pc, #84]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 80098e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098e6:	4053      	eors	r3, r2
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	1d1a      	adds	r2, r3, #4
 80098ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	490d      	ldr	r1, [pc, #52]	@ (800992c <mbedtls_internal_aes_encrypt+0x3b0>)
 80098f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098fc:	405a      	eors	r2, r3
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	0a1b      	lsrs	r3, r3, #8
 8009902:	b2db      	uxtb	r3, r3
 8009904:	490a      	ldr	r1, [pc, #40]	@ (8009930 <mbedtls_internal_aes_encrypt+0x3b4>)
 8009906:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800990a:	405a      	eors	r2, r3
 800990c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990e:	0c1b      	lsrs	r3, r3, #16
 8009910:	b2db      	uxtb	r3, r3
 8009912:	4908      	ldr	r1, [pc, #32]	@ (8009934 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009914:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009918:	405a      	eors	r2, r3
 800991a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991c:	0e1b      	lsrs	r3, r3, #24
 800991e:	4906      	ldr	r1, [pc, #24]	@ (8009938 <mbedtls_internal_aes_encrypt+0x3bc>)
 8009920:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009924:	4053      	eors	r3, r2
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992a:	e007      	b.n	800993c <mbedtls_internal_aes_encrypt+0x3c0>
 800992c:	24000448 	.word	0x24000448
 8009930:	24000848 	.word	0x24000848
 8009934:	24000c48 	.word	0x24000c48
 8009938:	24001048 	.word	0x24001048
 800993c:	1d1a      	adds	r2, r3, #4
 800993e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	6a3b      	ldr	r3, [r7, #32]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	4979      	ldr	r1, [pc, #484]	@ (8009b2c <mbedtls_internal_aes_encrypt+0x5b0>)
 8009948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800994c:	405a      	eors	r2, r3
 800994e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009950:	0a1b      	lsrs	r3, r3, #8
 8009952:	b2db      	uxtb	r3, r3
 8009954:	4976      	ldr	r1, [pc, #472]	@ (8009b30 <mbedtls_internal_aes_encrypt+0x5b4>)
 8009956:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800995a:	405a      	eors	r2, r3
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	0c1b      	lsrs	r3, r3, #16
 8009960:	b2db      	uxtb	r3, r3
 8009962:	4974      	ldr	r1, [pc, #464]	@ (8009b34 <mbedtls_internal_aes_encrypt+0x5b8>)
 8009964:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009968:	405a      	eors	r2, r3
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	0e1b      	lsrs	r3, r3, #24
 800996e:	4972      	ldr	r1, [pc, #456]	@ (8009b38 <mbedtls_internal_aes_encrypt+0x5bc>)
 8009970:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009974:	4053      	eors	r3, r2
 8009976:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8009978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997a:	1d1a      	adds	r2, r3, #4
 800997c:	633a      	str	r2, [r7, #48]	@ 0x30
 800997e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	b2d2      	uxtb	r2, r2
 8009984:	496d      	ldr	r1, [pc, #436]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 8009986:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8009988:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	0a1b      	lsrs	r3, r3, #8
 800998e:	b2db      	uxtb	r3, r3
 8009990:	496a      	ldr	r1, [pc, #424]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 8009992:	5ccb      	ldrb	r3, [r1, r3]
 8009994:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8009996:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	0c1b      	lsrs	r3, r3, #16
 800999c:	b2db      	uxtb	r3, r3
 800999e:	4967      	ldr	r1, [pc, #412]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 80099a0:	5ccb      	ldrb	r3, [r1, r3]
 80099a2:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80099a4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	0e1b      	lsrs	r3, r3, #24
 80099aa:	4964      	ldr	r1, [pc, #400]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 80099ac:	5ccb      	ldrb	r3, [r1, r3]
 80099ae:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 80099b0:	4053      	eors	r3, r2
 80099b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	1d1a      	adds	r2, r3, #4
 80099b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80099ba:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	b2d2      	uxtb	r2, r2
 80099c0:	495e      	ldr	r1, [pc, #376]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 80099c2:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 80099c4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	0a1b      	lsrs	r3, r3, #8
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	495b      	ldr	r1, [pc, #364]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 80099ce:	5ccb      	ldrb	r3, [r1, r3]
 80099d0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80099d2:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	0c1b      	lsrs	r3, r3, #16
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	4958      	ldr	r1, [pc, #352]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 80099dc:	5ccb      	ldrb	r3, [r1, r3]
 80099de:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80099e0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	0e1b      	lsrs	r3, r3, #24
 80099e6:	4955      	ldr	r1, [pc, #340]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 80099e8:	5ccb      	ldrb	r3, [r1, r3]
 80099ea:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 80099ec:	4053      	eors	r3, r2
 80099ee:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 80099f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f2:	1d1a      	adds	r2, r3, #4
 80099f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80099f6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 80099f8:	697a      	ldr	r2, [r7, #20]
 80099fa:	b2d2      	uxtb	r2, r2
 80099fc:	494f      	ldr	r1, [pc, #316]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 80099fe:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8009a00:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	0a1b      	lsrs	r3, r3, #8
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	494c      	ldr	r1, [pc, #304]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a0a:	5ccb      	ldrb	r3, [r1, r3]
 8009a0c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8009a0e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	0c1b      	lsrs	r3, r3, #16
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	4949      	ldr	r1, [pc, #292]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a18:	5ccb      	ldrb	r3, [r1, r3]
 8009a1a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009a1c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	0e1b      	lsrs	r3, r3, #24
 8009a22:	4946      	ldr	r1, [pc, #280]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a24:	5ccb      	ldrb	r3, [r1, r3]
 8009a26:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8009a28:	4053      	eors	r3, r2
 8009a2a:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8009a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2e:	1d1a      	adds	r2, r3, #4
 8009a30:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a32:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	4940      	ldr	r1, [pc, #256]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a3a:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8009a3c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	0a1b      	lsrs	r3, r3, #8
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	493d      	ldr	r1, [pc, #244]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a46:	5ccb      	ldrb	r3, [r1, r3]
 8009a48:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8009a4a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	0c1b      	lsrs	r3, r3, #16
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	493a      	ldr	r1, [pc, #232]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a54:	5ccb      	ldrb	r3, [r1, r3]
 8009a56:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009a58:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	0e1b      	lsrs	r3, r3, #24
 8009a5e:	4937      	ldr	r1, [pc, #220]	@ (8009b3c <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a60:	5ccb      	ldrb	r3, [r1, r3]
 8009a62:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8009a64:	4053      	eors	r3, r2
 8009a66:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8009a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	701a      	strb	r2, [r3, #0]
 8009a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a72:	0a1a      	lsrs	r2, r3, #8
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3301      	adds	r3, #1
 8009a78:	b2d2      	uxtb	r2, r2
 8009a7a:	701a      	strb	r2, [r3, #0]
 8009a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a7e:	0c1a      	lsrs	r2, r3, #16
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3302      	adds	r3, #2
 8009a84:	b2d2      	uxtb	r2, r2
 8009a86:	701a      	strb	r2, [r3, #0]
 8009a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a8a:	0e1a      	lsrs	r2, r3, #24
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3303      	adds	r3, #3
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3304      	adds	r3, #4
 8009a98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a9a:	b2d2      	uxtb	r2, r2
 8009a9c:	701a      	strb	r2, [r3, #0]
 8009a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa0:	0a1a      	lsrs	r2, r3, #8
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	3305      	adds	r3, #5
 8009aa6:	b2d2      	uxtb	r2, r2
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aac:	0c1a      	lsrs	r2, r3, #16
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3306      	adds	r3, #6
 8009ab2:	b2d2      	uxtb	r2, r2
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	0e1a      	lsrs	r2, r3, #24
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3307      	adds	r3, #7
 8009abe:	b2d2      	uxtb	r2, r2
 8009ac0:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3308      	adds	r3, #8
 8009ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	701a      	strb	r2, [r3, #0]
 8009acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ace:	0a1a      	lsrs	r2, r3, #8
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3309      	adds	r3, #9
 8009ad4:	b2d2      	uxtb	r2, r2
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ada:	0c1a      	lsrs	r2, r3, #16
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	330a      	adds	r3, #10
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae6:	0e1a      	lsrs	r2, r3, #24
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	330b      	adds	r3, #11
 8009aec:	b2d2      	uxtb	r2, r2
 8009aee:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	330c      	adds	r3, #12
 8009af4:	6a3a      	ldr	r2, [r7, #32]
 8009af6:	b2d2      	uxtb	r2, r2
 8009af8:	701a      	strb	r2, [r3, #0]
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	0a1a      	lsrs	r2, r3, #8
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	330d      	adds	r3, #13
 8009b02:	b2d2      	uxtb	r2, r2
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	0c1a      	lsrs	r2, r3, #16
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	330e      	adds	r3, #14
 8009b0e:	b2d2      	uxtb	r2, r2
 8009b10:	701a      	strb	r2, [r3, #0]
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	0e1a      	lsrs	r2, r3, #24
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	330f      	adds	r3, #15
 8009b1a:	b2d2      	uxtb	r2, r2
 8009b1c:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	373c      	adds	r7, #60	@ 0x3c
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	24000448 	.word	0x24000448
 8009b30:	24000848 	.word	0x24000848
 8009b34:	24000c48 	.word	0x24000c48
 8009b38:	24001048 	.word	0x24001048
 8009b3c:	24000348 	.word	0x24000348

08009b40 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8009b40:	b480      	push	{r7}
 8009b42:	b08f      	sub	sp, #60	@ 0x3c
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	021b      	lsls	r3, r3, #8
 8009b60:	431a      	orrs	r2, r3
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	3302      	adds	r3, #2
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	041b      	lsls	r3, r3, #16
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	3303      	adds	r3, #3
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	061b      	lsls	r3, r3, #24
 8009b74:	4313      	orrs	r3, r2
 8009b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	1d1a      	adds	r2, r3, #4
 8009b7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b82:	4053      	eors	r3, r2
 8009b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	3305      	adds	r3, #5
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	021b      	lsls	r3, r3, #8
 8009b96:	431a      	orrs	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	3306      	adds	r3, #6
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	041b      	lsls	r3, r3, #16
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	3307      	adds	r3, #7
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	061b      	lsls	r3, r3, #24
 8009baa:	4313      	orrs	r3, r2
 8009bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb0:	1d1a      	adds	r2, r3, #4
 8009bb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009bb8:	4053      	eors	r3, r2
 8009bba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	3309      	adds	r3, #9
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	021b      	lsls	r3, r3, #8
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	330a      	adds	r3, #10
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	330b      	adds	r3, #11
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	061b      	lsls	r3, r3, #24
 8009be0:	4313      	orrs	r3, r2
 8009be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be6:	1d1a      	adds	r2, r3, #4
 8009be8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bee:	4053      	eors	r3, r2
 8009bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	330c      	adds	r3, #12
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	330d      	adds	r3, #13
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	021b      	lsls	r3, r3, #8
 8009c02:	431a      	orrs	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	330e      	adds	r3, #14
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	041b      	lsls	r3, r3, #16
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	330f      	adds	r3, #15
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	061b      	lsls	r3, r3, #24
 8009c16:	4313      	orrs	r3, r2
 8009c18:	623b      	str	r3, [r7, #32]
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1c:	1d1a      	adds	r2, r3, #4
 8009c1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6a3a      	ldr	r2, [r7, #32]
 8009c24:	4053      	eors	r3, r2
 8009c26:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	105b      	asrs	r3, r3, #1
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c32:	e0fa      	b.n	8009e2a <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	1d1a      	adds	r2, r3, #4
 8009c38:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	49ab      	ldr	r1, [pc, #684]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009c42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c46:	405a      	eors	r2, r3
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	0a1b      	lsrs	r3, r3, #8
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	49a9      	ldr	r1, [pc, #676]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009c50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c54:	405a      	eors	r2, r3
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	0c1b      	lsrs	r3, r3, #16
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	49a6      	ldr	r1, [pc, #664]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009c5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c62:	405a      	eors	r2, r3
 8009c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c66:	0e1b      	lsrs	r3, r3, #24
 8009c68:	49a4      	ldr	r1, [pc, #656]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009c6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c6e:	4053      	eors	r3, r2
 8009c70:	61fb      	str	r3, [r7, #28]
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	1d1a      	adds	r2, r3, #4
 8009c76:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	499c      	ldr	r1, [pc, #624]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009c80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c84:	405a      	eors	r2, r3
 8009c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c88:	0a1b      	lsrs	r3, r3, #8
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	4999      	ldr	r1, [pc, #612]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009c8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c92:	405a      	eors	r2, r3
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	0c1b      	lsrs	r3, r3, #16
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	4997      	ldr	r1, [pc, #604]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009c9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ca0:	405a      	eors	r2, r3
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca4:	0e1b      	lsrs	r3, r3, #24
 8009ca6:	4995      	ldr	r1, [pc, #596]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009ca8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cac:	4053      	eors	r3, r2
 8009cae:	61bb      	str	r3, [r7, #24]
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb2:	1d1a      	adds	r2, r3, #4
 8009cb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	498c      	ldr	r1, [pc, #560]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009cbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cc2:	405a      	eors	r2, r3
 8009cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc6:	0a1b      	lsrs	r3, r3, #8
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	498a      	ldr	r1, [pc, #552]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009ccc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cd0:	405a      	eors	r2, r3
 8009cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd4:	0c1b      	lsrs	r3, r3, #16
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	4987      	ldr	r1, [pc, #540]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009cda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cde:	405a      	eors	r2, r3
 8009ce0:	6a3b      	ldr	r3, [r7, #32]
 8009ce2:	0e1b      	lsrs	r3, r3, #24
 8009ce4:	4985      	ldr	r1, [pc, #532]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cea:	4053      	eors	r3, r2
 8009cec:	617b      	str	r3, [r7, #20]
 8009cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf0:	1d1a      	adds	r2, r3, #4
 8009cf2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	497d      	ldr	r1, [pc, #500]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009cfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d00:	405a      	eors	r2, r3
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	0a1b      	lsrs	r3, r3, #8
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	497a      	ldr	r1, [pc, #488]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009d0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d0e:	405a      	eors	r2, r3
 8009d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d12:	0c1b      	lsrs	r3, r3, #16
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	4978      	ldr	r1, [pc, #480]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009d18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d1c:	405a      	eors	r2, r3
 8009d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d20:	0e1b      	lsrs	r3, r3, #24
 8009d22:	4976      	ldr	r1, [pc, #472]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009d24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d28:	4053      	eors	r3, r2
 8009d2a:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d2e:	1d1a      	adds	r2, r3, #4
 8009d30:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	496d      	ldr	r1, [pc, #436]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d3e:	405a      	eors	r2, r3
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	0a1b      	lsrs	r3, r3, #8
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	496b      	ldr	r1, [pc, #428]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009d48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d4c:	405a      	eors	r2, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	0c1b      	lsrs	r3, r3, #16
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	4968      	ldr	r1, [pc, #416]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009d56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d5a:	405a      	eors	r2, r3
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	0e1b      	lsrs	r3, r3, #24
 8009d60:	4966      	ldr	r1, [pc, #408]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009d62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d66:	4053      	eors	r3, r2
 8009d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6c:	1d1a      	adds	r2, r3, #4
 8009d6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	495e      	ldr	r1, [pc, #376]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009d78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d7c:	405a      	eors	r2, r3
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	0a1b      	lsrs	r3, r3, #8
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	495b      	ldr	r1, [pc, #364]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009d86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d8a:	405a      	eors	r2, r3
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	0c1b      	lsrs	r3, r3, #16
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	4959      	ldr	r1, [pc, #356]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009d94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d98:	405a      	eors	r2, r3
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	0e1b      	lsrs	r3, r3, #24
 8009d9e:	4957      	ldr	r1, [pc, #348]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009da4:	4053      	eors	r3, r2
 8009da6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009daa:	1d1a      	adds	r2, r3, #4
 8009dac:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	494e      	ldr	r1, [pc, #312]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009db6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009dba:	405a      	eors	r2, r3
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	0a1b      	lsrs	r3, r3, #8
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	494c      	ldr	r1, [pc, #304]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009dc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009dc8:	405a      	eors	r2, r3
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	0c1b      	lsrs	r3, r3, #16
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	4949      	ldr	r1, [pc, #292]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009dd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009dd6:	405a      	eors	r2, r3
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	0e1b      	lsrs	r3, r3, #24
 8009ddc:	4947      	ldr	r1, [pc, #284]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009dde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009de2:	4053      	eors	r3, r2
 8009de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de8:	1d1a      	adds	r2, r3, #4
 8009dea:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	493f      	ldr	r1, [pc, #252]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009df4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009df8:	405a      	eors	r2, r3
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	0a1b      	lsrs	r3, r3, #8
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	493c      	ldr	r1, [pc, #240]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009e02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e06:	405a      	eors	r2, r3
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	0c1b      	lsrs	r3, r3, #16
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	493a      	ldr	r1, [pc, #232]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009e10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e14:	405a      	eors	r2, r3
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	0e1b      	lsrs	r3, r3, #24
 8009e1a:	4938      	ldr	r1, [pc, #224]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009e1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e20:	4053      	eors	r3, r2
 8009e22:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e26:	3b01      	subs	r3, #1
 8009e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f73f af01 	bgt.w	8009c34 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	1d1a      	adds	r2, r3, #4
 8009e36:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	492c      	ldr	r1, [pc, #176]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009e40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e44:	405a      	eors	r2, r3
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	0a1b      	lsrs	r3, r3, #8
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	4929      	ldr	r1, [pc, #164]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009e4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e52:	405a      	eors	r2, r3
 8009e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e56:	0c1b      	lsrs	r3, r3, #16
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	4927      	ldr	r1, [pc, #156]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009e5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e60:	405a      	eors	r2, r3
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	0e1b      	lsrs	r3, r3, #24
 8009e66:	4925      	ldr	r1, [pc, #148]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009e68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e6c:	4053      	eors	r3, r2
 8009e6e:	61fb      	str	r3, [r7, #28]
 8009e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e72:	1d1a      	adds	r2, r3, #4
 8009e74:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	491c      	ldr	r1, [pc, #112]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009e7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e82:	405a      	eors	r2, r3
 8009e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	491a      	ldr	r1, [pc, #104]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009e8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e90:	405a      	eors	r2, r3
 8009e92:	6a3b      	ldr	r3, [r7, #32]
 8009e94:	0c1b      	lsrs	r3, r3, #16
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	4917      	ldr	r1, [pc, #92]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009e9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e9e:	405a      	eors	r2, r3
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	0e1b      	lsrs	r3, r3, #24
 8009ea4:	4915      	ldr	r1, [pc, #84]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009ea6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009eaa:	4053      	eors	r3, r2
 8009eac:	61bb      	str	r3, [r7, #24]
 8009eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb0:	1d1a      	adds	r2, r3, #4
 8009eb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	490d      	ldr	r1, [pc, #52]	@ (8009ef0 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009ebc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ec0:	405a      	eors	r2, r3
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	0a1b      	lsrs	r3, r3, #8
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	490a      	ldr	r1, [pc, #40]	@ (8009ef4 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009eca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ece:	405a      	eors	r2, r3
 8009ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed2:	0c1b      	lsrs	r3, r3, #16
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	4908      	ldr	r1, [pc, #32]	@ (8009ef8 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009ed8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009edc:	405a      	eors	r2, r3
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	0e1b      	lsrs	r3, r3, #24
 8009ee2:	4906      	ldr	r1, [pc, #24]	@ (8009efc <mbedtls_internal_aes_decrypt+0x3bc>)
 8009ee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ee8:	4053      	eors	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	e007      	b.n	8009f00 <mbedtls_internal_aes_decrypt+0x3c0>
 8009ef0:	24001548 	.word	0x24001548
 8009ef4:	24001948 	.word	0x24001948
 8009ef8:	24001d48 	.word	0x24001d48
 8009efc:	24002148 	.word	0x24002148
 8009f00:	1d1a      	adds	r2, r3, #4
 8009f02:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	4979      	ldr	r1, [pc, #484]	@ (800a0f0 <mbedtls_internal_aes_decrypt+0x5b0>)
 8009f0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009f10:	405a      	eors	r2, r3
 8009f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f14:	0a1b      	lsrs	r3, r3, #8
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	4976      	ldr	r1, [pc, #472]	@ (800a0f4 <mbedtls_internal_aes_decrypt+0x5b4>)
 8009f1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009f1e:	405a      	eors	r2, r3
 8009f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f22:	0c1b      	lsrs	r3, r3, #16
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	4974      	ldr	r1, [pc, #464]	@ (800a0f8 <mbedtls_internal_aes_decrypt+0x5b8>)
 8009f28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009f2c:	405a      	eors	r2, r3
 8009f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f30:	0e1b      	lsrs	r3, r3, #24
 8009f32:	4972      	ldr	r1, [pc, #456]	@ (800a0fc <mbedtls_internal_aes_decrypt+0x5bc>)
 8009f34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009f38:	4053      	eors	r3, r2
 8009f3a:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3e:	1d1a      	adds	r2, r3, #4
 8009f40:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f42:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	b2d2      	uxtb	r2, r2
 8009f48:	496d      	ldr	r1, [pc, #436]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f4a:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8009f4c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	0a1b      	lsrs	r3, r3, #8
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	496a      	ldr	r1, [pc, #424]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f56:	5ccb      	ldrb	r3, [r1, r3]
 8009f58:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8009f5a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	4967      	ldr	r1, [pc, #412]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f64:	5ccb      	ldrb	r3, [r1, r3]
 8009f66:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f68:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	0e1b      	lsrs	r3, r3, #24
 8009f6e:	4964      	ldr	r1, [pc, #400]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f70:	5ccb      	ldrb	r3, [r1, r3]
 8009f72:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8009f74:	4053      	eors	r3, r2
 8009f76:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8009f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7a:	1d1a      	adds	r2, r3, #4
 8009f7c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f7e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8009f80:	69ba      	ldr	r2, [r7, #24]
 8009f82:	b2d2      	uxtb	r2, r2
 8009f84:	495e      	ldr	r1, [pc, #376]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f86:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8009f88:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	0a1b      	lsrs	r3, r3, #8
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	495b      	ldr	r1, [pc, #364]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f92:	5ccb      	ldrb	r3, [r1, r3]
 8009f94:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8009f96:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	0c1b      	lsrs	r3, r3, #16
 8009f9c:	b2db      	uxtb	r3, r3
 8009f9e:	4958      	ldr	r1, [pc, #352]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fa0:	5ccb      	ldrb	r3, [r1, r3]
 8009fa2:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009fa4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	0e1b      	lsrs	r3, r3, #24
 8009faa:	4955      	ldr	r1, [pc, #340]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fac:	5ccb      	ldrb	r3, [r1, r3]
 8009fae:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8009fb0:	4053      	eors	r3, r2
 8009fb2:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb6:	1d1a      	adds	r2, r3, #4
 8009fb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fba:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8009fbc:	697a      	ldr	r2, [r7, #20]
 8009fbe:	b2d2      	uxtb	r2, r2
 8009fc0:	494f      	ldr	r1, [pc, #316]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fc2:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8009fc4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	0a1b      	lsrs	r3, r3, #8
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	494c      	ldr	r1, [pc, #304]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fce:	5ccb      	ldrb	r3, [r1, r3]
 8009fd0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8009fd2:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	0c1b      	lsrs	r3, r3, #16
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	4949      	ldr	r1, [pc, #292]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fdc:	5ccb      	ldrb	r3, [r1, r3]
 8009fde:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009fe0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	0e1b      	lsrs	r3, r3, #24
 8009fe6:	4946      	ldr	r1, [pc, #280]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fe8:	5ccb      	ldrb	r3, [r1, r3]
 8009fea:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8009fec:	4053      	eors	r3, r2
 8009fee:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8009ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff2:	1d1a      	adds	r2, r3, #4
 8009ff4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ff6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	b2d2      	uxtb	r2, r2
 8009ffc:	4940      	ldr	r1, [pc, #256]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009ffe:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 800a000:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	0a1b      	lsrs	r3, r3, #8
 800a006:	b2db      	uxtb	r3, r3
 800a008:	493d      	ldr	r1, [pc, #244]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 800a00a:	5ccb      	ldrb	r3, [r1, r3]
 800a00c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800a00e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	0c1b      	lsrs	r3, r3, #16
 800a014:	b2db      	uxtb	r3, r3
 800a016:	493a      	ldr	r1, [pc, #232]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 800a018:	5ccb      	ldrb	r3, [r1, r3]
 800a01a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800a01c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	0e1b      	lsrs	r3, r3, #24
 800a022:	4937      	ldr	r1, [pc, #220]	@ (800a100 <mbedtls_internal_aes_decrypt+0x5c0>)
 800a024:	5ccb      	ldrb	r3, [r1, r3]
 800a026:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 800a028:	4053      	eors	r3, r2
 800a02a:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 800a02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	701a      	strb	r2, [r3, #0]
 800a034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a036:	0a1a      	lsrs	r2, r3, #8
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3301      	adds	r3, #1
 800a03c:	b2d2      	uxtb	r2, r2
 800a03e:	701a      	strb	r2, [r3, #0]
 800a040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a042:	0c1a      	lsrs	r2, r3, #16
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3302      	adds	r3, #2
 800a048:	b2d2      	uxtb	r2, r2
 800a04a:	701a      	strb	r2, [r3, #0]
 800a04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04e:	0e1a      	lsrs	r2, r3, #24
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3303      	adds	r3, #3
 800a054:	b2d2      	uxtb	r2, r2
 800a056:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3304      	adds	r3, #4
 800a05c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	701a      	strb	r2, [r3, #0]
 800a062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a064:	0a1a      	lsrs	r2, r3, #8
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3305      	adds	r3, #5
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	701a      	strb	r2, [r3, #0]
 800a06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a070:	0c1a      	lsrs	r2, r3, #16
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3306      	adds	r3, #6
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	701a      	strb	r2, [r3, #0]
 800a07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a07c:	0e1a      	lsrs	r2, r3, #24
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3307      	adds	r3, #7
 800a082:	b2d2      	uxtb	r2, r2
 800a084:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	3308      	adds	r3, #8
 800a08a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a08c:	b2d2      	uxtb	r2, r2
 800a08e:	701a      	strb	r2, [r3, #0]
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	0a1a      	lsrs	r2, r3, #8
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3309      	adds	r3, #9
 800a098:	b2d2      	uxtb	r2, r2
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09e:	0c1a      	lsrs	r2, r3, #16
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	330a      	adds	r3, #10
 800a0a4:	b2d2      	uxtb	r2, r2
 800a0a6:	701a      	strb	r2, [r3, #0]
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0aa:	0e1a      	lsrs	r2, r3, #24
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	330b      	adds	r3, #11
 800a0b0:	b2d2      	uxtb	r2, r2
 800a0b2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	330c      	adds	r3, #12
 800a0b8:	6a3a      	ldr	r2, [r7, #32]
 800a0ba:	b2d2      	uxtb	r2, r2
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	6a3b      	ldr	r3, [r7, #32]
 800a0c0:	0a1a      	lsrs	r2, r3, #8
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	330d      	adds	r3, #13
 800a0c6:	b2d2      	uxtb	r2, r2
 800a0c8:	701a      	strb	r2, [r3, #0]
 800a0ca:	6a3b      	ldr	r3, [r7, #32]
 800a0cc:	0c1a      	lsrs	r2, r3, #16
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	330e      	adds	r3, #14
 800a0d2:	b2d2      	uxtb	r2, r2
 800a0d4:	701a      	strb	r2, [r3, #0]
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	0e1a      	lsrs	r2, r3, #24
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	330f      	adds	r3, #15
 800a0de:	b2d2      	uxtb	r2, r2
 800a0e0:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	373c      	adds	r7, #60	@ 0x3c
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr
 800a0f0:	24001548 	.word	0x24001548
 800a0f4:	24001948 	.word	0x24001948
 800a0f8:	24001d48 	.word	0x24001d48
 800a0fc:	24002148 	.word	0x24002148
 800a100:	24001448 	.word	0x24001448

0800a104 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d106      	bne.n	800a126 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	6879      	ldr	r1, [r7, #4]
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f7ff fa2d 	bl	800957c <mbedtls_internal_aes_encrypt>
 800a122:	4603      	mov	r3, r0
 800a124:	e005      	b.n	800a132 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800a126:	683a      	ldr	r2, [r7, #0]
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f7ff fd08 	bl	8009b40 <mbedtls_internal_aes_decrypt>
 800a130:	4603      	mov	r3, r0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 800a13a:	b5b0      	push	{r4, r5, r7, lr}
 800a13c:	b08a      	sub	sp, #40	@ 0x28
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	607a      	str	r2, [r7, #4]
 800a146:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f003 030f 	and.w	r3, r3, #15
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d002      	beq.n	800a158 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800a152:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800a156:	e06d      	b.n	800a234 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d166      	bne.n	800a22c <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 800a15e:	e036      	b.n	800a1ce <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 800a160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a162:	f107 0414 	add.w	r4, r7, #20
 800a166:	6818      	ldr	r0, [r3, #0]
 800a168:	6859      	ldr	r1, [r3, #4]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 800a170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a172:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7ff ffc4 	bl	800a104 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 800a17c:	2300      	movs	r3, #0
 800a17e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a180:	e010      	b.n	800a1a4 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800a182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a184:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a186:	4413      	add	r3, r2
 800a188:	7819      	ldrb	r1, [r3, #0]
 800a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	4413      	add	r3, r2
 800a190:	781a      	ldrb	r2, [r3, #0]
 800a192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a194:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a196:	4403      	add	r3, r0
 800a198:	404a      	eors	r2, r1
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800a19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a6:	2b0f      	cmp	r3, #15
 800a1a8:	ddeb      	ble.n	800a182 <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	461d      	mov	r5, r3
 800a1ae:	f107 0414 	add.w	r4, r7, #20
 800a1b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1b4:	6028      	str	r0, [r5, #0]
 800a1b6:	6069      	str	r1, [r5, #4]
 800a1b8:	60aa      	str	r2, [r5, #8]
 800a1ba:	60eb      	str	r3, [r5, #12]

            input  += 16;
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1be:	3310      	adds	r3, #16
 800a1c0:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 800a1c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c4:	3310      	adds	r3, #16
 800a1c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	3b10      	subs	r3, #16
 800a1cc:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1c5      	bne.n	800a160 <mbedtls_aes_crypt_cbc+0x26>
 800a1d4:	e02d      	b.n	800a232 <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1da:	e010      	b.n	800a1fe <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1e0:	4413      	add	r3, r2
 800a1e2:	7819      	ldrb	r1, [r3, #0]
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a1f0:	4403      	add	r3, r0
 800a1f2:	404a      	eors	r2, r1
 800a1f4:	b2d2      	uxtb	r2, r2
 800a1f6:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a200:	2b0f      	cmp	r3, #15
 800a202:	ddeb      	ble.n	800a1dc <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800a204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a206:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a208:	68b9      	ldr	r1, [r7, #8]
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff ff7a 	bl	800a104 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 800a210:	2210      	movs	r2, #16
 800a212:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a214:	6838      	ldr	r0, [r7, #0]
 800a216:	f00b fc47 	bl	8015aa8 <memcpy>

            input  += 16;
 800a21a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a21c:	3310      	adds	r3, #16
 800a21e:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 800a220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a222:	3310      	adds	r3, #16
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3b10      	subs	r3, #16
 800a22a:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1d1      	bne.n	800a1d6 <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3728      	adds	r7, #40	@ 0x28
 800a238:	46bd      	mov	sp, r7
 800a23a:	bdb0      	pop	{r4, r5, r7, pc}

0800a23c <mbedtls_mpi_zeroize>:
#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
    mbedtls_platform_zeroize( v, ciL * n );
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f009 fabf 	bl	80137d0 <mbedtls_platform_zeroize>
}
 800a252:	bf00      	nop
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	601a      	str	r2, [r3, #0]
    X->n = 0;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	609a      	str	r2, [r3, #8]
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d01a      	beq.n	800a2c4 <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00c      	beq.n	800a2b0 <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	689a      	ldr	r2, [r3, #8]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	f7ff ffcb 	bl	800a23c <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f00b fab6 	bl	801581c <free>
    }

    X->s = 1;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	601a      	str	r2, [r3, #0]
    X->n = 0;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	609a      	str	r2, [r3, #8]
 800a2c2:	e000      	b.n	800a2c6 <mbedtls_mpi_free+0x46>
        return;
 800a2c4:	bf00      	nop
}
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d902      	bls.n	800a2e6 <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a2e0:	f06f 030f 	mvn.w	r3, #15
 800a2e4:	e031      	b.n	800a34a <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d92b      	bls.n	800a348 <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800a2f0:	2104      	movs	r1, #4
 800a2f2:	6838      	ldr	r0, [r7, #0]
 800a2f4:	f00b fa76 	bl	80157e4 <calloc>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d102      	bne.n	800a308 <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a302:	f06f 030f 	mvn.w	r3, #15
 800a306:	e020      	b.n	800a34a <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d015      	beq.n	800a33c <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6899      	ldr	r1, [r3, #8]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	461a      	mov	r2, r3
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f00b fbc3 	bl	8015aa8 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	689a      	ldr	r2, [r3, #8]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	4619      	mov	r1, r3
 800a32c:	4610      	mov	r0, r2
 800a32e:	f7ff ff85 	bl	800a23c <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	4618      	mov	r0, r3
 800a338:	f00b fa70 	bl	801581c <free>
        }

        X->n = nblimbs;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	605a      	str	r2, [r3, #4]
        X->p = p;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <mbedtls_mpi_shrink>:
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a362:	4293      	cmp	r3, r2
 800a364:	d902      	bls.n	800a36c <mbedtls_mpi_shrink+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a366:	f06f 030f 	mvn.w	r3, #15
 800a36a:	e054      	b.n	800a416 <mbedtls_mpi_shrink+0xc4>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	429a      	cmp	r2, r3
 800a374:	d305      	bcc.n	800a382 <mbedtls_mpi_shrink+0x30>
        return( mbedtls_mpi_grow( X, nblimbs ) );
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7ff ffa7 	bl	800a2cc <mbedtls_mpi_grow>
 800a37e:	4603      	mov	r3, r0
 800a380:	e049      	b.n	800a416 <mbedtls_mpi_shrink+0xc4>

    for( i = X->n - 1; i > 0; i-- )
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	3b01      	subs	r3, #1
 800a388:	60fb      	str	r3, [r7, #12]
 800a38a:	e00a      	b.n	800a3a2 <mbedtls_mpi_shrink+0x50>
        if( X->p[i] != 0 )
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	4413      	add	r3, r2
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d106      	bne.n	800a3aa <mbedtls_mpi_shrink+0x58>
    for( i = X->n - 1; i > 0; i-- )
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	60fb      	str	r3, [r7, #12]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d1f1      	bne.n	800a38c <mbedtls_mpi_shrink+0x3a>
 800a3a8:	e000      	b.n	800a3ac <mbedtls_mpi_shrink+0x5a>
            break;
 800a3aa:	bf00      	nop
    i++;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]

    if( i < nblimbs )
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d201      	bcs.n	800a3be <mbedtls_mpi_shrink+0x6c>
        i = nblimbs;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	60fb      	str	r3, [r7, #12]

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 800a3be:	2104      	movs	r1, #4
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f00b fa0f 	bl	80157e4 <calloc>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	60bb      	str	r3, [r7, #8]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d102      	bne.n	800a3d6 <mbedtls_mpi_shrink+0x84>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a3d0:	f06f 030f 	mvn.w	r3, #15
 800a3d4:	e01f      	b.n	800a416 <mbedtls_mpi_shrink+0xc4>

    if( X->p != NULL )
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d014      	beq.n	800a408 <mbedtls_mpi_shrink+0xb6>
    {
        memcpy( p, X->p, i * ciL );
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6899      	ldr	r1, [r3, #8]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	68b8      	ldr	r0, [r7, #8]
 800a3ea:	f00b fb5d 	bl	8015aa8 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	f7ff ff1f 	bl	800a23c <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	4618      	mov	r0, r3
 800a404:	f00b fa0a 	bl	801581c <free>
    }

    X->n = i;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	605a      	str	r2, [r3, #4]
    X->p = p;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	609a      	str	r2, [r3, #8]

    return( 0 );
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	60fb      	str	r3, [r7, #12]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d101      	bne.n	800a438 <mbedtls_mpi_copy+0x1a>
        return( 0 );
 800a434:	2300      	movs	r3, #0
 800a436:	e04a      	b.n	800a4ce <mbedtls_mpi_copy+0xb0>

    if( Y->p == NULL )
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d104      	bne.n	800a44a <mbedtls_mpi_copy+0x2c>
    {
        mbedtls_mpi_free( X );
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f7ff ff1d 	bl	800a280 <mbedtls_mpi_free>
        return( 0 );
 800a446:	2300      	movs	r3, #0
 800a448:	e041      	b.n	800a4ce <mbedtls_mpi_copy+0xb0>
    }

    for( i = Y->n - 1; i > 0; i-- )
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	3b01      	subs	r3, #1
 800a450:	60bb      	str	r3, [r7, #8]
 800a452:	e00a      	b.n	800a46a <mbedtls_mpi_copy+0x4c>
        if( Y->p[i] != 0 )
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	689a      	ldr	r2, [r3, #8]
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	4413      	add	r3, r2
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d106      	bne.n	800a472 <mbedtls_mpi_copy+0x54>
    for( i = Y->n - 1; i > 0; i-- )
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	3b01      	subs	r3, #1
 800a468:	60bb      	str	r3, [r7, #8]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1f1      	bne.n	800a454 <mbedtls_mpi_copy+0x36>
 800a470:	e000      	b.n	800a474 <mbedtls_mpi_copy+0x56>
            break;
 800a472:	bf00      	nop
    i++;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	3301      	adds	r3, #1
 800a478:	60bb      	str	r3, [r7, #8]

    X->s = Y->s;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	601a      	str	r2, [r3, #0]

    if( X->n < i )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d908      	bls.n	800a49e <mbedtls_mpi_copy+0x80>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800a48c:	68b9      	ldr	r1, [r7, #8]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f7ff ff1c 	bl	800a2cc <mbedtls_mpi_grow>
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00e      	beq.n	800a4ba <mbedtls_mpi_copy+0x9c>
 800a49c:	e016      	b.n	800a4cc <mbedtls_mpi_copy+0xae>
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	689a      	ldr	r2, [r3, #8]
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	18d0      	adds	r0, r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	f00b fab3 	bl	8015a20 <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6898      	ldr	r0, [r3, #8]
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	6899      	ldr	r1, [r3, #8]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f00b faee 	bl	8015aa8 <memcpy>

cleanup:

    return( ret );
 800a4cc:	68fb      	ldr	r3, [r7, #12]
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b086      	sub	sp, #24
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	613b      	str	r3, [r7, #16]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	425b      	negs	r3, r3
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	09db      	lsrs	r3, r3, #7
 800a4f6:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff fee4 	bl	800a2cc <mbedtls_mpi_grow>
 800a504:	6138      	str	r0, [r7, #16]
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d150      	bne.n	800a5ae <mbedtls_mpi_safe_cond_assign+0xd8>

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	79fa      	ldrb	r2, [r7, #7]
 800a512:	f1c2 0201 	rsb	r2, r2, #1
 800a516:	fb03 f202 	mul.w	r2, r3, r2
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	79f9      	ldrb	r1, [r7, #7]
 800a520:	fb01 f303 	mul.w	r3, r1, r3
 800a524:	441a      	add	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	601a      	str	r2, [r3, #0]

    for( i = 0; i < Y->n; i++ )
 800a52a:	2300      	movs	r3, #0
 800a52c:	617b      	str	r3, [r7, #20]
 800a52e:	e01d      	b.n	800a56c <mbedtls_mpi_safe_cond_assign+0x96>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	689a      	ldr	r2, [r3, #8]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	79fa      	ldrb	r2, [r7, #7]
 800a53e:	f1c2 0201 	rsb	r2, r2, #1
 800a542:	fb02 f103 	mul.w	r1, r2, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	689a      	ldr	r2, [r3, #8]
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	79fa      	ldrb	r2, [r7, #7]
 800a554:	fb03 f202 	mul.w	r2, r3, r2
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6898      	ldr	r0, [r3, #8]
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4403      	add	r3, r0
 800a562:	440a      	add	r2, r1
 800a564:	601a      	str	r2, [r3, #0]
    for( i = 0; i < Y->n; i++ )
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	3301      	adds	r3, #1
 800a56a:	617b      	str	r3, [r7, #20]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	429a      	cmp	r2, r3
 800a574:	d3dc      	bcc.n	800a530 <mbedtls_mpi_safe_cond_assign+0x5a>

    for( ; i < X->n; i++ )
 800a576:	e014      	b.n	800a5a2 <mbedtls_mpi_safe_cond_assign+0xcc>
        X->p[i] *= ( 1 - assign );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	79fb      	ldrb	r3, [r7, #7]
 800a586:	f1c3 0301 	rsb	r3, r3, #1
 800a58a:	4618      	mov	r0, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6899      	ldr	r1, [r3, #8]
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	440b      	add	r3, r1
 800a596:	fb00 f202 	mul.w	r2, r0, r2
 800a59a:	601a      	str	r2, [r3, #0]
    for( ; i < X->n; i++ )
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	617b      	str	r3, [r7, #20]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d3e5      	bcc.n	800a578 <mbedtls_mpi_safe_cond_assign+0xa2>

cleanup:
 800a5ac:	bf00      	nop
    return( ret );
 800a5ae:	693b      	ldr	r3, [r7, #16]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3718      	adds	r7, #24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <mbedtls_mpi_safe_cond_swap>:
 * about whether the swap was made or not.
 * Here it is not ok to simply swap the pointers, which whould lead to
 * different memory access patterns when X and Y are used afterwards.
 */
int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b088      	sub	sp, #32
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	71fb      	strb	r3, [r7, #7]
    size_t i;
    mbedtls_mpi_uint tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d101      	bne.n	800a5d2 <mbedtls_mpi_safe_cond_swap+0x1a>
        return( 0 );
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e080      	b.n	800a6d4 <mbedtls_mpi_safe_cond_swap+0x11c>

    /* make sure swap is 0 or 1 in a time-constant manner */
    swap = (swap | (unsigned char)-swap) >> 7;
 800a5d2:	79fb      	ldrb	r3, [r7, #7]
 800a5d4:	425b      	negs	r3, r3
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	79fb      	ldrb	r3, [r7, #7]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	09db      	lsrs	r3, r3, #7
 800a5e0:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7ff fe6f 	bl	800a2cc <mbedtls_mpi_grow>
 800a5ee:	61f8      	str	r0, [r7, #28]
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d16d      	bne.n	800a6d2 <mbedtls_mpi_safe_cond_swap+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	68b8      	ldr	r0, [r7, #8]
 800a5fe:	f7ff fe65 	bl	800a2cc <mbedtls_mpi_grow>
 800a602:	61f8      	str	r0, [r7, #28]
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d163      	bne.n	800a6d2 <mbedtls_mpi_safe_cond_swap+0x11a>

    s = X->s;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	617b      	str	r3, [r7, #20]
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	79fa      	ldrb	r2, [r7, #7]
 800a616:	f1c2 0201 	rsb	r2, r2, #1
 800a61a:	fb03 f202 	mul.w	r2, r3, r2
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	79f9      	ldrb	r1, [r7, #7]
 800a624:	fb01 f303 	mul.w	r3, r1, r3
 800a628:	441a      	add	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	601a      	str	r2, [r3, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	79fa      	ldrb	r2, [r7, #7]
 800a634:	f1c2 0201 	rsb	r2, r2, #1
 800a638:	fb03 f202 	mul.w	r2, r3, r2
 800a63c:	79fb      	ldrb	r3, [r7, #7]
 800a63e:	6979      	ldr	r1, [r7, #20]
 800a640:	fb01 f303 	mul.w	r3, r1, r3
 800a644:	441a      	add	r2, r3
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	601a      	str	r2, [r3, #0]


    for( i = 0; i < X->n; i++ )
 800a64a:	2300      	movs	r3, #0
 800a64c:	61bb      	str	r3, [r7, #24]
 800a64e:	e03a      	b.n	800a6c6 <mbedtls_mpi_safe_cond_swap+0x10e>
    {
        tmp = X->p[i];
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	689a      	ldr	r2, [r3, #8]
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	613b      	str	r3, [r7, #16]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	689a      	ldr	r2, [r3, #8]
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	4413      	add	r3, r2
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	79fa      	ldrb	r2, [r7, #7]
 800a66c:	f1c2 0201 	rsb	r2, r2, #1
 800a670:	fb02 f103 	mul.w	r1, r2, r3
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	689a      	ldr	r2, [r3, #8]
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4413      	add	r3, r2
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	79fa      	ldrb	r2, [r7, #7]
 800a682:	fb03 f202 	mul.w	r2, r3, r2
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6898      	ldr	r0, [r3, #8]
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	4403      	add	r3, r0
 800a690:	440a      	add	r2, r1
 800a692:	601a      	str	r2, [r3, #0]
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	79fa      	ldrb	r2, [r7, #7]
 800a6a2:	f1c2 0201 	rsb	r2, r2, #1
 800a6a6:	fb02 f103 	mul.w	r1, r2, r3
 800a6aa:	79fb      	ldrb	r3, [r7, #7]
 800a6ac:	693a      	ldr	r2, [r7, #16]
 800a6ae:	fb03 f202 	mul.w	r2, r3, r2
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	6898      	ldr	r0, [r3, #8]
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4403      	add	r3, r0
 800a6bc:	440a      	add	r2, r1
 800a6be:	601a      	str	r2, [r3, #0]
    for( i = 0; i < X->n; i++ )
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	61bb      	str	r3, [r7, #24]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d3bf      	bcc.n	800a650 <mbedtls_mpi_safe_cond_swap+0x98>
    }

cleanup:
 800a6d0:	bf00      	nop
    return( ret );
 800a6d2:	69fb      	ldr	r3, [r7, #28]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3720      	adds	r7, #32
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800a6e6:	2101      	movs	r1, #1
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f7ff fdef 	bl	800a2cc <mbedtls_mpi_grow>
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d119      	bne.n	800a72a <mbedtls_mpi_lset+0x4e>
    memset( X->p, 0, X->n * ciL );
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6898      	ldr	r0, [r3, #8]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	461a      	mov	r2, r3
 800a702:	2100      	movs	r1, #0
 800a704:	f00b f98c 	bl	8015a20 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a70e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	da02      	bge.n	800a724 <mbedtls_mpi_lset+0x48>
 800a71e:	f04f 32ff 	mov.w	r2, #4294967295
 800a722:	e000      	b.n	800a726 <mbedtls_mpi_lset+0x4a>
 800a724:	2201      	movs	r2, #1
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 800a72a:	68fb      	ldr	r3, [r7, #12]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	015b      	lsls	r3, r3, #5
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	429a      	cmp	r2, r3
 800a748:	d301      	bcc.n	800a74e <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 800a74a:	2300      	movs	r3, #0
 800a74c:	e00d      	b.n	800a76a <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	689a      	ldr	r2, [r3, #8]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	095b      	lsrs	r3, r3, #5
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4413      	add	r3, r2
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	f003 031f 	and.w	r3, r3, #31
 800a762:	fa22 f303 	lsr.w	r3, r2, r3
 800a766:	f003 0301 	and.w	r3, r3, #1
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <mbedtls_mpi_set_bit>:

/*
 * Set a bit to a specific value of 0 or 1
 */
int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b088      	sub	sp, #32
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	60f8      	str	r0, [r7, #12]
 800a77e:	60b9      	str	r1, [r7, #8]
 800a780:	4613      	mov	r3, r2
 800a782:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	61fb      	str	r3, [r7, #28]
    size_t off = pos / biL;
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	095b      	lsrs	r3, r3, #5
 800a78c:	61bb      	str	r3, [r7, #24]
    size_t idx = pos % biL;
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f003 031f 	and.w	r3, r3, #31
 800a794:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    if( val != 0 && val != 1 )
 800a796:	79fb      	ldrb	r3, [r7, #7]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d005      	beq.n	800a7a8 <mbedtls_mpi_set_bit+0x32>
 800a79c:	79fb      	ldrb	r3, [r7, #7]
 800a79e:	2b01      	cmp	r3, #1
 800a7a0:	d002      	beq.n	800a7a8 <mbedtls_mpi_set_bit+0x32>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a7a2:	f06f 0303 	mvn.w	r3, #3
 800a7a6:	e037      	b.n	800a818 <mbedtls_mpi_set_bit+0xa2>

    if( X->n * biL <= pos )
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	015b      	lsls	r3, r3, #5
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d30e      	bcc.n	800a7d2 <mbedtls_mpi_set_bit+0x5c>
    {
        if( val == 0 )
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d101      	bne.n	800a7be <mbedtls_mpi_set_bit+0x48>
            return( 0 );
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	e02c      	b.n	800a818 <mbedtls_mpi_set_bit+0xa2>

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f7ff fd81 	bl	800a2cc <mbedtls_mpi_grow>
 800a7ca:	61f8      	str	r0, [r7, #28]
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d121      	bne.n	800a816 <mbedtls_mpi_set_bit+0xa0>
    }

    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	689a      	ldr	r2, [r3, #8]
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	6819      	ldr	r1, [r3, #0]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e6:	43da      	mvns	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6898      	ldr	r0, [r3, #8]
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4403      	add	r3, r0
 800a7f2:	400a      	ands	r2, r1
 800a7f4:	601a      	str	r2, [r3, #0]
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	689a      	ldr	r2, [r3, #8]
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	6819      	ldr	r1, [r3, #0]
 800a802:	79fa      	ldrb	r2, [r7, #7]
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	409a      	lsls	r2, r3
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6898      	ldr	r0, [r3, #8]
 800a80c:	69bb      	ldr	r3, [r7, #24]
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4403      	add	r3, r0
 800a812:	430a      	orrs	r2, r1
 800a814:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 800a816:	69fb      	ldr	r3, [r7, #28]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3720      	adds	r7, #32
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	60fb      	str	r3, [r7, #12]
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 800a82c:	2300      	movs	r3, #0
 800a82e:	617b      	str	r3, [r7, #20]
 800a830:	e01d      	b.n	800a86e <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 800a832:	2300      	movs	r3, #0
 800a834:	613b      	str	r3, [r7, #16]
 800a836:	e014      	b.n	800a862 <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689a      	ldr	r2, [r3, #8]
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	fa22 f303 	lsr.w	r3, r2, r3
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <mbedtls_mpi_lsb+0x36>
                return( count );
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	e011      	b.n	800a87a <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	3301      	adds	r3, #1
 800a85a:	613b      	str	r3, [r7, #16]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	60fb      	str	r3, [r7, #12]
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	2b1f      	cmp	r3, #31
 800a866:	d9e7      	bls.n	800a838 <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	3301      	adds	r3, #1
 800a86c:	617b      	str	r3, [r7, #20]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	429a      	cmp	r2, r3
 800a876:	d3dc      	bcc.n	800a832 <mbedtls_mpi_lsb+0x12>

    return( 0 );
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	371c      	adds	r7, #28
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 800a886:	b480      	push	{r7}
 800a888:	b085      	sub	sp, #20
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800a88e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a892:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e00a      	b.n	800a8b0 <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	4013      	ands	r3, r2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d109      	bne.n	800a8b8 <mbedtls_clz+0x32>

        mask >>= 1;
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	085b      	lsrs	r3, r3, #1
 800a8a8:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b1f      	cmp	r3, #31
 800a8b4:	d9f1      	bls.n	800a89a <mbedtls_clz+0x14>
 800a8b6:	e000      	b.n	800a8ba <mbedtls_clz+0x34>
        if( x & mask ) break;
 800a8b8:	bf00      	nop
    }

    return j;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 800a8d8:	2300      	movs	r3, #0
 800a8da:	e025      	b.n	800a928 <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]
 800a8e4:	e00a      	b.n	800a8fc <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d106      	bne.n	800a904 <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1f1      	bne.n	800a8e6 <mbedtls_mpi_bitlen+0x1e>
 800a902:	e000      	b.n	800a906 <mbedtls_mpi_bitlen+0x3e>
            break;
 800a904:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	689a      	ldr	r2, [r3, #8]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	009b      	lsls	r3, r3, #2
 800a90e:	4413      	add	r3, r2
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4618      	mov	r0, r3
 800a914:	f7ff ffb7 	bl	800a886 <mbedtls_clz>
 800a918:	4603      	mov	r3, r0
 800a91a:	f1c3 0320 	rsb	r3, r3, #32
 800a91e:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	015a      	lsls	r2, r3, #5
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	4413      	add	r3, r2
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f7ff ffc5 	bl	800a8c8 <mbedtls_mpi_bitlen>
 800a93e:	4603      	mov	r3, r0
 800a940:	3307      	adds	r3, #7
 800a942:	08db      	lsrs	r3, r3, #3
}
 800a944:	4618      	mov	r0, r3
 800a946:	3708      	adds	r7, #8
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <mpi_get_digit>:

/*
 * Convert an ASCII character to digit value
 */
static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	4613      	mov	r3, r2
 800a958:	71fb      	strb	r3, [r7, #7]
    *d = 255;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	22ff      	movs	r2, #255	@ 0xff
 800a95e:	601a      	str	r2, [r3, #0]

    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 800a960:	79fb      	ldrb	r3, [r7, #7]
 800a962:	2b2f      	cmp	r3, #47	@ 0x2f
 800a964:	d907      	bls.n	800a976 <mpi_get_digit+0x2a>
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	2b39      	cmp	r3, #57	@ 0x39
 800a96a:	d804      	bhi.n	800a976 <mpi_get_digit+0x2a>
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	3b30      	subs	r3, #48	@ 0x30
 800a970:	461a      	mov	r2, r3
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	601a      	str	r2, [r3, #0]
    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	2b40      	cmp	r3, #64	@ 0x40
 800a97a:	d907      	bls.n	800a98c <mpi_get_digit+0x40>
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	2b46      	cmp	r3, #70	@ 0x46
 800a980:	d804      	bhi.n	800a98c <mpi_get_digit+0x40>
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	3b37      	subs	r3, #55	@ 0x37
 800a986:	461a      	mov	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	601a      	str	r2, [r3, #0]
    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
 800a98c:	79fb      	ldrb	r3, [r7, #7]
 800a98e:	2b60      	cmp	r3, #96	@ 0x60
 800a990:	d907      	bls.n	800a9a2 <mpi_get_digit+0x56>
 800a992:	79fb      	ldrb	r3, [r7, #7]
 800a994:	2b66      	cmp	r3, #102	@ 0x66
 800a996:	d804      	bhi.n	800a9a2 <mpi_get_digit+0x56>
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	3b57      	subs	r3, #87	@ 0x57
 800a99c:	461a      	mov	r2, r3
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	601a      	str	r2, [r3, #0]

    if( *d >= (mbedtls_mpi_uint) radix )
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	d302      	bcc.n	800a9b2 <mpi_get_digit+0x66>
        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );
 800a9ac:	f06f 0305 	mvn.w	r3, #5
 800a9b0:	e000      	b.n	800a9b4 <mpi_get_digit+0x68>

    return( 0 );
 800a9b2:	2300      	movs	r3, #0
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3714      	adds	r7, #20
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr

0800a9c0 <mbedtls_mpi_read_string>:

/*
 * Import from an ASCII string
 */
int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08e      	sub	sp, #56	@ 0x38
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint d;
    mbedtls_mpi T;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( s != NULL );

    if( radix < 2 || radix > 16 )
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	dd02      	ble.n	800a9d8 <mbedtls_mpi_read_string+0x18>
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b10      	cmp	r3, #16
 800a9d6:	dd02      	ble.n	800a9de <mbedtls_mpi_read_string+0x1e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a9d8:	f06f 0303 	mvn.w	r3, #3
 800a9dc:	e0cf      	b.n	800ab7e <mbedtls_mpi_read_string+0x1be>

    mbedtls_mpi_init( &T );
 800a9de:	f107 0314 	add.w	r3, r7, #20
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7ff fc39 	bl	800a25a <mbedtls_mpi_init>

    slen = strlen( s );
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7f5 fc91 	bl	8000310 <strlen>
 800a9ee:	62b8      	str	r0, [r7, #40]	@ 0x28

    if( radix == 16 )
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2b10      	cmp	r3, #16
 800a9f4:	d166      	bne.n	800aac4 <mbedtls_mpi_read_string+0x104>
    {
        if( slen > MPI_SIZE_T_MAX >> 2 )
 800a9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9fc:	d302      	bcc.n	800aa04 <mbedtls_mpi_read_string+0x44>
            return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a9fe:	f06f 0303 	mvn.w	r3, #3
 800aa02:	e0bc      	b.n	800ab7e <mbedtls_mpi_read_string+0x1be>

        n = BITS_TO_LIMBS( slen << 2 );
 800aa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	095b      	lsrs	r3, r3, #5
 800aa0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa0c:	f002 0207 	and.w	r2, r2, #7
 800aa10:	2a00      	cmp	r2, #0
 800aa12:	bf14      	ite	ne
 800aa14:	2201      	movne	r2, #1
 800aa16:	2200      	moveq	r2, #0
 800aa18:	b2d2      	uxtb	r2, r2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	627b      	str	r3, [r7, #36]	@ 0x24

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 800aa1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f7ff fc53 	bl	800a2cc <mbedtls_mpi_grow>
 800aa26:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f040 80a1 	bne.w	800ab72 <mbedtls_mpi_read_string+0x1b2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800aa30:	2100      	movs	r1, #0
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7ff fe52 	bl	800a6dc <mbedtls_mpi_lset>
 800aa38:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f040 8098 	bne.w	800ab72 <mbedtls_mpi_read_string+0x1b2>

        for( i = slen, j = 0; i > 0; i--, j++ )
 800aa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa44:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa46:	2300      	movs	r3, #0
 800aa48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa4a:	e037      	b.n	800aabc <mbedtls_mpi_read_string+0xfc>
        {
            if( i == 1 && s[i - 1] == '-' )
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d10b      	bne.n	800aa6a <mbedtls_mpi_read_string+0xaa>
 800aa52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa54:	3b01      	subs	r3, #1
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	4413      	add	r3, r2
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa5e:	d104      	bne.n	800aa6a <mbedtls_mpi_read_string+0xaa>
            {
                X->s = -1;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f04f 32ff 	mov.w	r2, #4294967295
 800aa66:	601a      	str	r2, [r3, #0]
                break;
 800aa68:	e083      	b.n	800ab72 <mbedtls_mpi_read_string+0x1b2>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	4413      	add	r3, r2
 800aa72:	781a      	ldrb	r2, [r3, #0]
 800aa74:	f107 0320 	add.w	r3, r7, #32
 800aa78:	68b9      	ldr	r1, [r7, #8]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7ff ff66 	bl	800a94c <mpi_get_digit>
 800aa80:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d174      	bne.n	800ab72 <mbedtls_mpi_read_string+0x1b2>
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6899      	ldr	r1, [r3, #8]
 800aa8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8e:	08db      	lsrs	r3, r3, #3
 800aa90:	009a      	lsls	r2, r3, #2
 800aa92:	440a      	add	r2, r1
 800aa94:	6811      	ldr	r1, [r2, #0]
 800aa96:	6a38      	ldr	r0, [r7, #32]
 800aa98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa9a:	0092      	lsls	r2, r2, #2
 800aa9c:	f002 021c 	and.w	r2, r2, #28
 800aaa0:	fa00 f202 	lsl.w	r2, r0, r2
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	6880      	ldr	r0, [r0, #8]
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4403      	add	r3, r0
 800aaac:	430a      	orrs	r2, r1
 800aaae:	601a      	str	r2, [r3, #0]
        for( i = slen, j = 0; i > 0; i--, j++ )
 800aab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab2:	3b01      	subs	r3, #1
 800aab4:	633b      	str	r3, [r7, #48]	@ 0x30
 800aab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab8:	3301      	adds	r3, #1
 800aaba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1c4      	bne.n	800aa4c <mbedtls_mpi_read_string+0x8c>
 800aac2:	e056      	b.n	800ab72 <mbedtls_mpi_read_string+0x1b2>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800aac4:	2100      	movs	r1, #0
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7ff fe08 	bl	800a6dc <mbedtls_mpi_lset>
 800aacc:	6378      	str	r0, [r7, #52]	@ 0x34
 800aace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d14e      	bne.n	800ab72 <mbedtls_mpi_read_string+0x1b2>

        for( i = 0; i < slen; i++ )
 800aad4:	2300      	movs	r3, #0
 800aad6:	633b      	str	r3, [r7, #48]	@ 0x30
 800aad8:	e046      	b.n	800ab68 <mbedtls_mpi_read_string+0x1a8>
        {
            if( i == 0 && s[i] == '-' )
 800aada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10a      	bne.n	800aaf6 <mbedtls_mpi_read_string+0x136>
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae4:	4413      	add	r3, r2
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b2d      	cmp	r3, #45	@ 0x2d
 800aaea:	d104      	bne.n	800aaf6 <mbedtls_mpi_read_string+0x136>
            {
                X->s = -1;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf2:	601a      	str	r2, [r3, #0]
                continue;
 800aaf4:	e035      	b.n	800ab62 <mbedtls_mpi_read_string+0x1a2>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafa:	4413      	add	r3, r2
 800aafc:	781a      	ldrb	r2, [r3, #0]
 800aafe:	f107 0320 	add.w	r3, r7, #32
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7ff ff21 	bl	800a94c <mpi_get_digit>
 800ab0a:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d12f      	bne.n	800ab72 <mbedtls_mpi_read_string+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	f107 0314 	add.w	r3, r7, #20
 800ab18:	68f9      	ldr	r1, [r7, #12]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f002 f9c6 	bl	800ceac <mbedtls_mpi_mul_int>
 800ab20:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d124      	bne.n	800ab72 <mbedtls_mpi_read_string+0x1b2>

            if( X->s == 1 )
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d10c      	bne.n	800ab4a <mbedtls_mpi_read_string+0x18a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	461a      	mov	r2, r3
 800ab34:	f107 0314 	add.w	r3, r7, #20
 800ab38:	4619      	mov	r1, r3
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f000 fd1c 	bl	800b578 <mbedtls_mpi_add_int>
 800ab40:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00c      	beq.n	800ab62 <mbedtls_mpi_read_string+0x1a2>
 800ab48:	e013      	b.n	800ab72 <mbedtls_mpi_read_string+0x1b2>
            }
            else
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 800ab4a:	6a3b      	ldr	r3, [r7, #32]
 800ab4c:	461a      	mov	r2, r3
 800ab4e:	f107 0314 	add.w	r3, r7, #20
 800ab52:	4619      	mov	r1, r3
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 fd33 	bl	800b5c0 <mbedtls_mpi_sub_int>
 800ab5a:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d107      	bne.n	800ab72 <mbedtls_mpi_read_string+0x1b2>
        for( i = 0; i < slen; i++ )
 800ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab64:	3301      	adds	r3, #1
 800ab66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d3b4      	bcc.n	800aada <mbedtls_mpi_read_string+0x11a>
            }
        }
    }

cleanup:
 800ab70:	bf00      	nop

    mbedtls_mpi_free( &T );
 800ab72:	f107 0314 	add.w	r3, r7, #20
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff fb82 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800ab7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3738      	adds	r7, #56	@ 0x38
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <mpi_uint_bigendian_to_host>:
        tmp |= ( x & 0xFF ) << ( ( ciL - 1 - i ) << 3 );
    return( tmp );
}

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	ba1b      	rev	r3, r3
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b086      	sub	sp, #24
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d026      	beq.n	800abfc <mpi_bigendian_to_host+0x5e>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	617b      	str	r3, [r7, #20]
 800abb2:	683a      	ldr	r2, [r7, #0]
 800abb4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	4413      	add	r3, r2
 800abc0:	613b      	str	r3, [r7, #16]
 800abc2:	e016      	b.n	800abf2 <mpi_bigendian_to_host+0x54>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4618      	mov	r0, r3
 800abca:	f7ff ffdc 	bl	800ab86 <mpi_uint_bigendian_to_host>
 800abce:	60f8      	str	r0, [r7, #12]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff ffd6 	bl	800ab86 <mpi_uint_bigendian_to_host>
 800abda:	4602      	mov	r2, r0
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	601a      	str	r2, [r3, #0]
        *cur_limb_right = tmp;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	601a      	str	r2, [r3, #0]
         cur_limb_left++, cur_limb_right-- )
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	3304      	adds	r3, #4
 800abea:	617b      	str	r3, [r7, #20]
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	3b04      	subs	r3, #4
 800abf0:	613b      	str	r3, [r7, #16]
         cur_limb_left <= cur_limb_right;
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d9e4      	bls.n	800abc4 <mpi_bigendian_to_host+0x26>
 800abfa:	e000      	b.n	800abfe <mpi_bigendian_to_host+0x60>
        return;
 800abfc:	bf00      	nop
    }
}
 800abfe:	3718      	adds	r7, #24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	089b      	lsrs	r3, r3, #2
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	f002 0203 	and.w	r2, r2, #3
 800ac1a:	2a00      	cmp	r2, #0
 800ac1c:	bf14      	ite	ne
 800ac1e:	2201      	movne	r2, #1
 800ac20:	2200      	moveq	r2, #0
 800ac22:	b2d2      	uxtb	r2, r2
 800ac24:	4413      	add	r3, r2
 800ac26:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - buflen;
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	009a      	lsls	r2, r3, #2
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	69ba      	ldr	r2, [r7, #24]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d00d      	beq.n	800ac58 <mbedtls_mpi_read_binary+0x54>
    {
        mbedtls_mpi_free( X );
 800ac3c:	68f8      	ldr	r0, [r7, #12]
 800ac3e:	f7ff fb1f 	bl	800a280 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f7ff fb09 	bl	800a25a <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800ac48:	69b9      	ldr	r1, [r7, #24]
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7ff fb3e 	bl	800a2cc <mbedtls_mpi_grow>
 800ac50:	61f8      	str	r0, [r7, #28]
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d11d      	bne.n	800ac94 <mbedtls_mpi_read_binary+0x90>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800ac58:	2100      	movs	r1, #0
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f7ff fd3e 	bl	800a6dc <mbedtls_mpi_lset>
 800ac60:	61f8      	str	r0, [r7, #28]
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d115      	bne.n	800ac94 <mbedtls_mpi_read_binary+0x90>

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d011      	beq.n	800ac92 <mbedtls_mpi_read_binary+0x8e>
    {
        Xp = (unsigned char*) X->p;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	613b      	str	r3, [r7, #16]
        memcpy( Xp + overhead, buf, buflen );
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	4413      	add	r3, r2
 800ac7a:	687a      	ldr	r2, [r7, #4]
 800ac7c:	68b9      	ldr	r1, [r7, #8]
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f00a ff12 	bl	8015aa8 <memcpy>

        mpi_bigendian_to_host( X->p, limbs );
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	69b9      	ldr	r1, [r7, #24]
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7ff ff87 	bl	800ab9e <mpi_bigendian_to_host>
 800ac90:	e000      	b.n	800ac94 <mbedtls_mpi_read_binary+0x90>
    }

cleanup:
 800ac92:	bf00      	nop

    return( ret );
 800ac94:	69fb      	ldr	r3, [r7, #28]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3720      	adds	r7, #32
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b088      	sub	sp, #32
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
 800aca6:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	095b      	lsrs	r3, r3, #5
 800acb0:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	f003 031f 	and.w	r3, r3, #31
 800acb8:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff fe04 	bl	800a8c8 <mbedtls_mpi_bitlen>
 800acc0:	4602      	mov	r2, r0
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	4413      	add	r3, r2
 800acc6:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	015b      	lsls	r3, r3, #5
 800acce:	69ba      	ldr	r2, [r7, #24]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d912      	bls.n	800acfa <mbedtls_mpi_shift_l+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	095b      	lsrs	r3, r3, #5
 800acd8:	69ba      	ldr	r2, [r7, #24]
 800acda:	f002 021f 	and.w	r2, r2, #31
 800acde:	2a00      	cmp	r2, #0
 800ace0:	bf14      	ite	ne
 800ace2:	2201      	movne	r2, #1
 800ace4:	2200      	moveq	r2, #0
 800ace6:	b2d2      	uxtb	r2, r2
 800ace8:	4413      	add	r3, r2
 800acea:	4619      	mov	r1, r3
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff faed 	bl	800a2cc <mbedtls_mpi_grow>
 800acf2:	61f8      	str	r0, [r7, #28]
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d16e      	bne.n	800add8 <mbedtls_mpi_shift_l+0x13a>

    ret = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d02f      	beq.n	800ad64 <mbedtls_mpi_shift_l+0xc6>
    {
        for( i = X->n; i > v0; i-- )
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	61bb      	str	r3, [r7, #24]
 800ad0a:	e016      	b.n	800ad3a <mbedtls_mpi_shift_l+0x9c>
            X->p[i - 1] = X->p[i - v0 - 1];
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	69b9      	ldr	r1, [r7, #24]
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	1ac9      	subs	r1, r1, r3
 800ad16:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ad1a:	440b      	add	r3, r1
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	441a      	add	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6899      	ldr	r1, [r3, #8]
 800ad24:	69b8      	ldr	r0, [r7, #24]
 800ad26:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ad2a:	4403      	add	r3, r0
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	440b      	add	r3, r1
 800ad30:	6812      	ldr	r2, [r2, #0]
 800ad32:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	3b01      	subs	r3, #1
 800ad38:	61bb      	str	r3, [r7, #24]
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d8e4      	bhi.n	800ad0c <mbedtls_mpi_shift_l+0x6e>

        for( ; i > 0; i-- )
 800ad42:	e00c      	b.n	800ad5e <mbedtls_mpi_shift_l+0xc0>
            X->p[i - 1] = 0;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689a      	ldr	r2, [r3, #8]
 800ad48:	69b9      	ldr	r1, [r7, #24]
 800ad4a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ad4e:	440b      	add	r3, r1
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	2200      	movs	r2, #0
 800ad56:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	61bb      	str	r3, [r7, #24]
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1ef      	bne.n	800ad44 <mbedtls_mpi_shift_l+0xa6>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d035      	beq.n	800add6 <mbedtls_mpi_shift_l+0x138>
    {
        for( i = v0; i < X->n; i++ )
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	61bb      	str	r3, [r7, #24]
 800ad6e:	e02d      	b.n	800adcc <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	689a      	ldr	r2, [r3, #8]
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f1c3 0320 	rsb	r3, r3, #32
 800ad82:	fa22 f303 	lsr.w	r3, r2, r3
 800ad86:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689a      	ldr	r2, [r3, #8]
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	6819      	ldr	r1, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	689a      	ldr	r2, [r3, #8]
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	fa01 f202 	lsl.w	r2, r1, r2
 800ada4:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	689a      	ldr	r2, [r3, #8]
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	4413      	add	r3, r2
 800adb0:	6819      	ldr	r1, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	689a      	ldr	r2, [r3, #8]
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	430a      	orrs	r2, r1
 800adc0:	601a      	str	r2, [r3, #0]
            r0 = r1;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	3301      	adds	r3, #1
 800adca:	61bb      	str	r3, [r7, #24]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	429a      	cmp	r2, r3
 800add4:	d3cc      	bcc.n	800ad70 <mbedtls_mpi_shift_l+0xd2>
        }
    }

cleanup:
 800add6:	bf00      	nop

    return( ret );
 800add8:	69fb      	ldr	r3, [r7, #28]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3720      	adds	r7, #32
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b088      	sub	sp, #32
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 800adec:	2300      	movs	r3, #0
 800adee:	61bb      	str	r3, [r7, #24]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	095b      	lsrs	r3, r3, #5
 800adf4:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	f003 031f 	and.w	r3, r3, #31
 800adfc:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d807      	bhi.n	800ae18 <mbedtls_mpi_shift_r+0x36>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d108      	bne.n	800ae24 <mbedtls_mpi_shift_r+0x42>
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 800ae18:	2100      	movs	r1, #0
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff fc5e 	bl	800a6dc <mbedtls_mpi_lset>
 800ae20:	4603      	mov	r3, r0
 800ae22:	e075      	b.n	800af10 <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d02a      	beq.n	800ae80 <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61fb      	str	r3, [r7, #28]
 800ae2e:	e010      	b.n	800ae52 <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	689a      	ldr	r2, [r3, #8]
 800ae34:	69f9      	ldr	r1, [r7, #28]
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	440b      	add	r3, r1
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	441a      	add	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6899      	ldr	r1, [r3, #8]
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	440b      	add	r3, r1
 800ae48:	6812      	ldr	r2, [r2, #0]
 800ae4a:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	3301      	adds	r3, #1
 800ae50:	61fb      	str	r3, [r7, #28]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685a      	ldr	r2, [r3, #4]
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	69fa      	ldr	r2, [r7, #28]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d3e7      	bcc.n	800ae30 <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 800ae60:	e009      	b.n	800ae76 <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	689a      	ldr	r2, [r3, #8]
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	3301      	adds	r3, #1
 800ae74:	61fb      	str	r3, [r7, #28]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	69fa      	ldr	r2, [r7, #28]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d3f0      	bcc.n	800ae62 <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d043      	beq.n	800af0e <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	61fb      	str	r3, [r7, #28]
 800ae8c:	e03c      	b.n	800af08 <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	689a      	ldr	r2, [r3, #8]
 800ae92:	69f9      	ldr	r1, [r7, #28]
 800ae94:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae98:	440b      	add	r3, r1
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f1c3 0320 	rsb	r3, r3, #32
 800aea6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeaa:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	69f9      	ldr	r1, [r7, #28]
 800aeb2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aeb6:	440b      	add	r3, r1
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	6819      	ldr	r1, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689a      	ldr	r2, [r3, #8]
 800aec2:	69f8      	ldr	r0, [r7, #28]
 800aec4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aec8:	4403      	add	r3, r0
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	693a      	ldr	r2, [r7, #16]
 800aed0:	fa21 f202 	lsr.w	r2, r1, r2
 800aed4:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	689a      	ldr	r2, [r3, #8]
 800aeda:	69f9      	ldr	r1, [r7, #28]
 800aedc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aee0:	440b      	add	r3, r1
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	6819      	ldr	r1, [r3, #0]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689a      	ldr	r2, [r3, #8]
 800aeec:	69f8      	ldr	r0, [r7, #28]
 800aeee:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aef2:	4403      	add	r3, r0
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	69ba      	ldr	r2, [r7, #24]
 800aefa:	430a      	orrs	r2, r1
 800aefc:	601a      	str	r2, [r3, #0]
            r0 = r1;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	3b01      	subs	r3, #1
 800af06:	61fb      	str	r3, [r7, #28]
 800af08:	69fb      	ldr	r3, [r7, #28]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1bf      	bne.n	800ae8e <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3720      	adds	r7, #32
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	e00d      	b.n	800af46 <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	689a      	ldr	r2, [r3, #8]
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af34:	440b      	add	r3, r1
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d106      	bne.n	800af4e <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	3b01      	subs	r3, #1
 800af44:	60fb      	str	r3, [r7, #12]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1ee      	bne.n	800af2a <mbedtls_mpi_cmp_abs+0x12>
 800af4c:	e000      	b.n	800af50 <mbedtls_mpi_cmp_abs+0x38>
            break;
 800af4e:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	60bb      	str	r3, [r7, #8]
 800af56:	e00d      	b.n	800af74 <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	68b9      	ldr	r1, [r7, #8]
 800af5e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af62:	440b      	add	r3, r1
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4413      	add	r3, r2
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	3b01      	subs	r3, #1
 800af72:	60bb      	str	r3, [r7, #8]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1ee      	bne.n	800af58 <mbedtls_mpi_cmp_abs+0x40>
 800af7a:	e000      	b.n	800af7e <mbedtls_mpi_cmp_abs+0x66>
            break;
 800af7c:	bf00      	nop

    if( i == 0 && j == 0 )
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d104      	bne.n	800af8e <mbedtls_mpi_cmp_abs+0x76>
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 800af8a:	2300      	movs	r3, #0
 800af8c:	e040      	b.n	800b010 <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 800af8e:	68fa      	ldr	r2, [r7, #12]
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	429a      	cmp	r2, r3
 800af94:	d901      	bls.n	800af9a <mbedtls_mpi_cmp_abs+0x82>
 800af96:	2301      	movs	r3, #1
 800af98:	e03a      	b.n	800b010 <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d932      	bls.n	800b008 <mbedtls_mpi_cmp_abs+0xf0>
 800afa2:	f04f 33ff 	mov.w	r3, #4294967295
 800afa6:	e033      	b.n	800b010 <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	689a      	ldr	r2, [r3, #8]
 800afac:	68f9      	ldr	r1, [r7, #12]
 800afae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800afb2:	440b      	add	r3, r1
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	4413      	add	r3, r2
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	6899      	ldr	r1, [r3, #8]
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800afc4:	4403      	add	r3, r0
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	440b      	add	r3, r1
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d901      	bls.n	800afd4 <mbedtls_mpi_cmp_abs+0xbc>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e01d      	b.n	800b010 <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	68f9      	ldr	r1, [r7, #12]
 800afda:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800afde:	440b      	add	r3, r1
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	6899      	ldr	r1, [r3, #8]
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aff0:	4403      	add	r3, r0
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	440b      	add	r3, r1
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d202      	bcs.n	800b002 <mbedtls_mpi_cmp_abs+0xea>
 800affc:	f04f 33ff 	mov.w	r3, #4294967295
 800b000:	e006      	b.n	800b010 <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	3b01      	subs	r3, #1
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d1cc      	bne.n	800afa8 <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 800b00e:	2300      	movs	r3, #0
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	60fb      	str	r3, [r7, #12]
 800b02c:	e00d      	b.n	800b04a <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	689a      	ldr	r2, [r3, #8]
 800b032:	68f9      	ldr	r1, [r7, #12]
 800b034:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b038:	440b      	add	r3, r1
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4413      	add	r3, r2
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d106      	bne.n	800b052 <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3b01      	subs	r3, #1
 800b048:	60fb      	str	r3, [r7, #12]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1ee      	bne.n	800b02e <mbedtls_mpi_cmp_mpi+0x12>
 800b050:	e000      	b.n	800b054 <mbedtls_mpi_cmp_mpi+0x38>
            break;
 800b052:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	60bb      	str	r3, [r7, #8]
 800b05a:	e00d      	b.n	800b078 <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	689a      	ldr	r2, [r3, #8]
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b066:	440b      	add	r3, r1
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	3b01      	subs	r3, #1
 800b076:	60bb      	str	r3, [r7, #8]
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1ee      	bne.n	800b05c <mbedtls_mpi_cmp_mpi+0x40>
 800b07e:	e000      	b.n	800b082 <mbedtls_mpi_cmp_mpi+0x66>
            break;
 800b080:	bf00      	nop

    if( i == 0 && j == 0 )
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d104      	bne.n	800b092 <mbedtls_mpi_cmp_mpi+0x76>
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d101      	bne.n	800b092 <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 800b08e:	2300      	movs	r3, #0
 800b090:	e059      	b.n	800b146 <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	429a      	cmp	r2, r3
 800b098:	d902      	bls.n	800b0a0 <mbedtls_mpi_cmp_mpi+0x84>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	e052      	b.n	800b146 <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d903      	bls.n	800b0b0 <mbedtls_mpi_cmp_mpi+0x94>
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	425b      	negs	r3, r3
 800b0ae:	e04a      	b.n	800b146 <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dd05      	ble.n	800b0c4 <mbedtls_mpi_cmp_mpi+0xa8>
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	da01      	bge.n	800b0c4 <mbedtls_mpi_cmp_mpi+0xa8>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e040      	b.n	800b146 <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dd38      	ble.n	800b13e <mbedtls_mpi_cmp_mpi+0x122>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	da34      	bge.n	800b13e <mbedtls_mpi_cmp_mpi+0x122>
 800b0d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d8:	e035      	b.n	800b146 <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689a      	ldr	r2, [r3, #8]
 800b0de:	68f9      	ldr	r1, [r7, #12]
 800b0e0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b0e4:	440b      	add	r3, r1
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	6899      	ldr	r1, [r3, #8]
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b0f6:	4403      	add	r3, r0
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	440b      	add	r3, r1
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d902      	bls.n	800b108 <mbedtls_mpi_cmp_mpi+0xec>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	e01e      	b.n	800b146 <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	689a      	ldr	r2, [r3, #8]
 800b10c:	68f9      	ldr	r1, [r7, #12]
 800b10e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b112:	440b      	add	r3, r1
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6899      	ldr	r1, [r3, #8]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b124:	4403      	add	r3, r0
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	440b      	add	r3, r1
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d203      	bcs.n	800b138 <mbedtls_mpi_cmp_mpi+0x11c>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	425b      	negs	r3, r3
 800b136:	e006      	b.n	800b146 <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1ca      	bne.n	800b0da <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b086      	sub	sp, #24
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
 800b15a:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	bfb8      	it	lt
 800b162:	425b      	neglt	r3, r3
 800b164:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	da02      	bge.n	800b172 <mbedtls_mpi_cmp_int+0x20>
 800b16c:	f04f 33ff 	mov.w	r3, #4294967295
 800b170:	e000      	b.n	800b174 <mbedtls_mpi_cmp_int+0x22>
 800b172:	2301      	movs	r3, #1
 800b174:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 800b176:	2301      	movs	r3, #1
 800b178:	613b      	str	r3, [r7, #16]
    Y.p = p;
 800b17a:	f107 0308 	add.w	r3, r7, #8
 800b17e:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800b180:	f107 030c 	add.w	r3, r7, #12
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff ff48 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800b18c:	4603      	mov	r3, r0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3718      	adds	r7, #24
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b08c      	sub	sp, #48	@ 0x30
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d105      	bne.n	800b1b6 <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	617b      	str	r3, [r7, #20]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	60bb      	str	r3, [r7, #8]
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 800b1b6:	68fa      	ldr	r2, [r7, #12]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d008      	beq.n	800b1d0 <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800b1be:	68b9      	ldr	r1, [r7, #8]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7ff f92c 	bl	800a41e <mbedtls_mpi_copy>
 800b1c6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f040 808d 	bne.w	800b2ea <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1dc:	e00d      	b.n	800b1fa <mbedtls_mpi_add_abs+0x64>
        if( B->p[j - 1] != 0 )
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b1e8:	440b      	add	r3, r1
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d106      	bne.n	800b202 <mbedtls_mpi_add_abs+0x6c>
    for( j = B->n; j > 0; j-- )
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1ee      	bne.n	800b1de <mbedtls_mpi_add_abs+0x48>
 800b200:	e000      	b.n	800b204 <mbedtls_mpi_add_abs+0x6e>
            break;
 800b202:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800b204:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f7ff f860 	bl	800a2cc <mbedtls_mpi_grow>
 800b20c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d16a      	bne.n	800b2ea <mbedtls_mpi_add_abs+0x154>

    o = B->p; p = X->p; c = 0;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	623b      	str	r3, [r7, #32]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	61fb      	str	r3, [r7, #28]
 800b220:	2300      	movs	r3, #0
 800b222:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 800b224:	2300      	movs	r3, #0
 800b226:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b228:	e02c      	b.n	800b284 <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 800b22a:	6a3b      	ldr	r3, [r7, #32]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	441a      	add	r2, r3
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	429a      	cmp	r2, r3
 800b244:	bf8c      	ite	hi
 800b246:	2301      	movhi	r3, #1
 800b248:	2300      	movls	r3, #0
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	441a      	add	r2, r3
 800b256:	69fb      	ldr	r3, [r7, #28]
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	429a      	cmp	r2, r3
 800b262:	bf8c      	ite	hi
 800b264:	2301      	movhi	r3, #1
 800b266:	2300      	movls	r3, #0
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	461a      	mov	r2, r3
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	4413      	add	r3, r2
 800b270:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 800b272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b274:	3301      	adds	r3, #1
 800b276:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b278:	6a3b      	ldr	r3, [r7, #32]
 800b27a:	3304      	adds	r3, #4
 800b27c:	623b      	str	r3, [r7, #32]
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	3304      	adds	r3, #4
 800b282:	61fb      	str	r3, [r7, #28]
 800b284:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b288:	429a      	cmp	r2, r3
 800b28a:	d3ce      	bcc.n	800b22a <mbedtls_mpi_add_abs+0x94>
    }

    while( c != 0 )
 800b28c:	e029      	b.n	800b2e2 <mbedtls_mpi_add_abs+0x14c>
    {
        if( i >= X->n )
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b294:	429a      	cmp	r2, r3
 800b296:	d30f      	bcc.n	800b2b8 <mbedtls_mpi_add_abs+0x122>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800b298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29a:	3301      	adds	r3, #1
 800b29c:	4619      	mov	r1, r3
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f7ff f814 	bl	800a2cc <mbedtls_mpi_grow>
 800b2a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d11e      	bne.n	800b2ea <mbedtls_mpi_add_abs+0x154>
            p = X->p + i;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 800b2b8:	69fb      	ldr	r3, [r7, #28]
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	441a      	add	r2, r3
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	69ba      	ldr	r2, [r7, #24]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	bf8c      	ite	hi
 800b2ce:	2301      	movhi	r3, #1
 800b2d0:	2300      	movls	r3, #0
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	61bb      	str	r3, [r7, #24]
 800b2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d8:	3301      	adds	r3, #1
 800b2da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1d2      	bne.n	800b28e <mbedtls_mpi_add_abs+0xf8>
    }

cleanup:
 800b2e8:	bf00      	nop

    return( ret );
 800b2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3730      	adds	r7, #48	@ 0x30
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}

0800b2f4 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b089      	sub	sp, #36	@ 0x24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800b300:	2300      	movs	r3, #0
 800b302:	61bb      	str	r3, [r7, #24]
 800b304:	2300      	movs	r3, #0
 800b306:	61fb      	str	r3, [r7, #28]
 800b308:	e02b      	b.n	800b362 <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	429a      	cmp	r2, r3
 800b312:	bf8c      	ite	hi
 800b314:	2301      	movhi	r3, #1
 800b316:	2300      	movls	r3, #0
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	617b      	str	r3, [r7, #20]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	1ad2      	subs	r2, r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	429a      	cmp	r2, r3
 800b332:	bf34      	ite	cc
 800b334:	2301      	movcc	r3, #1
 800b336:	2300      	movcs	r3, #0
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	461a      	mov	r2, r3
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	4413      	add	r3, r2
 800b340:	61bb      	str	r3, [r7, #24]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	1ad2      	subs	r2, r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	601a      	str	r2, [r3, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	3301      	adds	r3, #1
 800b354:	61fb      	str	r3, [r7, #28]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	3304      	adds	r3, #4
 800b35a:	60bb      	str	r3, [r7, #8]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3304      	adds	r3, #4
 800b360:	607b      	str	r3, [r7, #4]
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	429a      	cmp	r2, r3
 800b368:	d3cf      	bcc.n	800b30a <mpi_sub_hlp+0x16>
    }

    while( c != 0 )
 800b36a:	e013      	b.n	800b394 <mpi_sub_hlp+0xa0>
    {
        z = ( *d < c ); *d -= c;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	429a      	cmp	r2, r3
 800b374:	bf8c      	ite	hi
 800b376:	2301      	movhi	r3, #1
 800b378:	2300      	movls	r3, #0
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	1ad2      	subs	r2, r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	601a      	str	r2, [r3, #0]
        c = z; d++;
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	61bb      	str	r3, [r7, #24]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	3304      	adds	r3, #4
 800b392:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e8      	bne.n	800b36c <mpi_sub_hlp+0x78>
    }
}
 800b39a:	bf00      	nop
 800b39c:	bf00      	nop
 800b39e:	3724      	adds	r7, #36	@ 0x24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b08a      	sub	sp, #40	@ 0x28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800b3b4:	6879      	ldr	r1, [r7, #4]
 800b3b6:	68b8      	ldr	r0, [r7, #8]
 800b3b8:	f7ff fdae 	bl	800af18 <mbedtls_mpi_cmp_abs>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	da02      	bge.n	800b3c8 <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800b3c2:	f06f 0309 	mvn.w	r3, #9
 800b3c6:	e04b      	b.n	800b460 <mbedtls_mpi_sub_abs+0xb8>

    mbedtls_mpi_init( &TB );
 800b3c8:	f107 0314 	add.w	r3, r7, #20
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7fe ff44 	bl	800a25a <mbedtls_mpi_init>

    if( X == B )
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d10c      	bne.n	800b3f4 <mbedtls_mpi_sub_abs+0x4c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800b3da:	f107 0314 	add.w	r3, r7, #20
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff f81c 	bl	800a41e <mbedtls_mpi_copy>
 800b3e6:	6278      	str	r0, [r7, #36]	@ 0x24
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d132      	bne.n	800b454 <mbedtls_mpi_sub_abs+0xac>
        B = &TB;
 800b3ee:	f107 0314 	add.w	r3, r7, #20
 800b3f2:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 800b3f4:	68fa      	ldr	r2, [r7, #12]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d007      	beq.n	800b40c <mbedtls_mpi_sub_abs+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800b3fc:	68b9      	ldr	r1, [r7, #8]
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f7ff f80d 	bl	800a41e <mbedtls_mpi_copy>
 800b404:	6278      	str	r0, [r7, #36]	@ 0x24
 800b406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d123      	bne.n	800b454 <mbedtls_mpi_sub_abs+0xac>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2201      	movs	r2, #1
 800b410:	601a      	str	r2, [r3, #0]

    ret = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	627b      	str	r3, [r7, #36]	@ 0x24

    for( n = B->n; n > 0; n-- )
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	623b      	str	r3, [r7, #32]
 800b41c:	e00d      	b.n	800b43a <mbedtls_mpi_sub_abs+0x92>
        if( B->p[n - 1] != 0 )
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	689a      	ldr	r2, [r3, #8]
 800b422:	6a39      	ldr	r1, [r7, #32]
 800b424:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b428:	440b      	add	r3, r1
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	4413      	add	r3, r2
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d106      	bne.n	800b442 <mbedtls_mpi_sub_abs+0x9a>
    for( n = B->n; n > 0; n-- )
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	3b01      	subs	r3, #1
 800b438:	623b      	str	r3, [r7, #32]
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1ee      	bne.n	800b41e <mbedtls_mpi_sub_abs+0x76>
 800b440:	e000      	b.n	800b444 <mbedtls_mpi_sub_abs+0x9c>
            break;
 800b442:	bf00      	nop

    mpi_sub_hlp( n, B->p, X->p );
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6899      	ldr	r1, [r3, #8]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	461a      	mov	r2, r3
 800b44e:	6a38      	ldr	r0, [r7, #32]
 800b450:	f7ff ff50 	bl	800b2f4 <mpi_sub_hlp>

cleanup:

    mbedtls_mpi_free( &TB );
 800b454:	f107 0314 	add.w	r3, r7, #20
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe ff11 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800b45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b460:	4618      	mov	r0, r3
 800b462:	3728      	adds	r7, #40	@ 0x28
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	613b      	str	r3, [r7, #16]
    if( A->s * B->s < 0 )
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	6812      	ldr	r2, [r2, #0]
 800b482:	fb02 f303 	mul.w	r3, r2, r3
 800b486:	2b00      	cmp	r3, #0
 800b488:	da21      	bge.n	800b4ce <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800b48a:	6879      	ldr	r1, [r7, #4]
 800b48c:	68b8      	ldr	r0, [r7, #8]
 800b48e:	f7ff fd43 	bl	800af18 <mbedtls_mpi_cmp_abs>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	db0c      	blt.n	800b4b2 <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	68b9      	ldr	r1, [r7, #8]
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7ff ff83 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800b4a2:	6178      	str	r0, [r7, #20]
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d11d      	bne.n	800b4e6 <mbedtls_mpi_add_mpi+0x7e>
            X->s =  s;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	e019      	b.n	800b4e6 <mbedtls_mpi_add_mpi+0x7e>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	6879      	ldr	r1, [r7, #4]
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f7ff ff76 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800b4bc:	6178      	str	r0, [r7, #20]
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d110      	bne.n	800b4e6 <mbedtls_mpi_add_mpi+0x7e>
            X->s = -s;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	425a      	negs	r2, r3
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	e00b      	b.n	800b4e6 <mbedtls_mpi_add_mpi+0x7e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	68b9      	ldr	r1, [r7, #8]
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7ff fe5f 	bl	800b196 <mbedtls_mpi_add_abs>
 800b4d8:	6178      	str	r0, [r7, #20]
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d102      	bne.n	800b4e6 <mbedtls_mpi_add_mpi+0x7e>
        X->s = s;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 800b4e6:	697b      	ldr	r3, [r7, #20]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3718      	adds	r7, #24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	613b      	str	r3, [r7, #16]
    if( A->s * B->s > 0 )
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	6812      	ldr	r2, [r2, #0]
 800b50a:	fb02 f303 	mul.w	r3, r2, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	dd21      	ble.n	800b556 <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	68b8      	ldr	r0, [r7, #8]
 800b516:	f7ff fcff 	bl	800af18 <mbedtls_mpi_cmp_abs>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	db0c      	blt.n	800b53a <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	68b9      	ldr	r1, [r7, #8]
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f7ff ff3f 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800b52a:	6178      	str	r0, [r7, #20]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d11d      	bne.n	800b56e <mbedtls_mpi_sub_mpi+0x7e>
            X->s =  s;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	601a      	str	r2, [r3, #0]
 800b538:	e019      	b.n	800b56e <mbedtls_mpi_sub_mpi+0x7e>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800b53a:	68ba      	ldr	r2, [r7, #8]
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff ff32 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800b544:	6178      	str	r0, [r7, #20]
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d110      	bne.n	800b56e <mbedtls_mpi_sub_mpi+0x7e>
            X->s = -s;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	425a      	negs	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	e00b      	b.n	800b56e <mbedtls_mpi_sub_mpi+0x7e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f7ff fe1b 	bl	800b196 <mbedtls_mpi_add_abs>
 800b560:	6178      	str	r0, [r7, #20]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d102      	bne.n	800b56e <mbedtls_mpi_sub_mpi+0x7e>
        X->s = s;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	693a      	ldr	r2, [r7, #16]
 800b56c:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 800b56e:	697b      	ldr	r3, [r7, #20]
}
 800b570:	4618      	mov	r0, r3
 800b572:	3718      	adds	r7, #24
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	bfb8      	it	lt
 800b58a:	425b      	neglt	r3, r3
 800b58c:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	da02      	bge.n	800b59a <mbedtls_mpi_add_int+0x22>
 800b594:	f04f 33ff 	mov.w	r3, #4294967295
 800b598:	e000      	b.n	800b59c <mbedtls_mpi_add_int+0x24>
 800b59a:	2301      	movs	r3, #1
 800b59c:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800b5a2:	f107 0310 	add.w	r3, r7, #16
 800b5a6:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 800b5a8:	f107 0314 	add.w	r3, r7, #20
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	68b9      	ldr	r1, [r7, #8]
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f7ff ff59 	bl	800b468 <mbedtls_mpi_add_mpi>
 800b5b6:	4603      	mov	r3, r0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3720      	adds	r7, #32
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b088      	sub	sp, #32
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	bfb8      	it	lt
 800b5d2:	425b      	neglt	r3, r3
 800b5d4:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	da02      	bge.n	800b5e2 <mbedtls_mpi_sub_int+0x22>
 800b5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e0:	e000      	b.n	800b5e4 <mbedtls_mpi_sub_int+0x24>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800b5ea:	f107 0310 	add.w	r3, r7, #16
 800b5ee:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800b5f0:	f107 0314 	add.w	r3, r7, #20
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7ff ff79 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800b5fe:	4603      	mov	r3, r0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3720      	adds	r7, #32
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800b608:	b480      	push	{r7}
 800b60a:	b09f      	sub	sp, #124	@ 0x7c
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
 800b614:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint c = 0, t = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	677b      	str	r3, [r7, #116]	@ 0x74
 800b61a:	2300      	movs	r3, #0
 800b61c:	673b      	str	r3, [r7, #112]	@ 0x70
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800b61e:	f000 bf49 	b.w	800c4b4 <mpi_mul_hlp+0xeac>
    {
        MULADDC_INIT
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	b29b      	uxth	r3, r3
 800b626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	0c1b      	lsrs	r3, r3, #16
 800b62c:	62bb      	str	r3, [r7, #40]	@ 0x28
        MULADDC_CORE   MULADDC_CORE
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	b29b      	uxth	r3, r3
 800b634:	627b      	str	r3, [r7, #36]	@ 0x24
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	0c1b      	lsrs	r3, r3, #16
 800b63c:	623b      	str	r3, [r7, #32]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	3304      	adds	r3, #4
 800b642:	60bb      	str	r3, [r7, #8]
 800b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b648:	fb02 f303 	mul.w	r3, r2, r3
 800b64c:	61fb      	str	r3, [r7, #28]
 800b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b652:	fb02 f303 	mul.w	r3, r2, r3
 800b656:	61bb      	str	r3, [r7, #24]
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b65c:	fb02 f303 	mul.w	r3, r2, r3
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b666:	fb02 f303 	mul.w	r3, r2, r3
 800b66a:	613b      	str	r3, [r7, #16]
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	0c1b      	lsrs	r3, r3, #16
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	4413      	add	r3, r2
 800b674:	613b      	str	r3, [r7, #16]
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	0c1b      	lsrs	r3, r3, #16
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	4413      	add	r3, r2
 800b67e:	613b      	str	r3, [r7, #16]
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	041b      	lsls	r3, r3, #16
 800b684:	61fb      	str	r3, [r7, #28]
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	041b      	lsls	r3, r3, #16
 800b68a:	617b      	str	r3, [r7, #20]
 800b68c:	69ba      	ldr	r2, [r7, #24]
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	4413      	add	r3, r2
 800b692:	61bb      	str	r3, [r7, #24]
 800b694:	69ba      	ldr	r2, [r7, #24]
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	429a      	cmp	r2, r3
 800b69a:	bf34      	ite	cc
 800b69c:	2301      	movcc	r3, #1
 800b69e:	2300      	movcs	r3, #0
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	613b      	str	r3, [r7, #16]
 800b6aa:	69ba      	ldr	r2, [r7, #24]
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	61bb      	str	r3, [r7, #24]
 800b6b2:	69ba      	ldr	r2, [r7, #24]
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	bf34      	ite	cc
 800b6ba:	2301      	movcc	r3, #1
 800b6bc:	2300      	movcs	r3, #0
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	613b      	str	r3, [r7, #16]
 800b6c8:	69ba      	ldr	r2, [r7, #24]
 800b6ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6cc:	4413      	add	r3, r2
 800b6ce:	61bb      	str	r3, [r7, #24]
 800b6d0:	69ba      	ldr	r2, [r7, #24]
 800b6d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	bf34      	ite	cc
 800b6d8:	2301      	movcc	r3, #1
 800b6da:	2300      	movcs	r3, #0
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	461a      	mov	r2, r3
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	613b      	str	r3, [r7, #16]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	61bb      	str	r3, [r7, #24]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	bf34      	ite	cc
 800b6fa:	2301      	movcc	r3, #1
 800b6fc:	2300      	movcs	r3, #0
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	461a      	mov	r2, r3
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	4413      	add	r3, r2
 800b706:	613b      	str	r3, [r7, #16]
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	1d1a      	adds	r2, r3, #4
 800b710:	607a      	str	r2, [r7, #4]
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	0c1b      	lsrs	r3, r3, #16
 800b724:	623b      	str	r3, [r7, #32]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	3304      	adds	r3, #4
 800b72a:	60bb      	str	r3, [r7, #8]
 800b72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b730:	fb02 f303 	mul.w	r3, r2, r3
 800b734:	61fb      	str	r3, [r7, #28]
 800b736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b73a:	fb02 f303 	mul.w	r3, r2, r3
 800b73e:	61bb      	str	r3, [r7, #24]
 800b740:	6a3b      	ldr	r3, [r7, #32]
 800b742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b744:	fb02 f303 	mul.w	r3, r2, r3
 800b748:	617b      	str	r3, [r7, #20]
 800b74a:	6a3b      	ldr	r3, [r7, #32]
 800b74c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b74e:	fb02 f303 	mul.w	r3, r2, r3
 800b752:	613b      	str	r3, [r7, #16]
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	0c1b      	lsrs	r3, r3, #16
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	4413      	add	r3, r2
 800b75c:	613b      	str	r3, [r7, #16]
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	0c1b      	lsrs	r3, r3, #16
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	4413      	add	r3, r2
 800b766:	613b      	str	r3, [r7, #16]
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	041b      	lsls	r3, r3, #16
 800b76c:	61fb      	str	r3, [r7, #28]
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	041b      	lsls	r3, r3, #16
 800b772:	617b      	str	r3, [r7, #20]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	4413      	add	r3, r2
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	69ba      	ldr	r2, [r7, #24]
 800b77e:	69fb      	ldr	r3, [r7, #28]
 800b780:	429a      	cmp	r2, r3
 800b782:	bf34      	ite	cc
 800b784:	2301      	movcc	r3, #1
 800b786:	2300      	movcs	r3, #0
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	461a      	mov	r2, r3
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	4413      	add	r3, r2
 800b790:	613b      	str	r3, [r7, #16]
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	4413      	add	r3, r2
 800b798:	61bb      	str	r3, [r7, #24]
 800b79a:	69ba      	ldr	r2, [r7, #24]
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	bf34      	ite	cc
 800b7a2:	2301      	movcc	r3, #1
 800b7a4:	2300      	movcs	r3, #0
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	613b      	str	r3, [r7, #16]
 800b7b0:	69ba      	ldr	r2, [r7, #24]
 800b7b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7b4:	4413      	add	r3, r2
 800b7b6:	61bb      	str	r3, [r7, #24]
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	bf34      	ite	cc
 800b7c0:	2301      	movcc	r3, #1
 800b7c2:	2300      	movcs	r3, #0
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	613b      	str	r3, [r7, #16]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	69ba      	ldr	r2, [r7, #24]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	61bb      	str	r3, [r7, #24]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	69ba      	ldr	r2, [r7, #24]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	bf34      	ite	cc
 800b7e2:	2301      	movcc	r3, #1
 800b7e4:	2300      	movcs	r3, #0
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	613b      	str	r3, [r7, #16]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	677b      	str	r3, [r7, #116]	@ 0x74
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	1d1a      	adds	r2, r3, #4
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	b29b      	uxth	r3, r3
 800b804:	627b      	str	r3, [r7, #36]	@ 0x24
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	0c1b      	lsrs	r3, r3, #16
 800b80c:	623b      	str	r3, [r7, #32]
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	3304      	adds	r3, #4
 800b812:	60bb      	str	r3, [r7, #8]
 800b814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b816:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b818:	fb02 f303 	mul.w	r3, r2, r3
 800b81c:	61fb      	str	r3, [r7, #28]
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b822:	fb02 f303 	mul.w	r3, r2, r3
 800b826:	61bb      	str	r3, [r7, #24]
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b82c:	fb02 f303 	mul.w	r3, r2, r3
 800b830:	617b      	str	r3, [r7, #20]
 800b832:	6a3b      	ldr	r3, [r7, #32]
 800b834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b836:	fb02 f303 	mul.w	r3, r2, r3
 800b83a:	613b      	str	r3, [r7, #16]
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	0c1b      	lsrs	r3, r3, #16
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	4413      	add	r3, r2
 800b844:	613b      	str	r3, [r7, #16]
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	0c1b      	lsrs	r3, r3, #16
 800b84a:	693a      	ldr	r2, [r7, #16]
 800b84c:	4413      	add	r3, r2
 800b84e:	613b      	str	r3, [r7, #16]
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	041b      	lsls	r3, r3, #16
 800b854:	61fb      	str	r3, [r7, #28]
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	041b      	lsls	r3, r3, #16
 800b85a:	617b      	str	r3, [r7, #20]
 800b85c:	69ba      	ldr	r2, [r7, #24]
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	4413      	add	r3, r2
 800b862:	61bb      	str	r3, [r7, #24]
 800b864:	69ba      	ldr	r2, [r7, #24]
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	429a      	cmp	r2, r3
 800b86a:	bf34      	ite	cc
 800b86c:	2301      	movcc	r3, #1
 800b86e:	2300      	movcs	r3, #0
 800b870:	b2db      	uxtb	r3, r3
 800b872:	461a      	mov	r2, r3
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	4413      	add	r3, r2
 800b878:	613b      	str	r3, [r7, #16]
 800b87a:	69ba      	ldr	r2, [r7, #24]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	4413      	add	r3, r2
 800b880:	61bb      	str	r3, [r7, #24]
 800b882:	69ba      	ldr	r2, [r7, #24]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	429a      	cmp	r2, r3
 800b888:	bf34      	ite	cc
 800b88a:	2301      	movcc	r3, #1
 800b88c:	2300      	movcs	r3, #0
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	461a      	mov	r2, r3
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	4413      	add	r3, r2
 800b896:	613b      	str	r3, [r7, #16]
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b89c:	4413      	add	r3, r2
 800b89e:	61bb      	str	r3, [r7, #24]
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	bf34      	ite	cc
 800b8a8:	2301      	movcc	r3, #1
 800b8aa:	2300      	movcs	r3, #0
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	613b      	str	r3, [r7, #16]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	69ba      	ldr	r2, [r7, #24]
 800b8bc:	4413      	add	r3, r2
 800b8be:	61bb      	str	r3, [r7, #24]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	69ba      	ldr	r2, [r7, #24]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	bf34      	ite	cc
 800b8ca:	2301      	movcc	r3, #1
 800b8cc:	2300      	movcs	r3, #0
 800b8ce:	b2db      	uxtb	r3, r3
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	613b      	str	r3, [r7, #16]
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	677b      	str	r3, [r7, #116]	@ 0x74
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	1d1a      	adds	r2, r3, #4
 800b8e0:	607a      	str	r2, [r7, #4]
 800b8e2:	69ba      	ldr	r2, [r7, #24]
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	0c1b      	lsrs	r3, r3, #16
 800b8f4:	623b      	str	r3, [r7, #32]
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	60bb      	str	r3, [r7, #8]
 800b8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b900:	fb02 f303 	mul.w	r3, r2, r3
 800b904:	61fb      	str	r3, [r7, #28]
 800b906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b90a:	fb02 f303 	mul.w	r3, r2, r3
 800b90e:	61bb      	str	r3, [r7, #24]
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b914:	fb02 f303 	mul.w	r3, r2, r3
 800b918:	617b      	str	r3, [r7, #20]
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b91e:	fb02 f303 	mul.w	r3, r2, r3
 800b922:	613b      	str	r3, [r7, #16]
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	0c1b      	lsrs	r3, r3, #16
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	4413      	add	r3, r2
 800b92c:	613b      	str	r3, [r7, #16]
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	0c1b      	lsrs	r3, r3, #16
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4413      	add	r3, r2
 800b936:	613b      	str	r3, [r7, #16]
 800b938:	69fb      	ldr	r3, [r7, #28]
 800b93a:	041b      	lsls	r3, r3, #16
 800b93c:	61fb      	str	r3, [r7, #28]
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	041b      	lsls	r3, r3, #16
 800b942:	617b      	str	r3, [r7, #20]
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	4413      	add	r3, r2
 800b94a:	61bb      	str	r3, [r7, #24]
 800b94c:	69ba      	ldr	r2, [r7, #24]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	429a      	cmp	r2, r3
 800b952:	bf34      	ite	cc
 800b954:	2301      	movcc	r3, #1
 800b956:	2300      	movcs	r3, #0
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	4413      	add	r3, r2
 800b960:	613b      	str	r3, [r7, #16]
 800b962:	69ba      	ldr	r2, [r7, #24]
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	4413      	add	r3, r2
 800b968:	61bb      	str	r3, [r7, #24]
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	429a      	cmp	r2, r3
 800b970:	bf34      	ite	cc
 800b972:	2301      	movcc	r3, #1
 800b974:	2300      	movcs	r3, #0
 800b976:	b2db      	uxtb	r3, r3
 800b978:	461a      	mov	r2, r3
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	4413      	add	r3, r2
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	69ba      	ldr	r2, [r7, #24]
 800b982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b984:	4413      	add	r3, r2
 800b986:	61bb      	str	r3, [r7, #24]
 800b988:	69ba      	ldr	r2, [r7, #24]
 800b98a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b98c:	429a      	cmp	r2, r3
 800b98e:	bf34      	ite	cc
 800b990:	2301      	movcc	r3, #1
 800b992:	2300      	movcs	r3, #0
 800b994:	b2db      	uxtb	r3, r3
 800b996:	461a      	mov	r2, r3
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	4413      	add	r3, r2
 800b99c:	613b      	str	r3, [r7, #16]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	61bb      	str	r3, [r7, #24]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	bf34      	ite	cc
 800b9b2:	2301      	movcc	r3, #1
 800b9b4:	2300      	movcs	r3, #0
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	4413      	add	r3, r2
 800b9be:	613b      	str	r3, [r7, #16]
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	677b      	str	r3, [r7, #116]	@ 0x74
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	1d1a      	adds	r2, r3, #4
 800b9c8:	607a      	str	r2, [r7, #4]
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	0c1b      	lsrs	r3, r3, #16
 800b9dc:	623b      	str	r3, [r7, #32]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	60bb      	str	r3, [r7, #8]
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9e8:	fb02 f303 	mul.w	r3, r2, r3
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9f2:	fb02 f303 	mul.w	r3, r2, r3
 800b9f6:	61bb      	str	r3, [r7, #24]
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9fc:	fb02 f303 	mul.w	r3, r2, r3
 800ba00:	617b      	str	r3, [r7, #20]
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba06:	fb02 f303 	mul.w	r3, r2, r3
 800ba0a:	613b      	str	r3, [r7, #16]
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	0c1b      	lsrs	r3, r3, #16
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	4413      	add	r3, r2
 800ba14:	613b      	str	r3, [r7, #16]
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	0c1b      	lsrs	r3, r3, #16
 800ba1a:	693a      	ldr	r2, [r7, #16]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	613b      	str	r3, [r7, #16]
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	041b      	lsls	r3, r3, #16
 800ba24:	61fb      	str	r3, [r7, #28]
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	041b      	lsls	r3, r3, #16
 800ba2a:	617b      	str	r3, [r7, #20]
 800ba2c:	69ba      	ldr	r2, [r7, #24]
 800ba2e:	69fb      	ldr	r3, [r7, #28]
 800ba30:	4413      	add	r3, r2
 800ba32:	61bb      	str	r3, [r7, #24]
 800ba34:	69ba      	ldr	r2, [r7, #24]
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	bf34      	ite	cc
 800ba3c:	2301      	movcc	r3, #1
 800ba3e:	2300      	movcs	r3, #0
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	461a      	mov	r2, r3
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	4413      	add	r3, r2
 800ba48:	613b      	str	r3, [r7, #16]
 800ba4a:	69ba      	ldr	r2, [r7, #24]
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	4413      	add	r3, r2
 800ba50:	61bb      	str	r3, [r7, #24]
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	bf34      	ite	cc
 800ba5a:	2301      	movcc	r3, #1
 800ba5c:	2300      	movcs	r3, #0
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	461a      	mov	r2, r3
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	4413      	add	r3, r2
 800ba66:	613b      	str	r3, [r7, #16]
 800ba68:	69ba      	ldr	r2, [r7, #24]
 800ba6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba6c:	4413      	add	r3, r2
 800ba6e:	61bb      	str	r3, [r7, #24]
 800ba70:	69ba      	ldr	r2, [r7, #24]
 800ba72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba74:	429a      	cmp	r2, r3
 800ba76:	bf34      	ite	cc
 800ba78:	2301      	movcc	r3, #1
 800ba7a:	2300      	movcs	r3, #0
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	461a      	mov	r2, r3
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	4413      	add	r3, r2
 800ba84:	613b      	str	r3, [r7, #16]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	69ba      	ldr	r2, [r7, #24]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	61bb      	str	r3, [r7, #24]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	69ba      	ldr	r2, [r7, #24]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	bf34      	ite	cc
 800ba9a:	2301      	movcc	r3, #1
 800ba9c:	2300      	movcs	r3, #0
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	461a      	mov	r2, r3
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	4413      	add	r3, r2
 800baa6:	613b      	str	r3, [r7, #16]
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	677b      	str	r3, [r7, #116]	@ 0x74
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	1d1a      	adds	r2, r3, #4
 800bab0:	607a      	str	r2, [r7, #4]
 800bab2:	69ba      	ldr	r2, [r7, #24]
 800bab4:	601a      	str	r2, [r3, #0]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	b29b      	uxth	r3, r3
 800babc:	627b      	str	r3, [r7, #36]	@ 0x24
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	0c1b      	lsrs	r3, r3, #16
 800bac4:	623b      	str	r3, [r7, #32]
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	3304      	adds	r3, #4
 800baca:	60bb      	str	r3, [r7, #8]
 800bacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bad0:	fb02 f303 	mul.w	r3, r2, r3
 800bad4:	61fb      	str	r3, [r7, #28]
 800bad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bada:	fb02 f303 	mul.w	r3, r2, r3
 800bade:	61bb      	str	r3, [r7, #24]
 800bae0:	6a3b      	ldr	r3, [r7, #32]
 800bae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bae4:	fb02 f303 	mul.w	r3, r2, r3
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800baee:	fb02 f303 	mul.w	r3, r2, r3
 800baf2:	613b      	str	r3, [r7, #16]
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	0c1b      	lsrs	r3, r3, #16
 800baf8:	693a      	ldr	r2, [r7, #16]
 800bafa:	4413      	add	r3, r2
 800bafc:	613b      	str	r3, [r7, #16]
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	0c1b      	lsrs	r3, r3, #16
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	4413      	add	r3, r2
 800bb06:	613b      	str	r3, [r7, #16]
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	041b      	lsls	r3, r3, #16
 800bb0c:	61fb      	str	r3, [r7, #28]
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	041b      	lsls	r3, r3, #16
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	69ba      	ldr	r2, [r7, #24]
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	4413      	add	r3, r2
 800bb1a:	61bb      	str	r3, [r7, #24]
 800bb1c:	69ba      	ldr	r2, [r7, #24]
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	bf34      	ite	cc
 800bb24:	2301      	movcc	r3, #1
 800bb26:	2300      	movcs	r3, #0
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	4413      	add	r3, r2
 800bb30:	613b      	str	r3, [r7, #16]
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	4413      	add	r3, r2
 800bb38:	61bb      	str	r3, [r7, #24]
 800bb3a:	69ba      	ldr	r2, [r7, #24]
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	bf34      	ite	cc
 800bb42:	2301      	movcc	r3, #1
 800bb44:	2300      	movcs	r3, #0
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	461a      	mov	r2, r3
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	613b      	str	r3, [r7, #16]
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb54:	4413      	add	r3, r2
 800bb56:	61bb      	str	r3, [r7, #24]
 800bb58:	69ba      	ldr	r2, [r7, #24]
 800bb5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	bf34      	ite	cc
 800bb60:	2301      	movcc	r3, #1
 800bb62:	2300      	movcs	r3, #0
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	461a      	mov	r2, r3
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	613b      	str	r3, [r7, #16]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69ba      	ldr	r2, [r7, #24]
 800bb74:	4413      	add	r3, r2
 800bb76:	61bb      	str	r3, [r7, #24]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	69ba      	ldr	r2, [r7, #24]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	bf34      	ite	cc
 800bb82:	2301      	movcc	r3, #1
 800bb84:	2300      	movcs	r3, #0
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	461a      	mov	r2, r3
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	1d1a      	adds	r2, r3, #4
 800bb98:	607a      	str	r2, [r7, #4]
 800bb9a:	69ba      	ldr	r2, [r7, #24]
 800bb9c:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	0c1b      	lsrs	r3, r3, #16
 800bbac:	623b      	str	r3, [r7, #32]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	60bb      	str	r3, [r7, #8]
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbb8:	fb02 f303 	mul.w	r3, r2, r3
 800bbbc:	61fb      	str	r3, [r7, #28]
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbc2:	fb02 f303 	mul.w	r3, r2, r3
 800bbc6:	61bb      	str	r3, [r7, #24]
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbcc:	fb02 f303 	mul.w	r3, r2, r3
 800bbd0:	617b      	str	r3, [r7, #20]
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbd6:	fb02 f303 	mul.w	r3, r2, r3
 800bbda:	613b      	str	r3, [r7, #16]
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	0c1b      	lsrs	r3, r3, #16
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	613b      	str	r3, [r7, #16]
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	0c1b      	lsrs	r3, r3, #16
 800bbea:	693a      	ldr	r2, [r7, #16]
 800bbec:	4413      	add	r3, r2
 800bbee:	613b      	str	r3, [r7, #16]
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	041b      	lsls	r3, r3, #16
 800bbf4:	61fb      	str	r3, [r7, #28]
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	041b      	lsls	r3, r3, #16
 800bbfa:	617b      	str	r3, [r7, #20]
 800bbfc:	69ba      	ldr	r2, [r7, #24]
 800bbfe:	69fb      	ldr	r3, [r7, #28]
 800bc00:	4413      	add	r3, r2
 800bc02:	61bb      	str	r3, [r7, #24]
 800bc04:	69ba      	ldr	r2, [r7, #24]
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	bf34      	ite	cc
 800bc0c:	2301      	movcc	r3, #1
 800bc0e:	2300      	movcs	r3, #0
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	461a      	mov	r2, r3
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	4413      	add	r3, r2
 800bc18:	613b      	str	r3, [r7, #16]
 800bc1a:	69ba      	ldr	r2, [r7, #24]
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	4413      	add	r3, r2
 800bc20:	61bb      	str	r3, [r7, #24]
 800bc22:	69ba      	ldr	r2, [r7, #24]
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	bf34      	ite	cc
 800bc2a:	2301      	movcc	r3, #1
 800bc2c:	2300      	movcs	r3, #0
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	461a      	mov	r2, r3
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	4413      	add	r3, r2
 800bc36:	613b      	str	r3, [r7, #16]
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc3c:	4413      	add	r3, r2
 800bc3e:	61bb      	str	r3, [r7, #24]
 800bc40:	69ba      	ldr	r2, [r7, #24]
 800bc42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc44:	429a      	cmp	r2, r3
 800bc46:	bf34      	ite	cc
 800bc48:	2301      	movcc	r3, #1
 800bc4a:	2300      	movcs	r3, #0
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	461a      	mov	r2, r3
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	4413      	add	r3, r2
 800bc54:	613b      	str	r3, [r7, #16]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	69ba      	ldr	r2, [r7, #24]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	61bb      	str	r3, [r7, #24]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	69ba      	ldr	r2, [r7, #24]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	bf34      	ite	cc
 800bc6a:	2301      	movcc	r3, #1
 800bc6c:	2300      	movcs	r3, #0
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	461a      	mov	r2, r3
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	4413      	add	r3, r2
 800bc76:	613b      	str	r3, [r7, #16]
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	677b      	str	r3, [r7, #116]	@ 0x74
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	1d1a      	adds	r2, r3, #4
 800bc80:	607a      	str	r2, [r7, #4]
 800bc82:	69ba      	ldr	r2, [r7, #24]
 800bc84:	601a      	str	r2, [r3, #0]
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	0c1b      	lsrs	r3, r3, #16
 800bc94:	623b      	str	r3, [r7, #32]
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	3304      	adds	r3, #4
 800bc9a:	60bb      	str	r3, [r7, #8]
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bca0:	fb02 f303 	mul.w	r3, r2, r3
 800bca4:	61fb      	str	r3, [r7, #28]
 800bca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcaa:	fb02 f303 	mul.w	r3, r2, r3
 800bcae:	61bb      	str	r3, [r7, #24]
 800bcb0:	6a3b      	ldr	r3, [r7, #32]
 800bcb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcb4:	fb02 f303 	mul.w	r3, r2, r3
 800bcb8:	617b      	str	r3, [r7, #20]
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcbe:	fb02 f303 	mul.w	r3, r2, r3
 800bcc2:	613b      	str	r3, [r7, #16]
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	0c1b      	lsrs	r3, r3, #16
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	4413      	add	r3, r2
 800bccc:	613b      	str	r3, [r7, #16]
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	0c1b      	lsrs	r3, r3, #16
 800bcd2:	693a      	ldr	r2, [r7, #16]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	613b      	str	r3, [r7, #16]
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	041b      	lsls	r3, r3, #16
 800bcdc:	61fb      	str	r3, [r7, #28]
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	041b      	lsls	r3, r3, #16
 800bce2:	617b      	str	r3, [r7, #20]
 800bce4:	69ba      	ldr	r2, [r7, #24]
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	4413      	add	r3, r2
 800bcea:	61bb      	str	r3, [r7, #24]
 800bcec:	69ba      	ldr	r2, [r7, #24]
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	bf34      	ite	cc
 800bcf4:	2301      	movcc	r3, #1
 800bcf6:	2300      	movcs	r3, #0
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	4413      	add	r3, r2
 800bd00:	613b      	str	r3, [r7, #16]
 800bd02:	69ba      	ldr	r2, [r7, #24]
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	4413      	add	r3, r2
 800bd08:	61bb      	str	r3, [r7, #24]
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	bf34      	ite	cc
 800bd12:	2301      	movcc	r3, #1
 800bd14:	2300      	movcs	r3, #0
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	461a      	mov	r2, r3
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	613b      	str	r3, [r7, #16]
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd24:	4413      	add	r3, r2
 800bd26:	61bb      	str	r3, [r7, #24]
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	bf34      	ite	cc
 800bd30:	2301      	movcc	r3, #1
 800bd32:	2300      	movcs	r3, #0
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	461a      	mov	r2, r3
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	613b      	str	r3, [r7, #16]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	69ba      	ldr	r2, [r7, #24]
 800bd44:	4413      	add	r3, r2
 800bd46:	61bb      	str	r3, [r7, #24]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	bf34      	ite	cc
 800bd52:	2301      	movcc	r3, #1
 800bd54:	2300      	movcs	r3, #0
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	461a      	mov	r2, r3
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	613b      	str	r3, [r7, #16]
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	1d1a      	adds	r2, r3, #4
 800bd68:	607a      	str	r2, [r7, #4]
 800bd6a:	69ba      	ldr	r2, [r7, #24]
 800bd6c:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	0c1b      	lsrs	r3, r3, #16
 800bd7c:	623b      	str	r3, [r7, #32]
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	3304      	adds	r3, #4
 800bd82:	60bb      	str	r3, [r7, #8]
 800bd84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd88:	fb02 f303 	mul.w	r3, r2, r3
 800bd8c:	61fb      	str	r3, [r7, #28]
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd92:	fb02 f303 	mul.w	r3, r2, r3
 800bd96:	61bb      	str	r3, [r7, #24]
 800bd98:	6a3b      	ldr	r3, [r7, #32]
 800bd9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd9c:	fb02 f303 	mul.w	r3, r2, r3
 800bda0:	617b      	str	r3, [r7, #20]
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bda6:	fb02 f303 	mul.w	r3, r2, r3
 800bdaa:	613b      	str	r3, [r7, #16]
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	0c1b      	lsrs	r3, r3, #16
 800bdb0:	693a      	ldr	r2, [r7, #16]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	613b      	str	r3, [r7, #16]
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	0c1b      	lsrs	r3, r3, #16
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	041b      	lsls	r3, r3, #16
 800bdc4:	61fb      	str	r3, [r7, #28]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	041b      	lsls	r3, r3, #16
 800bdca:	617b      	str	r3, [r7, #20]
 800bdcc:	69ba      	ldr	r2, [r7, #24]
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	61bb      	str	r3, [r7, #24]
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	bf34      	ite	cc
 800bddc:	2301      	movcc	r3, #1
 800bdde:	2300      	movcs	r3, #0
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	461a      	mov	r2, r3
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	4413      	add	r3, r2
 800bde8:	613b      	str	r3, [r7, #16]
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	4413      	add	r3, r2
 800bdf0:	61bb      	str	r3, [r7, #24]
 800bdf2:	69ba      	ldr	r2, [r7, #24]
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	bf34      	ite	cc
 800bdfa:	2301      	movcc	r3, #1
 800bdfc:	2300      	movcs	r3, #0
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	461a      	mov	r2, r3
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	4413      	add	r3, r2
 800be06:	613b      	str	r3, [r7, #16]
 800be08:	69ba      	ldr	r2, [r7, #24]
 800be0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be0c:	4413      	add	r3, r2
 800be0e:	61bb      	str	r3, [r7, #24]
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be14:	429a      	cmp	r2, r3
 800be16:	bf34      	ite	cc
 800be18:	2301      	movcc	r3, #1
 800be1a:	2300      	movcs	r3, #0
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	461a      	mov	r2, r3
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	4413      	add	r3, r2
 800be24:	613b      	str	r3, [r7, #16]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	69ba      	ldr	r2, [r7, #24]
 800be2c:	4413      	add	r3, r2
 800be2e:	61bb      	str	r3, [r7, #24]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	69ba      	ldr	r2, [r7, #24]
 800be36:	429a      	cmp	r2, r3
 800be38:	bf34      	ite	cc
 800be3a:	2301      	movcc	r3, #1
 800be3c:	2300      	movcs	r3, #0
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	461a      	mov	r2, r3
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	4413      	add	r3, r2
 800be46:	613b      	str	r3, [r7, #16]
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	677b      	str	r3, [r7, #116]	@ 0x74
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	1d1a      	adds	r2, r3, #4
 800be50:	607a      	str	r2, [r7, #4]
 800be52:	69ba      	ldr	r2, [r7, #24]
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	0c1b      	lsrs	r3, r3, #16
 800be64:	623b      	str	r3, [r7, #32]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	3304      	adds	r3, #4
 800be6a:	60bb      	str	r3, [r7, #8]
 800be6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be70:	fb02 f303 	mul.w	r3, r2, r3
 800be74:	61fb      	str	r3, [r7, #28]
 800be76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be7a:	fb02 f303 	mul.w	r3, r2, r3
 800be7e:	61bb      	str	r3, [r7, #24]
 800be80:	6a3b      	ldr	r3, [r7, #32]
 800be82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be84:	fb02 f303 	mul.w	r3, r2, r3
 800be88:	617b      	str	r3, [r7, #20]
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be8e:	fb02 f303 	mul.w	r3, r2, r3
 800be92:	613b      	str	r3, [r7, #16]
 800be94:	69fb      	ldr	r3, [r7, #28]
 800be96:	0c1b      	lsrs	r3, r3, #16
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	4413      	add	r3, r2
 800be9c:	613b      	str	r3, [r7, #16]
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	0c1b      	lsrs	r3, r3, #16
 800bea2:	693a      	ldr	r2, [r7, #16]
 800bea4:	4413      	add	r3, r2
 800bea6:	613b      	str	r3, [r7, #16]
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	041b      	lsls	r3, r3, #16
 800beac:	61fb      	str	r3, [r7, #28]
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	041b      	lsls	r3, r3, #16
 800beb2:	617b      	str	r3, [r7, #20]
 800beb4:	69ba      	ldr	r2, [r7, #24]
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	4413      	add	r3, r2
 800beba:	61bb      	str	r3, [r7, #24]
 800bebc:	69ba      	ldr	r2, [r7, #24]
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	bf34      	ite	cc
 800bec4:	2301      	movcc	r3, #1
 800bec6:	2300      	movcs	r3, #0
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	461a      	mov	r2, r3
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	4413      	add	r3, r2
 800bed0:	613b      	str	r3, [r7, #16]
 800bed2:	69ba      	ldr	r2, [r7, #24]
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	4413      	add	r3, r2
 800bed8:	61bb      	str	r3, [r7, #24]
 800beda:	69ba      	ldr	r2, [r7, #24]
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	429a      	cmp	r2, r3
 800bee0:	bf34      	ite	cc
 800bee2:	2301      	movcc	r3, #1
 800bee4:	2300      	movcs	r3, #0
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	461a      	mov	r2, r3
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	4413      	add	r3, r2
 800beee:	613b      	str	r3, [r7, #16]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bef4:	4413      	add	r3, r2
 800bef6:	61bb      	str	r3, [r7, #24]
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800befc:	429a      	cmp	r2, r3
 800befe:	bf34      	ite	cc
 800bf00:	2301      	movcc	r3, #1
 800bf02:	2300      	movcs	r3, #0
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	461a      	mov	r2, r3
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	613b      	str	r3, [r7, #16]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	4413      	add	r3, r2
 800bf16:	61bb      	str	r3, [r7, #24]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	69ba      	ldr	r2, [r7, #24]
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	bf34      	ite	cc
 800bf22:	2301      	movcc	r3, #1
 800bf24:	2300      	movcs	r3, #0
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	461a      	mov	r2, r3
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	613b      	str	r3, [r7, #16]
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	677b      	str	r3, [r7, #116]	@ 0x74
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	1d1a      	adds	r2, r3, #4
 800bf38:	607a      	str	r2, [r7, #4]
 800bf3a:	69ba      	ldr	r2, [r7, #24]
 800bf3c:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	0c1b      	lsrs	r3, r3, #16
 800bf4c:	623b      	str	r3, [r7, #32]
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	3304      	adds	r3, #4
 800bf52:	60bb      	str	r3, [r7, #8]
 800bf54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf58:	fb02 f303 	mul.w	r3, r2, r3
 800bf5c:	61fb      	str	r3, [r7, #28]
 800bf5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf62:	fb02 f303 	mul.w	r3, r2, r3
 800bf66:	61bb      	str	r3, [r7, #24]
 800bf68:	6a3b      	ldr	r3, [r7, #32]
 800bf6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf6c:	fb02 f303 	mul.w	r3, r2, r3
 800bf70:	617b      	str	r3, [r7, #20]
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf76:	fb02 f303 	mul.w	r3, r2, r3
 800bf7a:	613b      	str	r3, [r7, #16]
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	0c1b      	lsrs	r3, r3, #16
 800bf80:	693a      	ldr	r2, [r7, #16]
 800bf82:	4413      	add	r3, r2
 800bf84:	613b      	str	r3, [r7, #16]
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	0c1b      	lsrs	r3, r3, #16
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	613b      	str	r3, [r7, #16]
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	041b      	lsls	r3, r3, #16
 800bf94:	61fb      	str	r3, [r7, #28]
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	041b      	lsls	r3, r3, #16
 800bf9a:	617b      	str	r3, [r7, #20]
 800bf9c:	69ba      	ldr	r2, [r7, #24]
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	61bb      	str	r3, [r7, #24]
 800bfa4:	69ba      	ldr	r2, [r7, #24]
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	bf34      	ite	cc
 800bfac:	2301      	movcc	r3, #1
 800bfae:	2300      	movcs	r3, #0
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	613b      	str	r3, [r7, #16]
 800bfba:	69ba      	ldr	r2, [r7, #24]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	61bb      	str	r3, [r7, #24]
 800bfc2:	69ba      	ldr	r2, [r7, #24]
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	bf34      	ite	cc
 800bfca:	2301      	movcc	r3, #1
 800bfcc:	2300      	movcs	r3, #0
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	613b      	str	r3, [r7, #16]
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfdc:	4413      	add	r3, r2
 800bfde:	61bb      	str	r3, [r7, #24]
 800bfe0:	69ba      	ldr	r2, [r7, #24]
 800bfe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	bf34      	ite	cc
 800bfe8:	2301      	movcc	r3, #1
 800bfea:	2300      	movcs	r3, #0
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	461a      	mov	r2, r3
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	4413      	add	r3, r2
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	69ba      	ldr	r2, [r7, #24]
 800bffc:	4413      	add	r3, r2
 800bffe:	61bb      	str	r3, [r7, #24]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	69ba      	ldr	r2, [r7, #24]
 800c006:	429a      	cmp	r2, r3
 800c008:	bf34      	ite	cc
 800c00a:	2301      	movcc	r3, #1
 800c00c:	2300      	movcs	r3, #0
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	461a      	mov	r2, r3
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	4413      	add	r3, r2
 800c016:	613b      	str	r3, [r7, #16]
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	1d1a      	adds	r2, r3, #4
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	69ba      	ldr	r2, [r7, #24]
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	0c1b      	lsrs	r3, r3, #16
 800c034:	623b      	str	r3, [r7, #32]
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	3304      	adds	r3, #4
 800c03a:	60bb      	str	r3, [r7, #8]
 800c03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c040:	fb02 f303 	mul.w	r3, r2, r3
 800c044:	61fb      	str	r3, [r7, #28]
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c04a:	fb02 f303 	mul.w	r3, r2, r3
 800c04e:	61bb      	str	r3, [r7, #24]
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c054:	fb02 f303 	mul.w	r3, r2, r3
 800c058:	617b      	str	r3, [r7, #20]
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c05e:	fb02 f303 	mul.w	r3, r2, r3
 800c062:	613b      	str	r3, [r7, #16]
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	0c1b      	lsrs	r3, r3, #16
 800c068:	693a      	ldr	r2, [r7, #16]
 800c06a:	4413      	add	r3, r2
 800c06c:	613b      	str	r3, [r7, #16]
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	0c1b      	lsrs	r3, r3, #16
 800c072:	693a      	ldr	r2, [r7, #16]
 800c074:	4413      	add	r3, r2
 800c076:	613b      	str	r3, [r7, #16]
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	041b      	lsls	r3, r3, #16
 800c07c:	61fb      	str	r3, [r7, #28]
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	041b      	lsls	r3, r3, #16
 800c082:	617b      	str	r3, [r7, #20]
 800c084:	69ba      	ldr	r2, [r7, #24]
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	4413      	add	r3, r2
 800c08a:	61bb      	str	r3, [r7, #24]
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	429a      	cmp	r2, r3
 800c092:	bf34      	ite	cc
 800c094:	2301      	movcc	r3, #1
 800c096:	2300      	movcs	r3, #0
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	461a      	mov	r2, r3
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	4413      	add	r3, r2
 800c0a0:	613b      	str	r3, [r7, #16]
 800c0a2:	69ba      	ldr	r2, [r7, #24]
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	61bb      	str	r3, [r7, #24]
 800c0aa:	69ba      	ldr	r2, [r7, #24]
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	bf34      	ite	cc
 800c0b2:	2301      	movcc	r3, #1
 800c0b4:	2300      	movcs	r3, #0
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	4413      	add	r3, r2
 800c0be:	613b      	str	r3, [r7, #16]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0c4:	4413      	add	r3, r2
 800c0c6:	61bb      	str	r3, [r7, #24]
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	bf34      	ite	cc
 800c0d0:	2301      	movcc	r3, #1
 800c0d2:	2300      	movcs	r3, #0
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	4413      	add	r3, r2
 800c0dc:	613b      	str	r3, [r7, #16]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	69ba      	ldr	r2, [r7, #24]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	61bb      	str	r3, [r7, #24]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	69ba      	ldr	r2, [r7, #24]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	bf34      	ite	cc
 800c0f2:	2301      	movcc	r3, #1
 800c0f4:	2300      	movcs	r3, #0
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	613b      	str	r3, [r7, #16]
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	677b      	str	r3, [r7, #116]	@ 0x74
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	1d1a      	adds	r2, r3, #4
 800c108:	607a      	str	r2, [r7, #4]
 800c10a:	69ba      	ldr	r2, [r7, #24]
 800c10c:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	b29b      	uxth	r3, r3
 800c114:	627b      	str	r3, [r7, #36]	@ 0x24
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	0c1b      	lsrs	r3, r3, #16
 800c11c:	623b      	str	r3, [r7, #32]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	3304      	adds	r3, #4
 800c122:	60bb      	str	r3, [r7, #8]
 800c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c128:	fb02 f303 	mul.w	r3, r2, r3
 800c12c:	61fb      	str	r3, [r7, #28]
 800c12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c130:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c132:	fb02 f303 	mul.w	r3, r2, r3
 800c136:	61bb      	str	r3, [r7, #24]
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c13c:	fb02 f303 	mul.w	r3, r2, r3
 800c140:	617b      	str	r3, [r7, #20]
 800c142:	6a3b      	ldr	r3, [r7, #32]
 800c144:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c146:	fb02 f303 	mul.w	r3, r2, r3
 800c14a:	613b      	str	r3, [r7, #16]
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	0c1b      	lsrs	r3, r3, #16
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	4413      	add	r3, r2
 800c154:	613b      	str	r3, [r7, #16]
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	0c1b      	lsrs	r3, r3, #16
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	4413      	add	r3, r2
 800c15e:	613b      	str	r3, [r7, #16]
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	041b      	lsls	r3, r3, #16
 800c164:	61fb      	str	r3, [r7, #28]
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	041b      	lsls	r3, r3, #16
 800c16a:	617b      	str	r3, [r7, #20]
 800c16c:	69ba      	ldr	r2, [r7, #24]
 800c16e:	69fb      	ldr	r3, [r7, #28]
 800c170:	4413      	add	r3, r2
 800c172:	61bb      	str	r3, [r7, #24]
 800c174:	69ba      	ldr	r2, [r7, #24]
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	429a      	cmp	r2, r3
 800c17a:	bf34      	ite	cc
 800c17c:	2301      	movcc	r3, #1
 800c17e:	2300      	movcs	r3, #0
 800c180:	b2db      	uxtb	r3, r3
 800c182:	461a      	mov	r2, r3
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	4413      	add	r3, r2
 800c188:	613b      	str	r3, [r7, #16]
 800c18a:	69ba      	ldr	r2, [r7, #24]
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	4413      	add	r3, r2
 800c190:	61bb      	str	r3, [r7, #24]
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	429a      	cmp	r2, r3
 800c198:	bf34      	ite	cc
 800c19a:	2301      	movcc	r3, #1
 800c19c:	2300      	movcs	r3, #0
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	613b      	str	r3, [r7, #16]
 800c1a8:	69ba      	ldr	r2, [r7, #24]
 800c1aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1ac:	4413      	add	r3, r2
 800c1ae:	61bb      	str	r3, [r7, #24]
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	bf34      	ite	cc
 800c1b8:	2301      	movcc	r3, #1
 800c1ba:	2300      	movcs	r3, #0
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	461a      	mov	r2, r3
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	613b      	str	r3, [r7, #16]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	69ba      	ldr	r2, [r7, #24]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	61bb      	str	r3, [r7, #24]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	69ba      	ldr	r2, [r7, #24]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	bf34      	ite	cc
 800c1da:	2301      	movcc	r3, #1
 800c1dc:	2300      	movcs	r3, #0
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	461a      	mov	r2, r3
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	613b      	str	r3, [r7, #16]
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	1d1a      	adds	r2, r3, #4
 800c1f0:	607a      	str	r2, [r7, #4]
 800c1f2:	69ba      	ldr	r2, [r7, #24]
 800c1f4:	601a      	str	r2, [r3, #0]
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	0c1b      	lsrs	r3, r3, #16
 800c204:	623b      	str	r3, [r7, #32]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	3304      	adds	r3, #4
 800c20a:	60bb      	str	r3, [r7, #8]
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c210:	fb02 f303 	mul.w	r3, r2, r3
 800c214:	61fb      	str	r3, [r7, #28]
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c21a:	fb02 f303 	mul.w	r3, r2, r3
 800c21e:	61bb      	str	r3, [r7, #24]
 800c220:	6a3b      	ldr	r3, [r7, #32]
 800c222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c224:	fb02 f303 	mul.w	r3, r2, r3
 800c228:	617b      	str	r3, [r7, #20]
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c22e:	fb02 f303 	mul.w	r3, r2, r3
 800c232:	613b      	str	r3, [r7, #16]
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	0c1b      	lsrs	r3, r3, #16
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	4413      	add	r3, r2
 800c23c:	613b      	str	r3, [r7, #16]
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	0c1b      	lsrs	r3, r3, #16
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	4413      	add	r3, r2
 800c246:	613b      	str	r3, [r7, #16]
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	041b      	lsls	r3, r3, #16
 800c24c:	61fb      	str	r3, [r7, #28]
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	041b      	lsls	r3, r3, #16
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	69ba      	ldr	r2, [r7, #24]
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	4413      	add	r3, r2
 800c25a:	61bb      	str	r3, [r7, #24]
 800c25c:	69ba      	ldr	r2, [r7, #24]
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	429a      	cmp	r2, r3
 800c262:	bf34      	ite	cc
 800c264:	2301      	movcc	r3, #1
 800c266:	2300      	movcs	r3, #0
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	461a      	mov	r2, r3
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	4413      	add	r3, r2
 800c270:	613b      	str	r3, [r7, #16]
 800c272:	69ba      	ldr	r2, [r7, #24]
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	4413      	add	r3, r2
 800c278:	61bb      	str	r3, [r7, #24]
 800c27a:	69ba      	ldr	r2, [r7, #24]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	429a      	cmp	r2, r3
 800c280:	bf34      	ite	cc
 800c282:	2301      	movcc	r3, #1
 800c284:	2300      	movcs	r3, #0
 800c286:	b2db      	uxtb	r3, r3
 800c288:	461a      	mov	r2, r3
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	4413      	add	r3, r2
 800c28e:	613b      	str	r3, [r7, #16]
 800c290:	69ba      	ldr	r2, [r7, #24]
 800c292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c294:	4413      	add	r3, r2
 800c296:	61bb      	str	r3, [r7, #24]
 800c298:	69ba      	ldr	r2, [r7, #24]
 800c29a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c29c:	429a      	cmp	r2, r3
 800c29e:	bf34      	ite	cc
 800c2a0:	2301      	movcc	r3, #1
 800c2a2:	2300      	movcs	r3, #0
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	613b      	str	r3, [r7, #16]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	69ba      	ldr	r2, [r7, #24]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	61bb      	str	r3, [r7, #24]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	69ba      	ldr	r2, [r7, #24]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	bf34      	ite	cc
 800c2c2:	2301      	movcc	r3, #1
 800c2c4:	2300      	movcs	r3, #0
 800c2c6:	b2db      	uxtb	r3, r3
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	613b      	str	r3, [r7, #16]
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	677b      	str	r3, [r7, #116]	@ 0x74
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	1d1a      	adds	r2, r3, #4
 800c2d8:	607a      	str	r2, [r7, #4]
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	0c1b      	lsrs	r3, r3, #16
 800c2ec:	623b      	str	r3, [r7, #32]
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	3304      	adds	r3, #4
 800c2f2:	60bb      	str	r3, [r7, #8]
 800c2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2f8:	fb02 f303 	mul.w	r3, r2, r3
 800c2fc:	61fb      	str	r3, [r7, #28]
 800c2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c302:	fb02 f303 	mul.w	r3, r2, r3
 800c306:	61bb      	str	r3, [r7, #24]
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c30c:	fb02 f303 	mul.w	r3, r2, r3
 800c310:	617b      	str	r3, [r7, #20]
 800c312:	6a3b      	ldr	r3, [r7, #32]
 800c314:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c316:	fb02 f303 	mul.w	r3, r2, r3
 800c31a:	613b      	str	r3, [r7, #16]
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	0c1b      	lsrs	r3, r3, #16
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	4413      	add	r3, r2
 800c324:	613b      	str	r3, [r7, #16]
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	0c1b      	lsrs	r3, r3, #16
 800c32a:	693a      	ldr	r2, [r7, #16]
 800c32c:	4413      	add	r3, r2
 800c32e:	613b      	str	r3, [r7, #16]
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	041b      	lsls	r3, r3, #16
 800c334:	61fb      	str	r3, [r7, #28]
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	041b      	lsls	r3, r3, #16
 800c33a:	617b      	str	r3, [r7, #20]
 800c33c:	69ba      	ldr	r2, [r7, #24]
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	4413      	add	r3, r2
 800c342:	61bb      	str	r3, [r7, #24]
 800c344:	69ba      	ldr	r2, [r7, #24]
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	429a      	cmp	r2, r3
 800c34a:	bf34      	ite	cc
 800c34c:	2301      	movcc	r3, #1
 800c34e:	2300      	movcs	r3, #0
 800c350:	b2db      	uxtb	r3, r3
 800c352:	461a      	mov	r2, r3
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	4413      	add	r3, r2
 800c358:	613b      	str	r3, [r7, #16]
 800c35a:	69ba      	ldr	r2, [r7, #24]
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	4413      	add	r3, r2
 800c360:	61bb      	str	r3, [r7, #24]
 800c362:	69ba      	ldr	r2, [r7, #24]
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	429a      	cmp	r2, r3
 800c368:	bf34      	ite	cc
 800c36a:	2301      	movcc	r3, #1
 800c36c:	2300      	movcs	r3, #0
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	461a      	mov	r2, r3
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	4413      	add	r3, r2
 800c376:	613b      	str	r3, [r7, #16]
 800c378:	69ba      	ldr	r2, [r7, #24]
 800c37a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c37c:	4413      	add	r3, r2
 800c37e:	61bb      	str	r3, [r7, #24]
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c384:	429a      	cmp	r2, r3
 800c386:	bf34      	ite	cc
 800c388:	2301      	movcc	r3, #1
 800c38a:	2300      	movcs	r3, #0
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	461a      	mov	r2, r3
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	4413      	add	r3, r2
 800c394:	613b      	str	r3, [r7, #16]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	69ba      	ldr	r2, [r7, #24]
 800c39c:	4413      	add	r3, r2
 800c39e:	61bb      	str	r3, [r7, #24]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	69ba      	ldr	r2, [r7, #24]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	bf34      	ite	cc
 800c3aa:	2301      	movcc	r3, #1
 800c3ac:	2300      	movcs	r3, #0
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	677b      	str	r3, [r7, #116]	@ 0x74
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	1d1a      	adds	r2, r3, #4
 800c3c0:	607a      	str	r2, [r7, #4]
 800c3c2:	69ba      	ldr	r2, [r7, #24]
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	0c1b      	lsrs	r3, r3, #16
 800c3d4:	623b      	str	r3, [r7, #32]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	60bb      	str	r3, [r7, #8]
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3e0:	fb02 f303 	mul.w	r3, r2, r3
 800c3e4:	61fb      	str	r3, [r7, #28]
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3ea:	fb02 f303 	mul.w	r3, r2, r3
 800c3ee:	61bb      	str	r3, [r7, #24]
 800c3f0:	6a3b      	ldr	r3, [r7, #32]
 800c3f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3f4:	fb02 f303 	mul.w	r3, r2, r3
 800c3f8:	617b      	str	r3, [r7, #20]
 800c3fa:	6a3b      	ldr	r3, [r7, #32]
 800c3fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3fe:	fb02 f303 	mul.w	r3, r2, r3
 800c402:	613b      	str	r3, [r7, #16]
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	0c1b      	lsrs	r3, r3, #16
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	4413      	add	r3, r2
 800c40c:	613b      	str	r3, [r7, #16]
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	0c1b      	lsrs	r3, r3, #16
 800c412:	693a      	ldr	r2, [r7, #16]
 800c414:	4413      	add	r3, r2
 800c416:	613b      	str	r3, [r7, #16]
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	041b      	lsls	r3, r3, #16
 800c41c:	61fb      	str	r3, [r7, #28]
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	041b      	lsls	r3, r3, #16
 800c422:	617b      	str	r3, [r7, #20]
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	4413      	add	r3, r2
 800c42a:	61bb      	str	r3, [r7, #24]
 800c42c:	69ba      	ldr	r2, [r7, #24]
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	429a      	cmp	r2, r3
 800c432:	bf34      	ite	cc
 800c434:	2301      	movcc	r3, #1
 800c436:	2300      	movcs	r3, #0
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	461a      	mov	r2, r3
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	4413      	add	r3, r2
 800c440:	613b      	str	r3, [r7, #16]
 800c442:	69ba      	ldr	r2, [r7, #24]
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	4413      	add	r3, r2
 800c448:	61bb      	str	r3, [r7, #24]
 800c44a:	69ba      	ldr	r2, [r7, #24]
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	429a      	cmp	r2, r3
 800c450:	bf34      	ite	cc
 800c452:	2301      	movcc	r3, #1
 800c454:	2300      	movcs	r3, #0
 800c456:	b2db      	uxtb	r3, r3
 800c458:	461a      	mov	r2, r3
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	4413      	add	r3, r2
 800c45e:	613b      	str	r3, [r7, #16]
 800c460:	69ba      	ldr	r2, [r7, #24]
 800c462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c464:	4413      	add	r3, r2
 800c466:	61bb      	str	r3, [r7, #24]
 800c468:	69ba      	ldr	r2, [r7, #24]
 800c46a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c46c:	429a      	cmp	r2, r3
 800c46e:	bf34      	ite	cc
 800c470:	2301      	movcc	r3, #1
 800c472:	2300      	movcs	r3, #0
 800c474:	b2db      	uxtb	r3, r3
 800c476:	461a      	mov	r2, r3
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	4413      	add	r3, r2
 800c47c:	613b      	str	r3, [r7, #16]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	69ba      	ldr	r2, [r7, #24]
 800c484:	4413      	add	r3, r2
 800c486:	61bb      	str	r3, [r7, #24]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	69ba      	ldr	r2, [r7, #24]
 800c48e:	429a      	cmp	r2, r3
 800c490:	bf34      	ite	cc
 800c492:	2301      	movcc	r3, #1
 800c494:	2300      	movcs	r3, #0
 800c496:	b2db      	uxtb	r3, r3
 800c498:	461a      	mov	r2, r3
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	4413      	add	r3, r2
 800c49e:	613b      	str	r3, [r7, #16]
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	1d1a      	adds	r2, r3, #4
 800c4a8:	607a      	str	r2, [r7, #4]
 800c4aa:	69ba      	ldr	r2, [r7, #24]
 800c4ac:	601a      	str	r2, [r3, #0]
    for( ; i >= 16; i -= 16 )
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	3b10      	subs	r3, #16
 800c4b2:	60fb      	str	r3, [r7, #12]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b0f      	cmp	r3, #15
 800c4b8:	f63f a8b3 	bhi.w	800b622 <mpi_mul_hlp+0x1a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800c4bc:	e3a8      	b.n	800cc10 <mpi_mul_hlp+0x1608>
    {
        MULADDC_INIT
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	0c1b      	lsrs	r3, r3, #16
 800c4c8:	64bb      	str	r3, [r7, #72]	@ 0x48
        MULADDC_CORE   MULADDC_CORE
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	0c1b      	lsrs	r3, r3, #16
 800c4d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	3304      	adds	r3, #4
 800c4de:	60bb      	str	r3, [r7, #8]
 800c4e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4e4:	fb02 f303 	mul.w	r3, r2, r3
 800c4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c4ee:	fb02 f303 	mul.w	r3, r2, r3
 800c4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c4f8:	fb02 f303 	mul.w	r3, r2, r3
 800c4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c502:	fb02 f303 	mul.w	r3, r2, r3
 800c506:	633b      	str	r3, [r7, #48]	@ 0x30
 800c508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c50a:	0c1b      	lsrs	r3, r3, #16
 800c50c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c50e:	4413      	add	r3, r2
 800c510:	633b      	str	r3, [r7, #48]	@ 0x30
 800c512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c514:	0c1b      	lsrs	r3, r3, #16
 800c516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c518:	4413      	add	r3, r2
 800c51a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c51e:	041b      	lsls	r3, r3, #16
 800c520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c524:	041b      	lsls	r3, r3, #16
 800c526:	637b      	str	r3, [r7, #52]	@ 0x34
 800c528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c52a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c52c:	4413      	add	r3, r2
 800c52e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c534:	429a      	cmp	r2, r3
 800c536:	bf34      	ite	cc
 800c538:	2301      	movcc	r3, #1
 800c53a:	2300      	movcs	r3, #0
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	461a      	mov	r2, r3
 800c540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c542:	4413      	add	r3, r2
 800c544:	633b      	str	r3, [r7, #48]	@ 0x30
 800c546:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c54a:	4413      	add	r3, r2
 800c54c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c54e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c552:	429a      	cmp	r2, r3
 800c554:	bf34      	ite	cc
 800c556:	2301      	movcc	r3, #1
 800c558:	2300      	movcs	r3, #0
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	461a      	mov	r2, r3
 800c55e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c560:	4413      	add	r3, r2
 800c562:	633b      	str	r3, [r7, #48]	@ 0x30
 800c564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c566:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c568:	4413      	add	r3, r2
 800c56a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c56c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c56e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c570:	429a      	cmp	r2, r3
 800c572:	bf34      	ite	cc
 800c574:	2301      	movcc	r3, #1
 800c576:	2300      	movcs	r3, #0
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57e:	4413      	add	r3, r2
 800c580:	633b      	str	r3, [r7, #48]	@ 0x30
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c588:	4413      	add	r3, r2
 800c58a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c592:	429a      	cmp	r2, r3
 800c594:	bf34      	ite	cc
 800c596:	2301      	movcc	r3, #1
 800c598:	2300      	movcs	r3, #0
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	461a      	mov	r2, r3
 800c59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a0:	4413      	add	r3, r2
 800c5a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	1d1a      	adds	r2, r3, #4
 800c5ac:	607a      	str	r2, [r7, #4]
 800c5ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	0c1b      	lsrs	r3, r3, #16
 800c5c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	60bb      	str	r3, [r7, #8]
 800c5c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5cc:	fb02 f303 	mul.w	r3, r2, r3
 800c5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5d6:	fb02 f303 	mul.w	r3, r2, r3
 800c5da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5e0:	fb02 f303 	mul.w	r3, r2, r3
 800c5e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5ea:	fb02 f303 	mul.w	r3, r2, r3
 800c5ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5f2:	0c1b      	lsrs	r3, r3, #16
 800c5f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5f6:	4413      	add	r3, r2
 800c5f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5fc:	0c1b      	lsrs	r3, r3, #16
 800c5fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c600:	4413      	add	r3, r2
 800c602:	633b      	str	r3, [r7, #48]	@ 0x30
 800c604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c606:	041b      	lsls	r3, r3, #16
 800c608:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c60c:	041b      	lsls	r3, r3, #16
 800c60e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c610:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c614:	4413      	add	r3, r2
 800c616:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c61a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c61c:	429a      	cmp	r2, r3
 800c61e:	bf34      	ite	cc
 800c620:	2301      	movcc	r3, #1
 800c622:	2300      	movcs	r3, #0
 800c624:	b2db      	uxtb	r3, r3
 800c626:	461a      	mov	r2, r3
 800c628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62a:	4413      	add	r3, r2
 800c62c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c62e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c632:	4413      	add	r3, r2
 800c634:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c636:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c63a:	429a      	cmp	r2, r3
 800c63c:	bf34      	ite	cc
 800c63e:	2301      	movcc	r3, #1
 800c640:	2300      	movcs	r3, #0
 800c642:	b2db      	uxtb	r3, r3
 800c644:	461a      	mov	r2, r3
 800c646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c648:	4413      	add	r3, r2
 800c64a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c64c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c64e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c650:	4413      	add	r3, r2
 800c652:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c654:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c658:	429a      	cmp	r2, r3
 800c65a:	bf34      	ite	cc
 800c65c:	2301      	movcc	r3, #1
 800c65e:	2300      	movcs	r3, #0
 800c660:	b2db      	uxtb	r3, r3
 800c662:	461a      	mov	r2, r3
 800c664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c666:	4413      	add	r3, r2
 800c668:	633b      	str	r3, [r7, #48]	@ 0x30
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c670:	4413      	add	r3, r2
 800c672:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c67a:	429a      	cmp	r2, r3
 800c67c:	bf34      	ite	cc
 800c67e:	2301      	movcc	r3, #1
 800c680:	2300      	movcs	r3, #0
 800c682:	b2db      	uxtb	r3, r3
 800c684:	461a      	mov	r2, r3
 800c686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c688:	4413      	add	r3, r2
 800c68a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	1d1a      	adds	r2, r3, #4
 800c694:	607a      	str	r2, [r7, #4]
 800c696:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c698:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	0c1b      	lsrs	r3, r3, #16
 800c6a8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	3304      	adds	r3, #4
 800c6ae:	60bb      	str	r3, [r7, #8]
 800c6b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6b4:	fb02 f303 	mul.w	r3, r2, r3
 800c6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c6be:	fb02 f303 	mul.w	r3, r2, r3
 800c6c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c6c8:	fb02 f303 	mul.w	r3, r2, r3
 800c6cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6d2:	fb02 f303 	mul.w	r3, r2, r3
 800c6d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6da:	0c1b      	lsrs	r3, r3, #16
 800c6dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6de:	4413      	add	r3, r2
 800c6e0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e4:	0c1b      	lsrs	r3, r3, #16
 800c6e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6e8:	4413      	add	r3, r2
 800c6ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6ee:	041b      	lsls	r3, r3, #16
 800c6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f4:	041b      	lsls	r3, r3, #16
 800c6f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6fc:	4413      	add	r3, r2
 800c6fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c700:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c704:	429a      	cmp	r2, r3
 800c706:	bf34      	ite	cc
 800c708:	2301      	movcc	r3, #1
 800c70a:	2300      	movcs	r3, #0
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	461a      	mov	r2, r3
 800c710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c712:	4413      	add	r3, r2
 800c714:	633b      	str	r3, [r7, #48]	@ 0x30
 800c716:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c71a:	4413      	add	r3, r2
 800c71c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c71e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c722:	429a      	cmp	r2, r3
 800c724:	bf34      	ite	cc
 800c726:	2301      	movcc	r3, #1
 800c728:	2300      	movcs	r3, #0
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	461a      	mov	r2, r3
 800c72e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c730:	4413      	add	r3, r2
 800c732:	633b      	str	r3, [r7, #48]	@ 0x30
 800c734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c736:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c738:	4413      	add	r3, r2
 800c73a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c73c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c73e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c740:	429a      	cmp	r2, r3
 800c742:	bf34      	ite	cc
 800c744:	2301      	movcc	r3, #1
 800c746:	2300      	movcs	r3, #0
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	461a      	mov	r2, r3
 800c74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c74e:	4413      	add	r3, r2
 800c750:	633b      	str	r3, [r7, #48]	@ 0x30
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c758:	4413      	add	r3, r2
 800c75a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c762:	429a      	cmp	r2, r3
 800c764:	bf34      	ite	cc
 800c766:	2301      	movcc	r3, #1
 800c768:	2300      	movcs	r3, #0
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	461a      	mov	r2, r3
 800c76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c770:	4413      	add	r3, r2
 800c772:	633b      	str	r3, [r7, #48]	@ 0x30
 800c774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c776:	677b      	str	r3, [r7, #116]	@ 0x74
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	1d1a      	adds	r2, r3, #4
 800c77c:	607a      	str	r2, [r7, #4]
 800c77e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	b29b      	uxth	r3, r3
 800c788:	647b      	str	r3, [r7, #68]	@ 0x44
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	0c1b      	lsrs	r3, r3, #16
 800c790:	643b      	str	r3, [r7, #64]	@ 0x40
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	3304      	adds	r3, #4
 800c796:	60bb      	str	r3, [r7, #8]
 800c798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c79a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c79c:	fb02 f303 	mul.w	r3, r2, r3
 800c7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c7a6:	fb02 f303 	mul.w	r3, r2, r3
 800c7aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c7b0:	fb02 f303 	mul.w	r3, r2, r3
 800c7b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7ba:	fb02 f303 	mul.w	r3, r2, r3
 800c7be:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c2:	0c1b      	lsrs	r3, r3, #16
 800c7c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7c6:	4413      	add	r3, r2
 800c7c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7cc:	0c1b      	lsrs	r3, r3, #16
 800c7ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7d0:	4413      	add	r3, r2
 800c7d2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7d6:	041b      	lsls	r3, r3, #16
 800c7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7dc:	041b      	lsls	r3, r3, #16
 800c7de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7e4:	4413      	add	r3, r2
 800c7e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	bf34      	ite	cc
 800c7f0:	2301      	movcc	r3, #1
 800c7f2:	2300      	movcs	r3, #0
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fa:	4413      	add	r3, r2
 800c7fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c802:	4413      	add	r3, r2
 800c804:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c806:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c80a:	429a      	cmp	r2, r3
 800c80c:	bf34      	ite	cc
 800c80e:	2301      	movcc	r3, #1
 800c810:	2300      	movcs	r3, #0
 800c812:	b2db      	uxtb	r3, r3
 800c814:	461a      	mov	r2, r3
 800c816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c818:	4413      	add	r3, r2
 800c81a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c81c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c81e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c820:	4413      	add	r3, r2
 800c822:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c828:	429a      	cmp	r2, r3
 800c82a:	bf34      	ite	cc
 800c82c:	2301      	movcc	r3, #1
 800c82e:	2300      	movcs	r3, #0
 800c830:	b2db      	uxtb	r3, r3
 800c832:	461a      	mov	r2, r3
 800c834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c836:	4413      	add	r3, r2
 800c838:	633b      	str	r3, [r7, #48]	@ 0x30
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c840:	4413      	add	r3, r2
 800c842:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c84a:	429a      	cmp	r2, r3
 800c84c:	bf34      	ite	cc
 800c84e:	2301      	movcc	r3, #1
 800c850:	2300      	movcs	r3, #0
 800c852:	b2db      	uxtb	r3, r3
 800c854:	461a      	mov	r2, r3
 800c856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c858:	4413      	add	r3, r2
 800c85a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c85c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	1d1a      	adds	r2, r3, #4
 800c864:	607a      	str	r2, [r7, #4]
 800c866:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c868:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	b29b      	uxth	r3, r3
 800c870:	647b      	str	r3, [r7, #68]	@ 0x44
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	0c1b      	lsrs	r3, r3, #16
 800c878:	643b      	str	r3, [r7, #64]	@ 0x40
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	3304      	adds	r3, #4
 800c87e:	60bb      	str	r3, [r7, #8]
 800c880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c884:	fb02 f303 	mul.w	r3, r2, r3
 800c888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c88a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c88c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c88e:	fb02 f303 	mul.w	r3, r2, r3
 800c892:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c896:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c898:	fb02 f303 	mul.w	r3, r2, r3
 800c89c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8a2:	fb02 f303 	mul.w	r3, r2, r3
 800c8a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8aa:	0c1b      	lsrs	r3, r3, #16
 800c8ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8ae:	4413      	add	r3, r2
 800c8b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8b4:	0c1b      	lsrs	r3, r3, #16
 800c8b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8b8:	4413      	add	r3, r2
 800c8ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8be:	041b      	lsls	r3, r3, #16
 800c8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8c4:	041b      	lsls	r3, r3, #16
 800c8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8cc:	4413      	add	r3, r2
 800c8ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	bf34      	ite	cc
 800c8d8:	2301      	movcc	r3, #1
 800c8da:	2300      	movcs	r3, #0
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	461a      	mov	r2, r3
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e2:	4413      	add	r3, r2
 800c8e4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ea:	4413      	add	r3, r2
 800c8ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	bf34      	ite	cc
 800c8f6:	2301      	movcc	r3, #1
 800c8f8:	2300      	movcs	r3, #0
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c900:	4413      	add	r3, r2
 800c902:	633b      	str	r3, [r7, #48]	@ 0x30
 800c904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c908:	4413      	add	r3, r2
 800c90a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c90c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c90e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c910:	429a      	cmp	r2, r3
 800c912:	bf34      	ite	cc
 800c914:	2301      	movcc	r3, #1
 800c916:	2300      	movcs	r3, #0
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	461a      	mov	r2, r3
 800c91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91e:	4413      	add	r3, r2
 800c920:	633b      	str	r3, [r7, #48]	@ 0x30
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c928:	4413      	add	r3, r2
 800c92a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c932:	429a      	cmp	r2, r3
 800c934:	bf34      	ite	cc
 800c936:	2301      	movcc	r3, #1
 800c938:	2300      	movcs	r3, #0
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	461a      	mov	r2, r3
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	4413      	add	r3, r2
 800c942:	633b      	str	r3, [r7, #48]	@ 0x30
 800c944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c946:	677b      	str	r3, [r7, #116]	@ 0x74
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	1d1a      	adds	r2, r3, #4
 800c94c:	607a      	str	r2, [r7, #4]
 800c94e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	b29b      	uxth	r3, r3
 800c958:	647b      	str	r3, [r7, #68]	@ 0x44
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	0c1b      	lsrs	r3, r3, #16
 800c960:	643b      	str	r3, [r7, #64]	@ 0x40
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	3304      	adds	r3, #4
 800c966:	60bb      	str	r3, [r7, #8]
 800c968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c96a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c96c:	fb02 f303 	mul.w	r3, r2, r3
 800c970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c974:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c976:	fb02 f303 	mul.w	r3, r2, r3
 800c97a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c97c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c97e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c980:	fb02 f303 	mul.w	r3, r2, r3
 800c984:	637b      	str	r3, [r7, #52]	@ 0x34
 800c986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c98a:	fb02 f303 	mul.w	r3, r2, r3
 800c98e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c992:	0c1b      	lsrs	r3, r3, #16
 800c994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c996:	4413      	add	r3, r2
 800c998:	633b      	str	r3, [r7, #48]	@ 0x30
 800c99a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c99c:	0c1b      	lsrs	r3, r3, #16
 800c99e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9a0:	4413      	add	r3, r2
 800c9a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9a6:	041b      	lsls	r3, r3, #16
 800c9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ac:	041b      	lsls	r3, r3, #16
 800c9ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b4:	4413      	add	r3, r2
 800c9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	bf34      	ite	cc
 800c9c0:	2301      	movcc	r3, #1
 800c9c2:	2300      	movcs	r3, #0
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ca:	4413      	add	r3, r2
 800c9cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9d2:	4413      	add	r3, r2
 800c9d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	bf34      	ite	cc
 800c9de:	2301      	movcc	r3, #1
 800c9e0:	2300      	movcs	r3, #0
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e8:	4413      	add	r3, r2
 800c9ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9f0:	4413      	add	r3, r2
 800c9f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	bf34      	ite	cc
 800c9fc:	2301      	movcc	r3, #1
 800c9fe:	2300      	movcs	r3, #0
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	461a      	mov	r2, r3
 800ca04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca06:	4413      	add	r3, r2
 800ca08:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca10:	4413      	add	r3, r2
 800ca12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	bf34      	ite	cc
 800ca1e:	2301      	movcc	r3, #1
 800ca20:	2300      	movcs	r3, #0
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	461a      	mov	r2, r3
 800ca26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca28:	4413      	add	r3, r2
 800ca2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	1d1a      	adds	r2, r3, #4
 800ca34:	607a      	str	r2, [r7, #4]
 800ca36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca38:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	0c1b      	lsrs	r3, r3, #16
 800ca48:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	60bb      	str	r3, [r7, #8]
 800ca50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca54:	fb02 f303 	mul.w	r3, r2, r3
 800ca58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca5e:	fb02 f303 	mul.w	r3, r2, r3
 800ca62:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca68:	fb02 f303 	mul.w	r3, r2, r3
 800ca6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca72:	fb02 f303 	mul.w	r3, r2, r3
 800ca76:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca7a:	0c1b      	lsrs	r3, r3, #16
 800ca7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca7e:	4413      	add	r3, r2
 800ca80:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca84:	0c1b      	lsrs	r3, r3, #16
 800ca86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca88:	4413      	add	r3, r2
 800ca8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca8e:	041b      	lsls	r3, r3, #16
 800ca90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca94:	041b      	lsls	r3, r3, #16
 800ca96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca9c:	4413      	add	r3, r2
 800ca9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800caa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800caa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa4:	429a      	cmp	r2, r3
 800caa6:	bf34      	ite	cc
 800caa8:	2301      	movcc	r3, #1
 800caaa:	2300      	movcs	r3, #0
 800caac:	b2db      	uxtb	r3, r3
 800caae:	461a      	mov	r2, r3
 800cab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab2:	4413      	add	r3, r2
 800cab4:	633b      	str	r3, [r7, #48]	@ 0x30
 800cab6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caba:	4413      	add	r3, r2
 800cabc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cabe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac2:	429a      	cmp	r2, r3
 800cac4:	bf34      	ite	cc
 800cac6:	2301      	movcc	r3, #1
 800cac8:	2300      	movcs	r3, #0
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	461a      	mov	r2, r3
 800cace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad0:	4413      	add	r3, r2
 800cad2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cad6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cad8:	4413      	add	r3, r2
 800cada:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cadc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cae0:	429a      	cmp	r2, r3
 800cae2:	bf34      	ite	cc
 800cae4:	2301      	movcc	r3, #1
 800cae6:	2300      	movcs	r3, #0
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	461a      	mov	r2, r3
 800caec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caee:	4413      	add	r3, r2
 800caf0:	633b      	str	r3, [r7, #48]	@ 0x30
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800caf8:	4413      	add	r3, r2
 800cafa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb02:	429a      	cmp	r2, r3
 800cb04:	bf34      	ite	cc
 800cb06:	2301      	movcc	r3, #1
 800cb08:	2300      	movcs	r3, #0
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb10:	4413      	add	r3, r2
 800cb12:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb16:	677b      	str	r3, [r7, #116]	@ 0x74
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	1d1a      	adds	r2, r3, #4
 800cb1c:	607a      	str	r2, [r7, #4]
 800cb1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb20:	601a      	str	r2, [r3, #0]
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	0c1b      	lsrs	r3, r3, #16
 800cb30:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	3304      	adds	r3, #4
 800cb36:	60bb      	str	r3, [r7, #8]
 800cb38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb3c:	fb02 f303 	mul.w	r3, r2, r3
 800cb40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb46:	fb02 f303 	mul.w	r3, r2, r3
 800cb4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb50:	fb02 f303 	mul.w	r3, r2, r3
 800cb54:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb5a:	fb02 f303 	mul.w	r3, r2, r3
 800cb5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb62:	0c1b      	lsrs	r3, r3, #16
 800cb64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb66:	4413      	add	r3, r2
 800cb68:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb6c:	0c1b      	lsrs	r3, r3, #16
 800cb6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb70:	4413      	add	r3, r2
 800cb72:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb76:	041b      	lsls	r3, r3, #16
 800cb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7c:	041b      	lsls	r3, r3, #16
 800cb7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb84:	4413      	add	r3, r2
 800cb86:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	bf34      	ite	cc
 800cb90:	2301      	movcc	r3, #1
 800cb92:	2300      	movcs	r3, #0
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	461a      	mov	r2, r3
 800cb98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb9a:	4413      	add	r3, r2
 800cb9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cba2:	4413      	add	r3, r2
 800cba4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cba6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	bf34      	ite	cc
 800cbae:	2301      	movcc	r3, #1
 800cbb0:	2300      	movcs	r3, #0
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	4413      	add	r3, r2
 800cbba:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbc0:	4413      	add	r3, r2
 800cbc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	bf34      	ite	cc
 800cbcc:	2301      	movcc	r3, #1
 800cbce:	2300      	movcs	r3, #0
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd6:	4413      	add	r3, r2
 800cbd8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbe0:	4413      	add	r3, r2
 800cbe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbea:	429a      	cmp	r2, r3
 800cbec:	bf34      	ite	cc
 800cbee:	2301      	movcc	r3, #1
 800cbf0:	2300      	movcs	r3, #0
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf8:	4413      	add	r3, r2
 800cbfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfe:	677b      	str	r3, [r7, #116]	@ 0x74
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	1d1a      	adds	r2, r3, #4
 800cc04:	607a      	str	r2, [r7, #4]
 800cc06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc08:	601a      	str	r2, [r3, #0]
    for( ; i >= 8; i -= 8 )
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3b08      	subs	r3, #8
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b07      	cmp	r3, #7
 800cc14:	f63f ac53 	bhi.w	800c4be <mpi_mul_hlp+0xeb6>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 800cc18:	e07c      	b.n	800cd14 <mpi_mul_hlp+0x170c>
    {
        MULADDC_INIT
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	0c1b      	lsrs	r3, r3, #16
 800cc24:	66bb      	str	r3, [r7, #104]	@ 0x68
        MULADDC_CORE
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	667b      	str	r3, [r7, #100]	@ 0x64
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	0c1b      	lsrs	r3, r3, #16
 800cc34:	663b      	str	r3, [r7, #96]	@ 0x60
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	3304      	adds	r3, #4
 800cc3a:	60bb      	str	r3, [r7, #8]
 800cc3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc3e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cc40:	fb02 f303 	mul.w	r3, r2, r3
 800cc44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc4a:	fb02 f303 	mul.w	r3, r2, r3
 800cc4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc54:	fb02 f303 	mul.w	r3, r2, r3
 800cc58:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cc5e:	fb02 f303 	mul.w	r3, r2, r3
 800cc62:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc66:	0c1b      	lsrs	r3, r3, #16
 800cc68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc6a:	4413      	add	r3, r2
 800cc6c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc70:	0c1b      	lsrs	r3, r3, #16
 800cc72:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc74:	4413      	add	r3, r2
 800cc76:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc7a:	041b      	lsls	r3, r3, #16
 800cc7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc80:	041b      	lsls	r3, r3, #16
 800cc82:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc88:	4413      	add	r3, r2
 800cc8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc90:	429a      	cmp	r2, r3
 800cc92:	bf34      	ite	cc
 800cc94:	2301      	movcc	r3, #1
 800cc96:	2300      	movcs	r3, #0
 800cc98:	b2db      	uxtb	r3, r3
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc9e:	4413      	add	r3, r2
 800cca0:	653b      	str	r3, [r7, #80]	@ 0x50
 800cca2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cca6:	4413      	add	r3, r2
 800cca8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ccaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	bf34      	ite	cc
 800ccb2:	2301      	movcc	r3, #1
 800ccb4:	2300      	movcs	r3, #0
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	461a      	mov	r2, r3
 800ccba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccbc:	4413      	add	r3, r2
 800ccbe:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ccc4:	4413      	add	r3, r2
 800ccc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ccc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cccc:	429a      	cmp	r2, r3
 800ccce:	bf34      	ite	cc
 800ccd0:	2301      	movcc	r3, #1
 800ccd2:	2300      	movcs	r3, #0
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccda:	4413      	add	r3, r2
 800ccdc:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cce4:	4413      	add	r3, r2
 800cce6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	bf34      	ite	cc
 800ccf2:	2301      	movcc	r3, #1
 800ccf4:	2300      	movcs	r3, #0
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccfc:	4413      	add	r3, r2
 800ccfe:	653b      	str	r3, [r7, #80]	@ 0x50
 800cd00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd02:	677b      	str	r3, [r7, #116]	@ 0x74
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	1d1a      	adds	r2, r3, #4
 800cd08:	607a      	str	r2, [r7, #4]
 800cd0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd0c:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	3b01      	subs	r3, #1
 800cd12:	60fb      	str	r3, [r7, #12]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f47f af7f 	bne.w	800cc1a <mpi_mul_hlp+0x1612>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 800cd1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cd1e:	3301      	adds	r3, #1
 800cd20:	673b      	str	r3, [r7, #112]	@ 0x70

    do {
        *d += c; c = ( *d < c ); d++;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd28:	441a      	add	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cd34:	429a      	cmp	r2, r3
 800cd36:	bf8c      	ite	hi
 800cd38:	2301      	movhi	r3, #1
 800cd3a:	2300      	movls	r3, #0
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	677b      	str	r3, [r7, #116]	@ 0x74
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	3304      	adds	r3, #4
 800cd44:	607b      	str	r3, [r7, #4]
    }
    while( c != 0 );
 800cd46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1ea      	bne.n	800cd22 <mpi_mul_hlp+0x171a>
}
 800cd4c:	bf00      	nop
 800cd4e:	bf00      	nop
 800cd50:	377c      	adds	r7, #124	@ 0x7c
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800cd5a:	b590      	push	{r4, r7, lr}
 800cd5c:	b08f      	sub	sp, #60	@ 0x3c
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TA, TB;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800cd66:	f107 0320 	add.w	r3, r7, #32
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	f7fd fa75 	bl	800a25a <mbedtls_mpi_init>
 800cd70:	f107 0314 	add.w	r3, r7, #20
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fd fa70 	bl	800a25a <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	68bb      	ldr	r3, [r7, #8]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d10c      	bne.n	800cd9c <mbedtls_mpi_mul_mpi+0x42>
 800cd82:	f107 0320 	add.w	r3, r7, #32
 800cd86:	68b9      	ldr	r1, [r7, #8]
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fd fb48 	bl	800a41e <mbedtls_mpi_copy>
 800cd8e:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d17b      	bne.n	800ce8e <mbedtls_mpi_mul_mpi+0x134>
 800cd96:	f107 0320 	add.w	r3, r7, #32
 800cd9a:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 800cd9c:	68fa      	ldr	r2, [r7, #12]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	d10c      	bne.n	800cdbe <mbedtls_mpi_mul_mpi+0x64>
 800cda4:	f107 0314 	add.w	r3, r7, #20
 800cda8:	6879      	ldr	r1, [r7, #4]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7fd fb37 	bl	800a41e <mbedtls_mpi_copy>
 800cdb0:	6378      	str	r0, [r7, #52]	@ 0x34
 800cdb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d16a      	bne.n	800ce8e <mbedtls_mpi_mul_mpi+0x134>
 800cdb8:	f107 0314 	add.w	r3, r7, #20
 800cdbc:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdc4:	e00d      	b.n	800cde2 <mbedtls_mpi_mul_mpi+0x88>
        if( A->p[i - 1] != 0 )
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	689a      	ldr	r2, [r3, #8]
 800cdca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cdcc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cdd0:	440b      	add	r3, r1
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d106      	bne.n	800cdea <mbedtls_mpi_mul_mpi+0x90>
    for( i = A->n; i > 0; i-- )
 800cddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdde:	3b01      	subs	r3, #1
 800cde0:	633b      	str	r3, [r7, #48]	@ 0x30
 800cde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1ee      	bne.n	800cdc6 <mbedtls_mpi_mul_mpi+0x6c>
 800cde8:	e000      	b.n	800cdec <mbedtls_mpi_mul_mpi+0x92>
            break;
 800cdea:	bf00      	nop

    for( j = B->n; j > 0; j-- )
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdf2:	e00d      	b.n	800ce10 <mbedtls_mpi_mul_mpi+0xb6>
        if( B->p[j - 1] != 0 )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	689a      	ldr	r2, [r3, #8]
 800cdf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdfa:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cdfe:	440b      	add	r3, r1
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d106      	bne.n	800ce18 <mbedtls_mpi_mul_mpi+0xbe>
    for( j = B->n; j > 0; j-- )
 800ce0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1ee      	bne.n	800cdf4 <mbedtls_mpi_mul_mpi+0x9a>
 800ce16:	e000      	b.n	800ce1a <mbedtls_mpi_mul_mpi+0xc0>
            break;
 800ce18:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800ce1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce1e:	4413      	add	r3, r2
 800ce20:	4619      	mov	r1, r3
 800ce22:	68f8      	ldr	r0, [r7, #12]
 800ce24:	f7fd fa52 	bl	800a2cc <mbedtls_mpi_grow>
 800ce28:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d12e      	bne.n	800ce8e <mbedtls_mpi_mul_mpi+0x134>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800ce30:	2100      	movs	r1, #0
 800ce32:	68f8      	ldr	r0, [r7, #12]
 800ce34:	f7fd fc52 	bl	800a6dc <mbedtls_mpi_lset>
 800ce38:	6378      	str	r0, [r7, #52]	@ 0x34
 800ce3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d126      	bne.n	800ce8e <mbedtls_mpi_mul_mpi+0x134>

    for( ; j > 0; j-- )
 800ce40:	e01a      	b.n	800ce78 <mbedtls_mpi_mul_mpi+0x11e>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	6898      	ldr	r0, [r3, #8]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	689a      	ldr	r2, [r3, #8]
 800ce4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce4c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ce50:	440b      	add	r3, r1
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	18d4      	adds	r4, r2, r3
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	689a      	ldr	r2, [r3, #8]
 800ce5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce5c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ce60:	440b      	add	r3, r1
 800ce62:	009b      	lsls	r3, r3, #2
 800ce64:	4413      	add	r3, r2
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4622      	mov	r2, r4
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce6e:	f7fe fbcb 	bl	800b608 <mpi_mul_hlp>
    for( ; j > 0; j-- )
 800ce72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce74:	3b01      	subs	r3, #1
 800ce76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d1e1      	bne.n	800ce42 <mbedtls_mpi_mul_mpi+0xe8>

    X->s = A->s * B->s;
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	6812      	ldr	r2, [r2, #0]
 800ce86:	fb03 f202 	mul.w	r2, r3, r2
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	601a      	str	r2, [r3, #0]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 800ce8e:	f107 0314 	add.w	r3, r7, #20
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fd f9f4 	bl	800a280 <mbedtls_mpi_free>
 800ce98:	f107 0320 	add.w	r3, r7, #32
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fd f9ef 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800cea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	373c      	adds	r7, #60	@ 0x3c
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd90      	pop	{r4, r7, pc}

0800ceac <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800cebc:	2301      	movs	r3, #1
 800cebe:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800cec0:	f107 0310 	add.w	r3, r7, #16
 800cec4:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800ceca:	f107 0314 	add.w	r3, r7, #20
 800cece:	461a      	mov	r2, r3
 800ced0:	68b9      	ldr	r1, [r7, #8]
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	f7ff ff41 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ced8:	4603      	mov	r3, r0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3720      	adds	r7, #32
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b090      	sub	sp, #64	@ 0x40
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	60f8      	str	r0, [r7, #12]
 800ceea:	60b9      	str	r1, [r7, #8]
 800ceec:	607a      	str	r2, [r7, #4]
 800ceee:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_HAVE_UDBL)
    mbedtls_t_udbl dividend, quotient;
#else
    const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;
 800cef0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800cef4:	633b      	str	r3, [r7, #48]	@ 0x30
    const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;
 800cef6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cefa:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d003      	beq.n	800cf0a <mbedtls_int_div_int+0x28>
 800cf02:	68fa      	ldr	r2, [r7, #12]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d309      	bcc.n	800cf1e <mbedtls_int_div_int+0x3c>
    {
        if (r != NULL) *r = ~0;
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d003      	beq.n	800cf18 <mbedtls_int_div_int+0x36>
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	f04f 32ff 	mov.w	r2, #4294967295
 800cf16:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 800cf18:	f04f 33ff 	mov.w	r3, #4294967295
 800cf1c:	e0a7      	b.n	800d06e <mbedtls_int_div_int+0x18c>
     */

    /*
     * Normalize the divisor, d, and dividend, u0, u1
     */
    s = mbedtls_clz( d );
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f7fd fcb1 	bl	800a886 <mbedtls_clz>
 800cf24:	62b8      	str	r0, [r7, #40]	@ 0x28
    d = d << s;
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf2a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf2e:	607b      	str	r3, [r7, #4]

    u1 = u1 << s;
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf34:	fa02 f303 	lsl.w	r3, r2, r3
 800cf38:	60fb      	str	r3, [r7, #12]
    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
 800cf3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3c:	f1c3 0320 	rsb	r3, r3, #32
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	fa22 f303 	lsr.w	r3, r2, r3
 800cf46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf48:	4252      	negs	r2, r2
 800cf4a:	17d2      	asrs	r2, r2, #31
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	68fa      	ldr	r2, [r7, #12]
 800cf50:	4313      	orrs	r3, r2
 800cf52:	60fb      	str	r3, [r7, #12]
    u0 =  u0 << s;
 800cf54:	68ba      	ldr	r2, [r7, #8]
 800cf56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf58:	fa02 f303 	lsl.w	r3, r2, r3
 800cf5c:	60bb      	str	r3, [r7, #8]

    d1 = d >> biH;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	0c1b      	lsrs	r3, r3, #16
 800cf62:	627b      	str	r3, [r7, #36]	@ 0x24
    d0 = d & uint_halfword_mask;
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf68:	4013      	ands	r3, r2
 800cf6a:	623b      	str	r3, [r7, #32]

    u0_msw = u0 >> biH;
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	0c1b      	lsrs	r3, r3, #16
 800cf70:	61fb      	str	r3, [r7, #28]
    u0_lsw = u0 & uint_halfword_mask;
 800cf72:	68ba      	ldr	r2, [r7, #8]
 800cf74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf76:	4013      	ands	r3, r2
 800cf78:	61bb      	str	r3, [r7, #24]

    /*
     * Find the first quotient and remainder
     */
    q1 = u1 / d1;
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf82:	63bb      	str	r3, [r7, #56]	@ 0x38
    r0 = u1 - d1 * q1;
 800cf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf88:	fb02 f303 	mul.w	r3, r2, r3
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	637b      	str	r3, [r7, #52]	@ 0x34

    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 800cf92:	e00a      	b.n	800cfaa <mbedtls_int_div_int+0xc8>
    {
        q1 -= 1;
 800cf94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf96:	3b01      	subs	r3, #1
 800cf98:	63bb      	str	r3, [r7, #56]	@ 0x38
        r0 += d1;
 800cf9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9e:	4413      	add	r3, r2
 800cfa0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ( r0 >= radix ) break;
 800cfa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d210      	bcs.n	800cfcc <mbedtls_int_div_int+0xea>
    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 800cfaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d2f0      	bcs.n	800cf94 <mbedtls_int_div_int+0xb2>
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb4:	6a3a      	ldr	r2, [r7, #32]
 800cfb6:	fb03 f202 	mul.w	r2, r3, r2
 800cfba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfbc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cfbe:	fb03 f101 	mul.w	r1, r3, r1
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	440b      	add	r3, r1
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d8e4      	bhi.n	800cf94 <mbedtls_int_div_int+0xb2>
 800cfca:	e000      	b.n	800cfce <mbedtls_int_div_int+0xec>
        if ( r0 >= radix ) break;
 800cfcc:	bf00      	nop
    }

    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfd2:	fb03 f202 	mul.w	r2, r3, r2
 800cfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd8:	6879      	ldr	r1, [r7, #4]
 800cfda:	fb01 f303 	mul.w	r3, r1, r3
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	69fa      	ldr	r2, [r7, #28]
 800cfe2:	4413      	add	r3, r2
 800cfe4:	617b      	str	r3, [r7, #20]
    q0 = rAX / d1;
 800cfe6:	697a      	ldr	r2, [r7, #20]
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfea:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    r0 = rAX - q0 * d1;
 800cff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cff4:	fb02 f303 	mul.w	r3, r2, r3
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	1ad3      	subs	r3, r2, r3
 800cffc:	637b      	str	r3, [r7, #52]	@ 0x34

    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 800cffe:	e00a      	b.n	800d016 <mbedtls_int_div_int+0x134>
    {
        q0 -= 1;
 800d000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d002:	3b01      	subs	r3, #1
 800d004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        r0 += d1;
 800d006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d00a:	4413      	add	r3, r2
 800d00c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ( r0 >= radix ) break;
 800d00e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d012:	429a      	cmp	r2, r3
 800d014:	d210      	bcs.n	800d038 <mbedtls_int_div_int+0x156>
    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 800d016:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d2f0      	bcs.n	800d000 <mbedtls_int_div_int+0x11e>
 800d01e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d020:	6a3a      	ldr	r2, [r7, #32]
 800d022:	fb03 f202 	mul.w	r2, r3, r2
 800d026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d028:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d02a:	fb03 f101 	mul.w	r1, r3, r1
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	440b      	add	r3, r1
 800d032:	429a      	cmp	r2, r3
 800d034:	d8e4      	bhi.n	800d000 <mbedtls_int_div_int+0x11e>
 800d036:	e000      	b.n	800d03a <mbedtls_int_div_int+0x158>
        if ( r0 >= radix ) break;
 800d038:	bf00      	nop
    }

    if (r != NULL)
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00e      	beq.n	800d05e <mbedtls_int_div_int+0x17c>
        *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d044:	fb03 f202 	mul.w	r2, r3, r2
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	441a      	add	r2, r3
 800d04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	fb01 f303 	mul.w	r3, r1, r3
 800d054:	1ad2      	subs	r2, r2, r3
 800d056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d058:	40da      	lsrs	r2, r3
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	601a      	str	r2, [r3, #0]

    quotient = q1 * radix + q0;
 800d05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d062:	fb02 f303 	mul.w	r3, r2, r3
 800d066:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d068:	4413      	add	r3, r2
 800d06a:	613b      	str	r3, [r7, #16]

    return quotient;
 800d06c:	693b      	ldr	r3, [r7, #16]
#endif
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3740      	adds	r7, #64	@ 0x40
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
	...

0800d078 <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 800d078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d07a:	b099      	sub	sp, #100	@ 0x64
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	603b      	str	r3, [r7, #0]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800d086:	2100      	movs	r1, #0
 800d088:	6838      	ldr	r0, [r7, #0]
 800d08a:	f7fe f862 	bl	800b152 <mbedtls_mpi_cmp_int>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d102      	bne.n	800d09a <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800d094:	f06f 030b 	mvn.w	r3, #11
 800d098:	e289      	b.n	800d5ae <mbedtls_mpi_div_mpi+0x536>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800d09a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fd f8db 	bl	800a25a <mbedtls_mpi_init>
 800d0a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fd f8d6 	bl	800a25a <mbedtls_mpi_init>
 800d0ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fd f8d1 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 800d0b8:	f107 031c 	add.w	r3, r7, #28
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fd f8cc 	bl	800a25a <mbedtls_mpi_init>
 800d0c2:	f107 0310 	add.w	r3, r7, #16
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fd f8c7 	bl	800a25a <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800d0cc:	6839      	ldr	r1, [r7, #0]
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f7fd ff22 	bl	800af18 <mbedtls_mpi_cmp_abs>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	da19      	bge.n	800d10e <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d008      	beq.n	800d0f2 <mbedtls_mpi_div_mpi+0x7a>
 800d0e0:	2100      	movs	r1, #0
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	f7fd fafa 	bl	800a6dc <mbedtls_mpi_lset>
 800d0e8:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d0ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f040 8244 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d008      	beq.n	800d10a <mbedtls_mpi_div_mpi+0x92>
 800d0f8:	6879      	ldr	r1, [r7, #4]
 800d0fa:	68b8      	ldr	r0, [r7, #8]
 800d0fc:	f7fd f98f 	bl	800a41e <mbedtls_mpi_copy>
 800d100:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d104:	2b00      	cmp	r3, #0
 800d106:	f040 8238 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
        return( 0 );
 800d10a:	2300      	movs	r3, #0
 800d10c:	e24f      	b.n	800d5ae <mbedtls_mpi_div_mpi+0x536>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800d10e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d112:	6879      	ldr	r1, [r7, #4]
 800d114:	4618      	mov	r0, r3
 800d116:	f7fd f982 	bl	800a41e <mbedtls_mpi_copy>
 800d11a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d11c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f040 822b 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 800d124:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d128:	6839      	ldr	r1, [r7, #0]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fd f977 	bl	800a41e <mbedtls_mpi_copy>
 800d130:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d134:	2b00      	cmp	r3, #0
 800d136:	f040 8220 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
    X.s = Y.s = 1;
 800d13a:	2301      	movs	r3, #1
 800d13c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d140:	643b      	str	r3, [r7, #64]	@ 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	1c9a      	adds	r2, r3, #2
 800d148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d14c:	4611      	mov	r1, r2
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fd f8bc 	bl	800a2cc <mbedtls_mpi_grow>
 800d154:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f040 820e 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800d15e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d162:	2100      	movs	r1, #0
 800d164:	4618      	mov	r0, r3
 800d166:	f7fd fab9 	bl	800a6dc <mbedtls_mpi_lset>
 800d16a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d16c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f040 8203 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 800d174:	f107 031c 	add.w	r3, r7, #28
 800d178:	2102      	movs	r1, #2
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fd f8a6 	bl	800a2cc <mbedtls_mpi_grow>
 800d180:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d184:	2b00      	cmp	r3, #0
 800d186:	f040 81f8 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 800d18a:	f107 0310 	add.w	r3, r7, #16
 800d18e:	2103      	movs	r1, #3
 800d190:	4618      	mov	r0, r3
 800d192:	f7fd f89b 	bl	800a2cc <mbedtls_mpi_grow>
 800d196:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d198:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f040 81ed 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800d1a0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7fd fb8f 	bl	800a8c8 <mbedtls_mpi_bitlen>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	f003 031f 	and.w	r3, r3, #31
 800d1b0:	657b      	str	r3, [r7, #84]	@ 0x54
    if( k < biL - 1 )
 800d1b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1b4:	2b1e      	cmp	r3, #30
 800d1b6:	d819      	bhi.n	800d1ec <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 800d1b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1ba:	f1c3 031f 	rsb	r3, r3, #31
 800d1be:	657b      	str	r3, [r7, #84]	@ 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800d1c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d1c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fd fd69 	bl	800ac9e <mbedtls_mpi_shift_l>
 800d1cc:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d1ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f040 81d2 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 800d1d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d1da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fd fd5e 	bl	800ac9e <mbedtls_mpi_shift_l>
 800d1e2:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d1e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d002      	beq.n	800d1f0 <mbedtls_mpi_div_mpi+0x178>
 800d1ea:	e1c6      	b.n	800d57a <mbedtls_mpi_div_mpi+0x502>
    }
    else k = 0;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	657b      	str	r3, [r7, #84]	@ 0x54

    n = X.n - 1;
 800d1f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	653b      	str	r3, [r7, #80]	@ 0x50
    t = Y.n - 1;
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800d1fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d208:	4611      	mov	r1, r2
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fd fd47 	bl	800ac9e <mbedtls_mpi_shift_l>
 800d210:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d214:	2b00      	cmp	r3, #0
 800d216:	f040 81b0 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800d21a:	e016      	b.n	800d24a <mbedtls_mpi_div_mpi+0x1d2>
    {
        Z.p[n - t]++;
 800d21c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d21e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d222:	1acb      	subs	r3, r1, r3
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	3201      	adds	r2, #1
 800d22c:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800d22e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d232:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d236:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fe f958 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800d240:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d244:	2b00      	cmp	r3, #0
 800d246:	f040 8198 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800d24a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d24e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d252:	4611      	mov	r1, r2
 800d254:	4618      	mov	r0, r3
 800d256:	f7fd fee1 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	dadd      	bge.n	800d21c <mbedtls_mpi_div_mpi+0x1a4>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800d260:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d264:	1ad3      	subs	r3, r2, r3
 800d266:	015a      	lsls	r2, r3, #5
 800d268:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d26c:	4611      	mov	r1, r2
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fd fdb7 	bl	800ade2 <mbedtls_mpi_shift_r>
 800d274:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d276:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f040 817e 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>

    for( i = n; i > t ; i-- )
 800d27e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d280:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d282:	e13a      	b.n	800d4fa <mbedtls_mpi_div_mpi+0x482>
    {
        if( X.p[i] >= Y.p[t] )
 800d284:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4413      	add	r3, r2
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	440b      	add	r3, r1
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d30c      	bcc.n	800d2b6 <mbedtls_mpi_div_mpi+0x23e>
            Z.p[i - t - 1] = ~0;
 800d29c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d29e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2a2:	1ac9      	subs	r1, r1, r3
 800d2a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2a8:	440b      	add	r3, r1
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b2:	601a      	str	r2, [r3, #0]
 800d2b4:	e021      	b.n	800d2fa <mbedtls_mpi_div_mpi+0x282>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800d2b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2ba:	009b      	lsls	r3, r3, #2
 800d2bc:	4413      	add	r3, r2
 800d2be:	6818      	ldr	r0, [r3, #0]
 800d2c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d2c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2c4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2c8:	440b      	add	r3, r1
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	4413      	add	r3, r2
 800d2ce:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 800d2d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d2d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800d2d8:	681e      	ldr	r6, [r3, #0]
 800d2da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2dc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e0:	1ac9      	subs	r1, r1, r3
 800d2e2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2e6:	440b      	add	r3, r1
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	18d4      	adds	r4, r2, r3
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4632      	mov	r2, r6
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	f7ff fdf6 	bl	800cee2 <mbedtls_int_div_int>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	6023      	str	r3, [r4, #0]
        }

        Z.p[i - t - 1]++;
 800d2fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d300:	1ac9      	subs	r1, r1, r3
 800d302:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d306:	440b      	add	r3, r1
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4413      	add	r3, r2
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	3201      	adds	r2, #1
 800d310:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 800d312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d314:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d318:	1ac9      	subs	r1, r1, r3
 800d31a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d31e:	440b      	add	r3, r1
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	3a01      	subs	r2, #1
 800d328:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800d32a:	f107 031c 	add.w	r3, r7, #28
 800d32e:	2100      	movs	r1, #0
 800d330:	4618      	mov	r0, r3
 800d332:	f7fd f9d3 	bl	800a6dc <mbedtls_mpi_lset>
 800d336:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f040 811d 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800d340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d008      	beq.n	800d358 <mbedtls_mpi_div_mpi+0x2e0>
 800d346:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d348:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d34a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d34e:	440b      	add	r3, r1
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4413      	add	r3, r2
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	e000      	b.n	800d35a <mbedtls_mpi_div_mpi+0x2e2>
 800d358:	2300      	movs	r3, #0
 800d35a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d35c:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 800d35e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d360:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	441a      	add	r2, r3
 800d366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d368:	3304      	adds	r3, #4
 800d36a:	6812      	ldr	r2, [r2, #0]
 800d36c:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800d36e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d370:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d374:	1ac9      	subs	r1, r1, r3
 800d376:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d37a:	440b      	add	r3, r1
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4413      	add	r3, r2
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	f107 011c 	add.w	r1, r7, #28
 800d386:	f107 031c 	add.w	r3, r7, #28
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff fd8e 	bl	800ceac <mbedtls_mpi_mul_int>
 800d390:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d394:	2b00      	cmp	r3, #0
 800d396:	f040 80f0 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 800d39a:	f107 0310 	add.w	r3, r7, #16
 800d39e:	2100      	movs	r1, #0
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fd f99b 	bl	800a6dc <mbedtls_mpi_lset>
 800d3a6:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d3a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	f040 80e5 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800d3b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d907      	bls.n	800d3c6 <mbedtls_mpi_div_mpi+0x34e>
 800d3b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d3b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d3ba:	4b7f      	ldr	r3, [pc, #508]	@ (800d5b8 <mbedtls_mpi_div_mpi+0x540>)
 800d3bc:	440b      	add	r3, r1
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	4413      	add	r3, r2
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	e000      	b.n	800d3c8 <mbedtls_mpi_div_mpi+0x350>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	69ba      	ldr	r2, [r7, #24]
 800d3ca:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800d3cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d008      	beq.n	800d3e4 <mbedtls_mpi_div_mpi+0x36c>
 800d3d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d3d4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d3d6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d3da:	440b      	add	r3, r1
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	4413      	add	r3, r2
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	e000      	b.n	800d3e6 <mbedtls_mpi_div_mpi+0x36e>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	3204      	adds	r2, #4
 800d3ea:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 800d3ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d3ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	441a      	add	r2, r3
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	6812      	ldr	r2, [r2, #0]
 800d3fa:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800d3fc:	f107 0210 	add.w	r2, r7, #16
 800d400:	f107 031c 	add.w	r3, r7, #28
 800d404:	4611      	mov	r1, r2
 800d406:	4618      	mov	r0, r3
 800d408:	f7fd fe08 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f73f af7f 	bgt.w	800d312 <mbedtls_mpi_div_mpi+0x29a>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800d414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d416:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d41a:	1ac9      	subs	r1, r1, r3
 800d41c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d420:	440b      	add	r3, r1
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	4413      	add	r3, r2
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800d42c:	f107 031c 	add.w	r3, r7, #28
 800d430:	4618      	mov	r0, r3
 800d432:	f7ff fd3b 	bl	800ceac <mbedtls_mpi_mul_int>
 800d436:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d438:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f040 809d 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800d440:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d444:	1ad3      	subs	r3, r2, r3
 800d446:	3b01      	subs	r3, #1
 800d448:	015a      	lsls	r2, r3, #5
 800d44a:	f107 031c 	add.w	r3, r7, #28
 800d44e:	4611      	mov	r1, r2
 800d450:	4618      	mov	r0, r3
 800d452:	f7fd fc24 	bl	800ac9e <mbedtls_mpi_shift_l>
 800d456:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f040 808d 	bne.w	800d57a <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800d460:	f107 021c 	add.w	r2, r7, #28
 800d464:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d468:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fe f83f 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800d472:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d474:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d476:	2b00      	cmp	r3, #0
 800d478:	d17f      	bne.n	800d57a <mbedtls_mpi_div_mpi+0x502>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800d47a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d47e:	2100      	movs	r1, #0
 800d480:	4618      	mov	r0, r3
 800d482:	f7fd fe66 	bl	800b152 <mbedtls_mpi_cmp_int>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	da33      	bge.n	800d4f4 <mbedtls_mpi_div_mpi+0x47c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 800d48c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d490:	f107 031c 	add.w	r3, r7, #28
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f7fc ffc1 	bl	800a41e <mbedtls_mpi_copy>
 800d49c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d49e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d16a      	bne.n	800d57a <mbedtls_mpi_div_mpi+0x502>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800d4a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4a8:	1ad3      	subs	r3, r2, r3
 800d4aa:	3b01      	subs	r3, #1
 800d4ac:	015a      	lsls	r2, r3, #5
 800d4ae:	f107 031c 	add.w	r3, r7, #28
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f7fd fbf2 	bl	800ac9e <mbedtls_mpi_shift_l>
 800d4ba:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d4bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d15b      	bne.n	800d57a <mbedtls_mpi_div_mpi+0x502>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800d4c2:	f107 021c 	add.w	r2, r7, #28
 800d4c6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d4ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7fd ffca 	bl	800b468 <mbedtls_mpi_add_mpi>
 800d4d4:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d4d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d14e      	bne.n	800d57a <mbedtls_mpi_div_mpi+0x502>
            Z.p[i - t - 1]--;
 800d4dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4de:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d4e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4e2:	1ac9      	subs	r1, r1, r3
 800d4e4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d4e8:	440b      	add	r3, r1
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	4413      	add	r3, r2
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	3a01      	subs	r2, #1
 800d4f2:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 800d4f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d4f6:	3b01      	subs	r3, #1
 800d4f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4fe:	429a      	cmp	r2, r3
 800d500:	f63f aec0 	bhi.w	800d284 <mbedtls_mpi_div_mpi+0x20c>
        }
    }

    if( Q != NULL )
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d011      	beq.n	800d52e <mbedtls_mpi_div_mpi+0x4b6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 800d50a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d50e:	4619      	mov	r1, r3
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f7fc ff84 	bl	800a41e <mbedtls_mpi_copy>
 800d516:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d12d      	bne.n	800d57a <mbedtls_mpi_div_mpi+0x502>
        Q->s = A->s * B->s;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	683a      	ldr	r2, [r7, #0]
 800d524:	6812      	ldr	r2, [r2, #0]
 800d526:	fb03 f202 	mul.w	r2, r3, r2
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d021      	beq.n	800d578 <mbedtls_mpi_div_mpi+0x500>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800d534:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d538:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fd fc51 	bl	800ade2 <mbedtls_mpi_shift_r>
 800d540:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d544:	2b00      	cmp	r3, #0
 800d546:	d118      	bne.n	800d57a <mbedtls_mpi_div_mpi+0x502>
        X.s = A->s;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	643b      	str	r3, [r7, #64]	@ 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800d54e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d552:	4619      	mov	r1, r3
 800d554:	68b8      	ldr	r0, [r7, #8]
 800d556:	f7fc ff62 	bl	800a41e <mbedtls_mpi_copy>
 800d55a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d55c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d10b      	bne.n	800d57a <mbedtls_mpi_div_mpi+0x502>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800d562:	2100      	movs	r1, #0
 800d564:	68b8      	ldr	r0, [r7, #8]
 800d566:	f7fd fdf4 	bl	800b152 <mbedtls_mpi_cmp_int>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d103      	bne.n	800d578 <mbedtls_mpi_div_mpi+0x500>
            R->s = 1;
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2201      	movs	r2, #1
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	e000      	b.n	800d57a <mbedtls_mpi_div_mpi+0x502>
    }

cleanup:
 800d578:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800d57a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fc fe7e 	bl	800a280 <mbedtls_mpi_free>
 800d584:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d588:	4618      	mov	r0, r3
 800d58a:	f7fc fe79 	bl	800a280 <mbedtls_mpi_free>
 800d58e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d592:	4618      	mov	r0, r3
 800d594:	f7fc fe74 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 800d598:	f107 031c 	add.w	r3, r7, #28
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fc fe6f 	bl	800a280 <mbedtls_mpi_free>
 800d5a2:	f107 0310 	add.w	r3, r7, #16
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fc fe6a 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800d5ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3764      	adds	r7, #100	@ 0x64
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	3ffffffe 	.word	0x3ffffffe

0800d5bc <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	60b9      	str	r1, [r7, #8]
 800d5c6:	607a      	str	r2, [r7, #4]
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7fd fdc1 	bl	800b152 <mbedtls_mpi_cmp_int>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	da02      	bge.n	800d5dc <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800d5d6:	f06f 0309 	mvn.w	r3, #9
 800d5da:	e02d      	b.n	800d638 <mbedtls_mpi_mod_mpi+0x7c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	68ba      	ldr	r2, [r7, #8]
 800d5e0:	68f9      	ldr	r1, [r7, #12]
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	f7ff fd48 	bl	800d078 <mbedtls_mpi_div_mpi>
 800d5e8:	6178      	str	r0, [r7, #20]
 800d5ea:	697b      	ldr	r3, [r7, #20]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d122      	bne.n	800d636 <mbedtls_mpi_mod_mpi+0x7a>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800d5f0:	e008      	b.n	800d604 <mbedtls_mpi_mod_mpi+0x48>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	68f9      	ldr	r1, [r7, #12]
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f7fd ff36 	bl	800b468 <mbedtls_mpi_add_mpi>
 800d5fc:	6178      	str	r0, [r7, #20]
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d118      	bne.n	800d636 <mbedtls_mpi_mod_mpi+0x7a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800d604:	2100      	movs	r1, #0
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f7fd fda3 	bl	800b152 <mbedtls_mpi_cmp_int>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	dbef      	blt.n	800d5f2 <mbedtls_mpi_mod_mpi+0x36>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800d612:	e008      	b.n	800d626 <mbedtls_mpi_mod_mpi+0x6a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	68f9      	ldr	r1, [r7, #12]
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f7fd ff69 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800d61e:	6178      	str	r0, [r7, #20]
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d107      	bne.n	800d636 <mbedtls_mpi_mod_mpi+0x7a>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800d626:	6879      	ldr	r1, [r7, #4]
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f7fd fcf7 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	daef      	bge.n	800d614 <mbedtls_mpi_mod_mpi+0x58>

cleanup:
 800d634:	bf00      	nop

    return( ret );
 800d636:	697b      	ldr	r3, [r7, #20]
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3718      	adds	r7, #24
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b090      	sub	sp, #64	@ 0x40
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]

    MPI_VALIDATE_RET( G != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800d64c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d650:	4618      	mov	r0, r3
 800d652:	f7fc fe02 	bl	800a25a <mbedtls_mpi_init>
 800d656:	f107 031c 	add.w	r3, r7, #28
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fc fdfd 	bl	800a25a <mbedtls_mpi_init>
 800d660:	f107 0310 	add.w	r3, r7, #16
 800d664:	4618      	mov	r0, r3
 800d666:	f7fc fdf8 	bl	800a25a <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800d66a:	f107 031c 	add.w	r3, r7, #28
 800d66e:	68b9      	ldr	r1, [r7, #8]
 800d670:	4618      	mov	r0, r3
 800d672:	f7fc fed4 	bl	800a41e <mbedtls_mpi_copy>
 800d676:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f040 80ae 	bne.w	800d7dc <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800d680:	f107 0310 	add.w	r3, r7, #16
 800d684:	6879      	ldr	r1, [r7, #4]
 800d686:	4618      	mov	r0, r3
 800d688:	f7fc fec9 	bl	800a41e <mbedtls_mpi_copy>
 800d68c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d68e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d690:	2b00      	cmp	r3, #0
 800d692:	f040 80a3 	bne.w	800d7dc <mbedtls_mpi_gcd+0x19c>

    lz = mbedtls_mpi_lsb( &TA );
 800d696:	f107 031c 	add.w	r3, r7, #28
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fd f8c0 	bl	800a820 <mbedtls_mpi_lsb>
 800d6a0:	63b8      	str	r0, [r7, #56]	@ 0x38
    lzt = mbedtls_mpi_lsb( &TB );
 800d6a2:	f107 0310 	add.w	r3, r7, #16
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fd f8ba 	bl	800a820 <mbedtls_mpi_lsb>
 800d6ac:	6378      	str	r0, [r7, #52]	@ 0x34

    if( lzt < lz )
 800d6ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d201      	bcs.n	800d6ba <mbedtls_mpi_gcd+0x7a>
        lz = lzt;
 800d6b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800d6ba:	f107 031c 	add.w	r3, r7, #28
 800d6be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f7fd fb8e 	bl	800ade2 <mbedtls_mpi_shift_r>
 800d6c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f040 8086 	bne.w	800d7dc <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800d6d0:	f107 0310 	add.w	r3, r7, #16
 800d6d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7fd fb83 	bl	800ade2 <mbedtls_mpi_shift_r>
 800d6dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d6de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d17b      	bne.n	800d7dc <mbedtls_mpi_gcd+0x19c>

    TA.s = TB.s = 1;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	613b      	str	r3, [r7, #16]
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	61fb      	str	r3, [r7, #28]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800d6ec:	e059      	b.n	800d7a2 <mbedtls_mpi_gcd+0x162>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800d6ee:	f107 031c 	add.w	r3, r7, #28
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fd f894 	bl	800a820 <mbedtls_mpi_lsb>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	f107 031c 	add.w	r3, r7, #28
 800d6fe:	4611      	mov	r1, r2
 800d700:	4618      	mov	r0, r3
 800d702:	f7fd fb6e 	bl	800ade2 <mbedtls_mpi_shift_r>
 800d706:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d166      	bne.n	800d7dc <mbedtls_mpi_gcd+0x19c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800d70e:	f107 0310 	add.w	r3, r7, #16
 800d712:	4618      	mov	r0, r3
 800d714:	f7fd f884 	bl	800a820 <mbedtls_mpi_lsb>
 800d718:	4602      	mov	r2, r0
 800d71a:	f107 0310 	add.w	r3, r7, #16
 800d71e:	4611      	mov	r1, r2
 800d720:	4618      	mov	r0, r3
 800d722:	f7fd fb5e 	bl	800ade2 <mbedtls_mpi_shift_r>
 800d726:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d156      	bne.n	800d7dc <mbedtls_mpi_gcd+0x19c>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800d72e:	f107 0210 	add.w	r2, r7, #16
 800d732:	f107 031c 	add.w	r3, r7, #28
 800d736:	4611      	mov	r1, r2
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fd fc6f 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b00      	cmp	r3, #0
 800d742:	db17      	blt.n	800d774 <mbedtls_mpi_gcd+0x134>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800d744:	f107 0210 	add.w	r2, r7, #16
 800d748:	f107 011c 	add.w	r1, r7, #28
 800d74c:	f107 031c 	add.w	r3, r7, #28
 800d750:	4618      	mov	r0, r3
 800d752:	f7fd fe29 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800d756:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d13e      	bne.n	800d7dc <mbedtls_mpi_gcd+0x19c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800d75e:	f107 031c 	add.w	r3, r7, #28
 800d762:	2101      	movs	r1, #1
 800d764:	4618      	mov	r0, r3
 800d766:	f7fd fb3c 	bl	800ade2 <mbedtls_mpi_shift_r>
 800d76a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d76c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d017      	beq.n	800d7a2 <mbedtls_mpi_gcd+0x162>
 800d772:	e033      	b.n	800d7dc <mbedtls_mpi_gcd+0x19c>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800d774:	f107 021c 	add.w	r2, r7, #28
 800d778:	f107 0110 	add.w	r1, r7, #16
 800d77c:	f107 0310 	add.w	r3, r7, #16
 800d780:	4618      	mov	r0, r3
 800d782:	f7fd fe11 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800d786:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d126      	bne.n	800d7dc <mbedtls_mpi_gcd+0x19c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800d78e:	f107 0310 	add.w	r3, r7, #16
 800d792:	2101      	movs	r1, #1
 800d794:	4618      	mov	r0, r3
 800d796:	f7fd fb24 	bl	800ade2 <mbedtls_mpi_shift_r>
 800d79a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d79c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d11c      	bne.n	800d7dc <mbedtls_mpi_gcd+0x19c>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800d7a2:	f107 031c 	add.w	r3, r7, #28
 800d7a6:	2100      	movs	r1, #0
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fd fcd2 	bl	800b152 <mbedtls_mpi_cmp_int>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d19c      	bne.n	800d6ee <mbedtls_mpi_gcd+0xae>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800d7b4:	f107 0310 	add.w	r3, r7, #16
 800d7b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fd fa6f 	bl	800ac9e <mbedtls_mpi_shift_l>
 800d7c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d109      	bne.n	800d7dc <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800d7c8:	f107 0310 	add.w	r3, r7, #16
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f7fc fe25 	bl	800a41e <mbedtls_mpi_copy>
 800d7d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d7d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7d8:	2b00      	cmp	r3, #0

cleanup:
 800d7da:	bf00      	nop

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800d7dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7fc fd4d 	bl	800a280 <mbedtls_mpi_free>
 800d7e6:	f107 031c 	add.w	r3, r7, #28
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7fc fd48 	bl	800a280 <mbedtls_mpi_free>
 800d7f0:	f107 0310 	add.w	r3, r7, #16
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fc fd43 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800d7fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3740      	adds	r7, #64	@ 0x40
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b088      	sub	sp, #32
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
 800d810:	603b      	str	r3, [r7, #0]
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	089b      	lsrs	r3, r3, #2
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	f002 0203 	and.w	r2, r2, #3
 800d81c:	2a00      	cmp	r2, #0
 800d81e:	bf14      	ite	ne
 800d820:	2201      	movne	r2, #1
 800d822:	2200      	moveq	r2, #0
 800d824:	b2d2      	uxtb	r2, r2
 800d826:	4413      	add	r3, r2
 800d828:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - size;
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	009a      	lsls	r2, r3, #2
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	69ba      	ldr	r2, [r7, #24]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d00d      	beq.n	800d85a <mbedtls_mpi_fill_random+0x56>
    {
        mbedtls_mpi_free( X );
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f7fc fd1e 	bl	800a280 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f7fc fd08 	bl	800a25a <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800d84a:	69b9      	ldr	r1, [r7, #24]
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f7fc fd3d 	bl	800a2cc <mbedtls_mpi_grow>
 800d852:	61f8      	str	r0, [r7, #28]
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d117      	bne.n	800d88a <mbedtls_mpi_fill_random+0x86>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800d85a:	2100      	movs	r1, #0
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f7fc ff3d 	bl	800a6dc <mbedtls_mpi_lset>
 800d862:	61f8      	str	r0, [r7, #28]
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d10f      	bne.n	800d88a <mbedtls_mpi_fill_random+0x86>

    Xp = (unsigned char*) X->p;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	689b      	ldr	r3, [r3, #8]
 800d86e:	613b      	str	r3, [r7, #16]
    f_rng( p_rng, Xp + overhead, size );
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	18d1      	adds	r1, r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	68ba      	ldr	r2, [r7, #8]
 800d87a:	6838      	ldr	r0, [r7, #0]
 800d87c:	4798      	blx	r3

    mpi_bigendian_to_host( X->p, limbs );
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	689b      	ldr	r3, [r3, #8]
 800d882:	69b9      	ldr	r1, [r7, #24]
 800d884:	4618      	mov	r0, r3
 800d886:	f7fd f98a 	bl	800ab9e <mpi_bigendian_to_host>

cleanup:
    return( ret );
 800d88a:	69fb      	ldr	r3, [r7, #28]
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3720      	adds	r7, #32
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b0a0      	sub	sp, #128	@ 0x80
 800d898:	af00      	add	r7, sp, #0
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	60b9      	str	r1, [r7, #8]
 800d89e:	607a      	str	r2, [r7, #4]
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800d8a0:	2101      	movs	r1, #1
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7fd fc55 	bl	800b152 <mbedtls_mpi_cmp_int>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	dc02      	bgt.n	800d8b4 <mbedtls_mpi_inv_mod+0x20>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800d8ae:	f06f 0303 	mvn.w	r3, #3
 800d8b2:	e209      	b.n	800dcc8 <mbedtls_mpi_inv_mod+0x434>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 800d8b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fc fcce 	bl	800a25a <mbedtls_mpi_init>
 800d8be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fc fcc9 	bl	800a25a <mbedtls_mpi_init>
 800d8c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7fc fcc4 	bl	800a25a <mbedtls_mpi_init>
 800d8d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fc fcbf 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 800d8dc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fc fcba 	bl	800a25a <mbedtls_mpi_init>
 800d8e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fc fcb5 	bl	800a25a <mbedtls_mpi_init>
 800d8f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7fc fcb0 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 800d8fa:	f107 031c 	add.w	r3, r7, #28
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7fc fcab 	bl	800a25a <mbedtls_mpi_init>
 800d904:	f107 0310 	add.w	r3, r7, #16
 800d908:	4618      	mov	r0, r3
 800d90a:	f7fc fca6 	bl	800a25a <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800d90e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	68b9      	ldr	r1, [r7, #8]
 800d916:	4618      	mov	r0, r3
 800d918:	f7ff fe92 	bl	800d640 <mbedtls_mpi_gcd>
 800d91c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d91e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d920:	2b00      	cmp	r3, #0
 800d922:	f040 81a3 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800d926:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d92a:	2101      	movs	r1, #1
 800d92c:	4618      	mov	r0, r3
 800d92e:	f7fd fc10 	bl	800b152 <mbedtls_mpi_cmp_int>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d003      	beq.n	800d940 <mbedtls_mpi_inv_mod+0xac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800d938:	f06f 030d 	mvn.w	r3, #13
 800d93c:	67fb      	str	r3, [r7, #124]	@ 0x7c
        goto cleanup;
 800d93e:	e195      	b.n	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800d940:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	68b9      	ldr	r1, [r7, #8]
 800d948:	4618      	mov	r0, r3
 800d94a:	f7ff fe37 	bl	800d5bc <mbedtls_mpi_mod_mpi>
 800d94e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d950:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d952:	2b00      	cmp	r3, #0
 800d954:	f040 818a 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800d958:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800d95c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d960:	4611      	mov	r1, r2
 800d962:	4618      	mov	r0, r3
 800d964:	f7fc fd5b 	bl	800a41e <mbedtls_mpi_copy>
 800d968:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d96a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f040 817d 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800d972:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d976:	6879      	ldr	r1, [r7, #4]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7fc fd50 	bl	800a41e <mbedtls_mpi_copy>
 800d97e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d980:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d982:	2b00      	cmp	r3, #0
 800d984:	f040 8172 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800d988:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d98c:	6879      	ldr	r1, [r7, #4]
 800d98e:	4618      	mov	r0, r3
 800d990:	f7fc fd45 	bl	800a41e <mbedtls_mpi_copy>
 800d994:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d996:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f040 8167 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800d99e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d9a2:	2101      	movs	r1, #1
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7fc fe99 	bl	800a6dc <mbedtls_mpi_lset>
 800d9aa:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f040 815c 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800d9b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fc fe8e 	bl	800a6dc <mbedtls_mpi_lset>
 800d9c0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f040 8151 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800d9ca:	f107 031c 	add.w	r3, r7, #28
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fc fe83 	bl	800a6dc <mbedtls_mpi_lset>
 800d9d6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	f040 8146 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800d9e0:	f107 0310 	add.w	r3, r7, #16
 800d9e4:	2101      	movs	r1, #1
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fc fe78 	bl	800a6dc <mbedtls_mpi_lset>
 800d9ec:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f040 813b 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 800d9f6:	e048      	b.n	800da8a <mbedtls_mpi_inv_mod+0x1f6>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800d9f8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d9fc:	2101      	movs	r1, #1
 800d9fe:	4618      	mov	r0, r3
 800da00:	f7fd f9ef 	bl	800ade2 <mbedtls_mpi_shift_r>
 800da04:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f040 812f 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800da0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	d105      	bne.n	800da26 <mbedtls_mpi_inv_mod+0x192>
 800da1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 0301 	and.w	r3, r3, #1
 800da22:	2b00      	cmp	r3, #0
 800da24:	d01b      	beq.n	800da5e <mbedtls_mpi_inv_mod+0x1ca>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800da26:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800da2a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800da2e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800da32:	4618      	mov	r0, r3
 800da34:	f7fd fd18 	bl	800b468 <mbedtls_mpi_add_mpi>
 800da38:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f040 8115 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800da42:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800da46:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800da4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fd fd4e 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800da54:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f040 8107 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800da5e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800da62:	2101      	movs	r1, #1
 800da64:	4618      	mov	r0, r3
 800da66:	f7fd f9bc 	bl	800ade2 <mbedtls_mpi_shift_r>
 800da6a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da6e:	2b00      	cmp	r3, #0
 800da70:	f040 80fc 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800da74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800da78:	2101      	movs	r1, #1
 800da7a:	4618      	mov	r0, r3
 800da7c:	f7fd f9b1 	bl	800ade2 <mbedtls_mpi_shift_r>
 800da80:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da84:	2b00      	cmp	r3, #0
 800da86:	f040 80f1 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
        while( ( TU.p[0] & 1 ) == 0 )
 800da8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f003 0301 	and.w	r3, r3, #1
 800da92:	2b00      	cmp	r3, #0
 800da94:	d0b0      	beq.n	800d9f8 <mbedtls_mpi_inv_mod+0x164>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 800da96:	e048      	b.n	800db2a <mbedtls_mpi_inv_mod+0x296>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800da98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800da9c:	2101      	movs	r1, #1
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fd f99f 	bl	800ade2 <mbedtls_mpi_shift_r>
 800daa4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800daa6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f040 80df 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800daae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d105      	bne.n	800dac6 <mbedtls_mpi_inv_mod+0x232>
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f003 0301 	and.w	r3, r3, #1
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d01b      	beq.n	800dafe <mbedtls_mpi_inv_mod+0x26a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800dac6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800daca:	f107 011c 	add.w	r1, r7, #28
 800dace:	f107 031c 	add.w	r3, r7, #28
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fd fcc8 	bl	800b468 <mbedtls_mpi_add_mpi>
 800dad8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dada:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f040 80c5 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800dae2:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800dae6:	f107 0110 	add.w	r1, r7, #16
 800daea:	f107 0310 	add.w	r3, r7, #16
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fd fcfe 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800daf4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800daf6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f040 80b7 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800dafe:	f107 031c 	add.w	r3, r7, #28
 800db02:	2101      	movs	r1, #1
 800db04:	4618      	mov	r0, r3
 800db06:	f7fd f96c 	bl	800ade2 <mbedtls_mpi_shift_r>
 800db0a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f040 80ac 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800db14:	f107 0310 	add.w	r3, r7, #16
 800db18:	2101      	movs	r1, #1
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fd f961 	bl	800ade2 <mbedtls_mpi_shift_r>
 800db20:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db24:	2b00      	cmp	r3, #0
 800db26:	f040 80a1 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
        while( ( TV.p[0] & 1 ) == 0 )
 800db2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f003 0301 	and.w	r3, r3, #1
 800db32:	2b00      	cmp	r3, #0
 800db34:	d0b0      	beq.n	800da98 <mbedtls_mpi_inv_mod+0x204>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800db36:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800db3a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800db3e:	4611      	mov	r1, r2
 800db40:	4618      	mov	r0, r3
 800db42:	f7fd fa6b 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	db28      	blt.n	800db9e <mbedtls_mpi_inv_mod+0x30a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800db4c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800db50:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800db54:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fd fcc9 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800db5e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db62:	2b00      	cmp	r3, #0
 800db64:	f040 8082 	bne.w	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800db68:	f107 021c 	add.w	r2, r7, #28
 800db6c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800db70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800db74:	4618      	mov	r0, r3
 800db76:	f7fd fcbb 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800db7a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d174      	bne.n	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800db82:	f107 0210 	add.w	r2, r7, #16
 800db86:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800db8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800db8e:	4618      	mov	r0, r3
 800db90:	f7fd fcae 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800db94:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d027      	beq.n	800dbec <mbedtls_mpi_inv_mod+0x358>
 800db9c:	e066      	b.n	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800db9e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800dba2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800dba6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7fd fca0 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800dbb0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dbb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d159      	bne.n	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800dbb8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800dbbc:	f107 011c 	add.w	r1, r7, #28
 800dbc0:	f107 031c 	add.w	r3, r7, #28
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fd fc93 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800dbca:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dbcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d14c      	bne.n	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800dbd2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800dbd6:	f107 0110 	add.w	r1, r7, #16
 800dbda:	f107 0310 	add.w	r3, r7, #16
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fd fc86 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800dbe4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dbe6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d13f      	bne.n	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800dbec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fd faad 	bl	800b152 <mbedtls_mpi_cmp_int>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f47f af45 	bne.w	800da8a <mbedtls_mpi_inv_mod+0x1f6>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800dc00:	e00b      	b.n	800dc1a <mbedtls_mpi_inv_mod+0x386>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800dc02:	f107 011c 	add.w	r1, r7, #28
 800dc06:	f107 031c 	add.w	r3, r7, #28
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7fd fc2b 	bl	800b468 <mbedtls_mpi_add_mpi>
 800dc12:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dc14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d128      	bne.n	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800dc1a:	f107 031c 	add.w	r3, r7, #28
 800dc1e:	2100      	movs	r1, #0
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7fd fa96 	bl	800b152 <mbedtls_mpi_cmp_int>
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	dbea      	blt.n	800dc02 <mbedtls_mpi_inv_mod+0x36e>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800dc2c:	e00b      	b.n	800dc46 <mbedtls_mpi_inv_mod+0x3b2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800dc2e:	f107 011c 	add.w	r1, r7, #28
 800dc32:	f107 031c 	add.w	r3, r7, #28
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fd fc59 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800dc3e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dc40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d112      	bne.n	800dc6c <mbedtls_mpi_inv_mod+0x3d8>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800dc46:	f107 031c 	add.w	r3, r7, #28
 800dc4a:	6879      	ldr	r1, [r7, #4]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7fd f9e5 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	daea      	bge.n	800dc2e <mbedtls_mpi_inv_mod+0x39a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800dc58:	f107 031c 	add.w	r3, r7, #28
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f7fc fbdd 	bl	800a41e <mbedtls_mpi_copy>
 800dc64:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dc66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc68:	2b00      	cmp	r3, #0

cleanup:
 800dc6a:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800dc6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fc fb05 	bl	800a280 <mbedtls_mpi_free>
 800dc76:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fc fb00 	bl	800a280 <mbedtls_mpi_free>
 800dc80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fc fafb 	bl	800a280 <mbedtls_mpi_free>
 800dc8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7fc faf6 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800dc94:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fc faf1 	bl	800a280 <mbedtls_mpi_free>
 800dc9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fc faec 	bl	800a280 <mbedtls_mpi_free>
 800dca8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fc fae7 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800dcb2:	f107 031c 	add.w	r3, r7, #28
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7fc fae2 	bl	800a280 <mbedtls_mpi_free>
 800dcbc:	f107 0310 	add.w	r3, r7, #16
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fc fadd 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800dcc6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3780      	adds	r7, #128	@ 0x80
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b088      	sub	sp, #32
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	607a      	str	r2, [r7, #4]
 800dcdc:	603b      	str	r3, [r7, #0]
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dce2:	3307      	adds	r3, #7
 800dce4:	08db      	lsrs	r3, r3, #3
 800dce6:	61bb      	str	r3, [r7, #24]
    size_t use_size = blen > n_size ? n_size : blen;
 800dce8:	683a      	ldr	r2, [r7, #0]
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	4293      	cmp	r3, r2
 800dcee:	bf28      	it	cs
 800dcf0:	4613      	movcs	r3, r2
 800dcf2:	617b      	str	r3, [r7, #20]

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 800dcf4:	697a      	ldr	r2, [r7, #20]
 800dcf6:	6879      	ldr	r1, [r7, #4]
 800dcf8:	68b8      	ldr	r0, [r7, #8]
 800dcfa:	f7fc ff83 	bl	800ac04 <mbedtls_mpi_read_binary>
 800dcfe:	61f8      	str	r0, [r7, #28]
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d126      	bne.n	800dd54 <derive_mpi+0x84>
    if( use_size * 8 > grp->nbits )
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	00da      	lsls	r2, r3, #3
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d90c      	bls.n	800dd2c <derive_mpi+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	00da      	lsls	r2, r3, #3
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	68b8      	ldr	r0, [r7, #8]
 800dd20:	f7fd f85f 	bl	800ade2 <mbedtls_mpi_shift_r>
 800dd24:	61f8      	str	r0, [r7, #28]
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d113      	bne.n	800dd54 <derive_mpi+0x84>

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	334c      	adds	r3, #76	@ 0x4c
 800dd30:	4619      	mov	r1, r3
 800dd32:	68b8      	ldr	r0, [r7, #8]
 800dd34:	f7fd f972 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	db09      	blt.n	800dd52 <derive_mpi+0x82>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	334c      	adds	r3, #76	@ 0x4c
 800dd42:	461a      	mov	r2, r3
 800dd44:	68b9      	ldr	r1, [r7, #8]
 800dd46:	68b8      	ldr	r0, [r7, #8]
 800dd48:	f7fd fbd2 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800dd4c:	61f8      	str	r0, [r7, #28]
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	2b00      	cmp	r3, #0

cleanup:
 800dd52:	bf00      	nop
    return( ret );
 800dd54:	69fb      	ldr	r3, [r7, #28]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3720      	adds	r7, #32
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
	...

0800dd60 <ecdsa_verify_restartable>:
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
                                     const unsigned char *buf, size_t blen,
                                     const mbedtls_ecp_point *Q,
                                     const mbedtls_mpi *r, const mbedtls_mpi *s,
                                     mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b0a0      	sub	sp, #128	@ 0x80
 800dd64:	af04      	add	r7, sp, #16
 800dd66:	60f8      	str	r0, [r7, #12]
 800dd68:	60b9      	str	r1, [r7, #8]
 800dd6a:	607a      	str	r2, [r7, #4]
 800dd6c:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;
 800dd6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dd72:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dd74:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dd78:	667b      	str	r3, [r7, #100]	@ 0x64

    mbedtls_ecp_point_init( &R );
 800dd7a:	f107 0310 	add.w	r3, r7, #16
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 f927 	bl	800dfd2 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 800dd84:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7fc fa66 	bl	800a25a <mbedtls_mpi_init>
 800dd8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fc fa61 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 800dd98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fc fa5c 	bl	800a25a <mbedtls_mpi_init>
 800dda2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fc fa57 	bl	800a25a <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d101      	bne.n	800ddb8 <ecdsa_verify_restartable+0x58>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800ddb4:	4b60      	ldr	r3, [pc, #384]	@ (800df38 <ecdsa_verify_restartable+0x1d8>)
 800ddb6:	e0bb      	b.n	800df30 <ecdsa_verify_restartable+0x1d0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800ddb8:	2101      	movs	r1, #1
 800ddba:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800ddbc:	f7fd f9c9 	bl	800b152 <mbedtls_mpi_cmp_int>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	db18      	blt.n	800ddf8 <ecdsa_verify_restartable+0x98>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	334c      	adds	r3, #76	@ 0x4c
 800ddca:	4619      	mov	r1, r3
 800ddcc:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800ddce:	f7fd f925 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	da0f      	bge.n	800ddf8 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800ddd8:	2101      	movs	r1, #1
 800ddda:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800dddc:	f7fd f9b9 	bl	800b152 <mbedtls_mpi_cmp_int>
 800dde0:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	db08      	blt.n	800ddf8 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	334c      	adds	r3, #76	@ 0x4c
 800ddea:	4619      	mov	r1, r3
 800ddec:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800ddee:	f7fd f915 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	db02      	blt.n	800ddfe <ecdsa_verify_restartable+0x9e>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800ddf8:	4b50      	ldr	r3, [pc, #320]	@ (800df3c <ecdsa_verify_restartable+0x1dc>)
 800ddfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800ddfc:	e07e      	b.n	800defc <ecdsa_verify_restartable+0x19c>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 800ddfe:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	68ba      	ldr	r2, [r7, #8]
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7ff ff62 	bl	800dcd0 <derive_mpi>
 800de0c:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de10:	2b00      	cmp	r3, #0
 800de12:	d173      	bne.n	800defc <ecdsa_verify_restartable+0x19c>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800de1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800de1e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800de20:	4618      	mov	r0, r3
 800de22:	f7ff fd37 	bl	800d894 <mbedtls_mpi_inv_mod>
 800de26:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d166      	bne.n	800defc <ecdsa_verify_restartable+0x19c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 800de2e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800de32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800de36:	4619      	mov	r1, r3
 800de38:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800de3a:	f7fe ff8e 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800de3e:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de42:	2b00      	cmp	r3, #0
 800de44:	d15a      	bne.n	800defc <ecdsa_verify_restartable+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	334c      	adds	r3, #76	@ 0x4c
 800de4a:	461a      	mov	r2, r3
 800de4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800de4e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800de50:	f7ff fbb4 	bl	800d5bc <mbedtls_mpi_mod_mpi>
 800de54:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d14f      	bne.n	800defc <ecdsa_verify_restartable+0x19c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 800de5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800de60:	461a      	mov	r2, r3
 800de62:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800de64:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800de66:	f7fe ff78 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800de6a:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d144      	bne.n	800defc <ecdsa_verify_restartable+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	334c      	adds	r3, #76	@ 0x4c
 800de76:	461a      	mov	r2, r3
 800de78:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800de7a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800de7c:	f7ff fb9e 	bl	800d5bc <mbedtls_mpi_mod_mpi>
 800de80:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de84:	2b00      	cmp	r3, #0
 800de86:	d139      	bne.n	800defc <ecdsa_verify_restartable+0x19c>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800de8e:	f107 0110 	add.w	r1, r7, #16
 800de92:	2300      	movs	r3, #0
 800de94:	9302      	str	r3, [sp, #8]
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	4613      	mov	r3, r2
 800dea0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f002 fff4 	bl	8010e90 <mbedtls_ecp_muladd_restartable>
 800dea8:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800deaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800deac:	2b00      	cmp	r3, #0
 800deae:	d125      	bne.n	800defc <ecdsa_verify_restartable+0x19c>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 800deb0:	f107 0310 	add.w	r3, r7, #16
 800deb4:	4618      	mov	r0, r3
 800deb6:	f000 f9cb 	bl	800e250 <mbedtls_ecp_is_zero>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	d002      	beq.n	800dec6 <ecdsa_verify_restartable+0x166>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800dec0:	4b1e      	ldr	r3, [pc, #120]	@ (800df3c <ecdsa_verify_restartable+0x1dc>)
 800dec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800dec4:	e01a      	b.n	800defc <ecdsa_verify_restartable+0x19c>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800decc:	f107 0110 	add.w	r1, r7, #16
 800ded0:	f107 0310 	add.w	r3, r7, #16
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7ff fb71 	bl	800d5bc <mbedtls_mpi_mod_mpi>
 800deda:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800dedc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d10c      	bne.n	800defc <ecdsa_verify_restartable+0x19c>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 800dee2:	f107 0310 	add.w	r3, r7, #16
 800dee6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800dee8:	4618      	mov	r0, r3
 800deea:	f7fd f897 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d002      	beq.n	800defa <ecdsa_verify_restartable+0x19a>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800def4:	4b11      	ldr	r3, [pc, #68]	@ (800df3c <ecdsa_verify_restartable+0x1dc>)
 800def6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800def8:	e000      	b.n	800defc <ecdsa_verify_restartable+0x19c>
    }

cleanup:
 800defa:	bf00      	nop
    mbedtls_ecp_point_free( &R );
 800defc:	f107 0310 	add.w	r3, r7, #16
 800df00:	4618      	mov	r0, r3
 800df02:	f000 f8d1 	bl	800e0a8 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 800df06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7fc f9b8 	bl	800a280 <mbedtls_mpi_free>
 800df10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800df14:	4618      	mov	r0, r3
 800df16:	f7fc f9b3 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 800df1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800df1e:	4618      	mov	r0, r3
 800df20:	f7fc f9ae 	bl	800a280 <mbedtls_mpi_free>
 800df24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fc f9a9 	bl	800a280 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
 800df2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800df30:	4618      	mov	r0, r3
 800df32:	3770      	adds	r7, #112	@ 0x70
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	ffffb080 	.word	0xffffb080
 800df3c:	ffffb200 	.word	0xffffb200

0800df40 <mbedtls_ecdsa_verify>:
int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
                          const unsigned char *buf, size_t blen,
                          const mbedtls_ecp_point *Q,
                          const mbedtls_mpi *r,
                          const mbedtls_mpi *s)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b088      	sub	sp, #32
 800df44:	af04      	add	r7, sp, #16
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
 800df4c:	603b      	str	r3, [r7, #0]
    ECDSA_VALIDATE_RET( Q   != NULL );
    ECDSA_VALIDATE_RET( r   != NULL );
    ECDSA_VALIDATE_RET( s   != NULL );
    ECDSA_VALIDATE_RET( buf != NULL || blen == 0 );

    return( ecdsa_verify_restartable( grp, buf, blen, Q, r, s, NULL ) );
 800df4e:	2300      	movs	r3, #0
 800df50:	9302      	str	r3, [sp, #8]
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	9301      	str	r3, [sp, #4]
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	68b9      	ldr	r1, [r7, #8]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f7ff fefd 	bl	800dd60 <ecdsa_verify_restartable>
 800df66:	4603      	mov	r3, r0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <mbedtls_ecdsa_init>:

/*
 * Initialize context
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f87f 	bl	800e07c <mbedtls_ecp_keypair_init>
}
 800df7e:	bf00      	nop
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <mbedtls_ecdsa_free>:

/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b082      	sub	sp, #8
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d003      	beq.n	800df9c <mbedtls_ecdsa_free+0x16>
        return;

    mbedtls_ecp_keypair_free( ctx );
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 f8ed 	bl	800e174 <mbedtls_ecp_keypair_free>
 800df9a:	e000      	b.n	800df9e <mbedtls_ecdsa_free+0x18>
        return;
 800df9c:	bf00      	nop
}
 800df9e:	3708      	adds	r7, #8
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <ecp_get_type>:

/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
    if( grp->G.X.p == NULL )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <ecp_get_type+0x14>
        return( ECP_TYPE_NONE );
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	e006      	b.n	800dfc6 <ecp_get_type+0x22>

    if( grp->G.Y.p == NULL )
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d101      	bne.n	800dfc4 <ecp_get_type+0x20>
        return( ECP_TYPE_MONTGOMERY );
 800dfc0:	2302      	movs	r3, #2
 800dfc2:	e000      	b.n	800dfc6 <ecp_get_type+0x22>
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 800dfc4:	2301      	movs	r3, #1
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr

0800dfd2 <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b082      	sub	sp, #8
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fc f93c 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	330c      	adds	r3, #12
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7fc f937 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	3318      	adds	r3, #24
 800dff0:	4618      	mov	r0, r3
 800dff2:	f7fc f932 	bl	800a25a <mbedtls_mpi_init>
}
 800dff6:	bf00      	nop
 800dff8:	3708      	adds	r7, #8
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}

0800dffe <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
 800dffe:	b580      	push	{r7, lr}
 800e000:	b082      	sub	sp, #8
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	701a      	strb	r2, [r3, #0]
    mbedtls_mpi_init( &grp->P );
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	3304      	adds	r3, #4
 800e010:	4618      	mov	r0, r3
 800e012:	f7fc f922 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	3310      	adds	r3, #16
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fc f91d 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	331c      	adds	r3, #28
 800e024:	4618      	mov	r0, r3
 800e026:	f7fc f918 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	3328      	adds	r3, #40	@ 0x28
 800e02e:	4618      	mov	r0, r3
 800e030:	f7ff ffcf 	bl	800dfd2 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	334c      	adds	r3, #76	@ 0x4c
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fc f90e 	bl	800a25a <mbedtls_mpi_init>
    grp->pbits = 0;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	659a      	str	r2, [r3, #88]	@ 0x58
    grp->nbits = 0;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	65da      	str	r2, [r3, #92]	@ 0x5c
    grp->h = 0;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	661a      	str	r2, [r3, #96]	@ 0x60
    grp->modp = NULL;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	665a      	str	r2, [r3, #100]	@ 0x64
    grp->t_pre = NULL;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2200      	movs	r2, #0
 800e05a:	669a      	str	r2, [r3, #104]	@ 0x68
    grp->t_post = NULL;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2200      	movs	r2, #0
 800e060:	66da      	str	r2, [r3, #108]	@ 0x6c
    grp->t_data = NULL;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	671a      	str	r2, [r3, #112]	@ 0x70
    grp->T = NULL;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2200      	movs	r2, #0
 800e06c:	675a      	str	r2, [r3, #116]	@ 0x74
    grp->T_size = 0;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	679a      	str	r2, [r3, #120]	@ 0x78
}
 800e074:	bf00      	nop
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4618      	mov	r0, r3
 800e088:	f7ff ffb9 	bl	800dffe <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	337c      	adds	r3, #124	@ 0x7c
 800e090:	4618      	mov	r0, r3
 800e092:	f7fc f8e2 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	3388      	adds	r3, #136	@ 0x88
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7ff ff99 	bl	800dfd2 <mbedtls_ecp_point_init>
}
 800e0a0:	bf00      	nop
 800e0a2:	3708      	adds	r7, #8
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
    if( pt == NULL )
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00e      	beq.n	800e0d4 <mbedtls_ecp_point_free+0x2c>
        return;

    mbedtls_mpi_free( &( pt->X ) );
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7fc f8e1 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	330c      	adds	r3, #12
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fc f8dc 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	3318      	adds	r3, #24
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7fc f8d7 	bl	800a280 <mbedtls_mpi_free>
 800e0d2:	e000      	b.n	800e0d6 <mbedtls_ecp_point_free+0x2e>
        return;
 800e0d4:	bf00      	nop
}
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
    size_t i;

    if( grp == NULL )
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d040      	beq.n	800e16c <mbedtls_ecp_group_free+0x90>
        return;

    if( grp->h != 1 )
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	d018      	beq.n	800e124 <mbedtls_ecp_group_free+0x48>
    {
        mbedtls_mpi_free( &grp->P );
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fc f8c2 	bl	800a280 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3310      	adds	r3, #16
 800e100:	4618      	mov	r0, r3
 800e102:	f7fc f8bd 	bl	800a280 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	331c      	adds	r3, #28
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fc f8b8 	bl	800a280 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3328      	adds	r3, #40	@ 0x28
 800e114:	4618      	mov	r0, r3
 800e116:	f7ff ffc7 	bl	800e0a8 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	334c      	adds	r3, #76	@ 0x4c
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fc f8ae 	bl	800a280 <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d01a      	beq.n	800e162 <mbedtls_ecp_group_free+0x86>
    {
        for( i = 0; i < grp->T_size; i++ )
 800e12c:	2300      	movs	r3, #0
 800e12e:	60fb      	str	r3, [r7, #12]
 800e130:	e00d      	b.n	800e14e <mbedtls_ecp_group_free+0x72>
            mbedtls_ecp_point_free( &grp->T[i] );
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	4613      	mov	r3, r2
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	4413      	add	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	440b      	add	r3, r1
 800e142:	4618      	mov	r0, r3
 800e144:	f7ff ffb0 	bl	800e0a8 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	3301      	adds	r3, #1
 800e14c:	60fb      	str	r3, [r7, #12]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e152:	68fa      	ldr	r2, [r7, #12]
 800e154:	429a      	cmp	r2, r3
 800e156:	d3ec      	bcc.n	800e132 <mbedtls_ecp_group_free+0x56>
        mbedtls_free( grp->T );
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e15c:	4618      	mov	r0, r3
 800e15e:	f007 fb5d 	bl	801581c <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 800e162:	217c      	movs	r1, #124	@ 0x7c
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f005 fb33 	bl	80137d0 <mbedtls_platform_zeroize>
 800e16a:	e000      	b.n	800e16e <mbedtls_ecp_group_free+0x92>
        return;
 800e16c:	bf00      	nop
}
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
    if( key == NULL )
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00e      	beq.n	800e1a0 <mbedtls_ecp_keypair_free+0x2c>
        return;

    mbedtls_ecp_group_free( &key->grp );
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	4618      	mov	r0, r3
 800e186:	f7ff ffa9 	bl	800e0dc <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	337c      	adds	r3, #124	@ 0x7c
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fc f876 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	3388      	adds	r3, #136	@ 0x88
 800e198:	4618      	mov	r0, r3
 800e19a:	f7ff ff85 	bl	800e0a8 <mbedtls_ecp_point_free>
 800e19e:	e000      	b.n	800e1a2 <mbedtls_ecp_keypair_free+0x2e>
        return;
 800e1a0:	bf00      	nop
}
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b084      	sub	sp, #16
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	683a      	ldr	r2, [r7, #0]
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fc f930 	bl	800a41e <mbedtls_mpi_copy>
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d119      	bne.n	800e1fa <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f103 020c 	add.w	r2, r3, #12
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	330c      	adds	r3, #12
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	4610      	mov	r0, r2
 800e1d4:	f7fc f923 	bl	800a41e <mbedtls_mpi_copy>
 800e1d8:	60f8      	str	r0, [r7, #12]
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d10c      	bne.n	800e1fa <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f103 0218 	add.w	r2, r3, #24
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	3318      	adds	r3, #24
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	f7fc f916 	bl	800a41e <mbedtls_mpi_copy>
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2b00      	cmp	r3, #0

cleanup:
 800e1f8:	bf00      	nop
    return( ret );
 800e1fa:	68fb      	ldr	r3, [r7, #12]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	2101      	movs	r1, #1
 800e210:	4618      	mov	r0, r3
 800e212:	f7fc fa63 	bl	800a6dc <mbedtls_mpi_lset>
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d113      	bne.n	800e246 <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	330c      	adds	r3, #12
 800e222:	2101      	movs	r1, #1
 800e224:	4618      	mov	r0, r3
 800e226:	f7fc fa59 	bl	800a6dc <mbedtls_mpi_lset>
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d109      	bne.n	800e246 <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	3318      	adds	r3, #24
 800e236:	2100      	movs	r1, #0
 800e238:	4618      	mov	r0, r3
 800e23a:	f7fc fa4f 	bl	800a6dc <mbedtls_mpi_lset>
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b00      	cmp	r3, #0

cleanup:
 800e244:	bf00      	nop
    return( ret );
 800e246:	68fb      	ldr	r3, [r7, #12]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3710      	adds	r7, #16
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	3318      	adds	r3, #24
 800e25c:	2100      	movs	r1, #0
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fc ff77 	bl	800b152 <mbedtls_mpi_cmp_int>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	bf0c      	ite	eq
 800e26a:	2301      	moveq	r3, #1
 800e26c:	2300      	movne	r3, #0
 800e26e:	b2db      	uxtb	r3, r3
}
 800e270:	4618      	mov	r0, r3
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <ecp_modp>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
    int ret;

    if( grp->modp == NULL )
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e286:	2b00      	cmp	r3, #0
 800e288:	d108      	bne.n	800e29c <ecp_modp+0x24>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	3304      	adds	r3, #4
 800e28e:	461a      	mov	r2, r3
 800e290:	6879      	ldr	r1, [r7, #4]
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff f992 	bl	800d5bc <mbedtls_mpi_mod_mpi>
 800e298:	4603      	mov	r3, r0
 800e29a:	e04b      	b.n	800e334 <ecp_modp+0xbc>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	da06      	bge.n	800e2b2 <ecp_modp+0x3a>
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7fc ff53 	bl	800b152 <mbedtls_mpi_cmp_int>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d108      	bne.n	800e2c4 <ecp_modp+0x4c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7fc fb08 	bl	800a8c8 <mbedtls_mpi_bitlen>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2be:	005b      	lsls	r3, r3, #1
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d901      	bls.n	800e2c8 <ecp_modp+0x50>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e2c4:	4b1d      	ldr	r3, [pc, #116]	@ (800e33c <ecp_modp+0xc4>)
 800e2c6:	e035      	b.n	800e334 <ecp_modp+0xbc>
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	4798      	blx	r3
 800e2d0:	60f8      	str	r0, [r7, #12]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d12c      	bne.n	800e332 <ecp_modp+0xba>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800e2d8:	e00a      	b.n	800e2f0 <ecp_modp+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	461a      	mov	r2, r3
 800e2e0:	6879      	ldr	r1, [r7, #4]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f7fd f8c0 	bl	800b468 <mbedtls_mpi_add_mpi>
 800e2e8:	60f8      	str	r0, [r7, #12]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d120      	bne.n	800e332 <ecp_modp+0xba>
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	da12      	bge.n	800e31e <ecp_modp+0xa6>
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7fc ff29 	bl	800b152 <mbedtls_mpi_cmp_int>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1e9      	bne.n	800e2da <ecp_modp+0x62>

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800e306:	e00a      	b.n	800e31e <ecp_modp+0xa6>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	3304      	adds	r3, #4
 800e30c:	461a      	mov	r2, r3
 800e30e:	6879      	ldr	r1, [r7, #4]
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7fd f849 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d109      	bne.n	800e332 <ecp_modp+0xba>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	3304      	adds	r3, #4
 800e322:	4619      	mov	r1, r3
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7fc fe79 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	daeb      	bge.n	800e308 <ecp_modp+0x90>

cleanup:
 800e330:	bf00      	nop
    return( ret );
 800e332:	68fb      	ldr	r3, [r7, #12]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	ffffb080 	.word	0xffffb080

0800e340 <ecp_normalize_jac>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b08a      	sub	sp, #40	@ 0x28
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	3318      	adds	r3, #24
 800e34e:	2100      	movs	r1, #0
 800e350:	4618      	mov	r0, r3
 800e352:	f7fc fefe 	bl	800b152 <mbedtls_mpi_cmp_int>
 800e356:	4603      	mov	r3, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d101      	bne.n	800e360 <ecp_normalize_jac+0x20>
        return( 0 );
 800e35c:	2300      	movs	r3, #0
 800e35e:	e09b      	b.n	800e498 <ecp_normalize_jac+0x158>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800e360:	f107 0318 	add.w	r3, r7, #24
 800e364:	4618      	mov	r0, r3
 800e366:	f7fb ff78 	bl	800a25a <mbedtls_mpi_init>
 800e36a:	f107 030c 	add.w	r3, r7, #12
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fb ff73 	bl	800a25a <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	f103 0118 	add.w	r1, r3, #24
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	1d1a      	adds	r2, r3, #4
 800e37e:	f107 0318 	add.w	r3, r7, #24
 800e382:	4618      	mov	r0, r3
 800e384:	f7ff fa86 	bl	800d894 <mbedtls_mpi_inv_mod>
 800e388:	6278      	str	r0, [r7, #36]	@ 0x24
 800e38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d178      	bne.n	800e482 <ecp_normalize_jac+0x142>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 800e390:	f107 0218 	add.w	r2, r7, #24
 800e394:	f107 0118 	add.w	r1, r7, #24
 800e398:	f107 030c 	add.w	r3, r7, #12
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fe fcdc 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e3a2:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d16b      	bne.n	800e482 <ecp_normalize_jac+0x142>
 800e3aa:	f107 030c 	add.w	r3, r7, #12
 800e3ae:	6879      	ldr	r1, [r7, #4]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff ff61 	bl	800e278 <ecp_modp>
 800e3b6:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d161      	bne.n	800e482 <ecp_normalize_jac+0x142>
 800e3be:	4b38      	ldr	r3, [pc, #224]	@ (800e4a0 <ecp_normalize_jac+0x160>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	4a36      	ldr	r2, [pc, #216]	@ (800e4a0 <ecp_normalize_jac+0x160>)
 800e3c6:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	6839      	ldr	r1, [r7, #0]
 800e3cc:	f107 020c 	add.w	r2, r7, #12
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fe fcc2 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e3d6:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d151      	bne.n	800e482 <ecp_normalize_jac+0x142>
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	6879      	ldr	r1, [r7, #4]
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff ff48 	bl	800e278 <ecp_modp>
 800e3e8:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d148      	bne.n	800e482 <ecp_normalize_jac+0x142>
 800e3f0:	4b2b      	ldr	r3, [pc, #172]	@ (800e4a0 <ecp_normalize_jac+0x160>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	4a2a      	ldr	r2, [pc, #168]	@ (800e4a0 <ecp_normalize_jac+0x160>)
 800e3f8:	6013      	str	r3, [r2, #0]

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	f103 000c 	add.w	r0, r3, #12
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	330c      	adds	r3, #12
 800e404:	f107 020c 	add.w	r2, r7, #12
 800e408:	4619      	mov	r1, r3
 800e40a:	f7fe fca6 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e40e:	6278      	str	r0, [r7, #36]	@ 0x24
 800e410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e412:	2b00      	cmp	r3, #0
 800e414:	d135      	bne.n	800e482 <ecp_normalize_jac+0x142>
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	330c      	adds	r3, #12
 800e41a:	6879      	ldr	r1, [r7, #4]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff ff2b 	bl	800e278 <ecp_modp>
 800e422:	6278      	str	r0, [r7, #36]	@ 0x24
 800e424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e426:	2b00      	cmp	r3, #0
 800e428:	d12b      	bne.n	800e482 <ecp_normalize_jac+0x142>
 800e42a:	4b1d      	ldr	r3, [pc, #116]	@ (800e4a0 <ecp_normalize_jac+0x160>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	3301      	adds	r3, #1
 800e430:	4a1b      	ldr	r2, [pc, #108]	@ (800e4a0 <ecp_normalize_jac+0x160>)
 800e432:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	f103 000c 	add.w	r0, r3, #12
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	330c      	adds	r3, #12
 800e43e:	f107 0218 	add.w	r2, r7, #24
 800e442:	4619      	mov	r1, r3
 800e444:	f7fe fc89 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e448:	6278      	str	r0, [r7, #36]	@ 0x24
 800e44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d118      	bne.n	800e482 <ecp_normalize_jac+0x142>
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	330c      	adds	r3, #12
 800e454:	6879      	ldr	r1, [r7, #4]
 800e456:	4618      	mov	r0, r3
 800e458:	f7ff ff0e 	bl	800e278 <ecp_modp>
 800e45c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e460:	2b00      	cmp	r3, #0
 800e462:	d10e      	bne.n	800e482 <ecp_normalize_jac+0x142>
 800e464:	4b0e      	ldr	r3, [pc, #56]	@ (800e4a0 <ecp_normalize_jac+0x160>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	3301      	adds	r3, #1
 800e46a:	4a0d      	ldr	r2, [pc, #52]	@ (800e4a0 <ecp_normalize_jac+0x160>)
 800e46c:	6013      	str	r3, [r2, #0]

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	3318      	adds	r3, #24
 800e472:	2101      	movs	r1, #1
 800e474:	4618      	mov	r0, r3
 800e476:	f7fc f931 	bl	800a6dc <mbedtls_mpi_lset>
 800e47a:	6278      	str	r0, [r7, #36]	@ 0x24
 800e47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47e:	2b00      	cmp	r3, #0

cleanup:
 800e480:	bf00      	nop

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800e482:	f107 0318 	add.w	r3, r7, #24
 800e486:	4618      	mov	r0, r3
 800e488:	f7fb fefa 	bl	800a280 <mbedtls_mpi_free>
 800e48c:	f107 030c 	add.w	r3, r7, #12
 800e490:	4618      	mov	r0, r3
 800e492:	f7fb fef5 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800e496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3728      	adds	r7, #40	@ 0x28
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	2400257c 	.word	0x2400257c

0800e4a4 <ecp_normalize_jac_many>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b090      	sub	sp, #64	@ 0x40
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d807      	bhi.n	800e4c6 <ecp_normalize_jac_many+0x22>
        return( ecp_normalize_jac( grp, *T ) );
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	f7ff ff3f 	bl	800e340 <ecp_normalize_jac>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	e1de      	b.n	800e884 <ecp_normalize_jac_many+0x3e0>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 800e4c6:	210c      	movs	r1, #12
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f007 f98b 	bl	80157e4 <calloc>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d101      	bne.n	800e4dc <ecp_normalize_jac_many+0x38>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 800e4d8:	4b4b      	ldr	r3, [pc, #300]	@ (800e608 <ecp_normalize_jac_many+0x164>)
 800e4da:	e1d3      	b.n	800e884 <ecp_normalize_jac_many+0x3e0>

    for( i = 0; i < T_size; i++ )
 800e4dc:	2300      	movs	r3, #0
 800e4de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e4e0:	e00d      	b.n	800e4fe <ecp_normalize_jac_many+0x5a>
        mbedtls_mpi_init( &c[i] );
 800e4e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4e4:	4613      	mov	r3, r2
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	4413      	add	r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4f0:	4413      	add	r3, r2
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fb feb1 	bl	800a25a <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4fa:	3301      	adds	r3, #1
 800e4fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e4fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	429a      	cmp	r2, r3
 800e504:	d3ed      	bcc.n	800e4e2 <ecp_normalize_jac_many+0x3e>

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800e506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fb fea5 	bl	800a25a <mbedtls_mpi_init>
 800e510:	f107 031c 	add.w	r3, r7, #28
 800e514:	4618      	mov	r0, r3
 800e516:	f7fb fea0 	bl	800a25a <mbedtls_mpi_init>
 800e51a:	f107 0310 	add.w	r3, r7, #16
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fb fe9b 	bl	800a25a <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3318      	adds	r3, #24
 800e52a:	4619      	mov	r1, r3
 800e52c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e52e:	f7fb ff76 	bl	800a41e <mbedtls_mpi_copy>
 800e532:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e536:	2b00      	cmp	r3, #0
 800e538:	f040 817c 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
    for( i = 1; i < T_size; i++ )
 800e53c:	2301      	movs	r3, #1
 800e53e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e540:	e036      	b.n	800e5b0 <ecp_normalize_jac_many+0x10c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 800e542:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e544:	4613      	mov	r3, r2
 800e546:	005b      	lsls	r3, r3, #1
 800e548:	4413      	add	r3, r2
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	461a      	mov	r2, r3
 800e54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e550:	1898      	adds	r0, r3, r2
 800e552:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e554:	4613      	mov	r3, r2
 800e556:	005b      	lsls	r3, r3, #1
 800e558:	4413      	add	r3, r2
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	3b0c      	subs	r3, #12
 800e55e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e560:	18d1      	adds	r1, r2, r3
 800e562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	68ba      	ldr	r2, [r7, #8]
 800e568:	4413      	add	r3, r2
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	3318      	adds	r3, #24
 800e56e:	461a      	mov	r2, r3
 800e570:	f7fe fbf3 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e574:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f040 815b 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
        MOD_MUL( c[i] );
 800e57e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e580:	4613      	mov	r3, r2
 800e582:	005b      	lsls	r3, r3, #1
 800e584:	4413      	add	r3, r2
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	461a      	mov	r2, r3
 800e58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e58c:	4413      	add	r3, r2
 800e58e:	68f9      	ldr	r1, [r7, #12]
 800e590:	4618      	mov	r0, r3
 800e592:	f7ff fe71 	bl	800e278 <ecp_modp>
 800e596:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f040 814a 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
 800e5a0:	4b1a      	ldr	r3, [pc, #104]	@ (800e60c <ecp_normalize_jac_many+0x168>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	4a19      	ldr	r2, [pc, #100]	@ (800e60c <ecp_normalize_jac_many+0x168>)
 800e5a8:	6013      	str	r3, [r2, #0]
    for( i = 1; i < T_size; i++ )
 800e5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e5b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d3c4      	bcc.n	800e542 <ecp_normalize_jac_many+0x9e>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 800e5b8:	687a      	ldr	r2, [r7, #4]
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	4413      	add	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	3b0c      	subs	r3, #12
 800e5c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5c6:	18d1      	adds	r1, r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	1d1a      	adds	r2, r3, #4
 800e5cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7ff f95f 	bl	800d894 <mbedtls_mpi_inv_mod>
 800e5d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e5d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	f040 812a 	bne.w	800e834 <ecp_normalize_jac_many+0x390>

    for( i = T_size - 1; ; i-- )
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	63bb      	str	r3, [r7, #56]	@ 0x38
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
 800e5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d111      	bne.n	800e610 <ecp_normalize_jac_many+0x16c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 800e5ec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e5f0:	f107 031c 	add.w	r3, r7, #28
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fb ff11 	bl	800a41e <mbedtls_mpi_copy>
 800e5fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e600:	2b00      	cmp	r3, #0
 800e602:	d04c      	beq.n	800e69e <ecp_normalize_jac_many+0x1fa>
 800e604:	e116      	b.n	800e834 <ecp_normalize_jac_many+0x390>
 800e606:	bf00      	nop
 800e608:	ffffb280 	.word	0xffffb280
 800e60c:	2400257c 	.word	0x2400257c
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 800e610:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e612:	4613      	mov	r3, r2
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	4413      	add	r3, r2
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	3b0c      	subs	r3, #12
 800e61c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e61e:	441a      	add	r2, r3
 800e620:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e624:	f107 031c 	add.w	r3, r7, #28
 800e628:	4618      	mov	r0, r3
 800e62a:	f7fe fb96 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e62e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e632:	2b00      	cmp	r3, #0
 800e634:	f040 80fe 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
 800e638:	f107 031c 	add.w	r3, r7, #28
 800e63c:	68f9      	ldr	r1, [r7, #12]
 800e63e:	4618      	mov	r0, r3
 800e640:	f7ff fe1a 	bl	800e278 <ecp_modp>
 800e644:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f040 80f3 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
 800e64e:	4b8f      	ldr	r3, [pc, #572]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	3301      	adds	r3, #1
 800e654:	4a8d      	ldr	r2, [pc, #564]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e656:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 800e658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65a:	009b      	lsls	r3, r3, #2
 800e65c:	68ba      	ldr	r2, [r7, #8]
 800e65e:	4413      	add	r3, r2
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	f103 0218 	add.w	r2, r3, #24
 800e666:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e66a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe fb73 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e674:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f040 80db 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
 800e67e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e682:	68f9      	ldr	r1, [r7, #12]
 800e684:	4618      	mov	r0, r3
 800e686:	f7ff fdf7 	bl	800e278 <ecp_modp>
 800e68a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e68c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e68e:	2b00      	cmp	r3, #0
 800e690:	f040 80d0 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
 800e694:	4b7d      	ldr	r3, [pc, #500]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3301      	adds	r3, #1
 800e69a:	4a7c      	ldr	r2, [pc, #496]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e69c:	6013      	str	r3, [r2, #0]
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 800e69e:	f107 021c 	add.w	r2, r7, #28
 800e6a2:	f107 011c 	add.w	r1, r7, #28
 800e6a6:	f107 0310 	add.w	r3, r7, #16
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fe fb55 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e6b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e6b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f040 80bd 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
 800e6ba:	f107 0310 	add.w	r3, r7, #16
 800e6be:	68f9      	ldr	r1, [r7, #12]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7ff fdd9 	bl	800e278 <ecp_modp>
 800e6c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f040 80b2 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
 800e6d0:	4b6e      	ldr	r3, [pc, #440]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	4a6d      	ldr	r2, [pc, #436]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e6d8:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 800e6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6dc:	009b      	lsls	r3, r3, #2
 800e6de:	68ba      	ldr	r2, [r7, #8]
 800e6e0:	4413      	add	r3, r2
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	f107 0310 	add.w	r3, r7, #16
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	f7fe fb2f 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e6fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e700:	2b00      	cmp	r3, #0
 800e702:	f040 8097 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
 800e706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	4413      	add	r3, r2
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	68f9      	ldr	r1, [r7, #12]
 800e712:	4618      	mov	r0, r3
 800e714:	f7ff fdb0 	bl	800e278 <ecp_modp>
 800e718:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	f040 8089 	bne.w	800e834 <ecp_normalize_jac_many+0x390>
 800e722:	4b5a      	ldr	r3, [pc, #360]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	3301      	adds	r3, #1
 800e728:	4a58      	ldr	r2, [pc, #352]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e72a:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 800e72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e72e:	009b      	lsls	r3, r3, #2
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	4413      	add	r3, r2
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f103 000c 	add.w	r0, r3, #12
 800e73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	4413      	add	r3, r2
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	330c      	adds	r3, #12
 800e746:	f107 0210 	add.w	r2, r7, #16
 800e74a:	4619      	mov	r1, r3
 800e74c:	f7fe fb05 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e750:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e754:	2b00      	cmp	r3, #0
 800e756:	d16d      	bne.n	800e834 <ecp_normalize_jac_many+0x390>
 800e758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	4413      	add	r3, r2
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	330c      	adds	r3, #12
 800e764:	68f9      	ldr	r1, [r7, #12]
 800e766:	4618      	mov	r0, r3
 800e768:	f7ff fd86 	bl	800e278 <ecp_modp>
 800e76c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e770:	2b00      	cmp	r3, #0
 800e772:	d15f      	bne.n	800e834 <ecp_normalize_jac_many+0x390>
 800e774:	4b45      	ldr	r3, [pc, #276]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	3301      	adds	r3, #1
 800e77a:	4a44      	ldr	r2, [pc, #272]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e77c:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 800e77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	4413      	add	r3, r2
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f103 000c 	add.w	r0, r3, #12
 800e78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	4413      	add	r3, r2
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	330c      	adds	r3, #12
 800e798:	f107 021c 	add.w	r2, r7, #28
 800e79c:	4619      	mov	r1, r3
 800e79e:	f7fe fadc 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e7a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e7a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d144      	bne.n	800e834 <ecp_normalize_jac_many+0x390>
 800e7aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	330c      	adds	r3, #12
 800e7b6:	68f9      	ldr	r1, [r7, #12]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f7ff fd5d 	bl	800e278 <ecp_modp>
 800e7be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d136      	bne.n	800e834 <ecp_normalize_jac_many+0x390>
 800e7c6:	4b31      	ldr	r3, [pc, #196]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	3301      	adds	r3, #1
 800e7cc:	4a2f      	ldr	r2, [pc, #188]	@ (800e88c <ecp_normalize_jac_many+0x3e8>)
 800e7ce:	6013      	str	r3, [r2, #0]
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 800e7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	4413      	add	r3, r2
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	689b      	ldr	r3, [r3, #8]
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4610      	mov	r0, r2
 800e7e4:	f7fb fdb5 	bl	800a352 <mbedtls_mpi_shrink>
 800e7e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e7ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d121      	bne.n	800e834 <ecp_normalize_jac_many+0x390>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 800e7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	68ba      	ldr	r2, [r7, #8]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f103 020c 	add.w	r2, r3, #12
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	689b      	ldr	r3, [r3, #8]
 800e802:	4619      	mov	r1, r3
 800e804:	4610      	mov	r0, r2
 800e806:	f7fb fda4 	bl	800a352 <mbedtls_mpi_shrink>
 800e80a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d110      	bne.n	800e834 <ecp_normalize_jac_many+0x390>
        mbedtls_mpi_free( &T[i]->Z );
 800e812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	4413      	add	r3, r2
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	3318      	adds	r3, #24
 800e81e:	4618      	mov	r0, r3
 800e820:	f7fb fd2e 	bl	800a280 <mbedtls_mpi_free>

        if( i == 0 )
 800e824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e826:	2b00      	cmp	r3, #0
 800e828:	d003      	beq.n	800e832 <ecp_normalize_jac_many+0x38e>
    for( i = T_size - 1; ; i-- )
 800e82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82c:	3b01      	subs	r3, #1
 800e82e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if( i == 0 ) {
 800e830:	e6d9      	b.n	800e5e6 <ecp_normalize_jac_many+0x142>
            break;
 800e832:	bf00      	nop
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800e834:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e838:	4618      	mov	r0, r3
 800e83a:	f7fb fd21 	bl	800a280 <mbedtls_mpi_free>
 800e83e:	f107 031c 	add.w	r3, r7, #28
 800e842:	4618      	mov	r0, r3
 800e844:	f7fb fd1c 	bl	800a280 <mbedtls_mpi_free>
 800e848:	f107 0310 	add.w	r3, r7, #16
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fb fd17 	bl	800a280 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800e852:	2300      	movs	r3, #0
 800e854:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e856:	e00d      	b.n	800e874 <ecp_normalize_jac_many+0x3d0>
        mbedtls_mpi_free( &c[i] );
 800e858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e85a:	4613      	mov	r3, r2
 800e85c:	005b      	lsls	r3, r3, #1
 800e85e:	4413      	add	r3, r2
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	461a      	mov	r2, r3
 800e864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e866:	4413      	add	r3, r2
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fb fd09 	bl	800a280 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800e86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e870:	3301      	adds	r3, #1
 800e872:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e874:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d3ed      	bcc.n	800e858 <ecp_normalize_jac_many+0x3b4>
    mbedtls_free( c );
 800e87c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e87e:	f006 ffcd 	bl	801581c <free>

    return( ret );
 800e882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e884:	4618      	mov	r0, r3
 800e886:	3740      	adds	r7, #64	@ 0x40
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	2400257c 	.word	0x2400257c

0800e890 <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b08a      	sub	sp, #40	@ 0x28
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	4613      	mov	r3, r2
 800e89c:	71fb      	strb	r3, [r7, #7]
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
 800e89e:	f107 0314 	add.w	r3, r7, #20
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	f7fb fcd9 	bl	800a25a <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	1d19      	adds	r1, r3, #4
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	f103 020c 	add.w	r2, r3, #12
 800e8b2:	f107 0314 	add.w	r3, r7, #20
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fc fe1a 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800e8bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d11e      	bne.n	800e902 <ecp_safe_invert_jac+0x72>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	330c      	adds	r3, #12
 800e8c8:	2100      	movs	r1, #0
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7fc fc41 	bl	800b152 <mbedtls_mpi_cmp_int>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	bf14      	ite	ne
 800e8d6:	2301      	movne	r3, #1
 800e8d8:	2300      	moveq	r3, #0
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	f103 000c 	add.w	r0, r3, #12
 800e8e6:	79fa      	ldrb	r2, [r7, #7]
 800e8e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e8ec:	4013      	ands	r3, r2
 800e8ee:	b2da      	uxtb	r2, r3
 800e8f0:	f107 0314 	add.w	r3, r7, #20
 800e8f4:	4619      	mov	r1, r3
 800e8f6:	f7fb fdee 	bl	800a4d6 <mbedtls_mpi_safe_cond_assign>
 800e8fa:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fe:	2b00      	cmp	r3, #0

cleanup:
 800e900:	bf00      	nop
    mbedtls_mpi_free( &mQY );
 800e902:	f107 0314 	add.w	r3, r7, #20
 800e906:	4618      	mov	r0, r3
 800e908:	f7fb fcba 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800e90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3728      	adds	r7, #40	@ 0x28
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
	...

0800e918 <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b092      	sub	sp, #72	@ 0x48
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_mpi M, S, T, U;

#if defined(MBEDTLS_SELF_TEST)
    dbl_count++;
 800e924:	4b7e      	ldr	r3, [pc, #504]	@ (800eb20 <ecp_double_jac+0x208>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	3301      	adds	r3, #1
 800e92a:	4a7d      	ldr	r2, [pc, #500]	@ (800eb20 <ecp_double_jac+0x208>)
 800e92c:	6013      	str	r3, [r2, #0]
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 800e92e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800e932:	4618      	mov	r0, r3
 800e934:	f7fb fc91 	bl	800a25a <mbedtls_mpi_init>
 800e938:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7fb fc8c 	bl	800a25a <mbedtls_mpi_init>
 800e942:	f107 0320 	add.w	r3, r7, #32
 800e946:	4618      	mov	r0, r3
 800e948:	f7fb fc87 	bl	800a25a <mbedtls_mpi_init>
 800e94c:	f107 0314 	add.w	r3, r7, #20
 800e950:	4618      	mov	r0, r3
 800e952:	f7fb fc82 	bl	800a25a <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	699b      	ldr	r3, [r3, #24]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	f040 80b5 	bne.w	800eaca <ecp_double_jac+0x1b2>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f103 0118 	add.w	r1, r3, #24
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f103 0218 	add.w	r2, r3, #24
 800e96c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e970:	4618      	mov	r0, r3
 800e972:	f7fe f9f2 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800e976:	6478      	str	r0, [r7, #68]	@ 0x44
 800e978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	f040 838b 	bne.w	800f096 <ecp_double_jac+0x77e>
 800e980:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e984:	68f9      	ldr	r1, [r7, #12]
 800e986:	4618      	mov	r0, r3
 800e988:	f7ff fc76 	bl	800e278 <ecp_modp>
 800e98c:	6478      	str	r0, [r7, #68]	@ 0x44
 800e98e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e990:	2b00      	cmp	r3, #0
 800e992:	f040 8380 	bne.w	800f096 <ecp_double_jac+0x77e>
 800e996:	4b63      	ldr	r3, [pc, #396]	@ (800eb24 <ecp_double_jac+0x20c>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	3301      	adds	r3, #1
 800e99c:	4a61      	ldr	r2, [pc, #388]	@ (800eb24 <ecp_double_jac+0x20c>)
 800e99e:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 800e9a0:	6879      	ldr	r1, [r7, #4]
 800e9a2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e9a6:	f107 0320 	add.w	r3, r7, #32
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fc fd5c 	bl	800b468 <mbedtls_mpi_add_mpi>
 800e9b0:	6478      	str	r0, [r7, #68]	@ 0x44
 800e9b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f040 836e 	bne.w	800f096 <ecp_double_jac+0x77e>
 800e9ba:	e00d      	b.n	800e9d8 <ecp_double_jac+0xc0>
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	1d1a      	adds	r2, r3, #4
 800e9c0:	f107 0120 	add.w	r1, r7, #32
 800e9c4:	f107 0320 	add.w	r3, r7, #32
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7fc fced 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800e9ce:	6478      	str	r0, [r7, #68]	@ 0x44
 800e9d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	f040 835f 	bne.w	800f096 <ecp_double_jac+0x77e>
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	1d1a      	adds	r2, r3, #4
 800e9dc:	f107 0320 	add.w	r3, r7, #32
 800e9e0:	4611      	mov	r1, r2
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7fc fb1a 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	dae6      	bge.n	800e9bc <ecp_double_jac+0xa4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 800e9ee:	6879      	ldr	r1, [r7, #4]
 800e9f0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e9f4:	f107 0314 	add.w	r3, r7, #20
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7fc fd79 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800e9fe:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	f040 8347 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ea08:	e00d      	b.n	800ea26 <ecp_double_jac+0x10e>
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	1d1a      	adds	r2, r3, #4
 800ea0e:	f107 0114 	add.w	r1, r7, #20
 800ea12:	f107 0314 	add.w	r3, r7, #20
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fc fd26 	bl	800b468 <mbedtls_mpi_add_mpi>
 800ea1c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f040 8338 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	da08      	bge.n	800ea3e <ecp_double_jac+0x126>
 800ea2c:	f107 0314 	add.w	r3, r7, #20
 800ea30:	2100      	movs	r1, #0
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7fc fb8d 	bl	800b152 <mbedtls_mpi_cmp_int>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1e5      	bne.n	800ea0a <ecp_double_jac+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 800ea3e:	f107 0214 	add.w	r2, r7, #20
 800ea42:	f107 0120 	add.w	r1, r7, #32
 800ea46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe f985 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ea50:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f040 831e 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ea5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ea5e:	68f9      	ldr	r1, [r7, #12]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7ff fc09 	bl	800e278 <ecp_modp>
 800ea66:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f040 8313 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ea70:	4b2c      	ldr	r3, [pc, #176]	@ (800eb24 <ecp_double_jac+0x20c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	3301      	adds	r3, #1
 800ea76:	4a2b      	ldr	r2, [pc, #172]	@ (800eb24 <ecp_double_jac+0x20c>)
 800ea78:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800ea7a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ea7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ea82:	2203      	movs	r2, #3
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fe fa11 	bl	800ceac <mbedtls_mpi_mul_int>
 800ea8a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f040 8301 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ea94:	e00d      	b.n	800eab2 <ecp_double_jac+0x19a>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	1d1a      	adds	r2, r3, #4
 800ea9a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ea9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fc fc80 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800eaa8:	6478      	str	r0, [r7, #68]	@ 0x44
 800eaaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f040 82f2 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	1d1a      	adds	r2, r3, #4
 800eab6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eaba:	4611      	mov	r1, r2
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fc faad 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	dae6      	bge.n	800ea96 <ecp_double_jac+0x17e>
 800eac8:	e0d6      	b.n	800ec78 <ecp_double_jac+0x360>
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 800eaca:	6879      	ldr	r1, [r7, #4]
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fe f941 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ead8:	6478      	str	r0, [r7, #68]	@ 0x44
 800eada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f040 82da 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eae2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eae6:	68f9      	ldr	r1, [r7, #12]
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff fbc5 	bl	800e278 <ecp_modp>
 800eaee:	6478      	str	r0, [r7, #68]	@ 0x44
 800eaf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f040 82cf 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eaf8:	4b0a      	ldr	r3, [pc, #40]	@ (800eb24 <ecp_double_jac+0x20c>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	3301      	adds	r3, #1
 800eafe:	4a09      	ldr	r2, [pc, #36]	@ (800eb24 <ecp_double_jac+0x20c>)
 800eb00:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800eb02:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eb06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eb0a:	2203      	movs	r2, #3
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f7fe f9cd 	bl	800ceac <mbedtls_mpi_mul_int>
 800eb12:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f040 82bd 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eb1c:	e012      	b.n	800eb44 <ecp_double_jac+0x22c>
 800eb1e:	bf00      	nop
 800eb20:	24002578 	.word	0x24002578
 800eb24:	2400257c 	.word	0x2400257c
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	1d1a      	adds	r2, r3, #4
 800eb2c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800eb30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eb34:	4618      	mov	r0, r3
 800eb36:	f7fc fc37 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800eb3a:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f040 82a9 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	1d1a      	adds	r2, r3, #4
 800eb48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eb4c:	4611      	mov	r1, r2
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fc fa64 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	dae6      	bge.n	800eb28 <ecp_double_jac+0x210>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	3310      	adds	r3, #16
 800eb5e:	2100      	movs	r1, #0
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7fc faf6 	bl	800b152 <mbedtls_mpi_cmp_int>
 800eb66:	4603      	mov	r3, r0
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	f000 8085 	beq.w	800ec78 <ecp_double_jac+0x360>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f103 0118 	add.w	r1, r3, #24
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f103 0218 	add.w	r2, r3, #24
 800eb7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fe f8eb 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800eb84:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f040 8284 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eb8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb92:	68f9      	ldr	r1, [r7, #12]
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7ff fb6f 	bl	800e278 <ecp_modp>
 800eb9a:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f040 8279 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eba4:	4bb0      	ldr	r3, [pc, #704]	@ (800ee68 <ecp_double_jac+0x550>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	4aaf      	ldr	r2, [pc, #700]	@ (800ee68 <ecp_double_jac+0x550>)
 800ebac:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 800ebae:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ebb2:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ebb6:	f107 0320 	add.w	r3, r7, #32
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fe f8cd 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ebc0:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f040 8266 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ebca:	f107 0320 	add.w	r3, r7, #32
 800ebce:	68f9      	ldr	r1, [r7, #12]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7ff fb51 	bl	800e278 <ecp_modp>
 800ebd6:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f040 825b 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ebe0:	4ba1      	ldr	r3, [pc, #644]	@ (800ee68 <ecp_double_jac+0x550>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	4aa0      	ldr	r2, [pc, #640]	@ (800ee68 <ecp_double_jac+0x550>)
 800ebe8:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f103 0210 	add.w	r2, r3, #16
 800ebf0:	f107 0120 	add.w	r1, r7, #32
 800ebf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7fe f8ae 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ebfe:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f040 8247 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ec08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ec0c:	68f9      	ldr	r1, [r7, #12]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff fb32 	bl	800e278 <ecp_modp>
 800ec14:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f040 823c 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ec1e:	4b92      	ldr	r3, [pc, #584]	@ (800ee68 <ecp_double_jac+0x550>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	3301      	adds	r3, #1
 800ec24:	4a90      	ldr	r2, [pc, #576]	@ (800ee68 <ecp_double_jac+0x550>)
 800ec26:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 800ec28:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ec2c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ec30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fc fc17 	bl	800b468 <mbedtls_mpi_add_mpi>
 800ec3a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	f040 8229 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ec44:	e00d      	b.n	800ec62 <ecp_double_jac+0x34a>
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	1d1a      	adds	r2, r3, #4
 800ec4a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ec4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7fc fba8 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800ec58:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f040 821a 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	1d1a      	adds	r2, r3, #4
 800ec66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	f7fc f9d5 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	dae6      	bge.n	800ec46 <ecp_double_jac+0x32e>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f103 010c 	add.w	r1, r3, #12
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f103 020c 	add.w	r2, r3, #12
 800ec84:	f107 0320 	add.w	r3, r7, #32
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f7fe f866 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ec8e:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	f040 81ff 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ec98:	f107 0320 	add.w	r3, r7, #32
 800ec9c:	68f9      	ldr	r1, [r7, #12]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7ff faea 	bl	800e278 <ecp_modp>
 800eca4:	6478      	str	r0, [r7, #68]	@ 0x44
 800eca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	f040 81f4 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ecae:	4b6e      	ldr	r3, [pc, #440]	@ (800ee68 <ecp_double_jac+0x550>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	4a6c      	ldr	r2, [pc, #432]	@ (800ee68 <ecp_double_jac+0x550>)
 800ecb6:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800ecb8:	f107 0320 	add.w	r3, r7, #32
 800ecbc:	2101      	movs	r1, #1
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fb ffed 	bl	800ac9e <mbedtls_mpi_shift_l>
 800ecc4:	6478      	str	r0, [r7, #68]	@ 0x44
 800ecc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f040 81e4 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ecce:	e00d      	b.n	800ecec <ecp_double_jac+0x3d4>
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	1d1a      	adds	r2, r3, #4
 800ecd4:	f107 0120 	add.w	r1, r7, #32
 800ecd8:	f107 0320 	add.w	r3, r7, #32
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7fc fb63 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800ece2:	6478      	str	r0, [r7, #68]	@ 0x44
 800ece4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f040 81d5 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	1d1a      	adds	r2, r3, #4
 800ecf0:	f107 0320 	add.w	r3, r7, #32
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fc f990 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	dae6      	bge.n	800ecd0 <ecp_double_jac+0x3b8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 800ed02:	6879      	ldr	r1, [r7, #4]
 800ed04:	f107 0220 	add.w	r2, r7, #32
 800ed08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7fe f824 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ed12:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f040 81bd 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ed1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed20:	68f9      	ldr	r1, [r7, #12]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7ff faa8 	bl	800e278 <ecp_modp>
 800ed28:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f040 81b2 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ed32:	4b4d      	ldr	r3, [pc, #308]	@ (800ee68 <ecp_double_jac+0x550>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	3301      	adds	r3, #1
 800ed38:	4a4b      	ldr	r2, [pc, #300]	@ (800ee68 <ecp_double_jac+0x550>)
 800ed3a:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800ed3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed40:	2101      	movs	r1, #1
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fb ffab 	bl	800ac9e <mbedtls_mpi_shift_l>
 800ed48:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f040 81a2 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ed52:	e00d      	b.n	800ed70 <ecp_double_jac+0x458>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	1d1a      	adds	r2, r3, #4
 800ed58:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ed5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed60:	4618      	mov	r0, r3
 800ed62:	f7fc fb21 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800ed66:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f040 8193 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	1d1a      	adds	r2, r3, #4
 800ed74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed78:	4611      	mov	r1, r2
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fc f94e 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	dae6      	bge.n	800ed54 <ecp_double_jac+0x43c>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 800ed86:	f107 0220 	add.w	r2, r7, #32
 800ed8a:	f107 0120 	add.w	r1, r7, #32
 800ed8e:	f107 0314 	add.w	r3, r7, #20
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7fd ffe1 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ed98:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f040 817a 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eda2:	f107 0314 	add.w	r3, r7, #20
 800eda6:	68f9      	ldr	r1, [r7, #12]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7ff fa65 	bl	800e278 <ecp_modp>
 800edae:	6478      	str	r0, [r7, #68]	@ 0x44
 800edb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f040 816f 	bne.w	800f096 <ecp_double_jac+0x77e>
 800edb8:	4b2b      	ldr	r3, [pc, #172]	@ (800ee68 <ecp_double_jac+0x550>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	3301      	adds	r3, #1
 800edbe:	4a2a      	ldr	r2, [pc, #168]	@ (800ee68 <ecp_double_jac+0x550>)
 800edc0:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800edc2:	f107 0314 	add.w	r3, r7, #20
 800edc6:	2101      	movs	r1, #1
 800edc8:	4618      	mov	r0, r3
 800edca:	f7fb ff68 	bl	800ac9e <mbedtls_mpi_shift_l>
 800edce:	6478      	str	r0, [r7, #68]	@ 0x44
 800edd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f040 815f 	bne.w	800f096 <ecp_double_jac+0x77e>
 800edd8:	e00d      	b.n	800edf6 <ecp_double_jac+0x4de>
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	1d1a      	adds	r2, r3, #4
 800edde:	f107 0114 	add.w	r1, r7, #20
 800ede2:	f107 0314 	add.w	r3, r7, #20
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fc fade 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800edec:	6478      	str	r0, [r7, #68]	@ 0x44
 800edee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	f040 8150 	bne.w	800f096 <ecp_double_jac+0x77e>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	1d1a      	adds	r2, r3, #4
 800edfa:	f107 0314 	add.w	r3, r7, #20
 800edfe:	4611      	mov	r1, r2
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7fc f90b 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800ee06:	4603      	mov	r3, r0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	dae6      	bge.n	800edda <ecp_double_jac+0x4c2>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 800ee0c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800ee10:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ee14:	f107 0320 	add.w	r3, r7, #32
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fd ff9e 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ee1e:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f040 8137 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ee28:	f107 0320 	add.w	r3, r7, #32
 800ee2c:	68f9      	ldr	r1, [r7, #12]
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7ff fa22 	bl	800e278 <ecp_modp>
 800ee34:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f040 812c 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ee3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ee68 <ecp_double_jac+0x550>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	3301      	adds	r3, #1
 800ee44:	4a08      	ldr	r2, [pc, #32]	@ (800ee68 <ecp_double_jac+0x550>)
 800ee46:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800ee48:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ee4c:	f107 0120 	add.w	r1, r7, #32
 800ee50:	f107 0320 	add.w	r3, r7, #32
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7fc fb4b 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800ee5a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	f040 8119 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ee64:	e010      	b.n	800ee88 <ecp_double_jac+0x570>
 800ee66:	bf00      	nop
 800ee68:	2400257c 	.word	0x2400257c
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	1d1a      	adds	r2, r3, #4
 800ee70:	f107 0120 	add.w	r1, r7, #32
 800ee74:	f107 0320 	add.w	r3, r7, #32
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fc faf5 	bl	800b468 <mbedtls_mpi_add_mpi>
 800ee7e:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f040 8107 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ee88:	6a3b      	ldr	r3, [r7, #32]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	da08      	bge.n	800eea0 <ecp_double_jac+0x588>
 800ee8e:	f107 0320 	add.w	r3, r7, #32
 800ee92:	2100      	movs	r1, #0
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fc f95c 	bl	800b152 <mbedtls_mpi_cmp_int>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d1e5      	bne.n	800ee6c <ecp_double_jac+0x554>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800eea0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800eea4:	f107 0120 	add.w	r1, r7, #32
 800eea8:	f107 0320 	add.w	r3, r7, #32
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7fc fb1f 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800eeb2:	6478      	str	r0, [r7, #68]	@ 0x44
 800eeb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	f040 80ed 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eebc:	e00d      	b.n	800eeda <ecp_double_jac+0x5c2>
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	1d1a      	adds	r2, r3, #4
 800eec2:	f107 0120 	add.w	r1, r7, #32
 800eec6:	f107 0320 	add.w	r3, r7, #32
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fc facc 	bl	800b468 <mbedtls_mpi_add_mpi>
 800eed0:	6478      	str	r0, [r7, #68]	@ 0x44
 800eed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	f040 80de 	bne.w	800f096 <ecp_double_jac+0x77e>
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	da08      	bge.n	800eef2 <ecp_double_jac+0x5da>
 800eee0:	f107 0320 	add.w	r3, r7, #32
 800eee4:	2100      	movs	r1, #0
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fc f933 	bl	800b152 <mbedtls_mpi_cmp_int>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1e5      	bne.n	800eebe <ecp_double_jac+0x5a6>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800eef2:	f107 0220 	add.w	r2, r7, #32
 800eef6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eefa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fc faf6 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800ef04:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f040 80c4 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ef0e:	e00d      	b.n	800ef2c <ecp_double_jac+0x614>
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	1d1a      	adds	r2, r3, #4
 800ef14:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ef18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7fc faa3 	bl	800b468 <mbedtls_mpi_add_mpi>
 800ef22:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	f040 80b5 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ef2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	da08      	bge.n	800ef44 <ecp_double_jac+0x62c>
 800ef32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef36:	2100      	movs	r1, #0
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7fc f90a 	bl	800b152 <mbedtls_mpi_cmp_int>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1e5      	bne.n	800ef10 <ecp_double_jac+0x5f8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 800ef44:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800ef48:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ef4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7fd ff02 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800ef56:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f040 809b 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ef60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef64:	68f9      	ldr	r1, [r7, #12]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7ff f986 	bl	800e278 <ecp_modp>
 800ef6c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f040 8090 	bne.w	800f096 <ecp_double_jac+0x77e>
 800ef76:	4b54      	ldr	r3, [pc, #336]	@ (800f0c8 <ecp_double_jac+0x7b0>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	4a52      	ldr	r2, [pc, #328]	@ (800f0c8 <ecp_double_jac+0x7b0>)
 800ef7e:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800ef80:	f107 0214 	add.w	r2, r7, #20
 800ef84:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ef88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fc faaf 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800ef92:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d17d      	bne.n	800f096 <ecp_double_jac+0x77e>
 800ef9a:	e00c      	b.n	800efb6 <ecp_double_jac+0x69e>
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	1d1a      	adds	r2, r3, #4
 800efa0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800efa4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fc fa5d 	bl	800b468 <mbedtls_mpi_add_mpi>
 800efae:	6478      	str	r0, [r7, #68]	@ 0x44
 800efb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d16f      	bne.n	800f096 <ecp_double_jac+0x77e>
 800efb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb8:	2b00      	cmp	r3, #0
 800efba:	da08      	bge.n	800efce <ecp_double_jac+0x6b6>
 800efbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800efc0:	2100      	movs	r1, #0
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fc f8c5 	bl	800b152 <mbedtls_mpi_cmp_int>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1e6      	bne.n	800ef9c <ecp_double_jac+0x684>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f103 010c 	add.w	r1, r3, #12
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f103 0218 	add.w	r2, r3, #24
 800efda:	f107 0314 	add.w	r3, r7, #20
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fd febb 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800efe4:	6478      	str	r0, [r7, #68]	@ 0x44
 800efe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d154      	bne.n	800f096 <ecp_double_jac+0x77e>
 800efec:	f107 0314 	add.w	r3, r7, #20
 800eff0:	68f9      	ldr	r1, [r7, #12]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7ff f940 	bl	800e278 <ecp_modp>
 800eff8:	6478      	str	r0, [r7, #68]	@ 0x44
 800effa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800effc:	2b00      	cmp	r3, #0
 800effe:	d14a      	bne.n	800f096 <ecp_double_jac+0x77e>
 800f000:	4b31      	ldr	r3, [pc, #196]	@ (800f0c8 <ecp_double_jac+0x7b0>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	3301      	adds	r3, #1
 800f006:	4a30      	ldr	r2, [pc, #192]	@ (800f0c8 <ecp_double_jac+0x7b0>)
 800f008:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800f00a:	f107 0314 	add.w	r3, r7, #20
 800f00e:	2101      	movs	r1, #1
 800f010:	4618      	mov	r0, r3
 800f012:	f7fb fe44 	bl	800ac9e <mbedtls_mpi_shift_l>
 800f016:	6478      	str	r0, [r7, #68]	@ 0x44
 800f018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d13b      	bne.n	800f096 <ecp_double_jac+0x77e>
 800f01e:	e00c      	b.n	800f03a <ecp_double_jac+0x722>
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	1d1a      	adds	r2, r3, #4
 800f024:	f107 0114 	add.w	r1, r7, #20
 800f028:	f107 0314 	add.w	r3, r7, #20
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fc f9bb 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800f032:	6478      	str	r0, [r7, #68]	@ 0x44
 800f034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f036:	2b00      	cmp	r3, #0
 800f038:	d12d      	bne.n	800f096 <ecp_double_jac+0x77e>
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	1d1a      	adds	r2, r3, #4
 800f03e:	f107 0314 	add.w	r3, r7, #20
 800f042:	4611      	mov	r1, r2
 800f044:	4618      	mov	r0, r3
 800f046:	f7fb ffe9 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	dae7      	bge.n	800f020 <ecp_double_jac+0x708>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	f107 0220 	add.w	r2, r7, #32
 800f056:	4611      	mov	r1, r2
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fb f9e0 	bl	800a41e <mbedtls_mpi_copy>
 800f05e:	6478      	str	r0, [r7, #68]	@ 0x44
 800f060:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f062:	2b00      	cmp	r3, #0
 800f064:	d117      	bne.n	800f096 <ecp_double_jac+0x77e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	330c      	adds	r3, #12
 800f06a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f06e:	4611      	mov	r1, r2
 800f070:	4618      	mov	r0, r3
 800f072:	f7fb f9d4 	bl	800a41e <mbedtls_mpi_copy>
 800f076:	6478      	str	r0, [r7, #68]	@ 0x44
 800f078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d10b      	bne.n	800f096 <ecp_double_jac+0x77e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	3318      	adds	r3, #24
 800f082:	f107 0214 	add.w	r2, r7, #20
 800f086:	4611      	mov	r1, r2
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fb f9c8 	bl	800a41e <mbedtls_mpi_copy>
 800f08e:	6478      	str	r0, [r7, #68]	@ 0x44
 800f090:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f092:	2b00      	cmp	r3, #0

cleanup:
 800f094:	bf00      	nop
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 800f096:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fb f8f0 	bl	800a280 <mbedtls_mpi_free>
 800f0a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fb f8eb 	bl	800a280 <mbedtls_mpi_free>
 800f0aa:	f107 0320 	add.w	r3, r7, #32
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fb f8e6 	bl	800a280 <mbedtls_mpi_free>
 800f0b4:	f107 0314 	add.w	r3, r7, #20
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fb f8e1 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800f0be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3748      	adds	r7, #72	@ 0x48
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	2400257c 	.word	0x2400257c

0800f0cc <ecp_add_mixed>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b09a      	sub	sp, #104	@ 0x68
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
 800f0d8:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi T1, T2, T3, T4, X, Y, Z;

#if defined(MBEDTLS_SELF_TEST)
    add_count++;
 800f0da:	4ba2      	ldr	r3, [pc, #648]	@ (800f364 <ecp_add_mixed+0x298>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	4aa0      	ldr	r2, [pc, #640]	@ (800f364 <ecp_add_mixed+0x298>)
 800f0e2:	6013      	str	r3, [r2, #0]
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	3318      	adds	r3, #24
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fc f831 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d105      	bne.n	800f102 <ecp_add_mixed+0x36>
        return( mbedtls_ecp_copy( R, Q ) );
 800f0f6:	6839      	ldr	r1, [r7, #0]
 800f0f8:	68b8      	ldr	r0, [r7, #8]
 800f0fa:	f7ff f855 	bl	800e1a8 <mbedtls_ecp_copy>
 800f0fe:	4603      	mov	r3, r0
 800f100:	e318      	b.n	800f734 <ecp_add_mixed+0x668>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	6a1b      	ldr	r3, [r3, #32]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d00e      	beq.n	800f128 <ecp_add_mixed+0x5c>
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	3318      	adds	r3, #24
 800f10e:	2100      	movs	r1, #0
 800f110:	4618      	mov	r0, r3
 800f112:	f7fc f81e 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d105      	bne.n	800f128 <ecp_add_mixed+0x5c>
        return( mbedtls_ecp_copy( R, P ) );
 800f11c:	6879      	ldr	r1, [r7, #4]
 800f11e:	68b8      	ldr	r0, [r7, #8]
 800f120:	f7ff f842 	bl	800e1a8 <mbedtls_ecp_copy>
 800f124:	4603      	mov	r3, r0
 800f126:	e305      	b.n	800f734 <ecp_add_mixed+0x668>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	6a1b      	ldr	r3, [r3, #32]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d00a      	beq.n	800f146 <ecp_add_mixed+0x7a>
 800f130:	683b      	ldr	r3, [r7, #0]
 800f132:	3318      	adds	r3, #24
 800f134:	2101      	movs	r1, #1
 800f136:	4618      	mov	r0, r3
 800f138:	f7fc f80b 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d001      	beq.n	800f146 <ecp_add_mixed+0x7a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800f142:	4b89      	ldr	r3, [pc, #548]	@ (800f368 <ecp_add_mixed+0x29c>)
 800f144:	e2f6      	b.n	800f734 <ecp_add_mixed+0x668>

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 800f146:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7fb f885 	bl	800a25a <mbedtls_mpi_init>
 800f150:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f154:	4618      	mov	r0, r3
 800f156:	f7fb f880 	bl	800a25a <mbedtls_mpi_init>
 800f15a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fb f87b 	bl	800a25a <mbedtls_mpi_init>
 800f164:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fb f876 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800f16e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f172:	4618      	mov	r0, r3
 800f174:	f7fb f871 	bl	800a25a <mbedtls_mpi_init>
 800f178:	f107 031c 	add.w	r3, r7, #28
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7fb f86c 	bl	800a25a <mbedtls_mpi_init>
 800f182:	f107 0310 	add.w	r3, r7, #16
 800f186:	4618      	mov	r0, r3
 800f188:	f7fb f867 	bl	800a25a <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f103 0118 	add.w	r1, r3, #24
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f103 0218 	add.w	r2, r3, #24
 800f198:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fd fddc 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f1a2:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f040 82a0 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f1ac:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f1b0:	68f9      	ldr	r1, [r7, #12]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7ff f860 	bl	800e278 <ecp_modp>
 800f1b8:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f040 8295 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f1c2:	4b6a      	ldr	r3, [pc, #424]	@ (800f36c <ecp_add_mixed+0x2a0>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	4a68      	ldr	r2, [pc, #416]	@ (800f36c <ecp_add_mixed+0x2a0>)
 800f1ca:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f103 0218 	add.w	r2, r3, #24
 800f1d2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f1d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fd fdbd 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f1e0:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	f040 8281 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f1ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f1ee:	68f9      	ldr	r1, [r7, #12]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7ff f841 	bl	800e278 <ecp_modp>
 800f1f6:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	f040 8276 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f200:	4b5a      	ldr	r3, [pc, #360]	@ (800f36c <ecp_add_mixed+0x2a0>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	3301      	adds	r3, #1
 800f206:	4a59      	ldr	r2, [pc, #356]	@ (800f36c <ecp_add_mixed+0x2a0>)
 800f208:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 800f20a:	683a      	ldr	r2, [r7, #0]
 800f20c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f210:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f214:	4618      	mov	r0, r3
 800f216:	f7fd fda0 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f21a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f21c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f21e:	2b00      	cmp	r3, #0
 800f220:	f040 8264 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f224:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f228:	68f9      	ldr	r1, [r7, #12]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7ff f824 	bl	800e278 <ecp_modp>
 800f230:	6678      	str	r0, [r7, #100]	@ 0x64
 800f232:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f234:	2b00      	cmp	r3, #0
 800f236:	f040 8259 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f23a:	4b4c      	ldr	r3, [pc, #304]	@ (800f36c <ecp_add_mixed+0x2a0>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	3301      	adds	r3, #1
 800f240:	4a4a      	ldr	r2, [pc, #296]	@ (800f36c <ecp_add_mixed+0x2a0>)
 800f242:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	f103 020c 	add.w	r2, r3, #12
 800f24a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f24e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f252:	4618      	mov	r0, r3
 800f254:	f7fd fd81 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f258:	6678      	str	r0, [r7, #100]	@ 0x64
 800f25a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f040 8245 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f262:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f266:	68f9      	ldr	r1, [r7, #12]
 800f268:	4618      	mov	r0, r3
 800f26a:	f7ff f805 	bl	800e278 <ecp_modp>
 800f26e:	6678      	str	r0, [r7, #100]	@ 0x64
 800f270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f272:	2b00      	cmp	r3, #0
 800f274:	f040 823a 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f278:	4b3c      	ldr	r3, [pc, #240]	@ (800f36c <ecp_add_mixed+0x2a0>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	3301      	adds	r3, #1
 800f27e:	4a3b      	ldr	r2, [pc, #236]	@ (800f36c <ecp_add_mixed+0x2a0>)
 800f280:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f288:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fc f92f 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800f292:	6678      	str	r0, [r7, #100]	@ 0x64
 800f294:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f296:	2b00      	cmp	r3, #0
 800f298:	f040 8228 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f29c:	e00d      	b.n	800f2ba <ecp_add_mixed+0x1ee>
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	1d1a      	adds	r2, r3, #4
 800f2a2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f2a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fc f8dc 	bl	800b468 <mbedtls_mpi_add_mpi>
 800f2b0:	6678      	str	r0, [r7, #100]	@ 0x64
 800f2b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f040 8219 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f2ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	da08      	bge.n	800f2d2 <ecp_add_mixed+0x206>
 800f2c0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fb ff43 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d1e5      	bne.n	800f29e <ecp_add_mixed+0x1d2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f103 020c 	add.w	r2, r3, #12
 800f2d8:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f2dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f7fc f905 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800f2e6:	6678      	str	r0, [r7, #100]	@ 0x64
 800f2e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	f040 81fe 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f2f0:	e00d      	b.n	800f30e <ecp_add_mixed+0x242>
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	1d1a      	adds	r2, r3, #4
 800f2f6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f2fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fc f8b2 	bl	800b468 <mbedtls_mpi_add_mpi>
 800f304:	6678      	str	r0, [r7, #100]	@ 0x64
 800f306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f040 81ef 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f30e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f310:	2b00      	cmp	r3, #0
 800f312:	da08      	bge.n	800f326 <ecp_add_mixed+0x25a>
 800f314:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f318:	2100      	movs	r1, #0
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fb ff19 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d1e5      	bne.n	800f2f2 <ecp_add_mixed+0x226>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 800f326:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f32a:	2100      	movs	r1, #0
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fb ff10 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d11b      	bne.n	800f370 <ecp_add_mixed+0x2a4>
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 800f338:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f33c:	2100      	movs	r1, #0
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fb ff07 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d106      	bne.n	800f358 <ecp_add_mixed+0x28c>
        {
            ret = ecp_double_jac( grp, R, P );
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	68b9      	ldr	r1, [r7, #8]
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f7ff fae2 	bl	800e918 <ecp_double_jac>
 800f354:	6678      	str	r0, [r7, #100]	@ 0x64
            goto cleanup;
 800f356:	e1c9      	b.n	800f6ec <ecp_add_mixed+0x620>
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
 800f358:	68b8      	ldr	r0, [r7, #8]
 800f35a:	f7fe ff53 	bl	800e204 <mbedtls_ecp_set_zero>
 800f35e:	6678      	str	r0, [r7, #100]	@ 0x64
            goto cleanup;
 800f360:	e1c4      	b.n	800f6ec <ecp_add_mixed+0x620>
 800f362:	bf00      	nop
 800f364:	24002574 	.word	0x24002574
 800f368:	ffffb080 	.word	0xffffb080
 800f36c:	2400257c 	.word	0x2400257c
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f103 0118 	add.w	r1, r3, #24
 800f376:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f37a:	f107 0310 	add.w	r3, r7, #16
 800f37e:	4618      	mov	r0, r3
 800f380:	f7fd fceb 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f384:	6678      	str	r0, [r7, #100]	@ 0x64
 800f386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f040 81af 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f38e:	f107 0310 	add.w	r3, r7, #16
 800f392:	68f9      	ldr	r1, [r7, #12]
 800f394:	4618      	mov	r0, r3
 800f396:	f7fe ff6f 	bl	800e278 <ecp_modp>
 800f39a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f39c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f040 81a4 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f3a4:	4bb2      	ldr	r3, [pc, #712]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	3301      	adds	r3, #1
 800f3aa:	4ab1      	ldr	r2, [pc, #708]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f3ac:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 800f3ae:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f3b2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f3b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f7fd fccd 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f3c0:	6678      	str	r0, [r7, #100]	@ 0x64
 800f3c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f040 8191 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f3ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f3ce:	68f9      	ldr	r1, [r7, #12]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fe ff51 	bl	800e278 <ecp_modp>
 800f3d6:	6678      	str	r0, [r7, #100]	@ 0x64
 800f3d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	f040 8186 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f3e0:	4ba3      	ldr	r3, [pc, #652]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	4aa2      	ldr	r2, [pc, #648]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f3e8:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 800f3ea:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f3ee:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f3f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fd fcaf 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f3fc:	6678      	str	r0, [r7, #100]	@ 0x64
 800f3fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f400:	2b00      	cmp	r3, #0
 800f402:	f040 8173 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f406:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f40a:	68f9      	ldr	r1, [r7, #12]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fe ff33 	bl	800e278 <ecp_modp>
 800f412:	6678      	str	r0, [r7, #100]	@ 0x64
 800f414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f416:	2b00      	cmp	r3, #0
 800f418:	f040 8168 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f41c:	4b94      	ldr	r3, [pc, #592]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	3301      	adds	r3, #1
 800f422:	4a93      	ldr	r2, [pc, #588]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f424:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f42c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f430:	4618      	mov	r0, r3
 800f432:	f7fd fc92 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f436:	6678      	str	r0, [r7, #100]	@ 0x64
 800f438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	f040 8156 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f440:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f444:	68f9      	ldr	r1, [r7, #12]
 800f446:	4618      	mov	r0, r3
 800f448:	f7fe ff16 	bl	800e278 <ecp_modp>
 800f44c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f44e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f450:	2b00      	cmp	r3, #0
 800f452:	f040 814b 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f456:	4b86      	ldr	r3, [pc, #536]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	3301      	adds	r3, #1
 800f45c:	4a84      	ldr	r2, [pc, #528]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f45e:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800f460:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f464:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f468:	2202      	movs	r2, #2
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fd fd1e 	bl	800ceac <mbedtls_mpi_mul_int>
 800f470:	6678      	str	r0, [r7, #100]	@ 0x64
 800f472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f474:	2b00      	cmp	r3, #0
 800f476:	f040 8139 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f47a:	e00d      	b.n	800f498 <ecp_add_mixed+0x3cc>
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	1d1a      	adds	r2, r3, #4
 800f480:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f484:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f488:	4618      	mov	r0, r3
 800f48a:	f7fb ff8d 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 800f48e:	6678      	str	r0, [r7, #100]	@ 0x64
 800f490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f492:	2b00      	cmp	r3, #0
 800f494:	f040 812a 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	1d1a      	adds	r2, r3, #4
 800f49c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f4a0:	4611      	mov	r1, r2
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fb fdba 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	dae6      	bge.n	800f47c <ecp_add_mixed+0x3b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 800f4ae:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f4b2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f4b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fd fc4d 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f4c0:	6678      	str	r0, [r7, #100]	@ 0x64
 800f4c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f040 8111 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f4ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f4ce:	68f9      	ldr	r1, [r7, #12]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fe fed1 	bl	800e278 <ecp_modp>
 800f4d6:	6678      	str	r0, [r7, #100]	@ 0x64
 800f4d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f040 8106 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f4e0:	4b63      	ldr	r3, [pc, #396]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	3301      	adds	r3, #1
 800f4e6:	4a62      	ldr	r2, [pc, #392]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f4e8:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800f4ea:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f4ee:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f4f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fb fffa 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800f4fc:	6678      	str	r0, [r7, #100]	@ 0x64
 800f4fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f500:	2b00      	cmp	r3, #0
 800f502:	f040 80f3 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f506:	e00d      	b.n	800f524 <ecp_add_mixed+0x458>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	1d1a      	adds	r2, r3, #4
 800f50c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f510:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f514:	4618      	mov	r0, r3
 800f516:	f7fb ffa7 	bl	800b468 <mbedtls_mpi_add_mpi>
 800f51a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f51c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f040 80e4 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f526:	2b00      	cmp	r3, #0
 800f528:	da08      	bge.n	800f53c <ecp_add_mixed+0x470>
 800f52a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f52e:	2100      	movs	r1, #0
 800f530:	4618      	mov	r0, r3
 800f532:	f7fb fe0e 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1e5      	bne.n	800f508 <ecp_add_mixed+0x43c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800f53c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f540:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f544:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f548:	4618      	mov	r0, r3
 800f54a:	f7fb ffd1 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800f54e:	6678      	str	r0, [r7, #100]	@ 0x64
 800f550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f552:	2b00      	cmp	r3, #0
 800f554:	f040 80ca 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f558:	e00d      	b.n	800f576 <ecp_add_mixed+0x4aa>
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	1d1a      	adds	r2, r3, #4
 800f55e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f562:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f566:	4618      	mov	r0, r3
 800f568:	f7fb ff7e 	bl	800b468 <mbedtls_mpi_add_mpi>
 800f56c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f56e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f570:	2b00      	cmp	r3, #0
 800f572:	f040 80bb 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f578:	2b00      	cmp	r3, #0
 800f57a:	da08      	bge.n	800f58e <ecp_add_mixed+0x4c2>
 800f57c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f580:	2100      	movs	r1, #0
 800f582:	4618      	mov	r0, r3
 800f584:	f7fb fde5 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d1e5      	bne.n	800f55a <ecp_add_mixed+0x48e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800f58e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f592:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f596:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fb ffa8 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800f5a0:	6678      	str	r0, [r7, #100]	@ 0x64
 800f5a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f040 80a1 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f5aa:	e00d      	b.n	800f5c8 <ecp_add_mixed+0x4fc>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	1d1a      	adds	r2, r3, #4
 800f5b0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f5b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fb ff55 	bl	800b468 <mbedtls_mpi_add_mpi>
 800f5be:	6678      	str	r0, [r7, #100]	@ 0x64
 800f5c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f040 8092 	bne.w	800f6ec <ecp_add_mixed+0x620>
 800f5c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	da08      	bge.n	800f5e0 <ecp_add_mixed+0x514>
 800f5ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7fb fdbc 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1e5      	bne.n	800f5ac <ecp_add_mixed+0x4e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 800f5e0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f5e4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f5e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7fd fbb4 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f5f2:	6678      	str	r0, [r7, #100]	@ 0x64
 800f5f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d178      	bne.n	800f6ec <ecp_add_mixed+0x620>
 800f5fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f5fe:	68f9      	ldr	r1, [r7, #12]
 800f600:	4618      	mov	r0, r3
 800f602:	f7fe fe39 	bl	800e278 <ecp_modp>
 800f606:	6678      	str	r0, [r7, #100]	@ 0x64
 800f608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d16e      	bne.n	800f6ec <ecp_add_mixed+0x620>
 800f60e:	4b18      	ldr	r3, [pc, #96]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	3301      	adds	r3, #1
 800f614:	4a16      	ldr	r2, [pc, #88]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f616:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f103 020c 	add.w	r2, r3, #12
 800f61e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800f622:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f626:	4618      	mov	r0, r3
 800f628:	f7fd fb97 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f62c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f62e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f630:	2b00      	cmp	r3, #0
 800f632:	d15b      	bne.n	800f6ec <ecp_add_mixed+0x620>
 800f634:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f638:	68f9      	ldr	r1, [r7, #12]
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fe fe1c 	bl	800e278 <ecp_modp>
 800f640:	6678      	str	r0, [r7, #100]	@ 0x64
 800f642:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f644:	2b00      	cmp	r3, #0
 800f646:	d151      	bne.n	800f6ec <ecp_add_mixed+0x620>
 800f648:	4b09      	ldr	r3, [pc, #36]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	3301      	adds	r3, #1
 800f64e:	4a08      	ldr	r2, [pc, #32]	@ (800f670 <ecp_add_mixed+0x5a4>)
 800f650:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800f652:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f656:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f65a:	f107 031c 	add.w	r3, r7, #28
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fb ff46 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800f664:	6678      	str	r0, [r7, #100]	@ 0x64
 800f666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d13f      	bne.n	800f6ec <ecp_add_mixed+0x620>
 800f66c:	e00f      	b.n	800f68e <ecp_add_mixed+0x5c2>
 800f66e:	bf00      	nop
 800f670:	2400257c 	.word	0x2400257c
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	1d1a      	adds	r2, r3, #4
 800f678:	f107 011c 	add.w	r1, r7, #28
 800f67c:	f107 031c 	add.w	r3, r7, #28
 800f680:	4618      	mov	r0, r3
 800f682:	f7fb fef1 	bl	800b468 <mbedtls_mpi_add_mpi>
 800f686:	6678      	str	r0, [r7, #100]	@ 0x64
 800f688:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d12e      	bne.n	800f6ec <ecp_add_mixed+0x620>
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	2b00      	cmp	r3, #0
 800f692:	da08      	bge.n	800f6a6 <ecp_add_mixed+0x5da>
 800f694:	f107 031c 	add.w	r3, r7, #28
 800f698:	2100      	movs	r1, #0
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fb fd59 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d1e6      	bne.n	800f674 <ecp_add_mixed+0x5a8>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f6ac:	4611      	mov	r1, r2
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fa feb5 	bl	800a41e <mbedtls_mpi_copy>
 800f6b4:	6678      	str	r0, [r7, #100]	@ 0x64
 800f6b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d117      	bne.n	800f6ec <ecp_add_mixed+0x620>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	330c      	adds	r3, #12
 800f6c0:	f107 021c 	add.w	r2, r7, #28
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fa fea9 	bl	800a41e <mbedtls_mpi_copy>
 800f6cc:	6678      	str	r0, [r7, #100]	@ 0x64
 800f6ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d10b      	bne.n	800f6ec <ecp_add_mixed+0x620>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	3318      	adds	r3, #24
 800f6d8:	f107 0210 	add.w	r2, r7, #16
 800f6dc:	4611      	mov	r1, r2
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fa fe9d 	bl	800a41e <mbedtls_mpi_copy>
 800f6e4:	6678      	str	r0, [r7, #100]	@ 0x64
 800f6e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6e8:	2b00      	cmp	r3, #0

cleanup:
 800f6ea:	bf00      	nop

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 800f6ec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f7fa fdc5 	bl	800a280 <mbedtls_mpi_free>
 800f6f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fa fdc0 	bl	800a280 <mbedtls_mpi_free>
 800f700:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f704:	4618      	mov	r0, r3
 800f706:	f7fa fdbb 	bl	800a280 <mbedtls_mpi_free>
 800f70a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fa fdb6 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800f714:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fa fdb1 	bl	800a280 <mbedtls_mpi_free>
 800f71e:	f107 031c 	add.w	r3, r7, #28
 800f722:	4618      	mov	r0, r3
 800f724:	f7fa fdac 	bl	800a280 <mbedtls_mpi_free>
 800f728:	f107 0310 	add.w	r3, r7, #16
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fa fda7 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800f732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 800f734:	4618      	mov	r0, r3
 800f736:	3768      	adds	r7, #104	@ 0x68
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <ecp_randomize_jac>:
 *
 * This countermeasure was first suggested in [2].
 */
static int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b08e      	sub	sp, #56	@ 0x38
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	607a      	str	r2, [r7, #4]
 800f748:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l, ll;
    size_t p_size;
    int count = 0;
 800f74a:	2300      	movs	r3, #0
 800f74c:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f752:	3307      	adds	r3, #7
 800f754:	08db      	lsrs	r3, r3, #3
 800f756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800f758:	f107 0320 	add.w	r3, r7, #32
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fa fd7c 	bl	800a25a <mbedtls_mpi_init>
 800f762:	f107 0314 	add.w	r3, r7, #20
 800f766:	4618      	mov	r0, r3
 800f768:	f7fa fd77 	bl	800a25a <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800f76c:	f107 0020 	add.w	r0, r7, #32
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f776:	f7fe f845 	bl	800d804 <mbedtls_mpi_fill_random>
 800f77a:	6378      	str	r0, [r7, #52]	@ 0x34
 800f77c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f040 80b2 	bne.w	800f8e8 <ecp_randomize_jac+0x1ac>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800f784:	e00a      	b.n	800f79c <ecp_randomize_jac+0x60>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800f786:	f107 0320 	add.w	r3, r7, #32
 800f78a:	2101      	movs	r1, #1
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fb fb28 	bl	800ade2 <mbedtls_mpi_shift_r>
 800f792:	6378      	str	r0, [r7, #52]	@ 0x34
 800f794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f796:	2b00      	cmp	r3, #0
 800f798:	f040 80a6 	bne.w	800f8e8 <ecp_randomize_jac+0x1ac>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	1d1a      	adds	r2, r3, #4
 800f7a0:	f107 0320 	add.w	r3, r7, #32
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fb fc38 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	dae9      	bge.n	800f786 <ecp_randomize_jac+0x4a>

        if( count++ > 10 )
 800f7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b4:	1c5a      	adds	r2, r3, #1
 800f7b6:	633a      	str	r2, [r7, #48]	@ 0x30
 800f7b8:	2b0a      	cmp	r3, #10
 800f7ba:	dd01      	ble.n	800f7c0 <ecp_randomize_jac+0x84>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800f7bc:	4b52      	ldr	r3, [pc, #328]	@ (800f908 <ecp_randomize_jac+0x1cc>)
 800f7be:	e09e      	b.n	800f8fe <ecp_randomize_jac+0x1c2>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800f7c0:	f107 0320 	add.w	r3, r7, #32
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	f7fb fcc3 	bl	800b152 <mbedtls_mpi_cmp_int>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	ddcc      	ble.n	800f76c <ecp_randomize_jac+0x30>

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	f103 0018 	add.w	r0, r3, #24
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	3318      	adds	r3, #24
 800f7dc:	f107 0220 	add.w	r2, r7, #32
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	f7fd faba 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f7e6:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d17c      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	3318      	adds	r3, #24
 800f7f2:	68f9      	ldr	r1, [r7, #12]
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f7fe fd3f 	bl	800e278 <ecp_modp>
 800f7fa:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d172      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f802:	4b42      	ldr	r3, [pc, #264]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3301      	adds	r3, #1
 800f808:	4a40      	ldr	r2, [pc, #256]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f80a:	6013      	str	r3, [r2, #0]

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 800f80c:	f107 0220 	add.w	r2, r7, #32
 800f810:	f107 0120 	add.w	r1, r7, #32
 800f814:	f107 0314 	add.w	r3, r7, #20
 800f818:	4618      	mov	r0, r3
 800f81a:	f7fd fa9e 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f81e:	6378      	str	r0, [r7, #52]	@ 0x34
 800f820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f822:	2b00      	cmp	r3, #0
 800f824:	d160      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f826:	f107 0314 	add.w	r3, r7, #20
 800f82a:	68f9      	ldr	r1, [r7, #12]
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fe fd23 	bl	800e278 <ecp_modp>
 800f832:	6378      	str	r0, [r7, #52]	@ 0x34
 800f834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f836:	2b00      	cmp	r3, #0
 800f838:	d156      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f83a:	4b34      	ldr	r3, [pc, #208]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	3301      	adds	r3, #1
 800f840:	4a32      	ldr	r2, [pc, #200]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f842:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	68b9      	ldr	r1, [r7, #8]
 800f848:	f107 0214 	add.w	r2, r7, #20
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fd fa84 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f852:	6378      	str	r0, [r7, #52]	@ 0x34
 800f854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f856:	2b00      	cmp	r3, #0
 800f858:	d146      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	68f9      	ldr	r1, [r7, #12]
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fe fd0a 	bl	800e278 <ecp_modp>
 800f864:	6378      	str	r0, [r7, #52]	@ 0x34
 800f866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d13d      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f86c:	4b27      	ldr	r3, [pc, #156]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	3301      	adds	r3, #1
 800f872:	4a26      	ldr	r2, [pc, #152]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f874:	6013      	str	r3, [r2, #0]

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 800f876:	f107 0220 	add.w	r2, r7, #32
 800f87a:	f107 0114 	add.w	r1, r7, #20
 800f87e:	f107 0314 	add.w	r3, r7, #20
 800f882:	4618      	mov	r0, r3
 800f884:	f7fd fa69 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f888:	6378      	str	r0, [r7, #52]	@ 0x34
 800f88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d12b      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f890:	f107 0314 	add.w	r3, r7, #20
 800f894:	68f9      	ldr	r1, [r7, #12]
 800f896:	4618      	mov	r0, r3
 800f898:	f7fe fcee 	bl	800e278 <ecp_modp>
 800f89c:	6378      	str	r0, [r7, #52]	@ 0x34
 800f89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d121      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f8a4:	4b19      	ldr	r3, [pc, #100]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	4a18      	ldr	r2, [pc, #96]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f8ac:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	f103 000c 	add.w	r0, r3, #12
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	330c      	adds	r3, #12
 800f8b8:	f107 0214 	add.w	r2, r7, #20
 800f8bc:	4619      	mov	r1, r3
 800f8be:	f7fd fa4c 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 800f8c2:	6378      	str	r0, [r7, #52]	@ 0x34
 800f8c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10e      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	330c      	adds	r3, #12
 800f8ce:	68f9      	ldr	r1, [r7, #12]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7fe fcd1 	bl	800e278 <ecp_modp>
 800f8d6:	6378      	str	r0, [r7, #52]	@ 0x34
 800f8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d104      	bne.n	800f8e8 <ecp_randomize_jac+0x1ac>
 800f8de:	4b0b      	ldr	r3, [pc, #44]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	3301      	adds	r3, #1
 800f8e4:	4a09      	ldr	r2, [pc, #36]	@ (800f90c <ecp_randomize_jac+0x1d0>)
 800f8e6:	6013      	str	r3, [r2, #0]

cleanup:
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 800f8e8:	f107 0320 	add.w	r3, r7, #32
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fa fcc7 	bl	800a280 <mbedtls_mpi_free>
 800f8f2:	f107 0314 	add.w	r3, r7, #20
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fa fcc2 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800f8fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3738      	adds	r7, #56	@ 0x38
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
 800f906:	bf00      	nop
 800f908:	ffffb300 	.word	0xffffb300
 800f90c:	2400257c 	.word	0x2400257c

0800f910 <ecp_comb_recode_core>:
 * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d
 *   (the result will be incorrect if these assumptions are not satisfied)
 */
static void ecp_comb_recode_core( unsigned char x[], size_t d,
                                  unsigned char w, const mbedtls_mpi *m )
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b088      	sub	sp, #32
 800f914:	af00      	add	r7, sp, #0
 800f916:	60f8      	str	r0, [r7, #12]
 800f918:	60b9      	str	r1, [r7, #8]
 800f91a:	603b      	str	r3, [r7, #0]
 800f91c:	4613      	mov	r3, r2
 800f91e:	71fb      	strb	r3, [r7, #7]
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	3301      	adds	r3, #1
 800f924:	461a      	mov	r2, r3
 800f926:	2100      	movs	r1, #0
 800f928:	68f8      	ldr	r0, [r7, #12]
 800f92a:	f006 f879 	bl	8015a20 <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 800f92e:	2300      	movs	r3, #0
 800f930:	61fb      	str	r3, [r7, #28]
 800f932:	e027      	b.n	800f984 <ecp_comb_recode_core+0x74>
        for( j = 0; j < w; j++ )
 800f934:	2300      	movs	r3, #0
 800f936:	61bb      	str	r3, [r7, #24]
 800f938:	e01d      	b.n	800f976 <ecp_comb_recode_core+0x66>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	69ba      	ldr	r2, [r7, #24]
 800f93e:	fb03 f202 	mul.w	r2, r3, r2
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	4413      	add	r3, r2
 800f946:	4619      	mov	r1, r3
 800f948:	6838      	ldr	r0, [r7, #0]
 800f94a:	f7fa fef3 	bl	800a734 <mbedtls_mpi_get_bit>
 800f94e:	4602      	mov	r2, r0
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	fa02 f103 	lsl.w	r1, r2, r3
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	4413      	add	r3, r2
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	b25a      	sxtb	r2, r3
 800f960:	b24b      	sxtb	r3, r1
 800f962:	4313      	orrs	r3, r2
 800f964:	b259      	sxtb	r1, r3
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	4413      	add	r3, r2
 800f96c:	b2ca      	uxtb	r2, r1
 800f96e:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < w; j++ )
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	3301      	adds	r3, #1
 800f974:	61bb      	str	r3, [r7, #24]
 800f976:	79fb      	ldrb	r3, [r7, #7]
 800f978:	69ba      	ldr	r2, [r7, #24]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d3dd      	bcc.n	800f93a <ecp_comb_recode_core+0x2a>
    for( i = 0; i < d; i++ )
 800f97e:	69fb      	ldr	r3, [r7, #28]
 800f980:	3301      	adds	r3, #1
 800f982:	61fb      	str	r3, [r7, #28]
 800f984:	69fa      	ldr	r2, [r7, #28]
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d3d3      	bcc.n	800f934 <ecp_comb_recode_core+0x24>

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
 800f98c:	2300      	movs	r3, #0
 800f98e:	75fb      	strb	r3, [r7, #23]
    for( i = 1; i <= d; i++ )
 800f990:	2301      	movs	r3, #1
 800f992:	61fb      	str	r3, [r7, #28]
 800f994:	e060      	b.n	800fa58 <ecp_comb_recode_core+0x148>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	4413      	add	r3, r2
 800f99c:	781a      	ldrb	r2, [r3, #0]
 800f99e:	7dfb      	ldrb	r3, [r7, #23]
 800f9a0:	4013      	ands	r3, r2
 800f9a2:	75bb      	strb	r3, [r7, #22]
        x[i] = x[i] ^ c;
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	7819      	ldrb	r1, [r3, #0]
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	4413      	add	r3, r2
 800f9b2:	7dfa      	ldrb	r2, [r7, #23]
 800f9b4:	404a      	eors	r2, r1
 800f9b6:	b2d2      	uxtb	r2, r2
 800f9b8:	701a      	strb	r2, [r3, #0]
        c = cc;
 800f9ba:	7dbb      	ldrb	r3, [r7, #22]
 800f9bc:	75fb      	strb	r3, [r7, #23]

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	f003 0301 	and.w	r3, r3, #1
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	bf0c      	ite	eq
 800f9ce:	2301      	moveq	r3, #1
 800f9d0:	2300      	movne	r3, #0
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	757b      	strb	r3, [r7, #21]
        c   |= x[i] & ( x[i-1] * adjust );
 800f9d6:	68fa      	ldr	r2, [r7, #12]
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	4413      	add	r3, r2
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	b25a      	sxtb	r2, r3
 800f9e0:	69fb      	ldr	r3, [r7, #28]
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	68f9      	ldr	r1, [r7, #12]
 800f9e6:	440b      	add	r3, r1
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	7d79      	ldrb	r1, [r7, #21]
 800f9ec:	fb11 f303 	smulbb	r3, r1, r3
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	b25b      	sxtb	r3, r3
 800f9f4:	4013      	ands	r3, r2
 800f9f6:	b25a      	sxtb	r2, r3
 800f9f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	b25b      	sxtb	r3, r3
 800fa00:	75fb      	strb	r3, [r7, #23]
        x[i] = x[i] ^ ( x[i-1] * adjust );
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	4413      	add	r3, r2
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	b25a      	sxtb	r2, r3
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	3b01      	subs	r3, #1
 800fa10:	68f9      	ldr	r1, [r7, #12]
 800fa12:	440b      	add	r3, r1
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	7d79      	ldrb	r1, [r7, #21]
 800fa18:	fb11 f303 	smulbb	r3, r1, r3
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	b25b      	sxtb	r3, r3
 800fa20:	4053      	eors	r3, r2
 800fa22:	b259      	sxtb	r1, r3
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	4413      	add	r3, r2
 800fa2a:	b2ca      	uxtb	r2, r1
 800fa2c:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	3b01      	subs	r3, #1
 800fa32:	68fa      	ldr	r2, [r7, #12]
 800fa34:	4413      	add	r3, r2
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	b25a      	sxtb	r2, r3
 800fa3a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800fa3e:	01db      	lsls	r3, r3, #7
 800fa40:	b25b      	sxtb	r3, r3
 800fa42:	4313      	orrs	r3, r2
 800fa44:	b259      	sxtb	r1, r3
 800fa46:	69fb      	ldr	r3, [r7, #28]
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	68fa      	ldr	r2, [r7, #12]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	b2ca      	uxtb	r2, r1
 800fa50:	701a      	strb	r2, [r3, #0]
    for( i = 1; i <= d; i++ )
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	3301      	adds	r3, #1
 800fa56:	61fb      	str	r3, [r7, #28]
 800fa58:	69fa      	ldr	r2, [r7, #28]
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d99a      	bls.n	800f996 <ecp_comb_recode_core+0x86>
    }
}
 800fa60:	bf00      	nop
 800fa62:	bf00      	nop
 800fa64:	3720      	adds	r7, #32
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <ecp_precompute_comb>:
 */
static int ecp_precompute_comb( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,
                                unsigned char w, size_t d,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b0a8      	sub	sp, #160	@ 0xa0
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	60f8      	str	r0, [r7, #12]
 800fa72:	60b9      	str	r1, [r7, #8]
 800fa74:	607a      	str	r2, [r7, #4]
 800fa76:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char i;
    size_t j = 0;
 800fa78:	2300      	movs	r3, #0
 800fa7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const unsigned char T_size = 1U << ( w - 1 );
 800fa7e:	78fb      	ldrb	r3, [r7, #3]
 800fa80:	3b01      	subs	r3, #1
 800fa82:	2201      	movs	r2, #1
 800fa84:	fa02 f303 	lsl.w	r3, r2, r3
 800fa88:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800fa8c:	6879      	ldr	r1, [r7, #4]
 800fa8e:	68b8      	ldr	r0, [r7, #8]
 800fa90:	f7fe fb8a 	bl	800e1a8 <mbedtls_ecp_copy>
 800fa94:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fa98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f040 8102 	bne.w	800fca6 <ecp_precompute_comb+0x23c>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL && rs_ctx->rsm->i != 0 )
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;
 800faa2:	2300      	movs	r3, #0
 800faa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for( ; j < d * ( w - 1 ); j++ )
 800faa8:	e04d      	b.n	800fb46 <ecp_precompute_comb+0xdc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
 800faaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800faae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fab2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fab6:	2201      	movs	r2, #1
 800fab8:	fa02 f303 	lsl.w	r3, r2, r3
 800fabc:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
        cur = T + i;
 800fac0:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fac4:	4613      	mov	r3, r2
 800fac6:	00db      	lsls	r3, r3, #3
 800fac8:	4413      	add	r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	461a      	mov	r2, r3
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	4413      	add	r3, r2
 800fad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        if( j % d == 0 )
 800fad6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fade:	fbb3 f2f2 	udiv	r2, r3, r2
 800fae2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800fae6:	fb01 f202 	mul.w	r2, r1, r2
 800faea:	1a9b      	subs	r3, r3, r2
 800faec:	2b00      	cmp	r3, #0
 800faee:	d117      	bne.n	800fb20 <ecp_precompute_comb+0xb6>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800faf0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800faf4:	085b      	lsrs	r3, r3, #1
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	461a      	mov	r2, r3
 800fafa:	4613      	mov	r3, r2
 800fafc:	00db      	lsls	r3, r3, #3
 800fafe:	4413      	add	r3, r2
 800fb00:	009b      	lsls	r3, r3, #2
 800fb02:	461a      	mov	r2, r3
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	4413      	add	r3, r2
 800fb08:	4619      	mov	r1, r3
 800fb0a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800fb0e:	f7fe fb4b 	bl	800e1a8 <mbedtls_ecp_copy>
 800fb12:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fb16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	f040 80c3 	bne.w	800fca6 <ecp_precompute_comb+0x23c>

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800fb20:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fb24:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f7fe fef5 	bl	800e918 <ecp_double_jac>
 800fb2e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fb32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	f040 80b5 	bne.w	800fca6 <ecp_precompute_comb+0x23c>
    for( ; j < d * ( w - 1 ); j++ )
 800fb3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fb40:	3301      	adds	r3, #1
 800fb42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fb46:	78fb      	ldrb	r3, [r7, #3]
 800fb48:	3b01      	subs	r3, #1
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fb50:	fb02 f303 	mul.w	r3, r2, r3
 800fb54:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d3a6      	bcc.n	800faaa <ecp_precompute_comb+0x40>
#endif
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    for( i = 1; i < T_size; i <<= 1 )
 800fb62:	2301      	movs	r3, #1
 800fb64:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fb68:	e017      	b.n	800fb9a <ecp_precompute_comb+0x130>
        TT[j++] = T + i;
 800fb6a:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fb6e:	4613      	mov	r3, r2
 800fb70:	00db      	lsls	r3, r3, #3
 800fb72:	4413      	add	r3, r2
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	4619      	mov	r1, r3
 800fb78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fb7c:	1c5a      	adds	r2, r3, #1
 800fb7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fb82:	68ba      	ldr	r2, [r7, #8]
 800fb84:	440a      	add	r2, r1
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	33a0      	adds	r3, #160	@ 0xa0
 800fb8a:	443b      	add	r3, r7
 800fb8c:	f843 2c90 	str.w	r2, [r3, #-144]
    for( i = 1; i < T_size; i <<= 1 )
 800fb90:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fb94:	005b      	lsls	r3, r3, #1
 800fb96:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fb9a:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fb9e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d3e1      	bcc.n	800fb6a <ecp_precompute_comb+0x100>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800fba6:	f107 0310 	add.w	r3, r7, #16
 800fbaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fbae:	4619      	mov	r1, r3
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	f7fe fc77 	bl	800e4a4 <ecp_normalize_jac_many>
 800fbb6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fbba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d171      	bne.n	800fca6 <ecp_precompute_comb+0x23c>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fbc8:	e038      	b.n	800fc3c <ecp_precompute_comb+0x1d2>
    {
        j = i;
 800fbca:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fbce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        while( j-- )
 800fbd2:	e027      	b.n	800fc24 <ecp_precompute_comb+0x1ba>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800fbd4:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fbd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fbdc:	441a      	add	r2, r3
 800fbde:	4613      	mov	r3, r2
 800fbe0:	00db      	lsls	r3, r3, #3
 800fbe2:	4413      	add	r3, r2
 800fbe4:	009b      	lsls	r3, r3, #2
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	1899      	adds	r1, r3, r2
 800fbec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fbf0:	4613      	mov	r3, r2
 800fbf2:	00db      	lsls	r3, r3, #3
 800fbf4:	4413      	add	r3, r2
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	1898      	adds	r0, r3, r2
 800fbfe:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fc02:	4613      	mov	r3, r2
 800fc04:	00db      	lsls	r3, r3, #3
 800fc06:	4413      	add	r3, r2
 800fc08:	009b      	lsls	r3, r3, #2
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	4413      	add	r3, r2
 800fc10:	4602      	mov	r2, r0
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f7ff fa5a 	bl	800f0cc <ecp_add_mixed>
 800fc18:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fc1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d140      	bne.n	800fca6 <ecp_precompute_comb+0x23c>
        while( j-- )
 800fc24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc28:	1e5a      	subs	r2, r3, #1
 800fc2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1d0      	bne.n	800fbd4 <ecp_precompute_comb+0x16a>
    for( i = 1; i < T_size; i <<= 1 )
 800fc32:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fc3c:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fc40:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d3c0      	bcc.n	800fbca <ecp_precompute_comb+0x160>
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
 800fc48:	2300      	movs	r3, #0
 800fc4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fc4e:	e015      	b.n	800fc7c <ecp_precompute_comb+0x212>
        TT[j] = T + j + 1;
 800fc50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc54:	1c5a      	adds	r2, r3, #1
 800fc56:	4613      	mov	r3, r2
 800fc58:	00db      	lsls	r3, r3, #3
 800fc5a:	4413      	add	r3, r2
 800fc5c:	009b      	lsls	r3, r3, #2
 800fc5e:	461a      	mov	r2, r3
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	441a      	add	r2, r3
 800fc64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	33a0      	adds	r3, #160	@ 0xa0
 800fc6c:	443b      	add	r3, r7
 800fc6e:	f843 2c90 	str.w	r2, [r3, #-144]
    for( j = 0; j + 1 < T_size; j++ )
 800fc72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc76:	3301      	adds	r3, #1
 800fc78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fc7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc80:	1c5a      	adds	r2, r3, #1
 800fc82:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d3e2      	bcc.n	800fc50 <ecp_precompute_comb+0x1e6>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800fc8a:	f107 0310 	add.w	r3, r7, #16
 800fc8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fc92:	4619      	mov	r1, r3
 800fc94:	68f8      	ldr	r0, [r7, #12]
 800fc96:	f7fe fc05 	bl	800e4a4 <ecp_normalize_jac_many>
 800fc9a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fc9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fca2:	2b00      	cmp	r3, #0

cleanup:
 800fca4:	bf00      	nop
        if( rs_ctx->rsm->state == ecp_rsm_pre_dbl )
            rs_ctx->rsm->i = j;
    }
#endif

    return( ret );
 800fca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	37a0      	adds	r7, #160	@ 0xa0
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}

0800fcb2 <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 800fcb2:	b580      	push	{r7, lr}
 800fcb4:	b086      	sub	sp, #24
 800fcb6:	af00      	add	r7, sp, #0
 800fcb8:	60f8      	str	r0, [r7, #12]
 800fcba:	60b9      	str	r1, [r7, #8]
 800fcbc:	607a      	str	r2, [r7, #4]
 800fcbe:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 800fcc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fcc4:	085b      	lsrs	r3, r3, #1
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fccc:	74bb      	strb	r3, [r7, #18]

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 800fcce:	2300      	movs	r3, #0
 800fcd0:	74fb      	strb	r3, [r7, #19]
 800fcd2:	e035      	b.n	800fd40 <ecp_select_comb+0x8e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800fcd4:	68b8      	ldr	r0, [r7, #8]
 800fcd6:	7cfa      	ldrb	r2, [r7, #19]
 800fcd8:	4613      	mov	r3, r2
 800fcda:	00db      	lsls	r3, r3, #3
 800fcdc:	4413      	add	r3, r2
 800fcde:	009b      	lsls	r3, r3, #2
 800fce0:	461a      	mov	r2, r3
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4413      	add	r3, r2
 800fce6:	4619      	mov	r1, r3
 800fce8:	7cfa      	ldrb	r2, [r7, #19]
 800fcea:	7cbb      	ldrb	r3, [r7, #18]
 800fcec:	429a      	cmp	r2, r3
 800fcee:	bf0c      	ite	eq
 800fcf0:	2301      	moveq	r3, #1
 800fcf2:	2300      	movne	r3, #0
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	f7fa fbed 	bl	800a4d6 <mbedtls_mpi_safe_cond_assign>
 800fcfc:	6178      	str	r0, [r7, #20]
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d12e      	bne.n	800fd62 <ecp_select_comb+0xb0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f103 000c 	add.w	r0, r3, #12
 800fd0a:	7cfa      	ldrb	r2, [r7, #19]
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	00db      	lsls	r3, r3, #3
 800fd10:	4413      	add	r3, r2
 800fd12:	009b      	lsls	r3, r3, #2
 800fd14:	461a      	mov	r2, r3
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4413      	add	r3, r2
 800fd1a:	f103 010c 	add.w	r1, r3, #12
 800fd1e:	7cfa      	ldrb	r2, [r7, #19]
 800fd20:	7cbb      	ldrb	r3, [r7, #18]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	bf0c      	ite	eq
 800fd26:	2301      	moveq	r3, #1
 800fd28:	2300      	movne	r3, #0
 800fd2a:	b2db      	uxtb	r3, r3
 800fd2c:	461a      	mov	r2, r3
 800fd2e:	f7fa fbd2 	bl	800a4d6 <mbedtls_mpi_safe_cond_assign>
 800fd32:	6178      	str	r0, [r7, #20]
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d113      	bne.n	800fd62 <ecp_select_comb+0xb0>
    for( j = 0; j < T_size; j++ )
 800fd3a:	7cfb      	ldrb	r3, [r7, #19]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	74fb      	strb	r3, [r7, #19]
 800fd40:	7cfa      	ldrb	r2, [r7, #19]
 800fd42:	78fb      	ldrb	r3, [r7, #3]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d3c5      	bcc.n	800fcd4 <ecp_select_comb+0x22>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 800fd48:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fd4c:	09db      	lsrs	r3, r3, #7
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	461a      	mov	r2, r3
 800fd52:	68b9      	ldr	r1, [r7, #8]
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f7fe fd9b 	bl	800e890 <ecp_safe_invert_jac>
 800fd5a:	6178      	str	r0, [r7, #20]
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	2b00      	cmp	r3, #0

cleanup:
 800fd60:	bf00      	nop
    return( ret );
 800fd62:	697b      	ldr	r3, [r7, #20]
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3718      	adds	r7, #24
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <ecp_mul_comb_core>:
                              const mbedtls_ecp_point T[], unsigned char T_size,
                              const unsigned char x[], size_t d,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng,
                              mbedtls_ecp_restart_ctx *rs_ctx )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b092      	sub	sp, #72	@ 0x48
 800fd70:	af02      	add	r7, sp, #8
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
 800fd78:	70fb      	strb	r3, [r7, #3]
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
 800fd7a:	f107 0314 	add.w	r3, r7, #20
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7fe f927 	bl	800dfd2 <mbedtls_ecp_point_init>
    }
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
 800fd84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd86:	63bb      	str	r3, [r7, #56]	@ 0x38
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800fd88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd8c:	4413      	add	r3, r2
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	78fa      	ldrb	r2, [r7, #3]
 800fd92:	9300      	str	r3, [sp, #0]
 800fd94:	4613      	mov	r3, r2
 800fd96:	687a      	ldr	r2, [r7, #4]
 800fd98:	68b9      	ldr	r1, [r7, #8]
 800fd9a:	68f8      	ldr	r0, [r7, #12]
 800fd9c:	f7ff ff89 	bl	800fcb2 <ecp_select_comb>
 800fda0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fda2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d143      	bne.n	800fe30 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	3318      	adds	r3, #24
 800fdac:	2101      	movs	r1, #1
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fa fc94 	bl	800a6dc <mbedtls_mpi_lset>
 800fdb4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fdb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d139      	bne.n	800fe30 <ecp_mul_comb_core+0xc4>
        if( f_rng != 0 )
 800fdbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d032      	beq.n	800fe28 <ecp_mul_comb_core+0xbc>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800fdc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fdc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fdc6:	68b9      	ldr	r1, [r7, #8]
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f7ff fcb7 	bl	800f73c <ecp_randomize_jac>
 800fdce:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fdd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d12c      	bne.n	800fe30 <ecp_mul_comb_core+0xc4>
    }

    while( i != 0 )
 800fdd6:	e027      	b.n	800fe28 <ecp_mul_comb_core+0xbc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;
 800fdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdda:	3b01      	subs	r3, #1
 800fddc:	63bb      	str	r3, [r7, #56]	@ 0x38

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	68b9      	ldr	r1, [r7, #8]
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f7fe fd98 	bl	800e918 <ecp_double_jac>
 800fde8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fdea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d11f      	bne.n	800fe30 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800fdf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf4:	4413      	add	r3, r2
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	78fa      	ldrb	r2, [r7, #3]
 800fdfa:	f107 0114 	add.w	r1, r7, #20
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	4613      	mov	r3, r2
 800fe02:	687a      	ldr	r2, [r7, #4]
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f7ff ff54 	bl	800fcb2 <ecp_select_comb>
 800fe0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fe0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d10e      	bne.n	800fe30 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800fe12:	f107 0314 	add.w	r3, r7, #20
 800fe16:	68ba      	ldr	r2, [r7, #8]
 800fe18:	68b9      	ldr	r1, [r7, #8]
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f7ff f956 	bl	800f0cc <ecp_add_mixed>
 800fe20:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fe22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d103      	bne.n	800fe30 <ecp_mul_comb_core+0xc4>
    while( i != 0 )
 800fe28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d1d4      	bne.n	800fdd8 <ecp_mul_comb_core+0x6c>
    }

cleanup:
 800fe2e:	bf00      	nop

    mbedtls_ecp_point_free( &Txi );
 800fe30:	f107 0314 	add.w	r3, r7, #20
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7fe f937 	bl	800e0a8 <mbedtls_ecp_point_free>
        rs_ctx->rsm->i = i;
        /* no need to save R, already pointing to rs_ctx->rsm->R */
    }
#endif

    return( ret );
 800fe3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3740      	adds	r7, #64	@ 0x40
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <ecp_comb_recode_scalar>:
                                   const mbedtls_mpi *m,
                                   unsigned char k[COMB_MAX_D + 1],
                                   size_t d,
                                   unsigned char w,
                                   unsigned char *parity_trick )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b08c      	sub	sp, #48	@ 0x30
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	60f8      	str	r0, [r7, #12]
 800fe4c:	60b9      	str	r1, [r7, #8]
 800fe4e:	607a      	str	r2, [r7, #4]
 800fe50:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 800fe52:	f107 0320 	add.w	r3, r7, #32
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7fa f9ff 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 800fe5c:	f107 0314 	add.w	r3, r7, #20
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fa f9fa 	bl	800a25a <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	334c      	adds	r3, #76	@ 0x4c
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fa fc61 	bl	800a734 <mbedtls_mpi_get_bit>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d001      	beq.n	800fe7c <ecp_comb_recode_scalar+0x38>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800fe78:	4b24      	ldr	r3, [pc, #144]	@ (800ff0c <ecp_comb_recode_scalar+0xc8>)
 800fe7a:	e043      	b.n	800ff04 <ecp_comb_recode_scalar+0xc0>

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	68b8      	ldr	r0, [r7, #8]
 800fe80:	f7fa fc58 	bl	800a734 <mbedtls_mpi_get_bit>
 800fe84:	4603      	mov	r3, r0
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	bf0c      	ite	eq
 800fe8a:	2301      	moveq	r3, #1
 800fe8c:	2300      	movne	r3, #0
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	461a      	mov	r2, r3
 800fe92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe94:	701a      	strb	r2, [r3, #0]

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800fe96:	f107 0320 	add.w	r3, r7, #32
 800fe9a:	68b9      	ldr	r1, [r7, #8]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fa fabe 	bl	800a41e <mbedtls_mpi_copy>
 800fea2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d121      	bne.n	800feee <ecp_comb_recode_scalar+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800feb0:	f107 0314 	add.w	r3, r7, #20
 800feb4:	68ba      	ldr	r2, [r7, #8]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fb fb1a 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 800febc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800febe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d114      	bne.n	800feee <ecp_comb_recode_scalar+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800fec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fec6:	781a      	ldrb	r2, [r3, #0]
 800fec8:	f107 0114 	add.w	r1, r7, #20
 800fecc:	f107 0320 	add.w	r3, r7, #32
 800fed0:	4618      	mov	r0, r3
 800fed2:	f7fa fb00 	bl	800a4d6 <mbedtls_mpi_safe_cond_assign>
 800fed6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d107      	bne.n	800feee <ecp_comb_recode_scalar+0xaa>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );
 800fede:	f107 0320 	add.w	r3, r7, #32
 800fee2:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fee6:	6839      	ldr	r1, [r7, #0]
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f7ff fd11 	bl	800f910 <ecp_comb_recode_core>

cleanup:
    mbedtls_mpi_free( &mm );
 800feee:	f107 0314 	add.w	r3, r7, #20
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fa f9c4 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 800fef8:	f107 0320 	add.w	r3, r7, #32
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7fa f9bf 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 800ff02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3730      	adds	r7, #48	@ 0x30
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	ffffb080 	.word	0xffffb080

0800ff10 <ecp_mul_comb_after_precomp>:
                                unsigned char w,
                                size_t d,
                                int (*f_rng)(void *, unsigned char *, size_t),
                                void *p_rng,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800ff10:	b590      	push	{r4, r7, lr}
 800ff12:	b0cf      	sub	sp, #316	@ 0x13c
 800ff14:	af06      	add	r7, sp, #24
 800ff16:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 800ff1a:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800ff1e:	6020      	str	r0, [r4, #0]
 800ff20:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800ff24:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800ff28:	6001      	str	r1, [r0, #0]
 800ff2a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800ff2e:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800ff32:	600a      	str	r2, [r1, #0]
 800ff34:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800ff38:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800ff3c:	6013      	str	r3, [r2, #0]
    int ret;
    unsigned char parity_trick;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *RR = R;
 800ff3e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff42:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800ff4c:	f107 0210 	add.w	r2, r7, #16
 800ff50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff54:	f5a3 718e 	sub.w	r1, r3, #284	@ 0x11c
 800ff58:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff5c:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800ff60:	f207 1317 	addw	r3, r7, #279	@ 0x117
 800ff64:	9301      	str	r3, [sp, #4]
 800ff66:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 800ff6a:	9300      	str	r3, [sp, #0]
 800ff6c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ff70:	6809      	ldr	r1, [r1, #0]
 800ff72:	6800      	ldr	r0, [r0, #0]
 800ff74:	f7ff ff66 	bl	800fe44 <ecp_comb_recode_scalar>
 800ff78:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ff7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d145      	bne.n	8010010 <ecp_mul_comb_after_precomp+0x100>
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800ff84:	f897 1130 	ldrb.w	r1, [r7, #304]	@ 0x130
 800ff88:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff8c:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800ff90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff94:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800ff98:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800ff9c:	9304      	str	r3, [sp, #16]
 800ff9e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ffa2:	9303      	str	r3, [sp, #12]
 800ffa4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800ffa8:	9302      	str	r3, [sp, #8]
 800ffaa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ffae:	9301      	str	r3, [sp, #4]
 800ffb0:	f107 0310 	add.w	r3, r7, #16
 800ffb4:	9300      	str	r3, [sp, #0]
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	6812      	ldr	r2, [r2, #0]
 800ffba:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800ffbe:	6800      	ldr	r0, [r0, #0]
 800ffc0:	f7ff fed4 	bl	800fd6c <ecp_mul_comb_core>
 800ffc4:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ffc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d11f      	bne.n	8010010 <ecp_mul_comb_after_precomp+0x100>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800ffd0:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800ffd4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ffd8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ffdc:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800ffe0:	6818      	ldr	r0, [r3, #0]
 800ffe2:	f7fe fc55 	bl	800e890 <ecp_safe_invert_jac>
 800ffe6:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ffea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d10e      	bne.n	8010010 <ecp_mul_comb_after_precomp+0x100>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 800fff2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fff6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800fffa:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800fffe:	6818      	ldr	r0, [r3, #0]
 8010000:	f7fe f99e 	bl	800e340 <ecp_normalize_jac>
 8010004:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 8010008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801000c:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
 801000e:	bf00      	nop
    return( ret );
 8010010:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
}
 8010014:	4618      	mov	r0, r3
 8010016:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 801001a:	46bd      	mov	sp, r7
 801001c:	bd90      	pop	{r4, r7, pc}

0801001e <ecp_pick_window_size>:
/*
 * Pick window size based on curve size and whether we optimize for base point
 */
static unsigned char ecp_pick_window_size( const mbedtls_ecp_group *grp,
                                           unsigned char p_eq_g )
{
 801001e:	b480      	push	{r7}
 8010020:	b085      	sub	sp, #20
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
 8010026:	460b      	mov	r3, r1
 8010028:	70fb      	strb	r3, [r7, #3]
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801002e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8010032:	d301      	bcc.n	8010038 <ecp_pick_window_size+0x1a>
 8010034:	2305      	movs	r3, #5
 8010036:	e000      	b.n	801003a <ecp_pick_window_size+0x1c>
 8010038:	2304      	movs	r3, #4
 801003a:	73fb      	strb	r3, [r7, #15]
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
 801003c:	78fb      	ldrb	r3, [r7, #3]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d002      	beq.n	8010048 <ecp_pick_window_size+0x2a>
        w++;
 8010042:	7bfb      	ldrb	r3, [r7, #15]
 8010044:	3301      	adds	r3, #1
 8010046:	73fb      	strb	r3, [r7, #15]

    /*
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
 8010048:	7bfb      	ldrb	r3, [r7, #15]
 801004a:	2b06      	cmp	r3, #6
 801004c:	d901      	bls.n	8010052 <ecp_pick_window_size+0x34>
        w = MBEDTLS_ECP_WINDOW_SIZE;
 801004e:	2306      	movs	r3, #6
 8010050:	73fb      	strb	r3, [r7, #15]
    if( w >= grp->nbits )
 8010052:	7bfa      	ldrb	r2, [r7, #15]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010058:	429a      	cmp	r2, r3
 801005a:	d301      	bcc.n	8010060 <ecp_pick_window_size+0x42>
        w = 2;
 801005c:	2302      	movs	r3, #2
 801005e:	73fb      	strb	r3, [r7, #15]

    return( w );
 8010060:	7bfb      	ldrb	r3, [r7, #15]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
	...

08010070 <ecp_mul_comb>:
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng,
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b090      	sub	sp, #64	@ 0x40
 8010074:	af06      	add	r7, sp, #24
 8010076:	60f8      	str	r0, [r7, #12]
 8010078:	60b9      	str	r1, [r7, #8]
 801007a:	607a      	str	r2, [r7, #4]
 801007c:	603b      	str	r3, [r7, #0]

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	f103 020c 	add.w	r2, r3, #12
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	3334      	adds	r3, #52	@ 0x34
 8010088:	4619      	mov	r1, r3
 801008a:	4610      	mov	r0, r2
 801008c:	f7fa ffc6 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10b      	bne.n	80100ae <ecp_mul_comb+0x3e>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 8010096:	683a      	ldr	r2, [r7, #0]
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	3328      	adds	r3, #40	@ 0x28
 801009c:	4619      	mov	r1, r3
 801009e:	4610      	mov	r0, r2
 80100a0:	f7fa ffbc 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 80100a4:	4603      	mov	r3, r0
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d101      	bne.n	80100ae <ecp_mul_comb+0x3e>
 80100aa:	2301      	movs	r3, #1
 80100ac:	e000      	b.n	80100b0 <ecp_mul_comb+0x40>
 80100ae:	2300      	movs	r3, #0
 80100b0:	76fb      	strb	r3, [r7, #27]
#else
    p_eq_g = 0;
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
 80100b2:	7efb      	ldrb	r3, [r7, #27]
 80100b4:	4619      	mov	r1, r3
 80100b6:	68f8      	ldr	r0, [r7, #12]
 80100b8:	f7ff ffb1 	bl	801001e <ecp_pick_window_size>
 80100bc:	4603      	mov	r3, r0
 80100be:	76bb      	strb	r3, [r7, #26]
    T_size = 1U << ( w - 1 );
 80100c0:	7ebb      	ldrb	r3, [r7, #26]
 80100c2:	3b01      	subs	r3, #1
 80100c4:	2201      	movs	r2, #1
 80100c6:	fa02 f303 	lsl.w	r3, r2, r3
 80100ca:	767b      	strb	r3, [r7, #25]
    d = ( grp->nbits + w - 1 ) / w;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80100d0:	7ebb      	ldrb	r3, [r7, #26]
 80100d2:	4413      	add	r3, r2
 80100d4:	1e5a      	subs	r2, r3, #1
 80100d6:	7ebb      	ldrb	r3, [r7, #26]
 80100d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80100dc:	617b      	str	r3, [r7, #20]

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
 80100de:	7efb      	ldrb	r3, [r7, #27]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d00a      	beq.n	80100fa <ecp_mul_comb+0x8a>
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d006      	beq.n	80100fa <ecp_mul_comb+0x8a>
    {
        /* second pointer to the same table, will be deleted on exit */
        T = grp->T;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100f0:	61fb      	str	r3, [r7, #28]
        T_ok = 1;
 80100f2:	2301      	movs	r3, #1
 80100f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80100f8:	e029      	b.n	801014e <ecp_mul_comb+0xde>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 80100fa:	7e7b      	ldrb	r3, [r7, #25]
 80100fc:	2124      	movs	r1, #36	@ 0x24
 80100fe:	4618      	mov	r0, r3
 8010100:	f005 fb70 	bl	80157e4 <calloc>
 8010104:	4603      	mov	r3, r0
 8010106:	61fb      	str	r3, [r7, #28]
        if( T == NULL )
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d102      	bne.n	8010114 <ecp_mul_comb+0xa4>
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 801010e:	4b42      	ldr	r3, [pc, #264]	@ (8010218 <ecp_mul_comb+0x1a8>)
 8010110:	627b      	str	r3, [r7, #36]	@ 0x24
            goto cleanup;
 8010112:	e04e      	b.n	80101b2 <ecp_mul_comb+0x142>
        }

        for( i = 0; i < T_size; i++ )
 8010114:	2300      	movs	r3, #0
 8010116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801011a:	e010      	b.n	801013e <ecp_mul_comb+0xce>
            mbedtls_ecp_point_init( &T[i] );
 801011c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8010120:	4613      	mov	r3, r2
 8010122:	00db      	lsls	r3, r3, #3
 8010124:	4413      	add	r3, r2
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	461a      	mov	r2, r3
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	4413      	add	r3, r2
 801012e:	4618      	mov	r0, r3
 8010130:	f7fd ff4f 	bl	800dfd2 <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
 8010134:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010138:	3301      	adds	r3, #1
 801013a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801013e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8010142:	7e7b      	ldrb	r3, [r7, #25]
 8010144:	429a      	cmp	r2, r3
 8010146:	d3e9      	bcc.n	801011c <ecp_mul_comb+0xac>

        T_ok = 0;
 8010148:	2300      	movs	r3, #0
 801014a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
 801014e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8010152:	2b00      	cmp	r3, #0
 8010154:	d117      	bne.n	8010186 <ecp_mul_comb+0x116>
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 8010156:	7eba      	ldrb	r2, [r7, #26]
 8010158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801015a:	9301      	str	r3, [sp, #4]
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	4613      	mov	r3, r2
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	69f9      	ldr	r1, [r7, #28]
 8010166:	68f8      	ldr	r0, [r7, #12]
 8010168:	f7ff fc7f 	bl	800fa6a <ecp_precompute_comb>
 801016c:	6278      	str	r0, [r7, #36]	@ 0x24
 801016e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010170:	2b00      	cmp	r3, #0
 8010172:	d11e      	bne.n	80101b2 <ecp_mul_comb+0x142>

        if( p_eq_g )
 8010174:	7efb      	ldrb	r3, [r7, #27]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d005      	beq.n	8010186 <ecp_mul_comb+0x116>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	69fa      	ldr	r2, [r7, #28]
 801017e:	675a      	str	r2, [r3, #116]	@ 0x74
            grp->T_size = T_size;
 8010180:	7e7a      	ldrb	r2, [r7, #25]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	679a      	str	r2, [r3, #120]	@ 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 8010186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010188:	9305      	str	r3, [sp, #20]
 801018a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801018c:	9304      	str	r3, [sp, #16]
 801018e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010190:	9303      	str	r3, [sp, #12]
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	9302      	str	r3, [sp, #8]
 8010196:	7ebb      	ldrb	r3, [r7, #26]
 8010198:	9301      	str	r3, [sp, #4]
 801019a:	7e7b      	ldrb	r3, [r7, #25]
 801019c:	9300      	str	r3, [sp, #0]
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	68b9      	ldr	r1, [r7, #8]
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	f7ff feb3 	bl	800ff10 <ecp_mul_comb_after_precomp>
 80101aa:	6278      	str	r0, [r7, #36]	@ 0x24
 80101ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ae:	2b00      	cmp	r3, #0
                                                 T, T_size, w, d,
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:
 80101b0:	bf00      	nop

    /* does T belong to the group? */
    if( T == grp->T )
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101b6:	69fa      	ldr	r2, [r7, #28]
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d101      	bne.n	80101c0 <ecp_mul_comb+0x150>
        T = NULL;
 80101bc:	2300      	movs	r3, #0
 80101be:	61fb      	str	r3, [r7, #28]
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d01c      	beq.n	8010200 <ecp_mul_comb+0x190>
    {
        for( i = 0; i < T_size; i++ )
 80101c6:	2300      	movs	r3, #0
 80101c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80101cc:	e010      	b.n	80101f0 <ecp_mul_comb+0x180>
            mbedtls_ecp_point_free( &T[i] );
 80101ce:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80101d2:	4613      	mov	r3, r2
 80101d4:	00db      	lsls	r3, r3, #3
 80101d6:	4413      	add	r3, r2
 80101d8:	009b      	lsls	r3, r3, #2
 80101da:	461a      	mov	r2, r3
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	4413      	add	r3, r2
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fd ff61 	bl	800e0a8 <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
 80101e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80101ea:	3301      	adds	r3, #1
 80101ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80101f0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80101f4:	7e7b      	ldrb	r3, [r7, #25]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d3e9      	bcc.n	80101ce <ecp_mul_comb+0x15e>
        mbedtls_free( T );
 80101fa:	69f8      	ldr	r0, [r7, #28]
 80101fc:	f005 fb0e 	bl	801581c <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
 8010200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010202:	2b00      	cmp	r3, #0
 8010204:	d002      	beq.n	801020c <ecp_mul_comb+0x19c>
        mbedtls_ecp_point_free( R );
 8010206:	68b8      	ldr	r0, [r7, #8]
 8010208:	f7fd ff4e 	bl	800e0a8 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( rsm );

    return( ret );
 801020c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801020e:	4618      	mov	r0, r3
 8010210:	3728      	adds	r7, #40	@ 0x28
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	ffffb280 	.word	0xffffb280

0801021c <ecp_normalize_mxz>:
/*
 * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1
 * Cost: 1M + 1I
 */
static int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_mxz( grp, P ) );
#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	f103 0018 	add.w	r0, r3, #24
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	f103 0118 	add.w	r1, r3, #24
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	3304      	adds	r3, #4
 8010236:	461a      	mov	r2, r3
 8010238:	f7fd fb2c 	bl	800d894 <mbedtls_mpi_inv_mod>
 801023c:	60f8      	str	r0, [r7, #12]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d122      	bne.n	801028a <ecp_normalize_mxz+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 8010244:	6838      	ldr	r0, [r7, #0]
 8010246:	6839      	ldr	r1, [r7, #0]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	3318      	adds	r3, #24
 801024c:	461a      	mov	r2, r3
 801024e:	f7fc fd84 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d117      	bne.n	801028a <ecp_normalize_mxz+0x6e>
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	6879      	ldr	r1, [r7, #4]
 801025e:	4618      	mov	r0, r3
 8010260:	f7fe f80a 	bl	800e278 <ecp_modp>
 8010264:	60f8      	str	r0, [r7, #12]
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d10e      	bne.n	801028a <ecp_normalize_mxz+0x6e>
 801026c:	4b09      	ldr	r3, [pc, #36]	@ (8010294 <ecp_normalize_mxz+0x78>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	3301      	adds	r3, #1
 8010272:	4a08      	ldr	r2, [pc, #32]	@ (8010294 <ecp_normalize_mxz+0x78>)
 8010274:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	3318      	adds	r3, #24
 801027a:	2101      	movs	r1, #1
 801027c:	4618      	mov	r0, r3
 801027e:	f7fa fa2d 	bl	800a6dc <mbedtls_mpi_lset>
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2b00      	cmp	r3, #0

cleanup:
 8010288:	bf00      	nop
    return( ret );
 801028a:	68fb      	ldr	r3, [r7, #12]
}
 801028c:	4618      	mov	r0, r3
 801028e:	3710      	adds	r7, #16
 8010290:	46bd      	mov	sp, r7
 8010292:	bd80      	pop	{r7, pc}
 8010294:	2400257c 	.word	0x2400257c

08010298 <ecp_randomize_mxz>:
 * This countermeasure was first suggested in [2].
 * Cost: 2M
 */
static int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b08a      	sub	sp, #40	@ 0x28
 801029c:	af00      	add	r7, sp, #0
 801029e:	60f8      	str	r0, [r7, #12]
 80102a0:	60b9      	str	r1, [r7, #8]
 80102a2:	607a      	str	r2, [r7, #4]
 80102a4:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l;
    size_t p_size;
    int count = 0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	623b      	str	r3, [r7, #32]
#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );
#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80102ae:	3307      	adds	r3, #7
 80102b0:	08db      	lsrs	r3, r3, #3
 80102b2:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi_init( &l );
 80102b4:	f107 0310 	add.w	r3, r7, #16
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7f9 ffce 	bl	800a25a <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 80102be:	f107 0010 	add.w	r0, r7, #16
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	69f9      	ldr	r1, [r7, #28]
 80102c8:	f7fd fa9c 	bl	800d804 <mbedtls_mpi_fill_random>
 80102cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80102ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d15b      	bne.n	801038c <ecp_randomize_mxz+0xf4>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 80102d4:	e009      	b.n	80102ea <ecp_randomize_mxz+0x52>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 80102d6:	f107 0310 	add.w	r3, r7, #16
 80102da:	2101      	movs	r1, #1
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fa fd80 	bl	800ade2 <mbedtls_mpi_shift_r>
 80102e2:	6278      	str	r0, [r7, #36]	@ 0x24
 80102e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d150      	bne.n	801038c <ecp_randomize_mxz+0xf4>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	1d1a      	adds	r2, r3, #4
 80102ee:	f107 0310 	add.w	r3, r7, #16
 80102f2:	4611      	mov	r1, r2
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7fa fe91 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	daea      	bge.n	80102d6 <ecp_randomize_mxz+0x3e>

        if( count++ > 10 )
 8010300:	6a3b      	ldr	r3, [r7, #32]
 8010302:	1c5a      	adds	r2, r3, #1
 8010304:	623a      	str	r2, [r7, #32]
 8010306:	2b0a      	cmp	r3, #10
 8010308:	dd01      	ble.n	801030e <ecp_randomize_mxz+0x76>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 801030a:	4b25      	ldr	r3, [pc, #148]	@ (80103a0 <ecp_randomize_mxz+0x108>)
 801030c:	e044      	b.n	8010398 <ecp_randomize_mxz+0x100>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 801030e:	f107 0310 	add.w	r3, r7, #16
 8010312:	2101      	movs	r1, #1
 8010314:	4618      	mov	r0, r3
 8010316:	f7fa ff1c 	bl	800b152 <mbedtls_mpi_cmp_int>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	ddce      	ble.n	80102be <ecp_randomize_mxz+0x26>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	68b9      	ldr	r1, [r7, #8]
 8010324:	f107 0210 	add.w	r2, r7, #16
 8010328:	4618      	mov	r0, r3
 801032a:	f7fc fd16 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 801032e:	6278      	str	r0, [r7, #36]	@ 0x24
 8010330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010332:	2b00      	cmp	r3, #0
 8010334:	d12a      	bne.n	801038c <ecp_randomize_mxz+0xf4>
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	68f9      	ldr	r1, [r7, #12]
 801033a:	4618      	mov	r0, r3
 801033c:	f7fd ff9c 	bl	800e278 <ecp_modp>
 8010340:	6278      	str	r0, [r7, #36]	@ 0x24
 8010342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010344:	2b00      	cmp	r3, #0
 8010346:	d121      	bne.n	801038c <ecp_randomize_mxz+0xf4>
 8010348:	4b16      	ldr	r3, [pc, #88]	@ (80103a4 <ecp_randomize_mxz+0x10c>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	3301      	adds	r3, #1
 801034e:	4a15      	ldr	r2, [pc, #84]	@ (80103a4 <ecp_randomize_mxz+0x10c>)
 8010350:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	f103 0018 	add.w	r0, r3, #24
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	3318      	adds	r3, #24
 801035c:	f107 0210 	add.w	r2, r7, #16
 8010360:	4619      	mov	r1, r3
 8010362:	f7fc fcfa 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8010366:	6278      	str	r0, [r7, #36]	@ 0x24
 8010368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801036a:	2b00      	cmp	r3, #0
 801036c:	d10e      	bne.n	801038c <ecp_randomize_mxz+0xf4>
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	3318      	adds	r3, #24
 8010372:	68f9      	ldr	r1, [r7, #12]
 8010374:	4618      	mov	r0, r3
 8010376:	f7fd ff7f 	bl	800e278 <ecp_modp>
 801037a:	6278      	str	r0, [r7, #36]	@ 0x24
 801037c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801037e:	2b00      	cmp	r3, #0
 8010380:	d104      	bne.n	801038c <ecp_randomize_mxz+0xf4>
 8010382:	4b08      	ldr	r3, [pc, #32]	@ (80103a4 <ecp_randomize_mxz+0x10c>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	3301      	adds	r3, #1
 8010388:	4a06      	ldr	r2, [pc, #24]	@ (80103a4 <ecp_randomize_mxz+0x10c>)
 801038a:	6013      	str	r3, [r2, #0]

cleanup:
    mbedtls_mpi_free( &l );
 801038c:	f107 0310 	add.w	r3, r7, #16
 8010390:	4618      	mov	r0, r3
 8010392:	f7f9 ff75 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 8010396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010398:	4618      	mov	r0, r3
 801039a:	3728      	adds	r7, #40	@ 0x28
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	ffffb300 	.word	0xffffb300
 80103a4:	2400257c 	.word	0x2400257c

080103a8 <ecp_double_add_mxz>:
 */
static int ecp_double_add_mxz( const mbedtls_ecp_group *grp,
                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,
                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,
                               const mbedtls_mpi *d )
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b0a0      	sub	sp, #128	@ 0x80
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	60f8      	str	r0, [r7, #12]
 80103b0:	60b9      	str	r1, [r7, #8]
 80103b2:	607a      	str	r2, [r7, #4]
 80103b4:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d ) );
#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */

    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
 80103b6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7f9 ff4d 	bl	800a25a <mbedtls_mpi_init>
 80103c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7f9 ff48 	bl	800a25a <mbedtls_mpi_init>
 80103ca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7f9 ff43 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
 80103d4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80103d8:	4618      	mov	r0, r3
 80103da:	f7f9 ff3e 	bl	800a25a <mbedtls_mpi_init>
 80103de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7f9 ff39 	bl	800a25a <mbedtls_mpi_init>
 80103e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7f9 ff34 	bl	800a25a <mbedtls_mpi_init>
    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
 80103f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7f9 ff2f 	bl	800a25a <mbedtls_mpi_init>
 80103fc:	f107 031c 	add.w	r3, r7, #28
 8010400:	4618      	mov	r0, r3
 8010402:	f7f9 ff2a 	bl	800a25a <mbedtls_mpi_init>
 8010406:	f107 0310 	add.w	r3, r7, #16
 801040a:	4618      	mov	r0, r3
 801040c:	f7f9 ff25 	bl	800a25a <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 8010410:	6839      	ldr	r1, [r7, #0]
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	f103 0218 	add.w	r2, r3, #24
 8010418:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801041c:	4618      	mov	r0, r3
 801041e:	f7fb f823 	bl	800b468 <mbedtls_mpi_add_mpi>
 8010422:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010424:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010426:	2b00      	cmp	r3, #0
 8010428:	f040 825c 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 801042c:	e00d      	b.n	801044a <ecp_double_add_mxz+0xa2>
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	1d1a      	adds	r2, r3, #4
 8010432:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8010436:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801043a:	4618      	mov	r0, r3
 801043c:	f7fa ffb4 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 8010440:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010442:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010444:	2b00      	cmp	r3, #0
 8010446:	f040 824d 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	1d1a      	adds	r2, r3, #4
 801044e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010452:	4611      	mov	r1, r2
 8010454:	4618      	mov	r0, r3
 8010456:	f7fa fde1 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 801045a:	4603      	mov	r3, r0
 801045c:	2b00      	cmp	r3, #0
 801045e:	dae6      	bge.n	801042e <ecp_double_add_mxz+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 8010460:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8010464:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8010468:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801046c:	4618      	mov	r0, r3
 801046e:	f7fc fc74 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8010472:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010474:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010476:	2b00      	cmp	r3, #0
 8010478:	f040 8234 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 801047c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010480:	68f9      	ldr	r1, [r7, #12]
 8010482:	4618      	mov	r0, r3
 8010484:	f7fd fef8 	bl	800e278 <ecp_modp>
 8010488:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801048a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801048c:	2b00      	cmp	r3, #0
 801048e:	f040 8229 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010492:	4ba5      	ldr	r3, [pc, #660]	@ (8010728 <ecp_double_add_mxz+0x380>)
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	3301      	adds	r3, #1
 8010498:	4aa3      	ldr	r2, [pc, #652]	@ (8010728 <ecp_double_add_mxz+0x380>)
 801049a:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 801049c:	6839      	ldr	r1, [r7, #0]
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	f103 0218 	add.w	r2, r3, #24
 80104a4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fb f821 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 80104ae:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80104b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f040 8216 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 80104b8:	e00d      	b.n	80104d6 <ecp_double_add_mxz+0x12e>
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	1d1a      	adds	r2, r3, #4
 80104be:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80104c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fa ffce 	bl	800b468 <mbedtls_mpi_add_mpi>
 80104cc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80104ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	f040 8207 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 80104d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104d8:	2b00      	cmp	r3, #0
 80104da:	da08      	bge.n	80104ee <ecp_double_add_mxz+0x146>
 80104dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80104e0:	2100      	movs	r1, #0
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7fa fe35 	bl	800b152 <mbedtls_mpi_cmp_int>
 80104e8:	4603      	mov	r3, r0
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d1e5      	bne.n	80104ba <ecp_double_add_mxz+0x112>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 80104ee:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80104f2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80104f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fc fc2d 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8010500:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010502:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010504:	2b00      	cmp	r3, #0
 8010506:	f040 81ed 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 801050a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801050e:	68f9      	ldr	r1, [r7, #12]
 8010510:	4618      	mov	r0, r3
 8010512:	f7fd feb1 	bl	800e278 <ecp_modp>
 8010516:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010518:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801051a:	2b00      	cmp	r3, #0
 801051c:	f040 81e2 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010520:	4b81      	ldr	r3, [pc, #516]	@ (8010728 <ecp_double_add_mxz+0x380>)
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	3301      	adds	r3, #1
 8010526:	4a80      	ldr	r2, [pc, #512]	@ (8010728 <ecp_double_add_mxz+0x380>)
 8010528:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 801052a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801052e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8010532:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010536:	4618      	mov	r0, r3
 8010538:	f7fa ffda 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 801053c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801053e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010540:	2b00      	cmp	r3, #0
 8010542:	f040 81cf 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010546:	e00d      	b.n	8010564 <ecp_double_add_mxz+0x1bc>
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	1d1a      	adds	r2, r3, #4
 801054c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8010550:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010554:	4618      	mov	r0, r3
 8010556:	f7fa ff87 	bl	800b468 <mbedtls_mpi_add_mpi>
 801055a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801055c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801055e:	2b00      	cmp	r3, #0
 8010560:	f040 81c0 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010564:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010566:	2b00      	cmp	r3, #0
 8010568:	da08      	bge.n	801057c <ecp_double_add_mxz+0x1d4>
 801056a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801056e:	2100      	movs	r1, #0
 8010570:	4618      	mov	r0, r3
 8010572:	f7fa fdee 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010576:	4603      	mov	r3, r0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d1e5      	bne.n	8010548 <ecp_double_add_mxz+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 801057c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8010580:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010584:	f103 0218 	add.w	r2, r3, #24
 8010588:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801058c:	4618      	mov	r0, r3
 801058e:	f7fa ff6b 	bl	800b468 <mbedtls_mpi_add_mpi>
 8010592:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010594:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010596:	2b00      	cmp	r3, #0
 8010598:	f040 81a4 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 801059c:	e00d      	b.n	80105ba <ecp_double_add_mxz+0x212>
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	1d1a      	adds	r2, r3, #4
 80105a2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80105a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fa fefc 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 80105b0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80105b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f040 8195 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	1d1a      	adds	r2, r3, #4
 80105be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80105c2:	4611      	mov	r1, r2
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7fa fd29 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	dae6      	bge.n	801059e <ecp_double_add_mxz+0x1f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 80105d0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80105d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80105d8:	f103 0218 	add.w	r2, r3, #24
 80105dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7fa ff85 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 80105e6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80105e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f040 817a 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 80105f0:	e00d      	b.n	801060e <ecp_double_add_mxz+0x266>
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	1d1a      	adds	r2, r3, #4
 80105f6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80105fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fa ff32 	bl	800b468 <mbedtls_mpi_add_mpi>
 8010604:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010606:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010608:	2b00      	cmp	r3, #0
 801060a:	f040 816b 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 801060e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010610:	2b00      	cmp	r3, #0
 8010612:	da08      	bge.n	8010626 <ecp_double_add_mxz+0x27e>
 8010614:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010618:	2100      	movs	r1, #0
 801061a:	4618      	mov	r0, r3
 801061c:	f7fa fd99 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010620:	4603      	mov	r3, r0
 8010622:	2b00      	cmp	r3, #0
 8010624:	d1e5      	bne.n	80105f2 <ecp_double_add_mxz+0x24a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 8010626:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801062a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801062e:	f107 031c 	add.w	r3, r7, #28
 8010632:	4618      	mov	r0, r3
 8010634:	f7fc fb91 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8010638:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801063a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801063c:	2b00      	cmp	r3, #0
 801063e:	f040 8151 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010642:	f107 031c 	add.w	r3, r7, #28
 8010646:	68f9      	ldr	r1, [r7, #12]
 8010648:	4618      	mov	r0, r3
 801064a:	f7fd fe15 	bl	800e278 <ecp_modp>
 801064e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010652:	2b00      	cmp	r3, #0
 8010654:	f040 8146 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010658:	4b33      	ldr	r3, [pc, #204]	@ (8010728 <ecp_double_add_mxz+0x380>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	3301      	adds	r3, #1
 801065e:	4a32      	ldr	r2, [pc, #200]	@ (8010728 <ecp_double_add_mxz+0x380>)
 8010660:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 8010662:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8010666:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801066a:	f107 0310 	add.w	r3, r7, #16
 801066e:	4618      	mov	r0, r3
 8010670:	f7fc fb73 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8010674:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010676:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010678:	2b00      	cmp	r3, #0
 801067a:	f040 8133 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 801067e:	f107 0310 	add.w	r3, r7, #16
 8010682:	68f9      	ldr	r1, [r7, #12]
 8010684:	4618      	mov	r0, r3
 8010686:	f7fd fdf7 	bl	800e278 <ecp_modp>
 801068a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801068c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801068e:	2b00      	cmp	r3, #0
 8010690:	f040 8128 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010694:	4b24      	ldr	r3, [pc, #144]	@ (8010728 <ecp_double_add_mxz+0x380>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	3301      	adds	r3, #1
 801069a:	4a23      	ldr	r2, [pc, #140]	@ (8010728 <ecp_double_add_mxz+0x380>)
 801069c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f107 0210 	add.w	r2, r7, #16
 80106a4:	f107 011c 	add.w	r1, r7, #28
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fa fedd 	bl	800b468 <mbedtls_mpi_add_mpi>
 80106ae:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80106b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	f040 8116 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	68f9      	ldr	r1, [r7, #12]
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fd fddb 	bl	800e278 <ecp_modp>
 80106c2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80106c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	f040 810c 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 80106cc:	4b16      	ldr	r3, [pc, #88]	@ (8010728 <ecp_double_add_mxz+0x380>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	3301      	adds	r3, #1
 80106d2:	4a15      	ldr	r2, [pc, #84]	@ (8010728 <ecp_double_add_mxz+0x380>)
 80106d4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6879      	ldr	r1, [r7, #4]
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fc fb3c 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 80106e2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80106e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	f040 80fc 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	68f9      	ldr	r1, [r7, #12]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fd fdc1 	bl	800e278 <ecp_modp>
 80106f6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80106f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f040 80f2 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010700:	4b09      	ldr	r3, [pc, #36]	@ (8010728 <ecp_double_add_mxz+0x380>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	3301      	adds	r3, #1
 8010706:	4a08      	ldr	r2, [pc, #32]	@ (8010728 <ecp_double_add_mxz+0x380>)
 8010708:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	3318      	adds	r3, #24
 801070e:	f107 0210 	add.w	r2, r7, #16
 8010712:	f107 011c 	add.w	r1, r7, #28
 8010716:	4618      	mov	r0, r3
 8010718:	f7fa feea 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 801071c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801071e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010720:	2b00      	cmp	r3, #0
 8010722:	f040 80df 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010726:	e011      	b.n	801074c <ecp_double_add_mxz+0x3a4>
 8010728:	2400257c 	.word	0x2400257c
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f103 0018 	add.w	r0, r3, #24
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f103 0118 	add.w	r1, r3, #24
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	3304      	adds	r3, #4
 801073c:	461a      	mov	r2, r3
 801073e:	f7fa fe93 	bl	800b468 <mbedtls_mpi_add_mpi>
 8010742:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010744:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010746:	2b00      	cmp	r3, #0
 8010748:	f040 80cc 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	699b      	ldr	r3, [r3, #24]
 8010750:	2b00      	cmp	r3, #0
 8010752:	da08      	bge.n	8010766 <ecp_double_add_mxz+0x3be>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	3318      	adds	r3, #24
 8010758:	2100      	movs	r1, #0
 801075a:	4618      	mov	r0, r3
 801075c:	f7fa fcf9 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d1e2      	bne.n	801072c <ecp_double_add_mxz+0x384>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f103 0018 	add.w	r0, r3, #24
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f103 0118 	add.w	r1, r3, #24
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	3318      	adds	r3, #24
 8010776:	461a      	mov	r2, r3
 8010778:	f7fc faef 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 801077c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801077e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010780:	2b00      	cmp	r3, #0
 8010782:	f040 80af 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	3318      	adds	r3, #24
 801078a:	68f9      	ldr	r1, [r7, #12]
 801078c:	4618      	mov	r0, r3
 801078e:	f7fd fd73 	bl	800e278 <ecp_modp>
 8010792:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010794:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010796:	2b00      	cmp	r3, #0
 8010798:	f040 80a4 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 801079c:	4b6a      	ldr	r3, [pc, #424]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	3301      	adds	r3, #1
 80107a2:	4a69      	ldr	r2, [pc, #420]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 80107a4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f103 0018 	add.w	r0, r3, #24
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	3318      	adds	r3, #24
 80107b0:	461a      	mov	r2, r3
 80107b2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80107b6:	f7fc fad0 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 80107ba:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80107bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f040 8090 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	3318      	adds	r3, #24
 80107c8:	68f9      	ldr	r1, [r7, #12]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fd fd54 	bl	800e278 <ecp_modp>
 80107d0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80107d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f040 8085 	bne.w	80108e4 <ecp_double_add_mxz+0x53c>
 80107da:	4b5b      	ldr	r3, [pc, #364]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	3301      	adds	r3, #1
 80107e0:	4a59      	ldr	r2, [pc, #356]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 80107e2:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80107ea:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fc fab3 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 80107f4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80107f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d173      	bne.n	80108e4 <ecp_double_add_mxz+0x53c>
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	68f9      	ldr	r1, [r7, #12]
 8010800:	4618      	mov	r0, r3
 8010802:	f7fd fd39 	bl	800e278 <ecp_modp>
 8010806:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010808:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801080a:	2b00      	cmp	r3, #0
 801080c:	d16a      	bne.n	80108e4 <ecp_double_add_mxz+0x53c>
 801080e:	4b4e      	ldr	r3, [pc, #312]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	3301      	adds	r3, #1
 8010814:	4a4c      	ldr	r2, [pc, #304]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 8010816:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	f103 0018 	add.w	r0, r3, #24
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	3310      	adds	r3, #16
 8010822:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8010826:	4619      	mov	r1, r3
 8010828:	f7fc fa97 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 801082c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801082e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010830:	2b00      	cmp	r3, #0
 8010832:	d157      	bne.n	80108e4 <ecp_double_add_mxz+0x53c>
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	3318      	adds	r3, #24
 8010838:	68f9      	ldr	r1, [r7, #12]
 801083a:	4618      	mov	r0, r3
 801083c:	f7fd fd1c 	bl	800e278 <ecp_modp>
 8010840:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010842:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010844:	2b00      	cmp	r3, #0
 8010846:	d14d      	bne.n	80108e4 <ecp_double_add_mxz+0x53c>
 8010848:	4b3f      	ldr	r3, [pc, #252]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	3301      	adds	r3, #1
 801084e:	4a3e      	ldr	r2, [pc, #248]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 8010850:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 8010852:	68bb      	ldr	r3, [r7, #8]
 8010854:	f103 0018 	add.w	r0, r3, #24
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	f103 0218 	add.w	r2, r3, #24
 801085e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010862:	4619      	mov	r1, r3
 8010864:	f7fa fe00 	bl	800b468 <mbedtls_mpi_add_mpi>
 8010868:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801086a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801086c:	2b00      	cmp	r3, #0
 801086e:	d139      	bne.n	80108e4 <ecp_double_add_mxz+0x53c>
 8010870:	e00e      	b.n	8010890 <ecp_double_add_mxz+0x4e8>
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	f103 0018 	add.w	r0, r3, #24
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	f103 0118 	add.w	r1, r3, #24
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	3304      	adds	r3, #4
 8010882:	461a      	mov	r2, r3
 8010884:	f7fa fd90 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 8010888:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801088a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801088c:	2b00      	cmp	r3, #0
 801088e:	d129      	bne.n	80108e4 <ecp_double_add_mxz+0x53c>
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	f103 0218 	add.w	r2, r3, #24
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	3304      	adds	r3, #4
 801089a:	4619      	mov	r1, r3
 801089c:	4610      	mov	r0, r2
 801089e:	f7fa fbbd 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 80108a2:	4603      	mov	r3, r0
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	dae4      	bge.n	8010872 <ecp_double_add_mxz+0x4ca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	f103 0018 	add.w	r0, r3, #24
 80108ae:	68bb      	ldr	r3, [r7, #8]
 80108b0:	f103 0218 	add.w	r2, r3, #24
 80108b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80108b8:	4619      	mov	r1, r3
 80108ba:	f7fc fa4e 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 80108be:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80108c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d10e      	bne.n	80108e4 <ecp_double_add_mxz+0x53c>
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	3318      	adds	r3, #24
 80108ca:	68f9      	ldr	r1, [r7, #12]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fd fcd3 	bl	800e278 <ecp_modp>
 80108d2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80108d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d104      	bne.n	80108e4 <ecp_double_add_mxz+0x53c>
 80108da:	4b1b      	ldr	r3, [pc, #108]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	3301      	adds	r3, #1
 80108e0:	4a19      	ldr	r2, [pc, #100]	@ (8010948 <ecp_double_add_mxz+0x5a0>)
 80108e2:	6013      	str	r3, [r2, #0]

cleanup:
    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
 80108e4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7f9 fcc9 	bl	800a280 <mbedtls_mpi_free>
 80108ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7f9 fcc4 	bl	800a280 <mbedtls_mpi_free>
 80108f8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7f9 fcbf 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
 8010902:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010906:	4618      	mov	r0, r3
 8010908:	f7f9 fcba 	bl	800a280 <mbedtls_mpi_free>
 801090c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010910:	4618      	mov	r0, r3
 8010912:	f7f9 fcb5 	bl	800a280 <mbedtls_mpi_free>
 8010916:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801091a:	4618      	mov	r0, r3
 801091c:	f7f9 fcb0 	bl	800a280 <mbedtls_mpi_free>
    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
 8010920:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010924:	4618      	mov	r0, r3
 8010926:	f7f9 fcab 	bl	800a280 <mbedtls_mpi_free>
 801092a:	f107 031c 	add.w	r3, r7, #28
 801092e:	4618      	mov	r0, r3
 8010930:	f7f9 fca6 	bl	800a280 <mbedtls_mpi_free>
 8010934:	f107 0310 	add.w	r3, r7, #16
 8010938:	4618      	mov	r0, r3
 801093a:	f7f9 fca1 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 801093e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 8010940:	4618      	mov	r0, r3
 8010942:	3780      	adds	r7, #128	@ 0x80
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}
 8010948:	2400257c 	.word	0x2400257c

0801094c <ecp_mul_mxz>:
 */
static int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                        int (*f_rng)(void *, unsigned char *, size_t),
                        void *p_rng )
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b096      	sub	sp, #88	@ 0x58
 8010950:	af02      	add	r7, sp, #8
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
 8010958:	603b      	str	r3, [r7, #0]
    size_t i;
    unsigned char b;
    mbedtls_ecp_point RP;
    mbedtls_mpi PX;

    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
 801095a:	f107 0320 	add.w	r3, r7, #32
 801095e:	4618      	mov	r0, r3
 8010960:	f7fd fb37 	bl	800dfd2 <mbedtls_ecp_point_init>
 8010964:	f107 0314 	add.w	r3, r7, #20
 8010968:	4618      	mov	r0, r3
 801096a:	f7f9 fc76 	bl	800a25a <mbedtls_mpi_init>

    /* Save PX and read from P before writing to R, in case P == R */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 801096e:	683a      	ldr	r2, [r7, #0]
 8010970:	f107 0314 	add.w	r3, r7, #20
 8010974:	4611      	mov	r1, r2
 8010976:	4618      	mov	r0, r3
 8010978:	f7f9 fd51 	bl	800a41e <mbedtls_mpi_copy>
 801097c:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801097e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010980:	2b00      	cmp	r3, #0
 8010982:	f040 80ac 	bne.w	8010ade <ecp_mul_mxz+0x192>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 8010986:	f107 0320 	add.w	r3, r7, #32
 801098a:	6839      	ldr	r1, [r7, #0]
 801098c:	4618      	mov	r0, r3
 801098e:	f7fd fc0b 	bl	800e1a8 <mbedtls_ecp_copy>
 8010992:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010996:	2b00      	cmp	r3, #0
 8010998:	f040 80a1 	bne.w	8010ade <ecp_mul_mxz+0x192>

    /* Set R to zero in modified x/z coordinates */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	2101      	movs	r1, #1
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7f9 fe9b 	bl	800a6dc <mbedtls_mpi_lset>
 80109a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80109a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	f040 8097 	bne.w	8010ade <ecp_mul_mxz+0x192>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	3318      	adds	r3, #24
 80109b4:	2100      	movs	r1, #0
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7f9 fe90 	bl	800a6dc <mbedtls_mpi_lset>
 80109bc:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80109be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f040 808c 	bne.w	8010ade <ecp_mul_mxz+0x192>
    mbedtls_mpi_free( &R->Y );
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	330c      	adds	r3, #12
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7f9 fc58 	bl	800a280 <mbedtls_mpi_free>

    /* RP.X might be sligtly larger than P, so reduce it */
    MOD_ADD( RP.X );
 80109d0:	e00c      	b.n	80109ec <ecp_mul_mxz+0xa0>
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	1d1a      	adds	r2, r3, #4
 80109d6:	f107 0120 	add.w	r1, r7, #32
 80109da:	f107 0320 	add.w	r3, r7, #32
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fa fce2 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 80109e4:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80109e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d178      	bne.n	8010ade <ecp_mul_mxz+0x192>
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	1d1a      	adds	r2, r3, #4
 80109f0:	f107 0320 	add.w	r3, r7, #32
 80109f4:	4611      	mov	r1, r2
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fa fb10 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 80109fc:	4603      	mov	r3, r0
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	dae7      	bge.n	80109d2 <ecp_mul_mxz+0x86>

    /* Randomize coordinates of the starting point */
    if( f_rng != NULL )
 8010a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d00a      	beq.n	8010a1e <ecp_mul_mxz+0xd2>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 8010a08:	f107 0120 	add.w	r1, r7, #32
 8010a0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010a0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	f7ff fc41 	bl	8010298 <ecp_randomize_mxz>
 8010a16:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d15f      	bne.n	8010ade <ecp_mul_mxz+0x192>

    /* Loop invariant: R = result so far, RP = R + P */
    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7f9 ff52 	bl	800a8c8 <mbedtls_mpi_bitlen>
 8010a24:	64b8      	str	r0, [r7, #72]	@ 0x48
    while( i-- > 0 )
 8010a26:	e04d      	b.n	8010ac4 <ecp_mul_mxz+0x178>
    {
        b = mbedtls_mpi_get_bit( m, i );
 8010a28:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7f9 fe82 	bl	800a734 <mbedtls_mpi_get_bit>
 8010a30:	4603      	mov	r3, r0
 8010a32:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * which is:
         *  if (b) double_add( RP, R, RP, R )
         *  else   double_add( R, RP, R, RP )
         * but using safe conditional swaps to avoid leaks
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010a3c:	f107 0120 	add.w	r1, r7, #32
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7f9 fdb9 	bl	800a5b8 <mbedtls_mpi_safe_cond_swap>
 8010a46:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d147      	bne.n	8010ade <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	f103 0018 	add.w	r0, r3, #24
 8010a54:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010a58:	f107 0320 	add.w	r3, r7, #32
 8010a5c:	3318      	adds	r3, #24
 8010a5e:	4619      	mov	r1, r3
 8010a60:	f7f9 fdaa 	bl	800a5b8 <mbedtls_mpi_safe_cond_swap>
 8010a64:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d138      	bne.n	8010ade <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 8010a6c:	f107 0220 	add.w	r2, r7, #32
 8010a70:	f107 0314 	add.w	r3, r7, #20
 8010a74:	9301      	str	r3, [sp, #4]
 8010a76:	f107 0320 	add.w	r3, r7, #32
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	68b9      	ldr	r1, [r7, #8]
 8010a80:	68f8      	ldr	r0, [r7, #12]
 8010a82:	f7ff fc91 	bl	80103a8 <ecp_double_add_mxz>
 8010a86:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d127      	bne.n	8010ade <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 8010a8e:	68bb      	ldr	r3, [r7, #8]
 8010a90:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010a94:	f107 0120 	add.w	r1, r7, #32
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7f9 fd8d 	bl	800a5b8 <mbedtls_mpi_safe_cond_swap>
 8010a9e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d11b      	bne.n	8010ade <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	f103 0018 	add.w	r0, r3, #24
 8010aac:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010ab0:	f107 0320 	add.w	r3, r7, #32
 8010ab4:	3318      	adds	r3, #24
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	f7f9 fd7e 	bl	800a5b8 <mbedtls_mpi_safe_cond_swap>
 8010abc:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d10c      	bne.n	8010ade <ecp_mul_mxz+0x192>
    while( i-- > 0 )
 8010ac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ac6:	1e5a      	subs	r2, r3, #1
 8010ac8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1ac      	bne.n	8010a28 <ecp_mul_mxz+0xdc>
    }

    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );
 8010ace:	68b9      	ldr	r1, [r7, #8]
 8010ad0:	68f8      	ldr	r0, [r7, #12]
 8010ad2:	f7ff fba3 	bl	801021c <ecp_normalize_mxz>
 8010ad6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ada:	2b00      	cmp	r3, #0

cleanup:
 8010adc:	bf00      	nop
    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
 8010ade:	f107 0320 	add.w	r3, r7, #32
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fd fae0 	bl	800e0a8 <mbedtls_ecp_point_free>
 8010ae8:	f107 0314 	add.w	r3, r7, #20
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7f9 fbc7 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 8010af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3750      	adds	r7, #80	@ 0x50
 8010af8:	46bd      	mov	sp, r7
 8010afa:	bd80      	pop	{r7, pc}

08010afc <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b08a      	sub	sp, #40	@ 0x28
 8010b00:	af04      	add	r7, sp, #16
 8010b02:	60f8      	str	r0, [r7, #12]
 8010b04:	60b9      	str	r1, [r7, #8]
 8010b06:	607a      	str	r2, [r7, #4]
 8010b08:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010b0a:	4b21      	ldr	r3, [pc, #132]	@ (8010b90 <mbedtls_ecp_mul_restartable+0x94>)
 8010b0c:	617b      	str	r3, [r7, #20]
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 8010b0e:	6879      	ldr	r1, [r7, #4]
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f000 fa59 	bl	8010fc8 <mbedtls_ecp_check_privkey>
 8010b16:	6178      	str	r0, [r7, #20]
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d133      	bne.n	8010b86 <mbedtls_ecp_mul_restartable+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 8010b1e:	6839      	ldr	r1, [r7, #0]
 8010b20:	68f8      	ldr	r0, [r7, #12]
 8010b22:	f000 fa1f 	bl	8010f64 <mbedtls_ecp_check_pubkey>
 8010b26:	6178      	str	r0, [r7, #20]
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d12b      	bne.n	8010b86 <mbedtls_ecp_mul_restartable+0x8a>
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010b2e:	4b18      	ldr	r3, [pc, #96]	@ (8010b90 <mbedtls_ecp_mul_restartable+0x94>)
 8010b30:	617b      	str	r3, [r7, #20]
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f7fd fa36 	bl	800dfa4 <ecp_get_type>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b02      	cmp	r3, #2
 8010b3c:	d10d      	bne.n	8010b5a <mbedtls_ecp_mul_restartable+0x5e>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 8010b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b40:	9301      	str	r3, [sp, #4]
 8010b42:	6a3b      	ldr	r3, [r7, #32]
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	687a      	ldr	r2, [r7, #4]
 8010b4a:	68b9      	ldr	r1, [r7, #8]
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f7ff fefd 	bl	801094c <ecp_mul_mxz>
 8010b52:	6178      	str	r0, [r7, #20]
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d115      	bne.n	8010b86 <mbedtls_ecp_mul_restartable+0x8a>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f7fd fa22 	bl	800dfa4 <ecp_get_type>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d10e      	bne.n	8010b84 <mbedtls_ecp_mul_restartable+0x88>
        MBEDTLS_MPI_CHK( ecp_mul_comb( grp, R, m, P, f_rng, p_rng, rs_ctx ) );
 8010b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b68:	9302      	str	r3, [sp, #8]
 8010b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b6c:	9301      	str	r3, [sp, #4]
 8010b6e:	6a3b      	ldr	r3, [r7, #32]
 8010b70:	9300      	str	r3, [sp, #0]
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	687a      	ldr	r2, [r7, #4]
 8010b76:	68b9      	ldr	r1, [r7, #8]
 8010b78:	68f8      	ldr	r0, [r7, #12]
 8010b7a:	f7ff fa79 	bl	8010070 <ecp_mul_comb>
 8010b7e:	6178      	str	r0, [r7, #20]
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	2b00      	cmp	r3, #0
#endif

cleanup:
 8010b84:	bf00      	nop
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
 8010b86:	697b      	ldr	r3, [r7, #20]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3718      	adds	r7, #24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}
 8010b90:	ffffb080 	.word	0xffffb080

08010b94 <ecp_check_pubkey_sw>:
/*
 * Check that an affine point is valid as a public key,
 * short weierstrass curves (SEC1 3.2.3.1)
 */
static int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b08a      	sub	sp, #40	@ 0x28
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
 8010b9c:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	2100      	movs	r1, #0
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7fa fad5 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	db1e      	blt.n	8010bec <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	330c      	adds	r3, #12
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fa facc 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010bba:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	db15      	blt.n	8010bec <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	3304      	adds	r3, #4
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	4610      	mov	r0, r2
 8010bca:	f7fa fa27 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 8010bce:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	da0b      	bge.n	8010bec <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	f103 020c 	add.w	r2, r3, #12
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	3304      	adds	r3, #4
 8010bde:	4619      	mov	r1, r3
 8010be0:	4610      	mov	r0, r2
 8010be2:	f7fa fa1b 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 8010be6:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	db01      	blt.n	8010bf0 <ecp_check_pubkey_sw+0x5c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010bec:	4b7d      	ldr	r3, [pc, #500]	@ (8010de4 <ecp_check_pubkey_sw+0x250>)
 8010bee:	e0f5      	b.n	8010ddc <ecp_check_pubkey_sw+0x248>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 8010bf0:	f107 0318 	add.w	r3, r7, #24
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7f9 fb30 	bl	800a25a <mbedtls_mpi_init>
 8010bfa:	f107 030c 	add.w	r3, r7, #12
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7f9 fb2b 	bl	800a25a <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	f103 010c 	add.w	r1, r3, #12
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	f103 020c 	add.w	r2, r3, #12
 8010c10:	f107 0318 	add.w	r3, r7, #24
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7fc f8a0 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8010c1a:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f040 80d1 	bne.w	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010c24:	f107 0318 	add.w	r3, r7, #24
 8010c28:	6879      	ldr	r1, [r7, #4]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fd fb24 	bl	800e278 <ecp_modp>
 8010c30:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	f040 80c6 	bne.w	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010c3a:	4b6b      	ldr	r3, [pc, #428]	@ (8010de8 <ecp_check_pubkey_sw+0x254>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	3301      	adds	r3, #1
 8010c40:	4a69      	ldr	r2, [pc, #420]	@ (8010de8 <ecp_check_pubkey_sw+0x254>)
 8010c42:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8010c44:	6839      	ldr	r1, [r7, #0]
 8010c46:	683a      	ldr	r2, [r7, #0]
 8010c48:	f107 030c 	add.w	r3, r7, #12
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7fc f884 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8010c52:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	f040 80b5 	bne.w	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010c5c:	f107 030c 	add.w	r3, r7, #12
 8010c60:	6879      	ldr	r1, [r7, #4]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fd fb08 	bl	800e278 <ecp_modp>
 8010c68:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	f040 80aa 	bne.w	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010c72:	4b5d      	ldr	r3, [pc, #372]	@ (8010de8 <ecp_check_pubkey_sw+0x254>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	3301      	adds	r3, #1
 8010c78:	4a5b      	ldr	r2, [pc, #364]	@ (8010de8 <ecp_check_pubkey_sw+0x254>)
 8010c7a:	6013      	str	r3, [r2, #0]

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	699b      	ldr	r3, [r3, #24]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d128      	bne.n	8010cd6 <ecp_check_pubkey_sw+0x142>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8010c84:	f107 010c 	add.w	r1, r7, #12
 8010c88:	f107 030c 	add.w	r3, r7, #12
 8010c8c:	2203      	movs	r2, #3
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fa fc96 	bl	800b5c0 <mbedtls_mpi_sub_int>
 8010c94:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	f040 8094 	bne.w	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010c9e:	e00d      	b.n	8010cbc <ecp_check_pubkey_sw+0x128>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	1d1a      	adds	r2, r3, #4
 8010ca4:	f107 010c 	add.w	r1, r7, #12
 8010ca8:	f107 030c 	add.w	r3, r7, #12
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fa fbdb 	bl	800b468 <mbedtls_mpi_add_mpi>
 8010cb2:	6278      	str	r0, [r7, #36]	@ 0x24
 8010cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	f040 8085 	bne.w	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	da30      	bge.n	8010d24 <ecp_check_pubkey_sw+0x190>
 8010cc2:	f107 030c 	add.w	r3, r7, #12
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fa fa42 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d1e5      	bne.n	8010ca0 <ecp_check_pubkey_sw+0x10c>
 8010cd4:	e026      	b.n	8010d24 <ecp_check_pubkey_sw+0x190>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f103 0210 	add.w	r2, r3, #16
 8010cdc:	f107 010c 	add.w	r1, r7, #12
 8010ce0:	f107 030c 	add.w	r3, r7, #12
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7fa fbbf 	bl	800b468 <mbedtls_mpi_add_mpi>
 8010cea:	6278      	str	r0, [r7, #36]	@ 0x24
 8010cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d169      	bne.n	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010cf2:	e00c      	b.n	8010d0e <ecp_check_pubkey_sw+0x17a>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	1d1a      	adds	r2, r3, #4
 8010cf8:	f107 010c 	add.w	r1, r7, #12
 8010cfc:	f107 030c 	add.w	r3, r7, #12
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7fa fb51 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 8010d06:	6278      	str	r0, [r7, #36]	@ 0x24
 8010d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d15b      	bne.n	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	1d1a      	adds	r2, r3, #4
 8010d12:	f107 030c 	add.w	r3, r7, #12
 8010d16:	4611      	mov	r1, r2
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7fa f97f 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	dae7      	bge.n	8010cf4 <ecp_check_pubkey_sw+0x160>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8010d24:	683a      	ldr	r2, [r7, #0]
 8010d26:	f107 010c 	add.w	r1, r7, #12
 8010d2a:	f107 030c 	add.w	r3, r7, #12
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f7fc f813 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8010d34:	6278      	str	r0, [r7, #36]	@ 0x24
 8010d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d144      	bne.n	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010d3c:	f107 030c 	add.w	r3, r7, #12
 8010d40:	6879      	ldr	r1, [r7, #4]
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7fd fa98 	bl	800e278 <ecp_modp>
 8010d48:	6278      	str	r0, [r7, #36]	@ 0x24
 8010d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d13a      	bne.n	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010d50:	4b25      	ldr	r3, [pc, #148]	@ (8010de8 <ecp_check_pubkey_sw+0x254>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	3301      	adds	r3, #1
 8010d56:	4a24      	ldr	r2, [pc, #144]	@ (8010de8 <ecp_check_pubkey_sw+0x254>)
 8010d58:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f103 021c 	add.w	r2, r3, #28
 8010d60:	f107 010c 	add.w	r1, r7, #12
 8010d64:	f107 030c 	add.w	r3, r7, #12
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7fa fb7d 	bl	800b468 <mbedtls_mpi_add_mpi>
 8010d6e:	6278      	str	r0, [r7, #36]	@ 0x24
 8010d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d127      	bne.n	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010d76:	e00c      	b.n	8010d92 <ecp_check_pubkey_sw+0x1fe>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	1d1a      	adds	r2, r3, #4
 8010d7c:	f107 010c 	add.w	r1, r7, #12
 8010d80:	f107 030c 	add.w	r3, r7, #12
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fa fb0f 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 8010d8a:	6278      	str	r0, [r7, #36]	@ 0x24
 8010d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d119      	bne.n	8010dc6 <ecp_check_pubkey_sw+0x232>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	1d1a      	adds	r2, r3, #4
 8010d96:	f107 030c 	add.w	r3, r7, #12
 8010d9a:	4611      	mov	r1, r2
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fa f93d 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 8010da2:	4603      	mov	r3, r0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	dae7      	bge.n	8010d78 <ecp_check_pubkey_sw+0x1e4>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 8010da8:	f107 020c 	add.w	r2, r7, #12
 8010dac:	f107 0318 	add.w	r3, r7, #24
 8010db0:	4611      	mov	r1, r2
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7fa f932 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d002      	beq.n	8010dc4 <ecp_check_pubkey_sw+0x230>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8010dbe:	4b09      	ldr	r3, [pc, #36]	@ (8010de4 <ecp_check_pubkey_sw+0x250>)
 8010dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8010dc2:	e000      	b.n	8010dc6 <ecp_check_pubkey_sw+0x232>

cleanup:
 8010dc4:	bf00      	nop

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 8010dc6:	f107 0318 	add.w	r3, r7, #24
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7f9 fa58 	bl	800a280 <mbedtls_mpi_free>
 8010dd0:	f107 030c 	add.w	r3, r7, #12
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7f9 fa53 	bl	800a280 <mbedtls_mpi_free>

    return( ret );
 8010dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3728      	adds	r7, #40	@ 0x28
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	ffffb380 	.word	0xffffb380
 8010de8:	2400257c 	.word	0x2400257c

08010dec <mbedtls_ecp_mul_shortcuts>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b08a      	sub	sp, #40	@ 0x28
 8010df0:	af04      	add	r7, sp, #16
 8010df2:	60f8      	str	r0, [r7, #12]
 8010df4:	60b9      	str	r1, [r7, #8]
 8010df6:	607a      	str	r2, [r7, #4]
 8010df8:	603b      	str	r3, [r7, #0]
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8010dfa:	2101      	movs	r1, #1
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7fa f9a8 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d107      	bne.n	8010e18 <mbedtls_ecp_mul_shortcuts+0x2c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8010e08:	6839      	ldr	r1, [r7, #0]
 8010e0a:	68b8      	ldr	r0, [r7, #8]
 8010e0c:	f7fd f9cc 	bl	800e1a8 <mbedtls_ecp_copy>
 8010e10:	6178      	str	r0, [r7, #20]
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	e036      	b.n	8010e86 <mbedtls_ecp_mul_shortcuts+0x9a>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 8010e18:	f04f 31ff 	mov.w	r1, #4294967295
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f7fa f998 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d11e      	bne.n	8010e66 <mbedtls_ecp_mul_shortcuts+0x7a>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8010e28:	6839      	ldr	r1, [r7, #0]
 8010e2a:	68b8      	ldr	r0, [r7, #8]
 8010e2c:	f7fd f9bc 	bl	800e1a8 <mbedtls_ecp_copy>
 8010e30:	6178      	str	r0, [r7, #20]
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d126      	bne.n	8010e86 <mbedtls_ecp_mul_shortcuts+0x9a>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	330c      	adds	r3, #12
 8010e3c:	2100      	movs	r1, #0
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7fa f987 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010e44:	4603      	mov	r3, r0
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d01d      	beq.n	8010e86 <mbedtls_ecp_mul_shortcuts+0x9a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	f103 000c 	add.w	r0, r3, #12
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	1d19      	adds	r1, r3, #4
 8010e54:	68bb      	ldr	r3, [r7, #8]
 8010e56:	330c      	adds	r3, #12
 8010e58:	461a      	mov	r2, r3
 8010e5a:	f7fa fb49 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 8010e5e:	6178      	str	r0, [r7, #20]
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	e00f      	b.n	8010e86 <mbedtls_ecp_mul_shortcuts+0x9a>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 8010e66:	6a3b      	ldr	r3, [r7, #32]
 8010e68:	9302      	str	r3, [sp, #8]
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	9301      	str	r3, [sp, #4]
 8010e6e:	2300      	movs	r3, #0
 8010e70:	9300      	str	r3, [sp, #0]
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	687a      	ldr	r2, [r7, #4]
 8010e76:	68b9      	ldr	r1, [r7, #8]
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	f7ff fe3f 	bl	8010afc <mbedtls_ecp_mul_restartable>
 8010e7e:	6178      	str	r0, [r7, #20]
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	2b00      	cmp	r3, #0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
 8010e84:	bf00      	nop
    return( ret );
 8010e86:	697b      	ldr	r3, [r7, #20]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3718      	adds	r7, #24
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b092      	sub	sp, #72	@ 0x48
 8010e94:	af02      	add	r7, sp, #8
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	607a      	str	r2, [r7, #4]
 8010e9c:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_ecp_point mP;
    mbedtls_ecp_point *pmP = &mP;
 8010e9e:	f107 0310 	add.w	r3, r7, #16
 8010ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
    mbedtls_ecp_point *pR = R;
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	637b      	str	r3, [r7, #52]	@ 0x34
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 8010ea8:	68f8      	ldr	r0, [r7, #12]
 8010eaa:	f7fd f87b 	bl	800dfa4 <ecp_get_type>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2b01      	cmp	r3, #1
 8010eb2:	d001      	beq.n	8010eb8 <mbedtls_ecp_muladd_restartable+0x28>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8010eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8010f2c <mbedtls_ecp_muladd_restartable+0x9c>)
 8010eb6:	e034      	b.n	8010f22 <mbedtls_ecp_muladd_restartable+0x92>

    mbedtls_ecp_point_init( &mP );
 8010eb8:	f107 0310 	add.w	r3, r7, #16
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f7fd f888 	bl	800dfd2 <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 8010ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ec4:	9300      	str	r3, [sp, #0]
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010ecc:	68f8      	ldr	r0, [r7, #12]
 8010ece:	f7ff ff8d 	bl	8010dec <mbedtls_ecp_mul_shortcuts>
 8010ed2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d11d      	bne.n	8010f16 <mbedtls_ecp_muladd_restartable+0x86>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 8010eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010edc:	9300      	str	r3, [sp, #0]
 8010ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ee2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010ee4:	68f8      	ldr	r0, [r7, #12]
 8010ee6:	f7ff ff81 	bl	8010dec <mbedtls_ecp_mul_shortcuts>
 8010eea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d111      	bne.n	8010f16 <mbedtls_ecp_muladd_restartable+0x86>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 8010ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ef4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010ef6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f7fe f8e7 	bl	800f0cc <ecp_add_mixed>
 8010efe:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d107      	bne.n	8010f16 <mbedtls_ecp_muladd_restartable+0x86>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 8010f06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010f08:	68f8      	ldr	r0, [r7, #12]
 8010f0a:	f7fd fa19 	bl	800e340 <ecp_normalize_jac>
 8010f0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f12:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, pR ) );
#endif

cleanup:
 8010f14:	bf00      	nop
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
 8010f16:	f107 0310 	add.w	r3, r7, #16
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fd f8c4 	bl	800e0a8 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
 8010f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010f22:	4618      	mov	r0, r3
 8010f24:	3740      	adds	r7, #64	@ 0x40
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}
 8010f2a:	bf00      	nop
 8010f2c:	ffffb180 	.word	0xffffb180

08010f30 <ecp_check_pubkey_mx>:
#if defined(ECP_MONTGOMERY)
/*
 * Check validity of a public key for Montgomery curves with x-only schemes
 */
static int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
    /* [Curve25519 p. 5] Just check X is the correct number of bytes */
    /* Allow any public value, if it's too big then we'll just reduce it mod p
     * (RFC 7748 sec. 5 para. 3). */
    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f7f9 fcf7 	bl	800a930 <mbedtls_mpi_size>
 8010f42:	4602      	mov	r2, r0
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f48:	3307      	adds	r3, #7
 8010f4a:	08db      	lsrs	r3, r3, #3
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d901      	bls.n	8010f54 <ecp_check_pubkey_mx+0x24>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010f50:	4b03      	ldr	r3, [pc, #12]	@ (8010f60 <ecp_check_pubkey_mx+0x30>)
 8010f52:	e000      	b.n	8010f56 <ecp_check_pubkey_mx+0x26>

    return( 0 );
 8010f54:	2300      	movs	r3, #0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3708      	adds	r7, #8
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	ffffb380 	.word	0xffffb380

08010f64 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
 8010f6c:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	3318      	adds	r3, #24
 8010f72:	2101      	movs	r1, #1
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7fa f8ec 	bl	800b152 <mbedtls_mpi_cmp_int>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d001      	beq.n	8010f84 <mbedtls_ecp_check_pubkey+0x20>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010f80:	4b0f      	ldr	r3, [pc, #60]	@ (8010fc0 <mbedtls_ecp_check_pubkey+0x5c>)
 8010f82:	e018      	b.n	8010fb6 <mbedtls_ecp_check_pubkey+0x52>

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f7fd f80d 	bl	800dfa4 <ecp_get_type>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b02      	cmp	r3, #2
 8010f8e:	d105      	bne.n	8010f9c <mbedtls_ecp_check_pubkey+0x38>
        return( ecp_check_pubkey_mx( grp, pt ) );
 8010f90:	6839      	ldr	r1, [r7, #0]
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f7ff ffcc 	bl	8010f30 <ecp_check_pubkey_mx>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	e00c      	b.n	8010fb6 <mbedtls_ecp_check_pubkey+0x52>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f7fd f801 	bl	800dfa4 <ecp_get_type>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d105      	bne.n	8010fb4 <mbedtls_ecp_check_pubkey+0x50>
        return( ecp_check_pubkey_sw( grp, pt ) );
 8010fa8:	6839      	ldr	r1, [r7, #0]
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f7ff fdf2 	bl	8010b94 <ecp_check_pubkey_sw>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	e000      	b.n	8010fb6 <mbedtls_ecp_check_pubkey+0x52>
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010fb4:	4b03      	ldr	r3, [pc, #12]	@ (8010fc4 <mbedtls_ecp_check_pubkey+0x60>)
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3708      	adds	r7, #8
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	bd80      	pop	{r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	ffffb380 	.word	0xffffb380
 8010fc4:	ffffb080 	.word	0xffffb080

08010fc8 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( d   != NULL );

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f7fc ffe6 	bl	800dfa4 <ecp_get_type>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b02      	cmp	r3, #2
 8010fdc:	d127      	bne.n	801102e <mbedtls_ecp_check_privkey+0x66>
    {
        /* see RFC 7748 sec. 5 para. 5 */
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 8010fde:	2100      	movs	r1, #0
 8010fe0:	6838      	ldr	r0, [r7, #0]
 8010fe2:	f7f9 fba7 	bl	800a734 <mbedtls_mpi_get_bit>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d10f      	bne.n	801100c <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 8010fec:	2101      	movs	r1, #1
 8010fee:	6838      	ldr	r0, [r7, #0]
 8010ff0:	f7f9 fba0 	bl	800a734 <mbedtls_mpi_get_bit>
 8010ff4:	4603      	mov	r3, r0
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d108      	bne.n	801100c <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 8010ffa:	6838      	ldr	r0, [r7, #0]
 8010ffc:	f7f9 fc64 	bl	800a8c8 <mbedtls_mpi_bitlen>
 8011000:	4603      	mov	r3, r0
 8011002:	1e5a      	subs	r2, r3, #1
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 8011008:	429a      	cmp	r2, r3
 801100a:	d001      	beq.n	8011010 <mbedtls_ecp_check_privkey+0x48>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 801100c:	4b17      	ldr	r3, [pc, #92]	@ (801106c <mbedtls_ecp_check_privkey+0xa4>)
 801100e:	e029      	b.n	8011064 <mbedtls_ecp_check_privkey+0x9c>

        /* see [Curve25519] page 5 */
        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011014:	2bfe      	cmp	r3, #254	@ 0xfe
 8011016:	d108      	bne.n	801102a <mbedtls_ecp_check_privkey+0x62>
 8011018:	2102      	movs	r1, #2
 801101a:	6838      	ldr	r0, [r7, #0]
 801101c:	f7f9 fb8a 	bl	800a734 <mbedtls_mpi_get_bit>
 8011020:	4603      	mov	r3, r0
 8011022:	2b00      	cmp	r3, #0
 8011024:	d001      	beq.n	801102a <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8011026:	4b11      	ldr	r3, [pc, #68]	@ (801106c <mbedtls_ecp_check_privkey+0xa4>)
 8011028:	e01c      	b.n	8011064 <mbedtls_ecp_check_privkey+0x9c>

        return( 0 );
 801102a:	2300      	movs	r3, #0
 801102c:	e01a      	b.n	8011064 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7fc ffb8 	bl	800dfa4 <ecp_get_type>
 8011034:	4603      	mov	r3, r0
 8011036:	2b01      	cmp	r3, #1
 8011038:	d113      	bne.n	8011062 <mbedtls_ecp_check_privkey+0x9a>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 801103a:	2101      	movs	r1, #1
 801103c:	6838      	ldr	r0, [r7, #0]
 801103e:	f7fa f888 	bl	800b152 <mbedtls_mpi_cmp_int>
 8011042:	4603      	mov	r3, r0
 8011044:	2b00      	cmp	r3, #0
 8011046:	db08      	blt.n	801105a <mbedtls_ecp_check_privkey+0x92>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	334c      	adds	r3, #76	@ 0x4c
 801104c:	4619      	mov	r1, r3
 801104e:	6838      	ldr	r0, [r7, #0]
 8011050:	f7f9 ffe4 	bl	800b01c <mbedtls_mpi_cmp_mpi>
 8011054:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8011056:	2b00      	cmp	r3, #0
 8011058:	db01      	blt.n	801105e <mbedtls_ecp_check_privkey+0x96>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 801105a:	4b04      	ldr	r3, [pc, #16]	@ (801106c <mbedtls_ecp_check_privkey+0xa4>)
 801105c:	e002      	b.n	8011064 <mbedtls_ecp_check_privkey+0x9c>
        else
            return( 0 );
 801105e:	2300      	movs	r3, #0
 8011060:	e000      	b.n	8011064 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8011062:	4b03      	ldr	r3, [pc, #12]	@ (8011070 <mbedtls_ecp_check_privkey+0xa8>)
}
 8011064:	4618      	mov	r0, r3
 8011066:	3708      	adds	r7, #8
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}
 801106c:	ffffb380 	.word	0xffffb380
 8011070:	ffffb080 	.word	0xffffb080

08011074 <ecp_mpi_load>:
/*
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
 8011074:	b480      	push	{r7}
 8011076:	b085      	sub	sp, #20
 8011078:	af00      	add	r7, sp, #0
 801107a:	60f8      	str	r0, [r7, #12]
 801107c:	60b9      	str	r1, [r7, #8]
 801107e:	607a      	str	r2, [r7, #4]
    X->s = 1;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	2201      	movs	r2, #1
 8011084:	601a      	str	r2, [r3, #0]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	089a      	lsrs	r2, r3, #2
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	605a      	str	r2, [r3, #4]
    X->p = (mbedtls_mpi_uint *) p;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	68ba      	ldr	r2, [r7, #8]
 8011092:	609a      	str	r2, [r3, #8]
}
 8011094:	bf00      	nop
 8011096:	3714      	adds	r7, #20
 8011098:	46bd      	mov	sp, r7
 801109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109e:	4770      	bx	lr

080110a0 <ecp_mpi_set1>:

/*
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2201      	movs	r2, #1
 80110ac:	601a      	str	r2, [r3, #0]
    X->n = 1;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2201      	movs	r2, #1
 80110b2:	605a      	str	r2, [r3, #4]
    X->p = one;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	4a04      	ldr	r2, [pc, #16]	@ (80110c8 <ecp_mpi_set1+0x28>)
 80110b8:	609a      	str	r2, [r3, #8]
}
 80110ba:	bf00      	nop
 80110bc:	370c      	adds	r7, #12
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	24000030 	.word	0x24000030

080110cc <ecp_group_load>:
                           const mbedtls_mpi_uint *a,  size_t alen,
                           const mbedtls_mpi_uint *b,  size_t blen,
                           const mbedtls_mpi_uint *gx, size_t gxlen,
                           const mbedtls_mpi_uint *gy, size_t gylen,
                           const mbedtls_mpi_uint *n,  size_t nlen)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b084      	sub	sp, #16
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
 80110d8:	603b      	str	r3, [r7, #0]
    ecp_mpi_load( &grp->P, p, plen );
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	3304      	adds	r3, #4
 80110de:	687a      	ldr	r2, [r7, #4]
 80110e0:	68b9      	ldr	r1, [r7, #8]
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7ff ffc6 	bl	8011074 <ecp_mpi_load>
    if( a != NULL )
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d006      	beq.n	80110fc <ecp_group_load+0x30>
        ecp_mpi_load( &grp->A, a, alen );
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	3310      	adds	r3, #16
 80110f2:	69ba      	ldr	r2, [r7, #24]
 80110f4:	6839      	ldr	r1, [r7, #0]
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7ff ffbc 	bl	8011074 <ecp_mpi_load>
    ecp_mpi_load( &grp->B, b, blen );
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	331c      	adds	r3, #28
 8011100:	6a3a      	ldr	r2, [r7, #32]
 8011102:	69f9      	ldr	r1, [r7, #28]
 8011104:	4618      	mov	r0, r3
 8011106:	f7ff ffb5 	bl	8011074 <ecp_mpi_load>
    ecp_mpi_load( &grp->N, n, nlen );
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	334c      	adds	r3, #76	@ 0x4c
 801110e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011110:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011112:	4618      	mov	r0, r3
 8011114:	f7ff ffae 	bl	8011074 <ecp_mpi_load>

    ecp_mpi_load( &grp->G.X, gx, gxlen );
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	3328      	adds	r3, #40	@ 0x28
 801111c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801111e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011120:	4618      	mov	r0, r3
 8011122:	f7ff ffa7 	bl	8011074 <ecp_mpi_load>
    ecp_mpi_load( &grp->G.Y, gy, gylen );
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	3334      	adds	r3, #52	@ 0x34
 801112a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801112c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801112e:	4618      	mov	r0, r3
 8011130:	f7ff ffa0 	bl	8011074 <ecp_mpi_load>
    ecp_mpi_set1( &grp->G.Z );
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	3340      	adds	r3, #64	@ 0x40
 8011138:	4618      	mov	r0, r3
 801113a:	f7ff ffb1 	bl	80110a0 <ecp_mpi_set1>

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	3304      	adds	r3, #4
 8011142:	4618      	mov	r0, r3
 8011144:	f7f9 fbc0 	bl	800a8c8 <mbedtls_mpi_bitlen>
 8011148:	4602      	mov	r2, r0
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	659a      	str	r2, [r3, #88]	@ 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	334c      	adds	r3, #76	@ 0x4c
 8011152:	4618      	mov	r0, r3
 8011154:	f7f9 fbb8 	bl	800a8c8 <mbedtls_mpi_bitlen>
 8011158:	4602      	mov	r2, r0
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	65da      	str	r2, [r3, #92]	@ 0x5c

    grp->h = 1;
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2201      	movs	r2, #1
 8011162:	661a      	str	r2, [r3, #96]	@ 0x60

    return( 0 );
 8011164:	2300      	movs	r3, #0
}
 8011166:	4618      	mov	r0, r3
 8011168:	3710      	adds	r7, #16
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
	...

08011170 <ecp_use_curve25519>:
#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
/*
 * Specialized function for creating the Curve25519 group
 */
static int ecp_use_curve25519( mbedtls_ecp_group *grp )
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
    int ret;

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	3310      	adds	r3, #16
 801117c:	4a36      	ldr	r2, [pc, #216]	@ (8011258 <ecp_use_curve25519+0xe8>)
 801117e:	2110      	movs	r1, #16
 8011180:	4618      	mov	r0, r3
 8011182:	f7f9 fc1d 	bl	800a9c0 <mbedtls_mpi_read_string>
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d159      	bne.n	8011242 <ecp_use_curve25519+0xd2>

    /* P = 2^255 - 19 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	3304      	adds	r3, #4
 8011192:	2101      	movs	r1, #1
 8011194:	4618      	mov	r0, r3
 8011196:	f7f9 faa1 	bl	800a6dc <mbedtls_mpi_lset>
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d14f      	bne.n	8011242 <ecp_use_curve25519+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	3304      	adds	r3, #4
 80111a6:	21ff      	movs	r1, #255	@ 0xff
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7f9 fd78 	bl	800ac9e <mbedtls_mpi_shift_l>
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d145      	bne.n	8011242 <ecp_use_curve25519+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	1d18      	adds	r0, r3, #4
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	3304      	adds	r3, #4
 80111be:	2213      	movs	r2, #19
 80111c0:	4619      	mov	r1, r3
 80111c2:	f7fa f9fd 	bl	800b5c0 <mbedtls_mpi_sub_int>
 80111c6:	60f8      	str	r0, [r7, #12]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d139      	bne.n	8011242 <ecp_use_curve25519+0xd2>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	3304      	adds	r3, #4
 80111d2:	4618      	mov	r0, r3
 80111d4:	f7f9 fb78 	bl	800a8c8 <mbedtls_mpi_bitlen>
 80111d8:	4602      	mov	r2, r0
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* N = 2^252 + 27742317777372353535851937790883648493 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->N, 16,
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	334c      	adds	r3, #76	@ 0x4c
 80111e2:	4a1e      	ldr	r2, [pc, #120]	@ (801125c <ecp_use_curve25519+0xec>)
 80111e4:	2110      	movs	r1, #16
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7f9 fbea 	bl	800a9c0 <mbedtls_mpi_read_string>
 80111ec:	60f8      	str	r0, [r7, #12]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d126      	bne.n	8011242 <ecp_use_curve25519+0xd2>
                                              "14DEF9DEA2F79CD65812631A5CF5D3ED" ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 252, 1 ) );
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	334c      	adds	r3, #76	@ 0x4c
 80111f8:	2201      	movs	r2, #1
 80111fa:	21fc      	movs	r1, #252	@ 0xfc
 80111fc:	4618      	mov	r0, r3
 80111fe:	f7f9 faba 	bl	800a776 <mbedtls_mpi_set_bit>
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d11b      	bne.n	8011242 <ecp_use_curve25519+0xd2>

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	3328      	adds	r3, #40	@ 0x28
 801120e:	2109      	movs	r1, #9
 8011210:	4618      	mov	r0, r3
 8011212:	f7f9 fa63 	bl	800a6dc <mbedtls_mpi_lset>
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d111      	bne.n	8011242 <ecp_use_curve25519+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	3340      	adds	r3, #64	@ 0x40
 8011222:	2101      	movs	r1, #1
 8011224:	4618      	mov	r0, r3
 8011226:	f7f9 fa59 	bl	800a6dc <mbedtls_mpi_lset>
 801122a:	60f8      	str	r0, [r7, #12]
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d107      	bne.n	8011242 <ecp_use_curve25519+0xd2>
    mbedtls_mpi_free( &grp->G.Y );
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	3334      	adds	r3, #52	@ 0x34
 8011236:	4618      	mov	r0, r3
 8011238:	f7f9 f822 	bl	800a280 <mbedtls_mpi_free>

    /* Actually, the required msb for private keys */
    grp->nbits = 254;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	22fe      	movs	r2, #254	@ 0xfe
 8011240:	65da      	str	r2, [r3, #92]	@ 0x5c

cleanup:
    if( ret != 0 )
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d002      	beq.n	801124e <ecp_use_curve25519+0xde>
        mbedtls_ecp_group_free( grp );
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7fc ff47 	bl	800e0dc <mbedtls_ecp_group_free>

    return( ret );
 801124e:	68fb      	ldr	r3, [r7, #12]
}
 8011250:	4618      	mov	r0, r3
 8011252:	3710      	adds	r7, #16
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}
 8011258:	08016534 	.word	0x08016534
 801125c:	0801653c 	.word	0x0801653c

08011260 <ecp_use_curve448>:
#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
/*
 * Specialized function for creating the Curve448 group
 */
static int ecp_use_curve448( mbedtls_ecp_group *grp )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b086      	sub	sp, #24
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
    mbedtls_mpi Ns;
    int ret;

    mbedtls_mpi_init( &Ns );
 8011268:	f107 0308 	add.w	r3, r7, #8
 801126c:	4618      	mov	r0, r3
 801126e:	f7f8 fff4 	bl	800a25a <mbedtls_mpi_init>

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	3310      	adds	r3, #16
 8011276:	4a4c      	ldr	r2, [pc, #304]	@ (80113a8 <ecp_use_curve448+0x148>)
 8011278:	2110      	movs	r1, #16
 801127a:	4618      	mov	r0, r3
 801127c:	f7f9 fba0 	bl	800a9c0 <mbedtls_mpi_read_string>
 8011280:	6178      	str	r0, [r7, #20]
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d17f      	bne.n	8011388 <ecp_use_curve448+0x128>

    /* P = 2^448 - 2^224 - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	3304      	adds	r3, #4
 801128c:	2101      	movs	r1, #1
 801128e:	4618      	mov	r0, r3
 8011290:	f7f9 fa24 	bl	800a6dc <mbedtls_mpi_lset>
 8011294:	6178      	str	r0, [r7, #20]
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d175      	bne.n	8011388 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	3304      	adds	r3, #4
 80112a0:	21e0      	movs	r1, #224	@ 0xe0
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7f9 fcfb 	bl	800ac9e <mbedtls_mpi_shift_l>
 80112a8:	6178      	str	r0, [r7, #20]
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d16b      	bne.n	8011388 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	1d18      	adds	r0, r3, #4
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	3304      	adds	r3, #4
 80112b8:	2201      	movs	r2, #1
 80112ba:	4619      	mov	r1, r3
 80112bc:	f7fa f980 	bl	800b5c0 <mbedtls_mpi_sub_int>
 80112c0:	6178      	str	r0, [r7, #20]
 80112c2:	697b      	ldr	r3, [r7, #20]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d15f      	bne.n	8011388 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	3304      	adds	r3, #4
 80112cc:	21e0      	movs	r1, #224	@ 0xe0
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7f9 fce5 	bl	800ac9e <mbedtls_mpi_shift_l>
 80112d4:	6178      	str	r0, [r7, #20]
 80112d6:	697b      	ldr	r3, [r7, #20]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d155      	bne.n	8011388 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	1d18      	adds	r0, r3, #4
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	3304      	adds	r3, #4
 80112e4:	2201      	movs	r2, #1
 80112e6:	4619      	mov	r1, r3
 80112e8:	f7fa f96a 	bl	800b5c0 <mbedtls_mpi_sub_int>
 80112ec:	6178      	str	r0, [r7, #20]
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d149      	bne.n	8011388 <ecp_use_curve448+0x128>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	3304      	adds	r3, #4
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7f9 fae5 	bl	800a8c8 <mbedtls_mpi_bitlen>
 80112fe:	4602      	mov	r2, r0
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	3328      	adds	r3, #40	@ 0x28
 8011308:	2105      	movs	r1, #5
 801130a:	4618      	mov	r0, r3
 801130c:	f7f9 f9e6 	bl	800a6dc <mbedtls_mpi_lset>
 8011310:	6178      	str	r0, [r7, #20]
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d137      	bne.n	8011388 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	3340      	adds	r3, #64	@ 0x40
 801131c:	2101      	movs	r1, #1
 801131e:	4618      	mov	r0, r3
 8011320:	f7f9 f9dc 	bl	800a6dc <mbedtls_mpi_lset>
 8011324:	6178      	str	r0, [r7, #20]
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d12d      	bne.n	8011388 <ecp_use_curve448+0x128>
    mbedtls_mpi_free( &grp->G.Y );
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	3334      	adds	r3, #52	@ 0x34
 8011330:	4618      	mov	r0, r3
 8011332:	f7f8 ffa5 	bl	800a280 <mbedtls_mpi_free>

    /* N = 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	334c      	adds	r3, #76	@ 0x4c
 801133a:	2201      	movs	r2, #1
 801133c:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8011340:	4618      	mov	r0, r3
 8011342:	f7f9 fa18 	bl	800a776 <mbedtls_mpi_set_bit>
 8011346:	6178      	str	r0, [r7, #20]
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d11c      	bne.n	8011388 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 801134e:	f107 0308 	add.w	r3, r7, #8
 8011352:	4a16      	ldr	r2, [pc, #88]	@ (80113ac <ecp_use_curve448+0x14c>)
 8011354:	2110      	movs	r1, #16
 8011356:	4618      	mov	r0, r3
 8011358:	f7f9 fb32 	bl	800a9c0 <mbedtls_mpi_read_string>
 801135c:	6178      	str	r0, [r7, #20]
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d111      	bne.n	8011388 <ecp_use_curve448+0x128>
                                              "8335DC163BB124B65129C96FDE933D8D723A70AADC873D6D54A7BB0D" ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	334c      	adds	r3, #76	@ 0x4c
 801136e:	f107 0208 	add.w	r2, r7, #8
 8011372:	4619      	mov	r1, r3
 8011374:	f7fa f8bc 	bl	800b4f0 <mbedtls_mpi_sub_mpi>
 8011378:	6178      	str	r0, [r7, #20]
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d103      	bne.n	8011388 <ecp_use_curve448+0x128>

    /* Actually, the required msb for private keys */
    grp->nbits = 447;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f240 12bf 	movw	r2, #447	@ 0x1bf
 8011386:	65da      	str	r2, [r3, #92]	@ 0x5c

cleanup:
    mbedtls_mpi_free( &Ns );
 8011388:	f107 0308 	add.w	r3, r7, #8
 801138c:	4618      	mov	r0, r3
 801138e:	f7f8 ff77 	bl	800a280 <mbedtls_mpi_free>
    if( ret != 0 )
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d002      	beq.n	801139e <ecp_use_curve448+0x13e>
        mbedtls_ecp_group_free( grp );
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f7fc fe9f 	bl	800e0dc <mbedtls_ecp_group_free>

    return( ret );
 801139e:	697b      	ldr	r3, [r7, #20]
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3718      	adds	r7, #24
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	08016560 	.word	0x08016560
 80113ac:	08016568 	.word	0x08016568

080113b0 <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08c      	sub	sp, #48	@ 0x30
 80113b4:	af0a      	add	r7, sp, #40	@ 0x28
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	460b      	mov	r3, r1
 80113ba:	70fb      	strb	r3, [r7, #3]
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
 80113bc:	6878      	ldr	r0, [r7, #4]
 80113be:	f7fc fe8d 	bl	800e0dc <mbedtls_ecp_group_free>

    grp->id = id;
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	78fa      	ldrb	r2, [r7, #3]
 80113c6:	701a      	strb	r2, [r3, #0]

    switch( id )
 80113c8:	78fb      	ldrb	r3, [r7, #3]
 80113ca:	3b01      	subs	r3, #1
 80113cc:	2b0c      	cmp	r3, #12
 80113ce:	f200 81e1 	bhi.w	8011794 <mbedtls_ecp_group_load+0x3e4>
 80113d2:	a201      	add	r2, pc, #4	@ (adr r2, 80113d8 <mbedtls_ecp_group_load+0x28>)
 80113d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d8:	0801140d 	.word	0x0801140d
 80113dc:	08011447 	.word	0x08011447
 80113e0:	08011481 	.word	0x08011481
 80113e4:	080114bb 	.word	0x080114bb
 80113e8:	080114f5 	.word	0x080114f5
 80113ec:	080115dd 	.word	0x080115dd
 80113f0:	08011611 	.word	0x08011611
 80113f4:	08011741 	.word	0x08011741
 80113f8:	08011775 	.word	0x08011775
 80113fc:	0801152f 	.word	0x0801152f
 8011400:	08011569 	.word	0x08011569
 8011404:	080115a3 	.word	0x080115a3
 8011408:	08011785 	.word	0x08011785
    {
#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP192R1:
            NIST_MODP( p192 );
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	4a8d      	ldr	r2, [pc, #564]	@ (8011644 <mbedtls_ecp_group_load+0x294>)
 8011410:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp192r1 ) );
 8011412:	2318      	movs	r3, #24
 8011414:	9308      	str	r3, [sp, #32]
 8011416:	4b8c      	ldr	r3, [pc, #560]	@ (8011648 <mbedtls_ecp_group_load+0x298>)
 8011418:	9307      	str	r3, [sp, #28]
 801141a:	2318      	movs	r3, #24
 801141c:	9306      	str	r3, [sp, #24]
 801141e:	4b8b      	ldr	r3, [pc, #556]	@ (801164c <mbedtls_ecp_group_load+0x29c>)
 8011420:	9305      	str	r3, [sp, #20]
 8011422:	2318      	movs	r3, #24
 8011424:	9304      	str	r3, [sp, #16]
 8011426:	4b8a      	ldr	r3, [pc, #552]	@ (8011650 <mbedtls_ecp_group_load+0x2a0>)
 8011428:	9303      	str	r3, [sp, #12]
 801142a:	2318      	movs	r3, #24
 801142c:	9302      	str	r3, [sp, #8]
 801142e:	4b89      	ldr	r3, [pc, #548]	@ (8011654 <mbedtls_ecp_group_load+0x2a4>)
 8011430:	9301      	str	r3, [sp, #4]
 8011432:	2300      	movs	r3, #0
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	2300      	movs	r3, #0
 8011438:	2218      	movs	r2, #24
 801143a:	4987      	ldr	r1, [pc, #540]	@ (8011658 <mbedtls_ecp_group_load+0x2a8>)
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f7ff fe45 	bl	80110cc <ecp_group_load>
 8011442:	4603      	mov	r3, r0
 8011444:	e1aa      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP224R1:
            NIST_MODP( p224 );
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4a84      	ldr	r2, [pc, #528]	@ (801165c <mbedtls_ecp_group_load+0x2ac>)
 801144a:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp224r1 ) );
 801144c:	231c      	movs	r3, #28
 801144e:	9308      	str	r3, [sp, #32]
 8011450:	4b83      	ldr	r3, [pc, #524]	@ (8011660 <mbedtls_ecp_group_load+0x2b0>)
 8011452:	9307      	str	r3, [sp, #28]
 8011454:	231c      	movs	r3, #28
 8011456:	9306      	str	r3, [sp, #24]
 8011458:	4b82      	ldr	r3, [pc, #520]	@ (8011664 <mbedtls_ecp_group_load+0x2b4>)
 801145a:	9305      	str	r3, [sp, #20]
 801145c:	231c      	movs	r3, #28
 801145e:	9304      	str	r3, [sp, #16]
 8011460:	4b81      	ldr	r3, [pc, #516]	@ (8011668 <mbedtls_ecp_group_load+0x2b8>)
 8011462:	9303      	str	r3, [sp, #12]
 8011464:	231c      	movs	r3, #28
 8011466:	9302      	str	r3, [sp, #8]
 8011468:	4b80      	ldr	r3, [pc, #512]	@ (801166c <mbedtls_ecp_group_load+0x2bc>)
 801146a:	9301      	str	r3, [sp, #4]
 801146c:	2300      	movs	r3, #0
 801146e:	9300      	str	r3, [sp, #0]
 8011470:	2300      	movs	r3, #0
 8011472:	2220      	movs	r2, #32
 8011474:	497e      	ldr	r1, [pc, #504]	@ (8011670 <mbedtls_ecp_group_load+0x2c0>)
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f7ff fe28 	bl	80110cc <ecp_group_load>
 801147c:	4603      	mov	r3, r0
 801147e:	e18d      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4a7c      	ldr	r2, [pc, #496]	@ (8011674 <mbedtls_ecp_group_load+0x2c4>)
 8011484:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp256r1 ) );
 8011486:	2320      	movs	r3, #32
 8011488:	9308      	str	r3, [sp, #32]
 801148a:	4b7b      	ldr	r3, [pc, #492]	@ (8011678 <mbedtls_ecp_group_load+0x2c8>)
 801148c:	9307      	str	r3, [sp, #28]
 801148e:	2320      	movs	r3, #32
 8011490:	9306      	str	r3, [sp, #24]
 8011492:	4b7a      	ldr	r3, [pc, #488]	@ (801167c <mbedtls_ecp_group_load+0x2cc>)
 8011494:	9305      	str	r3, [sp, #20]
 8011496:	2320      	movs	r3, #32
 8011498:	9304      	str	r3, [sp, #16]
 801149a:	4b79      	ldr	r3, [pc, #484]	@ (8011680 <mbedtls_ecp_group_load+0x2d0>)
 801149c:	9303      	str	r3, [sp, #12]
 801149e:	2320      	movs	r3, #32
 80114a0:	9302      	str	r3, [sp, #8]
 80114a2:	4b78      	ldr	r3, [pc, #480]	@ (8011684 <mbedtls_ecp_group_load+0x2d4>)
 80114a4:	9301      	str	r3, [sp, #4]
 80114a6:	2300      	movs	r3, #0
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	2300      	movs	r3, #0
 80114ac:	2220      	movs	r2, #32
 80114ae:	4976      	ldr	r1, [pc, #472]	@ (8011688 <mbedtls_ecp_group_load+0x2d8>)
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f7ff fe0b 	bl	80110cc <ecp_group_load>
 80114b6:	4603      	mov	r3, r0
 80114b8:	e170      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP384R1:
            NIST_MODP( p384 );
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4a73      	ldr	r2, [pc, #460]	@ (801168c <mbedtls_ecp_group_load+0x2dc>)
 80114be:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp384r1 ) );
 80114c0:	2330      	movs	r3, #48	@ 0x30
 80114c2:	9308      	str	r3, [sp, #32]
 80114c4:	4b72      	ldr	r3, [pc, #456]	@ (8011690 <mbedtls_ecp_group_load+0x2e0>)
 80114c6:	9307      	str	r3, [sp, #28]
 80114c8:	2330      	movs	r3, #48	@ 0x30
 80114ca:	9306      	str	r3, [sp, #24]
 80114cc:	4b71      	ldr	r3, [pc, #452]	@ (8011694 <mbedtls_ecp_group_load+0x2e4>)
 80114ce:	9305      	str	r3, [sp, #20]
 80114d0:	2330      	movs	r3, #48	@ 0x30
 80114d2:	9304      	str	r3, [sp, #16]
 80114d4:	4b70      	ldr	r3, [pc, #448]	@ (8011698 <mbedtls_ecp_group_load+0x2e8>)
 80114d6:	9303      	str	r3, [sp, #12]
 80114d8:	2330      	movs	r3, #48	@ 0x30
 80114da:	9302      	str	r3, [sp, #8]
 80114dc:	4b6f      	ldr	r3, [pc, #444]	@ (801169c <mbedtls_ecp_group_load+0x2ec>)
 80114de:	9301      	str	r3, [sp, #4]
 80114e0:	2300      	movs	r3, #0
 80114e2:	9300      	str	r3, [sp, #0]
 80114e4:	2300      	movs	r3, #0
 80114e6:	2230      	movs	r2, #48	@ 0x30
 80114e8:	496d      	ldr	r1, [pc, #436]	@ (80116a0 <mbedtls_ecp_group_load+0x2f0>)
 80114ea:	6878      	ldr	r0, [r7, #4]
 80114ec:	f7ff fdee 	bl	80110cc <ecp_group_load>
 80114f0:	4603      	mov	r3, r0
 80114f2:	e153      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP521R1:
            NIST_MODP( p521 );
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	4a6b      	ldr	r2, [pc, #428]	@ (80116a4 <mbedtls_ecp_group_load+0x2f4>)
 80114f8:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp521r1 ) );
 80114fa:	2344      	movs	r3, #68	@ 0x44
 80114fc:	9308      	str	r3, [sp, #32]
 80114fe:	4b6a      	ldr	r3, [pc, #424]	@ (80116a8 <mbedtls_ecp_group_load+0x2f8>)
 8011500:	9307      	str	r3, [sp, #28]
 8011502:	2344      	movs	r3, #68	@ 0x44
 8011504:	9306      	str	r3, [sp, #24]
 8011506:	4b69      	ldr	r3, [pc, #420]	@ (80116ac <mbedtls_ecp_group_load+0x2fc>)
 8011508:	9305      	str	r3, [sp, #20]
 801150a:	2344      	movs	r3, #68	@ 0x44
 801150c:	9304      	str	r3, [sp, #16]
 801150e:	4b68      	ldr	r3, [pc, #416]	@ (80116b0 <mbedtls_ecp_group_load+0x300>)
 8011510:	9303      	str	r3, [sp, #12]
 8011512:	2344      	movs	r3, #68	@ 0x44
 8011514:	9302      	str	r3, [sp, #8]
 8011516:	4b67      	ldr	r3, [pc, #412]	@ (80116b4 <mbedtls_ecp_group_load+0x304>)
 8011518:	9301      	str	r3, [sp, #4]
 801151a:	2300      	movs	r3, #0
 801151c:	9300      	str	r3, [sp, #0]
 801151e:	2300      	movs	r3, #0
 8011520:	2244      	movs	r2, #68	@ 0x44
 8011522:	4965      	ldr	r1, [pc, #404]	@ (80116b8 <mbedtls_ecp_group_load+0x308>)
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7ff fdd1 	bl	80110cc <ecp_group_load>
 801152a:	4603      	mov	r3, r0
 801152c:	e136      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP192K1:
            grp->modp = ecp_mod_p192k1;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	4a62      	ldr	r2, [pc, #392]	@ (80116bc <mbedtls_ecp_group_load+0x30c>)
 8011532:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP_A( secp192k1 ) );
 8011534:	2318      	movs	r3, #24
 8011536:	9308      	str	r3, [sp, #32]
 8011538:	4b61      	ldr	r3, [pc, #388]	@ (80116c0 <mbedtls_ecp_group_load+0x310>)
 801153a:	9307      	str	r3, [sp, #28]
 801153c:	2318      	movs	r3, #24
 801153e:	9306      	str	r3, [sp, #24]
 8011540:	4b60      	ldr	r3, [pc, #384]	@ (80116c4 <mbedtls_ecp_group_load+0x314>)
 8011542:	9305      	str	r3, [sp, #20]
 8011544:	2318      	movs	r3, #24
 8011546:	9304      	str	r3, [sp, #16]
 8011548:	4b5f      	ldr	r3, [pc, #380]	@ (80116c8 <mbedtls_ecp_group_load+0x318>)
 801154a:	9303      	str	r3, [sp, #12]
 801154c:	2304      	movs	r3, #4
 801154e:	9302      	str	r3, [sp, #8]
 8011550:	4b5e      	ldr	r3, [pc, #376]	@ (80116cc <mbedtls_ecp_group_load+0x31c>)
 8011552:	9301      	str	r3, [sp, #4]
 8011554:	2304      	movs	r3, #4
 8011556:	9300      	str	r3, [sp, #0]
 8011558:	4b5d      	ldr	r3, [pc, #372]	@ (80116d0 <mbedtls_ecp_group_load+0x320>)
 801155a:	2218      	movs	r2, #24
 801155c:	495d      	ldr	r1, [pc, #372]	@ (80116d4 <mbedtls_ecp_group_load+0x324>)
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7ff fdb4 	bl	80110cc <ecp_group_load>
 8011564:	4603      	mov	r3, r0
 8011566:	e119      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP224K1:
            grp->modp = ecp_mod_p224k1;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	4a5b      	ldr	r2, [pc, #364]	@ (80116d8 <mbedtls_ecp_group_load+0x328>)
 801156c:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP_A( secp224k1 ) );
 801156e:	2320      	movs	r3, #32
 8011570:	9308      	str	r3, [sp, #32]
 8011572:	4b5a      	ldr	r3, [pc, #360]	@ (80116dc <mbedtls_ecp_group_load+0x32c>)
 8011574:	9307      	str	r3, [sp, #28]
 8011576:	231c      	movs	r3, #28
 8011578:	9306      	str	r3, [sp, #24]
 801157a:	4b59      	ldr	r3, [pc, #356]	@ (80116e0 <mbedtls_ecp_group_load+0x330>)
 801157c:	9305      	str	r3, [sp, #20]
 801157e:	231c      	movs	r3, #28
 8011580:	9304      	str	r3, [sp, #16]
 8011582:	4b58      	ldr	r3, [pc, #352]	@ (80116e4 <mbedtls_ecp_group_load+0x334>)
 8011584:	9303      	str	r3, [sp, #12]
 8011586:	2304      	movs	r3, #4
 8011588:	9302      	str	r3, [sp, #8]
 801158a:	4b57      	ldr	r3, [pc, #348]	@ (80116e8 <mbedtls_ecp_group_load+0x338>)
 801158c:	9301      	str	r3, [sp, #4]
 801158e:	2304      	movs	r3, #4
 8011590:	9300      	str	r3, [sp, #0]
 8011592:	4b56      	ldr	r3, [pc, #344]	@ (80116ec <mbedtls_ecp_group_load+0x33c>)
 8011594:	221c      	movs	r2, #28
 8011596:	4956      	ldr	r1, [pc, #344]	@ (80116f0 <mbedtls_ecp_group_load+0x340>)
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7ff fd97 	bl	80110cc <ecp_group_load>
 801159e:	4603      	mov	r3, r0
 80115a0:	e0fc      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256K1:
            grp->modp = ecp_mod_p256k1;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	4a53      	ldr	r2, [pc, #332]	@ (80116f4 <mbedtls_ecp_group_load+0x344>)
 80115a6:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP_A( secp256k1 ) );
 80115a8:	2320      	movs	r3, #32
 80115aa:	9308      	str	r3, [sp, #32]
 80115ac:	4b52      	ldr	r3, [pc, #328]	@ (80116f8 <mbedtls_ecp_group_load+0x348>)
 80115ae:	9307      	str	r3, [sp, #28]
 80115b0:	2320      	movs	r3, #32
 80115b2:	9306      	str	r3, [sp, #24]
 80115b4:	4b51      	ldr	r3, [pc, #324]	@ (80116fc <mbedtls_ecp_group_load+0x34c>)
 80115b6:	9305      	str	r3, [sp, #20]
 80115b8:	2320      	movs	r3, #32
 80115ba:	9304      	str	r3, [sp, #16]
 80115bc:	4b50      	ldr	r3, [pc, #320]	@ (8011700 <mbedtls_ecp_group_load+0x350>)
 80115be:	9303      	str	r3, [sp, #12]
 80115c0:	2304      	movs	r3, #4
 80115c2:	9302      	str	r3, [sp, #8]
 80115c4:	4b4f      	ldr	r3, [pc, #316]	@ (8011704 <mbedtls_ecp_group_load+0x354>)
 80115c6:	9301      	str	r3, [sp, #4]
 80115c8:	2304      	movs	r3, #4
 80115ca:	9300      	str	r3, [sp, #0]
 80115cc:	4b4e      	ldr	r3, [pc, #312]	@ (8011708 <mbedtls_ecp_group_load+0x358>)
 80115ce:	2220      	movs	r2, #32
 80115d0:	494e      	ldr	r1, [pc, #312]	@ (801170c <mbedtls_ecp_group_load+0x35c>)
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7ff fd7a 	bl	80110cc <ecp_group_load>
 80115d8:	4603      	mov	r3, r0
 80115da:	e0df      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
        case MBEDTLS_ECP_DP_BP256R1:
            return( LOAD_GROUP_A( brainpoolP256r1 ) );
 80115dc:	2320      	movs	r3, #32
 80115de:	9308      	str	r3, [sp, #32]
 80115e0:	4b4b      	ldr	r3, [pc, #300]	@ (8011710 <mbedtls_ecp_group_load+0x360>)
 80115e2:	9307      	str	r3, [sp, #28]
 80115e4:	2320      	movs	r3, #32
 80115e6:	9306      	str	r3, [sp, #24]
 80115e8:	4b4a      	ldr	r3, [pc, #296]	@ (8011714 <mbedtls_ecp_group_load+0x364>)
 80115ea:	9305      	str	r3, [sp, #20]
 80115ec:	2320      	movs	r3, #32
 80115ee:	9304      	str	r3, [sp, #16]
 80115f0:	4b49      	ldr	r3, [pc, #292]	@ (8011718 <mbedtls_ecp_group_load+0x368>)
 80115f2:	9303      	str	r3, [sp, #12]
 80115f4:	2320      	movs	r3, #32
 80115f6:	9302      	str	r3, [sp, #8]
 80115f8:	4b48      	ldr	r3, [pc, #288]	@ (801171c <mbedtls_ecp_group_load+0x36c>)
 80115fa:	9301      	str	r3, [sp, #4]
 80115fc:	2320      	movs	r3, #32
 80115fe:	9300      	str	r3, [sp, #0]
 8011600:	4b47      	ldr	r3, [pc, #284]	@ (8011720 <mbedtls_ecp_group_load+0x370>)
 8011602:	2220      	movs	r2, #32
 8011604:	4947      	ldr	r1, [pc, #284]	@ (8011724 <mbedtls_ecp_group_load+0x374>)
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7ff fd60 	bl	80110cc <ecp_group_load>
 801160c:	4603      	mov	r3, r0
 801160e:	e0c5      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
        case MBEDTLS_ECP_DP_BP384R1:
            return( LOAD_GROUP_A( brainpoolP384r1 ) );
 8011610:	2330      	movs	r3, #48	@ 0x30
 8011612:	9308      	str	r3, [sp, #32]
 8011614:	4b44      	ldr	r3, [pc, #272]	@ (8011728 <mbedtls_ecp_group_load+0x378>)
 8011616:	9307      	str	r3, [sp, #28]
 8011618:	2330      	movs	r3, #48	@ 0x30
 801161a:	9306      	str	r3, [sp, #24]
 801161c:	4b43      	ldr	r3, [pc, #268]	@ (801172c <mbedtls_ecp_group_load+0x37c>)
 801161e:	9305      	str	r3, [sp, #20]
 8011620:	2330      	movs	r3, #48	@ 0x30
 8011622:	9304      	str	r3, [sp, #16]
 8011624:	4b42      	ldr	r3, [pc, #264]	@ (8011730 <mbedtls_ecp_group_load+0x380>)
 8011626:	9303      	str	r3, [sp, #12]
 8011628:	2330      	movs	r3, #48	@ 0x30
 801162a:	9302      	str	r3, [sp, #8]
 801162c:	4b41      	ldr	r3, [pc, #260]	@ (8011734 <mbedtls_ecp_group_load+0x384>)
 801162e:	9301      	str	r3, [sp, #4]
 8011630:	2330      	movs	r3, #48	@ 0x30
 8011632:	9300      	str	r3, [sp, #0]
 8011634:	4b40      	ldr	r3, [pc, #256]	@ (8011738 <mbedtls_ecp_group_load+0x388>)
 8011636:	2230      	movs	r2, #48	@ 0x30
 8011638:	4940      	ldr	r1, [pc, #256]	@ (801173c <mbedtls_ecp_group_load+0x38c>)
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f7ff fd46 	bl	80110cc <ecp_group_load>
 8011640:	4603      	mov	r3, r0
 8011642:	e0ab      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
 8011644:	080118ab 	.word	0x080118ab
 8011648:	08016a9c 	.word	0x08016a9c
 801164c:	08016a84 	.word	0x08016a84
 8011650:	08016a6c 	.word	0x08016a6c
 8011654:	08016a54 	.word	0x08016a54
 8011658:	08016a3c 	.word	0x08016a3c
 801165c:	08011a85 	.word	0x08011a85
 8011660:	08016b28 	.word	0x08016b28
 8011664:	08016b0c 	.word	0x08016b0c
 8011668:	08016af0 	.word	0x08016af0
 801166c:	08016ad4 	.word	0x08016ad4
 8011670:	08016ab4 	.word	0x08016ab4
 8011674:	08011f13 	.word	0x08011f13
 8011678:	08016bc4 	.word	0x08016bc4
 801167c:	08016ba4 	.word	0x08016ba4
 8011680:	08016b84 	.word	0x08016b84
 8011684:	08016b64 	.word	0x08016b64
 8011688:	08016b44 	.word	0x08016b44
 801168c:	08012749 	.word	0x08012749
 8011690:	08016ca4 	.word	0x08016ca4
 8011694:	08016c74 	.word	0x08016c74
 8011698:	08016c44 	.word	0x08016c44
 801169c:	08016c14 	.word	0x08016c14
 80116a0:	08016be4 	.word	0x08016be4
 80116a4:	080131f9 	.word	0x080131f9
 80116a8:	08016de4 	.word	0x08016de4
 80116ac:	08016da0 	.word	0x08016da0
 80116b0:	08016d5c 	.word	0x08016d5c
 80116b4:	08016d18 	.word	0x08016d18
 80116b8:	08016cd4 	.word	0x08016cd4
 80116bc:	0801374d 	.word	0x0801374d
 80116c0:	08016e78 	.word	0x08016e78
 80116c4:	08016e60 	.word	0x08016e60
 80116c8:	08016e48 	.word	0x08016e48
 80116cc:	08016e44 	.word	0x08016e44
 80116d0:	08016e40 	.word	0x08016e40
 80116d4:	08016e28 	.word	0x08016e28
 80116d8:	08013779 	.word	0x08013779
 80116dc:	08016eec 	.word	0x08016eec
 80116e0:	08016ed0 	.word	0x08016ed0
 80116e4:	08016eb4 	.word	0x08016eb4
 80116e8:	08016eb0 	.word	0x08016eb0
 80116ec:	08016eac 	.word	0x08016eac
 80116f0:	08016e90 	.word	0x08016e90
 80116f4:	080137a5 	.word	0x080137a5
 80116f8:	08016f74 	.word	0x08016f74
 80116fc:	08016f54 	.word	0x08016f54
 8011700:	08016f34 	.word	0x08016f34
 8011704:	08016f30 	.word	0x08016f30
 8011708:	08016f2c 	.word	0x08016f2c
 801170c:	08016f0c 	.word	0x08016f0c
 8011710:	08017034 	.word	0x08017034
 8011714:	08017014 	.word	0x08017014
 8011718:	08016ff4 	.word	0x08016ff4
 801171c:	08016fd4 	.word	0x08016fd4
 8011720:	08016fb4 	.word	0x08016fb4
 8011724:	08016f94 	.word	0x08016f94
 8011728:	08017144 	.word	0x08017144
 801172c:	08017114 	.word	0x08017114
 8011730:	080170e4 	.word	0x080170e4
 8011734:	080170b4 	.word	0x080170b4
 8011738:	08017084 	.word	0x08017084
 801173c:	08017054 	.word	0x08017054
#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
        case MBEDTLS_ECP_DP_BP512R1:
            return( LOAD_GROUP_A( brainpoolP512r1 ) );
 8011740:	2340      	movs	r3, #64	@ 0x40
 8011742:	9308      	str	r3, [sp, #32]
 8011744:	4b17      	ldr	r3, [pc, #92]	@ (80117a4 <mbedtls_ecp_group_load+0x3f4>)
 8011746:	9307      	str	r3, [sp, #28]
 8011748:	2340      	movs	r3, #64	@ 0x40
 801174a:	9306      	str	r3, [sp, #24]
 801174c:	4b16      	ldr	r3, [pc, #88]	@ (80117a8 <mbedtls_ecp_group_load+0x3f8>)
 801174e:	9305      	str	r3, [sp, #20]
 8011750:	2340      	movs	r3, #64	@ 0x40
 8011752:	9304      	str	r3, [sp, #16]
 8011754:	4b15      	ldr	r3, [pc, #84]	@ (80117ac <mbedtls_ecp_group_load+0x3fc>)
 8011756:	9303      	str	r3, [sp, #12]
 8011758:	2340      	movs	r3, #64	@ 0x40
 801175a:	9302      	str	r3, [sp, #8]
 801175c:	4b14      	ldr	r3, [pc, #80]	@ (80117b0 <mbedtls_ecp_group_load+0x400>)
 801175e:	9301      	str	r3, [sp, #4]
 8011760:	2340      	movs	r3, #64	@ 0x40
 8011762:	9300      	str	r3, [sp, #0]
 8011764:	4b13      	ldr	r3, [pc, #76]	@ (80117b4 <mbedtls_ecp_group_load+0x404>)
 8011766:	2240      	movs	r2, #64	@ 0x40
 8011768:	4913      	ldr	r1, [pc, #76]	@ (80117b8 <mbedtls_ecp_group_load+0x408>)
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f7ff fcae 	bl	80110cc <ecp_group_load>
 8011770:	4603      	mov	r3, r0
 8011772:	e013      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
        case MBEDTLS_ECP_DP_CURVE25519:
            grp->modp = ecp_mod_p255;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	4a11      	ldr	r2, [pc, #68]	@ (80117bc <mbedtls_ecp_group_load+0x40c>)
 8011778:	665a      	str	r2, [r3, #100]	@ 0x64
            return( ecp_use_curve25519( grp ) );
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f7ff fcf8 	bl	8011170 <ecp_use_curve25519>
 8011780:	4603      	mov	r3, r0
 8011782:	e00b      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
        case MBEDTLS_ECP_DP_CURVE448:
            grp->modp = ecp_mod_p448;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	4a0e      	ldr	r2, [pc, #56]	@ (80117c0 <mbedtls_ecp_group_load+0x410>)
 8011788:	665a      	str	r2, [r3, #100]	@ 0x64
            return( ecp_use_curve448( grp ) );
 801178a:	6878      	ldr	r0, [r7, #4]
 801178c:	f7ff fd68 	bl	8011260 <ecp_use_curve448>
 8011790:	4603      	mov	r3, r0
 8011792:	e003      	b.n	801179c <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f7fc fca1 	bl	800e0dc <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 801179a:	4b0a      	ldr	r3, [pc, #40]	@ (80117c4 <mbedtls_ecp_group_load+0x414>)
    }
}
 801179c:	4618      	mov	r0, r3
 801179e:	3708      	adds	r7, #8
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}
 80117a4:	080172b4 	.word	0x080172b4
 80117a8:	08017274 	.word	0x08017274
 80117ac:	08017234 	.word	0x08017234
 80117b0:	080171f4 	.word	0x080171f4
 80117b4:	080171b4 	.word	0x080171b4
 80117b8:	08017174 	.word	0x08017174
 80117bc:	080132ad 	.word	0x080132ad
 80117c0:	0801338d 	.word	0x0801338d
 80117c4:	ffffb180 	.word	0xffffb180

080117c8 <add64>:
 * use a mbedtls_mpi_uint * to designate such a chunk, and small loops to handle it.
 */

/* Add 64-bit chunks (dst += src) and update carry */
static inline void add64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *src, mbedtls_mpi_uint *carry )
{
 80117c8:	b480      	push	{r7}
 80117ca:	b087      	sub	sp, #28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	60f8      	str	r0, [r7, #12]
 80117d0:	60b9      	str	r1, [r7, #8]
 80117d2:	607a      	str	r2, [r7, #4]
    unsigned char i;
    mbedtls_mpi_uint c = 0;
 80117d4:	2300      	movs	r3, #0
 80117d6:	613b      	str	r3, [r7, #16]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )
 80117d8:	2300      	movs	r3, #0
 80117da:	75fb      	strb	r3, [r7, #23]
 80117dc:	e02b      	b.n	8011836 <add64+0x6e>
    {
        *dst += c;      c  = ( *dst < c );
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	441a      	add	r2, r3
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	601a      	str	r2, [r3, #0]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	693a      	ldr	r2, [r7, #16]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	bf8c      	ite	hi
 80117f4:	2301      	movhi	r3, #1
 80117f6:	2300      	movls	r3, #0
 80117f8:	b2db      	uxtb	r3, r3
 80117fa:	613b      	str	r3, [r7, #16]
        *dst += *src;   c += ( *dst < *src );
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	441a      	add	r2, r3
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	601a      	str	r2, [r3, #0]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	429a      	cmp	r2, r3
 8011814:	bf34      	ite	cc
 8011816:	2301      	movcc	r3, #1
 8011818:	2300      	movcs	r3, #0
 801181a:	b2db      	uxtb	r3, r3
 801181c:	461a      	mov	r2, r3
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	4413      	add	r3, r2
 8011822:	613b      	str	r3, [r7, #16]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )
 8011824:	7dfb      	ldrb	r3, [r7, #23]
 8011826:	3301      	adds	r3, #1
 8011828:	75fb      	strb	r3, [r7, #23]
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	3304      	adds	r3, #4
 801182e:	60fb      	str	r3, [r7, #12]
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	3304      	adds	r3, #4
 8011834:	60bb      	str	r3, [r7, #8]
 8011836:	7dfb      	ldrb	r3, [r7, #23]
 8011838:	2b01      	cmp	r3, #1
 801183a:	d9d0      	bls.n	80117de <add64+0x16>
    }
    *carry += c;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681a      	ldr	r2, [r3, #0]
 8011840:	693b      	ldr	r3, [r7, #16]
 8011842:	441a      	add	r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	601a      	str	r2, [r3, #0]
}
 8011848:	bf00      	nop
 801184a:	371c      	adds	r7, #28
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <carry64>:

/* Add carry to a 64-bit chunk and update carry */
static inline void carry64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *carry )
{
 8011854:	b480      	push	{r7}
 8011856:	b085      	sub	sp, #20
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
    unsigned char i;
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )
 801185e:	2300      	movs	r3, #0
 8011860:	73fb      	strb	r3, [r7, #15]
 8011862:	e018      	b.n	8011896 <carry64+0x42>
    {
        *dst += *carry;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681a      	ldr	r2, [r3, #0]
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	441a      	add	r2, r3
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	601a      	str	r2, [r3, #0]
        *carry  = ( *dst < *carry );
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681a      	ldr	r2, [r3, #0]
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	429a      	cmp	r2, r3
 801187c:	bf34      	ite	cc
 801187e:	2301      	movcc	r3, #1
 8011880:	2300      	movcs	r3, #0
 8011882:	b2db      	uxtb	r3, r3
 8011884:	461a      	mov	r2, r3
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )
 801188a:	7bfb      	ldrb	r3, [r7, #15]
 801188c:	3301      	adds	r3, #1
 801188e:	73fb      	strb	r3, [r7, #15]
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	3304      	adds	r3, #4
 8011894:	607b      	str	r3, [r7, #4]
 8011896:	7bfb      	ldrb	r3, [r7, #15]
 8011898:	2b01      	cmp	r3, #1
 801189a:	d9e3      	bls.n	8011864 <carry64+0x10>
    }
}
 801189c:	bf00      	nop
 801189e:	bf00      	nop
 80118a0:	3714      	adds	r7, #20
 80118a2:	46bd      	mov	sp, r7
 80118a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a8:	4770      	bx	lr

080118aa <ecp_mod_p192>:

/*
 * Fast quasi-reduction modulo p192 (FIPS 186-3 D.2.1)
 */
static int ecp_mod_p192( mbedtls_mpi *N )
{
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b086      	sub	sp, #24
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	6078      	str	r0, [r7, #4]
    int ret;
    mbedtls_mpi_uint c = 0;
 80118b2:	2300      	movs	r3, #0
 80118b4:	60bb      	str	r3, [r7, #8]
    mbedtls_mpi_uint *p, *end;

    /* Make sure we have enough blocks so that A(5) is legal */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, 6 * WIDTH ) );
 80118b6:	210c      	movs	r1, #12
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7f8 fd07 	bl	800a2cc <mbedtls_mpi_grow>
 80118be:	6138      	str	r0, [r7, #16]
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d16b      	bne.n	801199e <ecp_mod_p192+0xf4>

    p = N->p;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	689b      	ldr	r3, [r3, #8]
 80118ca:	617b      	str	r3, [r7, #20]
    end = p + N->n;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	685b      	ldr	r3, [r3, #4]
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	4413      	add	r3, r2
 80118d6:	60fb      	str	r3, [r7, #12]

    ADD( 3 ); ADD( 5 );             NEXT; // A0 += A3 + A5
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	689b      	ldr	r3, [r3, #8]
 80118dc:	3318      	adds	r3, #24
 80118de:	f107 0208 	add.w	r2, r7, #8
 80118e2:	4619      	mov	r1, r3
 80118e4:	6978      	ldr	r0, [r7, #20]
 80118e6:	f7ff ff6f 	bl	80117c8 <add64>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	689b      	ldr	r3, [r3, #8]
 80118ee:	3328      	adds	r3, #40	@ 0x28
 80118f0:	f107 0208 	add.w	r2, r7, #8
 80118f4:	4619      	mov	r1, r3
 80118f6:	6978      	ldr	r0, [r7, #20]
 80118f8:	f7ff ff66 	bl	80117c8 <add64>
 80118fc:	697b      	ldr	r3, [r7, #20]
 80118fe:	3308      	adds	r3, #8
 8011900:	617b      	str	r3, [r7, #20]
 8011902:	f107 0308 	add.w	r3, r7, #8
 8011906:	4619      	mov	r1, r3
 8011908:	6978      	ldr	r0, [r7, #20]
 801190a:	f7ff ffa3 	bl	8011854 <carry64>
    ADD( 3 ); ADD( 4 ); ADD( 5 );   NEXT; // A1 += A3 + A4 + A5
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	3318      	adds	r3, #24
 8011914:	f107 0208 	add.w	r2, r7, #8
 8011918:	4619      	mov	r1, r3
 801191a:	6978      	ldr	r0, [r7, #20]
 801191c:	f7ff ff54 	bl	80117c8 <add64>
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	689b      	ldr	r3, [r3, #8]
 8011924:	3320      	adds	r3, #32
 8011926:	f107 0208 	add.w	r2, r7, #8
 801192a:	4619      	mov	r1, r3
 801192c:	6978      	ldr	r0, [r7, #20]
 801192e:	f7ff ff4b 	bl	80117c8 <add64>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	689b      	ldr	r3, [r3, #8]
 8011936:	3328      	adds	r3, #40	@ 0x28
 8011938:	f107 0208 	add.w	r2, r7, #8
 801193c:	4619      	mov	r1, r3
 801193e:	6978      	ldr	r0, [r7, #20]
 8011940:	f7ff ff42 	bl	80117c8 <add64>
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	3308      	adds	r3, #8
 8011948:	617b      	str	r3, [r7, #20]
 801194a:	f107 0308 	add.w	r3, r7, #8
 801194e:	4619      	mov	r1, r3
 8011950:	6978      	ldr	r0, [r7, #20]
 8011952:	f7ff ff7f 	bl	8011854 <carry64>
    ADD( 4 ); ADD( 5 );             LAST; // A2 += A4 + A5
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	689b      	ldr	r3, [r3, #8]
 801195a:	3320      	adds	r3, #32
 801195c:	f107 0208 	add.w	r2, r7, #8
 8011960:	4619      	mov	r1, r3
 8011962:	6978      	ldr	r0, [r7, #20]
 8011964:	f7ff ff30 	bl	80117c8 <add64>
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	689b      	ldr	r3, [r3, #8]
 801196c:	3328      	adds	r3, #40	@ 0x28
 801196e:	f107 0208 	add.w	r2, r7, #8
 8011972:	4619      	mov	r1, r3
 8011974:	6978      	ldr	r0, [r7, #20]
 8011976:	f7ff ff27 	bl	80117c8 <add64>
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	3308      	adds	r3, #8
 801197e:	617b      	str	r3, [r7, #20]
 8011980:	68ba      	ldr	r2, [r7, #8]
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	601a      	str	r2, [r3, #0]
 8011986:	e002      	b.n	801198e <ecp_mod_p192+0xe4>
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	2200      	movs	r2, #0
 801198c:	601a      	str	r2, [r3, #0]
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	3304      	adds	r3, #4
 8011992:	617b      	str	r3, [r7, #20]
 8011994:	697a      	ldr	r2, [r7, #20]
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	429a      	cmp	r2, r3
 801199a:	d3f5      	bcc.n	8011988 <ecp_mod_p192+0xde>

cleanup:
 801199c:	bf00      	nop
    return( ret );
 801199e:	693b      	ldr	r3, [r7, #16]
}
 80119a0:	4618      	mov	r0, r3
 80119a2:	3718      	adds	r7, #24
 80119a4:	46bd      	mov	sp, r7
 80119a6:	bd80      	pop	{r7, pc}

080119a8 <add32>:

/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	60b9      	str	r1, [r7, #8]
 80119b2:	607a      	str	r2, [r7, #4]
    *dst += src;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	441a      	add	r2, r3
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	601a      	str	r2, [r3, #0]
    *carry += ( *dst < src );
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f993 3000 	ldrsb.w	r3, [r3]
 80119c6:	b2db      	uxtb	r3, r3
 80119c8:	68fa      	ldr	r2, [r7, #12]
 80119ca:	6812      	ldr	r2, [r2, #0]
 80119cc:	68b9      	ldr	r1, [r7, #8]
 80119ce:	4291      	cmp	r1, r2
 80119d0:	bf8c      	ite	hi
 80119d2:	2201      	movhi	r2, #1
 80119d4:	2200      	movls	r2, #0
 80119d6:	b2d2      	uxtb	r2, r2
 80119d8:	4413      	add	r3, r2
 80119da:	b2db      	uxtb	r3, r3
 80119dc:	b25a      	sxtb	r2, r3
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	701a      	strb	r2, [r3, #0]
}
 80119e2:	bf00      	nop
 80119e4:	3714      	adds	r7, #20
 80119e6:	46bd      	mov	sp, r7
 80119e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ec:	4770      	bx	lr

080119ee <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
 80119ee:	b480      	push	{r7}
 80119f0:	b085      	sub	sp, #20
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	60f8      	str	r0, [r7, #12]
 80119f6:	60b9      	str	r1, [r7, #8]
 80119f8:	607a      	str	r2, [r7, #4]
    *carry -= ( *dst < src );
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f993 3000 	ldrsb.w	r3, [r3]
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	68fa      	ldr	r2, [r7, #12]
 8011a04:	6812      	ldr	r2, [r2, #0]
 8011a06:	68b9      	ldr	r1, [r7, #8]
 8011a08:	4291      	cmp	r1, r2
 8011a0a:	bf8c      	ite	hi
 8011a0c:	2201      	movhi	r2, #1
 8011a0e:	2200      	movls	r2, #0
 8011a10:	b2d2      	uxtb	r2, r2
 8011a12:	1a9b      	subs	r3, r3, r2
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	b25a      	sxtb	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	701a      	strb	r2, [r3, #0]
    *dst -= src;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	1ad2      	subs	r2, r2, r3
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	601a      	str	r2, [r3, #0]
}
 8011a28:	bf00      	nop
 8011a2a:	3714      	adds	r7, #20
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr

08011a34 <fix_negative>:
/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b086      	sub	sp, #24
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	60f8      	str	r0, [r7, #12]
 8011a3c:	607a      	str	r2, [r7, #4]
 8011a3e:	603b      	str	r3, [r7, #0]
 8011a40:	460b      	mov	r3, r1
 8011a42:	72fb      	strb	r3, [r7, #11]
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 8011a44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011a48:	4258      	negs	r0, r3
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	689a      	ldr	r2, [r3, #8]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6859      	ldr	r1, [r3, #4]
 8011a52:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011a56:	440b      	add	r3, r1
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	4413      	add	r3, r2
 8011a5c:	4602      	mov	r2, r0
 8011a5e:	601a      	str	r2, [r3, #0]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 8011a60:	68fa      	ldr	r2, [r7, #12]
 8011a62:	6879      	ldr	r1, [r7, #4]
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f7f9 fc9f 	bl	800b3a8 <mbedtls_mpi_sub_abs>
 8011a6a:	6178      	str	r0, [r7, #20]
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d103      	bne.n	8011a7a <fix_negative+0x46>
    N->s = -1;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f04f 32ff 	mov.w	r2, #4294967295
 8011a78:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 8011a7a:	697b      	ldr	r3, [r7, #20]
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3718      	adds	r7, #24
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}

08011a84 <ecp_mod_p224>:
#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
/*
 * Fast quasi-reduction modulo p224 (FIPS 186-3 D.2.2)
 */
static int ecp_mod_p224( mbedtls_mpi *N )
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b092      	sub	sp, #72	@ 0x48
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
    INIT( 224 );
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011a92:	2300      	movs	r3, #0
 8011a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a96:	23e0      	movs	r3, #224	@ 0xe0
 8011a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a9e:	2308      	movs	r3, #8
 8011aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011aa2:	f107 0308 	add.w	r3, r7, #8
 8011aa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8011aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aaa:	009a      	lsls	r2, r3, #2
 8011aac:	f107 0308 	add.w	r3, r7, #8
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f003 ffb4 	bl	8015a20 <memset>
 8011ab8:	210e      	movs	r1, #14
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f7f8 fc06 	bl	800a2cc <mbedtls_mpi_grow>
 8011ac0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	f040 821f 	bne.w	8011f08 <ecp_mod_p224+0x484>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	689a      	ldr	r2, [r3, #8]
 8011ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	4413      	add	r3, r2
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	637b      	str	r3, [r7, #52]	@ 0x34

    SUB(  7 ); SUB( 11 );               NEXT; // A0 += -A7 - A11
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	689b      	ldr	r3, [r3, #8]
 8011adc:	331c      	adds	r3, #28
 8011ade:	6819      	ldr	r1, [r3, #0]
 8011ae0:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011ae4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7ff ff80 	bl	80119ee <sub32>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	689b      	ldr	r3, [r3, #8]
 8011af2:	332c      	adds	r3, #44	@ 0x2c
 8011af4:	6819      	ldr	r1, [r3, #0]
 8011af6:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011afa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7ff ff75 	bl	80119ee <sub32>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	689a      	ldr	r2, [r3, #8]
 8011b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	4413      	add	r3, r2
 8011b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b10:	601a      	str	r2, [r3, #0]
 8011b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b14:	3301      	adds	r3, #1
 8011b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	689a      	ldr	r2, [r3, #8]
 8011b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	4413      	add	r3, r2
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b26:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011b2a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011b2e:	2300      	movs	r3, #0
 8011b30:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011b34:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	da0b      	bge.n	8011b54 <ecp_mod_p224+0xd0>
 8011b3c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011b40:	425b      	negs	r3, r3
 8011b42:	4619      	mov	r1, r3
 8011b44:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7ff ff4e 	bl	80119ee <sub32>
 8011b52:	e008      	b.n	8011b66 <ecp_mod_p224+0xe2>
 8011b54:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011b58:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b60:	4618      	mov	r0, r3
 8011b62:	f7ff ff21 	bl	80119a8 <add32>
    SUB(  8 ); SUB( 12 );               NEXT; // A1 += -A8 - A12
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	689b      	ldr	r3, [r3, #8]
 8011b6a:	3320      	adds	r3, #32
 8011b6c:	6819      	ldr	r1, [r3, #0]
 8011b6e:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7ff ff39 	bl	80119ee <sub32>
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	689b      	ldr	r3, [r3, #8]
 8011b80:	3330      	adds	r3, #48	@ 0x30
 8011b82:	6819      	ldr	r1, [r3, #0]
 8011b84:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b88:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7ff ff2e 	bl	80119ee <sub32>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	689a      	ldr	r2, [r3, #8]
 8011b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b98:	009b      	lsls	r3, r3, #2
 8011b9a:	4413      	add	r3, r2
 8011b9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b9e:	601a      	str	r2, [r3, #0]
 8011ba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	689a      	ldr	r2, [r3, #8]
 8011baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bac:	009b      	lsls	r3, r3, #2
 8011bae:	4413      	add	r3, r2
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bb4:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011bb8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011bc2:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	da0b      	bge.n	8011be2 <ecp_mod_p224+0x15e>
 8011bca:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011bce:	425b      	negs	r3, r3
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011bd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7ff ff07 	bl	80119ee <sub32>
 8011be0:	e008      	b.n	8011bf4 <ecp_mod_p224+0x170>
 8011be2:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011be6:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011bea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7ff feda 	bl	80119a8 <add32>
    SUB(  9 ); SUB( 13 );               NEXT; // A2 += -A9 - A13
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	689b      	ldr	r3, [r3, #8]
 8011bf8:	3324      	adds	r3, #36	@ 0x24
 8011bfa:	6819      	ldr	r1, [r3, #0]
 8011bfc:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7ff fef2 	bl	80119ee <sub32>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	689b      	ldr	r3, [r3, #8]
 8011c0e:	3334      	adds	r3, #52	@ 0x34
 8011c10:	6819      	ldr	r1, [r3, #0]
 8011c12:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7ff fee7 	bl	80119ee <sub32>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	689a      	ldr	r2, [r3, #8]
 8011c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	4413      	add	r3, r2
 8011c2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011c2c:	601a      	str	r2, [r3, #0]
 8011c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c30:	3301      	adds	r3, #1
 8011c32:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	689a      	ldr	r2, [r3, #8]
 8011c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	4413      	add	r3, r2
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c42:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011c46:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011c50:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	da0b      	bge.n	8011c70 <ecp_mod_p224+0x1ec>
 8011c58:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011c5c:	425b      	negs	r3, r3
 8011c5e:	4619      	mov	r1, r3
 8011c60:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f7ff fec0 	bl	80119ee <sub32>
 8011c6e:	e008      	b.n	8011c82 <ecp_mod_p224+0x1fe>
 8011c70:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011c74:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f7ff fe93 	bl	80119a8 <add32>
    SUB( 10 ); ADD(  7 ); ADD( 11 );    NEXT; // A3 += -A10 + A7 + A11
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	689b      	ldr	r3, [r3, #8]
 8011c86:	3328      	adds	r3, #40	@ 0x28
 8011c88:	6819      	ldr	r1, [r3, #0]
 8011c8a:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7ff feab 	bl	80119ee <sub32>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	689b      	ldr	r3, [r3, #8]
 8011c9c:	331c      	adds	r3, #28
 8011c9e:	6819      	ldr	r1, [r3, #0]
 8011ca0:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011ca4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7ff fe7d 	bl	80119a8 <add32>
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	689b      	ldr	r3, [r3, #8]
 8011cb2:	332c      	adds	r3, #44	@ 0x2c
 8011cb4:	6819      	ldr	r1, [r3, #0]
 8011cb6:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011cba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7ff fe72 	bl	80119a8 <add32>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	689a      	ldr	r2, [r3, #8]
 8011cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cca:	009b      	lsls	r3, r3, #2
 8011ccc:	4413      	add	r3, r2
 8011cce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cd0:	601a      	str	r2, [r3, #0]
 8011cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	689a      	ldr	r2, [r3, #8]
 8011cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	4413      	add	r3, r2
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ce6:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011cea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011cee:	2300      	movs	r3, #0
 8011cf0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011cf4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	da0b      	bge.n	8011d14 <ecp_mod_p224+0x290>
 8011cfc:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011d00:	425b      	negs	r3, r3
 8011d02:	4619      	mov	r1, r3
 8011d04:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d08:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7ff fe6e 	bl	80119ee <sub32>
 8011d12:	e008      	b.n	8011d26 <ecp_mod_p224+0x2a2>
 8011d14:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011d18:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7ff fe41 	bl	80119a8 <add32>
    SUB( 11 ); ADD(  8 ); ADD( 12 );    NEXT; // A4 += -A11 + A8 + A12
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	689b      	ldr	r3, [r3, #8]
 8011d2a:	332c      	adds	r3, #44	@ 0x2c
 8011d2c:	6819      	ldr	r1, [r3, #0]
 8011d2e:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7ff fe59 	bl	80119ee <sub32>
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	689b      	ldr	r3, [r3, #8]
 8011d40:	3320      	adds	r3, #32
 8011d42:	6819      	ldr	r1, [r3, #0]
 8011d44:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7ff fe2b 	bl	80119a8 <add32>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	689b      	ldr	r3, [r3, #8]
 8011d56:	3330      	adds	r3, #48	@ 0x30
 8011d58:	6819      	ldr	r1, [r3, #0]
 8011d5a:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7ff fe20 	bl	80119a8 <add32>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	689a      	ldr	r2, [r3, #8]
 8011d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	4413      	add	r3, r2
 8011d72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d74:	601a      	str	r2, [r3, #0]
 8011d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d78:	3301      	adds	r3, #1
 8011d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	689a      	ldr	r2, [r3, #8]
 8011d80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	4413      	add	r3, r2
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d8a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011d8e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011d92:	2300      	movs	r3, #0
 8011d94:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011d98:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	da0b      	bge.n	8011db8 <ecp_mod_p224+0x334>
 8011da0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011da4:	425b      	negs	r3, r3
 8011da6:	4619      	mov	r1, r3
 8011da8:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011dac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7ff fe1c 	bl	80119ee <sub32>
 8011db6:	e008      	b.n	8011dca <ecp_mod_p224+0x346>
 8011db8:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011dbc:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011dc0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7ff fdef 	bl	80119a8 <add32>
    SUB( 12 ); ADD(  9 ); ADD( 13 );    NEXT; // A5 += -A12 + A9 + A13
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	689b      	ldr	r3, [r3, #8]
 8011dce:	3330      	adds	r3, #48	@ 0x30
 8011dd0:	6819      	ldr	r1, [r3, #0]
 8011dd2:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011dd6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7ff fe07 	bl	80119ee <sub32>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	689b      	ldr	r3, [r3, #8]
 8011de4:	3324      	adds	r3, #36	@ 0x24
 8011de6:	6819      	ldr	r1, [r3, #0]
 8011de8:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011dec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7ff fdd9 	bl	80119a8 <add32>
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	689b      	ldr	r3, [r3, #8]
 8011dfa:	3334      	adds	r3, #52	@ 0x34
 8011dfc:	6819      	ldr	r1, [r3, #0]
 8011dfe:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011e02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7ff fdce 	bl	80119a8 <add32>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	689a      	ldr	r2, [r3, #8]
 8011e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4413      	add	r3, r2
 8011e16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e18:	601a      	str	r2, [r3, #0]
 8011e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	689a      	ldr	r2, [r3, #8]
 8011e24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e26:	009b      	lsls	r3, r3, #2
 8011e28:	4413      	add	r3, r2
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e2e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011e32:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011e36:	2300      	movs	r3, #0
 8011e38:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011e3c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	da0b      	bge.n	8011e5c <ecp_mod_p224+0x3d8>
 8011e44:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011e48:	425b      	negs	r3, r3
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011e50:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7ff fdca 	bl	80119ee <sub32>
 8011e5a:	e008      	b.n	8011e6e <ecp_mod_p224+0x3ea>
 8011e5c:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011e60:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011e64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7ff fd9d 	bl	80119a8 <add32>
    SUB( 13 ); ADD( 10 );               LAST; // A6 += -A13 + A10
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	689b      	ldr	r3, [r3, #8]
 8011e72:	3334      	adds	r3, #52	@ 0x34
 8011e74:	6819      	ldr	r1, [r3, #0]
 8011e76:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011e7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7ff fdb5 	bl	80119ee <sub32>
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	689b      	ldr	r3, [r3, #8]
 8011e88:	3328      	adds	r3, #40	@ 0x28
 8011e8a:	6819      	ldr	r1, [r3, #0]
 8011e8c:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011e90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7ff fd87 	bl	80119a8 <add32>
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	689a      	ldr	r2, [r3, #8]
 8011e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ea0:	009b      	lsls	r3, r3, #2
 8011ea2:	4413      	add	r3, r2
 8011ea4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ea6:	601a      	str	r2, [r3, #0]
 8011ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011eaa:	3301      	adds	r3, #1
 8011eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8011eae:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8011eb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011eb6:	b25b      	sxtb	r3, r3
 8011eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	689a      	ldr	r2, [r3, #8]
 8011ebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ec0:	009b      	lsls	r3, r3, #2
 8011ec2:	4413      	add	r3, r2
 8011ec4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ec6:	601a      	str	r2, [r3, #0]
 8011ec8:	2300      	movs	r3, #0
 8011eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ecc:	e006      	b.n	8011edc <ecp_mod_p224+0x458>
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	689a      	ldr	r2, [r3, #8]
 8011ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ed4:	009b      	lsls	r3, r3, #2
 8011ed6:	4413      	add	r3, r2
 8011ed8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011eda:	601a      	str	r2, [r3, #0]
 8011edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ede:	3301      	adds	r3, #1
 8011ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d3f0      	bcc.n	8011ece <ecp_mod_p224+0x44a>
 8011eec:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	da08      	bge.n	8011f06 <ecp_mod_p224+0x482>
 8011ef4:	f997 103a 	ldrsb.w	r1, [r7, #58]	@ 0x3a
 8011ef8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7ff fd98 	bl	8011a34 <fix_negative>
 8011f04:	e000      	b.n	8011f08 <ecp_mod_p224+0x484>

cleanup:
 8011f06:	bf00      	nop
    return( ret );
 8011f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011f0a:	4618      	mov	r0, r3
 8011f0c:	3748      	adds	r7, #72	@ 0x48
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}

08011f12 <ecp_mod_p256>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 8011f12:	b580      	push	{r7, lr}
 8011f14:	b094      	sub	sp, #80	@ 0x50
 8011f16:	af00      	add	r7, sp, #0
 8011f18:	6078      	str	r0, [r7, #4]
    INIT( 256 );
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011f20:	2300      	movs	r3, #0
 8011f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f2e:	2309      	movs	r3, #9
 8011f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f32:	f107 030c 	add.w	r3, r7, #12
 8011f36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f3a:	009a      	lsls	r2, r3, #2
 8011f3c:	f107 030c 	add.w	r3, r7, #12
 8011f40:	2100      	movs	r1, #0
 8011f42:	4618      	mov	r0, r3
 8011f44:	f003 fd6c 	bl	8015a20 <memset>
 8011f48:	2110      	movs	r1, #16
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f7f8 f9be 	bl	800a2cc <mbedtls_mpi_grow>
 8011f50:	6478      	str	r0, [r7, #68]	@ 0x44
 8011f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	f040 83f2 	bne.w	801273e <ecp_mod_p256+0x82c>
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	689a      	ldr	r2, [r3, #8]
 8011f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	4413      	add	r3, r2
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ADD(  8 ); ADD(  9 );
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	3320      	adds	r3, #32
 8011f6e:	6819      	ldr	r1, [r3, #0]
 8011f70:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f74:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7ff fd15 	bl	80119a8 <add32>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	689b      	ldr	r3, [r3, #8]
 8011f82:	3324      	adds	r3, #36	@ 0x24
 8011f84:	6819      	ldr	r1, [r3, #0]
 8011f86:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f8a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f7ff fd0a 	bl	80119a8 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	689b      	ldr	r3, [r3, #8]
 8011f98:	332c      	adds	r3, #44	@ 0x2c
 8011f9a:	6819      	ldr	r1, [r3, #0]
 8011f9c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011fa0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7ff fd22 	bl	80119ee <sub32>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	689b      	ldr	r3, [r3, #8]
 8011fae:	3330      	adds	r3, #48	@ 0x30
 8011fb0:	6819      	ldr	r1, [r3, #0]
 8011fb2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011fb6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7ff fd17 	bl	80119ee <sub32>
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	689b      	ldr	r3, [r3, #8]
 8011fc4:	3334      	adds	r3, #52	@ 0x34
 8011fc6:	6819      	ldr	r1, [r3, #0]
 8011fc8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011fcc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7ff fd0c 	bl	80119ee <sub32>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	689b      	ldr	r3, [r3, #8]
 8011fda:	3338      	adds	r3, #56	@ 0x38
 8011fdc:	6819      	ldr	r1, [r3, #0]
 8011fde:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011fe2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7ff fd01 	bl	80119ee <sub32>
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	689a      	ldr	r2, [r3, #8]
 8011ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ff2:	009b      	lsls	r3, r3, #2
 8011ff4:	4413      	add	r3, r2
 8011ff6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011ff8:	601a      	str	r2, [r3, #0]
 8011ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	689a      	ldr	r2, [r3, #8]
 8012004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	4413      	add	r3, r2
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801200e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8012012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012016:	2300      	movs	r3, #0
 8012018:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801201c:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012020:	2b00      	cmp	r3, #0
 8012022:	da0b      	bge.n	801203c <ecp_mod_p256+0x12a>
 8012024:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012028:	425b      	negs	r3, r3
 801202a:	4619      	mov	r1, r3
 801202c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012030:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012034:	4618      	mov	r0, r3
 8012036:	f7ff fcda 	bl	80119ee <sub32>
 801203a:	e008      	b.n	801204e <ecp_mod_p256+0x13c>
 801203c:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8012040:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012044:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012048:	4618      	mov	r0, r3
 801204a:	f7ff fcad 	bl	80119a8 <add32>

    ADD(  9 ); ADD( 10 );
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	689b      	ldr	r3, [r3, #8]
 8012052:	3324      	adds	r3, #36	@ 0x24
 8012054:	6819      	ldr	r1, [r3, #0]
 8012056:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801205a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801205e:	4618      	mov	r0, r3
 8012060:	f7ff fca2 	bl	80119a8 <add32>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	689b      	ldr	r3, [r3, #8]
 8012068:	3328      	adds	r3, #40	@ 0x28
 801206a:	6819      	ldr	r1, [r3, #0]
 801206c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012070:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012074:	4618      	mov	r0, r3
 8012076:	f7ff fc97 	bl	80119a8 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	689b      	ldr	r3, [r3, #8]
 801207e:	3330      	adds	r3, #48	@ 0x30
 8012080:	6819      	ldr	r1, [r3, #0]
 8012082:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012086:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801208a:	4618      	mov	r0, r3
 801208c:	f7ff fcaf 	bl	80119ee <sub32>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	689b      	ldr	r3, [r3, #8]
 8012094:	3334      	adds	r3, #52	@ 0x34
 8012096:	6819      	ldr	r1, [r3, #0]
 8012098:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801209c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7ff fca4 	bl	80119ee <sub32>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	689b      	ldr	r3, [r3, #8]
 80120aa:	3338      	adds	r3, #56	@ 0x38
 80120ac:	6819      	ldr	r1, [r3, #0]
 80120ae:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80120b2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7ff fc99 	bl	80119ee <sub32>
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	689b      	ldr	r3, [r3, #8]
 80120c0:	333c      	adds	r3, #60	@ 0x3c
 80120c2:	6819      	ldr	r1, [r3, #0]
 80120c4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80120c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7ff fc8e 	bl	80119ee <sub32>
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	689a      	ldr	r2, [r3, #8]
 80120d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120d8:	009b      	lsls	r3, r3, #2
 80120da:	4413      	add	r3, r2
 80120dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80120de:	601a      	str	r2, [r3, #0]
 80120e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120e2:	3301      	adds	r3, #1
 80120e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	689a      	ldr	r2, [r3, #8]
 80120ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	4413      	add	r3, r2
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80120f4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80120f8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120fc:	2300      	movs	r3, #0
 80120fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012102:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012106:	2b00      	cmp	r3, #0
 8012108:	da0b      	bge.n	8012122 <ecp_mod_p256+0x210>
 801210a:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 801210e:	425b      	negs	r3, r3
 8012110:	4619      	mov	r1, r3
 8012112:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012116:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801211a:	4618      	mov	r0, r3
 801211c:	f7ff fc67 	bl	80119ee <sub32>
 8012120:	e008      	b.n	8012134 <ecp_mod_p256+0x222>
 8012122:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8012126:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801212a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801212e:	4618      	mov	r0, r3
 8012130:	f7ff fc3a 	bl	80119a8 <add32>

    ADD( 10 ); ADD( 11 );
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	689b      	ldr	r3, [r3, #8]
 8012138:	3328      	adds	r3, #40	@ 0x28
 801213a:	6819      	ldr	r1, [r3, #0]
 801213c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012140:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012144:	4618      	mov	r0, r3
 8012146:	f7ff fc2f 	bl	80119a8 <add32>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	689b      	ldr	r3, [r3, #8]
 801214e:	332c      	adds	r3, #44	@ 0x2c
 8012150:	6819      	ldr	r1, [r3, #0]
 8012152:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012156:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801215a:	4618      	mov	r0, r3
 801215c:	f7ff fc24 	bl	80119a8 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	689b      	ldr	r3, [r3, #8]
 8012164:	3334      	adds	r3, #52	@ 0x34
 8012166:	6819      	ldr	r1, [r3, #0]
 8012168:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801216c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012170:	4618      	mov	r0, r3
 8012172:	f7ff fc3c 	bl	80119ee <sub32>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	689b      	ldr	r3, [r3, #8]
 801217a:	3338      	adds	r3, #56	@ 0x38
 801217c:	6819      	ldr	r1, [r3, #0]
 801217e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012182:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012186:	4618      	mov	r0, r3
 8012188:	f7ff fc31 	bl	80119ee <sub32>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	689b      	ldr	r3, [r3, #8]
 8012190:	333c      	adds	r3, #60	@ 0x3c
 8012192:	6819      	ldr	r1, [r3, #0]
 8012194:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012198:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801219c:	4618      	mov	r0, r3
 801219e:	f7ff fc26 	bl	80119ee <sub32>
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	689a      	ldr	r2, [r3, #8]
 80121a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121a8:	009b      	lsls	r3, r3, #2
 80121aa:	4413      	add	r3, r2
 80121ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80121ae:	601a      	str	r2, [r3, #0]
 80121b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121b2:	3301      	adds	r3, #1
 80121b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	689a      	ldr	r2, [r3, #8]
 80121ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121bc:	009b      	lsls	r3, r3, #2
 80121be:	4413      	add	r3, r2
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80121c4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80121c8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80121cc:	2300      	movs	r3, #0
 80121ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80121d2:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	da0b      	bge.n	80121f2 <ecp_mod_p256+0x2e0>
 80121da:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80121de:	425b      	negs	r3, r3
 80121e0:	4619      	mov	r1, r3
 80121e2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7ff fbff 	bl	80119ee <sub32>
 80121f0:	e008      	b.n	8012204 <ecp_mod_p256+0x2f2>
 80121f2:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80121f6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121fe:	4618      	mov	r0, r3
 8012200:	f7ff fbd2 	bl	80119a8 <add32>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	689b      	ldr	r3, [r3, #8]
 8012208:	332c      	adds	r3, #44	@ 0x2c
 801220a:	6819      	ldr	r1, [r3, #0]
 801220c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012210:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012214:	4618      	mov	r0, r3
 8012216:	f7ff fbc7 	bl	80119a8 <add32>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	689b      	ldr	r3, [r3, #8]
 801221e:	332c      	adds	r3, #44	@ 0x2c
 8012220:	6819      	ldr	r1, [r3, #0]
 8012222:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012226:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801222a:	4618      	mov	r0, r3
 801222c:	f7ff fbbc 	bl	80119a8 <add32>
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	689b      	ldr	r3, [r3, #8]
 8012234:	3330      	adds	r3, #48	@ 0x30
 8012236:	6819      	ldr	r1, [r3, #0]
 8012238:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801223c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012240:	4618      	mov	r0, r3
 8012242:	f7ff fbb1 	bl	80119a8 <add32>
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	689b      	ldr	r3, [r3, #8]
 801224a:	3330      	adds	r3, #48	@ 0x30
 801224c:	6819      	ldr	r1, [r3, #0]
 801224e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012252:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012256:	4618      	mov	r0, r3
 8012258:	f7ff fba6 	bl	80119a8 <add32>
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	689b      	ldr	r3, [r3, #8]
 8012260:	3334      	adds	r3, #52	@ 0x34
 8012262:	6819      	ldr	r1, [r3, #0]
 8012264:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012268:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801226c:	4618      	mov	r0, r3
 801226e:	f7ff fb9b 	bl	80119a8 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	689b      	ldr	r3, [r3, #8]
 8012276:	333c      	adds	r3, #60	@ 0x3c
 8012278:	6819      	ldr	r1, [r3, #0]
 801227a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801227e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012282:	4618      	mov	r0, r3
 8012284:	f7ff fbb3 	bl	80119ee <sub32>
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	689b      	ldr	r3, [r3, #8]
 801228c:	3320      	adds	r3, #32
 801228e:	6819      	ldr	r1, [r3, #0]
 8012290:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012294:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012298:	4618      	mov	r0, r3
 801229a:	f7ff fba8 	bl	80119ee <sub32>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	689b      	ldr	r3, [r3, #8]
 80122a2:	3324      	adds	r3, #36	@ 0x24
 80122a4:	6819      	ldr	r1, [r3, #0]
 80122a6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7ff fb9d 	bl	80119ee <sub32>
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	689a      	ldr	r2, [r3, #8]
 80122b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122ba:	009b      	lsls	r3, r3, #2
 80122bc:	4413      	add	r3, r2
 80122be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80122c0:	601a      	str	r2, [r3, #0]
 80122c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122c4:	3301      	adds	r3, #1
 80122c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	689a      	ldr	r2, [r3, #8]
 80122cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122ce:	009b      	lsls	r3, r3, #2
 80122d0:	4413      	add	r3, r2
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80122d6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80122da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80122de:	2300      	movs	r3, #0
 80122e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80122e4:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	da0b      	bge.n	8012304 <ecp_mod_p256+0x3f2>
 80122ec:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80122f0:	425b      	negs	r3, r3
 80122f2:	4619      	mov	r1, r3
 80122f4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122fc:	4618      	mov	r0, r3
 80122fe:	f7ff fb76 	bl	80119ee <sub32>
 8012302:	e008      	b.n	8012316 <ecp_mod_p256+0x404>
 8012304:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8012308:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801230c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012310:	4618      	mov	r0, r3
 8012312:	f7ff fb49 	bl	80119a8 <add32>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	689b      	ldr	r3, [r3, #8]
 801231a:	3330      	adds	r3, #48	@ 0x30
 801231c:	6819      	ldr	r1, [r3, #0]
 801231e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012322:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012326:	4618      	mov	r0, r3
 8012328:	f7ff fb3e 	bl	80119a8 <add32>
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	689b      	ldr	r3, [r3, #8]
 8012330:	3330      	adds	r3, #48	@ 0x30
 8012332:	6819      	ldr	r1, [r3, #0]
 8012334:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012338:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801233c:	4618      	mov	r0, r3
 801233e:	f7ff fb33 	bl	80119a8 <add32>
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	689b      	ldr	r3, [r3, #8]
 8012346:	3334      	adds	r3, #52	@ 0x34
 8012348:	6819      	ldr	r1, [r3, #0]
 801234a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801234e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012352:	4618      	mov	r0, r3
 8012354:	f7ff fb28 	bl	80119a8 <add32>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	3334      	adds	r3, #52	@ 0x34
 801235e:	6819      	ldr	r1, [r3, #0]
 8012360:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012364:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012368:	4618      	mov	r0, r3
 801236a:	f7ff fb1d 	bl	80119a8 <add32>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	689b      	ldr	r3, [r3, #8]
 8012372:	3338      	adds	r3, #56	@ 0x38
 8012374:	6819      	ldr	r1, [r3, #0]
 8012376:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801237a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801237e:	4618      	mov	r0, r3
 8012380:	f7ff fb12 	bl	80119a8 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	689b      	ldr	r3, [r3, #8]
 8012388:	3324      	adds	r3, #36	@ 0x24
 801238a:	6819      	ldr	r1, [r3, #0]
 801238c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012390:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012394:	4618      	mov	r0, r3
 8012396:	f7ff fb2a 	bl	80119ee <sub32>
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	3328      	adds	r3, #40	@ 0x28
 80123a0:	6819      	ldr	r1, [r3, #0]
 80123a2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7ff fb1f 	bl	80119ee <sub32>
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	689a      	ldr	r2, [r3, #8]
 80123b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	4413      	add	r3, r2
 80123ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80123bc:	601a      	str	r2, [r3, #0]
 80123be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123c0:	3301      	adds	r3, #1
 80123c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	689a      	ldr	r2, [r3, #8]
 80123c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123ca:	009b      	lsls	r3, r3, #2
 80123cc:	4413      	add	r3, r2
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80123d2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80123d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80123da:	2300      	movs	r3, #0
 80123dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80123e0:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	da0b      	bge.n	8012400 <ecp_mod_p256+0x4ee>
 80123e8:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80123ec:	425b      	negs	r3, r3
 80123ee:	4619      	mov	r1, r3
 80123f0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7ff faf8 	bl	80119ee <sub32>
 80123fe:	e008      	b.n	8012412 <ecp_mod_p256+0x500>
 8012400:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8012404:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012408:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801240c:	4618      	mov	r0, r3
 801240e:	f7ff facb 	bl	80119a8 <add32>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	689b      	ldr	r3, [r3, #8]
 8012416:	3334      	adds	r3, #52	@ 0x34
 8012418:	6819      	ldr	r1, [r3, #0]
 801241a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801241e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff fac0 	bl	80119a8 <add32>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	689b      	ldr	r3, [r3, #8]
 801242c:	3334      	adds	r3, #52	@ 0x34
 801242e:	6819      	ldr	r1, [r3, #0]
 8012430:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012434:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012438:	4618      	mov	r0, r3
 801243a:	f7ff fab5 	bl	80119a8 <add32>
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	689b      	ldr	r3, [r3, #8]
 8012442:	3338      	adds	r3, #56	@ 0x38
 8012444:	6819      	ldr	r1, [r3, #0]
 8012446:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801244a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801244e:	4618      	mov	r0, r3
 8012450:	f7ff faaa 	bl	80119a8 <add32>
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	689b      	ldr	r3, [r3, #8]
 8012458:	3338      	adds	r3, #56	@ 0x38
 801245a:	6819      	ldr	r1, [r3, #0]
 801245c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012460:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012464:	4618      	mov	r0, r3
 8012466:	f7ff fa9f 	bl	80119a8 <add32>
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	689b      	ldr	r3, [r3, #8]
 801246e:	333c      	adds	r3, #60	@ 0x3c
 8012470:	6819      	ldr	r1, [r3, #0]
 8012472:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012476:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801247a:	4618      	mov	r0, r3
 801247c:	f7ff fa94 	bl	80119a8 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	689b      	ldr	r3, [r3, #8]
 8012484:	3328      	adds	r3, #40	@ 0x28
 8012486:	6819      	ldr	r1, [r3, #0]
 8012488:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801248c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012490:	4618      	mov	r0, r3
 8012492:	f7ff faac 	bl	80119ee <sub32>
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	332c      	adds	r3, #44	@ 0x2c
 801249c:	6819      	ldr	r1, [r3, #0]
 801249e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7ff faa1 	bl	80119ee <sub32>
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	689a      	ldr	r2, [r3, #8]
 80124b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	4413      	add	r3, r2
 80124b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80124b8:	601a      	str	r2, [r3, #0]
 80124ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124bc:	3301      	adds	r3, #1
 80124be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	689a      	ldr	r2, [r3, #8]
 80124c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124c6:	009b      	lsls	r3, r3, #2
 80124c8:	4413      	add	r3, r2
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80124ce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80124d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80124d6:	2300      	movs	r3, #0
 80124d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80124dc:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	da0b      	bge.n	80124fc <ecp_mod_p256+0x5ea>
 80124e4:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80124e8:	425b      	negs	r3, r3
 80124ea:	4619      	mov	r1, r3
 80124ec:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124f4:	4618      	mov	r0, r3
 80124f6:	f7ff fa7a 	bl	80119ee <sub32>
 80124fa:	e008      	b.n	801250e <ecp_mod_p256+0x5fc>
 80124fc:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8012500:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012504:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012508:	4618      	mov	r0, r3
 801250a:	f7ff fa4d 	bl	80119a8 <add32>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	689b      	ldr	r3, [r3, #8]
 8012512:	3338      	adds	r3, #56	@ 0x38
 8012514:	6819      	ldr	r1, [r3, #0]
 8012516:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801251a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801251e:	4618      	mov	r0, r3
 8012520:	f7ff fa42 	bl	80119a8 <add32>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	689b      	ldr	r3, [r3, #8]
 8012528:	3338      	adds	r3, #56	@ 0x38
 801252a:	6819      	ldr	r1, [r3, #0]
 801252c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012530:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012534:	4618      	mov	r0, r3
 8012536:	f7ff fa37 	bl	80119a8 <add32>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	689b      	ldr	r3, [r3, #8]
 801253e:	333c      	adds	r3, #60	@ 0x3c
 8012540:	6819      	ldr	r1, [r3, #0]
 8012542:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012546:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801254a:	4618      	mov	r0, r3
 801254c:	f7ff fa2c 	bl	80119a8 <add32>
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	689b      	ldr	r3, [r3, #8]
 8012554:	333c      	adds	r3, #60	@ 0x3c
 8012556:	6819      	ldr	r1, [r3, #0]
 8012558:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801255c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012560:	4618      	mov	r0, r3
 8012562:	f7ff fa21 	bl	80119a8 <add32>
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	689b      	ldr	r3, [r3, #8]
 801256a:	3338      	adds	r3, #56	@ 0x38
 801256c:	6819      	ldr	r1, [r3, #0]
 801256e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012572:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012576:	4618      	mov	r0, r3
 8012578:	f7ff fa16 	bl	80119a8 <add32>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	689b      	ldr	r3, [r3, #8]
 8012580:	3334      	adds	r3, #52	@ 0x34
 8012582:	6819      	ldr	r1, [r3, #0]
 8012584:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012588:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801258c:	4618      	mov	r0, r3
 801258e:	f7ff fa0b 	bl	80119a8 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	689b      	ldr	r3, [r3, #8]
 8012596:	3320      	adds	r3, #32
 8012598:	6819      	ldr	r1, [r3, #0]
 801259a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801259e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff fa23 	bl	80119ee <sub32>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	689b      	ldr	r3, [r3, #8]
 80125ac:	3324      	adds	r3, #36	@ 0x24
 80125ae:	6819      	ldr	r1, [r3, #0]
 80125b0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80125b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7ff fa18 	bl	80119ee <sub32>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	689a      	ldr	r2, [r3, #8]
 80125c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80125c4:	009b      	lsls	r3, r3, #2
 80125c6:	4413      	add	r3, r2
 80125c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80125ca:	601a      	str	r2, [r3, #0]
 80125cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80125ce:	3301      	adds	r3, #1
 80125d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	689a      	ldr	r2, [r3, #8]
 80125d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80125d8:	009b      	lsls	r3, r3, #2
 80125da:	4413      	add	r3, r2
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80125e0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80125e4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125e8:	2300      	movs	r3, #0
 80125ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80125ee:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	da0b      	bge.n	801260e <ecp_mod_p256+0x6fc>
 80125f6:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80125fa:	425b      	negs	r3, r3
 80125fc:	4619      	mov	r1, r3
 80125fe:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012602:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012606:	4618      	mov	r0, r3
 8012608:	f7ff f9f1 	bl	80119ee <sub32>
 801260c:	e008      	b.n	8012620 <ecp_mod_p256+0x70e>
 801260e:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8012612:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012616:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801261a:	4618      	mov	r0, r3
 801261c:	f7ff f9c4 	bl	80119a8 <add32>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	689b      	ldr	r3, [r3, #8]
 8012624:	333c      	adds	r3, #60	@ 0x3c
 8012626:	6819      	ldr	r1, [r3, #0]
 8012628:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801262c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012630:	4618      	mov	r0, r3
 8012632:	f7ff f9b9 	bl	80119a8 <add32>
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	689b      	ldr	r3, [r3, #8]
 801263a:	333c      	adds	r3, #60	@ 0x3c
 801263c:	6819      	ldr	r1, [r3, #0]
 801263e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012642:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012646:	4618      	mov	r0, r3
 8012648:	f7ff f9ae 	bl	80119a8 <add32>
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	689b      	ldr	r3, [r3, #8]
 8012650:	333c      	adds	r3, #60	@ 0x3c
 8012652:	6819      	ldr	r1, [r3, #0]
 8012654:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012658:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801265c:	4618      	mov	r0, r3
 801265e:	f7ff f9a3 	bl	80119a8 <add32>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	689b      	ldr	r3, [r3, #8]
 8012666:	3320      	adds	r3, #32
 8012668:	6819      	ldr	r1, [r3, #0]
 801266a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801266e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012672:	4618      	mov	r0, r3
 8012674:	f7ff f998 	bl	80119a8 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	689b      	ldr	r3, [r3, #8]
 801267c:	3328      	adds	r3, #40	@ 0x28
 801267e:	6819      	ldr	r1, [r3, #0]
 8012680:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012684:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012688:	4618      	mov	r0, r3
 801268a:	f7ff f9b0 	bl	80119ee <sub32>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	689b      	ldr	r3, [r3, #8]
 8012692:	332c      	adds	r3, #44	@ 0x2c
 8012694:	6819      	ldr	r1, [r3, #0]
 8012696:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801269a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801269e:	4618      	mov	r0, r3
 80126a0:	f7ff f9a5 	bl	80119ee <sub32>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	3330      	adds	r3, #48	@ 0x30
 80126aa:	6819      	ldr	r1, [r3, #0]
 80126ac:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80126b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7ff f99a 	bl	80119ee <sub32>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	3334      	adds	r3, #52	@ 0x34
 80126c0:	6819      	ldr	r1, [r3, #0]
 80126c2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80126c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7ff f98f 	bl	80119ee <sub32>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	689a      	ldr	r2, [r3, #8]
 80126d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	4413      	add	r3, r2
 80126da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80126dc:	601a      	str	r2, [r3, #0]
 80126de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126e0:	3301      	adds	r3, #1
 80126e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80126e4:	f997 3042 	ldrsb.w	r3, [r7, #66]	@ 0x42
 80126e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80126ec:	b25b      	sxtb	r3, r3
 80126ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	689a      	ldr	r2, [r3, #8]
 80126f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126f6:	009b      	lsls	r3, r3, #2
 80126f8:	4413      	add	r3, r2
 80126fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80126fc:	601a      	str	r2, [r3, #0]
 80126fe:	2300      	movs	r3, #0
 8012700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012702:	e006      	b.n	8012712 <ecp_mod_p256+0x800>
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	689a      	ldr	r2, [r3, #8]
 8012708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801270a:	009b      	lsls	r3, r3, #2
 801270c:	4413      	add	r3, r2
 801270e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012710:	601a      	str	r2, [r3, #0]
 8012712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012714:	3301      	adds	r3, #1
 8012716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	685b      	ldr	r3, [r3, #4]
 801271c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801271e:	429a      	cmp	r2, r3
 8012720:	d3f0      	bcc.n	8012704 <ecp_mod_p256+0x7f2>
 8012722:	f997 3042 	ldrsb.w	r3, [r7, #66]	@ 0x42
 8012726:	2b00      	cmp	r3, #0
 8012728:	da08      	bge.n	801273c <ecp_mod_p256+0x82a>
 801272a:	f997 1042 	ldrsb.w	r1, [r7, #66]	@ 0x42
 801272e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f7ff f97d 	bl	8011a34 <fix_negative>
 801273a:	e000      	b.n	801273e <ecp_mod_p256+0x82c>

cleanup:
 801273c:	bf00      	nop
    return( ret );
 801273e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8012740:	4618      	mov	r0, r3
 8012742:	3750      	adds	r7, #80	@ 0x50
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}

08012748 <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b098      	sub	sp, #96	@ 0x60
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
    INIT( 384 );
 8012750:	2300      	movs	r3, #0
 8012752:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012756:	2300      	movs	r3, #0
 8012758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801275a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801275e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012760:	2301      	movs	r3, #1
 8012762:	643b      	str	r3, [r7, #64]	@ 0x40
 8012764:	230d      	movs	r3, #13
 8012766:	647b      	str	r3, [r7, #68]	@ 0x44
 8012768:	f107 030c 	add.w	r3, r7, #12
 801276c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801276e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012770:	009a      	lsls	r2, r3, #2
 8012772:	f107 030c 	add.w	r3, r7, #12
 8012776:	2100      	movs	r1, #0
 8012778:	4618      	mov	r0, r3
 801277a:	f003 f951 	bl	8015a20 <memset>
 801277e:	2118      	movs	r1, #24
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f7f7 fda3 	bl	800a2cc <mbedtls_mpi_grow>
 8012786:	6578      	str	r0, [r7, #84]	@ 0x54
 8012788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801278a:	2b00      	cmp	r3, #0
 801278c:	f040 852f 	bne.w	80131ee <ecp_mod_p384+0xaa6>
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	689a      	ldr	r2, [r3, #8]
 8012794:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012796:	009b      	lsls	r3, r3, #2
 8012798:	4413      	add	r3, r2
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	689b      	ldr	r3, [r3, #8]
 80127a2:	3330      	adds	r3, #48	@ 0x30
 80127a4:	6819      	ldr	r1, [r3, #0]
 80127a6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7ff f8fa 	bl	80119a8 <add32>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	689b      	ldr	r3, [r3, #8]
 80127b8:	3354      	adds	r3, #84	@ 0x54
 80127ba:	6819      	ldr	r1, [r3, #0]
 80127bc:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7ff f8ef 	bl	80119a8 <add32>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	689b      	ldr	r3, [r3, #8]
 80127ce:	3350      	adds	r3, #80	@ 0x50
 80127d0:	6819      	ldr	r1, [r3, #0]
 80127d2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff f8e4 	bl	80119a8 <add32>
    SUB( 23 );                                              NEXT; // A0
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	689b      	ldr	r3, [r3, #8]
 80127e4:	335c      	adds	r3, #92	@ 0x5c
 80127e6:	6819      	ldr	r1, [r3, #0]
 80127e8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7ff f8fc 	bl	80119ee <sub32>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	689a      	ldr	r2, [r3, #8]
 80127fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127fc:	009b      	lsls	r3, r3, #2
 80127fe:	4413      	add	r3, r2
 8012800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012802:	601a      	str	r2, [r3, #0]
 8012804:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012806:	3301      	adds	r3, #1
 8012808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	689a      	ldr	r2, [r3, #8]
 801280e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012810:	009b      	lsls	r3, r3, #2
 8012812:	4413      	add	r3, r2
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012818:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 801281c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012820:	2300      	movs	r3, #0
 8012822:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012826:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 801282a:	2b00      	cmp	r3, #0
 801282c:	da0b      	bge.n	8012846 <ecp_mod_p384+0xfe>
 801282e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012832:	425b      	negs	r3, r3
 8012834:	4619      	mov	r1, r3
 8012836:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801283a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801283e:	4618      	mov	r0, r3
 8012840:	f7ff f8d5 	bl	80119ee <sub32>
 8012844:	e008      	b.n	8012858 <ecp_mod_p384+0x110>
 8012846:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 801284a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801284e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012852:	4618      	mov	r0, r3
 8012854:	f7ff f8a8 	bl	80119a8 <add32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	689b      	ldr	r3, [r3, #8]
 801285c:	3334      	adds	r3, #52	@ 0x34
 801285e:	6819      	ldr	r1, [r3, #0]
 8012860:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012864:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012868:	4618      	mov	r0, r3
 801286a:	f7ff f89d 	bl	80119a8 <add32>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	689b      	ldr	r3, [r3, #8]
 8012872:	3358      	adds	r3, #88	@ 0x58
 8012874:	6819      	ldr	r1, [r3, #0]
 8012876:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801287a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801287e:	4618      	mov	r0, r3
 8012880:	f7ff f892 	bl	80119a8 <add32>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	689b      	ldr	r3, [r3, #8]
 8012888:	335c      	adds	r3, #92	@ 0x5c
 801288a:	6819      	ldr	r1, [r3, #0]
 801288c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012890:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012894:	4618      	mov	r0, r3
 8012896:	f7ff f887 	bl	80119a8 <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	689b      	ldr	r3, [r3, #8]
 801289e:	3330      	adds	r3, #48	@ 0x30
 80128a0:	6819      	ldr	r1, [r3, #0]
 80128a2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80128a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7ff f89f 	bl	80119ee <sub32>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	689b      	ldr	r3, [r3, #8]
 80128b4:	3350      	adds	r3, #80	@ 0x50
 80128b6:	6819      	ldr	r1, [r3, #0]
 80128b8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80128bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7ff f894 	bl	80119ee <sub32>
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	689a      	ldr	r2, [r3, #8]
 80128ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80128cc:	009b      	lsls	r3, r3, #2
 80128ce:	4413      	add	r3, r2
 80128d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80128d2:	601a      	str	r2, [r3, #0]
 80128d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80128d6:	3301      	adds	r3, #1
 80128d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	689a      	ldr	r2, [r3, #8]
 80128de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	4413      	add	r3, r2
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128e8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80128ec:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80128f0:	2300      	movs	r3, #0
 80128f2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80128f6:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	da0b      	bge.n	8012916 <ecp_mod_p384+0x1ce>
 80128fe:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012902:	425b      	negs	r3, r3
 8012904:	4619      	mov	r1, r3
 8012906:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801290a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801290e:	4618      	mov	r0, r3
 8012910:	f7ff f86d 	bl	80119ee <sub32>
 8012914:	e008      	b.n	8012928 <ecp_mod_p384+0x1e0>
 8012916:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 801291a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801291e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012922:	4618      	mov	r0, r3
 8012924:	f7ff f840 	bl	80119a8 <add32>

    ADD( 14 ); ADD( 23 );
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	689b      	ldr	r3, [r3, #8]
 801292c:	3338      	adds	r3, #56	@ 0x38
 801292e:	6819      	ldr	r1, [r3, #0]
 8012930:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012934:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012938:	4618      	mov	r0, r3
 801293a:	f7ff f835 	bl	80119a8 <add32>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	689b      	ldr	r3, [r3, #8]
 8012942:	335c      	adds	r3, #92	@ 0x5c
 8012944:	6819      	ldr	r1, [r3, #0]
 8012946:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801294a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801294e:	4618      	mov	r0, r3
 8012950:	f7ff f82a 	bl	80119a8 <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	3334      	adds	r3, #52	@ 0x34
 801295a:	6819      	ldr	r1, [r3, #0]
 801295c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012960:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012964:	4618      	mov	r0, r3
 8012966:	f7ff f842 	bl	80119ee <sub32>
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	689b      	ldr	r3, [r3, #8]
 801296e:	3354      	adds	r3, #84	@ 0x54
 8012970:	6819      	ldr	r1, [r3, #0]
 8012972:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012976:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801297a:	4618      	mov	r0, r3
 801297c:	f7ff f837 	bl	80119ee <sub32>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	689a      	ldr	r2, [r3, #8]
 8012984:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012986:	009b      	lsls	r3, r3, #2
 8012988:	4413      	add	r3, r2
 801298a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801298c:	601a      	str	r2, [r3, #0]
 801298e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012990:	3301      	adds	r3, #1
 8012992:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	689a      	ldr	r2, [r3, #8]
 8012998:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801299a:	009b      	lsls	r3, r3, #2
 801299c:	4413      	add	r3, r2
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80129a2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80129a6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80129aa:	2300      	movs	r3, #0
 80129ac:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80129b0:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	da0b      	bge.n	80129d0 <ecp_mod_p384+0x288>
 80129b8:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80129bc:	425b      	negs	r3, r3
 80129be:	4619      	mov	r1, r3
 80129c0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80129c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80129c8:	4618      	mov	r0, r3
 80129ca:	f7ff f810 	bl	80119ee <sub32>
 80129ce:	e008      	b.n	80129e2 <ecp_mod_p384+0x29a>
 80129d0:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 80129d4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80129d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80129dc:	4618      	mov	r0, r3
 80129de:	f7fe ffe3 	bl	80119a8 <add32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	689b      	ldr	r3, [r3, #8]
 80129e6:	333c      	adds	r3, #60	@ 0x3c
 80129e8:	6819      	ldr	r1, [r3, #0]
 80129ea:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80129ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fe ffd8 	bl	80119a8 <add32>
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	689b      	ldr	r3, [r3, #8]
 80129fc:	3330      	adds	r3, #48	@ 0x30
 80129fe:	6819      	ldr	r1, [r3, #0]
 8012a00:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f7fe ffcd 	bl	80119a8 <add32>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	689b      	ldr	r3, [r3, #8]
 8012a12:	3350      	adds	r3, #80	@ 0x50
 8012a14:	6819      	ldr	r1, [r3, #0]
 8012a16:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7fe ffc2 	bl	80119a8 <add32>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	3354      	adds	r3, #84	@ 0x54
 8012a2a:	6819      	ldr	r1, [r3, #0]
 8012a2c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a30:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a34:	4618      	mov	r0, r3
 8012a36:	f7fe ffb7 	bl	80119a8 <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	689b      	ldr	r3, [r3, #8]
 8012a3e:	3338      	adds	r3, #56	@ 0x38
 8012a40:	6819      	ldr	r1, [r3, #0]
 8012a42:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fe ffcf 	bl	80119ee <sub32>
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	689b      	ldr	r3, [r3, #8]
 8012a54:	3358      	adds	r3, #88	@ 0x58
 8012a56:	6819      	ldr	r1, [r3, #0]
 8012a58:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7fe ffc4 	bl	80119ee <sub32>
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	689b      	ldr	r3, [r3, #8]
 8012a6a:	335c      	adds	r3, #92	@ 0x5c
 8012a6c:	6819      	ldr	r1, [r3, #0]
 8012a6e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a72:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7fe ffb9 	bl	80119ee <sub32>
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	689a      	ldr	r2, [r3, #8]
 8012a80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a82:	009b      	lsls	r3, r3, #2
 8012a84:	4413      	add	r3, r2
 8012a86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012a88:	601a      	str	r2, [r3, #0]
 8012a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	689a      	ldr	r2, [r3, #8]
 8012a94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	4413      	add	r3, r2
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012a9e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012aa2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012aac:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	da0b      	bge.n	8012acc <ecp_mod_p384+0x384>
 8012ab4:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012ab8:	425b      	negs	r3, r3
 8012aba:	4619      	mov	r1, r3
 8012abc:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ac0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7fe ff92 	bl	80119ee <sub32>
 8012aca:	e008      	b.n	8012ade <ecp_mod_p384+0x396>
 8012acc:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012ad0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ad4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7fe ff65 	bl	80119a8 <add32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	689b      	ldr	r3, [r3, #8]
 8012ae2:	3354      	adds	r3, #84	@ 0x54
 8012ae4:	6819      	ldr	r1, [r3, #0]
 8012ae6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012aea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7fe ff5a 	bl	80119a8 <add32>
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	689b      	ldr	r3, [r3, #8]
 8012af8:	3354      	adds	r3, #84	@ 0x54
 8012afa:	6819      	ldr	r1, [r3, #0]
 8012afc:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7fe ff4f 	bl	80119a8 <add32>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	689b      	ldr	r3, [r3, #8]
 8012b0e:	3340      	adds	r3, #64	@ 0x40
 8012b10:	6819      	ldr	r1, [r3, #0]
 8012b12:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fe ff44 	bl	80119a8 <add32>
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	689b      	ldr	r3, [r3, #8]
 8012b24:	3334      	adds	r3, #52	@ 0x34
 8012b26:	6819      	ldr	r1, [r3, #0]
 8012b28:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fe ff39 	bl	80119a8 <add32>
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	689b      	ldr	r3, [r3, #8]
 8012b3a:	3330      	adds	r3, #48	@ 0x30
 8012b3c:	6819      	ldr	r1, [r3, #0]
 8012b3e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b42:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7fe ff2e 	bl	80119a8 <add32>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	689b      	ldr	r3, [r3, #8]
 8012b50:	3350      	adds	r3, #80	@ 0x50
 8012b52:	6819      	ldr	r1, [r3, #0]
 8012b54:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b58:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7fe ff23 	bl	80119a8 <add32>
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	689b      	ldr	r3, [r3, #8]
 8012b66:	3358      	adds	r3, #88	@ 0x58
 8012b68:	6819      	ldr	r1, [r3, #0]
 8012b6a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7fe ff18 	bl	80119a8 <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	689b      	ldr	r3, [r3, #8]
 8012b7c:	333c      	adds	r3, #60	@ 0x3c
 8012b7e:	6819      	ldr	r1, [r3, #0]
 8012b80:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b84:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7fe ff30 	bl	80119ee <sub32>
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	689b      	ldr	r3, [r3, #8]
 8012b92:	335c      	adds	r3, #92	@ 0x5c
 8012b94:	6819      	ldr	r1, [r3, #0]
 8012b96:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b9a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7fe ff25 	bl	80119ee <sub32>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	689b      	ldr	r3, [r3, #8]
 8012ba8:	335c      	adds	r3, #92	@ 0x5c
 8012baa:	6819      	ldr	r1, [r3, #0]
 8012bac:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012bb0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fe ff1a 	bl	80119ee <sub32>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	689a      	ldr	r2, [r3, #8]
 8012bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012bc0:	009b      	lsls	r3, r3, #2
 8012bc2:	4413      	add	r3, r2
 8012bc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012bc6:	601a      	str	r2, [r3, #0]
 8012bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012bca:	3301      	adds	r3, #1
 8012bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	689a      	ldr	r2, [r3, #8]
 8012bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012bd4:	009b      	lsls	r3, r3, #2
 8012bd6:	4413      	add	r3, r2
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012bdc:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012be0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012be4:	2300      	movs	r3, #0
 8012be6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012bea:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	da0b      	bge.n	8012c0a <ecp_mod_p384+0x4c2>
 8012bf2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012bf6:	425b      	negs	r3, r3
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012bfe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fe fef3 	bl	80119ee <sub32>
 8012c08:	e008      	b.n	8012c1c <ecp_mod_p384+0x4d4>
 8012c0a:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012c0e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c12:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7fe fec6 	bl	80119a8 <add32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	689b      	ldr	r3, [r3, #8]
 8012c20:	3358      	adds	r3, #88	@ 0x58
 8012c22:	6819      	ldr	r1, [r3, #0]
 8012c24:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	f7fe febb 	bl	80119a8 <add32>
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	689b      	ldr	r3, [r3, #8]
 8012c36:	3358      	adds	r3, #88	@ 0x58
 8012c38:	6819      	ldr	r1, [r3, #0]
 8012c3a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fe feb0 	bl	80119a8 <add32>
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	689b      	ldr	r3, [r3, #8]
 8012c4c:	3344      	adds	r3, #68	@ 0x44
 8012c4e:	6819      	ldr	r1, [r3, #0]
 8012c50:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c54:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7fe fea5 	bl	80119a8 <add32>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	3338      	adds	r3, #56	@ 0x38
 8012c64:	6819      	ldr	r1, [r3, #0]
 8012c66:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f7fe fe9a 	bl	80119a8 <add32>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	689b      	ldr	r3, [r3, #8]
 8012c78:	3334      	adds	r3, #52	@ 0x34
 8012c7a:	6819      	ldr	r1, [r3, #0]
 8012c7c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7fe fe8f 	bl	80119a8 <add32>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	3354      	adds	r3, #84	@ 0x54
 8012c90:	6819      	ldr	r1, [r3, #0]
 8012c92:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7fe fe84 	bl	80119a8 <add32>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	689b      	ldr	r3, [r3, #8]
 8012ca4:	335c      	adds	r3, #92	@ 0x5c
 8012ca6:	6819      	ldr	r1, [r3, #0]
 8012ca8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012cac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7fe fe79 	bl	80119a8 <add32>
    SUB( 16 );                                              NEXT; // A5
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	689b      	ldr	r3, [r3, #8]
 8012cba:	3340      	adds	r3, #64	@ 0x40
 8012cbc:	6819      	ldr	r1, [r3, #0]
 8012cbe:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012cc2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f7fe fe91 	bl	80119ee <sub32>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	689a      	ldr	r2, [r3, #8]
 8012cd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012cd2:	009b      	lsls	r3, r3, #2
 8012cd4:	4413      	add	r3, r2
 8012cd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012cd8:	601a      	str	r2, [r3, #0]
 8012cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012cdc:	3301      	adds	r3, #1
 8012cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	689a      	ldr	r2, [r3, #8]
 8012ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ce6:	009b      	lsls	r3, r3, #2
 8012ce8:	4413      	add	r3, r2
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012cee:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012cf2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012cfc:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	da0b      	bge.n	8012d1c <ecp_mod_p384+0x5d4>
 8012d04:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012d08:	425b      	negs	r3, r3
 8012d0a:	4619      	mov	r1, r3
 8012d0c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fe fe6a 	bl	80119ee <sub32>
 8012d1a:	e008      	b.n	8012d2e <ecp_mod_p384+0x5e6>
 8012d1c:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012d20:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7fe fe3d 	bl	80119a8 <add32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	689b      	ldr	r3, [r3, #8]
 8012d32:	335c      	adds	r3, #92	@ 0x5c
 8012d34:	6819      	ldr	r1, [r3, #0]
 8012d36:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d3a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7fe fe32 	bl	80119a8 <add32>
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	689b      	ldr	r3, [r3, #8]
 8012d48:	335c      	adds	r3, #92	@ 0x5c
 8012d4a:	6819      	ldr	r1, [r3, #0]
 8012d4c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d50:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7fe fe27 	bl	80119a8 <add32>
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	689b      	ldr	r3, [r3, #8]
 8012d5e:	3348      	adds	r3, #72	@ 0x48
 8012d60:	6819      	ldr	r1, [r3, #0]
 8012d62:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d66:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d6a:	4618      	mov	r0, r3
 8012d6c:	f7fe fe1c 	bl	80119a8 <add32>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	689b      	ldr	r3, [r3, #8]
 8012d74:	333c      	adds	r3, #60	@ 0x3c
 8012d76:	6819      	ldr	r1, [r3, #0]
 8012d78:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7fe fe11 	bl	80119a8 <add32>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	689b      	ldr	r3, [r3, #8]
 8012d8a:	3338      	adds	r3, #56	@ 0x38
 8012d8c:	6819      	ldr	r1, [r3, #0]
 8012d8e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7fe fe06 	bl	80119a8 <add32>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	689b      	ldr	r3, [r3, #8]
 8012da0:	3358      	adds	r3, #88	@ 0x58
 8012da2:	6819      	ldr	r1, [r3, #0]
 8012da4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012da8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7fe fdfb 	bl	80119a8 <add32>
    SUB( 17 );                                              NEXT; // A6
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	689b      	ldr	r3, [r3, #8]
 8012db6:	3344      	adds	r3, #68	@ 0x44
 8012db8:	6819      	ldr	r1, [r3, #0]
 8012dba:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012dbe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f7fe fe13 	bl	80119ee <sub32>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	689a      	ldr	r2, [r3, #8]
 8012dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	4413      	add	r3, r2
 8012dd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012dd4:	601a      	str	r2, [r3, #0]
 8012dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012dd8:	3301      	adds	r3, #1
 8012dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	689a      	ldr	r2, [r3, #8]
 8012de0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012de2:	009b      	lsls	r3, r3, #2
 8012de4:	4413      	add	r3, r2
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012dea:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012dee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012df2:	2300      	movs	r3, #0
 8012df4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012df8:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	da0b      	bge.n	8012e18 <ecp_mod_p384+0x6d0>
 8012e00:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012e04:	425b      	negs	r3, r3
 8012e06:	4619      	mov	r1, r3
 8012e08:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e10:	4618      	mov	r0, r3
 8012e12:	f7fe fdec 	bl	80119ee <sub32>
 8012e16:	e008      	b.n	8012e2a <ecp_mod_p384+0x6e2>
 8012e18:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012e1c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7fe fdbf 	bl	80119a8 <add32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	689b      	ldr	r3, [r3, #8]
 8012e2e:	334c      	adds	r3, #76	@ 0x4c
 8012e30:	6819      	ldr	r1, [r3, #0]
 8012e32:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e36:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fe fdb4 	bl	80119a8 <add32>
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	689b      	ldr	r3, [r3, #8]
 8012e44:	3340      	adds	r3, #64	@ 0x40
 8012e46:	6819      	ldr	r1, [r3, #0]
 8012e48:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e4c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7fe fda9 	bl	80119a8 <add32>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	689b      	ldr	r3, [r3, #8]
 8012e5a:	333c      	adds	r3, #60	@ 0x3c
 8012e5c:	6819      	ldr	r1, [r3, #0]
 8012e5e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e62:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fe fd9e 	bl	80119a8 <add32>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	689b      	ldr	r3, [r3, #8]
 8012e70:	335c      	adds	r3, #92	@ 0x5c
 8012e72:	6819      	ldr	r1, [r3, #0]
 8012e74:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fe fd93 	bl	80119a8 <add32>
    SUB( 18 );                                              NEXT; // A7
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	689b      	ldr	r3, [r3, #8]
 8012e86:	3348      	adds	r3, #72	@ 0x48
 8012e88:	6819      	ldr	r1, [r3, #0]
 8012e8a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fe fdab 	bl	80119ee <sub32>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	689a      	ldr	r2, [r3, #8]
 8012e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e9e:	009b      	lsls	r3, r3, #2
 8012ea0:	4413      	add	r3, r2
 8012ea2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012ea4:	601a      	str	r2, [r3, #0]
 8012ea6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ea8:	3301      	adds	r3, #1
 8012eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	689a      	ldr	r2, [r3, #8]
 8012eb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012eb2:	009b      	lsls	r3, r3, #2
 8012eb4:	4413      	add	r3, r2
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012eba:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012ebe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012ec8:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	da0b      	bge.n	8012ee8 <ecp_mod_p384+0x7a0>
 8012ed0:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012ed4:	425b      	negs	r3, r3
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012edc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7fe fd84 	bl	80119ee <sub32>
 8012ee6:	e008      	b.n	8012efa <ecp_mod_p384+0x7b2>
 8012ee8:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012eec:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ef0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fe fd57 	bl	80119a8 <add32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	689b      	ldr	r3, [r3, #8]
 8012efe:	3350      	adds	r3, #80	@ 0x50
 8012f00:	6819      	ldr	r1, [r3, #0]
 8012f02:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f06:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fe fd4c 	bl	80119a8 <add32>
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	689b      	ldr	r3, [r3, #8]
 8012f14:	3344      	adds	r3, #68	@ 0x44
 8012f16:	6819      	ldr	r1, [r3, #0]
 8012f18:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fe fd41 	bl	80119a8 <add32>
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	689b      	ldr	r3, [r3, #8]
 8012f2a:	3340      	adds	r3, #64	@ 0x40
 8012f2c:	6819      	ldr	r1, [r3, #0]
 8012f2e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f32:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fe fd36 	bl	80119a8 <add32>
    SUB( 19 );                                              NEXT; // A8
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	689b      	ldr	r3, [r3, #8]
 8012f40:	334c      	adds	r3, #76	@ 0x4c
 8012f42:	6819      	ldr	r1, [r3, #0]
 8012f44:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f48:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7fe fd4e 	bl	80119ee <sub32>
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	689a      	ldr	r2, [r3, #8]
 8012f56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f58:	009b      	lsls	r3, r3, #2
 8012f5a:	4413      	add	r3, r2
 8012f5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f5e:	601a      	str	r2, [r3, #0]
 8012f60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f62:	3301      	adds	r3, #1
 8012f64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	689a      	ldr	r2, [r3, #8]
 8012f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f6c:	009b      	lsls	r3, r3, #2
 8012f6e:	4413      	add	r3, r2
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012f74:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012f78:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012f82:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	da0b      	bge.n	8012fa2 <ecp_mod_p384+0x85a>
 8012f8a:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012f8e:	425b      	negs	r3, r3
 8012f90:	4619      	mov	r1, r3
 8012f92:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fe fd27 	bl	80119ee <sub32>
 8012fa0:	e008      	b.n	8012fb4 <ecp_mod_p384+0x86c>
 8012fa2:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012fa6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012faa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fe fcfa 	bl	80119a8 <add32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	689b      	ldr	r3, [r3, #8]
 8012fb8:	3354      	adds	r3, #84	@ 0x54
 8012fba:	6819      	ldr	r1, [r3, #0]
 8012fbc:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012fc0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f7fe fcef 	bl	80119a8 <add32>
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	689b      	ldr	r3, [r3, #8]
 8012fce:	3348      	adds	r3, #72	@ 0x48
 8012fd0:	6819      	ldr	r1, [r3, #0]
 8012fd2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012fd6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7fe fce4 	bl	80119a8 <add32>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	689b      	ldr	r3, [r3, #8]
 8012fe4:	3344      	adds	r3, #68	@ 0x44
 8012fe6:	6819      	ldr	r1, [r3, #0]
 8012fe8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012fec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7fe fcd9 	bl	80119a8 <add32>
    SUB( 20 );                                              NEXT; // A9
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	689b      	ldr	r3, [r3, #8]
 8012ffa:	3350      	adds	r3, #80	@ 0x50
 8012ffc:	6819      	ldr	r1, [r3, #0]
 8012ffe:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013002:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013006:	4618      	mov	r0, r3
 8013008:	f7fe fcf1 	bl	80119ee <sub32>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	689a      	ldr	r2, [r3, #8]
 8013010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013012:	009b      	lsls	r3, r3, #2
 8013014:	4413      	add	r3, r2
 8013016:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013018:	601a      	str	r2, [r3, #0]
 801301a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801301c:	3301      	adds	r3, #1
 801301e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	689a      	ldr	r2, [r3, #8]
 8013024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013026:	009b      	lsls	r3, r3, #2
 8013028:	4413      	add	r3, r2
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801302e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8013032:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8013036:	2300      	movs	r3, #0
 8013038:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 801303c:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8013040:	2b00      	cmp	r3, #0
 8013042:	da0b      	bge.n	801305c <ecp_mod_p384+0x914>
 8013044:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8013048:	425b      	negs	r3, r3
 801304a:	4619      	mov	r1, r3
 801304c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013050:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013054:	4618      	mov	r0, r3
 8013056:	f7fe fcca 	bl	80119ee <sub32>
 801305a:	e008      	b.n	801306e <ecp_mod_p384+0x926>
 801305c:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8013060:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013064:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013068:	4618      	mov	r0, r3
 801306a:	f7fe fc9d 	bl	80119a8 <add32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	689b      	ldr	r3, [r3, #8]
 8013072:	3358      	adds	r3, #88	@ 0x58
 8013074:	6819      	ldr	r1, [r3, #0]
 8013076:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801307a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801307e:	4618      	mov	r0, r3
 8013080:	f7fe fc92 	bl	80119a8 <add32>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	689b      	ldr	r3, [r3, #8]
 8013088:	334c      	adds	r3, #76	@ 0x4c
 801308a:	6819      	ldr	r1, [r3, #0]
 801308c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013090:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013094:	4618      	mov	r0, r3
 8013096:	f7fe fc87 	bl	80119a8 <add32>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	689b      	ldr	r3, [r3, #8]
 801309e:	3348      	adds	r3, #72	@ 0x48
 80130a0:	6819      	ldr	r1, [r3, #0]
 80130a2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80130a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7fe fc7c 	bl	80119a8 <add32>
    SUB( 21 );                                              NEXT; // A10
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	689b      	ldr	r3, [r3, #8]
 80130b4:	3354      	adds	r3, #84	@ 0x54
 80130b6:	6819      	ldr	r1, [r3, #0]
 80130b8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80130bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7fe fc94 	bl	80119ee <sub32>
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	689a      	ldr	r2, [r3, #8]
 80130ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	4413      	add	r3, r2
 80130d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80130d2:	601a      	str	r2, [r3, #0]
 80130d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130d6:	3301      	adds	r3, #1
 80130d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	689a      	ldr	r2, [r3, #8]
 80130de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130e0:	009b      	lsls	r3, r3, #2
 80130e2:	4413      	add	r3, r2
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80130e8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80130ec:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80130f0:	2300      	movs	r3, #0
 80130f2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80130f6:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	da0b      	bge.n	8013116 <ecp_mod_p384+0x9ce>
 80130fe:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8013102:	425b      	negs	r3, r3
 8013104:	4619      	mov	r1, r3
 8013106:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801310a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801310e:	4618      	mov	r0, r3
 8013110:	f7fe fc6d 	bl	80119ee <sub32>
 8013114:	e008      	b.n	8013128 <ecp_mod_p384+0x9e0>
 8013116:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 801311a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801311e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013122:	4618      	mov	r0, r3
 8013124:	f7fe fc40 	bl	80119a8 <add32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	689b      	ldr	r3, [r3, #8]
 801312c:	335c      	adds	r3, #92	@ 0x5c
 801312e:	6819      	ldr	r1, [r3, #0]
 8013130:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013134:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013138:	4618      	mov	r0, r3
 801313a:	f7fe fc35 	bl	80119a8 <add32>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	689b      	ldr	r3, [r3, #8]
 8013142:	3350      	adds	r3, #80	@ 0x50
 8013144:	6819      	ldr	r1, [r3, #0]
 8013146:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801314a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801314e:	4618      	mov	r0, r3
 8013150:	f7fe fc2a 	bl	80119a8 <add32>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	689b      	ldr	r3, [r3, #8]
 8013158:	334c      	adds	r3, #76	@ 0x4c
 801315a:	6819      	ldr	r1, [r3, #0]
 801315c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013160:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013164:	4618      	mov	r0, r3
 8013166:	f7fe fc1f 	bl	80119a8 <add32>
    SUB( 22 );                                              LAST; // A11
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	689b      	ldr	r3, [r3, #8]
 801316e:	3358      	adds	r3, #88	@ 0x58
 8013170:	6819      	ldr	r1, [r3, #0]
 8013172:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013176:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801317a:	4618      	mov	r0, r3
 801317c:	f7fe fc37 	bl	80119ee <sub32>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	689a      	ldr	r2, [r3, #8]
 8013184:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013186:	009b      	lsls	r3, r3, #2
 8013188:	4413      	add	r3, r2
 801318a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801318c:	601a      	str	r2, [r3, #0]
 801318e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013190:	3301      	adds	r3, #1
 8013192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013194:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 8013198:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801319c:	b25b      	sxtb	r3, r3
 801319e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	689a      	ldr	r2, [r3, #8]
 80131a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80131a6:	009b      	lsls	r3, r3, #2
 80131a8:	4413      	add	r3, r2
 80131aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80131ac:	601a      	str	r2, [r3, #0]
 80131ae:	2300      	movs	r3, #0
 80131b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80131b2:	e006      	b.n	80131c2 <ecp_mod_p384+0xa7a>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	689a      	ldr	r2, [r3, #8]
 80131b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	4413      	add	r3, r2
 80131be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80131c0:	601a      	str	r2, [r3, #0]
 80131c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80131c4:	3301      	adds	r3, #1
 80131c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	685b      	ldr	r3, [r3, #4]
 80131cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80131ce:	429a      	cmp	r2, r3
 80131d0:	d3f0      	bcc.n	80131b4 <ecp_mod_p384+0xa6c>
 80131d2:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	da08      	bge.n	80131ec <ecp_mod_p384+0xaa4>
 80131da:	f997 1052 	ldrsb.w	r1, [r7, #82]	@ 0x52
 80131de:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80131e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f7fe fc25 	bl	8011a34 <fix_negative>
 80131ea:	e000      	b.n	80131ee <ecp_mod_p384+0xaa6>

cleanup:
 80131ec:	bf00      	nop
    return( ret );
 80131ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80131f0:	4618      	mov	r0, r3
 80131f2:	3760      	adds	r7, #96	@ 0x60
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}

080131f8 <ecp_mod_p521>:
/*
 * Fast quasi-reduction modulo p521 (FIPS 186-3 D.2.5)
 * Write N as A1 + 2^521 A0, return A0 + A1
 */
static int ecp_mod_p521( mbedtls_mpi *N )
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b09a      	sub	sp, #104	@ 0x68
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
    mbedtls_mpi_uint Mp[P521_WIDTH + 1];
    /* Worst case for the size of M is when mbedtls_mpi_uint is 16 bits:
     * we need to hold bits 513 to 1056, which is 34 limbs, that is
     * P521_WIDTH + 1. Otherwise P521_WIDTH is enough. */

    if( N->n < P521_WIDTH )
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	2b10      	cmp	r3, #16
 8013206:	d801      	bhi.n	801320c <ecp_mod_p521+0x14>
        return( 0 );
 8013208:	2300      	movs	r3, #0
 801320a:	e04a      	b.n	80132a2 <ecp_mod_p521+0xaa>

    /* M = A1 */
    M.s = 1;
 801320c:	2301      	movs	r3, #1
 801320e:	657b      	str	r3, [r7, #84]	@ 0x54
    M.n = N->n - ( P521_WIDTH - 1 );
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	685b      	ldr	r3, [r3, #4]
 8013214:	3b10      	subs	r3, #16
 8013216:	65bb      	str	r3, [r7, #88]	@ 0x58
    if( M.n > P521_WIDTH + 1 )
 8013218:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801321a:	2b12      	cmp	r3, #18
 801321c:	d901      	bls.n	8013222 <ecp_mod_p521+0x2a>
        M.n = P521_WIDTH + 1;
 801321e:	2312      	movs	r3, #18
 8013220:	65bb      	str	r3, [r7, #88]	@ 0x58
    M.p = Mp;
 8013222:	f107 030c 	add.w	r3, r7, #12
 8013226:	65fb      	str	r3, [r7, #92]	@ 0x5c
    memcpy( Mp, N->p + P521_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	689b      	ldr	r3, [r3, #8]
 801322c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8013230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013232:	009a      	lsls	r2, r3, #2
 8013234:	f107 030c 	add.w	r3, r7, #12
 8013238:	4618      	mov	r0, r3
 801323a:	f002 fc35 	bl	8015aa8 <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 521 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 801323e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013242:	2109      	movs	r1, #9
 8013244:	4618      	mov	r0, r3
 8013246:	f7f7 fdcc 	bl	800ade2 <mbedtls_mpi_shift_r>
 801324a:	6678      	str	r0, [r7, #100]	@ 0x64
 801324c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801324e:	2b00      	cmp	r3, #0
 8013250:	d126      	bne.n	80132a0 <ecp_mod_p521+0xa8>

    /* N = A0 */
    N->p[P521_WIDTH - 1] &= P521_MASK;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	689b      	ldr	r3, [r3, #8]
 8013256:	3340      	adds	r3, #64	@ 0x40
 8013258:	681a      	ldr	r2, [r3, #0]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	689b      	ldr	r3, [r3, #8]
 801325e:	3340      	adds	r3, #64	@ 0x40
 8013260:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013264:	601a      	str	r2, [r3, #0]
    for( i = P521_WIDTH; i < N->n; i++ )
 8013266:	2311      	movs	r3, #17
 8013268:	663b      	str	r3, [r7, #96]	@ 0x60
 801326a:	e009      	b.n	8013280 <ecp_mod_p521+0x88>
        N->p[i] = 0;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	689a      	ldr	r2, [r3, #8]
 8013270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013272:	009b      	lsls	r3, r3, #2
 8013274:	4413      	add	r3, r2
 8013276:	2200      	movs	r2, #0
 8013278:	601a      	str	r2, [r3, #0]
    for( i = P521_WIDTH; i < N->n; i++ )
 801327a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801327c:	3301      	adds	r3, #1
 801327e:	663b      	str	r3, [r7, #96]	@ 0x60
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	685b      	ldr	r3, [r3, #4]
 8013284:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013286:	429a      	cmp	r2, r3
 8013288:	d3f0      	bcc.n	801326c <ecp_mod_p521+0x74>

    /* N = A0 + A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 801328a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801328e:	461a      	mov	r2, r3
 8013290:	6879      	ldr	r1, [r7, #4]
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f7f7 ff7f 	bl	800b196 <mbedtls_mpi_add_abs>
 8013298:	6678      	str	r0, [r7, #100]	@ 0x64
 801329a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801329c:	2b00      	cmp	r3, #0

cleanup:
 801329e:	bf00      	nop
    return( ret );
 80132a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3768      	adds	r7, #104	@ 0x68
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}
	...

080132ac <ecp_mod_p255>:
/*
 * Fast quasi-reduction modulo p255 = 2^255 - 19
 * Write N as A0 + 2^255 A1, return A0 + 19 * A1
 */
static int ecp_mod_p255( mbedtls_mpi *N )
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b092      	sub	sp, #72	@ 0x48
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi M;
    mbedtls_mpi_uint Mp[P255_WIDTH + 2];

    if( N->n < P255_WIDTH )
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	685b      	ldr	r3, [r3, #4]
 80132b8:	2b07      	cmp	r3, #7
 80132ba:	d801      	bhi.n	80132c0 <ecp_mod_p255+0x14>
        return( 0 );
 80132bc:	2300      	movs	r3, #0
 80132be:	e05f      	b.n	8013380 <ecp_mod_p255+0xd4>

    /* M = A1 */
    M.s = 1;
 80132c0:	2301      	movs	r3, #1
 80132c2:	637b      	str	r3, [r7, #52]	@ 0x34
    M.n = N->n - ( P255_WIDTH - 1 );
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	685b      	ldr	r3, [r3, #4]
 80132c8:	3b07      	subs	r3, #7
 80132ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    if( M.n > P255_WIDTH + 1 )
 80132cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ce:	2b09      	cmp	r3, #9
 80132d0:	d901      	bls.n	80132d6 <ecp_mod_p255+0x2a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80132d2:	4b2d      	ldr	r3, [pc, #180]	@ (8013388 <ecp_mod_p255+0xdc>)
 80132d4:	e054      	b.n	8013380 <ecp_mod_p255+0xd4>
    M.p = Mp;
 80132d6:	f107 030c 	add.w	r3, r7, #12
 80132da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memset( Mp, 0, sizeof Mp );
 80132dc:	f107 030c 	add.w	r3, r7, #12
 80132e0:	2228      	movs	r2, #40	@ 0x28
 80132e2:	2100      	movs	r1, #0
 80132e4:	4618      	mov	r0, r3
 80132e6:	f002 fb9b 	bl	8015a20 <memset>
    memcpy( Mp, N->p + P255_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	689b      	ldr	r3, [r3, #8]
 80132ee:	f103 011c 	add.w	r1, r3, #28
 80132f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132f4:	009a      	lsls	r2, r3, #2
 80132f6:	f107 030c 	add.w	r3, r7, #12
 80132fa:	4618      	mov	r0, r3
 80132fc:	f002 fbd4 	bl	8015aa8 <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 8013300:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013304:	211f      	movs	r1, #31
 8013306:	4618      	mov	r0, r3
 8013308:	f7f7 fd6b 	bl	800ade2 <mbedtls_mpi_shift_r>
 801330c:	6478      	str	r0, [r7, #68]	@ 0x44
 801330e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013310:	2b00      	cmp	r3, #0
 8013312:	d134      	bne.n	801337e <ecp_mod_p255+0xd2>
    M.n++; /* Make room for multiplication by 19 */
 8013314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013316:	3301      	adds	r3, #1
 8013318:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* N = A0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 801331a:	2200      	movs	r2, #0
 801331c:	21ff      	movs	r1, #255	@ 0xff
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f7f7 fa29 	bl	800a776 <mbedtls_mpi_set_bit>
 8013324:	6478      	str	r0, [r7, #68]	@ 0x44
 8013326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013328:	2b00      	cmp	r3, #0
 801332a:	d128      	bne.n	801337e <ecp_mod_p255+0xd2>
    for( i = P255_WIDTH; i < N->n; i++ )
 801332c:	2308      	movs	r3, #8
 801332e:	643b      	str	r3, [r7, #64]	@ 0x40
 8013330:	e009      	b.n	8013346 <ecp_mod_p255+0x9a>
        N->p[i] = 0;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	689a      	ldr	r2, [r3, #8]
 8013336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	4413      	add	r3, r2
 801333c:	2200      	movs	r2, #0
 801333e:	601a      	str	r2, [r3, #0]
    for( i = P255_WIDTH; i < N->n; i++ )
 8013340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013342:	3301      	adds	r3, #1
 8013344:	643b      	str	r3, [r7, #64]	@ 0x40
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801334c:	429a      	cmp	r2, r3
 801334e:	d3f0      	bcc.n	8013332 <ecp_mod_p255+0x86>

    /* N = A0 + 19 * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );
 8013350:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8013354:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013358:	2213      	movs	r2, #19
 801335a:	4618      	mov	r0, r3
 801335c:	f7f9 fda6 	bl	800ceac <mbedtls_mpi_mul_int>
 8013360:	6478      	str	r0, [r7, #68]	@ 0x44
 8013362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013364:	2b00      	cmp	r3, #0
 8013366:	d10a      	bne.n	801337e <ecp_mod_p255+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013368:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801336c:	461a      	mov	r2, r3
 801336e:	6879      	ldr	r1, [r7, #4]
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f7f7 ff10 	bl	800b196 <mbedtls_mpi_add_abs>
 8013376:	6478      	str	r0, [r7, #68]	@ 0x44
 8013378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801337a:	2b00      	cmp	r3, #0

cleanup:
 801337c:	bf00      	nop
    return( ret );
 801337e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8013380:	4618      	mov	r0, r3
 8013382:	3748      	adds	r7, #72	@ 0x48
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	ffffb080 	.word	0xffffb080

0801338c <ecp_mod_p448>:
 * arithmetic using the limbs directly as we do for the NIST primes above,
 * but for 64-bit targets it should use half the number of operations if we do
 * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.
 */
static int ecp_mod_p448( mbedtls_mpi *N )
{
 801338c:	b5b0      	push	{r4, r5, r7, lr}
 801338e:	b0a8      	sub	sp, #160	@ 0xa0
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi M, Q;
    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];

    if( N->n <= P448_WIDTH )
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	685b      	ldr	r3, [r3, #4]
 8013398:	2b0e      	cmp	r3, #14
 801339a:	d801      	bhi.n	80133a0 <ecp_mod_p448+0x14>
        return( 0 );
 801339c:	2300      	movs	r3, #0
 801339e:	e0be      	b.n	801351e <ecp_mod_p448+0x192>

    /* M = A1 */
    M.s = 1;
 80133a0:	2301      	movs	r3, #1
 80133a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    M.n = N->n - ( P448_WIDTH );
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	685b      	ldr	r3, [r3, #4]
 80133aa:	3b0e      	subs	r3, #14
 80133ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if( M.n > P448_WIDTH )
 80133b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80133b4:	2b0e      	cmp	r3, #14
 80133b6:	d901      	bls.n	80133bc <ecp_mod_p448+0x30>
        /* Shouldn't be called with N larger than 2^896! */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 80133b8:	4b5b      	ldr	r3, [pc, #364]	@ (8013528 <ecp_mod_p448+0x19c>)
 80133ba:	e0b0      	b.n	801351e <ecp_mod_p448+0x192>
    M.p = Mp;
 80133bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80133c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    memset( Mp, 0, sizeof( Mp ) );
 80133c4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80133c8:	223c      	movs	r2, #60	@ 0x3c
 80133ca:	2100      	movs	r1, #0
 80133cc:	4618      	mov	r0, r3
 80133ce:	f002 fb27 	bl	8015a20 <memset>
    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	689b      	ldr	r3, [r3, #8]
 80133d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80133da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80133de:	009a      	lsls	r2, r3, #2
 80133e0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80133e4:	4618      	mov	r0, r3
 80133e6:	f002 fb5f 	bl	8015aa8 <memcpy>

    /* N = A0 */
    for( i = P448_WIDTH; i < N->n; i++ )
 80133ea:	230e      	movs	r3, #14
 80133ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80133f0:	e00c      	b.n	801340c <ecp_mod_p448+0x80>
        N->p[i] = 0;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	689a      	ldr	r2, [r3, #8]
 80133f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	4413      	add	r3, r2
 80133fe:	2200      	movs	r2, #0
 8013400:	601a      	str	r2, [r3, #0]
    for( i = P448_WIDTH; i < N->n; i++ )
 8013402:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013406:	3301      	adds	r3, #1
 8013408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013414:	429a      	cmp	r2, r3
 8013416:	d3ec      	bcc.n	80133f2 <ecp_mod_p448+0x66>

    /* N += A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 8013418:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801341c:	461a      	mov	r2, r3
 801341e:	6879      	ldr	r1, [r7, #4]
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7f8 f821 	bl	800b468 <mbedtls_mpi_add_mpi>
 8013426:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 801342a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801342e:	2b00      	cmp	r3, #0
 8013430:	d173      	bne.n	801351a <ecp_mod_p448+0x18e>

    /* Q = B1, N += B1 */
    Q = M;
 8013432:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8013436:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 801343a:	ca07      	ldmia	r2, {r0, r1, r2}
 801343c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Q.p = Qp;
 8013440:	f107 030c 	add.w	r3, r7, #12
 8013444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    memcpy( Qp, Mp, sizeof( Qp ) );
 8013448:	f107 040c 	add.w	r4, r7, #12
 801344c:	f107 0544 	add.w	r5, r7, #68	@ 0x44
 8013450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801345a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801345c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013460:	e884 0003 	stmia.w	r4, {r0, r1}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 8013464:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8013468:	21e0      	movs	r1, #224	@ 0xe0
 801346a:	4618      	mov	r0, r3
 801346c:	f7f7 fcb9 	bl	800ade2 <mbedtls_mpi_shift_r>
 8013470:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 8013474:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013478:	2b00      	cmp	r3, #0
 801347a:	d14e      	bne.n	801351a <ecp_mod_p448+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 801347c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8013480:	461a      	mov	r2, r3
 8013482:	6879      	ldr	r1, [r7, #4]
 8013484:	6878      	ldr	r0, [r7, #4]
 8013486:	f7f7 ffef 	bl	800b468 <mbedtls_mpi_add_mpi>
 801348a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 801348e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013492:	2b00      	cmp	r3, #0
 8013494:	d141      	bne.n	801351a <ecp_mod_p448+0x18e>

    /* M = (B0 + B1) * 2^224, N += M */
    if( sizeof( mbedtls_mpi_uint ) > 4 )
        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 8013496:	2307      	movs	r3, #7
 8013498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801349c:	e00c      	b.n	80134b8 <ecp_mod_p448+0x12c>
        Mp[i] = 0;
 801349e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80134a2:	009b      	lsls	r3, r3, #2
 80134a4:	33a0      	adds	r3, #160	@ 0xa0
 80134a6:	443b      	add	r3, r7
 80134a8:	2200      	movs	r2, #0
 80134aa:	f843 2c5c 	str.w	r2, [r3, #-92]
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 80134ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80134b2:	3301      	adds	r3, #1
 80134b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80134b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80134bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80134c0:	429a      	cmp	r2, r3
 80134c2:	d3ec      	bcc.n	801349e <ecp_mod_p448+0x112>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 80134c4:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 80134c8:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 80134cc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7f7 ffc9 	bl	800b468 <mbedtls_mpi_add_mpi>
 80134d6:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 80134da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d11b      	bne.n	801351a <ecp_mod_p448+0x18e>
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 80134e2:	230f      	movs	r3, #15
 80134e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 80134e8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80134ec:	21e0      	movs	r1, #224	@ 0xe0
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7f7 fbd5 	bl	800ac9e <mbedtls_mpi_shift_l>
 80134f4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 80134f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d10c      	bne.n	801351a <ecp_mod_p448+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 8013500:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013504:	461a      	mov	r2, r3
 8013506:	6879      	ldr	r1, [r7, #4]
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f7f7 ffad 	bl	800b468 <mbedtls_mpi_add_mpi>
 801350e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 8013512:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013516:	2b00      	cmp	r3, #0

cleanup:
 8013518:	bf00      	nop
    return( ret );
 801351a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 801351e:	4618      	mov	r0, r3
 8013520:	37a0      	adds	r7, #160	@ 0xa0
 8013522:	46bd      	mov	sp, r7
 8013524:	bdb0      	pop	{r4, r5, r7, pc}
 8013526:	bf00      	nop
 8013528:	ffffb080 	.word	0xffffb080

0801352c <ecp_mod_koblitz>:
 */
#define P_KOBLITZ_MAX   ( 256 / 8 / sizeof( mbedtls_mpi_uint ) )  // Max limbs in P
#define P_KOBLITZ_R     ( 8 / sizeof( mbedtls_mpi_uint ) )        // Limbs in R
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
                                   size_t adjust, size_t shift, mbedtls_mpi_uint mask )
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b098      	sub	sp, #96	@ 0x60
 8013530:	af00      	add	r7, sp, #0
 8013532:	60f8      	str	r0, [r7, #12]
 8013534:	60b9      	str	r1, [r7, #8]
 8013536:	607a      	str	r2, [r7, #4]
 8013538:	603b      	str	r3, [r7, #0]
    int ret;
    size_t i;
    mbedtls_mpi M, R;
    mbedtls_mpi_uint Mp[P_KOBLITZ_MAX + P_KOBLITZ_R + 1];

    if( N->n < p_limbs )
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	687a      	ldr	r2, [r7, #4]
 8013540:	429a      	cmp	r2, r3
 8013542:	d901      	bls.n	8013548 <ecp_mod_koblitz+0x1c>
        return( 0 );
 8013544:	2300      	movs	r3, #0
 8013546:	e0fd      	b.n	8013744 <ecp_mod_koblitz+0x218>

    /* Init R */
    R.s = 1;
 8013548:	2301      	movs	r3, #1
 801354a:	643b      	str	r3, [r7, #64]	@ 0x40
    R.p = Rp;
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	64bb      	str	r3, [r7, #72]	@ 0x48
    R.n = P_KOBLITZ_R;
 8013550:	2302      	movs	r3, #2
 8013552:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Common setup for M */
    M.s = 1;
 8013554:	2301      	movs	r3, #1
 8013556:	64fb      	str	r3, [r7, #76]	@ 0x4c
    M.p = Mp;
 8013558:	f107 0314 	add.w	r3, r7, #20
 801355c:	657b      	str	r3, [r7, #84]	@ 0x54

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	685a      	ldr	r2, [r3, #4]
 8013562:	6839      	ldr	r1, [r7, #0]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	1acb      	subs	r3, r1, r3
 8013568:	4413      	add	r3, r2
 801356a:	653b      	str	r3, [r7, #80]	@ 0x50
    if( M.n > p_limbs + adjust )
 801356c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801356e:	6879      	ldr	r1, [r7, #4]
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	440b      	add	r3, r1
 8013574:	429a      	cmp	r2, r3
 8013576:	d903      	bls.n	8013580 <ecp_mod_koblitz+0x54>
        M.n = p_limbs + adjust;
 8013578:	687a      	ldr	r2, [r7, #4]
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	4413      	add	r3, r2
 801357e:	653b      	str	r3, [r7, #80]	@ 0x50
    memset( Mp, 0, sizeof Mp );
 8013580:	f107 0314 	add.w	r3, r7, #20
 8013584:	222c      	movs	r2, #44	@ 0x2c
 8013586:	2100      	movs	r1, #0
 8013588:	4618      	mov	r0, r3
 801358a:	f002 fa49 	bl	8015a20 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	689a      	ldr	r2, [r3, #8]
 8013592:	6879      	ldr	r1, [r7, #4]
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	1acb      	subs	r3, r1, r3
 8013598:	009b      	lsls	r3, r3, #2
 801359a:	18d1      	adds	r1, r2, r3
 801359c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801359e:	009a      	lsls	r2, r3, #2
 80135a0:	f107 0314 	add.w	r3, r7, #20
 80135a4:	4618      	mov	r0, r3
 80135a6:	f002 fa7f 	bl	8015aa8 <memcpy>
    if( shift != 0 )
 80135aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d00a      	beq.n	80135c6 <ecp_mod_koblitz+0x9a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 80135b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80135b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7f7 fc13 	bl	800ade2 <mbedtls_mpi_shift_r>
 80135bc:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80135be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f040 80be 	bne.w	8013742 <ecp_mod_koblitz+0x216>
    M.n += R.n; /* Make room for multiplication by R */
 80135c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80135c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80135ca:	4413      	add	r3, r2
 80135cc:	653b      	str	r3, [r7, #80]	@ 0x50

    /* N = A0 */
    if( mask != 0 )
 80135ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d013      	beq.n	80135fc <ecp_mod_koblitz+0xd0>
        N->p[p_limbs - 1] &= mask;
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	689a      	ldr	r2, [r3, #8]
 80135d8:	6879      	ldr	r1, [r7, #4]
 80135da:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80135de:	440b      	add	r3, r1
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	4413      	add	r3, r2
 80135e4:	6819      	ldr	r1, [r3, #0]
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	689a      	ldr	r2, [r3, #8]
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80135f0:	4403      	add	r3, r0
 80135f2:	009b      	lsls	r3, r3, #2
 80135f4:	4413      	add	r3, r2
 80135f6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80135f8:	400a      	ands	r2, r1
 80135fa:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013600:	e009      	b.n	8013616 <ecp_mod_koblitz+0xea>
        N->p[i] = 0;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	689a      	ldr	r2, [r3, #8]
 8013606:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013608:	009b      	lsls	r3, r3, #2
 801360a:	4413      	add	r3, r2
 801360c:	2200      	movs	r2, #0
 801360e:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 8013610:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013612:	3301      	adds	r3, #1
 8013614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801361c:	429a      	cmp	r2, r3
 801361e:	d3f0      	bcc.n	8013602 <ecp_mod_koblitz+0xd6>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013620:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8013624:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8013628:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801362c:	4618      	mov	r0, r3
 801362e:	f7f9 fb94 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8013632:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8013634:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013636:	2b00      	cmp	r3, #0
 8013638:	f040 8083 	bne.w	8013742 <ecp_mod_koblitz+0x216>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 801363c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013640:	461a      	mov	r2, r3
 8013642:	68f9      	ldr	r1, [r7, #12]
 8013644:	68f8      	ldr	r0, [r7, #12]
 8013646:	f7f7 fda6 	bl	800b196 <mbedtls_mpi_add_abs>
 801364a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 801364c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801364e:	2b00      	cmp	r3, #0
 8013650:	d177      	bne.n	8013742 <ecp_mod_koblitz+0x216>

    /* Second pass */

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	685a      	ldr	r2, [r3, #4]
 8013656:	6839      	ldr	r1, [r7, #0]
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	1acb      	subs	r3, r1, r3
 801365c:	4413      	add	r3, r2
 801365e:	653b      	str	r3, [r7, #80]	@ 0x50
    if( M.n > p_limbs + adjust )
 8013660:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013662:	6879      	ldr	r1, [r7, #4]
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	440b      	add	r3, r1
 8013668:	429a      	cmp	r2, r3
 801366a:	d903      	bls.n	8013674 <ecp_mod_koblitz+0x148>
        M.n = p_limbs + adjust;
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	4413      	add	r3, r2
 8013672:	653b      	str	r3, [r7, #80]	@ 0x50
    memset( Mp, 0, sizeof Mp );
 8013674:	f107 0314 	add.w	r3, r7, #20
 8013678:	222c      	movs	r2, #44	@ 0x2c
 801367a:	2100      	movs	r1, #0
 801367c:	4618      	mov	r0, r3
 801367e:	f002 f9cf 	bl	8015a20 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	689a      	ldr	r2, [r3, #8]
 8013686:	6879      	ldr	r1, [r7, #4]
 8013688:	683b      	ldr	r3, [r7, #0]
 801368a:	1acb      	subs	r3, r1, r3
 801368c:	009b      	lsls	r3, r3, #2
 801368e:	18d1      	adds	r1, r2, r3
 8013690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013692:	009a      	lsls	r2, r3, #2
 8013694:	f107 0314 	add.w	r3, r7, #20
 8013698:	4618      	mov	r0, r3
 801369a:	f002 fa05 	bl	8015aa8 <memcpy>
    if( shift != 0 )
 801369e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d009      	beq.n	80136b8 <ecp_mod_koblitz+0x18c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 80136a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80136a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7f7 fb99 	bl	800ade2 <mbedtls_mpi_shift_r>
 80136b0:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80136b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d144      	bne.n	8013742 <ecp_mod_koblitz+0x216>
    M.n += R.n; /* Make room for multiplication by R */
 80136b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80136ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136bc:	4413      	add	r3, r2
 80136be:	653b      	str	r3, [r7, #80]	@ 0x50

    /* N = A0 */
    if( mask != 0 )
 80136c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d013      	beq.n	80136ee <ecp_mod_koblitz+0x1c2>
        N->p[p_limbs - 1] &= mask;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	689a      	ldr	r2, [r3, #8]
 80136ca:	6879      	ldr	r1, [r7, #4]
 80136cc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80136d0:	440b      	add	r3, r1
 80136d2:	009b      	lsls	r3, r3, #2
 80136d4:	4413      	add	r3, r2
 80136d6:	6819      	ldr	r1, [r3, #0]
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	689a      	ldr	r2, [r3, #8]
 80136dc:	6878      	ldr	r0, [r7, #4]
 80136de:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80136e2:	4403      	add	r3, r0
 80136e4:	009b      	lsls	r3, r3, #2
 80136e6:	4413      	add	r3, r2
 80136e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80136ea:	400a      	ands	r2, r1
 80136ec:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80136f2:	e009      	b.n	8013708 <ecp_mod_koblitz+0x1dc>
        N->p[i] = 0;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	689a      	ldr	r2, [r3, #8]
 80136f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	4413      	add	r3, r2
 80136fe:	2200      	movs	r2, #0
 8013700:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 8013702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013704:	3301      	adds	r3, #1
 8013706:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801370e:	429a      	cmp	r2, r3
 8013710:	d3f0      	bcc.n	80136f4 <ecp_mod_koblitz+0x1c8>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013712:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8013716:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801371a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801371e:	4618      	mov	r0, r3
 8013720:	f7f9 fb1b 	bl	800cd5a <mbedtls_mpi_mul_mpi>
 8013724:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8013726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013728:	2b00      	cmp	r3, #0
 801372a:	d10a      	bne.n	8013742 <ecp_mod_koblitz+0x216>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 801372c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013730:	461a      	mov	r2, r3
 8013732:	68f9      	ldr	r1, [r7, #12]
 8013734:	68f8      	ldr	r0, [r7, #12]
 8013736:	f7f7 fd2e 	bl	800b196 <mbedtls_mpi_add_abs>
 801373a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 801373c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801373e:	2b00      	cmp	r3, #0

cleanup:
 8013740:	bf00      	nop
    return( ret );
 8013742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8013744:	4618      	mov	r0, r3
 8013746:	3760      	adds	r7, #96	@ 0x60
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}

0801374c <ecp_mod_p192k1>:
/*
 * Fast quasi-reduction modulo p192k1 = 2^192 - R,
 * with R = 2^32 + 2^12 + 2^8 + 2^7 + 2^6 + 2^3 + 1 = 0x0100001119
 */
static int ecp_mod_p192k1( mbedtls_mpi *N )
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b084      	sub	sp, #16
 8013750:	af02      	add	r7, sp, #8
 8013752:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xC9, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

    return( ecp_mod_koblitz( N, Rp, 192 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 8013754:	2300      	movs	r3, #0
 8013756:	9301      	str	r3, [sp, #4]
 8013758:	2300      	movs	r3, #0
 801375a:	9300      	str	r3, [sp, #0]
 801375c:	2300      	movs	r3, #0
 801375e:	2206      	movs	r2, #6
 8013760:	4904      	ldr	r1, [pc, #16]	@ (8013774 <ecp_mod_p192k1+0x28>)
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f7ff fee2 	bl	801352c <ecp_mod_koblitz>
 8013768:	4603      	mov	r3, r0
}
 801376a:	4618      	mov	r0, r3
 801376c:	3708      	adds	r7, #8
 801376e:	46bd      	mov	sp, r7
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	24000034 	.word	0x24000034

08013778 <ecp_mod_p224k1>:
/*
 * Fast quasi-reduction modulo p224k1 = 2^224 - R,
 * with R = 2^32 + 2^12 + 2^11 + 2^9 + 2^7 + 2^4 + 2 + 1 = 0x0100001A93
 */
static int ecp_mod_p224k1( mbedtls_mpi *N )
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b084      	sub	sp, #16
 801377c:	af02      	add	r7, sp, #8
 801377e:	6078      	str	r0, [r7, #4]
        BYTES_TO_T_UINT_8( 0x93, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

#if defined(MBEDTLS_HAVE_INT64)
    return( ecp_mod_koblitz( N, Rp, 4, 1, 32, 0xFFFFFFFF ) );
#else
    return( ecp_mod_koblitz( N, Rp, 224 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 8013780:	2300      	movs	r3, #0
 8013782:	9301      	str	r3, [sp, #4]
 8013784:	2300      	movs	r3, #0
 8013786:	9300      	str	r3, [sp, #0]
 8013788:	2300      	movs	r3, #0
 801378a:	2207      	movs	r2, #7
 801378c:	4904      	ldr	r1, [pc, #16]	@ (80137a0 <ecp_mod_p224k1+0x28>)
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7ff fecc 	bl	801352c <ecp_mod_koblitz>
 8013794:	4603      	mov	r3, r0
#endif
}
 8013796:	4618      	mov	r0, r3
 8013798:	3708      	adds	r7, #8
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}
 801379e:	bf00      	nop
 80137a0:	2400003c 	.word	0x2400003c

080137a4 <ecp_mod_p256k1>:
/*
 * Fast quasi-reduction modulo p256k1 = 2^256 - R,
 * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af02      	add	r7, sp, #8
 80137aa:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 80137ac:	2300      	movs	r3, #0
 80137ae:	9301      	str	r3, [sp, #4]
 80137b0:	2300      	movs	r3, #0
 80137b2:	9300      	str	r3, [sp, #0]
 80137b4:	2300      	movs	r3, #0
 80137b6:	2208      	movs	r2, #8
 80137b8:	4904      	ldr	r1, [pc, #16]	@ (80137cc <ecp_mod_p256k1+0x28>)
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f7ff feb6 	bl	801352c <ecp_mod_koblitz>
 80137c0:	4603      	mov	r3, r0
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3708      	adds	r7, #8
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	24000044 	.word	0x24000044

080137d0 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 80137da:	4b05      	ldr	r3, [pc, #20]	@ (80137f0 <mbedtls_platform_zeroize+0x20>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	683a      	ldr	r2, [r7, #0]
 80137e0:	2100      	movs	r1, #0
 80137e2:	6878      	ldr	r0, [r7, #4]
 80137e4:	4798      	blx	r3
}
 80137e6:	bf00      	nop
 80137e8:	3708      	adds	r7, #8
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	080172f4 	.word	0x080172f4

080137f4 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80137fc:	226c      	movs	r2, #108	@ 0x6c
 80137fe:	2100      	movs	r1, #0
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f002 f90d 	bl	8015a20 <memset>
}
 8013806:	bf00      	nop
 8013808:	3708      	adds	r7, #8
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}

0801380e <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 801380e:	b580      	push	{r7, lr}
 8013810:	b082      	sub	sp, #8
 8013812:	af00      	add	r7, sp, #0
 8013814:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d004      	beq.n	8013826 <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 801381c:	216c      	movs	r1, #108	@ 0x6c
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f7ff ffd6 	bl	80137d0 <mbedtls_platform_zeroize>
 8013824:	e000      	b.n	8013828 <mbedtls_sha256_free+0x1a>
        return;
 8013826:	bf00      	nop
}
 8013828:	3708      	adds	r7, #8
 801382a:	46bd      	mov	sp, r7
 801382c:	bd80      	pop	{r7, pc}
	...

08013830 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8013830:	b480      	push	{r7}
 8013832:	b083      	sub	sp, #12
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	2200      	movs	r2, #0
 801383e:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2200      	movs	r2, #0
 8013844:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d118      	bne.n	801387e <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	4a1d      	ldr	r2, [pc, #116]	@ (80138c4 <mbedtls_sha256_starts_ret+0x94>)
 8013850:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4a1c      	ldr	r2, [pc, #112]	@ (80138c8 <mbedtls_sha256_starts_ret+0x98>)
 8013856:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	4a1c      	ldr	r2, [pc, #112]	@ (80138cc <mbedtls_sha256_starts_ret+0x9c>)
 801385c:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	4a1b      	ldr	r2, [pc, #108]	@ (80138d0 <mbedtls_sha256_starts_ret+0xa0>)
 8013862:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	4a1b      	ldr	r2, [pc, #108]	@ (80138d4 <mbedtls_sha256_starts_ret+0xa4>)
 8013868:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	4a1a      	ldr	r2, [pc, #104]	@ (80138d8 <mbedtls_sha256_starts_ret+0xa8>)
 801386e:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	4a1a      	ldr	r2, [pc, #104]	@ (80138dc <mbedtls_sha256_starts_ret+0xac>)
 8013874:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4a19      	ldr	r2, [pc, #100]	@ (80138e0 <mbedtls_sha256_starts_ret+0xb0>)
 801387a:	625a      	str	r2, [r3, #36]	@ 0x24
 801387c:	e017      	b.n	80138ae <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4a18      	ldr	r2, [pc, #96]	@ (80138e4 <mbedtls_sha256_starts_ret+0xb4>)
 8013882:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	4a18      	ldr	r2, [pc, #96]	@ (80138e8 <mbedtls_sha256_starts_ret+0xb8>)
 8013888:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	4a17      	ldr	r2, [pc, #92]	@ (80138ec <mbedtls_sha256_starts_ret+0xbc>)
 801388e:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	4a17      	ldr	r2, [pc, #92]	@ (80138f0 <mbedtls_sha256_starts_ret+0xc0>)
 8013894:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	4a16      	ldr	r2, [pc, #88]	@ (80138f4 <mbedtls_sha256_starts_ret+0xc4>)
 801389a:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	4a16      	ldr	r2, [pc, #88]	@ (80138f8 <mbedtls_sha256_starts_ret+0xc8>)
 80138a0:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	4a15      	ldr	r2, [pc, #84]	@ (80138fc <mbedtls_sha256_starts_ret+0xcc>)
 80138a6:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	4a15      	ldr	r2, [pc, #84]	@ (8013900 <mbedtls_sha256_starts_ret+0xd0>)
 80138ac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	683a      	ldr	r2, [r7, #0]
 80138b2:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 80138b4:	2300      	movs	r3, #0
}
 80138b6:	4618      	mov	r0, r3
 80138b8:	370c      	adds	r7, #12
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop
 80138c4:	6a09e667 	.word	0x6a09e667
 80138c8:	bb67ae85 	.word	0xbb67ae85
 80138cc:	3c6ef372 	.word	0x3c6ef372
 80138d0:	a54ff53a 	.word	0xa54ff53a
 80138d4:	510e527f 	.word	0x510e527f
 80138d8:	9b05688c 	.word	0x9b05688c
 80138dc:	1f83d9ab 	.word	0x1f83d9ab
 80138e0:	5be0cd19 	.word	0x5be0cd19
 80138e4:	c1059ed8 	.word	0xc1059ed8
 80138e8:	367cd507 	.word	0x367cd507
 80138ec:	3070dd17 	.word	0x3070dd17
 80138f0:	f70e5939 	.word	0xf70e5939
 80138f4:	ffc00b31 	.word	0xffc00b31
 80138f8:	68581511 	.word	0x68581511
 80138fc:	64f98fa7 	.word	0x64f98fa7
 8013900:	befa4fa4 	.word	0xbefa4fa4

08013904 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8013904:	b490      	push	{r4, r7}
 8013906:	b0ce      	sub	sp, #312	@ 0x138
 8013908:	af00      	add	r7, sp, #0
 801390a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801390e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013912:	6018      	str	r0, [r3, #0]
 8013914:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013918:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801391c:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 801391e:	2300      	movs	r3, #0
 8013920:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013924:	e016      	b.n	8013954 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 8013926:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801392a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013934:	3202      	adds	r2, #2
 8013936:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801393a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801393e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013942:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 801394a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801394e:	3301      	adds	r3, #1
 8013950:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013954:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013958:	2b07      	cmp	r3, #7
 801395a:	d9e4      	bls.n	8013926 <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 801395c:	2300      	movs	r3, #0
 801395e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013962:	e03e      	b.n	80139e2 <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8013964:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801396e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8013972:	6812      	ldr	r2, [r2, #0]
 8013974:	4413      	add	r3, r2
 8013976:	781b      	ldrb	r3, [r3, #0]
 8013978:	061a      	lsls	r2, r3, #24
 801397a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801397e:	009b      	lsls	r3, r3, #2
 8013980:	3301      	adds	r3, #1
 8013982:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8013986:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 801398a:	6809      	ldr	r1, [r1, #0]
 801398c:	440b      	add	r3, r1
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	041b      	lsls	r3, r3, #16
 8013992:	431a      	orrs	r2, r3
 8013994:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013998:	009b      	lsls	r3, r3, #2
 801399a:	3302      	adds	r3, #2
 801399c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80139a0:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80139a4:	6809      	ldr	r1, [r1, #0]
 80139a6:	440b      	add	r3, r1
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	021b      	lsls	r3, r3, #8
 80139ac:	4313      	orrs	r3, r2
 80139ae:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80139b2:	0092      	lsls	r2, r2, #2
 80139b4:	3203      	adds	r2, #3
 80139b6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80139ba:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80139be:	6809      	ldr	r1, [r1, #0]
 80139c0:	440a      	add	r2, r1
 80139c2:	7812      	ldrb	r2, [r2, #0]
 80139c4:	ea43 0102 	orr.w	r1, r3, r2
 80139c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80139d0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80139d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 80139d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80139dc:	3301      	adds	r3, #1
 80139de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80139e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80139e6:	2b0f      	cmp	r3, #15
 80139e8:	d9bc      	bls.n	8013964 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 80139ea:	2300      	movs	r3, #0
 80139ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80139f0:	f000 bcba 	b.w	8014368 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80139f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139fc:	69da      	ldr	r2, [r3, #28]
 80139fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a06:	691b      	ldr	r3, [r3, #16]
 8013a08:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013a0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a14:	691b      	ldr	r3, [r3, #16]
 8013a16:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013a1a:	4059      	eors	r1, r3
 8013a1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a24:	691b      	ldr	r3, [r3, #16]
 8013a26:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013a2a:	404b      	eors	r3, r1
 8013a2c:	441a      	add	r2, r3
 8013a2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a36:	6999      	ldr	r1, [r3, #24]
 8013a38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a40:	6918      	ldr	r0, [r3, #16]
 8013a42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a4a:	695c      	ldr	r4, [r3, #20]
 8013a4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a50:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a54:	699b      	ldr	r3, [r3, #24]
 8013a56:	4063      	eors	r3, r4
 8013a58:	4003      	ands	r3, r0
 8013a5a:	404b      	eors	r3, r1
 8013a5c:	441a      	add	r2, r3
 8013a5e:	49e0      	ldr	r1, [pc, #896]	@ (8013de0 <mbedtls_internal_sha256_process+0x4dc>)
 8013a60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013a64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013a68:	441a      	add	r2, r3
 8013a6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a6e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013a72:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8013a76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a7a:	4413      	add	r3, r2
 8013a7c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013a80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013a8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013a9c:	405a      	eors	r2, r3
 8013a9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013aa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013aac:	405a      	eors	r2, r3
 8013aae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ab2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ab6:	6819      	ldr	r1, [r3, #0]
 8013ab8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013abc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	4019      	ands	r1, r3
 8013ac4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ac8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013acc:	6898      	ldr	r0, [r3, #8]
 8013ace:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ad2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ad6:	681c      	ldr	r4, [r3, #0]
 8013ad8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013adc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	4323      	orrs	r3, r4
 8013ae4:	4003      	ands	r3, r0
 8013ae6:	430b      	orrs	r3, r1
 8013ae8:	4413      	add	r3, r2
 8013aea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013aee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013af2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013af6:	68da      	ldr	r2, [r3, #12]
 8013af8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013afc:	441a      	add	r2, r3
 8013afe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b06:	60da      	str	r2, [r3, #12]
 8013b08:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013b10:	441a      	add	r2, r3
 8013b12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b1a:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8013b1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b24:	699a      	ldr	r2, [r3, #24]
 8013b26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b2e:	68db      	ldr	r3, [r3, #12]
 8013b30:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013b34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b3c:	68db      	ldr	r3, [r3, #12]
 8013b3e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013b42:	4059      	eors	r1, r3
 8013b44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b4c:	68db      	ldr	r3, [r3, #12]
 8013b4e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013b52:	404b      	eors	r3, r1
 8013b54:	441a      	add	r2, r3
 8013b56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b5e:	6959      	ldr	r1, [r3, #20]
 8013b60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b68:	68d8      	ldr	r0, [r3, #12]
 8013b6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b72:	691c      	ldr	r4, [r3, #16]
 8013b74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b7c:	695b      	ldr	r3, [r3, #20]
 8013b7e:	4063      	eors	r3, r4
 8013b80:	4003      	ands	r3, r0
 8013b82:	404b      	eors	r3, r1
 8013b84:	441a      	add	r2, r3
 8013b86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	4994      	ldr	r1, [pc, #592]	@ (8013de0 <mbedtls_internal_sha256_process+0x4dc>)
 8013b8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013b92:	441a      	add	r2, r3
 8013b94:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013b98:	1c59      	adds	r1, r3, #1
 8013b9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013ba2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013ba6:	4413      	add	r3, r2
 8013ba8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013bac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bb4:	69db      	ldr	r3, [r3, #28]
 8013bb6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013bba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bbe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bc2:	69db      	ldr	r3, [r3, #28]
 8013bc4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013bc8:	405a      	eors	r2, r3
 8013bca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bd2:	69db      	ldr	r3, [r3, #28]
 8013bd4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013bd8:	405a      	eors	r2, r3
 8013bda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013be2:	69d9      	ldr	r1, [r3, #28]
 8013be4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013be8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	4019      	ands	r1, r3
 8013bf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bf4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bf8:	6858      	ldr	r0, [r3, #4]
 8013bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c02:	69dc      	ldr	r4, [r3, #28]
 8013c04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	4323      	orrs	r3, r4
 8013c10:	4003      	ands	r3, r0
 8013c12:	430b      	orrs	r3, r1
 8013c14:	4413      	add	r3, r2
 8013c16:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013c1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c22:	689a      	ldr	r2, [r3, #8]
 8013c24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013c28:	441a      	add	r2, r3
 8013c2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c32:	609a      	str	r2, [r3, #8]
 8013c34:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013c3c:	441a      	add	r2, r3
 8013c3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c46:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8013c48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c50:	695a      	ldr	r2, [r3, #20]
 8013c52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c5a:	689b      	ldr	r3, [r3, #8]
 8013c5c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013c60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c68:	689b      	ldr	r3, [r3, #8]
 8013c6a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013c6e:	4059      	eors	r1, r3
 8013c70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c78:	689b      	ldr	r3, [r3, #8]
 8013c7a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013c7e:	404b      	eors	r3, r1
 8013c80:	441a      	add	r2, r3
 8013c82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c8a:	6919      	ldr	r1, [r3, #16]
 8013c8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c94:	6898      	ldr	r0, [r3, #8]
 8013c96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c9e:	68dc      	ldr	r4, [r3, #12]
 8013ca0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ca4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ca8:	691b      	ldr	r3, [r3, #16]
 8013caa:	4063      	eors	r3, r4
 8013cac:	4003      	ands	r3, r0
 8013cae:	404b      	eors	r3, r1
 8013cb0:	441a      	add	r2, r3
 8013cb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013cb6:	3302      	adds	r3, #2
 8013cb8:	4949      	ldr	r1, [pc, #292]	@ (8013de0 <mbedtls_internal_sha256_process+0x4dc>)
 8013cba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013cbe:	441a      	add	r2, r3
 8013cc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013cc4:	1c99      	adds	r1, r3, #2
 8013cc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013cce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013cd2:	4413      	add	r3, r2
 8013cd4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013cd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ce0:	699b      	ldr	r3, [r3, #24]
 8013ce2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013ce6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cee:	699b      	ldr	r3, [r3, #24]
 8013cf0:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013cf4:	405a      	eors	r2, r3
 8013cf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cfe:	699b      	ldr	r3, [r3, #24]
 8013d00:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013d04:	405a      	eors	r2, r3
 8013d06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d0e:	6999      	ldr	r1, [r3, #24]
 8013d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d18:	69db      	ldr	r3, [r3, #28]
 8013d1a:	4019      	ands	r1, r3
 8013d1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d24:	6818      	ldr	r0, [r3, #0]
 8013d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d2e:	699c      	ldr	r4, [r3, #24]
 8013d30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d38:	69db      	ldr	r3, [r3, #28]
 8013d3a:	4323      	orrs	r3, r4
 8013d3c:	4003      	ands	r3, r0
 8013d3e:	430b      	orrs	r3, r1
 8013d40:	4413      	add	r3, r2
 8013d42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013d46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d4e:	685a      	ldr	r2, [r3, #4]
 8013d50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013d54:	441a      	add	r2, r3
 8013d56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d5a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d5e:	605a      	str	r2, [r3, #4]
 8013d60:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013d68:	441a      	add	r2, r3
 8013d6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d72:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8013d74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d7c:	691a      	ldr	r2, [r3, #16]
 8013d7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d86:	685b      	ldr	r3, [r3, #4]
 8013d88:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013d8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013d9a:	4059      	eors	r1, r3
 8013d9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013da0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013daa:	404b      	eors	r3, r1
 8013dac:	441a      	add	r2, r3
 8013dae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013db2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013db6:	68d9      	ldr	r1, [r3, #12]
 8013db8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013dc0:	6858      	ldr	r0, [r3, #4]
 8013dc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013dca:	689c      	ldr	r4, [r3, #8]
 8013dcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013dd4:	68db      	ldr	r3, [r3, #12]
 8013dd6:	4063      	eors	r3, r4
 8013dd8:	4003      	ands	r3, r0
 8013dda:	404b      	eors	r3, r1
 8013ddc:	441a      	add	r2, r3
 8013dde:	e001      	b.n	8013de4 <mbedtls_internal_sha256_process+0x4e0>
 8013de0:	080172f8 	.word	0x080172f8
 8013de4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013de8:	3303      	adds	r3, #3
 8013dea:	49e0      	ldr	r1, [pc, #896]	@ (801416c <mbedtls_internal_sha256_process+0x868>)
 8013dec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013df0:	441a      	add	r2, r3
 8013df2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013df6:	1cd9      	adds	r1, r3, #3
 8013df8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dfc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013e00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013e04:	4413      	add	r3, r2
 8013e06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013e0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e12:	695b      	ldr	r3, [r3, #20]
 8013e14:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013e18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e20:	695b      	ldr	r3, [r3, #20]
 8013e22:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013e26:	405a      	eors	r2, r3
 8013e28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e30:	695b      	ldr	r3, [r3, #20]
 8013e32:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013e36:	405a      	eors	r2, r3
 8013e38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e40:	6959      	ldr	r1, [r3, #20]
 8013e42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e4a:	699b      	ldr	r3, [r3, #24]
 8013e4c:	4019      	ands	r1, r3
 8013e4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e56:	69d8      	ldr	r0, [r3, #28]
 8013e58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e60:	695c      	ldr	r4, [r3, #20]
 8013e62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e6a:	699b      	ldr	r3, [r3, #24]
 8013e6c:	4323      	orrs	r3, r4
 8013e6e:	4003      	ands	r3, r0
 8013e70:	430b      	orrs	r3, r1
 8013e72:	4413      	add	r3, r2
 8013e74:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013e78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e80:	681a      	ldr	r2, [r3, #0]
 8013e82:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013e86:	441a      	add	r2, r3
 8013e88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e90:	601a      	str	r2, [r3, #0]
 8013e92:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013e9a:	441a      	add	r2, r3
 8013e9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ea0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ea4:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8013ea6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013eaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013eae:	68da      	ldr	r2, [r3, #12]
 8013eb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013eb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013ebe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ec2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013ecc:	4059      	eors	r1, r3
 8013ece:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ed2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013edc:	404b      	eors	r3, r1
 8013ede:	441a      	add	r2, r3
 8013ee0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ee4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ee8:	6899      	ldr	r1, [r3, #8]
 8013eea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013eee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ef2:	6818      	ldr	r0, [r3, #0]
 8013ef4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ef8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013efc:	685c      	ldr	r4, [r3, #4]
 8013efe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f06:	689b      	ldr	r3, [r3, #8]
 8013f08:	4063      	eors	r3, r4
 8013f0a:	4003      	ands	r3, r0
 8013f0c:	404b      	eors	r3, r1
 8013f0e:	441a      	add	r2, r3
 8013f10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013f14:	3304      	adds	r3, #4
 8013f16:	4995      	ldr	r1, [pc, #596]	@ (801416c <mbedtls_internal_sha256_process+0x868>)
 8013f18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013f1c:	441a      	add	r2, r3
 8013f1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013f22:	1d19      	adds	r1, r3, #4
 8013f24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f28:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013f2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013f30:	4413      	add	r3, r2
 8013f32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f3e:	691b      	ldr	r3, [r3, #16]
 8013f40:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013f44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f4c:	691b      	ldr	r3, [r3, #16]
 8013f4e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013f52:	405a      	eors	r2, r3
 8013f54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f5c:	691b      	ldr	r3, [r3, #16]
 8013f5e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013f62:	405a      	eors	r2, r3
 8013f64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f6c:	6919      	ldr	r1, [r3, #16]
 8013f6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f76:	695b      	ldr	r3, [r3, #20]
 8013f78:	4019      	ands	r1, r3
 8013f7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f82:	6998      	ldr	r0, [r3, #24]
 8013f84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f8c:	691c      	ldr	r4, [r3, #16]
 8013f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f96:	695b      	ldr	r3, [r3, #20]
 8013f98:	4323      	orrs	r3, r4
 8013f9a:	4003      	ands	r3, r0
 8013f9c:	430b      	orrs	r3, r1
 8013f9e:	4413      	add	r3, r2
 8013fa0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013fa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fa8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fac:	69da      	ldr	r2, [r3, #28]
 8013fae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013fb2:	441a      	add	r2, r3
 8013fb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fbc:	61da      	str	r2, [r3, #28]
 8013fbe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013fc6:	441a      	add	r2, r3
 8013fc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fd0:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8013fd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fda:	689a      	ldr	r2, [r3, #8]
 8013fdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fe0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fe4:	69db      	ldr	r3, [r3, #28]
 8013fe6:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013fea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ff2:	69db      	ldr	r3, [r3, #28]
 8013ff4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013ff8:	4059      	eors	r1, r3
 8013ffa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ffe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014002:	69db      	ldr	r3, [r3, #28]
 8014004:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014008:	404b      	eors	r3, r1
 801400a:	441a      	add	r2, r3
 801400c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014010:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014014:	6859      	ldr	r1, [r3, #4]
 8014016:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801401a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801401e:	69d8      	ldr	r0, [r3, #28]
 8014020:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014024:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014028:	681c      	ldr	r4, [r3, #0]
 801402a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801402e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	4063      	eors	r3, r4
 8014036:	4003      	ands	r3, r0
 8014038:	404b      	eors	r3, r1
 801403a:	441a      	add	r2, r3
 801403c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014040:	3305      	adds	r3, #5
 8014042:	494a      	ldr	r1, [pc, #296]	@ (801416c <mbedtls_internal_sha256_process+0x868>)
 8014044:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014048:	441a      	add	r2, r3
 801404a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801404e:	1d59      	adds	r1, r3, #5
 8014050:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014054:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014058:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801405c:	4413      	add	r3, r2
 801405e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014066:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801406a:	68db      	ldr	r3, [r3, #12]
 801406c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014070:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014074:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014078:	68db      	ldr	r3, [r3, #12]
 801407a:	ea4f 3373 	mov.w	r3, r3, ror #13
 801407e:	405a      	eors	r2, r3
 8014080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014084:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801408e:	405a      	eors	r2, r3
 8014090:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014094:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014098:	68d9      	ldr	r1, [r3, #12]
 801409a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801409e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140a2:	691b      	ldr	r3, [r3, #16]
 80140a4:	4019      	ands	r1, r3
 80140a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140ae:	6958      	ldr	r0, [r3, #20]
 80140b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140b8:	68dc      	ldr	r4, [r3, #12]
 80140ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140c2:	691b      	ldr	r3, [r3, #16]
 80140c4:	4323      	orrs	r3, r4
 80140c6:	4003      	ands	r3, r0
 80140c8:	430b      	orrs	r3, r1
 80140ca:	4413      	add	r3, r2
 80140cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80140d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140d8:	699a      	ldr	r2, [r3, #24]
 80140da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80140de:	441a      	add	r2, r3
 80140e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140e8:	619a      	str	r2, [r3, #24]
 80140ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80140ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80140f2:	441a      	add	r2, r3
 80140f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140fc:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80140fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014102:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014106:	685a      	ldr	r2, [r3, #4]
 8014108:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801410c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014110:	699b      	ldr	r3, [r3, #24]
 8014112:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014116:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801411a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801411e:	699b      	ldr	r3, [r3, #24]
 8014120:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014124:	4059      	eors	r1, r3
 8014126:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801412a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801412e:	699b      	ldr	r3, [r3, #24]
 8014130:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014134:	404b      	eors	r3, r1
 8014136:	441a      	add	r2, r3
 8014138:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801413c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014140:	6819      	ldr	r1, [r3, #0]
 8014142:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014146:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801414a:	6998      	ldr	r0, [r3, #24]
 801414c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014150:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014154:	69dc      	ldr	r4, [r3, #28]
 8014156:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801415a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	4063      	eors	r3, r4
 8014162:	4003      	ands	r3, r0
 8014164:	404b      	eors	r3, r1
 8014166:	441a      	add	r2, r3
 8014168:	e002      	b.n	8014170 <mbedtls_internal_sha256_process+0x86c>
 801416a:	bf00      	nop
 801416c:	080172f8 	.word	0x080172f8
 8014170:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014174:	3306      	adds	r3, #6
 8014176:	4981      	ldr	r1, [pc, #516]	@ (801437c <mbedtls_internal_sha256_process+0xa78>)
 8014178:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801417c:	441a      	add	r2, r3
 801417e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014182:	1d99      	adds	r1, r3, #6
 8014184:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014188:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801418c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014190:	4413      	add	r3, r2
 8014192:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014196:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801419a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801419e:	689b      	ldr	r3, [r3, #8]
 80141a0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80141a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141ac:	689b      	ldr	r3, [r3, #8]
 80141ae:	ea4f 3373 	mov.w	r3, r3, ror #13
 80141b2:	405a      	eors	r2, r3
 80141b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141bc:	689b      	ldr	r3, [r3, #8]
 80141be:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80141c2:	405a      	eors	r2, r3
 80141c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141cc:	6899      	ldr	r1, [r3, #8]
 80141ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141d6:	68db      	ldr	r3, [r3, #12]
 80141d8:	4019      	ands	r1, r3
 80141da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141e2:	6918      	ldr	r0, [r3, #16]
 80141e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141ec:	689c      	ldr	r4, [r3, #8]
 80141ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141f6:	68db      	ldr	r3, [r3, #12]
 80141f8:	4323      	orrs	r3, r4
 80141fa:	4003      	ands	r3, r0
 80141fc:	430b      	orrs	r3, r1
 80141fe:	4413      	add	r3, r2
 8014200:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014204:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014208:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801420c:	695a      	ldr	r2, [r3, #20]
 801420e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014212:	441a      	add	r2, r3
 8014214:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014218:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801421c:	615a      	str	r2, [r3, #20]
 801421e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014222:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014226:	441a      	add	r2, r3
 8014228:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801422c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014230:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8014232:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014236:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801423a:	681a      	ldr	r2, [r3, #0]
 801423c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014240:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014244:	695b      	ldr	r3, [r3, #20]
 8014246:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801424a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801424e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014252:	695b      	ldr	r3, [r3, #20]
 8014254:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014258:	4059      	eors	r1, r3
 801425a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801425e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014262:	695b      	ldr	r3, [r3, #20]
 8014264:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014268:	404b      	eors	r3, r1
 801426a:	441a      	add	r2, r3
 801426c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014270:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014274:	69d9      	ldr	r1, [r3, #28]
 8014276:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801427a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801427e:	6958      	ldr	r0, [r3, #20]
 8014280:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014284:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014288:	699c      	ldr	r4, [r3, #24]
 801428a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801428e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014292:	69db      	ldr	r3, [r3, #28]
 8014294:	4063      	eors	r3, r4
 8014296:	4003      	ands	r3, r0
 8014298:	404b      	eors	r3, r1
 801429a:	441a      	add	r2, r3
 801429c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80142a0:	3307      	adds	r3, #7
 80142a2:	4936      	ldr	r1, [pc, #216]	@ (801437c <mbedtls_internal_sha256_process+0xa78>)
 80142a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80142a8:	441a      	add	r2, r3
 80142aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80142ae:	1dd9      	adds	r1, r3, #7
 80142b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80142b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80142bc:	4413      	add	r3, r2
 80142be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80142c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142ca:	685b      	ldr	r3, [r3, #4]
 80142cc:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80142d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	ea4f 3373 	mov.w	r3, r3, ror #13
 80142de:	405a      	eors	r2, r3
 80142e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80142ee:	405a      	eors	r2, r3
 80142f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142f8:	6859      	ldr	r1, [r3, #4]
 80142fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014302:	689b      	ldr	r3, [r3, #8]
 8014304:	4019      	ands	r1, r3
 8014306:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801430a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801430e:	68d8      	ldr	r0, [r3, #12]
 8014310:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014314:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014318:	685c      	ldr	r4, [r3, #4]
 801431a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801431e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014322:	689b      	ldr	r3, [r3, #8]
 8014324:	4323      	orrs	r3, r4
 8014326:	4003      	ands	r3, r0
 8014328:	430b      	orrs	r3, r1
 801432a:	4413      	add	r3, r2
 801432c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014330:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014334:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014338:	691a      	ldr	r2, [r3, #16]
 801433a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801433e:	441a      	add	r2, r3
 8014340:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014344:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014348:	611a      	str	r2, [r3, #16]
 801434a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801434e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014352:	441a      	add	r2, r3
 8014354:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014358:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801435c:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 801435e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014362:	3308      	adds	r3, #8
 8014364:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8014368:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801436c:	2b0f      	cmp	r3, #15
 801436e:	f67f ab41 	bls.w	80139f4 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 8014372:	2310      	movs	r3, #16
 8014374:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8014378:	f000 bfd5 	b.w	8015326 <mbedtls_internal_sha256_process+0x1a22>
 801437c:	080172f8 	.word	0x080172f8
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 8014380:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014384:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014388:	69da      	ldr	r2, [r3, #28]
 801438a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801438e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014392:	691b      	ldr	r3, [r3, #16]
 8014394:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014398:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801439c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80143a0:	691b      	ldr	r3, [r3, #16]
 80143a2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80143a6:	4059      	eors	r1, r3
 80143a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80143b0:	691b      	ldr	r3, [r3, #16]
 80143b2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80143b6:	404b      	eors	r3, r1
 80143b8:	441a      	add	r2, r3
 80143ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80143c2:	6999      	ldr	r1, [r3, #24]
 80143c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80143cc:	6918      	ldr	r0, [r3, #16]
 80143ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80143d6:	695c      	ldr	r4, [r3, #20]
 80143d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80143e0:	699b      	ldr	r3, [r3, #24]
 80143e2:	4063      	eors	r3, r4
 80143e4:	4003      	ands	r3, r0
 80143e6:	404b      	eors	r3, r1
 80143e8:	441a      	add	r2, r3
 80143ea:	49ec      	ldr	r1, [pc, #944]	@ (801479c <mbedtls_internal_sha256_process+0xe98>)
 80143ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80143f4:	441a      	add	r2, r3
 80143f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143fa:	1e99      	subs	r1, r3, #2
 80143fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014400:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014404:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014408:	ea4f 4173 	mov.w	r1, r3, ror #17
 801440c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014410:	1e98      	subs	r0, r3, #2
 8014412:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801441a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801441e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014422:	4059      	eors	r1, r3
 8014424:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014428:	1e98      	subs	r0, r3, #2
 801442a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801442e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014432:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014436:	0a9b      	lsrs	r3, r3, #10
 8014438:	4059      	eors	r1, r3
 801443a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801443e:	1fd8      	subs	r0, r3, #7
 8014440:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014444:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014448:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801444c:	4419      	add	r1, r3
 801444e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014452:	f1a3 000f 	sub.w	r0, r3, #15
 8014456:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801445a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801445e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014462:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014466:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801446a:	f1a3 040f 	sub.w	r4, r3, #15
 801446e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014472:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014476:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801447a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801447e:	4058      	eors	r0, r3
 8014480:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014484:	f1a3 040f 	sub.w	r4, r3, #15
 8014488:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801448c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014490:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014494:	08db      	lsrs	r3, r3, #3
 8014496:	4043      	eors	r3, r0
 8014498:	4419      	add	r1, r3
 801449a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801449e:	f1a3 0010 	sub.w	r0, r3, #16
 80144a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80144aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80144ae:	18c8      	adds	r0, r1, r3
 80144b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144b4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80144b8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80144bc:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 80144c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80144c8:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80144cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80144d0:	4413      	add	r3, r2
 80144d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80144d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80144e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	ea4f 3373 	mov.w	r3, r3, ror #13
 80144f2:	405a      	eors	r2, r3
 80144f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014502:	405a      	eors	r2, r3
 8014504:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014508:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801450c:	6819      	ldr	r1, [r3, #0]
 801450e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014512:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014516:	685b      	ldr	r3, [r3, #4]
 8014518:	4019      	ands	r1, r3
 801451a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801451e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014522:	6898      	ldr	r0, [r3, #8]
 8014524:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014528:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801452c:	681c      	ldr	r4, [r3, #0]
 801452e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014532:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014536:	685b      	ldr	r3, [r3, #4]
 8014538:	4323      	orrs	r3, r4
 801453a:	4003      	ands	r3, r0
 801453c:	430b      	orrs	r3, r1
 801453e:	4413      	add	r3, r2
 8014540:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014544:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014548:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801454c:	68da      	ldr	r2, [r3, #12]
 801454e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014552:	441a      	add	r2, r3
 8014554:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014558:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801455c:	60da      	str	r2, [r3, #12]
 801455e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014562:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014566:	441a      	add	r2, r3
 8014568:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801456c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014570:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 8014572:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014576:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801457a:	699a      	ldr	r2, [r3, #24]
 801457c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014580:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014584:	68db      	ldr	r3, [r3, #12]
 8014586:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801458a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801458e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014592:	68db      	ldr	r3, [r3, #12]
 8014594:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014598:	4059      	eors	r1, r3
 801459a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801459e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	ea4f 6373 	mov.w	r3, r3, ror #25
 80145a8:	404b      	eors	r3, r1
 80145aa:	441a      	add	r2, r3
 80145ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80145b4:	6959      	ldr	r1, [r3, #20]
 80145b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80145be:	68d8      	ldr	r0, [r3, #12]
 80145c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80145c8:	691c      	ldr	r4, [r3, #16]
 80145ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80145d2:	695b      	ldr	r3, [r3, #20]
 80145d4:	4063      	eors	r3, r4
 80145d6:	4003      	ands	r3, r0
 80145d8:	404b      	eors	r3, r1
 80145da:	441a      	add	r2, r3
 80145dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145e0:	3301      	adds	r3, #1
 80145e2:	496e      	ldr	r1, [pc, #440]	@ (801479c <mbedtls_internal_sha256_process+0xe98>)
 80145e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80145e8:	441a      	add	r2, r3
 80145ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145ee:	1e59      	subs	r1, r3, #1
 80145f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80145f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145fc:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014600:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014604:	1e58      	subs	r0, r3, #1
 8014606:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801460a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801460e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014612:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014616:	4059      	eors	r1, r3
 8014618:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801461c:	1e58      	subs	r0, r3, #1
 801461e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014622:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014626:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801462a:	0a9b      	lsrs	r3, r3, #10
 801462c:	4059      	eors	r1, r3
 801462e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014632:	1f98      	subs	r0, r3, #6
 8014634:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014638:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801463c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014640:	4419      	add	r1, r3
 8014642:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014646:	f1a3 000e 	sub.w	r0, r3, #14
 801464a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801464e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014652:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014656:	ea4f 10f3 	mov.w	r0, r3, ror #7
 801465a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801465e:	f1a3 040e 	sub.w	r4, r3, #14
 8014662:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014666:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801466a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801466e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014672:	4058      	eors	r0, r3
 8014674:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014678:	f1a3 040e 	sub.w	r4, r3, #14
 801467c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014680:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014684:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014688:	08db      	lsrs	r3, r3, #3
 801468a:	4043      	eors	r3, r0
 801468c:	18c8      	adds	r0, r1, r3
 801468e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014692:	f1a3 010f 	sub.w	r1, r3, #15
 8014696:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801469a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801469e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80146a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80146a6:	3301      	adds	r3, #1
 80146a8:	4408      	add	r0, r1
 80146aa:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80146ae:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80146b2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80146b6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80146ba:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80146be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80146c2:	4413      	add	r3, r2
 80146c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80146c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146d0:	69db      	ldr	r3, [r3, #28]
 80146d2:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80146d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146de:	69db      	ldr	r3, [r3, #28]
 80146e0:	ea4f 3373 	mov.w	r3, r3, ror #13
 80146e4:	405a      	eors	r2, r3
 80146e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146ee:	69db      	ldr	r3, [r3, #28]
 80146f0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80146f4:	405a      	eors	r2, r3
 80146f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146fe:	69d9      	ldr	r1, [r3, #28]
 8014700:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014704:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	4019      	ands	r1, r3
 801470c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014710:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014714:	6858      	ldr	r0, [r3, #4]
 8014716:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801471a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801471e:	69dc      	ldr	r4, [r3, #28]
 8014720:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014724:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	4323      	orrs	r3, r4
 801472c:	4003      	ands	r3, r0
 801472e:	430b      	orrs	r3, r1
 8014730:	4413      	add	r3, r2
 8014732:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014736:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801473a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801473e:	689a      	ldr	r2, [r3, #8]
 8014740:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014744:	441a      	add	r2, r3
 8014746:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801474a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801474e:	609a      	str	r2, [r3, #8]
 8014750:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014754:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014758:	441a      	add	r2, r3
 801475a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801475e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014762:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8014764:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014768:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801476c:	695a      	ldr	r2, [r3, #20]
 801476e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014772:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014776:	689b      	ldr	r3, [r3, #8]
 8014778:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801477c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014780:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014784:	689b      	ldr	r3, [r3, #8]
 8014786:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801478a:	4059      	eors	r1, r3
 801478c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014790:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014794:	689b      	ldr	r3, [r3, #8]
 8014796:	ea4f 6373 	mov.w	r3, r3, ror #25
 801479a:	e001      	b.n	80147a0 <mbedtls_internal_sha256_process+0xe9c>
 801479c:	080172f8 	.word	0x080172f8
 80147a0:	404b      	eors	r3, r1
 80147a2:	441a      	add	r2, r3
 80147a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80147ac:	6919      	ldr	r1, [r3, #16]
 80147ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80147b6:	6898      	ldr	r0, [r3, #8]
 80147b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80147c0:	68dc      	ldr	r4, [r3, #12]
 80147c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80147ca:	691b      	ldr	r3, [r3, #16]
 80147cc:	4063      	eors	r3, r4
 80147ce:	4003      	ands	r3, r0
 80147d0:	404b      	eors	r3, r1
 80147d2:	441a      	add	r2, r3
 80147d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80147d8:	3302      	adds	r3, #2
 80147da:	49ec      	ldr	r1, [pc, #944]	@ (8014b8c <mbedtls_internal_sha256_process+0x1288>)
 80147dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80147e0:	441a      	add	r2, r3
 80147e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147ea:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80147ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80147f2:	ea4f 4173 	mov.w	r1, r3, ror #17
 80147f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147fe:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8014802:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014806:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801480a:	4059      	eors	r1, r3
 801480c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014810:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014814:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8014818:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801481c:	0a9b      	lsrs	r3, r3, #10
 801481e:	4059      	eors	r1, r3
 8014820:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014824:	1f58      	subs	r0, r3, #5
 8014826:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801482a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801482e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014832:	4419      	add	r1, r3
 8014834:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014838:	f1a3 000d 	sub.w	r0, r3, #13
 801483c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014840:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014844:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014848:	ea4f 10f3 	mov.w	r0, r3, ror #7
 801484c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014850:	f1a3 040d 	sub.w	r4, r3, #13
 8014854:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014858:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801485c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014860:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014864:	4058      	eors	r0, r3
 8014866:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801486a:	f1a3 040d 	sub.w	r4, r3, #13
 801486e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014872:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014876:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801487a:	08db      	lsrs	r3, r3, #3
 801487c:	4043      	eors	r3, r0
 801487e:	18c8      	adds	r0, r1, r3
 8014880:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014884:	f1a3 010e 	sub.w	r1, r3, #14
 8014888:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801488c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014890:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014894:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014898:	3302      	adds	r3, #2
 801489a:	4408      	add	r0, r1
 801489c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80148a0:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80148a4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80148a8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80148ac:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80148b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80148b4:	4413      	add	r3, r2
 80148b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80148ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148c2:	699b      	ldr	r3, [r3, #24]
 80148c4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80148c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148d0:	699b      	ldr	r3, [r3, #24]
 80148d2:	ea4f 3373 	mov.w	r3, r3, ror #13
 80148d6:	405a      	eors	r2, r3
 80148d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148e0:	699b      	ldr	r3, [r3, #24]
 80148e2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80148e6:	405a      	eors	r2, r3
 80148e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148f0:	6999      	ldr	r1, [r3, #24]
 80148f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148fa:	69db      	ldr	r3, [r3, #28]
 80148fc:	4019      	ands	r1, r3
 80148fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014902:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014906:	6818      	ldr	r0, [r3, #0]
 8014908:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801490c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014910:	699c      	ldr	r4, [r3, #24]
 8014912:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014916:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801491a:	69db      	ldr	r3, [r3, #28]
 801491c:	4323      	orrs	r3, r4
 801491e:	4003      	ands	r3, r0
 8014920:	430b      	orrs	r3, r1
 8014922:	4413      	add	r3, r2
 8014924:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014928:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801492c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014930:	685a      	ldr	r2, [r3, #4]
 8014932:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014936:	441a      	add	r2, r3
 8014938:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801493c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014940:	605a      	str	r2, [r3, #4]
 8014942:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014946:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801494a:	441a      	add	r2, r3
 801494c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014950:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014954:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8014956:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801495a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801495e:	691a      	ldr	r2, [r3, #16]
 8014960:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014964:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801496e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014972:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014976:	685b      	ldr	r3, [r3, #4]
 8014978:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801497c:	4059      	eors	r1, r3
 801497e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014982:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	ea4f 6373 	mov.w	r3, r3, ror #25
 801498c:	404b      	eors	r3, r1
 801498e:	441a      	add	r2, r3
 8014990:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014994:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014998:	68d9      	ldr	r1, [r3, #12]
 801499a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801499e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80149a2:	6858      	ldr	r0, [r3, #4]
 80149a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80149ac:	689c      	ldr	r4, [r3, #8]
 80149ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80149b6:	68db      	ldr	r3, [r3, #12]
 80149b8:	4063      	eors	r3, r4
 80149ba:	4003      	ands	r3, r0
 80149bc:	404b      	eors	r3, r1
 80149be:	441a      	add	r2, r3
 80149c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149c4:	3303      	adds	r3, #3
 80149c6:	4971      	ldr	r1, [pc, #452]	@ (8014b8c <mbedtls_internal_sha256_process+0x1288>)
 80149c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80149cc:	441a      	add	r2, r3
 80149ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149d2:	1c59      	adds	r1, r3, #1
 80149d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80149dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80149e0:	ea4f 4173 	mov.w	r1, r3, ror #17
 80149e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149e8:	1c58      	adds	r0, r3, #1
 80149ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80149f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80149f6:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80149fa:	4059      	eors	r1, r3
 80149fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a00:	1c58      	adds	r0, r3, #1
 8014a02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014a0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014a0e:	0a9b      	lsrs	r3, r3, #10
 8014a10:	4059      	eors	r1, r3
 8014a12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a16:	1f18      	subs	r0, r3, #4
 8014a18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014a20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014a24:	4419      	add	r1, r3
 8014a26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a2a:	f1a3 000c 	sub.w	r0, r3, #12
 8014a2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014a36:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014a3a:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014a3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a42:	f1a3 040c 	sub.w	r4, r3, #12
 8014a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014a4e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014a52:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014a56:	4058      	eors	r0, r3
 8014a58:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a5c:	f1a3 040c 	sub.w	r4, r3, #12
 8014a60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014a68:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014a6c:	08db      	lsrs	r3, r3, #3
 8014a6e:	4043      	eors	r3, r0
 8014a70:	18c8      	adds	r0, r1, r3
 8014a72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a76:	f1a3 010d 	sub.w	r1, r3, #13
 8014a7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014a82:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014a86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a8a:	3303      	adds	r3, #3
 8014a8c:	4408      	add	r0, r1
 8014a8e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014a92:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014a96:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014a9a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014a9e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014aa2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014aa6:	4413      	add	r3, r2
 8014aa8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014aac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ab0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ab4:	695b      	ldr	r3, [r3, #20]
 8014ab6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014aba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014abe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ac2:	695b      	ldr	r3, [r3, #20]
 8014ac4:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014ac8:	405a      	eors	r2, r3
 8014aca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ace:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ad2:	695b      	ldr	r3, [r3, #20]
 8014ad4:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014ad8:	405a      	eors	r2, r3
 8014ada:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ade:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ae2:	6959      	ldr	r1, [r3, #20]
 8014ae4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ae8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014aec:	699b      	ldr	r3, [r3, #24]
 8014aee:	4019      	ands	r1, r3
 8014af0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014af4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014af8:	69d8      	ldr	r0, [r3, #28]
 8014afa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014afe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b02:	695c      	ldr	r4, [r3, #20]
 8014b04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b0c:	699b      	ldr	r3, [r3, #24]
 8014b0e:	4323      	orrs	r3, r4
 8014b10:	4003      	ands	r3, r0
 8014b12:	430b      	orrs	r3, r1
 8014b14:	4413      	add	r3, r2
 8014b16:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014b1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b22:	681a      	ldr	r2, [r3, #0]
 8014b24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014b28:	441a      	add	r2, r3
 8014b2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b32:	601a      	str	r2, [r3, #0]
 8014b34:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b3c:	441a      	add	r2, r3
 8014b3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b46:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8014b48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b50:	68da      	ldr	r2, [r3, #12]
 8014b52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014b60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014b6e:	4059      	eors	r1, r3
 8014b70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014b7e:	404b      	eors	r3, r1
 8014b80:	441a      	add	r2, r3
 8014b82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b86:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b8a:	e001      	b.n	8014b90 <mbedtls_internal_sha256_process+0x128c>
 8014b8c:	080172f8 	.word	0x080172f8
 8014b90:	6899      	ldr	r1, [r3, #8]
 8014b92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b9a:	6818      	ldr	r0, [r3, #0]
 8014b9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ba0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ba4:	685c      	ldr	r4, [r3, #4]
 8014ba6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014baa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014bae:	689b      	ldr	r3, [r3, #8]
 8014bb0:	4063      	eors	r3, r4
 8014bb2:	4003      	ands	r3, r0
 8014bb4:	404b      	eors	r3, r1
 8014bb6:	441a      	add	r2, r3
 8014bb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bbc:	3304      	adds	r3, #4
 8014bbe:	49ec      	ldr	r1, [pc, #944]	@ (8014f70 <mbedtls_internal_sha256_process+0x166c>)
 8014bc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014bc4:	441a      	add	r2, r3
 8014bc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bca:	1c99      	adds	r1, r3, #2
 8014bcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014bd8:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014bdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014be0:	1c98      	adds	r0, r3, #2
 8014be2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014be6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014bee:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014bf2:	4059      	eors	r1, r3
 8014bf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bf8:	1c98      	adds	r0, r3, #2
 8014bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014c02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014c06:	0a9b      	lsrs	r3, r3, #10
 8014c08:	4059      	eors	r1, r3
 8014c0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c0e:	1ed8      	subs	r0, r3, #3
 8014c10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c14:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014c18:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014c1c:	4419      	add	r1, r3
 8014c1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c22:	f1a3 000b 	sub.w	r0, r3, #11
 8014c26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014c2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014c32:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014c36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c3a:	f1a3 040b 	sub.w	r4, r3, #11
 8014c3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c42:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014c46:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014c4a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014c4e:	4058      	eors	r0, r3
 8014c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c54:	f1a3 040b 	sub.w	r4, r3, #11
 8014c58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c5c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014c60:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014c64:	08db      	lsrs	r3, r3, #3
 8014c66:	4043      	eors	r3, r0
 8014c68:	18c8      	adds	r0, r1, r3
 8014c6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c6e:	f1a3 010c 	sub.w	r1, r3, #12
 8014c72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014c7a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014c7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c82:	3304      	adds	r3, #4
 8014c84:	4408      	add	r0, r1
 8014c86:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014c8a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014c8e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014c92:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014c96:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014c9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014c9e:	4413      	add	r3, r2
 8014ca0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014ca4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ca8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cac:	691b      	ldr	r3, [r3, #16]
 8014cae:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014cb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cba:	691b      	ldr	r3, [r3, #16]
 8014cbc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014cc0:	405a      	eors	r2, r3
 8014cc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cca:	691b      	ldr	r3, [r3, #16]
 8014ccc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014cd0:	405a      	eors	r2, r3
 8014cd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cda:	6919      	ldr	r1, [r3, #16]
 8014cdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ce0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ce4:	695b      	ldr	r3, [r3, #20]
 8014ce6:	4019      	ands	r1, r3
 8014ce8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cf0:	6998      	ldr	r0, [r3, #24]
 8014cf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cf6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cfa:	691c      	ldr	r4, [r3, #16]
 8014cfc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d04:	695b      	ldr	r3, [r3, #20]
 8014d06:	4323      	orrs	r3, r4
 8014d08:	4003      	ands	r3, r0
 8014d0a:	430b      	orrs	r3, r1
 8014d0c:	4413      	add	r3, r2
 8014d0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014d12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d1a:	69da      	ldr	r2, [r3, #28]
 8014d1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014d20:	441a      	add	r2, r3
 8014d22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d2a:	61da      	str	r2, [r3, #28]
 8014d2c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d34:	441a      	add	r2, r3
 8014d36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d3e:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8014d40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d48:	689a      	ldr	r2, [r3, #8]
 8014d4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d52:	69db      	ldr	r3, [r3, #28]
 8014d54:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014d58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d60:	69db      	ldr	r3, [r3, #28]
 8014d62:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014d66:	4059      	eors	r1, r3
 8014d68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d70:	69db      	ldr	r3, [r3, #28]
 8014d72:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014d76:	404b      	eors	r3, r1
 8014d78:	441a      	add	r2, r3
 8014d7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d82:	6859      	ldr	r1, [r3, #4]
 8014d84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d8c:	69d8      	ldr	r0, [r3, #28]
 8014d8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d96:	681c      	ldr	r4, [r3, #0]
 8014d98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	4063      	eors	r3, r4
 8014da4:	4003      	ands	r3, r0
 8014da6:	404b      	eors	r3, r1
 8014da8:	441a      	add	r2, r3
 8014daa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014dae:	3305      	adds	r3, #5
 8014db0:	496f      	ldr	r1, [pc, #444]	@ (8014f70 <mbedtls_internal_sha256_process+0x166c>)
 8014db2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014db6:	441a      	add	r2, r3
 8014db8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014dbc:	1cd9      	adds	r1, r3, #3
 8014dbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014dc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014dca:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014dce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014dd2:	1cd8      	adds	r0, r3, #3
 8014dd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014ddc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014de0:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014de4:	4059      	eors	r1, r3
 8014de6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014dea:	1cd8      	adds	r0, r3, #3
 8014dec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014df0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014df4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014df8:	0a9b      	lsrs	r3, r3, #10
 8014dfa:	4059      	eors	r1, r3
 8014dfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e00:	1e98      	subs	r0, r3, #2
 8014e02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014e0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014e0e:	4419      	add	r1, r3
 8014e10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e14:	f1a3 000a 	sub.w	r0, r3, #10
 8014e18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e1c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014e20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014e24:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014e28:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e2c:	f1a3 040a 	sub.w	r4, r3, #10
 8014e30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e34:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014e38:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014e3c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014e40:	4058      	eors	r0, r3
 8014e42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e46:	f1a3 040a 	sub.w	r4, r3, #10
 8014e4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014e52:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014e56:	08db      	lsrs	r3, r3, #3
 8014e58:	4043      	eors	r3, r0
 8014e5a:	18c8      	adds	r0, r1, r3
 8014e5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e60:	f1a3 010b 	sub.w	r1, r3, #11
 8014e64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014e6c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014e70:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e74:	3305      	adds	r3, #5
 8014e76:	4408      	add	r0, r1
 8014e78:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014e7c:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014e80:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014e84:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014e88:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014e8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014e90:	4413      	add	r3, r2
 8014e92:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014e96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e9e:	68db      	ldr	r3, [r3, #12]
 8014ea0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014ea4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ea8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014eac:	68db      	ldr	r3, [r3, #12]
 8014eae:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014eb2:	405a      	eors	r2, r3
 8014eb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014eb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ebc:	68db      	ldr	r3, [r3, #12]
 8014ebe:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014ec2:	405a      	eors	r2, r3
 8014ec4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ec8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ecc:	68d9      	ldr	r1, [r3, #12]
 8014ece:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ed2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ed6:	691b      	ldr	r3, [r3, #16]
 8014ed8:	4019      	ands	r1, r3
 8014eda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ede:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ee2:	6958      	ldr	r0, [r3, #20]
 8014ee4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ee8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014eec:	68dc      	ldr	r4, [r3, #12]
 8014eee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ef2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ef6:	691b      	ldr	r3, [r3, #16]
 8014ef8:	4323      	orrs	r3, r4
 8014efa:	4003      	ands	r3, r0
 8014efc:	430b      	orrs	r3, r1
 8014efe:	4413      	add	r3, r2
 8014f00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014f04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f0c:	699a      	ldr	r2, [r3, #24]
 8014f0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014f12:	441a      	add	r2, r3
 8014f14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f1c:	619a      	str	r2, [r3, #24]
 8014f1e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f26:	441a      	add	r2, r3
 8014f28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f30:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8014f32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f36:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f3a:	685a      	ldr	r2, [r3, #4]
 8014f3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f44:	699b      	ldr	r3, [r3, #24]
 8014f46:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014f4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f52:	699b      	ldr	r3, [r3, #24]
 8014f54:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014f58:	4059      	eors	r1, r3
 8014f5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f62:	699b      	ldr	r3, [r3, #24]
 8014f64:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014f68:	404b      	eors	r3, r1
 8014f6a:	441a      	add	r2, r3
 8014f6c:	e002      	b.n	8014f74 <mbedtls_internal_sha256_process+0x1670>
 8014f6e:	bf00      	nop
 8014f70:	080172f8 	.word	0x080172f8
 8014f74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f7c:	6819      	ldr	r1, [r3, #0]
 8014f7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f86:	6998      	ldr	r0, [r3, #24]
 8014f88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f90:	69dc      	ldr	r4, [r3, #28]
 8014f92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	4063      	eors	r3, r4
 8014f9e:	4003      	ands	r3, r0
 8014fa0:	404b      	eors	r3, r1
 8014fa2:	441a      	add	r2, r3
 8014fa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fa8:	3306      	adds	r3, #6
 8014faa:	49e3      	ldr	r1, [pc, #908]	@ (8015338 <mbedtls_internal_sha256_process+0x1a34>)
 8014fac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014fb0:	441a      	add	r2, r3
 8014fb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fb6:	1d19      	adds	r1, r3, #4
 8014fb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014fc0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014fc4:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014fc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fcc:	1d18      	adds	r0, r3, #4
 8014fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014fd6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014fda:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014fde:	4059      	eors	r1, r3
 8014fe0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fe4:	1d18      	adds	r0, r3, #4
 8014fe6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014fee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014ff2:	0a9b      	lsrs	r3, r3, #10
 8014ff4:	4059      	eors	r1, r3
 8014ff6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ffa:	1e58      	subs	r0, r3, #1
 8014ffc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015000:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015004:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015008:	4419      	add	r1, r3
 801500a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801500e:	f1a3 0009 	sub.w	r0, r3, #9
 8015012:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801501a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801501e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8015022:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015026:	f1a3 0409 	sub.w	r4, r3, #9
 801502a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801502e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015032:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015036:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801503a:	4058      	eors	r0, r3
 801503c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015040:	f1a3 0409 	sub.w	r4, r3, #9
 8015044:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015048:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801504c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015050:	08db      	lsrs	r3, r3, #3
 8015052:	4043      	eors	r3, r0
 8015054:	18c8      	adds	r0, r1, r3
 8015056:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801505a:	f1a3 010a 	sub.w	r1, r3, #10
 801505e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015062:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015066:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801506a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801506e:	3306      	adds	r3, #6
 8015070:	4408      	add	r0, r1
 8015072:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015076:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 801507a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801507e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015082:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8015086:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801508a:	4413      	add	r3, r2
 801508c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8015090:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015094:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015098:	689b      	ldr	r3, [r3, #8]
 801509a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801509e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150a6:	689b      	ldr	r3, [r3, #8]
 80150a8:	ea4f 3373 	mov.w	r3, r3, ror #13
 80150ac:	405a      	eors	r2, r3
 80150ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150b6:	689b      	ldr	r3, [r3, #8]
 80150b8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80150bc:	405a      	eors	r2, r3
 80150be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150c6:	6899      	ldr	r1, [r3, #8]
 80150c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150d0:	68db      	ldr	r3, [r3, #12]
 80150d2:	4019      	ands	r1, r3
 80150d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150dc:	6918      	ldr	r0, [r3, #16]
 80150de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150e6:	689c      	ldr	r4, [r3, #8]
 80150e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150f0:	68db      	ldr	r3, [r3, #12]
 80150f2:	4323      	orrs	r3, r4
 80150f4:	4003      	ands	r3, r0
 80150f6:	430b      	orrs	r3, r1
 80150f8:	4413      	add	r3, r2
 80150fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80150fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015102:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015106:	695a      	ldr	r2, [r3, #20]
 8015108:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801510c:	441a      	add	r2, r3
 801510e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015112:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015116:	615a      	str	r2, [r3, #20]
 8015118:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801511c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015120:	441a      	add	r2, r3
 8015122:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015126:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801512a:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 801512c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015130:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015134:	681a      	ldr	r2, [r3, #0]
 8015136:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801513a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801513e:	695b      	ldr	r3, [r3, #20]
 8015140:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8015144:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015148:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801514c:	695b      	ldr	r3, [r3, #20]
 801514e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8015152:	4059      	eors	r1, r3
 8015154:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015158:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801515c:	695b      	ldr	r3, [r3, #20]
 801515e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8015162:	404b      	eors	r3, r1
 8015164:	441a      	add	r2, r3
 8015166:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801516a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801516e:	69d9      	ldr	r1, [r3, #28]
 8015170:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015174:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015178:	6958      	ldr	r0, [r3, #20]
 801517a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801517e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015182:	699c      	ldr	r4, [r3, #24]
 8015184:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015188:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801518c:	69db      	ldr	r3, [r3, #28]
 801518e:	4063      	eors	r3, r4
 8015190:	4003      	ands	r3, r0
 8015192:	404b      	eors	r3, r1
 8015194:	441a      	add	r2, r3
 8015196:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801519a:	3307      	adds	r3, #7
 801519c:	4966      	ldr	r1, [pc, #408]	@ (8015338 <mbedtls_internal_sha256_process+0x1a34>)
 801519e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80151a2:	441a      	add	r2, r3
 80151a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151a8:	1d59      	adds	r1, r3, #5
 80151aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80151b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80151b6:	ea4f 4173 	mov.w	r1, r3, ror #17
 80151ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151be:	1d58      	adds	r0, r3, #5
 80151c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151c4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80151c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80151cc:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80151d0:	4059      	eors	r1, r3
 80151d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151d6:	1d58      	adds	r0, r3, #5
 80151d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80151e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80151e4:	0a9b      	lsrs	r3, r3, #10
 80151e6:	4059      	eors	r1, r3
 80151e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151ec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80151f0:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80151f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80151f8:	4419      	add	r1, r3
 80151fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151fe:	f1a3 0008 	sub.w	r0, r3, #8
 8015202:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015206:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801520a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801520e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8015212:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015216:	f1a3 0408 	sub.w	r4, r3, #8
 801521a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801521e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015222:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015226:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801522a:	4058      	eors	r0, r3
 801522c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015230:	f1a3 0408 	sub.w	r4, r3, #8
 8015234:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015238:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801523c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015240:	08db      	lsrs	r3, r3, #3
 8015242:	4043      	eors	r3, r0
 8015244:	18c8      	adds	r0, r1, r3
 8015246:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801524a:	f1a3 0109 	sub.w	r1, r3, #9
 801524e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015252:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015256:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801525a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801525e:	3307      	adds	r3, #7
 8015260:	4408      	add	r0, r1
 8015262:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015266:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 801526a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801526e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015272:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8015276:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801527a:	4413      	add	r3, r2
 801527c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8015280:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015284:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801528e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015292:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	ea4f 3373 	mov.w	r3, r3, ror #13
 801529c:	405a      	eors	r2, r3
 801529e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80152ac:	405a      	eors	r2, r3
 80152ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152b6:	6859      	ldr	r1, [r3, #4]
 80152b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152c0:	689b      	ldr	r3, [r3, #8]
 80152c2:	4019      	ands	r1, r3
 80152c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152cc:	68d8      	ldr	r0, [r3, #12]
 80152ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152d6:	685c      	ldr	r4, [r3, #4]
 80152d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152e0:	689b      	ldr	r3, [r3, #8]
 80152e2:	4323      	orrs	r3, r4
 80152e4:	4003      	ands	r3, r0
 80152e6:	430b      	orrs	r3, r1
 80152e8:	4413      	add	r3, r2
 80152ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80152ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152f6:	691a      	ldr	r2, [r3, #16]
 80152f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80152fc:	441a      	add	r2, r3
 80152fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015302:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015306:	611a      	str	r2, [r3, #16]
 8015308:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801530c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015310:	441a      	add	r2, r3
 8015312:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015316:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801531a:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 801531c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015320:	3308      	adds	r3, #8
 8015322:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015326:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801532a:	2b3f      	cmp	r3, #63	@ 0x3f
 801532c:	f67f a828 	bls.w	8014380 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8015330:	2300      	movs	r3, #0
 8015332:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015336:	e023      	b.n	8015380 <mbedtls_internal_sha256_process+0x1a7c>
 8015338:	080172f8 	.word	0x080172f8
        ctx->state[i] += A[i];
 801533c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015340:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801534a:	3202      	adds	r2, #2
 801534c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015350:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015354:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015358:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 801535c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015360:	18d1      	adds	r1, r2, r3
 8015362:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015366:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8015370:	3202      	adds	r2, #2
 8015372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8015376:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801537a:	3301      	adds	r3, #1
 801537c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015380:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015384:	2b07      	cmp	r3, #7
 8015386:	d9d9      	bls.n	801533c <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8015388:	2300      	movs	r3, #0
}
 801538a:	4618      	mov	r0, r3
 801538c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8015390:	46bd      	mov	sp, r7
 8015392:	bc90      	pop	{r4, r7}
 8015394:	4770      	bx	lr
 8015396:	bf00      	nop

08015398 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b088      	sub	sp, #32
 801539c:	af00      	add	r7, sp, #0
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d101      	bne.n	80153ae <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 80153aa:	2300      	movs	r3, #0
 80153ac:	e065      	b.n	801547a <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80153b6:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 80153b8:	69fb      	ldr	r3, [r7, #28]
 80153ba:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80153be:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	681a      	ldr	r2, [r3, #0]
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	441a      	add	r2, r3
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	681a      	ldr	r2, [r3, #0]
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	687a      	ldr	r2, [r7, #4]
 80153da:	429a      	cmp	r2, r3
 80153dc:	d904      	bls.n	80153e8 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	1c5a      	adds	r2, r3, #1
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 80153e8:	69fb      	ldr	r3, [r7, #28]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d034      	beq.n	8015458 <mbedtls_sha256_update_ret+0xc0>
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	69bb      	ldr	r3, [r7, #24]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	d330      	bcc.n	8015458 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	4413      	add	r3, r2
 8015400:	69ba      	ldr	r2, [r7, #24]
 8015402:	68b9      	ldr	r1, [r7, #8]
 8015404:	4618      	mov	r0, r3
 8015406:	f000 fb4f 	bl	8015aa8 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	3328      	adds	r3, #40	@ 0x28
 801540e:	4619      	mov	r1, r3
 8015410:	68f8      	ldr	r0, [r7, #12]
 8015412:	f7fe fa77 	bl	8013904 <mbedtls_internal_sha256_process>
 8015416:	6178      	str	r0, [r7, #20]
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d001      	beq.n	8015422 <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 801541e:	697b      	ldr	r3, [r7, #20]
 8015420:	e02b      	b.n	801547a <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 8015422:	68ba      	ldr	r2, [r7, #8]
 8015424:	69bb      	ldr	r3, [r7, #24]
 8015426:	4413      	add	r3, r2
 8015428:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	69bb      	ldr	r3, [r7, #24]
 801542e:	1ad3      	subs	r3, r2, r3
 8015430:	607b      	str	r3, [r7, #4]
        left = 0;
 8015432:	2300      	movs	r3, #0
 8015434:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 8015436:	e00f      	b.n	8015458 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 8015438:	68b9      	ldr	r1, [r7, #8]
 801543a:	68f8      	ldr	r0, [r7, #12]
 801543c:	f7fe fa62 	bl	8013904 <mbedtls_internal_sha256_process>
 8015440:	6178      	str	r0, [r7, #20]
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d001      	beq.n	801544c <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	e016      	b.n	801547a <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	3340      	adds	r3, #64	@ 0x40
 8015450:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	3b40      	subs	r3, #64	@ 0x40
 8015456:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2b3f      	cmp	r3, #63	@ 0x3f
 801545c:	d8ec      	bhi.n	8015438 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d009      	beq.n	8015478 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801546a:	69fb      	ldr	r3, [r7, #28]
 801546c:	4413      	add	r3, r2
 801546e:	687a      	ldr	r2, [r7, #4]
 8015470:	68b9      	ldr	r1, [r7, #8]
 8015472:	4618      	mov	r0, r3
 8015474:	f000 fb18 	bl	8015aa8 <memcpy>

    return( 0 );
 8015478:	2300      	movs	r3, #0
}
 801547a:	4618      	mov	r0, r3
 801547c:	3720      	adds	r7, #32
 801547e:	46bd      	mov	sp, r7
 8015480:	bd80      	pop	{r7, pc}

08015482 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8015482:	b580      	push	{r7, lr}
 8015484:	b086      	sub	sp, #24
 8015486:	af00      	add	r7, sp, #0
 8015488:	6078      	str	r0, [r7, #4]
 801548a:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015494:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	1c5a      	adds	r2, r3, #1
 801549a:	617a      	str	r2, [r7, #20]
 801549c:	687a      	ldr	r2, [r7, #4]
 801549e:	4413      	add	r3, r2
 80154a0:	2280      	movs	r2, #128	@ 0x80
 80154a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	2b38      	cmp	r3, #56	@ 0x38
 80154aa:	d80c      	bhi.n	80154c6 <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80154b2:	697b      	ldr	r3, [r7, #20]
 80154b4:	18d0      	adds	r0, r2, r3
 80154b6:	697b      	ldr	r3, [r7, #20]
 80154b8:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80154bc:	461a      	mov	r2, r3
 80154be:	2100      	movs	r1, #0
 80154c0:	f000 faae 	bl	8015a20 <memset>
 80154c4:	e01e      	b.n	8015504 <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80154cc:	697b      	ldr	r3, [r7, #20]
 80154ce:	18d0      	adds	r0, r2, r3
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80154d6:	461a      	mov	r2, r3
 80154d8:	2100      	movs	r1, #0
 80154da:	f000 faa1 	bl	8015a20 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	3328      	adds	r3, #40	@ 0x28
 80154e2:	4619      	mov	r1, r3
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	f7fe fa0d 	bl	8013904 <mbedtls_internal_sha256_process>
 80154ea:	6138      	str	r0, [r7, #16]
 80154ec:	693b      	ldr	r3, [r7, #16]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d001      	beq.n	80154f6 <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	e128      	b.n	8015748 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	3328      	adds	r3, #40	@ 0x28
 80154fa:	2238      	movs	r2, #56	@ 0x38
 80154fc:	2100      	movs	r1, #0
 80154fe:	4618      	mov	r0, r3
 8015500:	f000 fa8e 	bl	8015a20 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8015510:	4313      	orrs	r3, r2
 8015512:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	00db      	lsls	r3, r3, #3
 801551a:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	0e1b      	lsrs	r3, r3, #24
 8015520:	b2da      	uxtb	r2, r3
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	0c1b      	lsrs	r3, r3, #16
 801552c:	b2da      	uxtb	r2, r3
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	0a1b      	lsrs	r3, r3, #8
 8015538:	b2da      	uxtb	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	b2da      	uxtb	r2, r3
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	0e1b      	lsrs	r3, r3, #24
 801554e:	b2da      	uxtb	r2, r3
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8015556:	68bb      	ldr	r3, [r7, #8]
 8015558:	0c1b      	lsrs	r3, r3, #16
 801555a:	b2da      	uxtb	r2, r3
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8015562:	68bb      	ldr	r3, [r7, #8]
 8015564:	0a1b      	lsrs	r3, r3, #8
 8015566:	b2da      	uxtb	r2, r3
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 801556e:	68bb      	ldr	r3, [r7, #8]
 8015570:	b2da      	uxtb	r2, r3
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	3328      	adds	r3, #40	@ 0x28
 801557c:	4619      	mov	r1, r3
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	f7fe f9c0 	bl	8013904 <mbedtls_internal_sha256_process>
 8015584:	6138      	str	r0, [r7, #16]
 8015586:	693b      	ldr	r3, [r7, #16]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d001      	beq.n	8015590 <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 801558c:	693b      	ldr	r3, [r7, #16]
 801558e:	e0db      	b.n	8015748 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	689b      	ldr	r3, [r3, #8]
 8015594:	0e1b      	lsrs	r3, r3, #24
 8015596:	b2da      	uxtb	r2, r3
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	701a      	strb	r2, [r3, #0]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	689b      	ldr	r3, [r3, #8]
 80155a0:	0c1a      	lsrs	r2, r3, #16
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	3301      	adds	r3, #1
 80155a6:	b2d2      	uxtb	r2, r2
 80155a8:	701a      	strb	r2, [r3, #0]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	689b      	ldr	r3, [r3, #8]
 80155ae:	0a1a      	lsrs	r2, r3, #8
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	3302      	adds	r3, #2
 80155b4:	b2d2      	uxtb	r2, r2
 80155b6:	701a      	strb	r2, [r3, #0]
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	689a      	ldr	r2, [r3, #8]
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	3303      	adds	r3, #3
 80155c0:	b2d2      	uxtb	r2, r2
 80155c2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	0e1a      	lsrs	r2, r3, #24
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	3304      	adds	r3, #4
 80155ce:	b2d2      	uxtb	r2, r2
 80155d0:	701a      	strb	r2, [r3, #0]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	68db      	ldr	r3, [r3, #12]
 80155d6:	0c1a      	lsrs	r2, r3, #16
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	3305      	adds	r3, #5
 80155dc:	b2d2      	uxtb	r2, r2
 80155de:	701a      	strb	r2, [r3, #0]
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	68db      	ldr	r3, [r3, #12]
 80155e4:	0a1a      	lsrs	r2, r3, #8
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	3306      	adds	r3, #6
 80155ea:	b2d2      	uxtb	r2, r2
 80155ec:	701a      	strb	r2, [r3, #0]
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	68da      	ldr	r2, [r3, #12]
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	3307      	adds	r3, #7
 80155f6:	b2d2      	uxtb	r2, r2
 80155f8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	691b      	ldr	r3, [r3, #16]
 80155fe:	0e1a      	lsrs	r2, r3, #24
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	3308      	adds	r3, #8
 8015604:	b2d2      	uxtb	r2, r2
 8015606:	701a      	strb	r2, [r3, #0]
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	691b      	ldr	r3, [r3, #16]
 801560c:	0c1a      	lsrs	r2, r3, #16
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	3309      	adds	r3, #9
 8015612:	b2d2      	uxtb	r2, r2
 8015614:	701a      	strb	r2, [r3, #0]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	691b      	ldr	r3, [r3, #16]
 801561a:	0a1a      	lsrs	r2, r3, #8
 801561c:	683b      	ldr	r3, [r7, #0]
 801561e:	330a      	adds	r3, #10
 8015620:	b2d2      	uxtb	r2, r2
 8015622:	701a      	strb	r2, [r3, #0]
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	691a      	ldr	r2, [r3, #16]
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	330b      	adds	r3, #11
 801562c:	b2d2      	uxtb	r2, r2
 801562e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	695b      	ldr	r3, [r3, #20]
 8015634:	0e1a      	lsrs	r2, r3, #24
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	330c      	adds	r3, #12
 801563a:	b2d2      	uxtb	r2, r2
 801563c:	701a      	strb	r2, [r3, #0]
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	695b      	ldr	r3, [r3, #20]
 8015642:	0c1a      	lsrs	r2, r3, #16
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	330d      	adds	r3, #13
 8015648:	b2d2      	uxtb	r2, r2
 801564a:	701a      	strb	r2, [r3, #0]
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	695b      	ldr	r3, [r3, #20]
 8015650:	0a1a      	lsrs	r2, r3, #8
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	330e      	adds	r3, #14
 8015656:	b2d2      	uxtb	r2, r2
 8015658:	701a      	strb	r2, [r3, #0]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	695a      	ldr	r2, [r3, #20]
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	330f      	adds	r3, #15
 8015662:	b2d2      	uxtb	r2, r2
 8015664:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	699b      	ldr	r3, [r3, #24]
 801566a:	0e1a      	lsrs	r2, r3, #24
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	3310      	adds	r3, #16
 8015670:	b2d2      	uxtb	r2, r2
 8015672:	701a      	strb	r2, [r3, #0]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	699b      	ldr	r3, [r3, #24]
 8015678:	0c1a      	lsrs	r2, r3, #16
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	3311      	adds	r3, #17
 801567e:	b2d2      	uxtb	r2, r2
 8015680:	701a      	strb	r2, [r3, #0]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	699b      	ldr	r3, [r3, #24]
 8015686:	0a1a      	lsrs	r2, r3, #8
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	3312      	adds	r3, #18
 801568c:	b2d2      	uxtb	r2, r2
 801568e:	701a      	strb	r2, [r3, #0]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	699a      	ldr	r2, [r3, #24]
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	3313      	adds	r3, #19
 8015698:	b2d2      	uxtb	r2, r2
 801569a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	69db      	ldr	r3, [r3, #28]
 80156a0:	0e1a      	lsrs	r2, r3, #24
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	3314      	adds	r3, #20
 80156a6:	b2d2      	uxtb	r2, r2
 80156a8:	701a      	strb	r2, [r3, #0]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	69db      	ldr	r3, [r3, #28]
 80156ae:	0c1a      	lsrs	r2, r3, #16
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	3315      	adds	r3, #21
 80156b4:	b2d2      	uxtb	r2, r2
 80156b6:	701a      	strb	r2, [r3, #0]
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	69db      	ldr	r3, [r3, #28]
 80156bc:	0a1a      	lsrs	r2, r3, #8
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	3316      	adds	r3, #22
 80156c2:	b2d2      	uxtb	r2, r2
 80156c4:	701a      	strb	r2, [r3, #0]
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	69da      	ldr	r2, [r3, #28]
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	3317      	adds	r3, #23
 80156ce:	b2d2      	uxtb	r2, r2
 80156d0:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	6a1b      	ldr	r3, [r3, #32]
 80156d6:	0e1a      	lsrs	r2, r3, #24
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	3318      	adds	r3, #24
 80156dc:	b2d2      	uxtb	r2, r2
 80156de:	701a      	strb	r2, [r3, #0]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	6a1b      	ldr	r3, [r3, #32]
 80156e4:	0c1a      	lsrs	r2, r3, #16
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	3319      	adds	r3, #25
 80156ea:	b2d2      	uxtb	r2, r2
 80156ec:	701a      	strb	r2, [r3, #0]
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6a1b      	ldr	r3, [r3, #32]
 80156f2:	0a1a      	lsrs	r2, r3, #8
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	331a      	adds	r3, #26
 80156f8:	b2d2      	uxtb	r2, r2
 80156fa:	701a      	strb	r2, [r3, #0]
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	6a1a      	ldr	r2, [r3, #32]
 8015700:	683b      	ldr	r3, [r7, #0]
 8015702:	331b      	adds	r3, #27
 8015704:	b2d2      	uxtb	r2, r2
 8015706:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801570c:	2b00      	cmp	r3, #0
 801570e:	d11a      	bne.n	8015746 <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015714:	0e1a      	lsrs	r2, r3, #24
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	331c      	adds	r3, #28
 801571a:	b2d2      	uxtb	r2, r2
 801571c:	701a      	strb	r2, [r3, #0]
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015722:	0c1a      	lsrs	r2, r3, #16
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	331d      	adds	r3, #29
 8015728:	b2d2      	uxtb	r2, r2
 801572a:	701a      	strb	r2, [r3, #0]
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015730:	0a1a      	lsrs	r2, r3, #8
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	331e      	adds	r3, #30
 8015736:	b2d2      	uxtb	r2, r2
 8015738:	701a      	strb	r2, [r3, #0]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801573e:	683b      	ldr	r3, [r7, #0]
 8015740:	331f      	adds	r3, #31
 8015742:	b2d2      	uxtb	r2, r2
 8015744:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8015746:	2300      	movs	r3, #0
}
 8015748:	4618      	mov	r0, r3
 801574a:	3718      	adds	r7, #24
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}

08015750 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b0a0      	sub	sp, #128	@ 0x80
 8015754:	af00      	add	r7, sp, #0
 8015756:	60f8      	str	r0, [r7, #12]
 8015758:	60b9      	str	r1, [r7, #8]
 801575a:	607a      	str	r2, [r7, #4]
 801575c:	603b      	str	r3, [r7, #0]

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 801575e:	f107 0310 	add.w	r3, r7, #16
 8015762:	4618      	mov	r0, r3
 8015764:	f7fe f846 	bl	80137f4 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8015768:	f107 0310 	add.w	r3, r7, #16
 801576c:	6839      	ldr	r1, [r7, #0]
 801576e:	4618      	mov	r0, r3
 8015770:	f7fe f85e 	bl	8013830 <mbedtls_sha256_starts_ret>
 8015774:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8015776:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015778:	2b00      	cmp	r3, #0
 801577a:	d114      	bne.n	80157a6 <mbedtls_sha256_ret+0x56>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 801577c:	f107 0310 	add.w	r3, r7, #16
 8015780:	68ba      	ldr	r2, [r7, #8]
 8015782:	68f9      	ldr	r1, [r7, #12]
 8015784:	4618      	mov	r0, r3
 8015786:	f7ff fe07 	bl	8015398 <mbedtls_sha256_update_ret>
 801578a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801578c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801578e:	2b00      	cmp	r3, #0
 8015790:	d10b      	bne.n	80157aa <mbedtls_sha256_ret+0x5a>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 8015792:	f107 0310 	add.w	r3, r7, #16
 8015796:	6879      	ldr	r1, [r7, #4]
 8015798:	4618      	mov	r0, r3
 801579a:	f7ff fe72 	bl	8015482 <mbedtls_sha256_finish_ret>
 801579e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80157a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80157a2:	2b00      	cmp	r3, #0
        goto exit;

exit:
 80157a4:	e002      	b.n	80157ac <mbedtls_sha256_ret+0x5c>
        goto exit;
 80157a6:	bf00      	nop
 80157a8:	e000      	b.n	80157ac <mbedtls_sha256_ret+0x5c>
        goto exit;
 80157aa:	bf00      	nop
    mbedtls_sha256_free( &ctx );
 80157ac:	f107 0310 	add.w	r3, r7, #16
 80157b0:	4618      	mov	r0, r3
 80157b2:	f7fe f82c 	bl	801380e <mbedtls_sha256_free>

    return( ret );
 80157b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 80157b8:	4618      	mov	r0, r3
 80157ba:	3780      	adds	r7, #128	@ 0x80
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}

080157c0 <mbedtls_sha256>:
#if !defined(MBEDTLS_DEPRECATED_REMOVED)
void mbedtls_sha256( const unsigned char *input,
                     size_t ilen,
                     unsigned char output[32],
                     int is224 )
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b084      	sub	sp, #16
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	60b9      	str	r1, [r7, #8]
 80157ca:	607a      	str	r2, [r7, #4]
 80157cc:	603b      	str	r3, [r7, #0]
    mbedtls_sha256_ret( input, ilen, output, is224 );
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	687a      	ldr	r2, [r7, #4]
 80157d2:	68b9      	ldr	r1, [r7, #8]
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f7ff ffbb 	bl	8015750 <mbedtls_sha256_ret>
}
 80157da:	bf00      	nop
 80157dc:	3710      	adds	r7, #16
 80157de:	46bd      	mov	sp, r7
 80157e0:	bd80      	pop	{r7, pc}
	...

080157e4 <calloc>:
 80157e4:	4b02      	ldr	r3, [pc, #8]	@ (80157f0 <calloc+0xc>)
 80157e6:	460a      	mov	r2, r1
 80157e8:	4601      	mov	r1, r0
 80157ea:	6818      	ldr	r0, [r3, #0]
 80157ec:	f000 b802 	b.w	80157f4 <_calloc_r>
 80157f0:	2400004c 	.word	0x2400004c

080157f4 <_calloc_r>:
 80157f4:	b570      	push	{r4, r5, r6, lr}
 80157f6:	fba1 5402 	umull	r5, r4, r1, r2
 80157fa:	b934      	cbnz	r4, 801580a <_calloc_r+0x16>
 80157fc:	4629      	mov	r1, r5
 80157fe:	f000 f837 	bl	8015870 <_malloc_r>
 8015802:	4606      	mov	r6, r0
 8015804:	b928      	cbnz	r0, 8015812 <_calloc_r+0x1e>
 8015806:	4630      	mov	r0, r6
 8015808:	bd70      	pop	{r4, r5, r6, pc}
 801580a:	220c      	movs	r2, #12
 801580c:	6002      	str	r2, [r0, #0]
 801580e:	2600      	movs	r6, #0
 8015810:	e7f9      	b.n	8015806 <_calloc_r+0x12>
 8015812:	462a      	mov	r2, r5
 8015814:	4621      	mov	r1, r4
 8015816:	f000 f903 	bl	8015a20 <memset>
 801581a:	e7f4      	b.n	8015806 <_calloc_r+0x12>

0801581c <free>:
 801581c:	4b02      	ldr	r3, [pc, #8]	@ (8015828 <free+0xc>)
 801581e:	4601      	mov	r1, r0
 8015820:	6818      	ldr	r0, [r3, #0]
 8015822:	f000 b94f 	b.w	8015ac4 <_free_r>
 8015826:	bf00      	nop
 8015828:	2400004c 	.word	0x2400004c

0801582c <sbrk_aligned>:
 801582c:	b570      	push	{r4, r5, r6, lr}
 801582e:	4e0f      	ldr	r6, [pc, #60]	@ (801586c <sbrk_aligned+0x40>)
 8015830:	460c      	mov	r4, r1
 8015832:	6831      	ldr	r1, [r6, #0]
 8015834:	4605      	mov	r5, r0
 8015836:	b911      	cbnz	r1, 801583e <sbrk_aligned+0x12>
 8015838:	f000 f8fa 	bl	8015a30 <_sbrk_r>
 801583c:	6030      	str	r0, [r6, #0]
 801583e:	4621      	mov	r1, r4
 8015840:	4628      	mov	r0, r5
 8015842:	f000 f8f5 	bl	8015a30 <_sbrk_r>
 8015846:	1c43      	adds	r3, r0, #1
 8015848:	d103      	bne.n	8015852 <sbrk_aligned+0x26>
 801584a:	f04f 34ff 	mov.w	r4, #4294967295
 801584e:	4620      	mov	r0, r4
 8015850:	bd70      	pop	{r4, r5, r6, pc}
 8015852:	1cc4      	adds	r4, r0, #3
 8015854:	f024 0403 	bic.w	r4, r4, #3
 8015858:	42a0      	cmp	r0, r4
 801585a:	d0f8      	beq.n	801584e <sbrk_aligned+0x22>
 801585c:	1a21      	subs	r1, r4, r0
 801585e:	4628      	mov	r0, r5
 8015860:	f000 f8e6 	bl	8015a30 <_sbrk_r>
 8015864:	3001      	adds	r0, #1
 8015866:	d1f2      	bne.n	801584e <sbrk_aligned+0x22>
 8015868:	e7ef      	b.n	801584a <sbrk_aligned+0x1e>
 801586a:	bf00      	nop
 801586c:	24002580 	.word	0x24002580

08015870 <_malloc_r>:
 8015870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015874:	1ccd      	adds	r5, r1, #3
 8015876:	f025 0503 	bic.w	r5, r5, #3
 801587a:	3508      	adds	r5, #8
 801587c:	2d0c      	cmp	r5, #12
 801587e:	bf38      	it	cc
 8015880:	250c      	movcc	r5, #12
 8015882:	2d00      	cmp	r5, #0
 8015884:	4606      	mov	r6, r0
 8015886:	db01      	blt.n	801588c <_malloc_r+0x1c>
 8015888:	42a9      	cmp	r1, r5
 801588a:	d904      	bls.n	8015896 <_malloc_r+0x26>
 801588c:	230c      	movs	r3, #12
 801588e:	6033      	str	r3, [r6, #0]
 8015890:	2000      	movs	r0, #0
 8015892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801596c <_malloc_r+0xfc>
 801589a:	f000 f869 	bl	8015970 <__malloc_lock>
 801589e:	f8d8 3000 	ldr.w	r3, [r8]
 80158a2:	461c      	mov	r4, r3
 80158a4:	bb44      	cbnz	r4, 80158f8 <_malloc_r+0x88>
 80158a6:	4629      	mov	r1, r5
 80158a8:	4630      	mov	r0, r6
 80158aa:	f7ff ffbf 	bl	801582c <sbrk_aligned>
 80158ae:	1c43      	adds	r3, r0, #1
 80158b0:	4604      	mov	r4, r0
 80158b2:	d158      	bne.n	8015966 <_malloc_r+0xf6>
 80158b4:	f8d8 4000 	ldr.w	r4, [r8]
 80158b8:	4627      	mov	r7, r4
 80158ba:	2f00      	cmp	r7, #0
 80158bc:	d143      	bne.n	8015946 <_malloc_r+0xd6>
 80158be:	2c00      	cmp	r4, #0
 80158c0:	d04b      	beq.n	801595a <_malloc_r+0xea>
 80158c2:	6823      	ldr	r3, [r4, #0]
 80158c4:	4639      	mov	r1, r7
 80158c6:	4630      	mov	r0, r6
 80158c8:	eb04 0903 	add.w	r9, r4, r3
 80158cc:	f000 f8b0 	bl	8015a30 <_sbrk_r>
 80158d0:	4581      	cmp	r9, r0
 80158d2:	d142      	bne.n	801595a <_malloc_r+0xea>
 80158d4:	6821      	ldr	r1, [r4, #0]
 80158d6:	1a6d      	subs	r5, r5, r1
 80158d8:	4629      	mov	r1, r5
 80158da:	4630      	mov	r0, r6
 80158dc:	f7ff ffa6 	bl	801582c <sbrk_aligned>
 80158e0:	3001      	adds	r0, #1
 80158e2:	d03a      	beq.n	801595a <_malloc_r+0xea>
 80158e4:	6823      	ldr	r3, [r4, #0]
 80158e6:	442b      	add	r3, r5
 80158e8:	6023      	str	r3, [r4, #0]
 80158ea:	f8d8 3000 	ldr.w	r3, [r8]
 80158ee:	685a      	ldr	r2, [r3, #4]
 80158f0:	bb62      	cbnz	r2, 801594c <_malloc_r+0xdc>
 80158f2:	f8c8 7000 	str.w	r7, [r8]
 80158f6:	e00f      	b.n	8015918 <_malloc_r+0xa8>
 80158f8:	6822      	ldr	r2, [r4, #0]
 80158fa:	1b52      	subs	r2, r2, r5
 80158fc:	d420      	bmi.n	8015940 <_malloc_r+0xd0>
 80158fe:	2a0b      	cmp	r2, #11
 8015900:	d917      	bls.n	8015932 <_malloc_r+0xc2>
 8015902:	1961      	adds	r1, r4, r5
 8015904:	42a3      	cmp	r3, r4
 8015906:	6025      	str	r5, [r4, #0]
 8015908:	bf18      	it	ne
 801590a:	6059      	strne	r1, [r3, #4]
 801590c:	6863      	ldr	r3, [r4, #4]
 801590e:	bf08      	it	eq
 8015910:	f8c8 1000 	streq.w	r1, [r8]
 8015914:	5162      	str	r2, [r4, r5]
 8015916:	604b      	str	r3, [r1, #4]
 8015918:	4630      	mov	r0, r6
 801591a:	f000 f82f 	bl	801597c <__malloc_unlock>
 801591e:	f104 000b 	add.w	r0, r4, #11
 8015922:	1d23      	adds	r3, r4, #4
 8015924:	f020 0007 	bic.w	r0, r0, #7
 8015928:	1ac2      	subs	r2, r0, r3
 801592a:	bf1c      	itt	ne
 801592c:	1a1b      	subne	r3, r3, r0
 801592e:	50a3      	strne	r3, [r4, r2]
 8015930:	e7af      	b.n	8015892 <_malloc_r+0x22>
 8015932:	6862      	ldr	r2, [r4, #4]
 8015934:	42a3      	cmp	r3, r4
 8015936:	bf0c      	ite	eq
 8015938:	f8c8 2000 	streq.w	r2, [r8]
 801593c:	605a      	strne	r2, [r3, #4]
 801593e:	e7eb      	b.n	8015918 <_malloc_r+0xa8>
 8015940:	4623      	mov	r3, r4
 8015942:	6864      	ldr	r4, [r4, #4]
 8015944:	e7ae      	b.n	80158a4 <_malloc_r+0x34>
 8015946:	463c      	mov	r4, r7
 8015948:	687f      	ldr	r7, [r7, #4]
 801594a:	e7b6      	b.n	80158ba <_malloc_r+0x4a>
 801594c:	461a      	mov	r2, r3
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	42a3      	cmp	r3, r4
 8015952:	d1fb      	bne.n	801594c <_malloc_r+0xdc>
 8015954:	2300      	movs	r3, #0
 8015956:	6053      	str	r3, [r2, #4]
 8015958:	e7de      	b.n	8015918 <_malloc_r+0xa8>
 801595a:	230c      	movs	r3, #12
 801595c:	6033      	str	r3, [r6, #0]
 801595e:	4630      	mov	r0, r6
 8015960:	f000 f80c 	bl	801597c <__malloc_unlock>
 8015964:	e794      	b.n	8015890 <_malloc_r+0x20>
 8015966:	6005      	str	r5, [r0, #0]
 8015968:	e7d6      	b.n	8015918 <_malloc_r+0xa8>
 801596a:	bf00      	nop
 801596c:	24002584 	.word	0x24002584

08015970 <__malloc_lock>:
 8015970:	4801      	ldr	r0, [pc, #4]	@ (8015978 <__malloc_lock+0x8>)
 8015972:	f000 b897 	b.w	8015aa4 <__retarget_lock_acquire_recursive>
 8015976:	bf00      	nop
 8015978:	240026c4 	.word	0x240026c4

0801597c <__malloc_unlock>:
 801597c:	4801      	ldr	r0, [pc, #4]	@ (8015984 <__malloc_unlock+0x8>)
 801597e:	f000 b892 	b.w	8015aa6 <__retarget_lock_release_recursive>
 8015982:	bf00      	nop
 8015984:	240026c4 	.word	0x240026c4

08015988 <siprintf>:
 8015988:	b40e      	push	{r1, r2, r3}
 801598a:	b510      	push	{r4, lr}
 801598c:	b09d      	sub	sp, #116	@ 0x74
 801598e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015990:	9002      	str	r0, [sp, #8]
 8015992:	9006      	str	r0, [sp, #24]
 8015994:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015998:	480a      	ldr	r0, [pc, #40]	@ (80159c4 <siprintf+0x3c>)
 801599a:	9107      	str	r1, [sp, #28]
 801599c:	9104      	str	r1, [sp, #16]
 801599e:	490a      	ldr	r1, [pc, #40]	@ (80159c8 <siprintf+0x40>)
 80159a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80159a4:	9105      	str	r1, [sp, #20]
 80159a6:	2400      	movs	r4, #0
 80159a8:	a902      	add	r1, sp, #8
 80159aa:	6800      	ldr	r0, [r0, #0]
 80159ac:	9301      	str	r3, [sp, #4]
 80159ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80159b0:	f000 f92e 	bl	8015c10 <_svfiprintf_r>
 80159b4:	9b02      	ldr	r3, [sp, #8]
 80159b6:	701c      	strb	r4, [r3, #0]
 80159b8:	b01d      	add	sp, #116	@ 0x74
 80159ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159be:	b003      	add	sp, #12
 80159c0:	4770      	bx	lr
 80159c2:	bf00      	nop
 80159c4:	2400004c 	.word	0x2400004c
 80159c8:	ffff0208 	.word	0xffff0208

080159cc <memcmp>:
 80159cc:	b510      	push	{r4, lr}
 80159ce:	3901      	subs	r1, #1
 80159d0:	4402      	add	r2, r0
 80159d2:	4290      	cmp	r0, r2
 80159d4:	d101      	bne.n	80159da <memcmp+0xe>
 80159d6:	2000      	movs	r0, #0
 80159d8:	e005      	b.n	80159e6 <memcmp+0x1a>
 80159da:	7803      	ldrb	r3, [r0, #0]
 80159dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80159e0:	42a3      	cmp	r3, r4
 80159e2:	d001      	beq.n	80159e8 <memcmp+0x1c>
 80159e4:	1b18      	subs	r0, r3, r4
 80159e6:	bd10      	pop	{r4, pc}
 80159e8:	3001      	adds	r0, #1
 80159ea:	e7f2      	b.n	80159d2 <memcmp+0x6>

080159ec <memmove>:
 80159ec:	4288      	cmp	r0, r1
 80159ee:	b510      	push	{r4, lr}
 80159f0:	eb01 0402 	add.w	r4, r1, r2
 80159f4:	d902      	bls.n	80159fc <memmove+0x10>
 80159f6:	4284      	cmp	r4, r0
 80159f8:	4623      	mov	r3, r4
 80159fa:	d807      	bhi.n	8015a0c <memmove+0x20>
 80159fc:	1e43      	subs	r3, r0, #1
 80159fe:	42a1      	cmp	r1, r4
 8015a00:	d008      	beq.n	8015a14 <memmove+0x28>
 8015a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a0a:	e7f8      	b.n	80159fe <memmove+0x12>
 8015a0c:	4402      	add	r2, r0
 8015a0e:	4601      	mov	r1, r0
 8015a10:	428a      	cmp	r2, r1
 8015a12:	d100      	bne.n	8015a16 <memmove+0x2a>
 8015a14:	bd10      	pop	{r4, pc}
 8015a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015a1e:	e7f7      	b.n	8015a10 <memmove+0x24>

08015a20 <memset>:
 8015a20:	4402      	add	r2, r0
 8015a22:	4603      	mov	r3, r0
 8015a24:	4293      	cmp	r3, r2
 8015a26:	d100      	bne.n	8015a2a <memset+0xa>
 8015a28:	4770      	bx	lr
 8015a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8015a2e:	e7f9      	b.n	8015a24 <memset+0x4>

08015a30 <_sbrk_r>:
 8015a30:	b538      	push	{r3, r4, r5, lr}
 8015a32:	4d06      	ldr	r5, [pc, #24]	@ (8015a4c <_sbrk_r+0x1c>)
 8015a34:	2300      	movs	r3, #0
 8015a36:	4604      	mov	r4, r0
 8015a38:	4608      	mov	r0, r1
 8015a3a:	602b      	str	r3, [r5, #0]
 8015a3c:	f7ec fabe 	bl	8001fbc <_sbrk>
 8015a40:	1c43      	adds	r3, r0, #1
 8015a42:	d102      	bne.n	8015a4a <_sbrk_r+0x1a>
 8015a44:	682b      	ldr	r3, [r5, #0]
 8015a46:	b103      	cbz	r3, 8015a4a <_sbrk_r+0x1a>
 8015a48:	6023      	str	r3, [r4, #0]
 8015a4a:	bd38      	pop	{r3, r4, r5, pc}
 8015a4c:	240026c0 	.word	0x240026c0

08015a50 <__errno>:
 8015a50:	4b01      	ldr	r3, [pc, #4]	@ (8015a58 <__errno+0x8>)
 8015a52:	6818      	ldr	r0, [r3, #0]
 8015a54:	4770      	bx	lr
 8015a56:	bf00      	nop
 8015a58:	2400004c 	.word	0x2400004c

08015a5c <__libc_init_array>:
 8015a5c:	b570      	push	{r4, r5, r6, lr}
 8015a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8015a94 <__libc_init_array+0x38>)
 8015a60:	4c0d      	ldr	r4, [pc, #52]	@ (8015a98 <__libc_init_array+0x3c>)
 8015a62:	1b64      	subs	r4, r4, r5
 8015a64:	10a4      	asrs	r4, r4, #2
 8015a66:	2600      	movs	r6, #0
 8015a68:	42a6      	cmp	r6, r4
 8015a6a:	d109      	bne.n	8015a80 <__libc_init_array+0x24>
 8015a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8015a9c <__libc_init_array+0x40>)
 8015a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8015aa0 <__libc_init_array+0x44>)
 8015a70:	f000 fb8c 	bl	801618c <_init>
 8015a74:	1b64      	subs	r4, r4, r5
 8015a76:	10a4      	asrs	r4, r4, #2
 8015a78:	2600      	movs	r6, #0
 8015a7a:	42a6      	cmp	r6, r4
 8015a7c:	d105      	bne.n	8015a8a <__libc_init_array+0x2e>
 8015a7e:	bd70      	pop	{r4, r5, r6, pc}
 8015a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a84:	4798      	blx	r3
 8015a86:	3601      	adds	r6, #1
 8015a88:	e7ee      	b.n	8015a68 <__libc_init_array+0xc>
 8015a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a8e:	4798      	blx	r3
 8015a90:	3601      	adds	r6, #1
 8015a92:	e7f2      	b.n	8015a7a <__libc_init_array+0x1e>
 8015a94:	08017434 	.word	0x08017434
 8015a98:	08017434 	.word	0x08017434
 8015a9c:	08017434 	.word	0x08017434
 8015aa0:	08017438 	.word	0x08017438

08015aa4 <__retarget_lock_acquire_recursive>:
 8015aa4:	4770      	bx	lr

08015aa6 <__retarget_lock_release_recursive>:
 8015aa6:	4770      	bx	lr

08015aa8 <memcpy>:
 8015aa8:	440a      	add	r2, r1
 8015aaa:	4291      	cmp	r1, r2
 8015aac:	f100 33ff 	add.w	r3, r0, #4294967295
 8015ab0:	d100      	bne.n	8015ab4 <memcpy+0xc>
 8015ab2:	4770      	bx	lr
 8015ab4:	b510      	push	{r4, lr}
 8015ab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015aba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015abe:	4291      	cmp	r1, r2
 8015ac0:	d1f9      	bne.n	8015ab6 <memcpy+0xe>
 8015ac2:	bd10      	pop	{r4, pc}

08015ac4 <_free_r>:
 8015ac4:	b538      	push	{r3, r4, r5, lr}
 8015ac6:	4605      	mov	r5, r0
 8015ac8:	2900      	cmp	r1, #0
 8015aca:	d041      	beq.n	8015b50 <_free_r+0x8c>
 8015acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ad0:	1f0c      	subs	r4, r1, #4
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	bfb8      	it	lt
 8015ad6:	18e4      	addlt	r4, r4, r3
 8015ad8:	f7ff ff4a 	bl	8015970 <__malloc_lock>
 8015adc:	4a1d      	ldr	r2, [pc, #116]	@ (8015b54 <_free_r+0x90>)
 8015ade:	6813      	ldr	r3, [r2, #0]
 8015ae0:	b933      	cbnz	r3, 8015af0 <_free_r+0x2c>
 8015ae2:	6063      	str	r3, [r4, #4]
 8015ae4:	6014      	str	r4, [r2, #0]
 8015ae6:	4628      	mov	r0, r5
 8015ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015aec:	f7ff bf46 	b.w	801597c <__malloc_unlock>
 8015af0:	42a3      	cmp	r3, r4
 8015af2:	d908      	bls.n	8015b06 <_free_r+0x42>
 8015af4:	6820      	ldr	r0, [r4, #0]
 8015af6:	1821      	adds	r1, r4, r0
 8015af8:	428b      	cmp	r3, r1
 8015afa:	bf01      	itttt	eq
 8015afc:	6819      	ldreq	r1, [r3, #0]
 8015afe:	685b      	ldreq	r3, [r3, #4]
 8015b00:	1809      	addeq	r1, r1, r0
 8015b02:	6021      	streq	r1, [r4, #0]
 8015b04:	e7ed      	b.n	8015ae2 <_free_r+0x1e>
 8015b06:	461a      	mov	r2, r3
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	b10b      	cbz	r3, 8015b10 <_free_r+0x4c>
 8015b0c:	42a3      	cmp	r3, r4
 8015b0e:	d9fa      	bls.n	8015b06 <_free_r+0x42>
 8015b10:	6811      	ldr	r1, [r2, #0]
 8015b12:	1850      	adds	r0, r2, r1
 8015b14:	42a0      	cmp	r0, r4
 8015b16:	d10b      	bne.n	8015b30 <_free_r+0x6c>
 8015b18:	6820      	ldr	r0, [r4, #0]
 8015b1a:	4401      	add	r1, r0
 8015b1c:	1850      	adds	r0, r2, r1
 8015b1e:	4283      	cmp	r3, r0
 8015b20:	6011      	str	r1, [r2, #0]
 8015b22:	d1e0      	bne.n	8015ae6 <_free_r+0x22>
 8015b24:	6818      	ldr	r0, [r3, #0]
 8015b26:	685b      	ldr	r3, [r3, #4]
 8015b28:	6053      	str	r3, [r2, #4]
 8015b2a:	4408      	add	r0, r1
 8015b2c:	6010      	str	r0, [r2, #0]
 8015b2e:	e7da      	b.n	8015ae6 <_free_r+0x22>
 8015b30:	d902      	bls.n	8015b38 <_free_r+0x74>
 8015b32:	230c      	movs	r3, #12
 8015b34:	602b      	str	r3, [r5, #0]
 8015b36:	e7d6      	b.n	8015ae6 <_free_r+0x22>
 8015b38:	6820      	ldr	r0, [r4, #0]
 8015b3a:	1821      	adds	r1, r4, r0
 8015b3c:	428b      	cmp	r3, r1
 8015b3e:	bf04      	itt	eq
 8015b40:	6819      	ldreq	r1, [r3, #0]
 8015b42:	685b      	ldreq	r3, [r3, #4]
 8015b44:	6063      	str	r3, [r4, #4]
 8015b46:	bf04      	itt	eq
 8015b48:	1809      	addeq	r1, r1, r0
 8015b4a:	6021      	streq	r1, [r4, #0]
 8015b4c:	6054      	str	r4, [r2, #4]
 8015b4e:	e7ca      	b.n	8015ae6 <_free_r+0x22>
 8015b50:	bd38      	pop	{r3, r4, r5, pc}
 8015b52:	bf00      	nop
 8015b54:	24002584 	.word	0x24002584

08015b58 <__ssputs_r>:
 8015b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b5c:	688e      	ldr	r6, [r1, #8]
 8015b5e:	461f      	mov	r7, r3
 8015b60:	42be      	cmp	r6, r7
 8015b62:	680b      	ldr	r3, [r1, #0]
 8015b64:	4682      	mov	sl, r0
 8015b66:	460c      	mov	r4, r1
 8015b68:	4690      	mov	r8, r2
 8015b6a:	d82d      	bhi.n	8015bc8 <__ssputs_r+0x70>
 8015b6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015b70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015b74:	d026      	beq.n	8015bc4 <__ssputs_r+0x6c>
 8015b76:	6965      	ldr	r5, [r4, #20]
 8015b78:	6909      	ldr	r1, [r1, #16]
 8015b7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015b7e:	eba3 0901 	sub.w	r9, r3, r1
 8015b82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015b86:	1c7b      	adds	r3, r7, #1
 8015b88:	444b      	add	r3, r9
 8015b8a:	106d      	asrs	r5, r5, #1
 8015b8c:	429d      	cmp	r5, r3
 8015b8e:	bf38      	it	cc
 8015b90:	461d      	movcc	r5, r3
 8015b92:	0553      	lsls	r3, r2, #21
 8015b94:	d527      	bpl.n	8015be6 <__ssputs_r+0x8e>
 8015b96:	4629      	mov	r1, r5
 8015b98:	f7ff fe6a 	bl	8015870 <_malloc_r>
 8015b9c:	4606      	mov	r6, r0
 8015b9e:	b360      	cbz	r0, 8015bfa <__ssputs_r+0xa2>
 8015ba0:	6921      	ldr	r1, [r4, #16]
 8015ba2:	464a      	mov	r2, r9
 8015ba4:	f7ff ff80 	bl	8015aa8 <memcpy>
 8015ba8:	89a3      	ldrh	r3, [r4, #12]
 8015baa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015bb2:	81a3      	strh	r3, [r4, #12]
 8015bb4:	6126      	str	r6, [r4, #16]
 8015bb6:	6165      	str	r5, [r4, #20]
 8015bb8:	444e      	add	r6, r9
 8015bba:	eba5 0509 	sub.w	r5, r5, r9
 8015bbe:	6026      	str	r6, [r4, #0]
 8015bc0:	60a5      	str	r5, [r4, #8]
 8015bc2:	463e      	mov	r6, r7
 8015bc4:	42be      	cmp	r6, r7
 8015bc6:	d900      	bls.n	8015bca <__ssputs_r+0x72>
 8015bc8:	463e      	mov	r6, r7
 8015bca:	6820      	ldr	r0, [r4, #0]
 8015bcc:	4632      	mov	r2, r6
 8015bce:	4641      	mov	r1, r8
 8015bd0:	f7ff ff0c 	bl	80159ec <memmove>
 8015bd4:	68a3      	ldr	r3, [r4, #8]
 8015bd6:	1b9b      	subs	r3, r3, r6
 8015bd8:	60a3      	str	r3, [r4, #8]
 8015bda:	6823      	ldr	r3, [r4, #0]
 8015bdc:	4433      	add	r3, r6
 8015bde:	6023      	str	r3, [r4, #0]
 8015be0:	2000      	movs	r0, #0
 8015be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015be6:	462a      	mov	r2, r5
 8015be8:	f000 fa9a 	bl	8016120 <_realloc_r>
 8015bec:	4606      	mov	r6, r0
 8015bee:	2800      	cmp	r0, #0
 8015bf0:	d1e0      	bne.n	8015bb4 <__ssputs_r+0x5c>
 8015bf2:	6921      	ldr	r1, [r4, #16]
 8015bf4:	4650      	mov	r0, sl
 8015bf6:	f7ff ff65 	bl	8015ac4 <_free_r>
 8015bfa:	230c      	movs	r3, #12
 8015bfc:	f8ca 3000 	str.w	r3, [sl]
 8015c00:	89a3      	ldrh	r3, [r4, #12]
 8015c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c06:	81a3      	strh	r3, [r4, #12]
 8015c08:	f04f 30ff 	mov.w	r0, #4294967295
 8015c0c:	e7e9      	b.n	8015be2 <__ssputs_r+0x8a>
	...

08015c10 <_svfiprintf_r>:
 8015c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c14:	4698      	mov	r8, r3
 8015c16:	898b      	ldrh	r3, [r1, #12]
 8015c18:	061b      	lsls	r3, r3, #24
 8015c1a:	b09d      	sub	sp, #116	@ 0x74
 8015c1c:	4607      	mov	r7, r0
 8015c1e:	460d      	mov	r5, r1
 8015c20:	4614      	mov	r4, r2
 8015c22:	d510      	bpl.n	8015c46 <_svfiprintf_r+0x36>
 8015c24:	690b      	ldr	r3, [r1, #16]
 8015c26:	b973      	cbnz	r3, 8015c46 <_svfiprintf_r+0x36>
 8015c28:	2140      	movs	r1, #64	@ 0x40
 8015c2a:	f7ff fe21 	bl	8015870 <_malloc_r>
 8015c2e:	6028      	str	r0, [r5, #0]
 8015c30:	6128      	str	r0, [r5, #16]
 8015c32:	b930      	cbnz	r0, 8015c42 <_svfiprintf_r+0x32>
 8015c34:	230c      	movs	r3, #12
 8015c36:	603b      	str	r3, [r7, #0]
 8015c38:	f04f 30ff 	mov.w	r0, #4294967295
 8015c3c:	b01d      	add	sp, #116	@ 0x74
 8015c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c42:	2340      	movs	r3, #64	@ 0x40
 8015c44:	616b      	str	r3, [r5, #20]
 8015c46:	2300      	movs	r3, #0
 8015c48:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c4a:	2320      	movs	r3, #32
 8015c4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c54:	2330      	movs	r3, #48	@ 0x30
 8015c56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015df4 <_svfiprintf_r+0x1e4>
 8015c5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015c5e:	f04f 0901 	mov.w	r9, #1
 8015c62:	4623      	mov	r3, r4
 8015c64:	469a      	mov	sl, r3
 8015c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c6a:	b10a      	cbz	r2, 8015c70 <_svfiprintf_r+0x60>
 8015c6c:	2a25      	cmp	r2, #37	@ 0x25
 8015c6e:	d1f9      	bne.n	8015c64 <_svfiprintf_r+0x54>
 8015c70:	ebba 0b04 	subs.w	fp, sl, r4
 8015c74:	d00b      	beq.n	8015c8e <_svfiprintf_r+0x7e>
 8015c76:	465b      	mov	r3, fp
 8015c78:	4622      	mov	r2, r4
 8015c7a:	4629      	mov	r1, r5
 8015c7c:	4638      	mov	r0, r7
 8015c7e:	f7ff ff6b 	bl	8015b58 <__ssputs_r>
 8015c82:	3001      	adds	r0, #1
 8015c84:	f000 80a7 	beq.w	8015dd6 <_svfiprintf_r+0x1c6>
 8015c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c8a:	445a      	add	r2, fp
 8015c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	f000 809f 	beq.w	8015dd6 <_svfiprintf_r+0x1c6>
 8015c98:	2300      	movs	r3, #0
 8015c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8015c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ca2:	f10a 0a01 	add.w	sl, sl, #1
 8015ca6:	9304      	str	r3, [sp, #16]
 8015ca8:	9307      	str	r3, [sp, #28]
 8015caa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015cae:	931a      	str	r3, [sp, #104]	@ 0x68
 8015cb0:	4654      	mov	r4, sl
 8015cb2:	2205      	movs	r2, #5
 8015cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cb8:	484e      	ldr	r0, [pc, #312]	@ (8015df4 <_svfiprintf_r+0x1e4>)
 8015cba:	f7ea fb31 	bl	8000320 <memchr>
 8015cbe:	9a04      	ldr	r2, [sp, #16]
 8015cc0:	b9d8      	cbnz	r0, 8015cfa <_svfiprintf_r+0xea>
 8015cc2:	06d0      	lsls	r0, r2, #27
 8015cc4:	bf44      	itt	mi
 8015cc6:	2320      	movmi	r3, #32
 8015cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ccc:	0711      	lsls	r1, r2, #28
 8015cce:	bf44      	itt	mi
 8015cd0:	232b      	movmi	r3, #43	@ 0x2b
 8015cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8015cda:	2b2a      	cmp	r3, #42	@ 0x2a
 8015cdc:	d015      	beq.n	8015d0a <_svfiprintf_r+0xfa>
 8015cde:	9a07      	ldr	r2, [sp, #28]
 8015ce0:	4654      	mov	r4, sl
 8015ce2:	2000      	movs	r0, #0
 8015ce4:	f04f 0c0a 	mov.w	ip, #10
 8015ce8:	4621      	mov	r1, r4
 8015cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015cee:	3b30      	subs	r3, #48	@ 0x30
 8015cf0:	2b09      	cmp	r3, #9
 8015cf2:	d94b      	bls.n	8015d8c <_svfiprintf_r+0x17c>
 8015cf4:	b1b0      	cbz	r0, 8015d24 <_svfiprintf_r+0x114>
 8015cf6:	9207      	str	r2, [sp, #28]
 8015cf8:	e014      	b.n	8015d24 <_svfiprintf_r+0x114>
 8015cfa:	eba0 0308 	sub.w	r3, r0, r8
 8015cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8015d02:	4313      	orrs	r3, r2
 8015d04:	9304      	str	r3, [sp, #16]
 8015d06:	46a2      	mov	sl, r4
 8015d08:	e7d2      	b.n	8015cb0 <_svfiprintf_r+0xa0>
 8015d0a:	9b03      	ldr	r3, [sp, #12]
 8015d0c:	1d19      	adds	r1, r3, #4
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	9103      	str	r1, [sp, #12]
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	bfbb      	ittet	lt
 8015d16:	425b      	neglt	r3, r3
 8015d18:	f042 0202 	orrlt.w	r2, r2, #2
 8015d1c:	9307      	strge	r3, [sp, #28]
 8015d1e:	9307      	strlt	r3, [sp, #28]
 8015d20:	bfb8      	it	lt
 8015d22:	9204      	strlt	r2, [sp, #16]
 8015d24:	7823      	ldrb	r3, [r4, #0]
 8015d26:	2b2e      	cmp	r3, #46	@ 0x2e
 8015d28:	d10a      	bne.n	8015d40 <_svfiprintf_r+0x130>
 8015d2a:	7863      	ldrb	r3, [r4, #1]
 8015d2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8015d2e:	d132      	bne.n	8015d96 <_svfiprintf_r+0x186>
 8015d30:	9b03      	ldr	r3, [sp, #12]
 8015d32:	1d1a      	adds	r2, r3, #4
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	9203      	str	r2, [sp, #12]
 8015d38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015d3c:	3402      	adds	r4, #2
 8015d3e:	9305      	str	r3, [sp, #20]
 8015d40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015e04 <_svfiprintf_r+0x1f4>
 8015d44:	7821      	ldrb	r1, [r4, #0]
 8015d46:	2203      	movs	r2, #3
 8015d48:	4650      	mov	r0, sl
 8015d4a:	f7ea fae9 	bl	8000320 <memchr>
 8015d4e:	b138      	cbz	r0, 8015d60 <_svfiprintf_r+0x150>
 8015d50:	9b04      	ldr	r3, [sp, #16]
 8015d52:	eba0 000a 	sub.w	r0, r0, sl
 8015d56:	2240      	movs	r2, #64	@ 0x40
 8015d58:	4082      	lsls	r2, r0
 8015d5a:	4313      	orrs	r3, r2
 8015d5c:	3401      	adds	r4, #1
 8015d5e:	9304      	str	r3, [sp, #16]
 8015d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d64:	4824      	ldr	r0, [pc, #144]	@ (8015df8 <_svfiprintf_r+0x1e8>)
 8015d66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015d6a:	2206      	movs	r2, #6
 8015d6c:	f7ea fad8 	bl	8000320 <memchr>
 8015d70:	2800      	cmp	r0, #0
 8015d72:	d036      	beq.n	8015de2 <_svfiprintf_r+0x1d2>
 8015d74:	4b21      	ldr	r3, [pc, #132]	@ (8015dfc <_svfiprintf_r+0x1ec>)
 8015d76:	bb1b      	cbnz	r3, 8015dc0 <_svfiprintf_r+0x1b0>
 8015d78:	9b03      	ldr	r3, [sp, #12]
 8015d7a:	3307      	adds	r3, #7
 8015d7c:	f023 0307 	bic.w	r3, r3, #7
 8015d80:	3308      	adds	r3, #8
 8015d82:	9303      	str	r3, [sp, #12]
 8015d84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d86:	4433      	add	r3, r6
 8015d88:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d8a:	e76a      	b.n	8015c62 <_svfiprintf_r+0x52>
 8015d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d90:	460c      	mov	r4, r1
 8015d92:	2001      	movs	r0, #1
 8015d94:	e7a8      	b.n	8015ce8 <_svfiprintf_r+0xd8>
 8015d96:	2300      	movs	r3, #0
 8015d98:	3401      	adds	r4, #1
 8015d9a:	9305      	str	r3, [sp, #20]
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	f04f 0c0a 	mov.w	ip, #10
 8015da2:	4620      	mov	r0, r4
 8015da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015da8:	3a30      	subs	r2, #48	@ 0x30
 8015daa:	2a09      	cmp	r2, #9
 8015dac:	d903      	bls.n	8015db6 <_svfiprintf_r+0x1a6>
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d0c6      	beq.n	8015d40 <_svfiprintf_r+0x130>
 8015db2:	9105      	str	r1, [sp, #20]
 8015db4:	e7c4      	b.n	8015d40 <_svfiprintf_r+0x130>
 8015db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8015dba:	4604      	mov	r4, r0
 8015dbc:	2301      	movs	r3, #1
 8015dbe:	e7f0      	b.n	8015da2 <_svfiprintf_r+0x192>
 8015dc0:	ab03      	add	r3, sp, #12
 8015dc2:	9300      	str	r3, [sp, #0]
 8015dc4:	462a      	mov	r2, r5
 8015dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8015e00 <_svfiprintf_r+0x1f0>)
 8015dc8:	a904      	add	r1, sp, #16
 8015dca:	4638      	mov	r0, r7
 8015dcc:	f3af 8000 	nop.w
 8015dd0:	1c42      	adds	r2, r0, #1
 8015dd2:	4606      	mov	r6, r0
 8015dd4:	d1d6      	bne.n	8015d84 <_svfiprintf_r+0x174>
 8015dd6:	89ab      	ldrh	r3, [r5, #12]
 8015dd8:	065b      	lsls	r3, r3, #25
 8015dda:	f53f af2d 	bmi.w	8015c38 <_svfiprintf_r+0x28>
 8015dde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015de0:	e72c      	b.n	8015c3c <_svfiprintf_r+0x2c>
 8015de2:	ab03      	add	r3, sp, #12
 8015de4:	9300      	str	r3, [sp, #0]
 8015de6:	462a      	mov	r2, r5
 8015de8:	4b05      	ldr	r3, [pc, #20]	@ (8015e00 <_svfiprintf_r+0x1f0>)
 8015dea:	a904      	add	r1, sp, #16
 8015dec:	4638      	mov	r0, r7
 8015dee:	f000 f879 	bl	8015ee4 <_printf_i>
 8015df2:	e7ed      	b.n	8015dd0 <_svfiprintf_r+0x1c0>
 8015df4:	080173f8 	.word	0x080173f8
 8015df8:	08017402 	.word	0x08017402
 8015dfc:	00000000 	.word	0x00000000
 8015e00:	08015b59 	.word	0x08015b59
 8015e04:	080173fe 	.word	0x080173fe

08015e08 <_printf_common>:
 8015e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e0c:	4616      	mov	r6, r2
 8015e0e:	4698      	mov	r8, r3
 8015e10:	688a      	ldr	r2, [r1, #8]
 8015e12:	690b      	ldr	r3, [r1, #16]
 8015e14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	bfb8      	it	lt
 8015e1c:	4613      	movlt	r3, r2
 8015e1e:	6033      	str	r3, [r6, #0]
 8015e20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015e24:	4607      	mov	r7, r0
 8015e26:	460c      	mov	r4, r1
 8015e28:	b10a      	cbz	r2, 8015e2e <_printf_common+0x26>
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	6033      	str	r3, [r6, #0]
 8015e2e:	6823      	ldr	r3, [r4, #0]
 8015e30:	0699      	lsls	r1, r3, #26
 8015e32:	bf42      	ittt	mi
 8015e34:	6833      	ldrmi	r3, [r6, #0]
 8015e36:	3302      	addmi	r3, #2
 8015e38:	6033      	strmi	r3, [r6, #0]
 8015e3a:	6825      	ldr	r5, [r4, #0]
 8015e3c:	f015 0506 	ands.w	r5, r5, #6
 8015e40:	d106      	bne.n	8015e50 <_printf_common+0x48>
 8015e42:	f104 0a19 	add.w	sl, r4, #25
 8015e46:	68e3      	ldr	r3, [r4, #12]
 8015e48:	6832      	ldr	r2, [r6, #0]
 8015e4a:	1a9b      	subs	r3, r3, r2
 8015e4c:	42ab      	cmp	r3, r5
 8015e4e:	dc26      	bgt.n	8015e9e <_printf_common+0x96>
 8015e50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015e54:	6822      	ldr	r2, [r4, #0]
 8015e56:	3b00      	subs	r3, #0
 8015e58:	bf18      	it	ne
 8015e5a:	2301      	movne	r3, #1
 8015e5c:	0692      	lsls	r2, r2, #26
 8015e5e:	d42b      	bmi.n	8015eb8 <_printf_common+0xb0>
 8015e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015e64:	4641      	mov	r1, r8
 8015e66:	4638      	mov	r0, r7
 8015e68:	47c8      	blx	r9
 8015e6a:	3001      	adds	r0, #1
 8015e6c:	d01e      	beq.n	8015eac <_printf_common+0xa4>
 8015e6e:	6823      	ldr	r3, [r4, #0]
 8015e70:	6922      	ldr	r2, [r4, #16]
 8015e72:	f003 0306 	and.w	r3, r3, #6
 8015e76:	2b04      	cmp	r3, #4
 8015e78:	bf02      	ittt	eq
 8015e7a:	68e5      	ldreq	r5, [r4, #12]
 8015e7c:	6833      	ldreq	r3, [r6, #0]
 8015e7e:	1aed      	subeq	r5, r5, r3
 8015e80:	68a3      	ldr	r3, [r4, #8]
 8015e82:	bf0c      	ite	eq
 8015e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e88:	2500      	movne	r5, #0
 8015e8a:	4293      	cmp	r3, r2
 8015e8c:	bfc4      	itt	gt
 8015e8e:	1a9b      	subgt	r3, r3, r2
 8015e90:	18ed      	addgt	r5, r5, r3
 8015e92:	2600      	movs	r6, #0
 8015e94:	341a      	adds	r4, #26
 8015e96:	42b5      	cmp	r5, r6
 8015e98:	d11a      	bne.n	8015ed0 <_printf_common+0xc8>
 8015e9a:	2000      	movs	r0, #0
 8015e9c:	e008      	b.n	8015eb0 <_printf_common+0xa8>
 8015e9e:	2301      	movs	r3, #1
 8015ea0:	4652      	mov	r2, sl
 8015ea2:	4641      	mov	r1, r8
 8015ea4:	4638      	mov	r0, r7
 8015ea6:	47c8      	blx	r9
 8015ea8:	3001      	adds	r0, #1
 8015eaa:	d103      	bne.n	8015eb4 <_printf_common+0xac>
 8015eac:	f04f 30ff 	mov.w	r0, #4294967295
 8015eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eb4:	3501      	adds	r5, #1
 8015eb6:	e7c6      	b.n	8015e46 <_printf_common+0x3e>
 8015eb8:	18e1      	adds	r1, r4, r3
 8015eba:	1c5a      	adds	r2, r3, #1
 8015ebc:	2030      	movs	r0, #48	@ 0x30
 8015ebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015ec2:	4422      	add	r2, r4
 8015ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015ec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015ecc:	3302      	adds	r3, #2
 8015ece:	e7c7      	b.n	8015e60 <_printf_common+0x58>
 8015ed0:	2301      	movs	r3, #1
 8015ed2:	4622      	mov	r2, r4
 8015ed4:	4641      	mov	r1, r8
 8015ed6:	4638      	mov	r0, r7
 8015ed8:	47c8      	blx	r9
 8015eda:	3001      	adds	r0, #1
 8015edc:	d0e6      	beq.n	8015eac <_printf_common+0xa4>
 8015ede:	3601      	adds	r6, #1
 8015ee0:	e7d9      	b.n	8015e96 <_printf_common+0x8e>
	...

08015ee4 <_printf_i>:
 8015ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ee8:	7e0f      	ldrb	r7, [r1, #24]
 8015eea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015eec:	2f78      	cmp	r7, #120	@ 0x78
 8015eee:	4691      	mov	r9, r2
 8015ef0:	4680      	mov	r8, r0
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	469a      	mov	sl, r3
 8015ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015efa:	d807      	bhi.n	8015f0c <_printf_i+0x28>
 8015efc:	2f62      	cmp	r7, #98	@ 0x62
 8015efe:	d80a      	bhi.n	8015f16 <_printf_i+0x32>
 8015f00:	2f00      	cmp	r7, #0
 8015f02:	f000 80d1 	beq.w	80160a8 <_printf_i+0x1c4>
 8015f06:	2f58      	cmp	r7, #88	@ 0x58
 8015f08:	f000 80b8 	beq.w	801607c <_printf_i+0x198>
 8015f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015f14:	e03a      	b.n	8015f8c <_printf_i+0xa8>
 8015f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015f1a:	2b15      	cmp	r3, #21
 8015f1c:	d8f6      	bhi.n	8015f0c <_printf_i+0x28>
 8015f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8015f24 <_printf_i+0x40>)
 8015f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015f24:	08015f7d 	.word	0x08015f7d
 8015f28:	08015f91 	.word	0x08015f91
 8015f2c:	08015f0d 	.word	0x08015f0d
 8015f30:	08015f0d 	.word	0x08015f0d
 8015f34:	08015f0d 	.word	0x08015f0d
 8015f38:	08015f0d 	.word	0x08015f0d
 8015f3c:	08015f91 	.word	0x08015f91
 8015f40:	08015f0d 	.word	0x08015f0d
 8015f44:	08015f0d 	.word	0x08015f0d
 8015f48:	08015f0d 	.word	0x08015f0d
 8015f4c:	08015f0d 	.word	0x08015f0d
 8015f50:	0801608f 	.word	0x0801608f
 8015f54:	08015fbb 	.word	0x08015fbb
 8015f58:	08016049 	.word	0x08016049
 8015f5c:	08015f0d 	.word	0x08015f0d
 8015f60:	08015f0d 	.word	0x08015f0d
 8015f64:	080160b1 	.word	0x080160b1
 8015f68:	08015f0d 	.word	0x08015f0d
 8015f6c:	08015fbb 	.word	0x08015fbb
 8015f70:	08015f0d 	.word	0x08015f0d
 8015f74:	08015f0d 	.word	0x08015f0d
 8015f78:	08016051 	.word	0x08016051
 8015f7c:	6833      	ldr	r3, [r6, #0]
 8015f7e:	1d1a      	adds	r2, r3, #4
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	6032      	str	r2, [r6, #0]
 8015f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	e09c      	b.n	80160ca <_printf_i+0x1e6>
 8015f90:	6833      	ldr	r3, [r6, #0]
 8015f92:	6820      	ldr	r0, [r4, #0]
 8015f94:	1d19      	adds	r1, r3, #4
 8015f96:	6031      	str	r1, [r6, #0]
 8015f98:	0606      	lsls	r6, r0, #24
 8015f9a:	d501      	bpl.n	8015fa0 <_printf_i+0xbc>
 8015f9c:	681d      	ldr	r5, [r3, #0]
 8015f9e:	e003      	b.n	8015fa8 <_printf_i+0xc4>
 8015fa0:	0645      	lsls	r5, r0, #25
 8015fa2:	d5fb      	bpl.n	8015f9c <_printf_i+0xb8>
 8015fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015fa8:	2d00      	cmp	r5, #0
 8015faa:	da03      	bge.n	8015fb4 <_printf_i+0xd0>
 8015fac:	232d      	movs	r3, #45	@ 0x2d
 8015fae:	426d      	negs	r5, r5
 8015fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015fb4:	4858      	ldr	r0, [pc, #352]	@ (8016118 <_printf_i+0x234>)
 8015fb6:	230a      	movs	r3, #10
 8015fb8:	e011      	b.n	8015fde <_printf_i+0xfa>
 8015fba:	6821      	ldr	r1, [r4, #0]
 8015fbc:	6833      	ldr	r3, [r6, #0]
 8015fbe:	0608      	lsls	r0, r1, #24
 8015fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8015fc4:	d402      	bmi.n	8015fcc <_printf_i+0xe8>
 8015fc6:	0649      	lsls	r1, r1, #25
 8015fc8:	bf48      	it	mi
 8015fca:	b2ad      	uxthmi	r5, r5
 8015fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8015fce:	4852      	ldr	r0, [pc, #328]	@ (8016118 <_printf_i+0x234>)
 8015fd0:	6033      	str	r3, [r6, #0]
 8015fd2:	bf14      	ite	ne
 8015fd4:	230a      	movne	r3, #10
 8015fd6:	2308      	moveq	r3, #8
 8015fd8:	2100      	movs	r1, #0
 8015fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015fde:	6866      	ldr	r6, [r4, #4]
 8015fe0:	60a6      	str	r6, [r4, #8]
 8015fe2:	2e00      	cmp	r6, #0
 8015fe4:	db05      	blt.n	8015ff2 <_printf_i+0x10e>
 8015fe6:	6821      	ldr	r1, [r4, #0]
 8015fe8:	432e      	orrs	r6, r5
 8015fea:	f021 0104 	bic.w	r1, r1, #4
 8015fee:	6021      	str	r1, [r4, #0]
 8015ff0:	d04b      	beq.n	801608a <_printf_i+0x1a6>
 8015ff2:	4616      	mov	r6, r2
 8015ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8015ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8015ffc:	5dc7      	ldrb	r7, [r0, r7]
 8015ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016002:	462f      	mov	r7, r5
 8016004:	42bb      	cmp	r3, r7
 8016006:	460d      	mov	r5, r1
 8016008:	d9f4      	bls.n	8015ff4 <_printf_i+0x110>
 801600a:	2b08      	cmp	r3, #8
 801600c:	d10b      	bne.n	8016026 <_printf_i+0x142>
 801600e:	6823      	ldr	r3, [r4, #0]
 8016010:	07df      	lsls	r7, r3, #31
 8016012:	d508      	bpl.n	8016026 <_printf_i+0x142>
 8016014:	6923      	ldr	r3, [r4, #16]
 8016016:	6861      	ldr	r1, [r4, #4]
 8016018:	4299      	cmp	r1, r3
 801601a:	bfde      	ittt	le
 801601c:	2330      	movle	r3, #48	@ 0x30
 801601e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016022:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016026:	1b92      	subs	r2, r2, r6
 8016028:	6122      	str	r2, [r4, #16]
 801602a:	f8cd a000 	str.w	sl, [sp]
 801602e:	464b      	mov	r3, r9
 8016030:	aa03      	add	r2, sp, #12
 8016032:	4621      	mov	r1, r4
 8016034:	4640      	mov	r0, r8
 8016036:	f7ff fee7 	bl	8015e08 <_printf_common>
 801603a:	3001      	adds	r0, #1
 801603c:	d14a      	bne.n	80160d4 <_printf_i+0x1f0>
 801603e:	f04f 30ff 	mov.w	r0, #4294967295
 8016042:	b004      	add	sp, #16
 8016044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016048:	6823      	ldr	r3, [r4, #0]
 801604a:	f043 0320 	orr.w	r3, r3, #32
 801604e:	6023      	str	r3, [r4, #0]
 8016050:	4832      	ldr	r0, [pc, #200]	@ (801611c <_printf_i+0x238>)
 8016052:	2778      	movs	r7, #120	@ 0x78
 8016054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016058:	6823      	ldr	r3, [r4, #0]
 801605a:	6831      	ldr	r1, [r6, #0]
 801605c:	061f      	lsls	r7, r3, #24
 801605e:	f851 5b04 	ldr.w	r5, [r1], #4
 8016062:	d402      	bmi.n	801606a <_printf_i+0x186>
 8016064:	065f      	lsls	r7, r3, #25
 8016066:	bf48      	it	mi
 8016068:	b2ad      	uxthmi	r5, r5
 801606a:	6031      	str	r1, [r6, #0]
 801606c:	07d9      	lsls	r1, r3, #31
 801606e:	bf44      	itt	mi
 8016070:	f043 0320 	orrmi.w	r3, r3, #32
 8016074:	6023      	strmi	r3, [r4, #0]
 8016076:	b11d      	cbz	r5, 8016080 <_printf_i+0x19c>
 8016078:	2310      	movs	r3, #16
 801607a:	e7ad      	b.n	8015fd8 <_printf_i+0xf4>
 801607c:	4826      	ldr	r0, [pc, #152]	@ (8016118 <_printf_i+0x234>)
 801607e:	e7e9      	b.n	8016054 <_printf_i+0x170>
 8016080:	6823      	ldr	r3, [r4, #0]
 8016082:	f023 0320 	bic.w	r3, r3, #32
 8016086:	6023      	str	r3, [r4, #0]
 8016088:	e7f6      	b.n	8016078 <_printf_i+0x194>
 801608a:	4616      	mov	r6, r2
 801608c:	e7bd      	b.n	801600a <_printf_i+0x126>
 801608e:	6833      	ldr	r3, [r6, #0]
 8016090:	6825      	ldr	r5, [r4, #0]
 8016092:	6961      	ldr	r1, [r4, #20]
 8016094:	1d18      	adds	r0, r3, #4
 8016096:	6030      	str	r0, [r6, #0]
 8016098:	062e      	lsls	r6, r5, #24
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	d501      	bpl.n	80160a2 <_printf_i+0x1be>
 801609e:	6019      	str	r1, [r3, #0]
 80160a0:	e002      	b.n	80160a8 <_printf_i+0x1c4>
 80160a2:	0668      	lsls	r0, r5, #25
 80160a4:	d5fb      	bpl.n	801609e <_printf_i+0x1ba>
 80160a6:	8019      	strh	r1, [r3, #0]
 80160a8:	2300      	movs	r3, #0
 80160aa:	6123      	str	r3, [r4, #16]
 80160ac:	4616      	mov	r6, r2
 80160ae:	e7bc      	b.n	801602a <_printf_i+0x146>
 80160b0:	6833      	ldr	r3, [r6, #0]
 80160b2:	1d1a      	adds	r2, r3, #4
 80160b4:	6032      	str	r2, [r6, #0]
 80160b6:	681e      	ldr	r6, [r3, #0]
 80160b8:	6862      	ldr	r2, [r4, #4]
 80160ba:	2100      	movs	r1, #0
 80160bc:	4630      	mov	r0, r6
 80160be:	f7ea f92f 	bl	8000320 <memchr>
 80160c2:	b108      	cbz	r0, 80160c8 <_printf_i+0x1e4>
 80160c4:	1b80      	subs	r0, r0, r6
 80160c6:	6060      	str	r0, [r4, #4]
 80160c8:	6863      	ldr	r3, [r4, #4]
 80160ca:	6123      	str	r3, [r4, #16]
 80160cc:	2300      	movs	r3, #0
 80160ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80160d2:	e7aa      	b.n	801602a <_printf_i+0x146>
 80160d4:	6923      	ldr	r3, [r4, #16]
 80160d6:	4632      	mov	r2, r6
 80160d8:	4649      	mov	r1, r9
 80160da:	4640      	mov	r0, r8
 80160dc:	47d0      	blx	sl
 80160de:	3001      	adds	r0, #1
 80160e0:	d0ad      	beq.n	801603e <_printf_i+0x15a>
 80160e2:	6823      	ldr	r3, [r4, #0]
 80160e4:	079b      	lsls	r3, r3, #30
 80160e6:	d413      	bmi.n	8016110 <_printf_i+0x22c>
 80160e8:	68e0      	ldr	r0, [r4, #12]
 80160ea:	9b03      	ldr	r3, [sp, #12]
 80160ec:	4298      	cmp	r0, r3
 80160ee:	bfb8      	it	lt
 80160f0:	4618      	movlt	r0, r3
 80160f2:	e7a6      	b.n	8016042 <_printf_i+0x15e>
 80160f4:	2301      	movs	r3, #1
 80160f6:	4632      	mov	r2, r6
 80160f8:	4649      	mov	r1, r9
 80160fa:	4640      	mov	r0, r8
 80160fc:	47d0      	blx	sl
 80160fe:	3001      	adds	r0, #1
 8016100:	d09d      	beq.n	801603e <_printf_i+0x15a>
 8016102:	3501      	adds	r5, #1
 8016104:	68e3      	ldr	r3, [r4, #12]
 8016106:	9903      	ldr	r1, [sp, #12]
 8016108:	1a5b      	subs	r3, r3, r1
 801610a:	42ab      	cmp	r3, r5
 801610c:	dcf2      	bgt.n	80160f4 <_printf_i+0x210>
 801610e:	e7eb      	b.n	80160e8 <_printf_i+0x204>
 8016110:	2500      	movs	r5, #0
 8016112:	f104 0619 	add.w	r6, r4, #25
 8016116:	e7f5      	b.n	8016104 <_printf_i+0x220>
 8016118:	08017409 	.word	0x08017409
 801611c:	0801741a 	.word	0x0801741a

08016120 <_realloc_r>:
 8016120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016124:	4607      	mov	r7, r0
 8016126:	4614      	mov	r4, r2
 8016128:	460d      	mov	r5, r1
 801612a:	b921      	cbnz	r1, 8016136 <_realloc_r+0x16>
 801612c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016130:	4611      	mov	r1, r2
 8016132:	f7ff bb9d 	b.w	8015870 <_malloc_r>
 8016136:	b92a      	cbnz	r2, 8016144 <_realloc_r+0x24>
 8016138:	f7ff fcc4 	bl	8015ac4 <_free_r>
 801613c:	4625      	mov	r5, r4
 801613e:	4628      	mov	r0, r5
 8016140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016144:	f000 f81a 	bl	801617c <_malloc_usable_size_r>
 8016148:	4284      	cmp	r4, r0
 801614a:	4606      	mov	r6, r0
 801614c:	d802      	bhi.n	8016154 <_realloc_r+0x34>
 801614e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016152:	d8f4      	bhi.n	801613e <_realloc_r+0x1e>
 8016154:	4621      	mov	r1, r4
 8016156:	4638      	mov	r0, r7
 8016158:	f7ff fb8a 	bl	8015870 <_malloc_r>
 801615c:	4680      	mov	r8, r0
 801615e:	b908      	cbnz	r0, 8016164 <_realloc_r+0x44>
 8016160:	4645      	mov	r5, r8
 8016162:	e7ec      	b.n	801613e <_realloc_r+0x1e>
 8016164:	42b4      	cmp	r4, r6
 8016166:	4622      	mov	r2, r4
 8016168:	4629      	mov	r1, r5
 801616a:	bf28      	it	cs
 801616c:	4632      	movcs	r2, r6
 801616e:	f7ff fc9b 	bl	8015aa8 <memcpy>
 8016172:	4629      	mov	r1, r5
 8016174:	4638      	mov	r0, r7
 8016176:	f7ff fca5 	bl	8015ac4 <_free_r>
 801617a:	e7f1      	b.n	8016160 <_realloc_r+0x40>

0801617c <_malloc_usable_size_r>:
 801617c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016180:	1f18      	subs	r0, r3, #4
 8016182:	2b00      	cmp	r3, #0
 8016184:	bfbc      	itt	lt
 8016186:	580b      	ldrlt	r3, [r1, r0]
 8016188:	18c0      	addlt	r0, r0, r3
 801618a:	4770      	bx	lr

0801618c <_init>:
 801618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801618e:	bf00      	nop
 8016190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016192:	bc08      	pop	{r3}
 8016194:	469e      	mov	lr, r3
 8016196:	4770      	bx	lr

08016198 <_fini>:
 8016198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801619a:	bf00      	nop
 801619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801619e:	bc08      	pop	{r3}
 80161a0:	469e      	mov	lr, r3
 80161a2:	4770      	bx	lr
