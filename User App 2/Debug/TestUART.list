
TestUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  080200e0  080200e0  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d58  080203ac  080203ac  000003ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08027104  08027104  00007104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08027604  08027604  00007604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802760c  0802760c  0000760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08027610  08027610  00007610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08027614  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001fc  24000010  08027624  00008010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400020c  08027624  0000820c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000121b2  00000000  00000000  0000803e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026d3  00000000  00000000  0001a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000cd8  00000000  00000000  0001c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009dc  00000000  00000000  0001d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032210  00000000  00000000  0001df7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000129cc  00000000  00000000  0005018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141a16  00000000  00000000  00062b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a456e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034a4  00000000  00000000  001a45b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000054  00000000  00000000  001a7a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080203ac <__do_global_dtors_aux>:
 80203ac:	b510      	push	{r4, lr}
 80203ae:	4c05      	ldr	r4, [pc, #20]	@ (80203c4 <__do_global_dtors_aux+0x18>)
 80203b0:	7823      	ldrb	r3, [r4, #0]
 80203b2:	b933      	cbnz	r3, 80203c2 <__do_global_dtors_aux+0x16>
 80203b4:	4b04      	ldr	r3, [pc, #16]	@ (80203c8 <__do_global_dtors_aux+0x1c>)
 80203b6:	b113      	cbz	r3, 80203be <__do_global_dtors_aux+0x12>
 80203b8:	4804      	ldr	r0, [pc, #16]	@ (80203cc <__do_global_dtors_aux+0x20>)
 80203ba:	f3af 8000 	nop.w
 80203be:	2301      	movs	r3, #1
 80203c0:	7023      	strb	r3, [r4, #0]
 80203c2:	bd10      	pop	{r4, pc}
 80203c4:	24000010 	.word	0x24000010
 80203c8:	00000000 	.word	0x00000000
 80203cc:	080270ec 	.word	0x080270ec

080203d0 <frame_dummy>:
 80203d0:	b508      	push	{r3, lr}
 80203d2:	4b03      	ldr	r3, [pc, #12]	@ (80203e0 <frame_dummy+0x10>)
 80203d4:	b11b      	cbz	r3, 80203de <frame_dummy+0xe>
 80203d6:	4903      	ldr	r1, [pc, #12]	@ (80203e4 <frame_dummy+0x14>)
 80203d8:	4803      	ldr	r0, [pc, #12]	@ (80203e8 <frame_dummy+0x18>)
 80203da:	f3af 8000 	nop.w
 80203de:	bd08      	pop	{r3, pc}
 80203e0:	00000000 	.word	0x00000000
 80203e4:	24000014 	.word	0x24000014
 80203e8:	080270ec 	.word	0x080270ec

080203ec <strlen>:
 80203ec:	4603      	mov	r3, r0
 80203ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80203f2:	2a00      	cmp	r2, #0
 80203f4:	d1fb      	bne.n	80203ee <strlen+0x2>
 80203f6:	1a18      	subs	r0, r3, r0
 80203f8:	3801      	subs	r0, #1
 80203fa:	4770      	bx	lr

080203fc <__aeabi_uldivmod>:
 80203fc:	b953      	cbnz	r3, 8020414 <__aeabi_uldivmod+0x18>
 80203fe:	b94a      	cbnz	r2, 8020414 <__aeabi_uldivmod+0x18>
 8020400:	2900      	cmp	r1, #0
 8020402:	bf08      	it	eq
 8020404:	2800      	cmpeq	r0, #0
 8020406:	bf1c      	itt	ne
 8020408:	f04f 31ff 	movne.w	r1, #4294967295
 802040c:	f04f 30ff 	movne.w	r0, #4294967295
 8020410:	f000 b988 	b.w	8020724 <__aeabi_idiv0>
 8020414:	f1ad 0c08 	sub.w	ip, sp, #8
 8020418:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 802041c:	f000 f806 	bl	802042c <__udivmoddi4>
 8020420:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020428:	b004      	add	sp, #16
 802042a:	4770      	bx	lr

0802042c <__udivmoddi4>:
 802042c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020430:	9d08      	ldr	r5, [sp, #32]
 8020432:	468e      	mov	lr, r1
 8020434:	4604      	mov	r4, r0
 8020436:	4688      	mov	r8, r1
 8020438:	2b00      	cmp	r3, #0
 802043a:	d14a      	bne.n	80204d2 <__udivmoddi4+0xa6>
 802043c:	428a      	cmp	r2, r1
 802043e:	4617      	mov	r7, r2
 8020440:	d962      	bls.n	8020508 <__udivmoddi4+0xdc>
 8020442:	fab2 f682 	clz	r6, r2
 8020446:	b14e      	cbz	r6, 802045c <__udivmoddi4+0x30>
 8020448:	f1c6 0320 	rsb	r3, r6, #32
 802044c:	fa01 f806 	lsl.w	r8, r1, r6
 8020450:	fa20 f303 	lsr.w	r3, r0, r3
 8020454:	40b7      	lsls	r7, r6
 8020456:	ea43 0808 	orr.w	r8, r3, r8
 802045a:	40b4      	lsls	r4, r6
 802045c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020460:	fa1f fc87 	uxth.w	ip, r7
 8020464:	fbb8 f1fe 	udiv	r1, r8, lr
 8020468:	0c23      	lsrs	r3, r4, #16
 802046a:	fb0e 8811 	mls	r8, lr, r1, r8
 802046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020472:	fb01 f20c 	mul.w	r2, r1, ip
 8020476:	429a      	cmp	r2, r3
 8020478:	d909      	bls.n	802048e <__udivmoddi4+0x62>
 802047a:	18fb      	adds	r3, r7, r3
 802047c:	f101 30ff 	add.w	r0, r1, #4294967295
 8020480:	f080 80ea 	bcs.w	8020658 <__udivmoddi4+0x22c>
 8020484:	429a      	cmp	r2, r3
 8020486:	f240 80e7 	bls.w	8020658 <__udivmoddi4+0x22c>
 802048a:	3902      	subs	r1, #2
 802048c:	443b      	add	r3, r7
 802048e:	1a9a      	subs	r2, r3, r2
 8020490:	b2a3      	uxth	r3, r4
 8020492:	fbb2 f0fe 	udiv	r0, r2, lr
 8020496:	fb0e 2210 	mls	r2, lr, r0, r2
 802049a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802049e:	fb00 fc0c 	mul.w	ip, r0, ip
 80204a2:	459c      	cmp	ip, r3
 80204a4:	d909      	bls.n	80204ba <__udivmoddi4+0x8e>
 80204a6:	18fb      	adds	r3, r7, r3
 80204a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80204ac:	f080 80d6 	bcs.w	802065c <__udivmoddi4+0x230>
 80204b0:	459c      	cmp	ip, r3
 80204b2:	f240 80d3 	bls.w	802065c <__udivmoddi4+0x230>
 80204b6:	443b      	add	r3, r7
 80204b8:	3802      	subs	r0, #2
 80204ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80204be:	eba3 030c 	sub.w	r3, r3, ip
 80204c2:	2100      	movs	r1, #0
 80204c4:	b11d      	cbz	r5, 80204ce <__udivmoddi4+0xa2>
 80204c6:	40f3      	lsrs	r3, r6
 80204c8:	2200      	movs	r2, #0
 80204ca:	e9c5 3200 	strd	r3, r2, [r5]
 80204ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80204d2:	428b      	cmp	r3, r1
 80204d4:	d905      	bls.n	80204e2 <__udivmoddi4+0xb6>
 80204d6:	b10d      	cbz	r5, 80204dc <__udivmoddi4+0xb0>
 80204d8:	e9c5 0100 	strd	r0, r1, [r5]
 80204dc:	2100      	movs	r1, #0
 80204de:	4608      	mov	r0, r1
 80204e0:	e7f5      	b.n	80204ce <__udivmoddi4+0xa2>
 80204e2:	fab3 f183 	clz	r1, r3
 80204e6:	2900      	cmp	r1, #0
 80204e8:	d146      	bne.n	8020578 <__udivmoddi4+0x14c>
 80204ea:	4573      	cmp	r3, lr
 80204ec:	d302      	bcc.n	80204f4 <__udivmoddi4+0xc8>
 80204ee:	4282      	cmp	r2, r0
 80204f0:	f200 8105 	bhi.w	80206fe <__udivmoddi4+0x2d2>
 80204f4:	1a84      	subs	r4, r0, r2
 80204f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80204fa:	2001      	movs	r0, #1
 80204fc:	4690      	mov	r8, r2
 80204fe:	2d00      	cmp	r5, #0
 8020500:	d0e5      	beq.n	80204ce <__udivmoddi4+0xa2>
 8020502:	e9c5 4800 	strd	r4, r8, [r5]
 8020506:	e7e2      	b.n	80204ce <__udivmoddi4+0xa2>
 8020508:	2a00      	cmp	r2, #0
 802050a:	f000 8090 	beq.w	802062e <__udivmoddi4+0x202>
 802050e:	fab2 f682 	clz	r6, r2
 8020512:	2e00      	cmp	r6, #0
 8020514:	f040 80a4 	bne.w	8020660 <__udivmoddi4+0x234>
 8020518:	1a8a      	subs	r2, r1, r2
 802051a:	0c03      	lsrs	r3, r0, #16
 802051c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020520:	b280      	uxth	r0, r0
 8020522:	b2bc      	uxth	r4, r7
 8020524:	2101      	movs	r1, #1
 8020526:	fbb2 fcfe 	udiv	ip, r2, lr
 802052a:	fb0e 221c 	mls	r2, lr, ip, r2
 802052e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020532:	fb04 f20c 	mul.w	r2, r4, ip
 8020536:	429a      	cmp	r2, r3
 8020538:	d907      	bls.n	802054a <__udivmoddi4+0x11e>
 802053a:	18fb      	adds	r3, r7, r3
 802053c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8020540:	d202      	bcs.n	8020548 <__udivmoddi4+0x11c>
 8020542:	429a      	cmp	r2, r3
 8020544:	f200 80e0 	bhi.w	8020708 <__udivmoddi4+0x2dc>
 8020548:	46c4      	mov	ip, r8
 802054a:	1a9b      	subs	r3, r3, r2
 802054c:	fbb3 f2fe 	udiv	r2, r3, lr
 8020550:	fb0e 3312 	mls	r3, lr, r2, r3
 8020554:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8020558:	fb02 f404 	mul.w	r4, r2, r4
 802055c:	429c      	cmp	r4, r3
 802055e:	d907      	bls.n	8020570 <__udivmoddi4+0x144>
 8020560:	18fb      	adds	r3, r7, r3
 8020562:	f102 30ff 	add.w	r0, r2, #4294967295
 8020566:	d202      	bcs.n	802056e <__udivmoddi4+0x142>
 8020568:	429c      	cmp	r4, r3
 802056a:	f200 80ca 	bhi.w	8020702 <__udivmoddi4+0x2d6>
 802056e:	4602      	mov	r2, r0
 8020570:	1b1b      	subs	r3, r3, r4
 8020572:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8020576:	e7a5      	b.n	80204c4 <__udivmoddi4+0x98>
 8020578:	f1c1 0620 	rsb	r6, r1, #32
 802057c:	408b      	lsls	r3, r1
 802057e:	fa22 f706 	lsr.w	r7, r2, r6
 8020582:	431f      	orrs	r7, r3
 8020584:	fa0e f401 	lsl.w	r4, lr, r1
 8020588:	fa20 f306 	lsr.w	r3, r0, r6
 802058c:	fa2e fe06 	lsr.w	lr, lr, r6
 8020590:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8020594:	4323      	orrs	r3, r4
 8020596:	fa00 f801 	lsl.w	r8, r0, r1
 802059a:	fa1f fc87 	uxth.w	ip, r7
 802059e:	fbbe f0f9 	udiv	r0, lr, r9
 80205a2:	0c1c      	lsrs	r4, r3, #16
 80205a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80205a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80205ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80205b0:	45a6      	cmp	lr, r4
 80205b2:	fa02 f201 	lsl.w	r2, r2, r1
 80205b6:	d909      	bls.n	80205cc <__udivmoddi4+0x1a0>
 80205b8:	193c      	adds	r4, r7, r4
 80205ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80205be:	f080 809c 	bcs.w	80206fa <__udivmoddi4+0x2ce>
 80205c2:	45a6      	cmp	lr, r4
 80205c4:	f240 8099 	bls.w	80206fa <__udivmoddi4+0x2ce>
 80205c8:	3802      	subs	r0, #2
 80205ca:	443c      	add	r4, r7
 80205cc:	eba4 040e 	sub.w	r4, r4, lr
 80205d0:	fa1f fe83 	uxth.w	lr, r3
 80205d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80205d8:	fb09 4413 	mls	r4, r9, r3, r4
 80205dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80205e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80205e4:	45a4      	cmp	ip, r4
 80205e6:	d908      	bls.n	80205fa <__udivmoddi4+0x1ce>
 80205e8:	193c      	adds	r4, r7, r4
 80205ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80205ee:	f080 8082 	bcs.w	80206f6 <__udivmoddi4+0x2ca>
 80205f2:	45a4      	cmp	ip, r4
 80205f4:	d97f      	bls.n	80206f6 <__udivmoddi4+0x2ca>
 80205f6:	3b02      	subs	r3, #2
 80205f8:	443c      	add	r4, r7
 80205fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80205fe:	eba4 040c 	sub.w	r4, r4, ip
 8020602:	fba0 ec02 	umull	lr, ip, r0, r2
 8020606:	4564      	cmp	r4, ip
 8020608:	4673      	mov	r3, lr
 802060a:	46e1      	mov	r9, ip
 802060c:	d362      	bcc.n	80206d4 <__udivmoddi4+0x2a8>
 802060e:	d05f      	beq.n	80206d0 <__udivmoddi4+0x2a4>
 8020610:	b15d      	cbz	r5, 802062a <__udivmoddi4+0x1fe>
 8020612:	ebb8 0203 	subs.w	r2, r8, r3
 8020616:	eb64 0409 	sbc.w	r4, r4, r9
 802061a:	fa04 f606 	lsl.w	r6, r4, r6
 802061e:	fa22 f301 	lsr.w	r3, r2, r1
 8020622:	431e      	orrs	r6, r3
 8020624:	40cc      	lsrs	r4, r1
 8020626:	e9c5 6400 	strd	r6, r4, [r5]
 802062a:	2100      	movs	r1, #0
 802062c:	e74f      	b.n	80204ce <__udivmoddi4+0xa2>
 802062e:	fbb1 fcf2 	udiv	ip, r1, r2
 8020632:	0c01      	lsrs	r1, r0, #16
 8020634:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8020638:	b280      	uxth	r0, r0
 802063a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 802063e:	463b      	mov	r3, r7
 8020640:	4638      	mov	r0, r7
 8020642:	463c      	mov	r4, r7
 8020644:	46b8      	mov	r8, r7
 8020646:	46be      	mov	lr, r7
 8020648:	2620      	movs	r6, #32
 802064a:	fbb1 f1f7 	udiv	r1, r1, r7
 802064e:	eba2 0208 	sub.w	r2, r2, r8
 8020652:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8020656:	e766      	b.n	8020526 <__udivmoddi4+0xfa>
 8020658:	4601      	mov	r1, r0
 802065a:	e718      	b.n	802048e <__udivmoddi4+0x62>
 802065c:	4610      	mov	r0, r2
 802065e:	e72c      	b.n	80204ba <__udivmoddi4+0x8e>
 8020660:	f1c6 0220 	rsb	r2, r6, #32
 8020664:	fa2e f302 	lsr.w	r3, lr, r2
 8020668:	40b7      	lsls	r7, r6
 802066a:	40b1      	lsls	r1, r6
 802066c:	fa20 f202 	lsr.w	r2, r0, r2
 8020670:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020674:	430a      	orrs	r2, r1
 8020676:	fbb3 f8fe 	udiv	r8, r3, lr
 802067a:	b2bc      	uxth	r4, r7
 802067c:	fb0e 3318 	mls	r3, lr, r8, r3
 8020680:	0c11      	lsrs	r1, r2, #16
 8020682:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020686:	fb08 f904 	mul.w	r9, r8, r4
 802068a:	40b0      	lsls	r0, r6
 802068c:	4589      	cmp	r9, r1
 802068e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8020692:	b280      	uxth	r0, r0
 8020694:	d93e      	bls.n	8020714 <__udivmoddi4+0x2e8>
 8020696:	1879      	adds	r1, r7, r1
 8020698:	f108 3cff 	add.w	ip, r8, #4294967295
 802069c:	d201      	bcs.n	80206a2 <__udivmoddi4+0x276>
 802069e:	4589      	cmp	r9, r1
 80206a0:	d81f      	bhi.n	80206e2 <__udivmoddi4+0x2b6>
 80206a2:	eba1 0109 	sub.w	r1, r1, r9
 80206a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80206aa:	fb09 f804 	mul.w	r8, r9, r4
 80206ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80206b2:	b292      	uxth	r2, r2
 80206b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80206b8:	4542      	cmp	r2, r8
 80206ba:	d229      	bcs.n	8020710 <__udivmoddi4+0x2e4>
 80206bc:	18ba      	adds	r2, r7, r2
 80206be:	f109 31ff 	add.w	r1, r9, #4294967295
 80206c2:	d2c4      	bcs.n	802064e <__udivmoddi4+0x222>
 80206c4:	4542      	cmp	r2, r8
 80206c6:	d2c2      	bcs.n	802064e <__udivmoddi4+0x222>
 80206c8:	f1a9 0102 	sub.w	r1, r9, #2
 80206cc:	443a      	add	r2, r7
 80206ce:	e7be      	b.n	802064e <__udivmoddi4+0x222>
 80206d0:	45f0      	cmp	r8, lr
 80206d2:	d29d      	bcs.n	8020610 <__udivmoddi4+0x1e4>
 80206d4:	ebbe 0302 	subs.w	r3, lr, r2
 80206d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80206dc:	3801      	subs	r0, #1
 80206de:	46e1      	mov	r9, ip
 80206e0:	e796      	b.n	8020610 <__udivmoddi4+0x1e4>
 80206e2:	eba7 0909 	sub.w	r9, r7, r9
 80206e6:	4449      	add	r1, r9
 80206e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80206ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80206f0:	fb09 f804 	mul.w	r8, r9, r4
 80206f4:	e7db      	b.n	80206ae <__udivmoddi4+0x282>
 80206f6:	4673      	mov	r3, lr
 80206f8:	e77f      	b.n	80205fa <__udivmoddi4+0x1ce>
 80206fa:	4650      	mov	r0, sl
 80206fc:	e766      	b.n	80205cc <__udivmoddi4+0x1a0>
 80206fe:	4608      	mov	r0, r1
 8020700:	e6fd      	b.n	80204fe <__udivmoddi4+0xd2>
 8020702:	443b      	add	r3, r7
 8020704:	3a02      	subs	r2, #2
 8020706:	e733      	b.n	8020570 <__udivmoddi4+0x144>
 8020708:	f1ac 0c02 	sub.w	ip, ip, #2
 802070c:	443b      	add	r3, r7
 802070e:	e71c      	b.n	802054a <__udivmoddi4+0x11e>
 8020710:	4649      	mov	r1, r9
 8020712:	e79c      	b.n	802064e <__udivmoddi4+0x222>
 8020714:	eba1 0109 	sub.w	r1, r1, r9
 8020718:	46c4      	mov	ip, r8
 802071a:	fbb1 f9fe 	udiv	r9, r1, lr
 802071e:	fb09 f804 	mul.w	r8, r9, r4
 8020722:	e7c4      	b.n	80206ae <__udivmoddi4+0x282>

08020724 <__aeabi_idiv0>:
 8020724:	4770      	bx	lr
 8020726:	bf00      	nop

08020728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020728:	b580      	push	{r7, lr}
 802072a:	b082      	sub	sp, #8
 802072c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802072e:	2003      	movs	r0, #3
 8020730:	f000 f95c 	bl	80209ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8020734:	f002 f8f0 	bl	8022918 <HAL_RCC_GetSysClockFreq>
 8020738:	4602      	mov	r2, r0
 802073a:	4b15      	ldr	r3, [pc, #84]	@ (8020790 <HAL_Init+0x68>)
 802073c:	699b      	ldr	r3, [r3, #24]
 802073e:	0a1b      	lsrs	r3, r3, #8
 8020740:	f003 030f 	and.w	r3, r3, #15
 8020744:	4913      	ldr	r1, [pc, #76]	@ (8020794 <HAL_Init+0x6c>)
 8020746:	5ccb      	ldrb	r3, [r1, r3]
 8020748:	f003 031f 	and.w	r3, r3, #31
 802074c:	fa22 f303 	lsr.w	r3, r2, r3
 8020750:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8020752:	4b0f      	ldr	r3, [pc, #60]	@ (8020790 <HAL_Init+0x68>)
 8020754:	699b      	ldr	r3, [r3, #24]
 8020756:	f003 030f 	and.w	r3, r3, #15
 802075a:	4a0e      	ldr	r2, [pc, #56]	@ (8020794 <HAL_Init+0x6c>)
 802075c:	5cd3      	ldrb	r3, [r2, r3]
 802075e:	f003 031f 	and.w	r3, r3, #31
 8020762:	687a      	ldr	r2, [r7, #4]
 8020764:	fa22 f303 	lsr.w	r3, r2, r3
 8020768:	4a0b      	ldr	r2, [pc, #44]	@ (8020798 <HAL_Init+0x70>)
 802076a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 802076c:	4a0b      	ldr	r2, [pc, #44]	@ (802079c <HAL_Init+0x74>)
 802076e:	687b      	ldr	r3, [r7, #4]
 8020770:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8020772:	200f      	movs	r0, #15
 8020774:	f000 f814 	bl	80207a0 <HAL_InitTick>
 8020778:	4603      	mov	r3, r0
 802077a:	2b00      	cmp	r3, #0
 802077c:	d001      	beq.n	8020782 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 802077e:	2301      	movs	r3, #1
 8020780:	e002      	b.n	8020788 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8020782:	f006 faed 	bl	8026d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8020786:	2300      	movs	r3, #0
}
 8020788:	4618      	mov	r0, r3
 802078a:	3708      	adds	r7, #8
 802078c:	46bd      	mov	sp, r7
 802078e:	bd80      	pop	{r7, pc}
 8020790:	58024400 	.word	0x58024400
 8020794:	080275f4 	.word	0x080275f4
 8020798:	2400000c 	.word	0x2400000c
 802079c:	24000008 	.word	0x24000008

080207a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80207a0:	b580      	push	{r7, lr}
 80207a2:	b082      	sub	sp, #8
 80207a4:	af00      	add	r7, sp, #0
 80207a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80207a8:	4b15      	ldr	r3, [pc, #84]	@ (8020800 <HAL_InitTick+0x60>)
 80207aa:	781b      	ldrb	r3, [r3, #0]
 80207ac:	2b00      	cmp	r3, #0
 80207ae:	d101      	bne.n	80207b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80207b0:	2301      	movs	r3, #1
 80207b2:	e021      	b.n	80207f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80207b4:	4b13      	ldr	r3, [pc, #76]	@ (8020804 <HAL_InitTick+0x64>)
 80207b6:	681a      	ldr	r2, [r3, #0]
 80207b8:	4b11      	ldr	r3, [pc, #68]	@ (8020800 <HAL_InitTick+0x60>)
 80207ba:	781b      	ldrb	r3, [r3, #0]
 80207bc:	4619      	mov	r1, r3
 80207be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80207c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80207c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80207ca:	4618      	mov	r0, r3
 80207cc:	f000 f941 	bl	8020a52 <HAL_SYSTICK_Config>
 80207d0:	4603      	mov	r3, r0
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d001      	beq.n	80207da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80207d6:	2301      	movs	r3, #1
 80207d8:	e00e      	b.n	80207f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80207da:	687b      	ldr	r3, [r7, #4]
 80207dc:	2b0f      	cmp	r3, #15
 80207de:	d80a      	bhi.n	80207f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80207e0:	2200      	movs	r2, #0
 80207e2:	6879      	ldr	r1, [r7, #4]
 80207e4:	f04f 30ff 	mov.w	r0, #4294967295
 80207e8:	f000 f90b 	bl	8020a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80207ec:	4a06      	ldr	r2, [pc, #24]	@ (8020808 <HAL_InitTick+0x68>)
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80207f2:	2300      	movs	r3, #0
 80207f4:	e000      	b.n	80207f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80207f6:	2301      	movs	r3, #1
}
 80207f8:	4618      	mov	r0, r3
 80207fa:	3708      	adds	r7, #8
 80207fc:	46bd      	mov	sp, r7
 80207fe:	bd80      	pop	{r7, pc}
 8020800:	24000004 	.word	0x24000004
 8020804:	24000008 	.word	0x24000008
 8020808:	24000000 	.word	0x24000000

0802080c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802080c:	b480      	push	{r7}
 802080e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8020810:	4b06      	ldr	r3, [pc, #24]	@ (802082c <HAL_IncTick+0x20>)
 8020812:	781b      	ldrb	r3, [r3, #0]
 8020814:	461a      	mov	r2, r3
 8020816:	4b06      	ldr	r3, [pc, #24]	@ (8020830 <HAL_IncTick+0x24>)
 8020818:	681b      	ldr	r3, [r3, #0]
 802081a:	4413      	add	r3, r2
 802081c:	4a04      	ldr	r2, [pc, #16]	@ (8020830 <HAL_IncTick+0x24>)
 802081e:	6013      	str	r3, [r2, #0]
}
 8020820:	bf00      	nop
 8020822:	46bd      	mov	sp, r7
 8020824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020828:	4770      	bx	lr
 802082a:	bf00      	nop
 802082c:	24000004 	.word	0x24000004
 8020830:	2400002c 	.word	0x2400002c

08020834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020834:	b480      	push	{r7}
 8020836:	af00      	add	r7, sp, #0
  return uwTick;
 8020838:	4b03      	ldr	r3, [pc, #12]	@ (8020848 <HAL_GetTick+0x14>)
 802083a:	681b      	ldr	r3, [r3, #0]
}
 802083c:	4618      	mov	r0, r3
 802083e:	46bd      	mov	sp, r7
 8020840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020844:	4770      	bx	lr
 8020846:	bf00      	nop
 8020848:	2400002c 	.word	0x2400002c

0802084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 802084c:	b480      	push	{r7}
 802084e:	b085      	sub	sp, #20
 8020850:	af00      	add	r7, sp, #0
 8020852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	f003 0307 	and.w	r3, r3, #7
 802085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 802085c:	4b0b      	ldr	r3, [pc, #44]	@ (802088c <__NVIC_SetPriorityGrouping+0x40>)
 802085e:	68db      	ldr	r3, [r3, #12]
 8020860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020862:	68ba      	ldr	r2, [r7, #8]
 8020864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8020868:	4013      	ands	r3, r2
 802086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 802086c:	68fb      	ldr	r3, [r7, #12]
 802086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020870:	68bb      	ldr	r3, [r7, #8]
 8020872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8020874:	4b06      	ldr	r3, [pc, #24]	@ (8020890 <__NVIC_SetPriorityGrouping+0x44>)
 8020876:	4313      	orrs	r3, r2
 8020878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 802087a:	4a04      	ldr	r2, [pc, #16]	@ (802088c <__NVIC_SetPriorityGrouping+0x40>)
 802087c:	68bb      	ldr	r3, [r7, #8]
 802087e:	60d3      	str	r3, [r2, #12]
}
 8020880:	bf00      	nop
 8020882:	3714      	adds	r7, #20
 8020884:	46bd      	mov	sp, r7
 8020886:	f85d 7b04 	ldr.w	r7, [sp], #4
 802088a:	4770      	bx	lr
 802088c:	e000ed00 	.word	0xe000ed00
 8020890:	05fa0000 	.word	0x05fa0000

08020894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020894:	b480      	push	{r7}
 8020896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020898:	4b04      	ldr	r3, [pc, #16]	@ (80208ac <__NVIC_GetPriorityGrouping+0x18>)
 802089a:	68db      	ldr	r3, [r3, #12]
 802089c:	0a1b      	lsrs	r3, r3, #8
 802089e:	f003 0307 	and.w	r3, r3, #7
}
 80208a2:	4618      	mov	r0, r3
 80208a4:	46bd      	mov	sp, r7
 80208a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208aa:	4770      	bx	lr
 80208ac:	e000ed00 	.word	0xe000ed00

080208b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80208b0:	b480      	push	{r7}
 80208b2:	b083      	sub	sp, #12
 80208b4:	af00      	add	r7, sp, #0
 80208b6:	4603      	mov	r3, r0
 80208b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80208ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80208be:	2b00      	cmp	r3, #0
 80208c0:	db0b      	blt.n	80208da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80208c2:	88fb      	ldrh	r3, [r7, #6]
 80208c4:	f003 021f 	and.w	r2, r3, #31
 80208c8:	4907      	ldr	r1, [pc, #28]	@ (80208e8 <__NVIC_EnableIRQ+0x38>)
 80208ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80208ce:	095b      	lsrs	r3, r3, #5
 80208d0:	2001      	movs	r0, #1
 80208d2:	fa00 f202 	lsl.w	r2, r0, r2
 80208d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80208da:	bf00      	nop
 80208dc:	370c      	adds	r7, #12
 80208de:	46bd      	mov	sp, r7
 80208e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208e4:	4770      	bx	lr
 80208e6:	bf00      	nop
 80208e8:	e000e100 	.word	0xe000e100

080208ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80208ec:	b480      	push	{r7}
 80208ee:	b083      	sub	sp, #12
 80208f0:	af00      	add	r7, sp, #0
 80208f2:	4603      	mov	r3, r0
 80208f4:	6039      	str	r1, [r7, #0]
 80208f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80208f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80208fc:	2b00      	cmp	r3, #0
 80208fe:	db0a      	blt.n	8020916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020900:	683b      	ldr	r3, [r7, #0]
 8020902:	b2da      	uxtb	r2, r3
 8020904:	490c      	ldr	r1, [pc, #48]	@ (8020938 <__NVIC_SetPriority+0x4c>)
 8020906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 802090a:	0112      	lsls	r2, r2, #4
 802090c:	b2d2      	uxtb	r2, r2
 802090e:	440b      	add	r3, r1
 8020910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020914:	e00a      	b.n	802092c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020916:	683b      	ldr	r3, [r7, #0]
 8020918:	b2da      	uxtb	r2, r3
 802091a:	4908      	ldr	r1, [pc, #32]	@ (802093c <__NVIC_SetPriority+0x50>)
 802091c:	88fb      	ldrh	r3, [r7, #6]
 802091e:	f003 030f 	and.w	r3, r3, #15
 8020922:	3b04      	subs	r3, #4
 8020924:	0112      	lsls	r2, r2, #4
 8020926:	b2d2      	uxtb	r2, r2
 8020928:	440b      	add	r3, r1
 802092a:	761a      	strb	r2, [r3, #24]
}
 802092c:	bf00      	nop
 802092e:	370c      	adds	r7, #12
 8020930:	46bd      	mov	sp, r7
 8020932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020936:	4770      	bx	lr
 8020938:	e000e100 	.word	0xe000e100
 802093c:	e000ed00 	.word	0xe000ed00

08020940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020940:	b480      	push	{r7}
 8020942:	b089      	sub	sp, #36	@ 0x24
 8020944:	af00      	add	r7, sp, #0
 8020946:	60f8      	str	r0, [r7, #12]
 8020948:	60b9      	str	r1, [r7, #8]
 802094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 802094c:	68fb      	ldr	r3, [r7, #12]
 802094e:	f003 0307 	and.w	r3, r3, #7
 8020952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020954:	69fb      	ldr	r3, [r7, #28]
 8020956:	f1c3 0307 	rsb	r3, r3, #7
 802095a:	2b04      	cmp	r3, #4
 802095c:	bf28      	it	cs
 802095e:	2304      	movcs	r3, #4
 8020960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020962:	69fb      	ldr	r3, [r7, #28]
 8020964:	3304      	adds	r3, #4
 8020966:	2b06      	cmp	r3, #6
 8020968:	d902      	bls.n	8020970 <NVIC_EncodePriority+0x30>
 802096a:	69fb      	ldr	r3, [r7, #28]
 802096c:	3b03      	subs	r3, #3
 802096e:	e000      	b.n	8020972 <NVIC_EncodePriority+0x32>
 8020970:	2300      	movs	r3, #0
 8020972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020974:	f04f 32ff 	mov.w	r2, #4294967295
 8020978:	69bb      	ldr	r3, [r7, #24]
 802097a:	fa02 f303 	lsl.w	r3, r2, r3
 802097e:	43da      	mvns	r2, r3
 8020980:	68bb      	ldr	r3, [r7, #8]
 8020982:	401a      	ands	r2, r3
 8020984:	697b      	ldr	r3, [r7, #20]
 8020986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020988:	f04f 31ff 	mov.w	r1, #4294967295
 802098c:	697b      	ldr	r3, [r7, #20]
 802098e:	fa01 f303 	lsl.w	r3, r1, r3
 8020992:	43d9      	mvns	r1, r3
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020998:	4313      	orrs	r3, r2
         );
}
 802099a:	4618      	mov	r0, r3
 802099c:	3724      	adds	r7, #36	@ 0x24
 802099e:	46bd      	mov	sp, r7
 80209a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209a4:	4770      	bx	lr
	...

080209a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80209a8:	b580      	push	{r7, lr}
 80209aa:	b082      	sub	sp, #8
 80209ac:	af00      	add	r7, sp, #0
 80209ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	3b01      	subs	r3, #1
 80209b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80209b8:	d301      	bcc.n	80209be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80209ba:	2301      	movs	r3, #1
 80209bc:	e00f      	b.n	80209de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80209be:	4a0a      	ldr	r2, [pc, #40]	@ (80209e8 <SysTick_Config+0x40>)
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	3b01      	subs	r3, #1
 80209c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80209c6:	210f      	movs	r1, #15
 80209c8:	f04f 30ff 	mov.w	r0, #4294967295
 80209cc:	f7ff ff8e 	bl	80208ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80209d0:	4b05      	ldr	r3, [pc, #20]	@ (80209e8 <SysTick_Config+0x40>)
 80209d2:	2200      	movs	r2, #0
 80209d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80209d6:	4b04      	ldr	r3, [pc, #16]	@ (80209e8 <SysTick_Config+0x40>)
 80209d8:	2207      	movs	r2, #7
 80209da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80209dc:	2300      	movs	r3, #0
}
 80209de:	4618      	mov	r0, r3
 80209e0:	3708      	adds	r7, #8
 80209e2:	46bd      	mov	sp, r7
 80209e4:	bd80      	pop	{r7, pc}
 80209e6:	bf00      	nop
 80209e8:	e000e010 	.word	0xe000e010

080209ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80209ec:	b580      	push	{r7, lr}
 80209ee:	b082      	sub	sp, #8
 80209f0:	af00      	add	r7, sp, #0
 80209f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80209f4:	6878      	ldr	r0, [r7, #4]
 80209f6:	f7ff ff29 	bl	802084c <__NVIC_SetPriorityGrouping>
}
 80209fa:	bf00      	nop
 80209fc:	3708      	adds	r7, #8
 80209fe:	46bd      	mov	sp, r7
 8020a00:	bd80      	pop	{r7, pc}

08020a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020a02:	b580      	push	{r7, lr}
 8020a04:	b086      	sub	sp, #24
 8020a06:	af00      	add	r7, sp, #0
 8020a08:	4603      	mov	r3, r0
 8020a0a:	60b9      	str	r1, [r7, #8]
 8020a0c:	607a      	str	r2, [r7, #4]
 8020a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020a10:	f7ff ff40 	bl	8020894 <__NVIC_GetPriorityGrouping>
 8020a14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020a16:	687a      	ldr	r2, [r7, #4]
 8020a18:	68b9      	ldr	r1, [r7, #8]
 8020a1a:	6978      	ldr	r0, [r7, #20]
 8020a1c:	f7ff ff90 	bl	8020940 <NVIC_EncodePriority>
 8020a20:	4602      	mov	r2, r0
 8020a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020a26:	4611      	mov	r1, r2
 8020a28:	4618      	mov	r0, r3
 8020a2a:	f7ff ff5f 	bl	80208ec <__NVIC_SetPriority>
}
 8020a2e:	bf00      	nop
 8020a30:	3718      	adds	r7, #24
 8020a32:	46bd      	mov	sp, r7
 8020a34:	bd80      	pop	{r7, pc}

08020a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020a36:	b580      	push	{r7, lr}
 8020a38:	b082      	sub	sp, #8
 8020a3a:	af00      	add	r7, sp, #0
 8020a3c:	4603      	mov	r3, r0
 8020a3e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8020a40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8020a44:	4618      	mov	r0, r3
 8020a46:	f7ff ff33 	bl	80208b0 <__NVIC_EnableIRQ>
}
 8020a4a:	bf00      	nop
 8020a4c:	3708      	adds	r7, #8
 8020a4e:	46bd      	mov	sp, r7
 8020a50:	bd80      	pop	{r7, pc}

08020a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020a52:	b580      	push	{r7, lr}
 8020a54:	b082      	sub	sp, #8
 8020a56:	af00      	add	r7, sp, #0
 8020a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8020a5a:	6878      	ldr	r0, [r7, #4]
 8020a5c:	f7ff ffa4 	bl	80209a8 <SysTick_Config>
 8020a60:	4603      	mov	r3, r0
}
 8020a62:	4618      	mov	r0, r3
 8020a64:	3708      	adds	r7, #8
 8020a66:	46bd      	mov	sp, r7
 8020a68:	bd80      	pop	{r7, pc}
	...

08020a6c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8020a6c:	b480      	push	{r7}
 8020a6e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8020a70:	f3bf 8f5f 	dmb	sy
}
 8020a74:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8020a76:	4b07      	ldr	r3, [pc, #28]	@ (8020a94 <HAL_MPU_Disable+0x28>)
 8020a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020a7a:	4a06      	ldr	r2, [pc, #24]	@ (8020a94 <HAL_MPU_Disable+0x28>)
 8020a7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020a80:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8020a82:	4b05      	ldr	r3, [pc, #20]	@ (8020a98 <HAL_MPU_Disable+0x2c>)
 8020a84:	2200      	movs	r2, #0
 8020a86:	605a      	str	r2, [r3, #4]
}
 8020a88:	bf00      	nop
 8020a8a:	46bd      	mov	sp, r7
 8020a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a90:	4770      	bx	lr
 8020a92:	bf00      	nop
 8020a94:	e000ed00 	.word	0xe000ed00
 8020a98:	e000ed90 	.word	0xe000ed90

08020a9c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8020a9c:	b480      	push	{r7}
 8020a9e:	b083      	sub	sp, #12
 8020aa0:	af00      	add	r7, sp, #0
 8020aa2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8020aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8020ad4 <HAL_MPU_Enable+0x38>)
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	f043 0301 	orr.w	r3, r3, #1
 8020aac:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8020aae:	4b0a      	ldr	r3, [pc, #40]	@ (8020ad8 <HAL_MPU_Enable+0x3c>)
 8020ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020ab2:	4a09      	ldr	r2, [pc, #36]	@ (8020ad8 <HAL_MPU_Enable+0x3c>)
 8020ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8020ab8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8020aba:	f3bf 8f4f 	dsb	sy
}
 8020abe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8020ac0:	f3bf 8f6f 	isb	sy
}
 8020ac4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8020ac6:	bf00      	nop
 8020ac8:	370c      	adds	r7, #12
 8020aca:	46bd      	mov	sp, r7
 8020acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ad0:	4770      	bx	lr
 8020ad2:	bf00      	nop
 8020ad4:	e000ed90 	.word	0xe000ed90
 8020ad8:	e000ed00 	.word	0xe000ed00

08020adc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8020adc:	b480      	push	{r7}
 8020ade:	b083      	sub	sp, #12
 8020ae0:	af00      	add	r7, sp, #0
 8020ae2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8020ae4:	687b      	ldr	r3, [r7, #4]
 8020ae6:	785a      	ldrb	r2, [r3, #1]
 8020ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8020b58 <HAL_MPU_ConfigRegion+0x7c>)
 8020aea:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8020aec:	4b1a      	ldr	r3, [pc, #104]	@ (8020b58 <HAL_MPU_ConfigRegion+0x7c>)
 8020aee:	691b      	ldr	r3, [r3, #16]
 8020af0:	4a19      	ldr	r2, [pc, #100]	@ (8020b58 <HAL_MPU_ConfigRegion+0x7c>)
 8020af2:	f023 0301 	bic.w	r3, r3, #1
 8020af6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8020af8:	4a17      	ldr	r2, [pc, #92]	@ (8020b58 <HAL_MPU_ConfigRegion+0x7c>)
 8020afa:	687b      	ldr	r3, [r7, #4]
 8020afc:	685b      	ldr	r3, [r3, #4]
 8020afe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8020b00:	687b      	ldr	r3, [r7, #4]
 8020b02:	7b1b      	ldrb	r3, [r3, #12]
 8020b04:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	7adb      	ldrb	r3, [r3, #11]
 8020b0a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8020b0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	7a9b      	ldrb	r3, [r3, #10]
 8020b12:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8020b14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	7b5b      	ldrb	r3, [r3, #13]
 8020b1a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8020b1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	7b9b      	ldrb	r3, [r3, #14]
 8020b22:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8020b24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	7bdb      	ldrb	r3, [r3, #15]
 8020b2a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8020b2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8020b2e:	687b      	ldr	r3, [r7, #4]
 8020b30:	7a5b      	ldrb	r3, [r3, #9]
 8020b32:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8020b34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	7a1b      	ldrb	r3, [r3, #8]
 8020b3a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8020b3c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8020b3e:	687a      	ldr	r2, [r7, #4]
 8020b40:	7812      	ldrb	r2, [r2, #0]
 8020b42:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8020b44:	4a04      	ldr	r2, [pc, #16]	@ (8020b58 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8020b46:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8020b48:	6113      	str	r3, [r2, #16]
}
 8020b4a:	bf00      	nop
 8020b4c:	370c      	adds	r7, #12
 8020b4e:	46bd      	mov	sp, r7
 8020b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b54:	4770      	bx	lr
 8020b56:	bf00      	nop
 8020b58:	e000ed90 	.word	0xe000ed90

08020b5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8020b5c:	b580      	push	{r7, lr}
 8020b5e:	b086      	sub	sp, #24
 8020b60:	af00      	add	r7, sp, #0
 8020b62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8020b64:	f7ff fe66 	bl	8020834 <HAL_GetTick>
 8020b68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	d101      	bne.n	8020b74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8020b70:	2301      	movs	r3, #1
 8020b72:	e2dc      	b.n	802112e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8020b7a:	b2db      	uxtb	r3, r3
 8020b7c:	2b02      	cmp	r3, #2
 8020b7e:	d008      	beq.n	8020b92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	2280      	movs	r2, #128	@ 0x80
 8020b84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	2200      	movs	r2, #0
 8020b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8020b8e:	2301      	movs	r3, #1
 8020b90:	e2cd      	b.n	802112e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	681b      	ldr	r3, [r3, #0]
 8020b96:	4a76      	ldr	r2, [pc, #472]	@ (8020d70 <HAL_DMA_Abort+0x214>)
 8020b98:	4293      	cmp	r3, r2
 8020b9a:	d04a      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	681b      	ldr	r3, [r3, #0]
 8020ba0:	4a74      	ldr	r2, [pc, #464]	@ (8020d74 <HAL_DMA_Abort+0x218>)
 8020ba2:	4293      	cmp	r3, r2
 8020ba4:	d045      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	681b      	ldr	r3, [r3, #0]
 8020baa:	4a73      	ldr	r2, [pc, #460]	@ (8020d78 <HAL_DMA_Abort+0x21c>)
 8020bac:	4293      	cmp	r3, r2
 8020bae:	d040      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	4a71      	ldr	r2, [pc, #452]	@ (8020d7c <HAL_DMA_Abort+0x220>)
 8020bb6:	4293      	cmp	r3, r2
 8020bb8:	d03b      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	681b      	ldr	r3, [r3, #0]
 8020bbe:	4a70      	ldr	r2, [pc, #448]	@ (8020d80 <HAL_DMA_Abort+0x224>)
 8020bc0:	4293      	cmp	r3, r2
 8020bc2:	d036      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020bc4:	687b      	ldr	r3, [r7, #4]
 8020bc6:	681b      	ldr	r3, [r3, #0]
 8020bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8020d84 <HAL_DMA_Abort+0x228>)
 8020bca:	4293      	cmp	r3, r2
 8020bcc:	d031      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020bce:	687b      	ldr	r3, [r7, #4]
 8020bd0:	681b      	ldr	r3, [r3, #0]
 8020bd2:	4a6d      	ldr	r2, [pc, #436]	@ (8020d88 <HAL_DMA_Abort+0x22c>)
 8020bd4:	4293      	cmp	r3, r2
 8020bd6:	d02c      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8020d8c <HAL_DMA_Abort+0x230>)
 8020bde:	4293      	cmp	r3, r2
 8020be0:	d027      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020be2:	687b      	ldr	r3, [r7, #4]
 8020be4:	681b      	ldr	r3, [r3, #0]
 8020be6:	4a6a      	ldr	r2, [pc, #424]	@ (8020d90 <HAL_DMA_Abort+0x234>)
 8020be8:	4293      	cmp	r3, r2
 8020bea:	d022      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	681b      	ldr	r3, [r3, #0]
 8020bf0:	4a68      	ldr	r2, [pc, #416]	@ (8020d94 <HAL_DMA_Abort+0x238>)
 8020bf2:	4293      	cmp	r3, r2
 8020bf4:	d01d      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	681b      	ldr	r3, [r3, #0]
 8020bfa:	4a67      	ldr	r2, [pc, #412]	@ (8020d98 <HAL_DMA_Abort+0x23c>)
 8020bfc:	4293      	cmp	r3, r2
 8020bfe:	d018      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020c00:	687b      	ldr	r3, [r7, #4]
 8020c02:	681b      	ldr	r3, [r3, #0]
 8020c04:	4a65      	ldr	r2, [pc, #404]	@ (8020d9c <HAL_DMA_Abort+0x240>)
 8020c06:	4293      	cmp	r3, r2
 8020c08:	d013      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020c0a:	687b      	ldr	r3, [r7, #4]
 8020c0c:	681b      	ldr	r3, [r3, #0]
 8020c0e:	4a64      	ldr	r2, [pc, #400]	@ (8020da0 <HAL_DMA_Abort+0x244>)
 8020c10:	4293      	cmp	r3, r2
 8020c12:	d00e      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020c14:	687b      	ldr	r3, [r7, #4]
 8020c16:	681b      	ldr	r3, [r3, #0]
 8020c18:	4a62      	ldr	r2, [pc, #392]	@ (8020da4 <HAL_DMA_Abort+0x248>)
 8020c1a:	4293      	cmp	r3, r2
 8020c1c:	d009      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020c1e:	687b      	ldr	r3, [r7, #4]
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	4a61      	ldr	r2, [pc, #388]	@ (8020da8 <HAL_DMA_Abort+0x24c>)
 8020c24:	4293      	cmp	r3, r2
 8020c26:	d004      	beq.n	8020c32 <HAL_DMA_Abort+0xd6>
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	681b      	ldr	r3, [r3, #0]
 8020c2c:	4a5f      	ldr	r2, [pc, #380]	@ (8020dac <HAL_DMA_Abort+0x250>)
 8020c2e:	4293      	cmp	r3, r2
 8020c30:	d101      	bne.n	8020c36 <HAL_DMA_Abort+0xda>
 8020c32:	2301      	movs	r3, #1
 8020c34:	e000      	b.n	8020c38 <HAL_DMA_Abort+0xdc>
 8020c36:	2300      	movs	r3, #0
 8020c38:	2b00      	cmp	r3, #0
 8020c3a:	d013      	beq.n	8020c64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	681b      	ldr	r3, [r3, #0]
 8020c40:	681a      	ldr	r2, [r3, #0]
 8020c42:	687b      	ldr	r3, [r7, #4]
 8020c44:	681b      	ldr	r3, [r3, #0]
 8020c46:	f022 021e 	bic.w	r2, r2, #30
 8020c4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8020c4c:	687b      	ldr	r3, [r7, #4]
 8020c4e:	681b      	ldr	r3, [r3, #0]
 8020c50:	695a      	ldr	r2, [r3, #20]
 8020c52:	687b      	ldr	r3, [r7, #4]
 8020c54:	681b      	ldr	r3, [r3, #0]
 8020c56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8020c5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8020c5c:	687b      	ldr	r3, [r7, #4]
 8020c5e:	681b      	ldr	r3, [r3, #0]
 8020c60:	617b      	str	r3, [r7, #20]
 8020c62:	e00a      	b.n	8020c7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	681b      	ldr	r3, [r3, #0]
 8020c68:	681a      	ldr	r2, [r3, #0]
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	f022 020e 	bic.w	r2, r2, #14
 8020c72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	681b      	ldr	r3, [r3, #0]
 8020c78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8020c7a:	687b      	ldr	r3, [r7, #4]
 8020c7c:	681b      	ldr	r3, [r3, #0]
 8020c7e:	4a3c      	ldr	r2, [pc, #240]	@ (8020d70 <HAL_DMA_Abort+0x214>)
 8020c80:	4293      	cmp	r3, r2
 8020c82:	d072      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020c84:	687b      	ldr	r3, [r7, #4]
 8020c86:	681b      	ldr	r3, [r3, #0]
 8020c88:	4a3a      	ldr	r2, [pc, #232]	@ (8020d74 <HAL_DMA_Abort+0x218>)
 8020c8a:	4293      	cmp	r3, r2
 8020c8c:	d06d      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	681b      	ldr	r3, [r3, #0]
 8020c92:	4a39      	ldr	r2, [pc, #228]	@ (8020d78 <HAL_DMA_Abort+0x21c>)
 8020c94:	4293      	cmp	r3, r2
 8020c96:	d068      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	4a37      	ldr	r2, [pc, #220]	@ (8020d7c <HAL_DMA_Abort+0x220>)
 8020c9e:	4293      	cmp	r3, r2
 8020ca0:	d063      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020ca2:	687b      	ldr	r3, [r7, #4]
 8020ca4:	681b      	ldr	r3, [r3, #0]
 8020ca6:	4a36      	ldr	r2, [pc, #216]	@ (8020d80 <HAL_DMA_Abort+0x224>)
 8020ca8:	4293      	cmp	r3, r2
 8020caa:	d05e      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	4a34      	ldr	r2, [pc, #208]	@ (8020d84 <HAL_DMA_Abort+0x228>)
 8020cb2:	4293      	cmp	r3, r2
 8020cb4:	d059      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	681b      	ldr	r3, [r3, #0]
 8020cba:	4a33      	ldr	r2, [pc, #204]	@ (8020d88 <HAL_DMA_Abort+0x22c>)
 8020cbc:	4293      	cmp	r3, r2
 8020cbe:	d054      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	681b      	ldr	r3, [r3, #0]
 8020cc4:	4a31      	ldr	r2, [pc, #196]	@ (8020d8c <HAL_DMA_Abort+0x230>)
 8020cc6:	4293      	cmp	r3, r2
 8020cc8:	d04f      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	4a30      	ldr	r2, [pc, #192]	@ (8020d90 <HAL_DMA_Abort+0x234>)
 8020cd0:	4293      	cmp	r3, r2
 8020cd2:	d04a      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8020d94 <HAL_DMA_Abort+0x238>)
 8020cda:	4293      	cmp	r3, r2
 8020cdc:	d045      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020cde:	687b      	ldr	r3, [r7, #4]
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8020d98 <HAL_DMA_Abort+0x23c>)
 8020ce4:	4293      	cmp	r3, r2
 8020ce6:	d040      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020ce8:	687b      	ldr	r3, [r7, #4]
 8020cea:	681b      	ldr	r3, [r3, #0]
 8020cec:	4a2b      	ldr	r2, [pc, #172]	@ (8020d9c <HAL_DMA_Abort+0x240>)
 8020cee:	4293      	cmp	r3, r2
 8020cf0:	d03b      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	681b      	ldr	r3, [r3, #0]
 8020cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8020da0 <HAL_DMA_Abort+0x244>)
 8020cf8:	4293      	cmp	r3, r2
 8020cfa:	d036      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020cfc:	687b      	ldr	r3, [r7, #4]
 8020cfe:	681b      	ldr	r3, [r3, #0]
 8020d00:	4a28      	ldr	r2, [pc, #160]	@ (8020da4 <HAL_DMA_Abort+0x248>)
 8020d02:	4293      	cmp	r3, r2
 8020d04:	d031      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d06:	687b      	ldr	r3, [r7, #4]
 8020d08:	681b      	ldr	r3, [r3, #0]
 8020d0a:	4a27      	ldr	r2, [pc, #156]	@ (8020da8 <HAL_DMA_Abort+0x24c>)
 8020d0c:	4293      	cmp	r3, r2
 8020d0e:	d02c      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d10:	687b      	ldr	r3, [r7, #4]
 8020d12:	681b      	ldr	r3, [r3, #0]
 8020d14:	4a25      	ldr	r2, [pc, #148]	@ (8020dac <HAL_DMA_Abort+0x250>)
 8020d16:	4293      	cmp	r3, r2
 8020d18:	d027      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d1a:	687b      	ldr	r3, [r7, #4]
 8020d1c:	681b      	ldr	r3, [r3, #0]
 8020d1e:	4a24      	ldr	r2, [pc, #144]	@ (8020db0 <HAL_DMA_Abort+0x254>)
 8020d20:	4293      	cmp	r3, r2
 8020d22:	d022      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	681b      	ldr	r3, [r3, #0]
 8020d28:	4a22      	ldr	r2, [pc, #136]	@ (8020db4 <HAL_DMA_Abort+0x258>)
 8020d2a:	4293      	cmp	r3, r2
 8020d2c:	d01d      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d2e:	687b      	ldr	r3, [r7, #4]
 8020d30:	681b      	ldr	r3, [r3, #0]
 8020d32:	4a21      	ldr	r2, [pc, #132]	@ (8020db8 <HAL_DMA_Abort+0x25c>)
 8020d34:	4293      	cmp	r3, r2
 8020d36:	d018      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	681b      	ldr	r3, [r3, #0]
 8020d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8020dbc <HAL_DMA_Abort+0x260>)
 8020d3e:	4293      	cmp	r3, r2
 8020d40:	d013      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d42:	687b      	ldr	r3, [r7, #4]
 8020d44:	681b      	ldr	r3, [r3, #0]
 8020d46:	4a1e      	ldr	r2, [pc, #120]	@ (8020dc0 <HAL_DMA_Abort+0x264>)
 8020d48:	4293      	cmp	r3, r2
 8020d4a:	d00e      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d4c:	687b      	ldr	r3, [r7, #4]
 8020d4e:	681b      	ldr	r3, [r3, #0]
 8020d50:	4a1c      	ldr	r2, [pc, #112]	@ (8020dc4 <HAL_DMA_Abort+0x268>)
 8020d52:	4293      	cmp	r3, r2
 8020d54:	d009      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d56:	687b      	ldr	r3, [r7, #4]
 8020d58:	681b      	ldr	r3, [r3, #0]
 8020d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8020dc8 <HAL_DMA_Abort+0x26c>)
 8020d5c:	4293      	cmp	r3, r2
 8020d5e:	d004      	beq.n	8020d6a <HAL_DMA_Abort+0x20e>
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	681b      	ldr	r3, [r3, #0]
 8020d64:	4a19      	ldr	r2, [pc, #100]	@ (8020dcc <HAL_DMA_Abort+0x270>)
 8020d66:	4293      	cmp	r3, r2
 8020d68:	d132      	bne.n	8020dd0 <HAL_DMA_Abort+0x274>
 8020d6a:	2301      	movs	r3, #1
 8020d6c:	e031      	b.n	8020dd2 <HAL_DMA_Abort+0x276>
 8020d6e:	bf00      	nop
 8020d70:	40020010 	.word	0x40020010
 8020d74:	40020028 	.word	0x40020028
 8020d78:	40020040 	.word	0x40020040
 8020d7c:	40020058 	.word	0x40020058
 8020d80:	40020070 	.word	0x40020070
 8020d84:	40020088 	.word	0x40020088
 8020d88:	400200a0 	.word	0x400200a0
 8020d8c:	400200b8 	.word	0x400200b8
 8020d90:	40020410 	.word	0x40020410
 8020d94:	40020428 	.word	0x40020428
 8020d98:	40020440 	.word	0x40020440
 8020d9c:	40020458 	.word	0x40020458
 8020da0:	40020470 	.word	0x40020470
 8020da4:	40020488 	.word	0x40020488
 8020da8:	400204a0 	.word	0x400204a0
 8020dac:	400204b8 	.word	0x400204b8
 8020db0:	58025408 	.word	0x58025408
 8020db4:	5802541c 	.word	0x5802541c
 8020db8:	58025430 	.word	0x58025430
 8020dbc:	58025444 	.word	0x58025444
 8020dc0:	58025458 	.word	0x58025458
 8020dc4:	5802546c 	.word	0x5802546c
 8020dc8:	58025480 	.word	0x58025480
 8020dcc:	58025494 	.word	0x58025494
 8020dd0:	2300      	movs	r3, #0
 8020dd2:	2b00      	cmp	r3, #0
 8020dd4:	d007      	beq.n	8020de6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8020dd6:	687b      	ldr	r3, [r7, #4]
 8020dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020dda:	681a      	ldr	r2, [r3, #0]
 8020ddc:	687b      	ldr	r3, [r7, #4]
 8020dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8020de4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8020de6:	687b      	ldr	r3, [r7, #4]
 8020de8:	681b      	ldr	r3, [r3, #0]
 8020dea:	4a6d      	ldr	r2, [pc, #436]	@ (8020fa0 <HAL_DMA_Abort+0x444>)
 8020dec:	4293      	cmp	r3, r2
 8020dee:	d04a      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020df0:	687b      	ldr	r3, [r7, #4]
 8020df2:	681b      	ldr	r3, [r3, #0]
 8020df4:	4a6b      	ldr	r2, [pc, #428]	@ (8020fa4 <HAL_DMA_Abort+0x448>)
 8020df6:	4293      	cmp	r3, r2
 8020df8:	d045      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020dfa:	687b      	ldr	r3, [r7, #4]
 8020dfc:	681b      	ldr	r3, [r3, #0]
 8020dfe:	4a6a      	ldr	r2, [pc, #424]	@ (8020fa8 <HAL_DMA_Abort+0x44c>)
 8020e00:	4293      	cmp	r3, r2
 8020e02:	d040      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	681b      	ldr	r3, [r3, #0]
 8020e08:	4a68      	ldr	r2, [pc, #416]	@ (8020fac <HAL_DMA_Abort+0x450>)
 8020e0a:	4293      	cmp	r3, r2
 8020e0c:	d03b      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	681b      	ldr	r3, [r3, #0]
 8020e12:	4a67      	ldr	r2, [pc, #412]	@ (8020fb0 <HAL_DMA_Abort+0x454>)
 8020e14:	4293      	cmp	r3, r2
 8020e16:	d036      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	681b      	ldr	r3, [r3, #0]
 8020e1c:	4a65      	ldr	r2, [pc, #404]	@ (8020fb4 <HAL_DMA_Abort+0x458>)
 8020e1e:	4293      	cmp	r3, r2
 8020e20:	d031      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e22:	687b      	ldr	r3, [r7, #4]
 8020e24:	681b      	ldr	r3, [r3, #0]
 8020e26:	4a64      	ldr	r2, [pc, #400]	@ (8020fb8 <HAL_DMA_Abort+0x45c>)
 8020e28:	4293      	cmp	r3, r2
 8020e2a:	d02c      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e2c:	687b      	ldr	r3, [r7, #4]
 8020e2e:	681b      	ldr	r3, [r3, #0]
 8020e30:	4a62      	ldr	r2, [pc, #392]	@ (8020fbc <HAL_DMA_Abort+0x460>)
 8020e32:	4293      	cmp	r3, r2
 8020e34:	d027      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e36:	687b      	ldr	r3, [r7, #4]
 8020e38:	681b      	ldr	r3, [r3, #0]
 8020e3a:	4a61      	ldr	r2, [pc, #388]	@ (8020fc0 <HAL_DMA_Abort+0x464>)
 8020e3c:	4293      	cmp	r3, r2
 8020e3e:	d022      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	681b      	ldr	r3, [r3, #0]
 8020e44:	4a5f      	ldr	r2, [pc, #380]	@ (8020fc4 <HAL_DMA_Abort+0x468>)
 8020e46:	4293      	cmp	r3, r2
 8020e48:	d01d      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e4a:	687b      	ldr	r3, [r7, #4]
 8020e4c:	681b      	ldr	r3, [r3, #0]
 8020e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8020fc8 <HAL_DMA_Abort+0x46c>)
 8020e50:	4293      	cmp	r3, r2
 8020e52:	d018      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	4a5c      	ldr	r2, [pc, #368]	@ (8020fcc <HAL_DMA_Abort+0x470>)
 8020e5a:	4293      	cmp	r3, r2
 8020e5c:	d013      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e5e:	687b      	ldr	r3, [r7, #4]
 8020e60:	681b      	ldr	r3, [r3, #0]
 8020e62:	4a5b      	ldr	r2, [pc, #364]	@ (8020fd0 <HAL_DMA_Abort+0x474>)
 8020e64:	4293      	cmp	r3, r2
 8020e66:	d00e      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	4a59      	ldr	r2, [pc, #356]	@ (8020fd4 <HAL_DMA_Abort+0x478>)
 8020e6e:	4293      	cmp	r3, r2
 8020e70:	d009      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e72:	687b      	ldr	r3, [r7, #4]
 8020e74:	681b      	ldr	r3, [r3, #0]
 8020e76:	4a58      	ldr	r2, [pc, #352]	@ (8020fd8 <HAL_DMA_Abort+0x47c>)
 8020e78:	4293      	cmp	r3, r2
 8020e7a:	d004      	beq.n	8020e86 <HAL_DMA_Abort+0x32a>
 8020e7c:	687b      	ldr	r3, [r7, #4]
 8020e7e:	681b      	ldr	r3, [r3, #0]
 8020e80:	4a56      	ldr	r2, [pc, #344]	@ (8020fdc <HAL_DMA_Abort+0x480>)
 8020e82:	4293      	cmp	r3, r2
 8020e84:	d108      	bne.n	8020e98 <HAL_DMA_Abort+0x33c>
 8020e86:	687b      	ldr	r3, [r7, #4]
 8020e88:	681b      	ldr	r3, [r3, #0]
 8020e8a:	681a      	ldr	r2, [r3, #0]
 8020e8c:	687b      	ldr	r3, [r7, #4]
 8020e8e:	681b      	ldr	r3, [r3, #0]
 8020e90:	f022 0201 	bic.w	r2, r2, #1
 8020e94:	601a      	str	r2, [r3, #0]
 8020e96:	e007      	b.n	8020ea8 <HAL_DMA_Abort+0x34c>
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	681a      	ldr	r2, [r3, #0]
 8020e9e:	687b      	ldr	r3, [r7, #4]
 8020ea0:	681b      	ldr	r3, [r3, #0]
 8020ea2:	f022 0201 	bic.w	r2, r2, #1
 8020ea6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8020ea8:	e013      	b.n	8020ed2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8020eaa:	f7ff fcc3 	bl	8020834 <HAL_GetTick>
 8020eae:	4602      	mov	r2, r0
 8020eb0:	693b      	ldr	r3, [r7, #16]
 8020eb2:	1ad3      	subs	r3, r2, r3
 8020eb4:	2b05      	cmp	r3, #5
 8020eb6:	d90c      	bls.n	8020ed2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	2220      	movs	r2, #32
 8020ebc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	2203      	movs	r2, #3
 8020ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	2200      	movs	r2, #0
 8020eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8020ece:	2301      	movs	r3, #1
 8020ed0:	e12d      	b.n	802112e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8020ed2:	697b      	ldr	r3, [r7, #20]
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	f003 0301 	and.w	r3, r3, #1
 8020eda:	2b00      	cmp	r3, #0
 8020edc:	d1e5      	bne.n	8020eaa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8020ede:	687b      	ldr	r3, [r7, #4]
 8020ee0:	681b      	ldr	r3, [r3, #0]
 8020ee2:	4a2f      	ldr	r2, [pc, #188]	@ (8020fa0 <HAL_DMA_Abort+0x444>)
 8020ee4:	4293      	cmp	r3, r2
 8020ee6:	d04a      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020ee8:	687b      	ldr	r3, [r7, #4]
 8020eea:	681b      	ldr	r3, [r3, #0]
 8020eec:	4a2d      	ldr	r2, [pc, #180]	@ (8020fa4 <HAL_DMA_Abort+0x448>)
 8020eee:	4293      	cmp	r3, r2
 8020ef0:	d045      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	681b      	ldr	r3, [r3, #0]
 8020ef6:	4a2c      	ldr	r2, [pc, #176]	@ (8020fa8 <HAL_DMA_Abort+0x44c>)
 8020ef8:	4293      	cmp	r3, r2
 8020efa:	d040      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020efc:	687b      	ldr	r3, [r7, #4]
 8020efe:	681b      	ldr	r3, [r3, #0]
 8020f00:	4a2a      	ldr	r2, [pc, #168]	@ (8020fac <HAL_DMA_Abort+0x450>)
 8020f02:	4293      	cmp	r3, r2
 8020f04:	d03b      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	681b      	ldr	r3, [r3, #0]
 8020f0a:	4a29      	ldr	r2, [pc, #164]	@ (8020fb0 <HAL_DMA_Abort+0x454>)
 8020f0c:	4293      	cmp	r3, r2
 8020f0e:	d036      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	4a27      	ldr	r2, [pc, #156]	@ (8020fb4 <HAL_DMA_Abort+0x458>)
 8020f16:	4293      	cmp	r3, r2
 8020f18:	d031      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f1a:	687b      	ldr	r3, [r7, #4]
 8020f1c:	681b      	ldr	r3, [r3, #0]
 8020f1e:	4a26      	ldr	r2, [pc, #152]	@ (8020fb8 <HAL_DMA_Abort+0x45c>)
 8020f20:	4293      	cmp	r3, r2
 8020f22:	d02c      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	681b      	ldr	r3, [r3, #0]
 8020f28:	4a24      	ldr	r2, [pc, #144]	@ (8020fbc <HAL_DMA_Abort+0x460>)
 8020f2a:	4293      	cmp	r3, r2
 8020f2c:	d027      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	681b      	ldr	r3, [r3, #0]
 8020f32:	4a23      	ldr	r2, [pc, #140]	@ (8020fc0 <HAL_DMA_Abort+0x464>)
 8020f34:	4293      	cmp	r3, r2
 8020f36:	d022      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f38:	687b      	ldr	r3, [r7, #4]
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	4a21      	ldr	r2, [pc, #132]	@ (8020fc4 <HAL_DMA_Abort+0x468>)
 8020f3e:	4293      	cmp	r3, r2
 8020f40:	d01d      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	681b      	ldr	r3, [r3, #0]
 8020f46:	4a20      	ldr	r2, [pc, #128]	@ (8020fc8 <HAL_DMA_Abort+0x46c>)
 8020f48:	4293      	cmp	r3, r2
 8020f4a:	d018      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f4c:	687b      	ldr	r3, [r7, #4]
 8020f4e:	681b      	ldr	r3, [r3, #0]
 8020f50:	4a1e      	ldr	r2, [pc, #120]	@ (8020fcc <HAL_DMA_Abort+0x470>)
 8020f52:	4293      	cmp	r3, r2
 8020f54:	d013      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f56:	687b      	ldr	r3, [r7, #4]
 8020f58:	681b      	ldr	r3, [r3, #0]
 8020f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8020fd0 <HAL_DMA_Abort+0x474>)
 8020f5c:	4293      	cmp	r3, r2
 8020f5e:	d00e      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f60:	687b      	ldr	r3, [r7, #4]
 8020f62:	681b      	ldr	r3, [r3, #0]
 8020f64:	4a1b      	ldr	r2, [pc, #108]	@ (8020fd4 <HAL_DMA_Abort+0x478>)
 8020f66:	4293      	cmp	r3, r2
 8020f68:	d009      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f6a:	687b      	ldr	r3, [r7, #4]
 8020f6c:	681b      	ldr	r3, [r3, #0]
 8020f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8020fd8 <HAL_DMA_Abort+0x47c>)
 8020f70:	4293      	cmp	r3, r2
 8020f72:	d004      	beq.n	8020f7e <HAL_DMA_Abort+0x422>
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	4a18      	ldr	r2, [pc, #96]	@ (8020fdc <HAL_DMA_Abort+0x480>)
 8020f7a:	4293      	cmp	r3, r2
 8020f7c:	d101      	bne.n	8020f82 <HAL_DMA_Abort+0x426>
 8020f7e:	2301      	movs	r3, #1
 8020f80:	e000      	b.n	8020f84 <HAL_DMA_Abort+0x428>
 8020f82:	2300      	movs	r3, #0
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d02b      	beq.n	8020fe0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8020f88:	687b      	ldr	r3, [r7, #4]
 8020f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020f8c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020f92:	f003 031f 	and.w	r3, r3, #31
 8020f96:	223f      	movs	r2, #63	@ 0x3f
 8020f98:	409a      	lsls	r2, r3
 8020f9a:	68bb      	ldr	r3, [r7, #8]
 8020f9c:	609a      	str	r2, [r3, #8]
 8020f9e:	e02a      	b.n	8020ff6 <HAL_DMA_Abort+0x49a>
 8020fa0:	40020010 	.word	0x40020010
 8020fa4:	40020028 	.word	0x40020028
 8020fa8:	40020040 	.word	0x40020040
 8020fac:	40020058 	.word	0x40020058
 8020fb0:	40020070 	.word	0x40020070
 8020fb4:	40020088 	.word	0x40020088
 8020fb8:	400200a0 	.word	0x400200a0
 8020fbc:	400200b8 	.word	0x400200b8
 8020fc0:	40020410 	.word	0x40020410
 8020fc4:	40020428 	.word	0x40020428
 8020fc8:	40020440 	.word	0x40020440
 8020fcc:	40020458 	.word	0x40020458
 8020fd0:	40020470 	.word	0x40020470
 8020fd4:	40020488 	.word	0x40020488
 8020fd8:	400204a0 	.word	0x400204a0
 8020fdc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8020fe0:	687b      	ldr	r3, [r7, #4]
 8020fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020fe4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8020fe6:	687b      	ldr	r3, [r7, #4]
 8020fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020fea:	f003 031f 	and.w	r3, r3, #31
 8020fee:	2201      	movs	r2, #1
 8020ff0:	409a      	lsls	r2, r3
 8020ff2:	68fb      	ldr	r3, [r7, #12]
 8020ff4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	681b      	ldr	r3, [r3, #0]
 8020ffa:	4a4f      	ldr	r2, [pc, #316]	@ (8021138 <HAL_DMA_Abort+0x5dc>)
 8020ffc:	4293      	cmp	r3, r2
 8020ffe:	d072      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	681b      	ldr	r3, [r3, #0]
 8021004:	4a4d      	ldr	r2, [pc, #308]	@ (802113c <HAL_DMA_Abort+0x5e0>)
 8021006:	4293      	cmp	r3, r2
 8021008:	d06d      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 802100a:	687b      	ldr	r3, [r7, #4]
 802100c:	681b      	ldr	r3, [r3, #0]
 802100e:	4a4c      	ldr	r2, [pc, #304]	@ (8021140 <HAL_DMA_Abort+0x5e4>)
 8021010:	4293      	cmp	r3, r2
 8021012:	d068      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	681b      	ldr	r3, [r3, #0]
 8021018:	4a4a      	ldr	r2, [pc, #296]	@ (8021144 <HAL_DMA_Abort+0x5e8>)
 802101a:	4293      	cmp	r3, r2
 802101c:	d063      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	681b      	ldr	r3, [r3, #0]
 8021022:	4a49      	ldr	r2, [pc, #292]	@ (8021148 <HAL_DMA_Abort+0x5ec>)
 8021024:	4293      	cmp	r3, r2
 8021026:	d05e      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021028:	687b      	ldr	r3, [r7, #4]
 802102a:	681b      	ldr	r3, [r3, #0]
 802102c:	4a47      	ldr	r2, [pc, #284]	@ (802114c <HAL_DMA_Abort+0x5f0>)
 802102e:	4293      	cmp	r3, r2
 8021030:	d059      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021032:	687b      	ldr	r3, [r7, #4]
 8021034:	681b      	ldr	r3, [r3, #0]
 8021036:	4a46      	ldr	r2, [pc, #280]	@ (8021150 <HAL_DMA_Abort+0x5f4>)
 8021038:	4293      	cmp	r3, r2
 802103a:	d054      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	681b      	ldr	r3, [r3, #0]
 8021040:	4a44      	ldr	r2, [pc, #272]	@ (8021154 <HAL_DMA_Abort+0x5f8>)
 8021042:	4293      	cmp	r3, r2
 8021044:	d04f      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	681b      	ldr	r3, [r3, #0]
 802104a:	4a43      	ldr	r2, [pc, #268]	@ (8021158 <HAL_DMA_Abort+0x5fc>)
 802104c:	4293      	cmp	r3, r2
 802104e:	d04a      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021050:	687b      	ldr	r3, [r7, #4]
 8021052:	681b      	ldr	r3, [r3, #0]
 8021054:	4a41      	ldr	r2, [pc, #260]	@ (802115c <HAL_DMA_Abort+0x600>)
 8021056:	4293      	cmp	r3, r2
 8021058:	d045      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 802105a:	687b      	ldr	r3, [r7, #4]
 802105c:	681b      	ldr	r3, [r3, #0]
 802105e:	4a40      	ldr	r2, [pc, #256]	@ (8021160 <HAL_DMA_Abort+0x604>)
 8021060:	4293      	cmp	r3, r2
 8021062:	d040      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	681b      	ldr	r3, [r3, #0]
 8021068:	4a3e      	ldr	r2, [pc, #248]	@ (8021164 <HAL_DMA_Abort+0x608>)
 802106a:	4293      	cmp	r3, r2
 802106c:	d03b      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 802106e:	687b      	ldr	r3, [r7, #4]
 8021070:	681b      	ldr	r3, [r3, #0]
 8021072:	4a3d      	ldr	r2, [pc, #244]	@ (8021168 <HAL_DMA_Abort+0x60c>)
 8021074:	4293      	cmp	r3, r2
 8021076:	d036      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	681b      	ldr	r3, [r3, #0]
 802107c:	4a3b      	ldr	r2, [pc, #236]	@ (802116c <HAL_DMA_Abort+0x610>)
 802107e:	4293      	cmp	r3, r2
 8021080:	d031      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021082:	687b      	ldr	r3, [r7, #4]
 8021084:	681b      	ldr	r3, [r3, #0]
 8021086:	4a3a      	ldr	r2, [pc, #232]	@ (8021170 <HAL_DMA_Abort+0x614>)
 8021088:	4293      	cmp	r3, r2
 802108a:	d02c      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	681b      	ldr	r3, [r3, #0]
 8021090:	4a38      	ldr	r2, [pc, #224]	@ (8021174 <HAL_DMA_Abort+0x618>)
 8021092:	4293      	cmp	r3, r2
 8021094:	d027      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 8021096:	687b      	ldr	r3, [r7, #4]
 8021098:	681b      	ldr	r3, [r3, #0]
 802109a:	4a37      	ldr	r2, [pc, #220]	@ (8021178 <HAL_DMA_Abort+0x61c>)
 802109c:	4293      	cmp	r3, r2
 802109e:	d022      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	681b      	ldr	r3, [r3, #0]
 80210a4:	4a35      	ldr	r2, [pc, #212]	@ (802117c <HAL_DMA_Abort+0x620>)
 80210a6:	4293      	cmp	r3, r2
 80210a8:	d01d      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 80210aa:	687b      	ldr	r3, [r7, #4]
 80210ac:	681b      	ldr	r3, [r3, #0]
 80210ae:	4a34      	ldr	r2, [pc, #208]	@ (8021180 <HAL_DMA_Abort+0x624>)
 80210b0:	4293      	cmp	r3, r2
 80210b2:	d018      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	681b      	ldr	r3, [r3, #0]
 80210b8:	4a32      	ldr	r2, [pc, #200]	@ (8021184 <HAL_DMA_Abort+0x628>)
 80210ba:	4293      	cmp	r3, r2
 80210bc:	d013      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 80210be:	687b      	ldr	r3, [r7, #4]
 80210c0:	681b      	ldr	r3, [r3, #0]
 80210c2:	4a31      	ldr	r2, [pc, #196]	@ (8021188 <HAL_DMA_Abort+0x62c>)
 80210c4:	4293      	cmp	r3, r2
 80210c6:	d00e      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	681b      	ldr	r3, [r3, #0]
 80210cc:	4a2f      	ldr	r2, [pc, #188]	@ (802118c <HAL_DMA_Abort+0x630>)
 80210ce:	4293      	cmp	r3, r2
 80210d0:	d009      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	4a2e      	ldr	r2, [pc, #184]	@ (8021190 <HAL_DMA_Abort+0x634>)
 80210d8:	4293      	cmp	r3, r2
 80210da:	d004      	beq.n	80210e6 <HAL_DMA_Abort+0x58a>
 80210dc:	687b      	ldr	r3, [r7, #4]
 80210de:	681b      	ldr	r3, [r3, #0]
 80210e0:	4a2c      	ldr	r2, [pc, #176]	@ (8021194 <HAL_DMA_Abort+0x638>)
 80210e2:	4293      	cmp	r3, r2
 80210e4:	d101      	bne.n	80210ea <HAL_DMA_Abort+0x58e>
 80210e6:	2301      	movs	r3, #1
 80210e8:	e000      	b.n	80210ec <HAL_DMA_Abort+0x590>
 80210ea:	2300      	movs	r3, #0
 80210ec:	2b00      	cmp	r3, #0
 80210ee:	d015      	beq.n	802111c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80210f0:	687b      	ldr	r3, [r7, #4]
 80210f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80210f4:	687a      	ldr	r2, [r7, #4]
 80210f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80210f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80210fa:	687b      	ldr	r3, [r7, #4]
 80210fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d00c      	beq.n	802111c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8021102:	687b      	ldr	r3, [r7, #4]
 8021104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021106:	681a      	ldr	r2, [r3, #0]
 8021108:	687b      	ldr	r3, [r7, #4]
 802110a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802110c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8021110:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8021112:	687b      	ldr	r3, [r7, #4]
 8021114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8021116:	687a      	ldr	r2, [r7, #4]
 8021118:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 802111a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	2201      	movs	r2, #1
 8021120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8021124:	687b      	ldr	r3, [r7, #4]
 8021126:	2200      	movs	r2, #0
 8021128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 802112c:	2300      	movs	r3, #0
}
 802112e:	4618      	mov	r0, r3
 8021130:	3718      	adds	r7, #24
 8021132:	46bd      	mov	sp, r7
 8021134:	bd80      	pop	{r7, pc}
 8021136:	bf00      	nop
 8021138:	40020010 	.word	0x40020010
 802113c:	40020028 	.word	0x40020028
 8021140:	40020040 	.word	0x40020040
 8021144:	40020058 	.word	0x40020058
 8021148:	40020070 	.word	0x40020070
 802114c:	40020088 	.word	0x40020088
 8021150:	400200a0 	.word	0x400200a0
 8021154:	400200b8 	.word	0x400200b8
 8021158:	40020410 	.word	0x40020410
 802115c:	40020428 	.word	0x40020428
 8021160:	40020440 	.word	0x40020440
 8021164:	40020458 	.word	0x40020458
 8021168:	40020470 	.word	0x40020470
 802116c:	40020488 	.word	0x40020488
 8021170:	400204a0 	.word	0x400204a0
 8021174:	400204b8 	.word	0x400204b8
 8021178:	58025408 	.word	0x58025408
 802117c:	5802541c 	.word	0x5802541c
 8021180:	58025430 	.word	0x58025430
 8021184:	58025444 	.word	0x58025444
 8021188:	58025458 	.word	0x58025458
 802118c:	5802546c 	.word	0x5802546c
 8021190:	58025480 	.word	0x58025480
 8021194:	58025494 	.word	0x58025494

08021198 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8021198:	b580      	push	{r7, lr}
 802119a:	b084      	sub	sp, #16
 802119c:	af00      	add	r7, sp, #0
 802119e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	2b00      	cmp	r3, #0
 80211a4:	d101      	bne.n	80211aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80211a6:	2301      	movs	r3, #1
 80211a8:	e237      	b.n	802161a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80211aa:	687b      	ldr	r3, [r7, #4]
 80211ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80211b0:	b2db      	uxtb	r3, r3
 80211b2:	2b02      	cmp	r3, #2
 80211b4:	d004      	beq.n	80211c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	2280      	movs	r2, #128	@ 0x80
 80211ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80211bc:	2301      	movs	r3, #1
 80211be:	e22c      	b.n	802161a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	4a5c      	ldr	r2, [pc, #368]	@ (8021338 <HAL_DMA_Abort_IT+0x1a0>)
 80211c6:	4293      	cmp	r3, r2
 80211c8:	d04a      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 80211ca:	687b      	ldr	r3, [r7, #4]
 80211cc:	681b      	ldr	r3, [r3, #0]
 80211ce:	4a5b      	ldr	r2, [pc, #364]	@ (802133c <HAL_DMA_Abort_IT+0x1a4>)
 80211d0:	4293      	cmp	r3, r2
 80211d2:	d045      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 80211d4:	687b      	ldr	r3, [r7, #4]
 80211d6:	681b      	ldr	r3, [r3, #0]
 80211d8:	4a59      	ldr	r2, [pc, #356]	@ (8021340 <HAL_DMA_Abort_IT+0x1a8>)
 80211da:	4293      	cmp	r3, r2
 80211dc:	d040      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 80211de:	687b      	ldr	r3, [r7, #4]
 80211e0:	681b      	ldr	r3, [r3, #0]
 80211e2:	4a58      	ldr	r2, [pc, #352]	@ (8021344 <HAL_DMA_Abort_IT+0x1ac>)
 80211e4:	4293      	cmp	r3, r2
 80211e6:	d03b      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	4a56      	ldr	r2, [pc, #344]	@ (8021348 <HAL_DMA_Abort_IT+0x1b0>)
 80211ee:	4293      	cmp	r3, r2
 80211f0:	d036      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	681b      	ldr	r3, [r3, #0]
 80211f6:	4a55      	ldr	r2, [pc, #340]	@ (802134c <HAL_DMA_Abort_IT+0x1b4>)
 80211f8:	4293      	cmp	r3, r2
 80211fa:	d031      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 80211fc:	687b      	ldr	r3, [r7, #4]
 80211fe:	681b      	ldr	r3, [r3, #0]
 8021200:	4a53      	ldr	r2, [pc, #332]	@ (8021350 <HAL_DMA_Abort_IT+0x1b8>)
 8021202:	4293      	cmp	r3, r2
 8021204:	d02c      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	681b      	ldr	r3, [r3, #0]
 802120a:	4a52      	ldr	r2, [pc, #328]	@ (8021354 <HAL_DMA_Abort_IT+0x1bc>)
 802120c:	4293      	cmp	r3, r2
 802120e:	d027      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	681b      	ldr	r3, [r3, #0]
 8021214:	4a50      	ldr	r2, [pc, #320]	@ (8021358 <HAL_DMA_Abort_IT+0x1c0>)
 8021216:	4293      	cmp	r3, r2
 8021218:	d022      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 802121a:	687b      	ldr	r3, [r7, #4]
 802121c:	681b      	ldr	r3, [r3, #0]
 802121e:	4a4f      	ldr	r2, [pc, #316]	@ (802135c <HAL_DMA_Abort_IT+0x1c4>)
 8021220:	4293      	cmp	r3, r2
 8021222:	d01d      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	681b      	ldr	r3, [r3, #0]
 8021228:	4a4d      	ldr	r2, [pc, #308]	@ (8021360 <HAL_DMA_Abort_IT+0x1c8>)
 802122a:	4293      	cmp	r3, r2
 802122c:	d018      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	681b      	ldr	r3, [r3, #0]
 8021232:	4a4c      	ldr	r2, [pc, #304]	@ (8021364 <HAL_DMA_Abort_IT+0x1cc>)
 8021234:	4293      	cmp	r3, r2
 8021236:	d013      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	681b      	ldr	r3, [r3, #0]
 802123c:	4a4a      	ldr	r2, [pc, #296]	@ (8021368 <HAL_DMA_Abort_IT+0x1d0>)
 802123e:	4293      	cmp	r3, r2
 8021240:	d00e      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	681b      	ldr	r3, [r3, #0]
 8021246:	4a49      	ldr	r2, [pc, #292]	@ (802136c <HAL_DMA_Abort_IT+0x1d4>)
 8021248:	4293      	cmp	r3, r2
 802124a:	d009      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 802124c:	687b      	ldr	r3, [r7, #4]
 802124e:	681b      	ldr	r3, [r3, #0]
 8021250:	4a47      	ldr	r2, [pc, #284]	@ (8021370 <HAL_DMA_Abort_IT+0x1d8>)
 8021252:	4293      	cmp	r3, r2
 8021254:	d004      	beq.n	8021260 <HAL_DMA_Abort_IT+0xc8>
 8021256:	687b      	ldr	r3, [r7, #4]
 8021258:	681b      	ldr	r3, [r3, #0]
 802125a:	4a46      	ldr	r2, [pc, #280]	@ (8021374 <HAL_DMA_Abort_IT+0x1dc>)
 802125c:	4293      	cmp	r3, r2
 802125e:	d101      	bne.n	8021264 <HAL_DMA_Abort_IT+0xcc>
 8021260:	2301      	movs	r3, #1
 8021262:	e000      	b.n	8021266 <HAL_DMA_Abort_IT+0xce>
 8021264:	2300      	movs	r3, #0
 8021266:	2b00      	cmp	r3, #0
 8021268:	f000 8086 	beq.w	8021378 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 802126c:	687b      	ldr	r3, [r7, #4]
 802126e:	2204      	movs	r2, #4
 8021270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	681b      	ldr	r3, [r3, #0]
 8021278:	4a2f      	ldr	r2, [pc, #188]	@ (8021338 <HAL_DMA_Abort_IT+0x1a0>)
 802127a:	4293      	cmp	r3, r2
 802127c:	d04a      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	681b      	ldr	r3, [r3, #0]
 8021282:	4a2e      	ldr	r2, [pc, #184]	@ (802133c <HAL_DMA_Abort_IT+0x1a4>)
 8021284:	4293      	cmp	r3, r2
 8021286:	d045      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 8021288:	687b      	ldr	r3, [r7, #4]
 802128a:	681b      	ldr	r3, [r3, #0]
 802128c:	4a2c      	ldr	r2, [pc, #176]	@ (8021340 <HAL_DMA_Abort_IT+0x1a8>)
 802128e:	4293      	cmp	r3, r2
 8021290:	d040      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 8021292:	687b      	ldr	r3, [r7, #4]
 8021294:	681b      	ldr	r3, [r3, #0]
 8021296:	4a2b      	ldr	r2, [pc, #172]	@ (8021344 <HAL_DMA_Abort_IT+0x1ac>)
 8021298:	4293      	cmp	r3, r2
 802129a:	d03b      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	4a29      	ldr	r2, [pc, #164]	@ (8021348 <HAL_DMA_Abort_IT+0x1b0>)
 80212a2:	4293      	cmp	r3, r2
 80212a4:	d036      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 80212a6:	687b      	ldr	r3, [r7, #4]
 80212a8:	681b      	ldr	r3, [r3, #0]
 80212aa:	4a28      	ldr	r2, [pc, #160]	@ (802134c <HAL_DMA_Abort_IT+0x1b4>)
 80212ac:	4293      	cmp	r3, r2
 80212ae:	d031      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	681b      	ldr	r3, [r3, #0]
 80212b4:	4a26      	ldr	r2, [pc, #152]	@ (8021350 <HAL_DMA_Abort_IT+0x1b8>)
 80212b6:	4293      	cmp	r3, r2
 80212b8:	d02c      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	681b      	ldr	r3, [r3, #0]
 80212be:	4a25      	ldr	r2, [pc, #148]	@ (8021354 <HAL_DMA_Abort_IT+0x1bc>)
 80212c0:	4293      	cmp	r3, r2
 80212c2:	d027      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 80212c4:	687b      	ldr	r3, [r7, #4]
 80212c6:	681b      	ldr	r3, [r3, #0]
 80212c8:	4a23      	ldr	r2, [pc, #140]	@ (8021358 <HAL_DMA_Abort_IT+0x1c0>)
 80212ca:	4293      	cmp	r3, r2
 80212cc:	d022      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 80212ce:	687b      	ldr	r3, [r7, #4]
 80212d0:	681b      	ldr	r3, [r3, #0]
 80212d2:	4a22      	ldr	r2, [pc, #136]	@ (802135c <HAL_DMA_Abort_IT+0x1c4>)
 80212d4:	4293      	cmp	r3, r2
 80212d6:	d01d      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 80212d8:	687b      	ldr	r3, [r7, #4]
 80212da:	681b      	ldr	r3, [r3, #0]
 80212dc:	4a20      	ldr	r2, [pc, #128]	@ (8021360 <HAL_DMA_Abort_IT+0x1c8>)
 80212de:	4293      	cmp	r3, r2
 80212e0:	d018      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	681b      	ldr	r3, [r3, #0]
 80212e6:	4a1f      	ldr	r2, [pc, #124]	@ (8021364 <HAL_DMA_Abort_IT+0x1cc>)
 80212e8:	4293      	cmp	r3, r2
 80212ea:	d013      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 80212ec:	687b      	ldr	r3, [r7, #4]
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	4a1d      	ldr	r2, [pc, #116]	@ (8021368 <HAL_DMA_Abort_IT+0x1d0>)
 80212f2:	4293      	cmp	r3, r2
 80212f4:	d00e      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 80212f6:	687b      	ldr	r3, [r7, #4]
 80212f8:	681b      	ldr	r3, [r3, #0]
 80212fa:	4a1c      	ldr	r2, [pc, #112]	@ (802136c <HAL_DMA_Abort_IT+0x1d4>)
 80212fc:	4293      	cmp	r3, r2
 80212fe:	d009      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 8021300:	687b      	ldr	r3, [r7, #4]
 8021302:	681b      	ldr	r3, [r3, #0]
 8021304:	4a1a      	ldr	r2, [pc, #104]	@ (8021370 <HAL_DMA_Abort_IT+0x1d8>)
 8021306:	4293      	cmp	r3, r2
 8021308:	d004      	beq.n	8021314 <HAL_DMA_Abort_IT+0x17c>
 802130a:	687b      	ldr	r3, [r7, #4]
 802130c:	681b      	ldr	r3, [r3, #0]
 802130e:	4a19      	ldr	r2, [pc, #100]	@ (8021374 <HAL_DMA_Abort_IT+0x1dc>)
 8021310:	4293      	cmp	r3, r2
 8021312:	d108      	bne.n	8021326 <HAL_DMA_Abort_IT+0x18e>
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	681b      	ldr	r3, [r3, #0]
 8021318:	681a      	ldr	r2, [r3, #0]
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	f022 0201 	bic.w	r2, r2, #1
 8021322:	601a      	str	r2, [r3, #0]
 8021324:	e178      	b.n	8021618 <HAL_DMA_Abort_IT+0x480>
 8021326:	687b      	ldr	r3, [r7, #4]
 8021328:	681b      	ldr	r3, [r3, #0]
 802132a:	681a      	ldr	r2, [r3, #0]
 802132c:	687b      	ldr	r3, [r7, #4]
 802132e:	681b      	ldr	r3, [r3, #0]
 8021330:	f022 0201 	bic.w	r2, r2, #1
 8021334:	601a      	str	r2, [r3, #0]
 8021336:	e16f      	b.n	8021618 <HAL_DMA_Abort_IT+0x480>
 8021338:	40020010 	.word	0x40020010
 802133c:	40020028 	.word	0x40020028
 8021340:	40020040 	.word	0x40020040
 8021344:	40020058 	.word	0x40020058
 8021348:	40020070 	.word	0x40020070
 802134c:	40020088 	.word	0x40020088
 8021350:	400200a0 	.word	0x400200a0
 8021354:	400200b8 	.word	0x400200b8
 8021358:	40020410 	.word	0x40020410
 802135c:	40020428 	.word	0x40020428
 8021360:	40020440 	.word	0x40020440
 8021364:	40020458 	.word	0x40020458
 8021368:	40020470 	.word	0x40020470
 802136c:	40020488 	.word	0x40020488
 8021370:	400204a0 	.word	0x400204a0
 8021374:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8021378:	687b      	ldr	r3, [r7, #4]
 802137a:	681b      	ldr	r3, [r3, #0]
 802137c:	681a      	ldr	r2, [r3, #0]
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	f022 020e 	bic.w	r2, r2, #14
 8021386:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	4a6c      	ldr	r2, [pc, #432]	@ (8021540 <HAL_DMA_Abort_IT+0x3a8>)
 802138e:	4293      	cmp	r3, r2
 8021390:	d04a      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 8021392:	687b      	ldr	r3, [r7, #4]
 8021394:	681b      	ldr	r3, [r3, #0]
 8021396:	4a6b      	ldr	r2, [pc, #428]	@ (8021544 <HAL_DMA_Abort_IT+0x3ac>)
 8021398:	4293      	cmp	r3, r2
 802139a:	d045      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 802139c:	687b      	ldr	r3, [r7, #4]
 802139e:	681b      	ldr	r3, [r3, #0]
 80213a0:	4a69      	ldr	r2, [pc, #420]	@ (8021548 <HAL_DMA_Abort_IT+0x3b0>)
 80213a2:	4293      	cmp	r3, r2
 80213a4:	d040      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	681b      	ldr	r3, [r3, #0]
 80213aa:	4a68      	ldr	r2, [pc, #416]	@ (802154c <HAL_DMA_Abort_IT+0x3b4>)
 80213ac:	4293      	cmp	r3, r2
 80213ae:	d03b      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 80213b0:	687b      	ldr	r3, [r7, #4]
 80213b2:	681b      	ldr	r3, [r3, #0]
 80213b4:	4a66      	ldr	r2, [pc, #408]	@ (8021550 <HAL_DMA_Abort_IT+0x3b8>)
 80213b6:	4293      	cmp	r3, r2
 80213b8:	d036      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 80213ba:	687b      	ldr	r3, [r7, #4]
 80213bc:	681b      	ldr	r3, [r3, #0]
 80213be:	4a65      	ldr	r2, [pc, #404]	@ (8021554 <HAL_DMA_Abort_IT+0x3bc>)
 80213c0:	4293      	cmp	r3, r2
 80213c2:	d031      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	4a63      	ldr	r2, [pc, #396]	@ (8021558 <HAL_DMA_Abort_IT+0x3c0>)
 80213ca:	4293      	cmp	r3, r2
 80213cc:	d02c      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 80213ce:	687b      	ldr	r3, [r7, #4]
 80213d0:	681b      	ldr	r3, [r3, #0]
 80213d2:	4a62      	ldr	r2, [pc, #392]	@ (802155c <HAL_DMA_Abort_IT+0x3c4>)
 80213d4:	4293      	cmp	r3, r2
 80213d6:	d027      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 80213d8:	687b      	ldr	r3, [r7, #4]
 80213da:	681b      	ldr	r3, [r3, #0]
 80213dc:	4a60      	ldr	r2, [pc, #384]	@ (8021560 <HAL_DMA_Abort_IT+0x3c8>)
 80213de:	4293      	cmp	r3, r2
 80213e0:	d022      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	681b      	ldr	r3, [r3, #0]
 80213e6:	4a5f      	ldr	r2, [pc, #380]	@ (8021564 <HAL_DMA_Abort_IT+0x3cc>)
 80213e8:	4293      	cmp	r3, r2
 80213ea:	d01d      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 80213ec:	687b      	ldr	r3, [r7, #4]
 80213ee:	681b      	ldr	r3, [r3, #0]
 80213f0:	4a5d      	ldr	r2, [pc, #372]	@ (8021568 <HAL_DMA_Abort_IT+0x3d0>)
 80213f2:	4293      	cmp	r3, r2
 80213f4:	d018      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 80213f6:	687b      	ldr	r3, [r7, #4]
 80213f8:	681b      	ldr	r3, [r3, #0]
 80213fa:	4a5c      	ldr	r2, [pc, #368]	@ (802156c <HAL_DMA_Abort_IT+0x3d4>)
 80213fc:	4293      	cmp	r3, r2
 80213fe:	d013      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	681b      	ldr	r3, [r3, #0]
 8021404:	4a5a      	ldr	r2, [pc, #360]	@ (8021570 <HAL_DMA_Abort_IT+0x3d8>)
 8021406:	4293      	cmp	r3, r2
 8021408:	d00e      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 802140a:	687b      	ldr	r3, [r7, #4]
 802140c:	681b      	ldr	r3, [r3, #0]
 802140e:	4a59      	ldr	r2, [pc, #356]	@ (8021574 <HAL_DMA_Abort_IT+0x3dc>)
 8021410:	4293      	cmp	r3, r2
 8021412:	d009      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 8021414:	687b      	ldr	r3, [r7, #4]
 8021416:	681b      	ldr	r3, [r3, #0]
 8021418:	4a57      	ldr	r2, [pc, #348]	@ (8021578 <HAL_DMA_Abort_IT+0x3e0>)
 802141a:	4293      	cmp	r3, r2
 802141c:	d004      	beq.n	8021428 <HAL_DMA_Abort_IT+0x290>
 802141e:	687b      	ldr	r3, [r7, #4]
 8021420:	681b      	ldr	r3, [r3, #0]
 8021422:	4a56      	ldr	r2, [pc, #344]	@ (802157c <HAL_DMA_Abort_IT+0x3e4>)
 8021424:	4293      	cmp	r3, r2
 8021426:	d108      	bne.n	802143a <HAL_DMA_Abort_IT+0x2a2>
 8021428:	687b      	ldr	r3, [r7, #4]
 802142a:	681b      	ldr	r3, [r3, #0]
 802142c:	681a      	ldr	r2, [r3, #0]
 802142e:	687b      	ldr	r3, [r7, #4]
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	f022 0201 	bic.w	r2, r2, #1
 8021436:	601a      	str	r2, [r3, #0]
 8021438:	e007      	b.n	802144a <HAL_DMA_Abort_IT+0x2b2>
 802143a:	687b      	ldr	r3, [r7, #4]
 802143c:	681b      	ldr	r3, [r3, #0]
 802143e:	681a      	ldr	r2, [r3, #0]
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	681b      	ldr	r3, [r3, #0]
 8021444:	f022 0201 	bic.w	r2, r2, #1
 8021448:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 802144a:	687b      	ldr	r3, [r7, #4]
 802144c:	681b      	ldr	r3, [r3, #0]
 802144e:	4a3c      	ldr	r2, [pc, #240]	@ (8021540 <HAL_DMA_Abort_IT+0x3a8>)
 8021450:	4293      	cmp	r3, r2
 8021452:	d072      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 8021454:	687b      	ldr	r3, [r7, #4]
 8021456:	681b      	ldr	r3, [r3, #0]
 8021458:	4a3a      	ldr	r2, [pc, #232]	@ (8021544 <HAL_DMA_Abort_IT+0x3ac>)
 802145a:	4293      	cmp	r3, r2
 802145c:	d06d      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	681b      	ldr	r3, [r3, #0]
 8021462:	4a39      	ldr	r2, [pc, #228]	@ (8021548 <HAL_DMA_Abort_IT+0x3b0>)
 8021464:	4293      	cmp	r3, r2
 8021466:	d068      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 8021468:	687b      	ldr	r3, [r7, #4]
 802146a:	681b      	ldr	r3, [r3, #0]
 802146c:	4a37      	ldr	r2, [pc, #220]	@ (802154c <HAL_DMA_Abort_IT+0x3b4>)
 802146e:	4293      	cmp	r3, r2
 8021470:	d063      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	4a36      	ldr	r2, [pc, #216]	@ (8021550 <HAL_DMA_Abort_IT+0x3b8>)
 8021478:	4293      	cmp	r3, r2
 802147a:	d05e      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 802147c:	687b      	ldr	r3, [r7, #4]
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	4a34      	ldr	r2, [pc, #208]	@ (8021554 <HAL_DMA_Abort_IT+0x3bc>)
 8021482:	4293      	cmp	r3, r2
 8021484:	d059      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 8021486:	687b      	ldr	r3, [r7, #4]
 8021488:	681b      	ldr	r3, [r3, #0]
 802148a:	4a33      	ldr	r2, [pc, #204]	@ (8021558 <HAL_DMA_Abort_IT+0x3c0>)
 802148c:	4293      	cmp	r3, r2
 802148e:	d054      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 8021490:	687b      	ldr	r3, [r7, #4]
 8021492:	681b      	ldr	r3, [r3, #0]
 8021494:	4a31      	ldr	r2, [pc, #196]	@ (802155c <HAL_DMA_Abort_IT+0x3c4>)
 8021496:	4293      	cmp	r3, r2
 8021498:	d04f      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 802149a:	687b      	ldr	r3, [r7, #4]
 802149c:	681b      	ldr	r3, [r3, #0]
 802149e:	4a30      	ldr	r2, [pc, #192]	@ (8021560 <HAL_DMA_Abort_IT+0x3c8>)
 80214a0:	4293      	cmp	r3, r2
 80214a2:	d04a      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	4a2e      	ldr	r2, [pc, #184]	@ (8021564 <HAL_DMA_Abort_IT+0x3cc>)
 80214aa:	4293      	cmp	r3, r2
 80214ac:	d045      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214ae:	687b      	ldr	r3, [r7, #4]
 80214b0:	681b      	ldr	r3, [r3, #0]
 80214b2:	4a2d      	ldr	r2, [pc, #180]	@ (8021568 <HAL_DMA_Abort_IT+0x3d0>)
 80214b4:	4293      	cmp	r3, r2
 80214b6:	d040      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	681b      	ldr	r3, [r3, #0]
 80214bc:	4a2b      	ldr	r2, [pc, #172]	@ (802156c <HAL_DMA_Abort_IT+0x3d4>)
 80214be:	4293      	cmp	r3, r2
 80214c0:	d03b      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	681b      	ldr	r3, [r3, #0]
 80214c6:	4a2a      	ldr	r2, [pc, #168]	@ (8021570 <HAL_DMA_Abort_IT+0x3d8>)
 80214c8:	4293      	cmp	r3, r2
 80214ca:	d036      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214cc:	687b      	ldr	r3, [r7, #4]
 80214ce:	681b      	ldr	r3, [r3, #0]
 80214d0:	4a28      	ldr	r2, [pc, #160]	@ (8021574 <HAL_DMA_Abort_IT+0x3dc>)
 80214d2:	4293      	cmp	r3, r2
 80214d4:	d031      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214d6:	687b      	ldr	r3, [r7, #4]
 80214d8:	681b      	ldr	r3, [r3, #0]
 80214da:	4a27      	ldr	r2, [pc, #156]	@ (8021578 <HAL_DMA_Abort_IT+0x3e0>)
 80214dc:	4293      	cmp	r3, r2
 80214de:	d02c      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	4a25      	ldr	r2, [pc, #148]	@ (802157c <HAL_DMA_Abort_IT+0x3e4>)
 80214e6:	4293      	cmp	r3, r2
 80214e8:	d027      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	681b      	ldr	r3, [r3, #0]
 80214ee:	4a24      	ldr	r2, [pc, #144]	@ (8021580 <HAL_DMA_Abort_IT+0x3e8>)
 80214f0:	4293      	cmp	r3, r2
 80214f2:	d022      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	681b      	ldr	r3, [r3, #0]
 80214f8:	4a22      	ldr	r2, [pc, #136]	@ (8021584 <HAL_DMA_Abort_IT+0x3ec>)
 80214fa:	4293      	cmp	r3, r2
 80214fc:	d01d      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 80214fe:	687b      	ldr	r3, [r7, #4]
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	4a21      	ldr	r2, [pc, #132]	@ (8021588 <HAL_DMA_Abort_IT+0x3f0>)
 8021504:	4293      	cmp	r3, r2
 8021506:	d018      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 8021508:	687b      	ldr	r3, [r7, #4]
 802150a:	681b      	ldr	r3, [r3, #0]
 802150c:	4a1f      	ldr	r2, [pc, #124]	@ (802158c <HAL_DMA_Abort_IT+0x3f4>)
 802150e:	4293      	cmp	r3, r2
 8021510:	d013      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 8021512:	687b      	ldr	r3, [r7, #4]
 8021514:	681b      	ldr	r3, [r3, #0]
 8021516:	4a1e      	ldr	r2, [pc, #120]	@ (8021590 <HAL_DMA_Abort_IT+0x3f8>)
 8021518:	4293      	cmp	r3, r2
 802151a:	d00e      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	681b      	ldr	r3, [r3, #0]
 8021520:	4a1c      	ldr	r2, [pc, #112]	@ (8021594 <HAL_DMA_Abort_IT+0x3fc>)
 8021522:	4293      	cmp	r3, r2
 8021524:	d009      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 8021526:	687b      	ldr	r3, [r7, #4]
 8021528:	681b      	ldr	r3, [r3, #0]
 802152a:	4a1b      	ldr	r2, [pc, #108]	@ (8021598 <HAL_DMA_Abort_IT+0x400>)
 802152c:	4293      	cmp	r3, r2
 802152e:	d004      	beq.n	802153a <HAL_DMA_Abort_IT+0x3a2>
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	681b      	ldr	r3, [r3, #0]
 8021534:	4a19      	ldr	r2, [pc, #100]	@ (802159c <HAL_DMA_Abort_IT+0x404>)
 8021536:	4293      	cmp	r3, r2
 8021538:	d132      	bne.n	80215a0 <HAL_DMA_Abort_IT+0x408>
 802153a:	2301      	movs	r3, #1
 802153c:	e031      	b.n	80215a2 <HAL_DMA_Abort_IT+0x40a>
 802153e:	bf00      	nop
 8021540:	40020010 	.word	0x40020010
 8021544:	40020028 	.word	0x40020028
 8021548:	40020040 	.word	0x40020040
 802154c:	40020058 	.word	0x40020058
 8021550:	40020070 	.word	0x40020070
 8021554:	40020088 	.word	0x40020088
 8021558:	400200a0 	.word	0x400200a0
 802155c:	400200b8 	.word	0x400200b8
 8021560:	40020410 	.word	0x40020410
 8021564:	40020428 	.word	0x40020428
 8021568:	40020440 	.word	0x40020440
 802156c:	40020458 	.word	0x40020458
 8021570:	40020470 	.word	0x40020470
 8021574:	40020488 	.word	0x40020488
 8021578:	400204a0 	.word	0x400204a0
 802157c:	400204b8 	.word	0x400204b8
 8021580:	58025408 	.word	0x58025408
 8021584:	5802541c 	.word	0x5802541c
 8021588:	58025430 	.word	0x58025430
 802158c:	58025444 	.word	0x58025444
 8021590:	58025458 	.word	0x58025458
 8021594:	5802546c 	.word	0x5802546c
 8021598:	58025480 	.word	0x58025480
 802159c:	58025494 	.word	0x58025494
 80215a0:	2300      	movs	r3, #0
 80215a2:	2b00      	cmp	r3, #0
 80215a4:	d028      	beq.n	80215f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80215aa:	681a      	ldr	r2, [r3, #0]
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80215b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80215b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80215b6:	687b      	ldr	r3, [r7, #4]
 80215b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80215ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80215c0:	f003 031f 	and.w	r3, r3, #31
 80215c4:	2201      	movs	r2, #1
 80215c6:	409a      	lsls	r2, r3
 80215c8:	68fb      	ldr	r3, [r7, #12]
 80215ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80215d0:	687a      	ldr	r2, [r7, #4]
 80215d2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80215d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d00c      	beq.n	80215f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80215de:	687b      	ldr	r3, [r7, #4]
 80215e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80215e2:	681a      	ldr	r2, [r3, #0]
 80215e4:	687b      	ldr	r3, [r7, #4]
 80215e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80215e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80215ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80215ee:	687b      	ldr	r3, [r7, #4]
 80215f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80215f2:	687a      	ldr	r2, [r7, #4]
 80215f4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80215f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80215f8:	687b      	ldr	r3, [r7, #4]
 80215fa:	2201      	movs	r2, #1
 80215fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	2200      	movs	r2, #0
 8021604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8021608:	687b      	ldr	r3, [r7, #4]
 802160a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802160c:	2b00      	cmp	r3, #0
 802160e:	d003      	beq.n	8021618 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8021610:	687b      	ldr	r3, [r7, #4]
 8021612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021614:	6878      	ldr	r0, [r7, #4]
 8021616:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8021618:	2300      	movs	r3, #0
}
 802161a:	4618      	mov	r0, r3
 802161c:	3710      	adds	r7, #16
 802161e:	46bd      	mov	sp, r7
 8021620:	bd80      	pop	{r7, pc}
 8021622:	bf00      	nop

08021624 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8021624:	b580      	push	{r7, lr}
 8021626:	b08a      	sub	sp, #40	@ 0x28
 8021628:	af00      	add	r7, sp, #0
 802162a:	60f8      	str	r0, [r7, #12]
 802162c:	60b9      	str	r1, [r7, #8]
 802162e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8021630:	68bb      	ldr	r3, [r7, #8]
 8021632:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8021638:	2308      	movs	r3, #8
 802163a:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802163c:	4b2f      	ldr	r3, [pc, #188]	@ (80216fc <HAL_FLASH_Program+0xd8>)
 802163e:	7d1b      	ldrb	r3, [r3, #20]
 8021640:	2b01      	cmp	r3, #1
 8021642:	d101      	bne.n	8021648 <HAL_FLASH_Program+0x24>
 8021644:	2302      	movs	r3, #2
 8021646:	e054      	b.n	80216f2 <HAL_FLASH_Program+0xce>
 8021648:	4b2c      	ldr	r3, [pc, #176]	@ (80216fc <HAL_FLASH_Program+0xd8>)
 802164a:	2201      	movs	r2, #1
 802164c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 802164e:	68bb      	ldr	r3, [r7, #8]
 8021650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8021654:	d316      	bcc.n	8021684 <HAL_FLASH_Program+0x60>
 8021656:	68bb      	ldr	r3, [r7, #8]
 8021658:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 802165c:	d212      	bcs.n	8021684 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 802165e:	2301      	movs	r3, #1
 8021660:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8021662:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8021664:	4b25      	ldr	r3, [pc, #148]	@ (80216fc <HAL_FLASH_Program+0xd8>)
 8021666:	2200      	movs	r2, #0
 8021668:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 802166a:	6979      	ldr	r1, [r7, #20]
 802166c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8021670:	f000 f882 	bl	8021778 <FLASH_WaitForLastOperation>
 8021674:	4603      	mov	r3, r0
 8021676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 802167a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 802167e:	2b00      	cmp	r3, #0
 8021680:	d132      	bne.n	80216e8 <HAL_FLASH_Program+0xc4>
 8021682:	e001      	b.n	8021688 <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 8021684:	2301      	movs	r3, #1
 8021686:	e034      	b.n	80216f2 <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8021688:	4b1d      	ldr	r3, [pc, #116]	@ (8021700 <HAL_FLASH_Program+0xdc>)
 802168a:	68db      	ldr	r3, [r3, #12]
 802168c:	4a1c      	ldr	r2, [pc, #112]	@ (8021700 <HAL_FLASH_Program+0xdc>)
 802168e:	f043 0302 	orr.w	r3, r3, #2
 8021692:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8021694:	f3bf 8f6f 	isb	sy
}
 8021698:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 802169a:	f3bf 8f4f 	dsb	sy
}
 802169e:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 80216a0:	69fb      	ldr	r3, [r7, #28]
 80216a2:	681a      	ldr	r2, [r3, #0]
 80216a4:	6a3b      	ldr	r3, [r7, #32]
 80216a6:	601a      	str	r2, [r3, #0]
        dest_addr++;
 80216a8:	6a3b      	ldr	r3, [r7, #32]
 80216aa:	3304      	adds	r3, #4
 80216ac:	623b      	str	r3, [r7, #32]
        src_addr++;
 80216ae:	69fb      	ldr	r3, [r7, #28]
 80216b0:	3304      	adds	r3, #4
 80216b2:	61fb      	str	r3, [r7, #28]
        row_index--;
 80216b4:	7efb      	ldrb	r3, [r7, #27]
 80216b6:	3b01      	subs	r3, #1
 80216b8:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 80216ba:	7efb      	ldrb	r3, [r7, #27]
 80216bc:	2b00      	cmp	r3, #0
 80216be:	d1ef      	bne.n	80216a0 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 80216c0:	f3bf 8f6f 	isb	sy
}
 80216c4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80216c6:	f3bf 8f4f 	dsb	sy
}
 80216ca:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80216cc:	6979      	ldr	r1, [r7, #20]
 80216ce:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80216d2:	f000 f851 	bl	8021778 <FLASH_WaitForLastOperation>
 80216d6:	4603      	mov	r3, r0
 80216d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80216dc:	4b08      	ldr	r3, [pc, #32]	@ (8021700 <HAL_FLASH_Program+0xdc>)
 80216de:	68db      	ldr	r3, [r3, #12]
 80216e0:	4a07      	ldr	r2, [pc, #28]	@ (8021700 <HAL_FLASH_Program+0xdc>)
 80216e2:	f023 0302 	bic.w	r3, r3, #2
 80216e6:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80216e8:	4b04      	ldr	r3, [pc, #16]	@ (80216fc <HAL_FLASH_Program+0xd8>)
 80216ea:	2200      	movs	r2, #0
 80216ec:	751a      	strb	r2, [r3, #20]

  return status;
 80216ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80216f2:	4618      	mov	r0, r3
 80216f4:	3728      	adds	r7, #40	@ 0x28
 80216f6:	46bd      	mov	sp, r7
 80216f8:	bd80      	pop	{r7, pc}
 80216fa:	bf00      	nop
 80216fc:	24000030 	.word	0x24000030
 8021700:	52002000 	.word	0x52002000

08021704 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8021704:	b480      	push	{r7}
 8021706:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8021708:	4b0c      	ldr	r3, [pc, #48]	@ (802173c <HAL_FLASH_Unlock+0x38>)
 802170a:	68db      	ldr	r3, [r3, #12]
 802170c:	f003 0301 	and.w	r3, r3, #1
 8021710:	2b00      	cmp	r3, #0
 8021712:	d00d      	beq.n	8021730 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8021714:	4b09      	ldr	r3, [pc, #36]	@ (802173c <HAL_FLASH_Unlock+0x38>)
 8021716:	4a0a      	ldr	r2, [pc, #40]	@ (8021740 <HAL_FLASH_Unlock+0x3c>)
 8021718:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 802171a:	4b08      	ldr	r3, [pc, #32]	@ (802173c <HAL_FLASH_Unlock+0x38>)
 802171c:	4a09      	ldr	r2, [pc, #36]	@ (8021744 <HAL_FLASH_Unlock+0x40>)
 802171e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8021720:	4b06      	ldr	r3, [pc, #24]	@ (802173c <HAL_FLASH_Unlock+0x38>)
 8021722:	68db      	ldr	r3, [r3, #12]
 8021724:	f003 0301 	and.w	r3, r3, #1
 8021728:	2b00      	cmp	r3, #0
 802172a:	d001      	beq.n	8021730 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 802172c:	2301      	movs	r3, #1
 802172e:	e000      	b.n	8021732 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8021730:	2300      	movs	r3, #0
}
 8021732:	4618      	mov	r0, r3
 8021734:	46bd      	mov	sp, r7
 8021736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802173a:	4770      	bx	lr
 802173c:	52002000 	.word	0x52002000
 8021740:	45670123 	.word	0x45670123
 8021744:	cdef89ab 	.word	0xcdef89ab

08021748 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8021748:	b480      	push	{r7}
 802174a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 802174c:	4b09      	ldr	r3, [pc, #36]	@ (8021774 <HAL_FLASH_Lock+0x2c>)
 802174e:	68db      	ldr	r3, [r3, #12]
 8021750:	4a08      	ldr	r2, [pc, #32]	@ (8021774 <HAL_FLASH_Lock+0x2c>)
 8021752:	f043 0301 	orr.w	r3, r3, #1
 8021756:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8021758:	4b06      	ldr	r3, [pc, #24]	@ (8021774 <HAL_FLASH_Lock+0x2c>)
 802175a:	68db      	ldr	r3, [r3, #12]
 802175c:	f003 0301 	and.w	r3, r3, #1
 8021760:	2b00      	cmp	r3, #0
 8021762:	d101      	bne.n	8021768 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8021764:	2301      	movs	r3, #1
 8021766:	e000      	b.n	802176a <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8021768:	2300      	movs	r3, #0
}
 802176a:	4618      	mov	r0, r3
 802176c:	46bd      	mov	sp, r7
 802176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021772:	4770      	bx	lr
 8021774:	52002000 	.word	0x52002000

08021778 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8021778:	b580      	push	{r7, lr}
 802177a:	b086      	sub	sp, #24
 802177c:	af00      	add	r7, sp, #0
 802177e:	6078      	str	r0, [r7, #4]
 8021780:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8021782:	2304      	movs	r3, #4
 8021784:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8021786:	2300      	movs	r3, #0
 8021788:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 802178a:	f7ff f853 	bl	8020834 <HAL_GetTick>
 802178e:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8021790:	e010      	b.n	80217b4 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8021792:	687b      	ldr	r3, [r7, #4]
 8021794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021798:	d00c      	beq.n	80217b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 802179a:	f7ff f84b 	bl	8020834 <HAL_GetTick>
 802179e:	4602      	mov	r2, r0
 80217a0:	68fb      	ldr	r3, [r7, #12]
 80217a2:	1ad3      	subs	r3, r2, r3
 80217a4:	687a      	ldr	r2, [r7, #4]
 80217a6:	429a      	cmp	r2, r3
 80217a8:	d302      	bcc.n	80217b0 <FLASH_WaitForLastOperation+0x38>
 80217aa:	687b      	ldr	r3, [r7, #4]
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d101      	bne.n	80217b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80217b0:	2303      	movs	r3, #3
 80217b2:	e02d      	b.n	8021810 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80217b4:	4b18      	ldr	r3, [pc, #96]	@ (8021818 <FLASH_WaitForLastOperation+0xa0>)
 80217b6:	691a      	ldr	r2, [r3, #16]
 80217b8:	693b      	ldr	r3, [r7, #16]
 80217ba:	4013      	ands	r3, r2
 80217bc:	693a      	ldr	r2, [r7, #16]
 80217be:	429a      	cmp	r2, r3
 80217c0:	d0e7      	beq.n	8021792 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 80217c2:	683b      	ldr	r3, [r7, #0]
 80217c4:	2b01      	cmp	r3, #1
 80217c6:	d104      	bne.n	80217d2 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 80217c8:	4b13      	ldr	r3, [pc, #76]	@ (8021818 <FLASH_WaitForLastOperation+0xa0>)
 80217ca:	691a      	ldr	r2, [r3, #16]
 80217cc:	4b13      	ldr	r3, [pc, #76]	@ (802181c <FLASH_WaitForLastOperation+0xa4>)
 80217ce:	4013      	ands	r3, r2
 80217d0:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80217d2:	697b      	ldr	r3, [r7, #20]
 80217d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d00a      	beq.n	80217f2 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80217dc:	4b10      	ldr	r3, [pc, #64]	@ (8021820 <FLASH_WaitForLastOperation+0xa8>)
 80217de:	699a      	ldr	r2, [r3, #24]
 80217e0:	697b      	ldr	r3, [r7, #20]
 80217e2:	4313      	orrs	r3, r2
 80217e4:	4a0e      	ldr	r2, [pc, #56]	@ (8021820 <FLASH_WaitForLastOperation+0xa8>)
 80217e6:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80217e8:	4a0b      	ldr	r2, [pc, #44]	@ (8021818 <FLASH_WaitForLastOperation+0xa0>)
 80217ea:	697b      	ldr	r3, [r7, #20]
 80217ec:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 80217ee:	2301      	movs	r3, #1
 80217f0:	e00e      	b.n	8021810 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80217f2:	683b      	ldr	r3, [r7, #0]
 80217f4:	2b01      	cmp	r3, #1
 80217f6:	d10a      	bne.n	802180e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80217f8:	4b07      	ldr	r3, [pc, #28]	@ (8021818 <FLASH_WaitForLastOperation+0xa0>)
 80217fa:	691b      	ldr	r3, [r3, #16]
 80217fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8021800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021804:	d103      	bne.n	802180e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8021806:	4b04      	ldr	r3, [pc, #16]	@ (8021818 <FLASH_WaitForLastOperation+0xa0>)
 8021808:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 802180c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 802180e:	2300      	movs	r3, #0
}
 8021810:	4618      	mov	r0, r3
 8021812:	3718      	adds	r7, #24
 8021814:	46bd      	mov	sp, r7
 8021816:	bd80      	pop	{r7, pc}
 8021818:	52002000 	.word	0x52002000
 802181c:	17ee0000 	.word	0x17ee0000
 8021820:	24000030 	.word	0x24000030

08021824 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8021824:	b580      	push	{r7, lr}
 8021826:	b084      	sub	sp, #16
 8021828:	af00      	add	r7, sp, #0
 802182a:	6078      	str	r0, [r7, #4]
 802182c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802182e:	2300      	movs	r3, #0
 8021830:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8021832:	4b3f      	ldr	r3, [pc, #252]	@ (8021930 <HAL_FLASHEx_Erase+0x10c>)
 8021834:	7d1b      	ldrb	r3, [r3, #20]
 8021836:	2b01      	cmp	r3, #1
 8021838:	d101      	bne.n	802183e <HAL_FLASHEx_Erase+0x1a>
 802183a:	2302      	movs	r3, #2
 802183c:	e074      	b.n	8021928 <HAL_FLASHEx_Erase+0x104>
 802183e:	4b3c      	ldr	r3, [pc, #240]	@ (8021930 <HAL_FLASHEx_Erase+0x10c>)
 8021840:	2201      	movs	r2, #1
 8021842:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8021844:	4b3a      	ldr	r3, [pc, #232]	@ (8021930 <HAL_FLASHEx_Erase+0x10c>)
 8021846:	2200      	movs	r2, #0
 8021848:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 802184a:	687b      	ldr	r3, [r7, #4]
 802184c:	685b      	ldr	r3, [r3, #4]
 802184e:	f003 0301 	and.w	r3, r3, #1
 8021852:	2b00      	cmp	r3, #0
 8021854:	d009      	beq.n	802186a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8021856:	2101      	movs	r1, #1
 8021858:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802185c:	f7ff ff8c 	bl	8021778 <FLASH_WaitForLastOperation>
 8021860:	4603      	mov	r3, r0
 8021862:	2b00      	cmp	r3, #0
 8021864:	d001      	beq.n	802186a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8021866:	2301      	movs	r3, #1
 8021868:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 802186a:	7bfb      	ldrb	r3, [r7, #15]
 802186c:	2b00      	cmp	r3, #0
 802186e:	d157      	bne.n	8021920 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	681b      	ldr	r3, [r3, #0]
 8021874:	2b01      	cmp	r3, #1
 8021876:	d11e      	bne.n	80218b6 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	691a      	ldr	r2, [r3, #16]
 802187c:	687b      	ldr	r3, [r7, #4]
 802187e:	685b      	ldr	r3, [r3, #4]
 8021880:	4619      	mov	r1, r3
 8021882:	4610      	mov	r0, r2
 8021884:	f000 f85a 	bl	802193c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8021888:	687b      	ldr	r3, [r7, #4]
 802188a:	685b      	ldr	r3, [r3, #4]
 802188c:	f003 0301 	and.w	r3, r3, #1
 8021890:	2b00      	cmp	r3, #0
 8021892:	d045      	beq.n	8021920 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8021894:	2101      	movs	r1, #1
 8021896:	f24c 3050 	movw	r0, #50000	@ 0xc350
 802189a:	f7ff ff6d 	bl	8021778 <FLASH_WaitForLastOperation>
 802189e:	4603      	mov	r3, r0
 80218a0:	2b00      	cmp	r3, #0
 80218a2:	d001      	beq.n	80218a8 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 80218a4:	2301      	movs	r3, #1
 80218a6:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80218a8:	4b22      	ldr	r3, [pc, #136]	@ (8021934 <HAL_FLASHEx_Erase+0x110>)
 80218aa:	68db      	ldr	r3, [r3, #12]
 80218ac:	4a21      	ldr	r2, [pc, #132]	@ (8021934 <HAL_FLASHEx_Erase+0x110>)
 80218ae:	f023 0308 	bic.w	r3, r3, #8
 80218b2:	60d3      	str	r3, [r2, #12]
 80218b4:	e034      	b.n	8021920 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 80218b6:	683b      	ldr	r3, [r7, #0]
 80218b8:	f04f 32ff 	mov.w	r2, #4294967295
 80218bc:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80218be:	687b      	ldr	r3, [r7, #4]
 80218c0:	689b      	ldr	r3, [r3, #8]
 80218c2:	60bb      	str	r3, [r7, #8]
 80218c4:	e024      	b.n	8021910 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 80218c6:	687b      	ldr	r3, [r7, #4]
 80218c8:	6859      	ldr	r1, [r3, #4]
 80218ca:	687b      	ldr	r3, [r7, #4]
 80218cc:	691b      	ldr	r3, [r3, #16]
 80218ce:	461a      	mov	r2, r3
 80218d0:	68b8      	ldr	r0, [r7, #8]
 80218d2:	f000 f857 	bl	8021984 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80218d6:	687b      	ldr	r3, [r7, #4]
 80218d8:	685b      	ldr	r3, [r3, #4]
 80218da:	f003 0301 	and.w	r3, r3, #1
 80218de:	2b00      	cmp	r3, #0
 80218e0:	d00c      	beq.n	80218fc <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80218e2:	2101      	movs	r1, #1
 80218e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80218e8:	f7ff ff46 	bl	8021778 <FLASH_WaitForLastOperation>
 80218ec:	4603      	mov	r3, r0
 80218ee:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80218f0:	4b10      	ldr	r3, [pc, #64]	@ (8021934 <HAL_FLASHEx_Erase+0x110>)
 80218f2:	68da      	ldr	r2, [r3, #12]
 80218f4:	490f      	ldr	r1, [pc, #60]	@ (8021934 <HAL_FLASHEx_Erase+0x110>)
 80218f6:	4b10      	ldr	r3, [pc, #64]	@ (8021938 <HAL_FLASHEx_Erase+0x114>)
 80218f8:	4013      	ands	r3, r2
 80218fa:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80218fc:	7bfb      	ldrb	r3, [r7, #15]
 80218fe:	2b00      	cmp	r3, #0
 8021900:	d003      	beq.n	802190a <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8021902:	683b      	ldr	r3, [r7, #0]
 8021904:	68ba      	ldr	r2, [r7, #8]
 8021906:	601a      	str	r2, [r3, #0]
          break;
 8021908:	e00a      	b.n	8021920 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 802190a:	68bb      	ldr	r3, [r7, #8]
 802190c:	3301      	adds	r3, #1
 802190e:	60bb      	str	r3, [r7, #8]
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	68da      	ldr	r2, [r3, #12]
 8021914:	687b      	ldr	r3, [r7, #4]
 8021916:	689b      	ldr	r3, [r3, #8]
 8021918:	4413      	add	r3, r2
 802191a:	68ba      	ldr	r2, [r7, #8]
 802191c:	429a      	cmp	r2, r3
 802191e:	d3d2      	bcc.n	80218c6 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8021920:	4b03      	ldr	r3, [pc, #12]	@ (8021930 <HAL_FLASHEx_Erase+0x10c>)
 8021922:	2200      	movs	r2, #0
 8021924:	751a      	strb	r2, [r3, #20]

  return status;
 8021926:	7bfb      	ldrb	r3, [r7, #15]
}
 8021928:	4618      	mov	r0, r3
 802192a:	3710      	adds	r7, #16
 802192c:	46bd      	mov	sp, r7
 802192e:	bd80      	pop	{r7, pc}
 8021930:	24000030 	.word	0x24000030
 8021934:	52002000 	.word	0x52002000
 8021938:	fffff8fb 	.word	0xfffff8fb

0802193c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 802193c:	b480      	push	{r7}
 802193e:	b083      	sub	sp, #12
 8021940:	af00      	add	r7, sp, #0
 8021942:	6078      	str	r0, [r7, #4]
 8021944:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8021946:	683b      	ldr	r3, [r7, #0]
 8021948:	f003 0301 	and.w	r3, r3, #1
 802194c:	2b00      	cmp	r3, #0
 802194e:	d011      	beq.n	8021974 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8021950:	4b0b      	ldr	r3, [pc, #44]	@ (8021980 <FLASH_MassErase+0x44>)
 8021952:	68db      	ldr	r3, [r3, #12]
 8021954:	4a0a      	ldr	r2, [pc, #40]	@ (8021980 <FLASH_MassErase+0x44>)
 8021956:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 802195a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 802195c:	4b08      	ldr	r3, [pc, #32]	@ (8021980 <FLASH_MassErase+0x44>)
 802195e:	68da      	ldr	r2, [r3, #12]
 8021960:	4907      	ldr	r1, [pc, #28]	@ (8021980 <FLASH_MassErase+0x44>)
 8021962:	687b      	ldr	r3, [r7, #4]
 8021964:	4313      	orrs	r3, r2
 8021966:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 8021968:	4b05      	ldr	r3, [pc, #20]	@ (8021980 <FLASH_MassErase+0x44>)
 802196a:	68db      	ldr	r3, [r3, #12]
 802196c:	4a04      	ldr	r2, [pc, #16]	@ (8021980 <FLASH_MassErase+0x44>)
 802196e:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8021972:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8021974:	bf00      	nop
 8021976:	370c      	adds	r7, #12
 8021978:	46bd      	mov	sp, r7
 802197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802197e:	4770      	bx	lr
 8021980:	52002000 	.word	0x52002000

08021984 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8021984:	b480      	push	{r7}
 8021986:	b085      	sub	sp, #20
 8021988:	af00      	add	r7, sp, #0
 802198a:	60f8      	str	r0, [r7, #12]
 802198c:	60b9      	str	r1, [r7, #8]
 802198e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8021990:	68bb      	ldr	r3, [r7, #8]
 8021992:	f003 0301 	and.w	r3, r3, #1
 8021996:	2b00      	cmp	r3, #0
 8021998:	d010      	beq.n	80219bc <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 802199a:	4b0b      	ldr	r3, [pc, #44]	@ (80219c8 <FLASH_Erase_Sector+0x44>)
 802199c:	68db      	ldr	r3, [r3, #12]
 802199e:	4a0a      	ldr	r2, [pc, #40]	@ (80219c8 <FLASH_Erase_Sector+0x44>)
 80219a0:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 80219a4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80219a6:	4b08      	ldr	r3, [pc, #32]	@ (80219c8 <FLASH_Erase_Sector+0x44>)
 80219a8:	68da      	ldr	r2, [r3, #12]
 80219aa:	68fb      	ldr	r3, [r7, #12]
 80219ac:	0219      	lsls	r1, r3, #8
 80219ae:	687b      	ldr	r3, [r7, #4]
 80219b0:	430b      	orrs	r3, r1
 80219b2:	4313      	orrs	r3, r2
 80219b4:	4a04      	ldr	r2, [pc, #16]	@ (80219c8 <FLASH_Erase_Sector+0x44>)
 80219b6:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 80219ba:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80219bc:	bf00      	nop
 80219be:	3714      	adds	r7, #20
 80219c0:	46bd      	mov	sp, r7
 80219c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219c6:	4770      	bx	lr
 80219c8:	52002000 	.word	0x52002000

080219cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80219cc:	b480      	push	{r7}
 80219ce:	b089      	sub	sp, #36	@ 0x24
 80219d0:	af00      	add	r7, sp, #0
 80219d2:	6078      	str	r0, [r7, #4]
 80219d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80219d6:	2300      	movs	r3, #0
 80219d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80219da:	4b86      	ldr	r3, [pc, #536]	@ (8021bf4 <HAL_GPIO_Init+0x228>)
 80219dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80219de:	e18c      	b.n	8021cfa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80219e0:	683b      	ldr	r3, [r7, #0]
 80219e2:	681a      	ldr	r2, [r3, #0]
 80219e4:	2101      	movs	r1, #1
 80219e6:	69fb      	ldr	r3, [r7, #28]
 80219e8:	fa01 f303 	lsl.w	r3, r1, r3
 80219ec:	4013      	ands	r3, r2
 80219ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80219f0:	693b      	ldr	r3, [r7, #16]
 80219f2:	2b00      	cmp	r3, #0
 80219f4:	f000 817e 	beq.w	8021cf4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80219f8:	683b      	ldr	r3, [r7, #0]
 80219fa:	685b      	ldr	r3, [r3, #4]
 80219fc:	f003 0303 	and.w	r3, r3, #3
 8021a00:	2b01      	cmp	r3, #1
 8021a02:	d005      	beq.n	8021a10 <HAL_GPIO_Init+0x44>
 8021a04:	683b      	ldr	r3, [r7, #0]
 8021a06:	685b      	ldr	r3, [r3, #4]
 8021a08:	f003 0303 	and.w	r3, r3, #3
 8021a0c:	2b02      	cmp	r3, #2
 8021a0e:	d130      	bne.n	8021a72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	689b      	ldr	r3, [r3, #8]
 8021a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8021a16:	69fb      	ldr	r3, [r7, #28]
 8021a18:	005b      	lsls	r3, r3, #1
 8021a1a:	2203      	movs	r2, #3
 8021a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8021a20:	43db      	mvns	r3, r3
 8021a22:	69ba      	ldr	r2, [r7, #24]
 8021a24:	4013      	ands	r3, r2
 8021a26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8021a28:	683b      	ldr	r3, [r7, #0]
 8021a2a:	68da      	ldr	r2, [r3, #12]
 8021a2c:	69fb      	ldr	r3, [r7, #28]
 8021a2e:	005b      	lsls	r3, r3, #1
 8021a30:	fa02 f303 	lsl.w	r3, r2, r3
 8021a34:	69ba      	ldr	r2, [r7, #24]
 8021a36:	4313      	orrs	r3, r2
 8021a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	69ba      	ldr	r2, [r7, #24]
 8021a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	685b      	ldr	r3, [r3, #4]
 8021a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8021a46:	2201      	movs	r2, #1
 8021a48:	69fb      	ldr	r3, [r7, #28]
 8021a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8021a4e:	43db      	mvns	r3, r3
 8021a50:	69ba      	ldr	r2, [r7, #24]
 8021a52:	4013      	ands	r3, r2
 8021a54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8021a56:	683b      	ldr	r3, [r7, #0]
 8021a58:	685b      	ldr	r3, [r3, #4]
 8021a5a:	091b      	lsrs	r3, r3, #4
 8021a5c:	f003 0201 	and.w	r2, r3, #1
 8021a60:	69fb      	ldr	r3, [r7, #28]
 8021a62:	fa02 f303 	lsl.w	r3, r2, r3
 8021a66:	69ba      	ldr	r2, [r7, #24]
 8021a68:	4313      	orrs	r3, r2
 8021a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	69ba      	ldr	r2, [r7, #24]
 8021a70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8021a72:	683b      	ldr	r3, [r7, #0]
 8021a74:	685b      	ldr	r3, [r3, #4]
 8021a76:	f003 0303 	and.w	r3, r3, #3
 8021a7a:	2b03      	cmp	r3, #3
 8021a7c:	d017      	beq.n	8021aae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8021a7e:	687b      	ldr	r3, [r7, #4]
 8021a80:	68db      	ldr	r3, [r3, #12]
 8021a82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8021a84:	69fb      	ldr	r3, [r7, #28]
 8021a86:	005b      	lsls	r3, r3, #1
 8021a88:	2203      	movs	r2, #3
 8021a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8021a8e:	43db      	mvns	r3, r3
 8021a90:	69ba      	ldr	r2, [r7, #24]
 8021a92:	4013      	ands	r3, r2
 8021a94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021a96:	683b      	ldr	r3, [r7, #0]
 8021a98:	689a      	ldr	r2, [r3, #8]
 8021a9a:	69fb      	ldr	r3, [r7, #28]
 8021a9c:	005b      	lsls	r3, r3, #1
 8021a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8021aa2:	69ba      	ldr	r2, [r7, #24]
 8021aa4:	4313      	orrs	r3, r2
 8021aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8021aa8:	687b      	ldr	r3, [r7, #4]
 8021aaa:	69ba      	ldr	r2, [r7, #24]
 8021aac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8021aae:	683b      	ldr	r3, [r7, #0]
 8021ab0:	685b      	ldr	r3, [r3, #4]
 8021ab2:	f003 0303 	and.w	r3, r3, #3
 8021ab6:	2b02      	cmp	r3, #2
 8021ab8:	d123      	bne.n	8021b02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8021aba:	69fb      	ldr	r3, [r7, #28]
 8021abc:	08da      	lsrs	r2, r3, #3
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	3208      	adds	r2, #8
 8021ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8021ac8:	69fb      	ldr	r3, [r7, #28]
 8021aca:	f003 0307 	and.w	r3, r3, #7
 8021ace:	009b      	lsls	r3, r3, #2
 8021ad0:	220f      	movs	r2, #15
 8021ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8021ad6:	43db      	mvns	r3, r3
 8021ad8:	69ba      	ldr	r2, [r7, #24]
 8021ada:	4013      	ands	r3, r2
 8021adc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8021ade:	683b      	ldr	r3, [r7, #0]
 8021ae0:	691a      	ldr	r2, [r3, #16]
 8021ae2:	69fb      	ldr	r3, [r7, #28]
 8021ae4:	f003 0307 	and.w	r3, r3, #7
 8021ae8:	009b      	lsls	r3, r3, #2
 8021aea:	fa02 f303 	lsl.w	r3, r2, r3
 8021aee:	69ba      	ldr	r2, [r7, #24]
 8021af0:	4313      	orrs	r3, r2
 8021af2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8021af4:	69fb      	ldr	r3, [r7, #28]
 8021af6:	08da      	lsrs	r2, r3, #3
 8021af8:	687b      	ldr	r3, [r7, #4]
 8021afa:	3208      	adds	r2, #8
 8021afc:	69b9      	ldr	r1, [r7, #24]
 8021afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8021b02:	687b      	ldr	r3, [r7, #4]
 8021b04:	681b      	ldr	r3, [r3, #0]
 8021b06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8021b08:	69fb      	ldr	r3, [r7, #28]
 8021b0a:	005b      	lsls	r3, r3, #1
 8021b0c:	2203      	movs	r2, #3
 8021b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8021b12:	43db      	mvns	r3, r3
 8021b14:	69ba      	ldr	r2, [r7, #24]
 8021b16:	4013      	ands	r3, r2
 8021b18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8021b1a:	683b      	ldr	r3, [r7, #0]
 8021b1c:	685b      	ldr	r3, [r3, #4]
 8021b1e:	f003 0203 	and.w	r2, r3, #3
 8021b22:	69fb      	ldr	r3, [r7, #28]
 8021b24:	005b      	lsls	r3, r3, #1
 8021b26:	fa02 f303 	lsl.w	r3, r2, r3
 8021b2a:	69ba      	ldr	r2, [r7, #24]
 8021b2c:	4313      	orrs	r3, r2
 8021b2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8021b30:	687b      	ldr	r3, [r7, #4]
 8021b32:	69ba      	ldr	r2, [r7, #24]
 8021b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8021b36:	683b      	ldr	r3, [r7, #0]
 8021b38:	685b      	ldr	r3, [r3, #4]
 8021b3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8021b3e:	2b00      	cmp	r3, #0
 8021b40:	f000 80d8 	beq.w	8021cf4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021b44:	4b2c      	ldr	r3, [pc, #176]	@ (8021bf8 <HAL_GPIO_Init+0x22c>)
 8021b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8021b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8021bf8 <HAL_GPIO_Init+0x22c>)
 8021b4c:	f043 0302 	orr.w	r3, r3, #2
 8021b50:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8021b54:	4b28      	ldr	r3, [pc, #160]	@ (8021bf8 <HAL_GPIO_Init+0x22c>)
 8021b56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8021b5a:	f003 0302 	and.w	r3, r3, #2
 8021b5e:	60fb      	str	r3, [r7, #12]
 8021b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8021b62:	4a26      	ldr	r2, [pc, #152]	@ (8021bfc <HAL_GPIO_Init+0x230>)
 8021b64:	69fb      	ldr	r3, [r7, #28]
 8021b66:	089b      	lsrs	r3, r3, #2
 8021b68:	3302      	adds	r3, #2
 8021b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8021b70:	69fb      	ldr	r3, [r7, #28]
 8021b72:	f003 0303 	and.w	r3, r3, #3
 8021b76:	009b      	lsls	r3, r3, #2
 8021b78:	220f      	movs	r2, #15
 8021b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8021b7e:	43db      	mvns	r3, r3
 8021b80:	69ba      	ldr	r2, [r7, #24]
 8021b82:	4013      	ands	r3, r2
 8021b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	4a1d      	ldr	r2, [pc, #116]	@ (8021c00 <HAL_GPIO_Init+0x234>)
 8021b8a:	4293      	cmp	r3, r2
 8021b8c:	d04a      	beq.n	8021c24 <HAL_GPIO_Init+0x258>
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	4a1c      	ldr	r2, [pc, #112]	@ (8021c04 <HAL_GPIO_Init+0x238>)
 8021b92:	4293      	cmp	r3, r2
 8021b94:	d02b      	beq.n	8021bee <HAL_GPIO_Init+0x222>
 8021b96:	687b      	ldr	r3, [r7, #4]
 8021b98:	4a1b      	ldr	r2, [pc, #108]	@ (8021c08 <HAL_GPIO_Init+0x23c>)
 8021b9a:	4293      	cmp	r3, r2
 8021b9c:	d025      	beq.n	8021bea <HAL_GPIO_Init+0x21e>
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8021c0c <HAL_GPIO_Init+0x240>)
 8021ba2:	4293      	cmp	r3, r2
 8021ba4:	d01f      	beq.n	8021be6 <HAL_GPIO_Init+0x21a>
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	4a19      	ldr	r2, [pc, #100]	@ (8021c10 <HAL_GPIO_Init+0x244>)
 8021baa:	4293      	cmp	r3, r2
 8021bac:	d019      	beq.n	8021be2 <HAL_GPIO_Init+0x216>
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	4a18      	ldr	r2, [pc, #96]	@ (8021c14 <HAL_GPIO_Init+0x248>)
 8021bb2:	4293      	cmp	r3, r2
 8021bb4:	d013      	beq.n	8021bde <HAL_GPIO_Init+0x212>
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	4a17      	ldr	r2, [pc, #92]	@ (8021c18 <HAL_GPIO_Init+0x24c>)
 8021bba:	4293      	cmp	r3, r2
 8021bbc:	d00d      	beq.n	8021bda <HAL_GPIO_Init+0x20e>
 8021bbe:	687b      	ldr	r3, [r7, #4]
 8021bc0:	4a16      	ldr	r2, [pc, #88]	@ (8021c1c <HAL_GPIO_Init+0x250>)
 8021bc2:	4293      	cmp	r3, r2
 8021bc4:	d007      	beq.n	8021bd6 <HAL_GPIO_Init+0x20a>
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	4a15      	ldr	r2, [pc, #84]	@ (8021c20 <HAL_GPIO_Init+0x254>)
 8021bca:	4293      	cmp	r3, r2
 8021bcc:	d101      	bne.n	8021bd2 <HAL_GPIO_Init+0x206>
 8021bce:	2309      	movs	r3, #9
 8021bd0:	e029      	b.n	8021c26 <HAL_GPIO_Init+0x25a>
 8021bd2:	230a      	movs	r3, #10
 8021bd4:	e027      	b.n	8021c26 <HAL_GPIO_Init+0x25a>
 8021bd6:	2307      	movs	r3, #7
 8021bd8:	e025      	b.n	8021c26 <HAL_GPIO_Init+0x25a>
 8021bda:	2306      	movs	r3, #6
 8021bdc:	e023      	b.n	8021c26 <HAL_GPIO_Init+0x25a>
 8021bde:	2305      	movs	r3, #5
 8021be0:	e021      	b.n	8021c26 <HAL_GPIO_Init+0x25a>
 8021be2:	2304      	movs	r3, #4
 8021be4:	e01f      	b.n	8021c26 <HAL_GPIO_Init+0x25a>
 8021be6:	2303      	movs	r3, #3
 8021be8:	e01d      	b.n	8021c26 <HAL_GPIO_Init+0x25a>
 8021bea:	2302      	movs	r3, #2
 8021bec:	e01b      	b.n	8021c26 <HAL_GPIO_Init+0x25a>
 8021bee:	2301      	movs	r3, #1
 8021bf0:	e019      	b.n	8021c26 <HAL_GPIO_Init+0x25a>
 8021bf2:	bf00      	nop
 8021bf4:	58000080 	.word	0x58000080
 8021bf8:	58024400 	.word	0x58024400
 8021bfc:	58000400 	.word	0x58000400
 8021c00:	58020000 	.word	0x58020000
 8021c04:	58020400 	.word	0x58020400
 8021c08:	58020800 	.word	0x58020800
 8021c0c:	58020c00 	.word	0x58020c00
 8021c10:	58021000 	.word	0x58021000
 8021c14:	58021400 	.word	0x58021400
 8021c18:	58021800 	.word	0x58021800
 8021c1c:	58021c00 	.word	0x58021c00
 8021c20:	58022400 	.word	0x58022400
 8021c24:	2300      	movs	r3, #0
 8021c26:	69fa      	ldr	r2, [r7, #28]
 8021c28:	f002 0203 	and.w	r2, r2, #3
 8021c2c:	0092      	lsls	r2, r2, #2
 8021c2e:	4093      	lsls	r3, r2
 8021c30:	69ba      	ldr	r2, [r7, #24]
 8021c32:	4313      	orrs	r3, r2
 8021c34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8021c36:	4938      	ldr	r1, [pc, #224]	@ (8021d18 <HAL_GPIO_Init+0x34c>)
 8021c38:	69fb      	ldr	r3, [r7, #28]
 8021c3a:	089b      	lsrs	r3, r3, #2
 8021c3c:	3302      	adds	r3, #2
 8021c3e:	69ba      	ldr	r2, [r7, #24]
 8021c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8021c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021c48:	681b      	ldr	r3, [r3, #0]
 8021c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8021c4c:	693b      	ldr	r3, [r7, #16]
 8021c4e:	43db      	mvns	r3, r3
 8021c50:	69ba      	ldr	r2, [r7, #24]
 8021c52:	4013      	ands	r3, r2
 8021c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8021c56:	683b      	ldr	r3, [r7, #0]
 8021c58:	685b      	ldr	r3, [r3, #4]
 8021c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	d003      	beq.n	8021c6a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8021c62:	69ba      	ldr	r2, [r7, #24]
 8021c64:	693b      	ldr	r3, [r7, #16]
 8021c66:	4313      	orrs	r3, r2
 8021c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8021c6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8021c6e:	69bb      	ldr	r3, [r7, #24]
 8021c70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8021c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021c76:	685b      	ldr	r3, [r3, #4]
 8021c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8021c7a:	693b      	ldr	r3, [r7, #16]
 8021c7c:	43db      	mvns	r3, r3
 8021c7e:	69ba      	ldr	r2, [r7, #24]
 8021c80:	4013      	ands	r3, r2
 8021c82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8021c84:	683b      	ldr	r3, [r7, #0]
 8021c86:	685b      	ldr	r3, [r3, #4]
 8021c88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d003      	beq.n	8021c98 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8021c90:	69ba      	ldr	r2, [r7, #24]
 8021c92:	693b      	ldr	r3, [r7, #16]
 8021c94:	4313      	orrs	r3, r2
 8021c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8021c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8021c9c:	69bb      	ldr	r3, [r7, #24]
 8021c9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8021ca0:	697b      	ldr	r3, [r7, #20]
 8021ca2:	685b      	ldr	r3, [r3, #4]
 8021ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8021ca6:	693b      	ldr	r3, [r7, #16]
 8021ca8:	43db      	mvns	r3, r3
 8021caa:	69ba      	ldr	r2, [r7, #24]
 8021cac:	4013      	ands	r3, r2
 8021cae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8021cb0:	683b      	ldr	r3, [r7, #0]
 8021cb2:	685b      	ldr	r3, [r3, #4]
 8021cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d003      	beq.n	8021cc4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8021cbc:	69ba      	ldr	r2, [r7, #24]
 8021cbe:	693b      	ldr	r3, [r7, #16]
 8021cc0:	4313      	orrs	r3, r2
 8021cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8021cc4:	697b      	ldr	r3, [r7, #20]
 8021cc6:	69ba      	ldr	r2, [r7, #24]
 8021cc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8021cca:	697b      	ldr	r3, [r7, #20]
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8021cd0:	693b      	ldr	r3, [r7, #16]
 8021cd2:	43db      	mvns	r3, r3
 8021cd4:	69ba      	ldr	r2, [r7, #24]
 8021cd6:	4013      	ands	r3, r2
 8021cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8021cda:	683b      	ldr	r3, [r7, #0]
 8021cdc:	685b      	ldr	r3, [r3, #4]
 8021cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	d003      	beq.n	8021cee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8021ce6:	69ba      	ldr	r2, [r7, #24]
 8021ce8:	693b      	ldr	r3, [r7, #16]
 8021cea:	4313      	orrs	r3, r2
 8021cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8021cee:	697b      	ldr	r3, [r7, #20]
 8021cf0:	69ba      	ldr	r2, [r7, #24]
 8021cf2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8021cf4:	69fb      	ldr	r3, [r7, #28]
 8021cf6:	3301      	adds	r3, #1
 8021cf8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8021cfa:	683b      	ldr	r3, [r7, #0]
 8021cfc:	681a      	ldr	r2, [r3, #0]
 8021cfe:	69fb      	ldr	r3, [r7, #28]
 8021d00:	fa22 f303 	lsr.w	r3, r2, r3
 8021d04:	2b00      	cmp	r3, #0
 8021d06:	f47f ae6b 	bne.w	80219e0 <HAL_GPIO_Init+0x14>
  }
}
 8021d0a:	bf00      	nop
 8021d0c:	bf00      	nop
 8021d0e:	3724      	adds	r7, #36	@ 0x24
 8021d10:	46bd      	mov	sp, r7
 8021d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d16:	4770      	bx	lr
 8021d18:	58000400 	.word	0x58000400

08021d1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8021d1c:	b480      	push	{r7}
 8021d1e:	b083      	sub	sp, #12
 8021d20:	af00      	add	r7, sp, #0
 8021d22:	6078      	str	r0, [r7, #4]
 8021d24:	460b      	mov	r3, r1
 8021d26:	807b      	strh	r3, [r7, #2]
 8021d28:	4613      	mov	r3, r2
 8021d2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8021d2c:	787b      	ldrb	r3, [r7, #1]
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d003      	beq.n	8021d3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8021d32:	887a      	ldrh	r2, [r7, #2]
 8021d34:	687b      	ldr	r3, [r7, #4]
 8021d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8021d38:	e003      	b.n	8021d42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8021d3a:	887b      	ldrh	r3, [r7, #2]
 8021d3c:	041a      	lsls	r2, r3, #16
 8021d3e:	687b      	ldr	r3, [r7, #4]
 8021d40:	619a      	str	r2, [r3, #24]
}
 8021d42:	bf00      	nop
 8021d44:	370c      	adds	r7, #12
 8021d46:	46bd      	mov	sp, r7
 8021d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d4c:	4770      	bx	lr

08021d4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8021d4e:	b480      	push	{r7}
 8021d50:	b085      	sub	sp, #20
 8021d52:	af00      	add	r7, sp, #0
 8021d54:	6078      	str	r0, [r7, #4]
 8021d56:	460b      	mov	r3, r1
 8021d58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	695b      	ldr	r3, [r3, #20]
 8021d5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8021d60:	887a      	ldrh	r2, [r7, #2]
 8021d62:	68fb      	ldr	r3, [r7, #12]
 8021d64:	4013      	ands	r3, r2
 8021d66:	041a      	lsls	r2, r3, #16
 8021d68:	68fb      	ldr	r3, [r7, #12]
 8021d6a:	43d9      	mvns	r1, r3
 8021d6c:	887b      	ldrh	r3, [r7, #2]
 8021d6e:	400b      	ands	r3, r1
 8021d70:	431a      	orrs	r2, r3
 8021d72:	687b      	ldr	r3, [r7, #4]
 8021d74:	619a      	str	r2, [r3, #24]
}
 8021d76:	bf00      	nop
 8021d78:	3714      	adds	r7, #20
 8021d7a:	46bd      	mov	sp, r7
 8021d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d80:	4770      	bx	lr
	...

08021d84 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8021d84:	b580      	push	{r7, lr}
 8021d86:	b084      	sub	sp, #16
 8021d88:	af00      	add	r7, sp, #0
 8021d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8021d8c:	4b19      	ldr	r3, [pc, #100]	@ (8021df4 <HAL_PWREx_ConfigSupply+0x70>)
 8021d8e:	68db      	ldr	r3, [r3, #12]
 8021d90:	f003 0304 	and.w	r3, r3, #4
 8021d94:	2b04      	cmp	r3, #4
 8021d96:	d00a      	beq.n	8021dae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8021d98:	4b16      	ldr	r3, [pc, #88]	@ (8021df4 <HAL_PWREx_ConfigSupply+0x70>)
 8021d9a:	68db      	ldr	r3, [r3, #12]
 8021d9c:	f003 0307 	and.w	r3, r3, #7
 8021da0:	687a      	ldr	r2, [r7, #4]
 8021da2:	429a      	cmp	r2, r3
 8021da4:	d001      	beq.n	8021daa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8021da6:	2301      	movs	r3, #1
 8021da8:	e01f      	b.n	8021dea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8021daa:	2300      	movs	r3, #0
 8021dac:	e01d      	b.n	8021dea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8021dae:	4b11      	ldr	r3, [pc, #68]	@ (8021df4 <HAL_PWREx_ConfigSupply+0x70>)
 8021db0:	68db      	ldr	r3, [r3, #12]
 8021db2:	f023 0207 	bic.w	r2, r3, #7
 8021db6:	490f      	ldr	r1, [pc, #60]	@ (8021df4 <HAL_PWREx_ConfigSupply+0x70>)
 8021db8:	687b      	ldr	r3, [r7, #4]
 8021dba:	4313      	orrs	r3, r2
 8021dbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8021dbe:	f7fe fd39 	bl	8020834 <HAL_GetTick>
 8021dc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8021dc4:	e009      	b.n	8021dda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8021dc6:	f7fe fd35 	bl	8020834 <HAL_GetTick>
 8021dca:	4602      	mov	r2, r0
 8021dcc:	68fb      	ldr	r3, [r7, #12]
 8021dce:	1ad3      	subs	r3, r2, r3
 8021dd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021dd4:	d901      	bls.n	8021dda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8021dd6:	2301      	movs	r3, #1
 8021dd8:	e007      	b.n	8021dea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8021dda:	4b06      	ldr	r3, [pc, #24]	@ (8021df4 <HAL_PWREx_ConfigSupply+0x70>)
 8021ddc:	685b      	ldr	r3, [r3, #4]
 8021dde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8021de2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021de6:	d1ee      	bne.n	8021dc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8021de8:	2300      	movs	r3, #0
}
 8021dea:	4618      	mov	r0, r3
 8021dec:	3710      	adds	r7, #16
 8021dee:	46bd      	mov	sp, r7
 8021df0:	bd80      	pop	{r7, pc}
 8021df2:	bf00      	nop
 8021df4:	58024800 	.word	0x58024800

08021df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021df8:	b580      	push	{r7, lr}
 8021dfa:	b08c      	sub	sp, #48	@ 0x30
 8021dfc:	af00      	add	r7, sp, #0
 8021dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8021e00:	687b      	ldr	r3, [r7, #4]
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	d101      	bne.n	8021e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8021e06:	2301      	movs	r3, #1
 8021e08:	e3c8      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021e0a:	687b      	ldr	r3, [r7, #4]
 8021e0c:	681b      	ldr	r3, [r3, #0]
 8021e0e:	f003 0301 	and.w	r3, r3, #1
 8021e12:	2b00      	cmp	r3, #0
 8021e14:	f000 8087 	beq.w	8021f26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021e18:	4b88      	ldr	r3, [pc, #544]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e1a:	691b      	ldr	r3, [r3, #16]
 8021e1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8021e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8021e22:	4b86      	ldr	r3, [pc, #536]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8021e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e2a:	2b10      	cmp	r3, #16
 8021e2c:	d007      	beq.n	8021e3e <HAL_RCC_OscConfig+0x46>
 8021e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021e30:	2b18      	cmp	r3, #24
 8021e32:	d110      	bne.n	8021e56 <HAL_RCC_OscConfig+0x5e>
 8021e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021e36:	f003 0303 	and.w	r3, r3, #3
 8021e3a:	2b02      	cmp	r3, #2
 8021e3c:	d10b      	bne.n	8021e56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021e3e:	4b7f      	ldr	r3, [pc, #508]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e40:	681b      	ldr	r3, [r3, #0]
 8021e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	d06c      	beq.n	8021f24 <HAL_RCC_OscConfig+0x12c>
 8021e4a:	687b      	ldr	r3, [r7, #4]
 8021e4c:	685b      	ldr	r3, [r3, #4]
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d168      	bne.n	8021f24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8021e52:	2301      	movs	r3, #1
 8021e54:	e3a2      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021e56:	687b      	ldr	r3, [r7, #4]
 8021e58:	685b      	ldr	r3, [r3, #4]
 8021e5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021e5e:	d106      	bne.n	8021e6e <HAL_RCC_OscConfig+0x76>
 8021e60:	4b76      	ldr	r3, [pc, #472]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e62:	681b      	ldr	r3, [r3, #0]
 8021e64:	4a75      	ldr	r2, [pc, #468]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021e6a:	6013      	str	r3, [r2, #0]
 8021e6c:	e02e      	b.n	8021ecc <HAL_RCC_OscConfig+0xd4>
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	685b      	ldr	r3, [r3, #4]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d10c      	bne.n	8021e90 <HAL_RCC_OscConfig+0x98>
 8021e76:	4b71      	ldr	r3, [pc, #452]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	4a70      	ldr	r2, [pc, #448]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021e80:	6013      	str	r3, [r2, #0]
 8021e82:	4b6e      	ldr	r3, [pc, #440]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e84:	681b      	ldr	r3, [r3, #0]
 8021e86:	4a6d      	ldr	r2, [pc, #436]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8021e8c:	6013      	str	r3, [r2, #0]
 8021e8e:	e01d      	b.n	8021ecc <HAL_RCC_OscConfig+0xd4>
 8021e90:	687b      	ldr	r3, [r7, #4]
 8021e92:	685b      	ldr	r3, [r3, #4]
 8021e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8021e98:	d10c      	bne.n	8021eb4 <HAL_RCC_OscConfig+0xbc>
 8021e9a:	4b68      	ldr	r3, [pc, #416]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	4a67      	ldr	r2, [pc, #412]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8021ea4:	6013      	str	r3, [r2, #0]
 8021ea6:	4b65      	ldr	r3, [pc, #404]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021ea8:	681b      	ldr	r3, [r3, #0]
 8021eaa:	4a64      	ldr	r2, [pc, #400]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021eb0:	6013      	str	r3, [r2, #0]
 8021eb2:	e00b      	b.n	8021ecc <HAL_RCC_OscConfig+0xd4>
 8021eb4:	4b61      	ldr	r3, [pc, #388]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021eb6:	681b      	ldr	r3, [r3, #0]
 8021eb8:	4a60      	ldr	r2, [pc, #384]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8021ebe:	6013      	str	r3, [r2, #0]
 8021ec0:	4b5e      	ldr	r3, [pc, #376]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	4a5d      	ldr	r2, [pc, #372]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8021eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021ecc:	687b      	ldr	r3, [r7, #4]
 8021ece:	685b      	ldr	r3, [r3, #4]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d013      	beq.n	8021efc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021ed4:	f7fe fcae 	bl	8020834 <HAL_GetTick>
 8021ed8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8021eda:	e008      	b.n	8021eee <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021edc:	f7fe fcaa 	bl	8020834 <HAL_GetTick>
 8021ee0:	4602      	mov	r2, r0
 8021ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ee4:	1ad3      	subs	r3, r2, r3
 8021ee6:	2b64      	cmp	r3, #100	@ 0x64
 8021ee8:	d901      	bls.n	8021eee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8021eea:	2303      	movs	r3, #3
 8021eec:	e356      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8021eee:	4b53      	ldr	r3, [pc, #332]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021ef0:	681b      	ldr	r3, [r3, #0]
 8021ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021ef6:	2b00      	cmp	r3, #0
 8021ef8:	d0f0      	beq.n	8021edc <HAL_RCC_OscConfig+0xe4>
 8021efa:	e014      	b.n	8021f26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021efc:	f7fe fc9a 	bl	8020834 <HAL_GetTick>
 8021f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8021f02:	e008      	b.n	8021f16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021f04:	f7fe fc96 	bl	8020834 <HAL_GetTick>
 8021f08:	4602      	mov	r2, r0
 8021f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f0c:	1ad3      	subs	r3, r2, r3
 8021f0e:	2b64      	cmp	r3, #100	@ 0x64
 8021f10:	d901      	bls.n	8021f16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8021f12:	2303      	movs	r3, #3
 8021f14:	e342      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8021f16:	4b49      	ldr	r3, [pc, #292]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021f18:	681b      	ldr	r3, [r3, #0]
 8021f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021f1e:	2b00      	cmp	r3, #0
 8021f20:	d1f0      	bne.n	8021f04 <HAL_RCC_OscConfig+0x10c>
 8021f22:	e000      	b.n	8021f26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8021f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	681b      	ldr	r3, [r3, #0]
 8021f2a:	f003 0302 	and.w	r3, r3, #2
 8021f2e:	2b00      	cmp	r3, #0
 8021f30:	f000 808c 	beq.w	802204c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021f34:	4b41      	ldr	r3, [pc, #260]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021f36:	691b      	ldr	r3, [r3, #16]
 8021f38:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8021f3c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8021f3e:	4b3f      	ldr	r3, [pc, #252]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f42:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8021f44:	6a3b      	ldr	r3, [r7, #32]
 8021f46:	2b00      	cmp	r3, #0
 8021f48:	d007      	beq.n	8021f5a <HAL_RCC_OscConfig+0x162>
 8021f4a:	6a3b      	ldr	r3, [r7, #32]
 8021f4c:	2b18      	cmp	r3, #24
 8021f4e:	d137      	bne.n	8021fc0 <HAL_RCC_OscConfig+0x1c8>
 8021f50:	69fb      	ldr	r3, [r7, #28]
 8021f52:	f003 0303 	and.w	r3, r3, #3
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	d132      	bne.n	8021fc0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021f5a:	4b38      	ldr	r3, [pc, #224]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021f5c:	681b      	ldr	r3, [r3, #0]
 8021f5e:	f003 0304 	and.w	r3, r3, #4
 8021f62:	2b00      	cmp	r3, #0
 8021f64:	d005      	beq.n	8021f72 <HAL_RCC_OscConfig+0x17a>
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	68db      	ldr	r3, [r3, #12]
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	d101      	bne.n	8021f72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8021f6e:	2301      	movs	r3, #1
 8021f70:	e314      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8021f72:	4b32      	ldr	r3, [pc, #200]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021f74:	681b      	ldr	r3, [r3, #0]
 8021f76:	f023 0219 	bic.w	r2, r3, #25
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	68db      	ldr	r3, [r3, #12]
 8021f7e:	492f      	ldr	r1, [pc, #188]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021f80:	4313      	orrs	r3, r2
 8021f82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021f84:	f7fe fc56 	bl	8020834 <HAL_GetTick>
 8021f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8021f8a:	e008      	b.n	8021f9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021f8c:	f7fe fc52 	bl	8020834 <HAL_GetTick>
 8021f90:	4602      	mov	r2, r0
 8021f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f94:	1ad3      	subs	r3, r2, r3
 8021f96:	2b02      	cmp	r3, #2
 8021f98:	d901      	bls.n	8021f9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8021f9a:	2303      	movs	r3, #3
 8021f9c:	e2fe      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8021f9e:	4b27      	ldr	r3, [pc, #156]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021fa0:	681b      	ldr	r3, [r3, #0]
 8021fa2:	f003 0304 	and.w	r3, r3, #4
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d0f0      	beq.n	8021f8c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021faa:	4b24      	ldr	r3, [pc, #144]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021fac:	685b      	ldr	r3, [r3, #4]
 8021fae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021fb2:	687b      	ldr	r3, [r7, #4]
 8021fb4:	691b      	ldr	r3, [r3, #16]
 8021fb6:	061b      	lsls	r3, r3, #24
 8021fb8:	4920      	ldr	r1, [pc, #128]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021fba:	4313      	orrs	r3, r2
 8021fbc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8021fbe:	e045      	b.n	802204c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8021fc0:	687b      	ldr	r3, [r7, #4]
 8021fc2:	68db      	ldr	r3, [r3, #12]
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d026      	beq.n	8022016 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8021fc8:	4b1c      	ldr	r3, [pc, #112]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021fca:	681b      	ldr	r3, [r3, #0]
 8021fcc:	f023 0219 	bic.w	r2, r3, #25
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	68db      	ldr	r3, [r3, #12]
 8021fd4:	4919      	ldr	r1, [pc, #100]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021fd6:	4313      	orrs	r3, r2
 8021fd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021fda:	f7fe fc2b 	bl	8020834 <HAL_GetTick>
 8021fde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8021fe0:	e008      	b.n	8021ff4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021fe2:	f7fe fc27 	bl	8020834 <HAL_GetTick>
 8021fe6:	4602      	mov	r2, r0
 8021fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021fea:	1ad3      	subs	r3, r2, r3
 8021fec:	2b02      	cmp	r3, #2
 8021fee:	d901      	bls.n	8021ff4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8021ff0:	2303      	movs	r3, #3
 8021ff2:	e2d3      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8021ff4:	4b11      	ldr	r3, [pc, #68]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8021ff6:	681b      	ldr	r3, [r3, #0]
 8021ff8:	f003 0304 	and.w	r3, r3, #4
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d0f0      	beq.n	8021fe2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022000:	4b0e      	ldr	r3, [pc, #56]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8022002:	685b      	ldr	r3, [r3, #4]
 8022004:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8022008:	687b      	ldr	r3, [r7, #4]
 802200a:	691b      	ldr	r3, [r3, #16]
 802200c:	061b      	lsls	r3, r3, #24
 802200e:	490b      	ldr	r1, [pc, #44]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8022010:	4313      	orrs	r3, r2
 8022012:	604b      	str	r3, [r1, #4]
 8022014:	e01a      	b.n	802204c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8022016:	4b09      	ldr	r3, [pc, #36]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 8022018:	681b      	ldr	r3, [r3, #0]
 802201a:	4a08      	ldr	r2, [pc, #32]	@ (802203c <HAL_RCC_OscConfig+0x244>)
 802201c:	f023 0301 	bic.w	r3, r3, #1
 8022020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022022:	f7fe fc07 	bl	8020834 <HAL_GetTick>
 8022026:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8022028:	e00a      	b.n	8022040 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802202a:	f7fe fc03 	bl	8020834 <HAL_GetTick>
 802202e:	4602      	mov	r2, r0
 8022030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022032:	1ad3      	subs	r3, r2, r3
 8022034:	2b02      	cmp	r3, #2
 8022036:	d903      	bls.n	8022040 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8022038:	2303      	movs	r3, #3
 802203a:	e2af      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
 802203c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8022040:	4b96      	ldr	r3, [pc, #600]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	f003 0304 	and.w	r3, r3, #4
 8022048:	2b00      	cmp	r3, #0
 802204a:	d1ee      	bne.n	802202a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 802204c:	687b      	ldr	r3, [r7, #4]
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	f003 0310 	and.w	r3, r3, #16
 8022054:	2b00      	cmp	r3, #0
 8022056:	d06a      	beq.n	802212e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022058:	4b90      	ldr	r3, [pc, #576]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 802205a:	691b      	ldr	r3, [r3, #16]
 802205c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8022060:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8022062:	4b8e      	ldr	r3, [pc, #568]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022066:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8022068:	69bb      	ldr	r3, [r7, #24]
 802206a:	2b08      	cmp	r3, #8
 802206c:	d007      	beq.n	802207e <HAL_RCC_OscConfig+0x286>
 802206e:	69bb      	ldr	r3, [r7, #24]
 8022070:	2b18      	cmp	r3, #24
 8022072:	d11b      	bne.n	80220ac <HAL_RCC_OscConfig+0x2b4>
 8022074:	697b      	ldr	r3, [r7, #20]
 8022076:	f003 0303 	and.w	r3, r3, #3
 802207a:	2b01      	cmp	r3, #1
 802207c:	d116      	bne.n	80220ac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 802207e:	4b87      	ldr	r3, [pc, #540]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022086:	2b00      	cmp	r3, #0
 8022088:	d005      	beq.n	8022096 <HAL_RCC_OscConfig+0x29e>
 802208a:	687b      	ldr	r3, [r7, #4]
 802208c:	69db      	ldr	r3, [r3, #28]
 802208e:	2b80      	cmp	r3, #128	@ 0x80
 8022090:	d001      	beq.n	8022096 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8022092:	2301      	movs	r3, #1
 8022094:	e282      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8022096:	4b81      	ldr	r3, [pc, #516]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022098:	68db      	ldr	r3, [r3, #12]
 802209a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 802209e:	687b      	ldr	r3, [r7, #4]
 80220a0:	6a1b      	ldr	r3, [r3, #32]
 80220a2:	061b      	lsls	r3, r3, #24
 80220a4:	497d      	ldr	r1, [pc, #500]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80220a6:	4313      	orrs	r3, r2
 80220a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80220aa:	e040      	b.n	802212e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80220ac:	687b      	ldr	r3, [r7, #4]
 80220ae:	69db      	ldr	r3, [r3, #28]
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	d023      	beq.n	80220fc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80220b4:	4b79      	ldr	r3, [pc, #484]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	4a78      	ldr	r2, [pc, #480]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80220ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80220be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80220c0:	f7fe fbb8 	bl	8020834 <HAL_GetTick>
 80220c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80220c6:	e008      	b.n	80220da <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80220c8:	f7fe fbb4 	bl	8020834 <HAL_GetTick>
 80220cc:	4602      	mov	r2, r0
 80220ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80220d0:	1ad3      	subs	r3, r2, r3
 80220d2:	2b02      	cmp	r3, #2
 80220d4:	d901      	bls.n	80220da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80220d6:	2303      	movs	r3, #3
 80220d8:	e260      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80220da:	4b70      	ldr	r3, [pc, #448]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80220dc:	681b      	ldr	r3, [r3, #0]
 80220de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	d0f0      	beq.n	80220c8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80220e6:	4b6d      	ldr	r3, [pc, #436]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80220e8:	68db      	ldr	r3, [r3, #12]
 80220ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	6a1b      	ldr	r3, [r3, #32]
 80220f2:	061b      	lsls	r3, r3, #24
 80220f4:	4969      	ldr	r1, [pc, #420]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80220f6:	4313      	orrs	r3, r2
 80220f8:	60cb      	str	r3, [r1, #12]
 80220fa:	e018      	b.n	802212e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80220fc:	4b67      	ldr	r3, [pc, #412]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80220fe:	681b      	ldr	r3, [r3, #0]
 8022100:	4a66      	ldr	r2, [pc, #408]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8022106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022108:	f7fe fb94 	bl	8020834 <HAL_GetTick>
 802210c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 802210e:	e008      	b.n	8022122 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8022110:	f7fe fb90 	bl	8020834 <HAL_GetTick>
 8022114:	4602      	mov	r2, r0
 8022116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022118:	1ad3      	subs	r3, r2, r3
 802211a:	2b02      	cmp	r3, #2
 802211c:	d901      	bls.n	8022122 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 802211e:	2303      	movs	r3, #3
 8022120:	e23c      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8022122:	4b5e      	ldr	r3, [pc, #376]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022124:	681b      	ldr	r3, [r3, #0]
 8022126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802212a:	2b00      	cmp	r3, #0
 802212c:	d1f0      	bne.n	8022110 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802212e:	687b      	ldr	r3, [r7, #4]
 8022130:	681b      	ldr	r3, [r3, #0]
 8022132:	f003 0308 	and.w	r3, r3, #8
 8022136:	2b00      	cmp	r3, #0
 8022138:	d036      	beq.n	80221a8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	695b      	ldr	r3, [r3, #20]
 802213e:	2b00      	cmp	r3, #0
 8022140:	d019      	beq.n	8022176 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8022142:	4b56      	ldr	r3, [pc, #344]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022146:	4a55      	ldr	r2, [pc, #340]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022148:	f043 0301 	orr.w	r3, r3, #1
 802214c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802214e:	f7fe fb71 	bl	8020834 <HAL_GetTick>
 8022152:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8022154:	e008      	b.n	8022168 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8022156:	f7fe fb6d 	bl	8020834 <HAL_GetTick>
 802215a:	4602      	mov	r2, r0
 802215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802215e:	1ad3      	subs	r3, r2, r3
 8022160:	2b02      	cmp	r3, #2
 8022162:	d901      	bls.n	8022168 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8022164:	2303      	movs	r3, #3
 8022166:	e219      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8022168:	4b4c      	ldr	r3, [pc, #304]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 802216a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802216c:	f003 0302 	and.w	r3, r3, #2
 8022170:	2b00      	cmp	r3, #0
 8022172:	d0f0      	beq.n	8022156 <HAL_RCC_OscConfig+0x35e>
 8022174:	e018      	b.n	80221a8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8022176:	4b49      	ldr	r3, [pc, #292]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802217a:	4a48      	ldr	r2, [pc, #288]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 802217c:	f023 0301 	bic.w	r3, r3, #1
 8022180:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022182:	f7fe fb57 	bl	8020834 <HAL_GetTick>
 8022186:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8022188:	e008      	b.n	802219c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802218a:	f7fe fb53 	bl	8020834 <HAL_GetTick>
 802218e:	4602      	mov	r2, r0
 8022190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022192:	1ad3      	subs	r3, r2, r3
 8022194:	2b02      	cmp	r3, #2
 8022196:	d901      	bls.n	802219c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8022198:	2303      	movs	r3, #3
 802219a:	e1ff      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 802219c:	4b3f      	ldr	r3, [pc, #252]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 802219e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80221a0:	f003 0302 	and.w	r3, r3, #2
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	d1f0      	bne.n	802218a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80221a8:	687b      	ldr	r3, [r7, #4]
 80221aa:	681b      	ldr	r3, [r3, #0]
 80221ac:	f003 0320 	and.w	r3, r3, #32
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	d036      	beq.n	8022222 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80221b4:	687b      	ldr	r3, [r7, #4]
 80221b6:	699b      	ldr	r3, [r3, #24]
 80221b8:	2b00      	cmp	r3, #0
 80221ba:	d019      	beq.n	80221f0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80221bc:	4b37      	ldr	r3, [pc, #220]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80221be:	681b      	ldr	r3, [r3, #0]
 80221c0:	4a36      	ldr	r2, [pc, #216]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80221c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80221c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80221c8:	f7fe fb34 	bl	8020834 <HAL_GetTick>
 80221cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80221ce:	e008      	b.n	80221e2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80221d0:	f7fe fb30 	bl	8020834 <HAL_GetTick>
 80221d4:	4602      	mov	r2, r0
 80221d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80221d8:	1ad3      	subs	r3, r2, r3
 80221da:	2b02      	cmp	r3, #2
 80221dc:	d901      	bls.n	80221e2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80221de:	2303      	movs	r3, #3
 80221e0:	e1dc      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80221e2:	4b2e      	ldr	r3, [pc, #184]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80221e4:	681b      	ldr	r3, [r3, #0]
 80221e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	d0f0      	beq.n	80221d0 <HAL_RCC_OscConfig+0x3d8>
 80221ee:	e018      	b.n	8022222 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80221f0:	4b2a      	ldr	r3, [pc, #168]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80221f2:	681b      	ldr	r3, [r3, #0]
 80221f4:	4a29      	ldr	r2, [pc, #164]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 80221f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80221fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80221fc:	f7fe fb1a 	bl	8020834 <HAL_GetTick>
 8022200:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8022202:	e008      	b.n	8022216 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8022204:	f7fe fb16 	bl	8020834 <HAL_GetTick>
 8022208:	4602      	mov	r2, r0
 802220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802220c:	1ad3      	subs	r3, r2, r3
 802220e:	2b02      	cmp	r3, #2
 8022210:	d901      	bls.n	8022216 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8022212:	2303      	movs	r3, #3
 8022214:	e1c2      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8022216:	4b21      	ldr	r3, [pc, #132]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022218:	681b      	ldr	r3, [r3, #0]
 802221a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 802221e:	2b00      	cmp	r3, #0
 8022220:	d1f0      	bne.n	8022204 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8022222:	687b      	ldr	r3, [r7, #4]
 8022224:	681b      	ldr	r3, [r3, #0]
 8022226:	f003 0304 	and.w	r3, r3, #4
 802222a:	2b00      	cmp	r3, #0
 802222c:	f000 8086 	beq.w	802233c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8022230:	4b1b      	ldr	r3, [pc, #108]	@ (80222a0 <HAL_RCC_OscConfig+0x4a8>)
 8022232:	681b      	ldr	r3, [r3, #0]
 8022234:	4a1a      	ldr	r2, [pc, #104]	@ (80222a0 <HAL_RCC_OscConfig+0x4a8>)
 8022236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802223a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802223c:	f7fe fafa 	bl	8020834 <HAL_GetTick>
 8022240:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8022242:	e008      	b.n	8022256 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8022244:	f7fe faf6 	bl	8020834 <HAL_GetTick>
 8022248:	4602      	mov	r2, r0
 802224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802224c:	1ad3      	subs	r3, r2, r3
 802224e:	2b64      	cmp	r3, #100	@ 0x64
 8022250:	d901      	bls.n	8022256 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8022252:	2303      	movs	r3, #3
 8022254:	e1a2      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8022256:	4b12      	ldr	r3, [pc, #72]	@ (80222a0 <HAL_RCC_OscConfig+0x4a8>)
 8022258:	681b      	ldr	r3, [r3, #0]
 802225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802225e:	2b00      	cmp	r3, #0
 8022260:	d0f0      	beq.n	8022244 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	689b      	ldr	r3, [r3, #8]
 8022266:	2b01      	cmp	r3, #1
 8022268:	d106      	bne.n	8022278 <HAL_RCC_OscConfig+0x480>
 802226a:	4b0c      	ldr	r3, [pc, #48]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 802226c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802226e:	4a0b      	ldr	r2, [pc, #44]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022270:	f043 0301 	orr.w	r3, r3, #1
 8022274:	6713      	str	r3, [r2, #112]	@ 0x70
 8022276:	e032      	b.n	80222de <HAL_RCC_OscConfig+0x4e6>
 8022278:	687b      	ldr	r3, [r7, #4]
 802227a:	689b      	ldr	r3, [r3, #8]
 802227c:	2b00      	cmp	r3, #0
 802227e:	d111      	bne.n	80222a4 <HAL_RCC_OscConfig+0x4ac>
 8022280:	4b06      	ldr	r3, [pc, #24]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022284:	4a05      	ldr	r2, [pc, #20]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022286:	f023 0301 	bic.w	r3, r3, #1
 802228a:	6713      	str	r3, [r2, #112]	@ 0x70
 802228c:	4b03      	ldr	r3, [pc, #12]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 802228e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022290:	4a02      	ldr	r2, [pc, #8]	@ (802229c <HAL_RCC_OscConfig+0x4a4>)
 8022292:	f023 0304 	bic.w	r3, r3, #4
 8022296:	6713      	str	r3, [r2, #112]	@ 0x70
 8022298:	e021      	b.n	80222de <HAL_RCC_OscConfig+0x4e6>
 802229a:	bf00      	nop
 802229c:	58024400 	.word	0x58024400
 80222a0:	58024800 	.word	0x58024800
 80222a4:	687b      	ldr	r3, [r7, #4]
 80222a6:	689b      	ldr	r3, [r3, #8]
 80222a8:	2b05      	cmp	r3, #5
 80222aa:	d10c      	bne.n	80222c6 <HAL_RCC_OscConfig+0x4ce>
 80222ac:	4b83      	ldr	r3, [pc, #524]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80222ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80222b0:	4a82      	ldr	r2, [pc, #520]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80222b2:	f043 0304 	orr.w	r3, r3, #4
 80222b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80222b8:	4b80      	ldr	r3, [pc, #512]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80222ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80222bc:	4a7f      	ldr	r2, [pc, #508]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80222be:	f043 0301 	orr.w	r3, r3, #1
 80222c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80222c4:	e00b      	b.n	80222de <HAL_RCC_OscConfig+0x4e6>
 80222c6:	4b7d      	ldr	r3, [pc, #500]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80222c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80222ca:	4a7c      	ldr	r2, [pc, #496]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80222cc:	f023 0301 	bic.w	r3, r3, #1
 80222d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80222d2:	4b7a      	ldr	r3, [pc, #488]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80222d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80222d6:	4a79      	ldr	r2, [pc, #484]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80222d8:	f023 0304 	bic.w	r3, r3, #4
 80222dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	689b      	ldr	r3, [r3, #8]
 80222e2:	2b00      	cmp	r3, #0
 80222e4:	d015      	beq.n	8022312 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80222e6:	f7fe faa5 	bl	8020834 <HAL_GetTick>
 80222ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80222ec:	e00a      	b.n	8022304 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80222ee:	f7fe faa1 	bl	8020834 <HAL_GetTick>
 80222f2:	4602      	mov	r2, r0
 80222f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80222f6:	1ad3      	subs	r3, r2, r3
 80222f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80222fc:	4293      	cmp	r3, r2
 80222fe:	d901      	bls.n	8022304 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8022300:	2303      	movs	r3, #3
 8022302:	e14b      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8022304:	4b6d      	ldr	r3, [pc, #436]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022308:	f003 0302 	and.w	r3, r3, #2
 802230c:	2b00      	cmp	r3, #0
 802230e:	d0ee      	beq.n	80222ee <HAL_RCC_OscConfig+0x4f6>
 8022310:	e014      	b.n	802233c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022312:	f7fe fa8f 	bl	8020834 <HAL_GetTick>
 8022316:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8022318:	e00a      	b.n	8022330 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802231a:	f7fe fa8b 	bl	8020834 <HAL_GetTick>
 802231e:	4602      	mov	r2, r0
 8022320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022322:	1ad3      	subs	r3, r2, r3
 8022324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022328:	4293      	cmp	r3, r2
 802232a:	d901      	bls.n	8022330 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 802232c:	2303      	movs	r3, #3
 802232e:	e135      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8022330:	4b62      	ldr	r3, [pc, #392]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022334:	f003 0302 	and.w	r3, r3, #2
 8022338:	2b00      	cmp	r3, #0
 802233a:	d1ee      	bne.n	802231a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022340:	2b00      	cmp	r3, #0
 8022342:	f000 812a 	beq.w	802259a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8022346:	4b5d      	ldr	r3, [pc, #372]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022348:	691b      	ldr	r3, [r3, #16]
 802234a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802234e:	2b18      	cmp	r3, #24
 8022350:	f000 80ba 	beq.w	80224c8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8022354:	687b      	ldr	r3, [r7, #4]
 8022356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022358:	2b02      	cmp	r3, #2
 802235a:	f040 8095 	bne.w	8022488 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 802235e:	4b57      	ldr	r3, [pc, #348]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022360:	681b      	ldr	r3, [r3, #0]
 8022362:	4a56      	ldr	r2, [pc, #344]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022364:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8022368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802236a:	f7fe fa63 	bl	8020834 <HAL_GetTick>
 802236e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8022370:	e008      	b.n	8022384 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022372:	f7fe fa5f 	bl	8020834 <HAL_GetTick>
 8022376:	4602      	mov	r2, r0
 8022378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802237a:	1ad3      	subs	r3, r2, r3
 802237c:	2b02      	cmp	r3, #2
 802237e:	d901      	bls.n	8022384 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8022380:	2303      	movs	r3, #3
 8022382:	e10b      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8022384:	4b4d      	ldr	r3, [pc, #308]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022386:	681b      	ldr	r3, [r3, #0]
 8022388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802238c:	2b00      	cmp	r3, #0
 802238e:	d1f0      	bne.n	8022372 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8022390:	4b4a      	ldr	r3, [pc, #296]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022392:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8022394:	4b4a      	ldr	r3, [pc, #296]	@ (80224c0 <HAL_RCC_OscConfig+0x6c8>)
 8022396:	4013      	ands	r3, r2
 8022398:	687a      	ldr	r2, [r7, #4]
 802239a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 802239c:	687a      	ldr	r2, [r7, #4]
 802239e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80223a0:	0112      	lsls	r2, r2, #4
 80223a2:	430a      	orrs	r2, r1
 80223a4:	4945      	ldr	r1, [pc, #276]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80223a6:	4313      	orrs	r3, r2
 80223a8:	628b      	str	r3, [r1, #40]	@ 0x28
 80223aa:	687b      	ldr	r3, [r7, #4]
 80223ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80223ae:	3b01      	subs	r3, #1
 80223b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80223b8:	3b01      	subs	r3, #1
 80223ba:	025b      	lsls	r3, r3, #9
 80223bc:	b29b      	uxth	r3, r3
 80223be:	431a      	orrs	r2, r3
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80223c4:	3b01      	subs	r3, #1
 80223c6:	041b      	lsls	r3, r3, #16
 80223c8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80223cc:	431a      	orrs	r2, r3
 80223ce:	687b      	ldr	r3, [r7, #4]
 80223d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80223d2:	3b01      	subs	r3, #1
 80223d4:	061b      	lsls	r3, r3, #24
 80223d6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80223da:	4938      	ldr	r1, [pc, #224]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80223dc:	4313      	orrs	r3, r2
 80223de:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80223e0:	4b36      	ldr	r3, [pc, #216]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80223e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80223e4:	4a35      	ldr	r2, [pc, #212]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80223e6:	f023 0301 	bic.w	r3, r3, #1
 80223ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80223ec:	4b33      	ldr	r3, [pc, #204]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80223ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80223f0:	4b34      	ldr	r3, [pc, #208]	@ (80224c4 <HAL_RCC_OscConfig+0x6cc>)
 80223f2:	4013      	ands	r3, r2
 80223f4:	687a      	ldr	r2, [r7, #4]
 80223f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80223f8:	00d2      	lsls	r2, r2, #3
 80223fa:	4930      	ldr	r1, [pc, #192]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80223fc:	4313      	orrs	r3, r2
 80223fe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8022400:	4b2e      	ldr	r3, [pc, #184]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022404:	f023 020c 	bic.w	r2, r3, #12
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802240c:	492b      	ldr	r1, [pc, #172]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 802240e:	4313      	orrs	r3, r2
 8022410:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8022412:	4b2a      	ldr	r3, [pc, #168]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022416:	f023 0202 	bic.w	r2, r3, #2
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802241e:	4927      	ldr	r1, [pc, #156]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022420:	4313      	orrs	r3, r2
 8022422:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8022424:	4b25      	ldr	r3, [pc, #148]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022428:	4a24      	ldr	r2, [pc, #144]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 802242a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802242e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022430:	4b22      	ldr	r3, [pc, #136]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022434:	4a21      	ldr	r2, [pc, #132]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802243a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 802243c:	4b1f      	ldr	r3, [pc, #124]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 802243e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022440:	4a1e      	ldr	r2, [pc, #120]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022442:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8022446:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8022448:	4b1c      	ldr	r3, [pc, #112]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 802244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802244c:	4a1b      	ldr	r2, [pc, #108]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 802244e:	f043 0301 	orr.w	r3, r3, #1
 8022452:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8022454:	4b19      	ldr	r3, [pc, #100]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 8022456:	681b      	ldr	r3, [r3, #0]
 8022458:	4a18      	ldr	r2, [pc, #96]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 802245a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 802245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022460:	f7fe f9e8 	bl	8020834 <HAL_GetTick>
 8022464:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8022466:	e008      	b.n	802247a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022468:	f7fe f9e4 	bl	8020834 <HAL_GetTick>
 802246c:	4602      	mov	r2, r0
 802246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022470:	1ad3      	subs	r3, r2, r3
 8022472:	2b02      	cmp	r3, #2
 8022474:	d901      	bls.n	802247a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8022476:	2303      	movs	r3, #3
 8022478:	e090      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802247a:	4b10      	ldr	r3, [pc, #64]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022482:	2b00      	cmp	r3, #0
 8022484:	d0f0      	beq.n	8022468 <HAL_RCC_OscConfig+0x670>
 8022486:	e088      	b.n	802259a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022488:	4b0c      	ldr	r3, [pc, #48]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 802248a:	681b      	ldr	r3, [r3, #0]
 802248c:	4a0b      	ldr	r2, [pc, #44]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 802248e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8022492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022494:	f7fe f9ce 	bl	8020834 <HAL_GetTick>
 8022498:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 802249a:	e008      	b.n	80224ae <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802249c:	f7fe f9ca 	bl	8020834 <HAL_GetTick>
 80224a0:	4602      	mov	r2, r0
 80224a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80224a4:	1ad3      	subs	r3, r2, r3
 80224a6:	2b02      	cmp	r3, #2
 80224a8:	d901      	bls.n	80224ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80224aa:	2303      	movs	r3, #3
 80224ac:	e076      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80224ae:	4b03      	ldr	r3, [pc, #12]	@ (80224bc <HAL_RCC_OscConfig+0x6c4>)
 80224b0:	681b      	ldr	r3, [r3, #0]
 80224b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d1f0      	bne.n	802249c <HAL_RCC_OscConfig+0x6a4>
 80224ba:	e06e      	b.n	802259a <HAL_RCC_OscConfig+0x7a2>
 80224bc:	58024400 	.word	0x58024400
 80224c0:	fffffc0c 	.word	0xfffffc0c
 80224c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80224c8:	4b36      	ldr	r3, [pc, #216]	@ (80225a4 <HAL_RCC_OscConfig+0x7ac>)
 80224ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80224cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80224ce:	4b35      	ldr	r3, [pc, #212]	@ (80225a4 <HAL_RCC_OscConfig+0x7ac>)
 80224d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80224d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80224d4:	687b      	ldr	r3, [r7, #4]
 80224d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80224d8:	2b01      	cmp	r3, #1
 80224da:	d031      	beq.n	8022540 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80224dc:	693b      	ldr	r3, [r7, #16]
 80224de:	f003 0203 	and.w	r2, r3, #3
 80224e2:	687b      	ldr	r3, [r7, #4]
 80224e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80224e6:	429a      	cmp	r2, r3
 80224e8:	d12a      	bne.n	8022540 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80224ea:	693b      	ldr	r3, [r7, #16]
 80224ec:	091b      	lsrs	r3, r3, #4
 80224ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80224f2:	687b      	ldr	r3, [r7, #4]
 80224f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80224f6:	429a      	cmp	r2, r3
 80224f8:	d122      	bne.n	8022540 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80224fa:	68fb      	ldr	r3, [r7, #12]
 80224fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8022500:	687b      	ldr	r3, [r7, #4]
 8022502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022504:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8022506:	429a      	cmp	r2, r3
 8022508:	d11a      	bne.n	8022540 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 802250a:	68fb      	ldr	r3, [r7, #12]
 802250c:	0a5b      	lsrs	r3, r3, #9
 802250e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022516:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8022518:	429a      	cmp	r2, r3
 802251a:	d111      	bne.n	8022540 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 802251c:	68fb      	ldr	r3, [r7, #12]
 802251e:	0c1b      	lsrs	r3, r3, #16
 8022520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8022524:	687b      	ldr	r3, [r7, #4]
 8022526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022528:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 802252a:	429a      	cmp	r2, r3
 802252c:	d108      	bne.n	8022540 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 802252e:	68fb      	ldr	r3, [r7, #12]
 8022530:	0e1b      	lsrs	r3, r3, #24
 8022532:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802253a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 802253c:	429a      	cmp	r2, r3
 802253e:	d001      	beq.n	8022544 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8022540:	2301      	movs	r3, #1
 8022542:	e02b      	b.n	802259c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8022544:	4b17      	ldr	r3, [pc, #92]	@ (80225a4 <HAL_RCC_OscConfig+0x7ac>)
 8022546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022548:	08db      	lsrs	r3, r3, #3
 802254a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802254e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8022550:	687b      	ldr	r3, [r7, #4]
 8022552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022554:	693a      	ldr	r2, [r7, #16]
 8022556:	429a      	cmp	r2, r3
 8022558:	d01f      	beq.n	802259a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 802255a:	4b12      	ldr	r3, [pc, #72]	@ (80225a4 <HAL_RCC_OscConfig+0x7ac>)
 802255c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802255e:	4a11      	ldr	r2, [pc, #68]	@ (80225a4 <HAL_RCC_OscConfig+0x7ac>)
 8022560:	f023 0301 	bic.w	r3, r3, #1
 8022564:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8022566:	f7fe f965 	bl	8020834 <HAL_GetTick>
 802256a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 802256c:	bf00      	nop
 802256e:	f7fe f961 	bl	8020834 <HAL_GetTick>
 8022572:	4602      	mov	r2, r0
 8022574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022576:	4293      	cmp	r3, r2
 8022578:	d0f9      	beq.n	802256e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 802257a:	4b0a      	ldr	r3, [pc, #40]	@ (80225a4 <HAL_RCC_OscConfig+0x7ac>)
 802257c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 802257e:	4b0a      	ldr	r3, [pc, #40]	@ (80225a8 <HAL_RCC_OscConfig+0x7b0>)
 8022580:	4013      	ands	r3, r2
 8022582:	687a      	ldr	r2, [r7, #4]
 8022584:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8022586:	00d2      	lsls	r2, r2, #3
 8022588:	4906      	ldr	r1, [pc, #24]	@ (80225a4 <HAL_RCC_OscConfig+0x7ac>)
 802258a:	4313      	orrs	r3, r2
 802258c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 802258e:	4b05      	ldr	r3, [pc, #20]	@ (80225a4 <HAL_RCC_OscConfig+0x7ac>)
 8022590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022592:	4a04      	ldr	r2, [pc, #16]	@ (80225a4 <HAL_RCC_OscConfig+0x7ac>)
 8022594:	f043 0301 	orr.w	r3, r3, #1
 8022598:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 802259a:	2300      	movs	r3, #0
}
 802259c:	4618      	mov	r0, r3
 802259e:	3730      	adds	r7, #48	@ 0x30
 80225a0:	46bd      	mov	sp, r7
 80225a2:	bd80      	pop	{r7, pc}
 80225a4:	58024400 	.word	0x58024400
 80225a8:	ffff0007 	.word	0xffff0007

080225ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80225ac:	b580      	push	{r7, lr}
 80225ae:	b086      	sub	sp, #24
 80225b0:	af00      	add	r7, sp, #0
 80225b2:	6078      	str	r0, [r7, #4]
 80225b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80225b6:	687b      	ldr	r3, [r7, #4]
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	d101      	bne.n	80225c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80225bc:	2301      	movs	r3, #1
 80225be:	e19c      	b.n	80228fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80225c0:	4b8a      	ldr	r3, [pc, #552]	@ (80227ec <HAL_RCC_ClockConfig+0x240>)
 80225c2:	681b      	ldr	r3, [r3, #0]
 80225c4:	f003 030f 	and.w	r3, r3, #15
 80225c8:	683a      	ldr	r2, [r7, #0]
 80225ca:	429a      	cmp	r2, r3
 80225cc:	d910      	bls.n	80225f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80225ce:	4b87      	ldr	r3, [pc, #540]	@ (80227ec <HAL_RCC_ClockConfig+0x240>)
 80225d0:	681b      	ldr	r3, [r3, #0]
 80225d2:	f023 020f 	bic.w	r2, r3, #15
 80225d6:	4985      	ldr	r1, [pc, #532]	@ (80227ec <HAL_RCC_ClockConfig+0x240>)
 80225d8:	683b      	ldr	r3, [r7, #0]
 80225da:	4313      	orrs	r3, r2
 80225dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80225de:	4b83      	ldr	r3, [pc, #524]	@ (80227ec <HAL_RCC_ClockConfig+0x240>)
 80225e0:	681b      	ldr	r3, [r3, #0]
 80225e2:	f003 030f 	and.w	r3, r3, #15
 80225e6:	683a      	ldr	r2, [r7, #0]
 80225e8:	429a      	cmp	r2, r3
 80225ea:	d001      	beq.n	80225f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80225ec:	2301      	movs	r3, #1
 80225ee:	e184      	b.n	80228fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80225f0:	687b      	ldr	r3, [r7, #4]
 80225f2:	681b      	ldr	r3, [r3, #0]
 80225f4:	f003 0304 	and.w	r3, r3, #4
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	d010      	beq.n	802261e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	691a      	ldr	r2, [r3, #16]
 8022600:	4b7b      	ldr	r3, [pc, #492]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 8022602:	699b      	ldr	r3, [r3, #24]
 8022604:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8022608:	429a      	cmp	r2, r3
 802260a:	d908      	bls.n	802261e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 802260c:	4b78      	ldr	r3, [pc, #480]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802260e:	699b      	ldr	r3, [r3, #24]
 8022610:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	691b      	ldr	r3, [r3, #16]
 8022618:	4975      	ldr	r1, [pc, #468]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802261a:	4313      	orrs	r3, r2
 802261c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	681b      	ldr	r3, [r3, #0]
 8022622:	f003 0308 	and.w	r3, r3, #8
 8022626:	2b00      	cmp	r3, #0
 8022628:	d010      	beq.n	802264c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 802262a:	687b      	ldr	r3, [r7, #4]
 802262c:	695a      	ldr	r2, [r3, #20]
 802262e:	4b70      	ldr	r3, [pc, #448]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 8022630:	69db      	ldr	r3, [r3, #28]
 8022632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8022636:	429a      	cmp	r2, r3
 8022638:	d908      	bls.n	802264c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 802263a:	4b6d      	ldr	r3, [pc, #436]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802263c:	69db      	ldr	r3, [r3, #28]
 802263e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	695b      	ldr	r3, [r3, #20]
 8022646:	496a      	ldr	r1, [pc, #424]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 8022648:	4313      	orrs	r3, r2
 802264a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	681b      	ldr	r3, [r3, #0]
 8022650:	f003 0310 	and.w	r3, r3, #16
 8022654:	2b00      	cmp	r3, #0
 8022656:	d010      	beq.n	802267a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	699a      	ldr	r2, [r3, #24]
 802265c:	4b64      	ldr	r3, [pc, #400]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802265e:	69db      	ldr	r3, [r3, #28]
 8022660:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8022664:	429a      	cmp	r2, r3
 8022666:	d908      	bls.n	802267a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8022668:	4b61      	ldr	r3, [pc, #388]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802266a:	69db      	ldr	r3, [r3, #28]
 802266c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	699b      	ldr	r3, [r3, #24]
 8022674:	495e      	ldr	r1, [pc, #376]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 8022676:	4313      	orrs	r3, r2
 8022678:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802267a:	687b      	ldr	r3, [r7, #4]
 802267c:	681b      	ldr	r3, [r3, #0]
 802267e:	f003 0320 	and.w	r3, r3, #32
 8022682:	2b00      	cmp	r3, #0
 8022684:	d010      	beq.n	80226a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	69da      	ldr	r2, [r3, #28]
 802268a:	4b59      	ldr	r3, [pc, #356]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802268c:	6a1b      	ldr	r3, [r3, #32]
 802268e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8022692:	429a      	cmp	r2, r3
 8022694:	d908      	bls.n	80226a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8022696:	4b56      	ldr	r3, [pc, #344]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 8022698:	6a1b      	ldr	r3, [r3, #32]
 802269a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	69db      	ldr	r3, [r3, #28]
 80226a2:	4953      	ldr	r1, [pc, #332]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80226a4:	4313      	orrs	r3, r2
 80226a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80226a8:	687b      	ldr	r3, [r7, #4]
 80226aa:	681b      	ldr	r3, [r3, #0]
 80226ac:	f003 0302 	and.w	r3, r3, #2
 80226b0:	2b00      	cmp	r3, #0
 80226b2:	d010      	beq.n	80226d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80226b4:	687b      	ldr	r3, [r7, #4]
 80226b6:	68da      	ldr	r2, [r3, #12]
 80226b8:	4b4d      	ldr	r3, [pc, #308]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80226ba:	699b      	ldr	r3, [r3, #24]
 80226bc:	f003 030f 	and.w	r3, r3, #15
 80226c0:	429a      	cmp	r2, r3
 80226c2:	d908      	bls.n	80226d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80226c4:	4b4a      	ldr	r3, [pc, #296]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80226c6:	699b      	ldr	r3, [r3, #24]
 80226c8:	f023 020f 	bic.w	r2, r3, #15
 80226cc:	687b      	ldr	r3, [r7, #4]
 80226ce:	68db      	ldr	r3, [r3, #12]
 80226d0:	4947      	ldr	r1, [pc, #284]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80226d2:	4313      	orrs	r3, r2
 80226d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	681b      	ldr	r3, [r3, #0]
 80226da:	f003 0301 	and.w	r3, r3, #1
 80226de:	2b00      	cmp	r3, #0
 80226e0:	d055      	beq.n	802278e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80226e2:	4b43      	ldr	r3, [pc, #268]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80226e4:	699b      	ldr	r3, [r3, #24]
 80226e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80226ea:	687b      	ldr	r3, [r7, #4]
 80226ec:	689b      	ldr	r3, [r3, #8]
 80226ee:	4940      	ldr	r1, [pc, #256]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80226f0:	4313      	orrs	r3, r2
 80226f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	685b      	ldr	r3, [r3, #4]
 80226f8:	2b02      	cmp	r3, #2
 80226fa:	d107      	bne.n	802270c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80226fc:	4b3c      	ldr	r3, [pc, #240]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80226fe:	681b      	ldr	r3, [r3, #0]
 8022700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022704:	2b00      	cmp	r3, #0
 8022706:	d121      	bne.n	802274c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8022708:	2301      	movs	r3, #1
 802270a:	e0f6      	b.n	80228fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 802270c:	687b      	ldr	r3, [r7, #4]
 802270e:	685b      	ldr	r3, [r3, #4]
 8022710:	2b03      	cmp	r3, #3
 8022712:	d107      	bne.n	8022724 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8022714:	4b36      	ldr	r3, [pc, #216]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 8022716:	681b      	ldr	r3, [r3, #0]
 8022718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802271c:	2b00      	cmp	r3, #0
 802271e:	d115      	bne.n	802274c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8022720:	2301      	movs	r3, #1
 8022722:	e0ea      	b.n	80228fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8022724:	687b      	ldr	r3, [r7, #4]
 8022726:	685b      	ldr	r3, [r3, #4]
 8022728:	2b01      	cmp	r3, #1
 802272a:	d107      	bne.n	802273c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 802272c:	4b30      	ldr	r3, [pc, #192]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802272e:	681b      	ldr	r3, [r3, #0]
 8022730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022734:	2b00      	cmp	r3, #0
 8022736:	d109      	bne.n	802274c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8022738:	2301      	movs	r3, #1
 802273a:	e0de      	b.n	80228fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802273c:	4b2c      	ldr	r3, [pc, #176]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802273e:	681b      	ldr	r3, [r3, #0]
 8022740:	f003 0304 	and.w	r3, r3, #4
 8022744:	2b00      	cmp	r3, #0
 8022746:	d101      	bne.n	802274c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8022748:	2301      	movs	r3, #1
 802274a:	e0d6      	b.n	80228fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 802274c:	4b28      	ldr	r3, [pc, #160]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802274e:	691b      	ldr	r3, [r3, #16]
 8022750:	f023 0207 	bic.w	r2, r3, #7
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	685b      	ldr	r3, [r3, #4]
 8022758:	4925      	ldr	r1, [pc, #148]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802275a:	4313      	orrs	r3, r2
 802275c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802275e:	f7fe f869 	bl	8020834 <HAL_GetTick>
 8022762:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022764:	e00a      	b.n	802277c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022766:	f7fe f865 	bl	8020834 <HAL_GetTick>
 802276a:	4602      	mov	r2, r0
 802276c:	697b      	ldr	r3, [r7, #20]
 802276e:	1ad3      	subs	r3, r2, r3
 8022770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022774:	4293      	cmp	r3, r2
 8022776:	d901      	bls.n	802277c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8022778:	2303      	movs	r3, #3
 802277a:	e0be      	b.n	80228fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802277c:	4b1c      	ldr	r3, [pc, #112]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 802277e:	691b      	ldr	r3, [r3, #16]
 8022780:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8022784:	687b      	ldr	r3, [r7, #4]
 8022786:	685b      	ldr	r3, [r3, #4]
 8022788:	00db      	lsls	r3, r3, #3
 802278a:	429a      	cmp	r2, r3
 802278c:	d1eb      	bne.n	8022766 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802278e:	687b      	ldr	r3, [r7, #4]
 8022790:	681b      	ldr	r3, [r3, #0]
 8022792:	f003 0302 	and.w	r3, r3, #2
 8022796:	2b00      	cmp	r3, #0
 8022798:	d010      	beq.n	80227bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	68da      	ldr	r2, [r3, #12]
 802279e:	4b14      	ldr	r3, [pc, #80]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80227a0:	699b      	ldr	r3, [r3, #24]
 80227a2:	f003 030f 	and.w	r3, r3, #15
 80227a6:	429a      	cmp	r2, r3
 80227a8:	d208      	bcs.n	80227bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80227aa:	4b11      	ldr	r3, [pc, #68]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80227ac:	699b      	ldr	r3, [r3, #24]
 80227ae:	f023 020f 	bic.w	r2, r3, #15
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	68db      	ldr	r3, [r3, #12]
 80227b6:	490e      	ldr	r1, [pc, #56]	@ (80227f0 <HAL_RCC_ClockConfig+0x244>)
 80227b8:	4313      	orrs	r3, r2
 80227ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80227bc:	4b0b      	ldr	r3, [pc, #44]	@ (80227ec <HAL_RCC_ClockConfig+0x240>)
 80227be:	681b      	ldr	r3, [r3, #0]
 80227c0:	f003 030f 	and.w	r3, r3, #15
 80227c4:	683a      	ldr	r2, [r7, #0]
 80227c6:	429a      	cmp	r2, r3
 80227c8:	d214      	bcs.n	80227f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80227ca:	4b08      	ldr	r3, [pc, #32]	@ (80227ec <HAL_RCC_ClockConfig+0x240>)
 80227cc:	681b      	ldr	r3, [r3, #0]
 80227ce:	f023 020f 	bic.w	r2, r3, #15
 80227d2:	4906      	ldr	r1, [pc, #24]	@ (80227ec <HAL_RCC_ClockConfig+0x240>)
 80227d4:	683b      	ldr	r3, [r7, #0]
 80227d6:	4313      	orrs	r3, r2
 80227d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80227da:	4b04      	ldr	r3, [pc, #16]	@ (80227ec <HAL_RCC_ClockConfig+0x240>)
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	f003 030f 	and.w	r3, r3, #15
 80227e2:	683a      	ldr	r2, [r7, #0]
 80227e4:	429a      	cmp	r2, r3
 80227e6:	d005      	beq.n	80227f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80227e8:	2301      	movs	r3, #1
 80227ea:	e086      	b.n	80228fa <HAL_RCC_ClockConfig+0x34e>
 80227ec:	52002000 	.word	0x52002000
 80227f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	681b      	ldr	r3, [r3, #0]
 80227f8:	f003 0304 	and.w	r3, r3, #4
 80227fc:	2b00      	cmp	r3, #0
 80227fe:	d010      	beq.n	8022822 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	691a      	ldr	r2, [r3, #16]
 8022804:	4b3f      	ldr	r3, [pc, #252]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 8022806:	699b      	ldr	r3, [r3, #24]
 8022808:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 802280c:	429a      	cmp	r2, r3
 802280e:	d208      	bcs.n	8022822 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8022810:	4b3c      	ldr	r3, [pc, #240]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 8022812:	699b      	ldr	r3, [r3, #24]
 8022814:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8022818:	687b      	ldr	r3, [r7, #4]
 802281a:	691b      	ldr	r3, [r3, #16]
 802281c:	4939      	ldr	r1, [pc, #228]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 802281e:	4313      	orrs	r3, r2
 8022820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	681b      	ldr	r3, [r3, #0]
 8022826:	f003 0308 	and.w	r3, r3, #8
 802282a:	2b00      	cmp	r3, #0
 802282c:	d010      	beq.n	8022850 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 802282e:	687b      	ldr	r3, [r7, #4]
 8022830:	695a      	ldr	r2, [r3, #20]
 8022832:	4b34      	ldr	r3, [pc, #208]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 8022834:	69db      	ldr	r3, [r3, #28]
 8022836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 802283a:	429a      	cmp	r2, r3
 802283c:	d208      	bcs.n	8022850 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 802283e:	4b31      	ldr	r3, [pc, #196]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 8022840:	69db      	ldr	r3, [r3, #28]
 8022842:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	695b      	ldr	r3, [r3, #20]
 802284a:	492e      	ldr	r1, [pc, #184]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 802284c:	4313      	orrs	r3, r2
 802284e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	681b      	ldr	r3, [r3, #0]
 8022854:	f003 0310 	and.w	r3, r3, #16
 8022858:	2b00      	cmp	r3, #0
 802285a:	d010      	beq.n	802287e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 802285c:	687b      	ldr	r3, [r7, #4]
 802285e:	699a      	ldr	r2, [r3, #24]
 8022860:	4b28      	ldr	r3, [pc, #160]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 8022862:	69db      	ldr	r3, [r3, #28]
 8022864:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8022868:	429a      	cmp	r2, r3
 802286a:	d208      	bcs.n	802287e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 802286c:	4b25      	ldr	r3, [pc, #148]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 802286e:	69db      	ldr	r3, [r3, #28]
 8022870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8022874:	687b      	ldr	r3, [r7, #4]
 8022876:	699b      	ldr	r3, [r3, #24]
 8022878:	4922      	ldr	r1, [pc, #136]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 802287a:	4313      	orrs	r3, r2
 802287c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 802287e:	687b      	ldr	r3, [r7, #4]
 8022880:	681b      	ldr	r3, [r3, #0]
 8022882:	f003 0320 	and.w	r3, r3, #32
 8022886:	2b00      	cmp	r3, #0
 8022888:	d010      	beq.n	80228ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 802288a:	687b      	ldr	r3, [r7, #4]
 802288c:	69da      	ldr	r2, [r3, #28]
 802288e:	4b1d      	ldr	r3, [pc, #116]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 8022890:	6a1b      	ldr	r3, [r3, #32]
 8022892:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8022896:	429a      	cmp	r2, r3
 8022898:	d208      	bcs.n	80228ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 802289a:	4b1a      	ldr	r3, [pc, #104]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 802289c:	6a1b      	ldr	r3, [r3, #32]
 802289e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80228a2:	687b      	ldr	r3, [r7, #4]
 80228a4:	69db      	ldr	r3, [r3, #28]
 80228a6:	4917      	ldr	r1, [pc, #92]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 80228a8:	4313      	orrs	r3, r2
 80228aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80228ac:	f000 f834 	bl	8022918 <HAL_RCC_GetSysClockFreq>
 80228b0:	4602      	mov	r2, r0
 80228b2:	4b14      	ldr	r3, [pc, #80]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 80228b4:	699b      	ldr	r3, [r3, #24]
 80228b6:	0a1b      	lsrs	r3, r3, #8
 80228b8:	f003 030f 	and.w	r3, r3, #15
 80228bc:	4912      	ldr	r1, [pc, #72]	@ (8022908 <HAL_RCC_ClockConfig+0x35c>)
 80228be:	5ccb      	ldrb	r3, [r1, r3]
 80228c0:	f003 031f 	and.w	r3, r3, #31
 80228c4:	fa22 f303 	lsr.w	r3, r2, r3
 80228c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80228ca:	4b0e      	ldr	r3, [pc, #56]	@ (8022904 <HAL_RCC_ClockConfig+0x358>)
 80228cc:	699b      	ldr	r3, [r3, #24]
 80228ce:	f003 030f 	and.w	r3, r3, #15
 80228d2:	4a0d      	ldr	r2, [pc, #52]	@ (8022908 <HAL_RCC_ClockConfig+0x35c>)
 80228d4:	5cd3      	ldrb	r3, [r2, r3]
 80228d6:	f003 031f 	and.w	r3, r3, #31
 80228da:	693a      	ldr	r2, [r7, #16]
 80228dc:	fa22 f303 	lsr.w	r3, r2, r3
 80228e0:	4a0a      	ldr	r2, [pc, #40]	@ (802290c <HAL_RCC_ClockConfig+0x360>)
 80228e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80228e4:	4a0a      	ldr	r2, [pc, #40]	@ (8022910 <HAL_RCC_ClockConfig+0x364>)
 80228e6:	693b      	ldr	r3, [r7, #16]
 80228e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80228ea:	4b0a      	ldr	r3, [pc, #40]	@ (8022914 <HAL_RCC_ClockConfig+0x368>)
 80228ec:	681b      	ldr	r3, [r3, #0]
 80228ee:	4618      	mov	r0, r3
 80228f0:	f7fd ff56 	bl	80207a0 <HAL_InitTick>
 80228f4:	4603      	mov	r3, r0
 80228f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80228f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80228fa:	4618      	mov	r0, r3
 80228fc:	3718      	adds	r7, #24
 80228fe:	46bd      	mov	sp, r7
 8022900:	bd80      	pop	{r7, pc}
 8022902:	bf00      	nop
 8022904:	58024400 	.word	0x58024400
 8022908:	080275f4 	.word	0x080275f4
 802290c:	2400000c 	.word	0x2400000c
 8022910:	24000008 	.word	0x24000008
 8022914:	24000000 	.word	0x24000000

08022918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022918:	b480      	push	{r7}
 802291a:	b089      	sub	sp, #36	@ 0x24
 802291c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 802291e:	4bb3      	ldr	r3, [pc, #716]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022920:	691b      	ldr	r3, [r3, #16]
 8022922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8022926:	2b18      	cmp	r3, #24
 8022928:	f200 8155 	bhi.w	8022bd6 <HAL_RCC_GetSysClockFreq+0x2be>
 802292c:	a201      	add	r2, pc, #4	@ (adr r2, 8022934 <HAL_RCC_GetSysClockFreq+0x1c>)
 802292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022932:	bf00      	nop
 8022934:	08022999 	.word	0x08022999
 8022938:	08022bd7 	.word	0x08022bd7
 802293c:	08022bd7 	.word	0x08022bd7
 8022940:	08022bd7 	.word	0x08022bd7
 8022944:	08022bd7 	.word	0x08022bd7
 8022948:	08022bd7 	.word	0x08022bd7
 802294c:	08022bd7 	.word	0x08022bd7
 8022950:	08022bd7 	.word	0x08022bd7
 8022954:	080229bf 	.word	0x080229bf
 8022958:	08022bd7 	.word	0x08022bd7
 802295c:	08022bd7 	.word	0x08022bd7
 8022960:	08022bd7 	.word	0x08022bd7
 8022964:	08022bd7 	.word	0x08022bd7
 8022968:	08022bd7 	.word	0x08022bd7
 802296c:	08022bd7 	.word	0x08022bd7
 8022970:	08022bd7 	.word	0x08022bd7
 8022974:	080229c5 	.word	0x080229c5
 8022978:	08022bd7 	.word	0x08022bd7
 802297c:	08022bd7 	.word	0x08022bd7
 8022980:	08022bd7 	.word	0x08022bd7
 8022984:	08022bd7 	.word	0x08022bd7
 8022988:	08022bd7 	.word	0x08022bd7
 802298c:	08022bd7 	.word	0x08022bd7
 8022990:	08022bd7 	.word	0x08022bd7
 8022994:	080229cb 	.word	0x080229cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8022998:	4b94      	ldr	r3, [pc, #592]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	f003 0320 	and.w	r3, r3, #32
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	d009      	beq.n	80229b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80229a4:	4b91      	ldr	r3, [pc, #580]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80229a6:	681b      	ldr	r3, [r3, #0]
 80229a8:	08db      	lsrs	r3, r3, #3
 80229aa:	f003 0303 	and.w	r3, r3, #3
 80229ae:	4a90      	ldr	r2, [pc, #576]	@ (8022bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80229b0:	fa22 f303 	lsr.w	r3, r2, r3
 80229b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80229b6:	e111      	b.n	8022bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80229b8:	4b8d      	ldr	r3, [pc, #564]	@ (8022bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80229ba:	61bb      	str	r3, [r7, #24]
      break;
 80229bc:	e10e      	b.n	8022bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80229be:	4b8d      	ldr	r3, [pc, #564]	@ (8022bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80229c0:	61bb      	str	r3, [r7, #24]
      break;
 80229c2:	e10b      	b.n	8022bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80229c4:	4b8c      	ldr	r3, [pc, #560]	@ (8022bf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80229c6:	61bb      	str	r3, [r7, #24]
      break;
 80229c8:	e108      	b.n	8022bdc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80229ca:	4b88      	ldr	r3, [pc, #544]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80229cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80229ce:	f003 0303 	and.w	r3, r3, #3
 80229d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80229d4:	4b85      	ldr	r3, [pc, #532]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80229d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80229d8:	091b      	lsrs	r3, r3, #4
 80229da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80229de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80229e0:	4b82      	ldr	r3, [pc, #520]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80229e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80229e4:	f003 0301 	and.w	r3, r3, #1
 80229e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80229ea:	4b80      	ldr	r3, [pc, #512]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80229ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80229ee:	08db      	lsrs	r3, r3, #3
 80229f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80229f4:	68fa      	ldr	r2, [r7, #12]
 80229f6:	fb02 f303 	mul.w	r3, r2, r3
 80229fa:	ee07 3a90 	vmov	s15, r3
 80229fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022a02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8022a06:	693b      	ldr	r3, [r7, #16]
 8022a08:	2b00      	cmp	r3, #0
 8022a0a:	f000 80e1 	beq.w	8022bd0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8022a0e:	697b      	ldr	r3, [r7, #20]
 8022a10:	2b02      	cmp	r3, #2
 8022a12:	f000 8083 	beq.w	8022b1c <HAL_RCC_GetSysClockFreq+0x204>
 8022a16:	697b      	ldr	r3, [r7, #20]
 8022a18:	2b02      	cmp	r3, #2
 8022a1a:	f200 80a1 	bhi.w	8022b60 <HAL_RCC_GetSysClockFreq+0x248>
 8022a1e:	697b      	ldr	r3, [r7, #20]
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	d003      	beq.n	8022a2c <HAL_RCC_GetSysClockFreq+0x114>
 8022a24:	697b      	ldr	r3, [r7, #20]
 8022a26:	2b01      	cmp	r3, #1
 8022a28:	d056      	beq.n	8022ad8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8022a2a:	e099      	b.n	8022b60 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8022a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	f003 0320 	and.w	r3, r3, #32
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	d02d      	beq.n	8022a94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8022a38:	4b6c      	ldr	r3, [pc, #432]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022a3a:	681b      	ldr	r3, [r3, #0]
 8022a3c:	08db      	lsrs	r3, r3, #3
 8022a3e:	f003 0303 	and.w	r3, r3, #3
 8022a42:	4a6b      	ldr	r2, [pc, #428]	@ (8022bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8022a44:	fa22 f303 	lsr.w	r3, r2, r3
 8022a48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022a4a:	687b      	ldr	r3, [r7, #4]
 8022a4c:	ee07 3a90 	vmov	s15, r3
 8022a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022a54:	693b      	ldr	r3, [r7, #16]
 8022a56:	ee07 3a90 	vmov	s15, r3
 8022a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022a62:	4b62      	ldr	r3, [pc, #392]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022a6a:	ee07 3a90 	vmov	s15, r3
 8022a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8022a76:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8022bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8022a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8022a92:	e087      	b.n	8022ba4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022a94:	693b      	ldr	r3, [r7, #16]
 8022a96:	ee07 3a90 	vmov	s15, r3
 8022a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022a9e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8022c00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8022aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022aa6:	4b51      	ldr	r3, [pc, #324]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022aae:	ee07 3a90 	vmov	s15, r3
 8022ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8022aba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8022bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8022abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8022ad6:	e065      	b.n	8022ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022ad8:	693b      	ldr	r3, [r7, #16]
 8022ada:	ee07 3a90 	vmov	s15, r3
 8022ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022ae2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8022c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8022ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022aea:	4b40      	ldr	r3, [pc, #256]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022af2:	ee07 3a90 	vmov	s15, r3
 8022af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8022afe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8022bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8022b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8022b1a:	e043      	b.n	8022ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022b1c:	693b      	ldr	r3, [r7, #16]
 8022b1e:	ee07 3a90 	vmov	s15, r3
 8022b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022b26:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8022c08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8022b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022b36:	ee07 3a90 	vmov	s15, r3
 8022b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8022b42:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8022bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8022b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8022b5e:	e021      	b.n	8022ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022b60:	693b      	ldr	r3, [r7, #16]
 8022b62:	ee07 3a90 	vmov	s15, r3
 8022b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022b6a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8022c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8022b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022b72:	4b1e      	ldr	r3, [pc, #120]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022b7a:	ee07 3a90 	vmov	s15, r3
 8022b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8022b86:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8022bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8022b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8022ba2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8022ba4:	4b11      	ldr	r3, [pc, #68]	@ (8022bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022ba8:	0a5b      	lsrs	r3, r3, #9
 8022baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022bae:	3301      	adds	r3, #1
 8022bb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8022bb2:	683b      	ldr	r3, [r7, #0]
 8022bb4:	ee07 3a90 	vmov	s15, r3
 8022bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8022bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8022bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022bc8:	ee17 3a90 	vmov	r3, s15
 8022bcc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8022bce:	e005      	b.n	8022bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8022bd0:	2300      	movs	r3, #0
 8022bd2:	61bb      	str	r3, [r7, #24]
      break;
 8022bd4:	e002      	b.n	8022bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8022bd6:	4b07      	ldr	r3, [pc, #28]	@ (8022bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8022bd8:	61bb      	str	r3, [r7, #24]
      break;
 8022bda:	bf00      	nop
  }

  return sysclockfreq;
 8022bdc:	69bb      	ldr	r3, [r7, #24]
}
 8022bde:	4618      	mov	r0, r3
 8022be0:	3724      	adds	r7, #36	@ 0x24
 8022be2:	46bd      	mov	sp, r7
 8022be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022be8:	4770      	bx	lr
 8022bea:	bf00      	nop
 8022bec:	58024400 	.word	0x58024400
 8022bf0:	03d09000 	.word	0x03d09000
 8022bf4:	003d0900 	.word	0x003d0900
 8022bf8:	017d7840 	.word	0x017d7840
 8022bfc:	46000000 	.word	0x46000000
 8022c00:	4c742400 	.word	0x4c742400
 8022c04:	4a742400 	.word	0x4a742400
 8022c08:	4bbebc20 	.word	0x4bbebc20

08022c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8022c0c:	b580      	push	{r7, lr}
 8022c0e:	b082      	sub	sp, #8
 8022c10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8022c12:	f7ff fe81 	bl	8022918 <HAL_RCC_GetSysClockFreq>
 8022c16:	4602      	mov	r2, r0
 8022c18:	4b10      	ldr	r3, [pc, #64]	@ (8022c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8022c1a:	699b      	ldr	r3, [r3, #24]
 8022c1c:	0a1b      	lsrs	r3, r3, #8
 8022c1e:	f003 030f 	and.w	r3, r3, #15
 8022c22:	490f      	ldr	r1, [pc, #60]	@ (8022c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8022c24:	5ccb      	ldrb	r3, [r1, r3]
 8022c26:	f003 031f 	and.w	r3, r3, #31
 8022c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8022c2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8022c30:	4b0a      	ldr	r3, [pc, #40]	@ (8022c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8022c32:	699b      	ldr	r3, [r3, #24]
 8022c34:	f003 030f 	and.w	r3, r3, #15
 8022c38:	4a09      	ldr	r2, [pc, #36]	@ (8022c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8022c3a:	5cd3      	ldrb	r3, [r2, r3]
 8022c3c:	f003 031f 	and.w	r3, r3, #31
 8022c40:	687a      	ldr	r2, [r7, #4]
 8022c42:	fa22 f303 	lsr.w	r3, r2, r3
 8022c46:	4a07      	ldr	r2, [pc, #28]	@ (8022c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8022c48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8022c4a:	4a07      	ldr	r2, [pc, #28]	@ (8022c68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8022c4c:	687b      	ldr	r3, [r7, #4]
 8022c4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8022c50:	4b04      	ldr	r3, [pc, #16]	@ (8022c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8022c52:	681b      	ldr	r3, [r3, #0]
}
 8022c54:	4618      	mov	r0, r3
 8022c56:	3708      	adds	r7, #8
 8022c58:	46bd      	mov	sp, r7
 8022c5a:	bd80      	pop	{r7, pc}
 8022c5c:	58024400 	.word	0x58024400
 8022c60:	080275f4 	.word	0x080275f4
 8022c64:	2400000c 	.word	0x2400000c
 8022c68:	24000008 	.word	0x24000008

08022c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8022c6c:	b580      	push	{r7, lr}
 8022c6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8022c70:	f7ff ffcc 	bl	8022c0c <HAL_RCC_GetHCLKFreq>
 8022c74:	4602      	mov	r2, r0
 8022c76:	4b06      	ldr	r3, [pc, #24]	@ (8022c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8022c78:	69db      	ldr	r3, [r3, #28]
 8022c7a:	091b      	lsrs	r3, r3, #4
 8022c7c:	f003 0307 	and.w	r3, r3, #7
 8022c80:	4904      	ldr	r1, [pc, #16]	@ (8022c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8022c82:	5ccb      	ldrb	r3, [r1, r3]
 8022c84:	f003 031f 	and.w	r3, r3, #31
 8022c88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8022c8c:	4618      	mov	r0, r3
 8022c8e:	bd80      	pop	{r7, pc}
 8022c90:	58024400 	.word	0x58024400
 8022c94:	080275f4 	.word	0x080275f4

08022c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8022c98:	b580      	push	{r7, lr}
 8022c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8022c9c:	f7ff ffb6 	bl	8022c0c <HAL_RCC_GetHCLKFreq>
 8022ca0:	4602      	mov	r2, r0
 8022ca2:	4b06      	ldr	r3, [pc, #24]	@ (8022cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8022ca4:	69db      	ldr	r3, [r3, #28]
 8022ca6:	0a1b      	lsrs	r3, r3, #8
 8022ca8:	f003 0307 	and.w	r3, r3, #7
 8022cac:	4904      	ldr	r1, [pc, #16]	@ (8022cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8022cae:	5ccb      	ldrb	r3, [r1, r3]
 8022cb0:	f003 031f 	and.w	r3, r3, #31
 8022cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8022cb8:	4618      	mov	r0, r3
 8022cba:	bd80      	pop	{r7, pc}
 8022cbc:	58024400 	.word	0x58024400
 8022cc0:	080275f4 	.word	0x080275f4

08022cc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8022cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022cc8:	b0c6      	sub	sp, #280	@ 0x118
 8022cca:	af00      	add	r7, sp, #0
 8022ccc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8022cd0:	2300      	movs	r3, #0
 8022cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8022cd6:	2300      	movs	r3, #0
 8022cd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8022cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ce4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8022ce8:	2500      	movs	r5, #0
 8022cea:	ea54 0305 	orrs.w	r3, r4, r5
 8022cee:	d049      	beq.n	8022d84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8022cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022cf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022cf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8022cfa:	d02f      	beq.n	8022d5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8022cfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8022d00:	d828      	bhi.n	8022d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8022d02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8022d06:	d01a      	beq.n	8022d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8022d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8022d0c:	d822      	bhi.n	8022d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	d003      	beq.n	8022d1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8022d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8022d16:	d007      	beq.n	8022d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8022d18:	e01c      	b.n	8022d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022d1a:	4bab      	ldr	r3, [pc, #684]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022d1e:	4aaa      	ldr	r2, [pc, #680]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8022d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8022d26:	e01a      	b.n	8022d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8022d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022d2c:	3308      	adds	r3, #8
 8022d2e:	2102      	movs	r1, #2
 8022d30:	4618      	mov	r0, r3
 8022d32:	f001 fc25 	bl	8024580 <RCCEx_PLL2_Config>
 8022d36:	4603      	mov	r3, r0
 8022d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8022d3c:	e00f      	b.n	8022d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8022d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022d42:	3328      	adds	r3, #40	@ 0x28
 8022d44:	2102      	movs	r1, #2
 8022d46:	4618      	mov	r0, r3
 8022d48:	f001 fccc 	bl	80246e4 <RCCEx_PLL3_Config>
 8022d4c:	4603      	mov	r3, r0
 8022d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8022d52:	e004      	b.n	8022d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8022d54:	2301      	movs	r3, #1
 8022d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8022d5a:	e000      	b.n	8022d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8022d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022d62:	2b00      	cmp	r3, #0
 8022d64:	d10a      	bne.n	8022d7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8022d66:	4b98      	ldr	r3, [pc, #608]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022d6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8022d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022d74:	4a94      	ldr	r2, [pc, #592]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022d76:	430b      	orrs	r3, r1
 8022d78:	6513      	str	r3, [r2, #80]	@ 0x50
 8022d7a:	e003      	b.n	8022d84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022d80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8022d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8022d90:	f04f 0900 	mov.w	r9, #0
 8022d94:	ea58 0309 	orrs.w	r3, r8, r9
 8022d98:	d047      	beq.n	8022e2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8022d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022da0:	2b04      	cmp	r3, #4
 8022da2:	d82a      	bhi.n	8022dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8022da4:	a201      	add	r2, pc, #4	@ (adr r2, 8022dac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8022da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022daa:	bf00      	nop
 8022dac:	08022dc1 	.word	0x08022dc1
 8022db0:	08022dcf 	.word	0x08022dcf
 8022db4:	08022de5 	.word	0x08022de5
 8022db8:	08022e03 	.word	0x08022e03
 8022dbc:	08022e03 	.word	0x08022e03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022dc0:	4b81      	ldr	r3, [pc, #516]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022dc4:	4a80      	ldr	r2, [pc, #512]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8022dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022dcc:	e01a      	b.n	8022e04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8022dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022dd2:	3308      	adds	r3, #8
 8022dd4:	2100      	movs	r1, #0
 8022dd6:	4618      	mov	r0, r3
 8022dd8:	f001 fbd2 	bl	8024580 <RCCEx_PLL2_Config>
 8022ddc:	4603      	mov	r3, r0
 8022dde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022de2:	e00f      	b.n	8022e04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8022de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022de8:	3328      	adds	r3, #40	@ 0x28
 8022dea:	2100      	movs	r1, #0
 8022dec:	4618      	mov	r0, r3
 8022dee:	f001 fc79 	bl	80246e4 <RCCEx_PLL3_Config>
 8022df2:	4603      	mov	r3, r0
 8022df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022df8:	e004      	b.n	8022e04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8022dfa:	2301      	movs	r3, #1
 8022dfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8022e00:	e000      	b.n	8022e04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8022e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022e08:	2b00      	cmp	r3, #0
 8022e0a:	d10a      	bne.n	8022e22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8022e0c:	4b6e      	ldr	r3, [pc, #440]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022e10:	f023 0107 	bic.w	r1, r3, #7
 8022e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022e1a:	4a6b      	ldr	r2, [pc, #428]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022e1c:	430b      	orrs	r3, r1
 8022e1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8022e20:	e003      	b.n	8022e2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022e22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022e26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8022e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e32:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8022e36:	f04f 0b00 	mov.w	fp, #0
 8022e3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8022e3e:	d05b      	beq.n	8022ef8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8022e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8022e48:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8022e4c:	d03b      	beq.n	8022ec6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8022e4e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8022e52:	d834      	bhi.n	8022ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8022e54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8022e58:	d037      	beq.n	8022eca <HAL_RCCEx_PeriphCLKConfig+0x206>
 8022e5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8022e5e:	d82e      	bhi.n	8022ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8022e60:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8022e64:	d033      	beq.n	8022ece <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8022e66:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8022e6a:	d828      	bhi.n	8022ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8022e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8022e70:	d01a      	beq.n	8022ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8022e72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8022e76:	d822      	bhi.n	8022ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8022e78:	2b00      	cmp	r3, #0
 8022e7a:	d003      	beq.n	8022e84 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8022e7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8022e80:	d007      	beq.n	8022e92 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8022e82:	e01c      	b.n	8022ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022e84:	4b50      	ldr	r3, [pc, #320]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022e88:	4a4f      	ldr	r2, [pc, #316]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8022e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022e90:	e01e      	b.n	8022ed0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8022e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022e96:	3308      	adds	r3, #8
 8022e98:	2100      	movs	r1, #0
 8022e9a:	4618      	mov	r0, r3
 8022e9c:	f001 fb70 	bl	8024580 <RCCEx_PLL2_Config>
 8022ea0:	4603      	mov	r3, r0
 8022ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8022ea6:	e013      	b.n	8022ed0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8022ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022eac:	3328      	adds	r3, #40	@ 0x28
 8022eae:	2100      	movs	r1, #0
 8022eb0:	4618      	mov	r0, r3
 8022eb2:	f001 fc17 	bl	80246e4 <RCCEx_PLL3_Config>
 8022eb6:	4603      	mov	r3, r0
 8022eb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022ebc:	e008      	b.n	8022ed0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8022ebe:	2301      	movs	r3, #1
 8022ec0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8022ec4:	e004      	b.n	8022ed0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8022ec6:	bf00      	nop
 8022ec8:	e002      	b.n	8022ed0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8022eca:	bf00      	nop
 8022ecc:	e000      	b.n	8022ed0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8022ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022ed4:	2b00      	cmp	r3, #0
 8022ed6:	d10b      	bne.n	8022ef0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8022ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022edc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8022ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022ee4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8022ee8:	4a37      	ldr	r2, [pc, #220]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022eea:	430b      	orrs	r3, r1
 8022eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8022eee:	e003      	b.n	8022ef8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022ef4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8022ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f00:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8022f04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8022f08:	2300      	movs	r3, #0
 8022f0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8022f0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8022f12:	460b      	mov	r3, r1
 8022f14:	4313      	orrs	r3, r2
 8022f16:	d05d      	beq.n	8022fd4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8022f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022f1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8022f20:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8022f24:	d03b      	beq.n	8022f9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8022f26:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8022f2a:	d834      	bhi.n	8022f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8022f2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8022f30:	d037      	beq.n	8022fa2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8022f32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8022f36:	d82e      	bhi.n	8022f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8022f38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8022f3c:	d033      	beq.n	8022fa6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8022f3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8022f42:	d828      	bhi.n	8022f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8022f44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8022f48:	d01a      	beq.n	8022f80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8022f4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8022f4e:	d822      	bhi.n	8022f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8022f50:	2b00      	cmp	r3, #0
 8022f52:	d003      	beq.n	8022f5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8022f54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8022f58:	d007      	beq.n	8022f6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8022f5a:	e01c      	b.n	8022f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022f60:	4a19      	ldr	r2, [pc, #100]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8022f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022f68:	e01e      	b.n	8022fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8022f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022f6e:	3308      	adds	r3, #8
 8022f70:	2100      	movs	r1, #0
 8022f72:	4618      	mov	r0, r3
 8022f74:	f001 fb04 	bl	8024580 <RCCEx_PLL2_Config>
 8022f78:	4603      	mov	r3, r0
 8022f7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8022f7e:	e013      	b.n	8022fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8022f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022f84:	3328      	adds	r3, #40	@ 0x28
 8022f86:	2100      	movs	r1, #0
 8022f88:	4618      	mov	r0, r3
 8022f8a:	f001 fbab 	bl	80246e4 <RCCEx_PLL3_Config>
 8022f8e:	4603      	mov	r3, r0
 8022f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022f94:	e008      	b.n	8022fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8022f96:	2301      	movs	r3, #1
 8022f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8022f9c:	e004      	b.n	8022fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8022f9e:	bf00      	nop
 8022fa0:	e002      	b.n	8022fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8022fa2:	bf00      	nop
 8022fa4:	e000      	b.n	8022fa8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8022fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022fa8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	d10d      	bne.n	8022fcc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8022fb0:	4b05      	ldr	r3, [pc, #20]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022fb4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8022fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022fbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8022fc0:	4a01      	ldr	r2, [pc, #4]	@ (8022fc8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022fc2:	430b      	orrs	r3, r1
 8022fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8022fc6:	e005      	b.n	8022fd4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8022fc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022fd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8022fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fdc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8022fe0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8022fe4:	2300      	movs	r3, #0
 8022fe6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8022fea:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8022fee:	460b      	mov	r3, r1
 8022ff0:	4313      	orrs	r3, r2
 8022ff2:	d03a      	beq.n	802306a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8022ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8022ffa:	2b30      	cmp	r3, #48	@ 0x30
 8022ffc:	d01f      	beq.n	802303e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8022ffe:	2b30      	cmp	r3, #48	@ 0x30
 8023000:	d819      	bhi.n	8023036 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8023002:	2b20      	cmp	r3, #32
 8023004:	d00c      	beq.n	8023020 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8023006:	2b20      	cmp	r3, #32
 8023008:	d815      	bhi.n	8023036 <HAL_RCCEx_PeriphCLKConfig+0x372>
 802300a:	2b00      	cmp	r3, #0
 802300c:	d019      	beq.n	8023042 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 802300e:	2b10      	cmp	r3, #16
 8023010:	d111      	bne.n	8023036 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023012:	4baa      	ldr	r3, [pc, #680]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023016:	4aa9      	ldr	r2, [pc, #676]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802301c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 802301e:	e011      	b.n	8023044 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8023020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023024:	3308      	adds	r3, #8
 8023026:	2102      	movs	r1, #2
 8023028:	4618      	mov	r0, r3
 802302a:	f001 faa9 	bl	8024580 <RCCEx_PLL2_Config>
 802302e:	4603      	mov	r3, r0
 8023030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8023034:	e006      	b.n	8023044 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8023036:	2301      	movs	r3, #1
 8023038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 802303c:	e002      	b.n	8023044 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 802303e:	bf00      	nop
 8023040:	e000      	b.n	8023044 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8023042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023048:	2b00      	cmp	r3, #0
 802304a:	d10a      	bne.n	8023062 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 802304c:	4b9b      	ldr	r3, [pc, #620]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 802304e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023050:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8023054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802305a:	4a98      	ldr	r2, [pc, #608]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 802305c:	430b      	orrs	r3, r1
 802305e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8023060:	e003      	b.n	802306a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023062:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023066:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 802306a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023072:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8023076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 802307a:	2300      	movs	r3, #0
 802307c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8023080:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8023084:	460b      	mov	r3, r1
 8023086:	4313      	orrs	r3, r2
 8023088:	d051      	beq.n	802312e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 802308a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8023090:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023094:	d035      	beq.n	8023102 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8023096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802309a:	d82e      	bhi.n	80230fa <HAL_RCCEx_PeriphCLKConfig+0x436>
 802309c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80230a0:	d031      	beq.n	8023106 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80230a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80230a6:	d828      	bhi.n	80230fa <HAL_RCCEx_PeriphCLKConfig+0x436>
 80230a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80230ac:	d01a      	beq.n	80230e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80230ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80230b2:	d822      	bhi.n	80230fa <HAL_RCCEx_PeriphCLKConfig+0x436>
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d003      	beq.n	80230c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80230b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80230bc:	d007      	beq.n	80230ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80230be:	e01c      	b.n	80230fa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80230c0:	4b7e      	ldr	r3, [pc, #504]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80230c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80230c4:	4a7d      	ldr	r2, [pc, #500]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80230c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80230ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80230cc:	e01c      	b.n	8023108 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80230ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80230d2:	3308      	adds	r3, #8
 80230d4:	2100      	movs	r1, #0
 80230d6:	4618      	mov	r0, r3
 80230d8:	f001 fa52 	bl	8024580 <RCCEx_PLL2_Config>
 80230dc:	4603      	mov	r3, r0
 80230de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80230e2:	e011      	b.n	8023108 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80230e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80230e8:	3328      	adds	r3, #40	@ 0x28
 80230ea:	2100      	movs	r1, #0
 80230ec:	4618      	mov	r0, r3
 80230ee:	f001 faf9 	bl	80246e4 <RCCEx_PLL3_Config>
 80230f2:	4603      	mov	r3, r0
 80230f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80230f8:	e006      	b.n	8023108 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80230fa:	2301      	movs	r3, #1
 80230fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023100:	e002      	b.n	8023108 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8023102:	bf00      	nop
 8023104:	e000      	b.n	8023108 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8023106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023108:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802310c:	2b00      	cmp	r3, #0
 802310e:	d10a      	bne.n	8023126 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8023110:	4b6a      	ldr	r3, [pc, #424]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023114:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8023118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802311c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802311e:	4a67      	ldr	r2, [pc, #412]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023120:	430b      	orrs	r3, r1
 8023122:	6513      	str	r3, [r2, #80]	@ 0x50
 8023124:	e003      	b.n	802312e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023126:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802312a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 802312e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023136:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 802313a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 802313e:	2300      	movs	r3, #0
 8023140:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8023144:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8023148:	460b      	mov	r3, r1
 802314a:	4313      	orrs	r3, r2
 802314c:	d053      	beq.n	80231f6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 802314e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8023154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8023158:	d033      	beq.n	80231c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 802315a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 802315e:	d82c      	bhi.n	80231ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8023160:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8023164:	d02f      	beq.n	80231c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8023166:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 802316a:	d826      	bhi.n	80231ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 802316c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8023170:	d02b      	beq.n	80231ca <HAL_RCCEx_PeriphCLKConfig+0x506>
 8023172:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8023176:	d820      	bhi.n	80231ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8023178:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 802317c:	d012      	beq.n	80231a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 802317e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8023182:	d81a      	bhi.n	80231ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8023184:	2b00      	cmp	r3, #0
 8023186:	d022      	beq.n	80231ce <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8023188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802318c:	d115      	bne.n	80231ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 802318e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023192:	3308      	adds	r3, #8
 8023194:	2101      	movs	r1, #1
 8023196:	4618      	mov	r0, r3
 8023198:	f001 f9f2 	bl	8024580 <RCCEx_PLL2_Config>
 802319c:	4603      	mov	r3, r0
 802319e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80231a2:	e015      	b.n	80231d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80231a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80231a8:	3328      	adds	r3, #40	@ 0x28
 80231aa:	2101      	movs	r1, #1
 80231ac:	4618      	mov	r0, r3
 80231ae:	f001 fa99 	bl	80246e4 <RCCEx_PLL3_Config>
 80231b2:	4603      	mov	r3, r0
 80231b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80231b8:	e00a      	b.n	80231d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80231ba:	2301      	movs	r3, #1
 80231bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80231c0:	e006      	b.n	80231d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80231c2:	bf00      	nop
 80231c4:	e004      	b.n	80231d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80231c6:	bf00      	nop
 80231c8:	e002      	b.n	80231d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80231ca:	bf00      	nop
 80231cc:	e000      	b.n	80231d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80231ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80231d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80231d4:	2b00      	cmp	r3, #0
 80231d6:	d10a      	bne.n	80231ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80231d8:	4b38      	ldr	r3, [pc, #224]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80231da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80231dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80231e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80231e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80231e6:	4a35      	ldr	r2, [pc, #212]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80231e8:	430b      	orrs	r3, r1
 80231ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80231ec:	e003      	b.n	80231f6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80231ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80231f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80231f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80231fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231fe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8023202:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8023206:	2300      	movs	r3, #0
 8023208:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802320c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8023210:	460b      	mov	r3, r1
 8023212:	4313      	orrs	r3, r2
 8023214:	d058      	beq.n	80232c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8023216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802321a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 802321e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8023222:	d033      	beq.n	802328c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8023224:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8023228:	d82c      	bhi.n	8023284 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 802322a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802322e:	d02f      	beq.n	8023290 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8023230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8023234:	d826      	bhi.n	8023284 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8023236:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 802323a:	d02b      	beq.n	8023294 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 802323c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8023240:	d820      	bhi.n	8023284 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8023242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8023246:	d012      	beq.n	802326e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8023248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802324c:	d81a      	bhi.n	8023284 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 802324e:	2b00      	cmp	r3, #0
 8023250:	d022      	beq.n	8023298 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8023252:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023256:	d115      	bne.n	8023284 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8023258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802325c:	3308      	adds	r3, #8
 802325e:	2101      	movs	r1, #1
 8023260:	4618      	mov	r0, r3
 8023262:	f001 f98d 	bl	8024580 <RCCEx_PLL2_Config>
 8023266:	4603      	mov	r3, r0
 8023268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 802326c:	e015      	b.n	802329a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802326e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023272:	3328      	adds	r3, #40	@ 0x28
 8023274:	2101      	movs	r1, #1
 8023276:	4618      	mov	r0, r3
 8023278:	f001 fa34 	bl	80246e4 <RCCEx_PLL3_Config>
 802327c:	4603      	mov	r3, r0
 802327e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8023282:	e00a      	b.n	802329a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8023284:	2301      	movs	r3, #1
 8023286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 802328a:	e006      	b.n	802329a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 802328c:	bf00      	nop
 802328e:	e004      	b.n	802329a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8023290:	bf00      	nop
 8023292:	e002      	b.n	802329a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8023294:	bf00      	nop
 8023296:	e000      	b.n	802329a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8023298:	bf00      	nop
    }

    if (ret == HAL_OK)
 802329a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802329e:	2b00      	cmp	r3, #0
 80232a0:	d10e      	bne.n	80232c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80232a2:	4b06      	ldr	r3, [pc, #24]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80232a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80232a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80232aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80232ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80232b2:	4a02      	ldr	r2, [pc, #8]	@ (80232bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80232b4:	430b      	orrs	r3, r1
 80232b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80232b8:	e006      	b.n	80232c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80232ba:	bf00      	nop
 80232bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80232c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80232c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80232c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80232cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80232d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80232d8:	2300      	movs	r3, #0
 80232da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80232de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80232e2:	460b      	mov	r3, r1
 80232e4:	4313      	orrs	r3, r2
 80232e6:	d037      	beq.n	8023358 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80232e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80232ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80232ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80232f2:	d00e      	beq.n	8023312 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80232f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80232f8:	d816      	bhi.n	8023328 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	d018      	beq.n	8023330 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80232fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023302:	d111      	bne.n	8023328 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023304:	4bc4      	ldr	r3, [pc, #784]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023308:	4ac3      	ldr	r2, [pc, #780]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802330a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802330e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8023310:	e00f      	b.n	8023332 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8023312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023316:	3308      	adds	r3, #8
 8023318:	2101      	movs	r1, #1
 802331a:	4618      	mov	r0, r3
 802331c:	f001 f930 	bl	8024580 <RCCEx_PLL2_Config>
 8023320:	4603      	mov	r3, r0
 8023322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8023326:	e004      	b.n	8023332 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023328:	2301      	movs	r3, #1
 802332a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 802332e:	e000      	b.n	8023332 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8023330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023336:	2b00      	cmp	r3, #0
 8023338:	d10a      	bne.n	8023350 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 802333a:	4bb7      	ldr	r3, [pc, #732]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802333c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802333e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8023342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8023348:	4ab3      	ldr	r2, [pc, #716]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802334a:	430b      	orrs	r3, r1
 802334c:	6513      	str	r3, [r2, #80]	@ 0x50
 802334e:	e003      	b.n	8023358 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8023358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023360:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8023364:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8023368:	2300      	movs	r3, #0
 802336a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 802336e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8023372:	460b      	mov	r3, r1
 8023374:	4313      	orrs	r3, r2
 8023376:	d039      	beq.n	80233ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8023378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802337c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802337e:	2b03      	cmp	r3, #3
 8023380:	d81c      	bhi.n	80233bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8023382:	a201      	add	r2, pc, #4	@ (adr r2, 8023388 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8023384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023388:	080233c5 	.word	0x080233c5
 802338c:	08023399 	.word	0x08023399
 8023390:	080233a7 	.word	0x080233a7
 8023394:	080233c5 	.word	0x080233c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023398:	4b9f      	ldr	r3, [pc, #636]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802339a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802339c:	4a9e      	ldr	r2, [pc, #632]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802339e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80233a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80233a4:	e00f      	b.n	80233c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80233a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80233aa:	3308      	adds	r3, #8
 80233ac:	2102      	movs	r1, #2
 80233ae:	4618      	mov	r0, r3
 80233b0:	f001 f8e6 	bl	8024580 <RCCEx_PLL2_Config>
 80233b4:	4603      	mov	r3, r0
 80233b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80233ba:	e004      	b.n	80233c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80233bc:	2301      	movs	r3, #1
 80233be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80233c2:	e000      	b.n	80233c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80233c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80233c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80233ca:	2b00      	cmp	r3, #0
 80233cc:	d10a      	bne.n	80233e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80233ce:	4b92      	ldr	r3, [pc, #584]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80233d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80233d2:	f023 0103 	bic.w	r1, r3, #3
 80233d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80233da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80233dc:	4a8e      	ldr	r2, [pc, #568]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80233de:	430b      	orrs	r3, r1
 80233e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80233e2:	e003      	b.n	80233ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80233e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80233e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80233ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80233f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80233f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80233fc:	2300      	movs	r3, #0
 80233fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8023402:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8023406:	460b      	mov	r3, r1
 8023408:	4313      	orrs	r3, r2
 802340a:	f000 8099 	beq.w	8023540 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802340e:	4b83      	ldr	r3, [pc, #524]	@ (802361c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8023410:	681b      	ldr	r3, [r3, #0]
 8023412:	4a82      	ldr	r2, [pc, #520]	@ (802361c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8023414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8023418:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802341a:	f7fd fa0b 	bl	8020834 <HAL_GetTick>
 802341e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8023422:	e00b      	b.n	802343c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8023424:	f7fd fa06 	bl	8020834 <HAL_GetTick>
 8023428:	4602      	mov	r2, r0
 802342a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 802342e:	1ad3      	subs	r3, r2, r3
 8023430:	2b64      	cmp	r3, #100	@ 0x64
 8023432:	d903      	bls.n	802343c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8023434:	2303      	movs	r3, #3
 8023436:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 802343a:	e005      	b.n	8023448 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802343c:	4b77      	ldr	r3, [pc, #476]	@ (802361c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 802343e:	681b      	ldr	r3, [r3, #0]
 8023440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023444:	2b00      	cmp	r3, #0
 8023446:	d0ed      	beq.n	8023424 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8023448:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802344c:	2b00      	cmp	r3, #0
 802344e:	d173      	bne.n	8023538 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8023450:	4b71      	ldr	r3, [pc, #452]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023452:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8023454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 802345c:	4053      	eors	r3, r2
 802345e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8023462:	2b00      	cmp	r3, #0
 8023464:	d015      	beq.n	8023492 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8023466:	4b6c      	ldr	r3, [pc, #432]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802346a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802346e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8023472:	4b69      	ldr	r3, [pc, #420]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023476:	4a68      	ldr	r2, [pc, #416]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 802347c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 802347e:	4b66      	ldr	r3, [pc, #408]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023482:	4a65      	ldr	r2, [pc, #404]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8023488:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 802348a:	4a63      	ldr	r2, [pc, #396]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802348c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8023490:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8023492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023496:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 802349a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802349e:	d118      	bne.n	80234d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80234a0:	f7fd f9c8 	bl	8020834 <HAL_GetTick>
 80234a4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80234a8:	e00d      	b.n	80234c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80234aa:	f7fd f9c3 	bl	8020834 <HAL_GetTick>
 80234ae:	4602      	mov	r2, r0
 80234b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80234b4:	1ad2      	subs	r2, r2, r3
 80234b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80234ba:	429a      	cmp	r2, r3
 80234bc:	d903      	bls.n	80234c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80234be:	2303      	movs	r3, #3
 80234c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80234c4:	e005      	b.n	80234d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80234c6:	4b54      	ldr	r3, [pc, #336]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80234c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80234ca:	f003 0302 	and.w	r3, r3, #2
 80234ce:	2b00      	cmp	r3, #0
 80234d0:	d0eb      	beq.n	80234aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80234d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80234d6:	2b00      	cmp	r3, #0
 80234d8:	d129      	bne.n	802352e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80234da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80234de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80234e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80234e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80234ea:	d10e      	bne.n	802350a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80234ec:	4b4a      	ldr	r3, [pc, #296]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80234ee:	691b      	ldr	r3, [r3, #16]
 80234f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80234f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80234f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80234fc:	091a      	lsrs	r2, r3, #4
 80234fe:	4b48      	ldr	r3, [pc, #288]	@ (8023620 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8023500:	4013      	ands	r3, r2
 8023502:	4a45      	ldr	r2, [pc, #276]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023504:	430b      	orrs	r3, r1
 8023506:	6113      	str	r3, [r2, #16]
 8023508:	e005      	b.n	8023516 <HAL_RCCEx_PeriphCLKConfig+0x852>
 802350a:	4b43      	ldr	r3, [pc, #268]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802350c:	691b      	ldr	r3, [r3, #16]
 802350e:	4a42      	ldr	r2, [pc, #264]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023510:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8023514:	6113      	str	r3, [r2, #16]
 8023516:	4b40      	ldr	r3, [pc, #256]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023518:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 802351a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802351e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8023522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023526:	4a3c      	ldr	r2, [pc, #240]	@ (8023618 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023528:	430b      	orrs	r3, r1
 802352a:	6713      	str	r3, [r2, #112]	@ 0x70
 802352c:	e008      	b.n	8023540 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802352e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023532:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8023536:	e003      	b.n	8023540 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802353c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8023540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023548:	f002 0301 	and.w	r3, r2, #1
 802354c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8023550:	2300      	movs	r3, #0
 8023552:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8023556:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 802355a:	460b      	mov	r3, r1
 802355c:	4313      	orrs	r3, r2
 802355e:	f000 808f 	beq.w	8023680 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8023562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023566:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023568:	2b28      	cmp	r3, #40	@ 0x28
 802356a:	d871      	bhi.n	8023650 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 802356c:	a201      	add	r2, pc, #4	@ (adr r2, 8023574 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 802356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023572:	bf00      	nop
 8023574:	08023659 	.word	0x08023659
 8023578:	08023651 	.word	0x08023651
 802357c:	08023651 	.word	0x08023651
 8023580:	08023651 	.word	0x08023651
 8023584:	08023651 	.word	0x08023651
 8023588:	08023651 	.word	0x08023651
 802358c:	08023651 	.word	0x08023651
 8023590:	08023651 	.word	0x08023651
 8023594:	08023625 	.word	0x08023625
 8023598:	08023651 	.word	0x08023651
 802359c:	08023651 	.word	0x08023651
 80235a0:	08023651 	.word	0x08023651
 80235a4:	08023651 	.word	0x08023651
 80235a8:	08023651 	.word	0x08023651
 80235ac:	08023651 	.word	0x08023651
 80235b0:	08023651 	.word	0x08023651
 80235b4:	0802363b 	.word	0x0802363b
 80235b8:	08023651 	.word	0x08023651
 80235bc:	08023651 	.word	0x08023651
 80235c0:	08023651 	.word	0x08023651
 80235c4:	08023651 	.word	0x08023651
 80235c8:	08023651 	.word	0x08023651
 80235cc:	08023651 	.word	0x08023651
 80235d0:	08023651 	.word	0x08023651
 80235d4:	08023659 	.word	0x08023659
 80235d8:	08023651 	.word	0x08023651
 80235dc:	08023651 	.word	0x08023651
 80235e0:	08023651 	.word	0x08023651
 80235e4:	08023651 	.word	0x08023651
 80235e8:	08023651 	.word	0x08023651
 80235ec:	08023651 	.word	0x08023651
 80235f0:	08023651 	.word	0x08023651
 80235f4:	08023659 	.word	0x08023659
 80235f8:	08023651 	.word	0x08023651
 80235fc:	08023651 	.word	0x08023651
 8023600:	08023651 	.word	0x08023651
 8023604:	08023651 	.word	0x08023651
 8023608:	08023651 	.word	0x08023651
 802360c:	08023651 	.word	0x08023651
 8023610:	08023651 	.word	0x08023651
 8023614:	08023659 	.word	0x08023659
 8023618:	58024400 	.word	0x58024400
 802361c:	58024800 	.word	0x58024800
 8023620:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8023624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023628:	3308      	adds	r3, #8
 802362a:	2101      	movs	r1, #1
 802362c:	4618      	mov	r0, r3
 802362e:	f000 ffa7 	bl	8024580 <RCCEx_PLL2_Config>
 8023632:	4603      	mov	r3, r0
 8023634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8023638:	e00f      	b.n	802365a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802363a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802363e:	3328      	adds	r3, #40	@ 0x28
 8023640:	2101      	movs	r1, #1
 8023642:	4618      	mov	r0, r3
 8023644:	f001 f84e 	bl	80246e4 <RCCEx_PLL3_Config>
 8023648:	4603      	mov	r3, r0
 802364a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 802364e:	e004      	b.n	802365a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023650:	2301      	movs	r3, #1
 8023652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023656:	e000      	b.n	802365a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8023658:	bf00      	nop
    }

    if (ret == HAL_OK)
 802365a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802365e:	2b00      	cmp	r3, #0
 8023660:	d10a      	bne.n	8023678 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8023662:	4bbf      	ldr	r3, [pc, #764]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023666:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 802366a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802366e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8023670:	4abb      	ldr	r2, [pc, #748]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023672:	430b      	orrs	r3, r1
 8023674:	6553      	str	r3, [r2, #84]	@ 0x54
 8023676:	e003      	b.n	8023680 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802367c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8023680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023688:	f002 0302 	and.w	r3, r2, #2
 802368c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8023690:	2300      	movs	r3, #0
 8023692:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8023696:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 802369a:	460b      	mov	r3, r1
 802369c:	4313      	orrs	r3, r2
 802369e:	d041      	beq.n	8023724 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80236a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80236a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80236a6:	2b05      	cmp	r3, #5
 80236a8:	d824      	bhi.n	80236f4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80236aa:	a201      	add	r2, pc, #4	@ (adr r2, 80236b0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80236ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80236b0:	080236fd 	.word	0x080236fd
 80236b4:	080236c9 	.word	0x080236c9
 80236b8:	080236df 	.word	0x080236df
 80236bc:	080236fd 	.word	0x080236fd
 80236c0:	080236fd 	.word	0x080236fd
 80236c4:	080236fd 	.word	0x080236fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80236c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80236cc:	3308      	adds	r3, #8
 80236ce:	2101      	movs	r1, #1
 80236d0:	4618      	mov	r0, r3
 80236d2:	f000 ff55 	bl	8024580 <RCCEx_PLL2_Config>
 80236d6:	4603      	mov	r3, r0
 80236d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80236dc:	e00f      	b.n	80236fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80236de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80236e2:	3328      	adds	r3, #40	@ 0x28
 80236e4:	2101      	movs	r1, #1
 80236e6:	4618      	mov	r0, r3
 80236e8:	f000 fffc 	bl	80246e4 <RCCEx_PLL3_Config>
 80236ec:	4603      	mov	r3, r0
 80236ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80236f2:	e004      	b.n	80236fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80236f4:	2301      	movs	r3, #1
 80236f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80236fa:	e000      	b.n	80236fe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80236fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80236fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023702:	2b00      	cmp	r3, #0
 8023704:	d10a      	bne.n	802371c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8023706:	4b96      	ldr	r3, [pc, #600]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802370a:	f023 0107 	bic.w	r1, r3, #7
 802370e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023714:	4a92      	ldr	r2, [pc, #584]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023716:	430b      	orrs	r3, r1
 8023718:	6553      	str	r3, [r2, #84]	@ 0x54
 802371a:	e003      	b.n	8023724 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802371c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023720:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8023724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023728:	e9d3 2300 	ldrd	r2, r3, [r3]
 802372c:	f002 0304 	and.w	r3, r2, #4
 8023730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8023734:	2300      	movs	r3, #0
 8023736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 802373a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 802373e:	460b      	mov	r3, r1
 8023740:	4313      	orrs	r3, r2
 8023742:	d044      	beq.n	80237ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8023744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802374c:	2b05      	cmp	r3, #5
 802374e:	d825      	bhi.n	802379c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8023750:	a201      	add	r2, pc, #4	@ (adr r2, 8023758 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8023752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023756:	bf00      	nop
 8023758:	080237a5 	.word	0x080237a5
 802375c:	08023771 	.word	0x08023771
 8023760:	08023787 	.word	0x08023787
 8023764:	080237a5 	.word	0x080237a5
 8023768:	080237a5 	.word	0x080237a5
 802376c:	080237a5 	.word	0x080237a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8023770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023774:	3308      	adds	r3, #8
 8023776:	2101      	movs	r1, #1
 8023778:	4618      	mov	r0, r3
 802377a:	f000 ff01 	bl	8024580 <RCCEx_PLL2_Config>
 802377e:	4603      	mov	r3, r0
 8023780:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8023784:	e00f      	b.n	80237a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8023786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802378a:	3328      	adds	r3, #40	@ 0x28
 802378c:	2101      	movs	r1, #1
 802378e:	4618      	mov	r0, r3
 8023790:	f000 ffa8 	bl	80246e4 <RCCEx_PLL3_Config>
 8023794:	4603      	mov	r3, r0
 8023796:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 802379a:	e004      	b.n	80237a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802379c:	2301      	movs	r3, #1
 802379e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80237a2:	e000      	b.n	80237a6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80237a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80237a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80237aa:	2b00      	cmp	r3, #0
 80237ac:	d10b      	bne.n	80237c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80237ae:	4b6c      	ldr	r3, [pc, #432]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80237b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80237b2:	f023 0107 	bic.w	r1, r3, #7
 80237b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80237ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80237be:	4a68      	ldr	r2, [pc, #416]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80237c0:	430b      	orrs	r3, r1
 80237c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80237c4:	e003      	b.n	80237ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80237c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80237ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80237ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80237d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237d6:	f002 0320 	and.w	r3, r2, #32
 80237da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80237de:	2300      	movs	r3, #0
 80237e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80237e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80237e8:	460b      	mov	r3, r1
 80237ea:	4313      	orrs	r3, r2
 80237ec:	d055      	beq.n	802389a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80237ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80237f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80237f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80237fa:	d033      	beq.n	8023864 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80237fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8023800:	d82c      	bhi.n	802385c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8023802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8023806:	d02f      	beq.n	8023868 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8023808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802380c:	d826      	bhi.n	802385c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 802380e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8023812:	d02b      	beq.n	802386c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8023814:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8023818:	d820      	bhi.n	802385c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 802381a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802381e:	d012      	beq.n	8023846 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8023820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8023824:	d81a      	bhi.n	802385c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8023826:	2b00      	cmp	r3, #0
 8023828:	d022      	beq.n	8023870 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 802382a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802382e:	d115      	bne.n	802385c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8023830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023834:	3308      	adds	r3, #8
 8023836:	2100      	movs	r1, #0
 8023838:	4618      	mov	r0, r3
 802383a:	f000 fea1 	bl	8024580 <RCCEx_PLL2_Config>
 802383e:	4603      	mov	r3, r0
 8023840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8023844:	e015      	b.n	8023872 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8023846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802384a:	3328      	adds	r3, #40	@ 0x28
 802384c:	2102      	movs	r1, #2
 802384e:	4618      	mov	r0, r3
 8023850:	f000 ff48 	bl	80246e4 <RCCEx_PLL3_Config>
 8023854:	4603      	mov	r3, r0
 8023856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 802385a:	e00a      	b.n	8023872 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802385c:	2301      	movs	r3, #1
 802385e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023862:	e006      	b.n	8023872 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8023864:	bf00      	nop
 8023866:	e004      	b.n	8023872 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8023868:	bf00      	nop
 802386a:	e002      	b.n	8023872 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 802386c:	bf00      	nop
 802386e:	e000      	b.n	8023872 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8023870:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023872:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023876:	2b00      	cmp	r3, #0
 8023878:	d10b      	bne.n	8023892 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 802387a:	4b39      	ldr	r3, [pc, #228]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 802387c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802387e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8023882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 802388a:	4a35      	ldr	r2, [pc, #212]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 802388c:	430b      	orrs	r3, r1
 802388e:	6553      	str	r3, [r2, #84]	@ 0x54
 8023890:	e003      	b.n	802389a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023892:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023896:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 802389a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80238a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80238aa:	2300      	movs	r3, #0
 80238ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80238b0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80238b4:	460b      	mov	r3, r1
 80238b6:	4313      	orrs	r3, r2
 80238b8:	d058      	beq.n	802396c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80238ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80238be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80238c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80238c6:	d033      	beq.n	8023930 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80238c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80238cc:	d82c      	bhi.n	8023928 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80238ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80238d2:	d02f      	beq.n	8023934 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80238d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80238d8:	d826      	bhi.n	8023928 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80238da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80238de:	d02b      	beq.n	8023938 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80238e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80238e4:	d820      	bhi.n	8023928 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80238e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80238ea:	d012      	beq.n	8023912 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80238ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80238f0:	d81a      	bhi.n	8023928 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80238f2:	2b00      	cmp	r3, #0
 80238f4:	d022      	beq.n	802393c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80238f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80238fa:	d115      	bne.n	8023928 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80238fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023900:	3308      	adds	r3, #8
 8023902:	2100      	movs	r1, #0
 8023904:	4618      	mov	r0, r3
 8023906:	f000 fe3b 	bl	8024580 <RCCEx_PLL2_Config>
 802390a:	4603      	mov	r3, r0
 802390c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8023910:	e015      	b.n	802393e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8023912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023916:	3328      	adds	r3, #40	@ 0x28
 8023918:	2102      	movs	r1, #2
 802391a:	4618      	mov	r0, r3
 802391c:	f000 fee2 	bl	80246e4 <RCCEx_PLL3_Config>
 8023920:	4603      	mov	r3, r0
 8023922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8023926:	e00a      	b.n	802393e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023928:	2301      	movs	r3, #1
 802392a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 802392e:	e006      	b.n	802393e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8023930:	bf00      	nop
 8023932:	e004      	b.n	802393e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8023934:	bf00      	nop
 8023936:	e002      	b.n	802393e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8023938:	bf00      	nop
 802393a:	e000      	b.n	802393e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 802393c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802393e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023942:	2b00      	cmp	r3, #0
 8023944:	d10e      	bne.n	8023964 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8023946:	4b06      	ldr	r3, [pc, #24]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802394a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 802394e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023952:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8023956:	4a02      	ldr	r2, [pc, #8]	@ (8023960 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023958:	430b      	orrs	r3, r1
 802395a:	6593      	str	r3, [r2, #88]	@ 0x58
 802395c:	e006      	b.n	802396c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 802395e:	bf00      	nop
 8023960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023968:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 802396c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023974:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8023978:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 802397c:	2300      	movs	r3, #0
 802397e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8023982:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8023986:	460b      	mov	r3, r1
 8023988:	4313      	orrs	r3, r2
 802398a:	d055      	beq.n	8023a38 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 802398c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023990:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8023994:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8023998:	d033      	beq.n	8023a02 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 802399a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 802399e:	d82c      	bhi.n	80239fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80239a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80239a4:	d02f      	beq.n	8023a06 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80239a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80239aa:	d826      	bhi.n	80239fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80239ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80239b0:	d02b      	beq.n	8023a0a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80239b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80239b6:	d820      	bhi.n	80239fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80239b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80239bc:	d012      	beq.n	80239e4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80239be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80239c2:	d81a      	bhi.n	80239fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80239c4:	2b00      	cmp	r3, #0
 80239c6:	d022      	beq.n	8023a0e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80239c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80239cc:	d115      	bne.n	80239fa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80239ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80239d2:	3308      	adds	r3, #8
 80239d4:	2100      	movs	r1, #0
 80239d6:	4618      	mov	r0, r3
 80239d8:	f000 fdd2 	bl	8024580 <RCCEx_PLL2_Config>
 80239dc:	4603      	mov	r3, r0
 80239de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80239e2:	e015      	b.n	8023a10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80239e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80239e8:	3328      	adds	r3, #40	@ 0x28
 80239ea:	2102      	movs	r1, #2
 80239ec:	4618      	mov	r0, r3
 80239ee:	f000 fe79 	bl	80246e4 <RCCEx_PLL3_Config>
 80239f2:	4603      	mov	r3, r0
 80239f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80239f8:	e00a      	b.n	8023a10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80239fa:	2301      	movs	r3, #1
 80239fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023a00:	e006      	b.n	8023a10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8023a02:	bf00      	nop
 8023a04:	e004      	b.n	8023a10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8023a06:	bf00      	nop
 8023a08:	e002      	b.n	8023a10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8023a0a:	bf00      	nop
 8023a0c:	e000      	b.n	8023a10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8023a0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023a14:	2b00      	cmp	r3, #0
 8023a16:	d10b      	bne.n	8023a30 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8023a18:	4ba0      	ldr	r3, [pc, #640]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023a1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8023a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8023a28:	4a9c      	ldr	r2, [pc, #624]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023a2a:	430b      	orrs	r3, r1
 8023a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8023a2e:	e003      	b.n	8023a38 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023a34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8023a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a40:	f002 0308 	and.w	r3, r2, #8
 8023a44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8023a48:	2300      	movs	r3, #0
 8023a4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8023a4e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8023a52:	460b      	mov	r3, r1
 8023a54:	4313      	orrs	r3, r2
 8023a56:	d01e      	beq.n	8023a96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8023a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023a64:	d10c      	bne.n	8023a80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8023a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a6a:	3328      	adds	r3, #40	@ 0x28
 8023a6c:	2102      	movs	r1, #2
 8023a6e:	4618      	mov	r0, r3
 8023a70:	f000 fe38 	bl	80246e4 <RCCEx_PLL3_Config>
 8023a74:	4603      	mov	r3, r0
 8023a76:	2b00      	cmp	r3, #0
 8023a78:	d002      	beq.n	8023a80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8023a7a:	2301      	movs	r3, #1
 8023a7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8023a80:	4b86      	ldr	r3, [pc, #536]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023a84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8023a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023a90:	4a82      	ldr	r2, [pc, #520]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023a92:	430b      	orrs	r3, r1
 8023a94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8023a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a9e:	f002 0310 	and.w	r3, r2, #16
 8023aa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8023aa6:	2300      	movs	r3, #0
 8023aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8023aac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8023ab0:	460b      	mov	r3, r1
 8023ab2:	4313      	orrs	r3, r2
 8023ab4:	d01e      	beq.n	8023af4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8023ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8023abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023ac2:	d10c      	bne.n	8023ade <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8023ac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ac8:	3328      	adds	r3, #40	@ 0x28
 8023aca:	2102      	movs	r1, #2
 8023acc:	4618      	mov	r0, r3
 8023ace:	f000 fe09 	bl	80246e4 <RCCEx_PLL3_Config>
 8023ad2:	4603      	mov	r3, r0
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	d002      	beq.n	8023ade <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8023ad8:	2301      	movs	r3, #1
 8023ada:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8023ade:	4b6f      	ldr	r3, [pc, #444]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023ae2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8023ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8023aee:	4a6b      	ldr	r2, [pc, #428]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023af0:	430b      	orrs	r3, r1
 8023af2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8023af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023afc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8023b00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8023b02:	2300      	movs	r3, #0
 8023b04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8023b06:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8023b0a:	460b      	mov	r3, r1
 8023b0c:	4313      	orrs	r3, r2
 8023b0e:	d03e      	beq.n	8023b8e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8023b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023b14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8023b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8023b1c:	d022      	beq.n	8023b64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8023b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8023b22:	d81b      	bhi.n	8023b5c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8023b24:	2b00      	cmp	r3, #0
 8023b26:	d003      	beq.n	8023b30 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8023b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023b2c:	d00b      	beq.n	8023b46 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8023b2e:	e015      	b.n	8023b5c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8023b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023b34:	3308      	adds	r3, #8
 8023b36:	2100      	movs	r1, #0
 8023b38:	4618      	mov	r0, r3
 8023b3a:	f000 fd21 	bl	8024580 <RCCEx_PLL2_Config>
 8023b3e:	4603      	mov	r3, r0
 8023b40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8023b44:	e00f      	b.n	8023b66 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8023b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023b4a:	3328      	adds	r3, #40	@ 0x28
 8023b4c:	2102      	movs	r1, #2
 8023b4e:	4618      	mov	r0, r3
 8023b50:	f000 fdc8 	bl	80246e4 <RCCEx_PLL3_Config>
 8023b54:	4603      	mov	r3, r0
 8023b56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8023b5a:	e004      	b.n	8023b66 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023b5c:	2301      	movs	r3, #1
 8023b5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023b62:	e000      	b.n	8023b66 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8023b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023b66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023b6a:	2b00      	cmp	r3, #0
 8023b6c:	d10b      	bne.n	8023b86 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8023b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023b72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8023b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023b7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8023b7e:	4a47      	ldr	r2, [pc, #284]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023b80:	430b      	orrs	r3, r1
 8023b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8023b84:	e003      	b.n	8023b8e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023b8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8023b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8023b9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8023b9c:	2300      	movs	r3, #0
 8023b9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8023ba0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8023ba4:	460b      	mov	r3, r1
 8023ba6:	4313      	orrs	r3, r2
 8023ba8:	d03b      	beq.n	8023c22 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8023baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8023bb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8023bb6:	d01f      	beq.n	8023bf8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8023bb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8023bbc:	d818      	bhi.n	8023bf0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8023bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8023bc2:	d003      	beq.n	8023bcc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8023bc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8023bc8:	d007      	beq.n	8023bda <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8023bca:	e011      	b.n	8023bf0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023bcc:	4b33      	ldr	r3, [pc, #204]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023bd0:	4a32      	ldr	r2, [pc, #200]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8023bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8023bd8:	e00f      	b.n	8023bfa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8023bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023bde:	3328      	adds	r3, #40	@ 0x28
 8023be0:	2101      	movs	r1, #1
 8023be2:	4618      	mov	r0, r3
 8023be4:	f000 fd7e 	bl	80246e4 <RCCEx_PLL3_Config>
 8023be8:	4603      	mov	r3, r0
 8023bea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8023bee:	e004      	b.n	8023bfa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023bf0:	2301      	movs	r3, #1
 8023bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023bf6:	e000      	b.n	8023bfa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8023bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	d10b      	bne.n	8023c1a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8023c02:	4b26      	ldr	r3, [pc, #152]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023c06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8023c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8023c12:	4a22      	ldr	r2, [pc, #136]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023c14:	430b      	orrs	r3, r1
 8023c16:	6553      	str	r3, [r2, #84]	@ 0x54
 8023c18:	e003      	b.n	8023c22 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023c1e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8023c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8023c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8023c30:	2300      	movs	r3, #0
 8023c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8023c34:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8023c38:	460b      	mov	r3, r1
 8023c3a:	4313      	orrs	r3, r2
 8023c3c:	d034      	beq.n	8023ca8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8023c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023c44:	2b00      	cmp	r3, #0
 8023c46:	d003      	beq.n	8023c50 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8023c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023c4c:	d007      	beq.n	8023c5e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8023c4e:	e011      	b.n	8023c74 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023c50:	4b12      	ldr	r3, [pc, #72]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023c54:	4a11      	ldr	r2, [pc, #68]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8023c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8023c5c:	e00e      	b.n	8023c7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8023c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c62:	3308      	adds	r3, #8
 8023c64:	2102      	movs	r1, #2
 8023c66:	4618      	mov	r0, r3
 8023c68:	f000 fc8a 	bl	8024580 <RCCEx_PLL2_Config>
 8023c6c:	4603      	mov	r3, r0
 8023c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8023c72:	e003      	b.n	8023c7c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8023c74:	2301      	movs	r3, #1
 8023c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023c7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023c80:	2b00      	cmp	r3, #0
 8023c82:	d10d      	bne.n	8023ca0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8023c84:	4b05      	ldr	r3, [pc, #20]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023c88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8023c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023c92:	4a02      	ldr	r2, [pc, #8]	@ (8023c9c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023c94:	430b      	orrs	r3, r1
 8023c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8023c98:	e006      	b.n	8023ca8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8023c9a:	bf00      	nop
 8023c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023ca4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8023ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cb0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8023cb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8023cb6:	2300      	movs	r3, #0
 8023cb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8023cba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8023cbe:	460b      	mov	r3, r1
 8023cc0:	4313      	orrs	r3, r2
 8023cc2:	d00c      	beq.n	8023cde <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8023cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023cc8:	3328      	adds	r3, #40	@ 0x28
 8023cca:	2102      	movs	r1, #2
 8023ccc:	4618      	mov	r0, r3
 8023cce:	f000 fd09 	bl	80246e4 <RCCEx_PLL3_Config>
 8023cd2:	4603      	mov	r3, r0
 8023cd4:	2b00      	cmp	r3, #0
 8023cd6:	d002      	beq.n	8023cde <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8023cd8:	2301      	movs	r3, #1
 8023cda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8023cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ce6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8023cea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023cec:	2300      	movs	r3, #0
 8023cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8023cf0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8023cf4:	460b      	mov	r3, r1
 8023cf6:	4313      	orrs	r3, r2
 8023cf8:	d036      	beq.n	8023d68 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8023cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023cfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8023d00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8023d04:	d018      	beq.n	8023d38 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8023d06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8023d0a:	d811      	bhi.n	8023d30 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8023d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023d10:	d014      	beq.n	8023d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8023d12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023d16:	d80b      	bhi.n	8023d30 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8023d18:	2b00      	cmp	r3, #0
 8023d1a:	d011      	beq.n	8023d40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8023d1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023d20:	d106      	bne.n	8023d30 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023d22:	4bb7      	ldr	r3, [pc, #732]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023d26:	4ab6      	ldr	r2, [pc, #728]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8023d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8023d2e:	e008      	b.n	8023d42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023d30:	2301      	movs	r3, #1
 8023d32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023d36:	e004      	b.n	8023d42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8023d38:	bf00      	nop
 8023d3a:	e002      	b.n	8023d42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8023d3c:	bf00      	nop
 8023d3e:	e000      	b.n	8023d42 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8023d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023d42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023d46:	2b00      	cmp	r3, #0
 8023d48:	d10a      	bne.n	8023d60 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8023d4a:	4bad      	ldr	r3, [pc, #692]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023d4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8023d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023d56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8023d58:	4aa9      	ldr	r2, [pc, #676]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023d5a:	430b      	orrs	r3, r1
 8023d5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8023d5e:	e003      	b.n	8023d68 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023d60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023d64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8023d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d70:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8023d74:	653b      	str	r3, [r7, #80]	@ 0x50
 8023d76:	2300      	movs	r3, #0
 8023d78:	657b      	str	r3, [r7, #84]	@ 0x54
 8023d7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8023d7e:	460b      	mov	r3, r1
 8023d80:	4313      	orrs	r3, r2
 8023d82:	d009      	beq.n	8023d98 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8023d84:	4b9e      	ldr	r3, [pc, #632]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023d88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8023d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023d92:	4a9b      	ldr	r2, [pc, #620]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023d94:	430b      	orrs	r3, r1
 8023d96:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8023d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023da0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8023da4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023da6:	2300      	movs	r3, #0
 8023da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8023daa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8023dae:	460b      	mov	r3, r1
 8023db0:	4313      	orrs	r3, r2
 8023db2:	d009      	beq.n	8023dc8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8023db4:	4b92      	ldr	r3, [pc, #584]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023db8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8023dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023dc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023dc2:	4a8f      	ldr	r2, [pc, #572]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023dc4:	430b      	orrs	r3, r1
 8023dc6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8023dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dd0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8023dd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8023dd6:	2300      	movs	r3, #0
 8023dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8023dda:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8023dde:	460b      	mov	r3, r1
 8023de0:	4313      	orrs	r3, r2
 8023de2:	d00e      	beq.n	8023e02 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8023de4:	4b86      	ldr	r3, [pc, #536]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023de6:	691b      	ldr	r3, [r3, #16]
 8023de8:	4a85      	ldr	r2, [pc, #532]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023dea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8023dee:	6113      	str	r3, [r2, #16]
 8023df0:	4b83      	ldr	r3, [pc, #524]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023df2:	6919      	ldr	r1, [r3, #16]
 8023df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023df8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8023dfc:	4a80      	ldr	r2, [pc, #512]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023dfe:	430b      	orrs	r3, r1
 8023e00:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8023e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e0a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8023e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8023e10:	2300      	movs	r3, #0
 8023e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8023e14:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8023e18:	460b      	mov	r3, r1
 8023e1a:	4313      	orrs	r3, r2
 8023e1c:	d009      	beq.n	8023e32 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8023e1e:	4b78      	ldr	r3, [pc, #480]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023e22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8023e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023e2c:	4a74      	ldr	r2, [pc, #464]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023e2e:	430b      	orrs	r3, r1
 8023e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8023e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e3a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8023e3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8023e40:	2300      	movs	r3, #0
 8023e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8023e44:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8023e48:	460b      	mov	r3, r1
 8023e4a:	4313      	orrs	r3, r2
 8023e4c:	d00a      	beq.n	8023e64 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8023e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023e52:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8023e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023e5e:	4a68      	ldr	r2, [pc, #416]	@ (8024000 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023e60:	430b      	orrs	r3, r1
 8023e62:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8023e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e6c:	2100      	movs	r1, #0
 8023e6e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8023e70:	f003 0301 	and.w	r3, r3, #1
 8023e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023e76:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8023e7a:	460b      	mov	r3, r1
 8023e7c:	4313      	orrs	r3, r2
 8023e7e:	d011      	beq.n	8023ea4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8023e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e84:	3308      	adds	r3, #8
 8023e86:	2100      	movs	r1, #0
 8023e88:	4618      	mov	r0, r3
 8023e8a:	f000 fb79 	bl	8024580 <RCCEx_PLL2_Config>
 8023e8e:	4603      	mov	r3, r0
 8023e90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8023e94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023e98:	2b00      	cmp	r3, #0
 8023e9a:	d003      	beq.n	8023ea4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023ea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8023ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eac:	2100      	movs	r1, #0
 8023eae:	6239      	str	r1, [r7, #32]
 8023eb0:	f003 0302 	and.w	r3, r3, #2
 8023eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8023eb6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8023eba:	460b      	mov	r3, r1
 8023ebc:	4313      	orrs	r3, r2
 8023ebe:	d011      	beq.n	8023ee4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8023ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ec4:	3308      	adds	r3, #8
 8023ec6:	2101      	movs	r1, #1
 8023ec8:	4618      	mov	r0, r3
 8023eca:	f000 fb59 	bl	8024580 <RCCEx_PLL2_Config>
 8023ece:	4603      	mov	r3, r0
 8023ed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8023ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023ed8:	2b00      	cmp	r3, #0
 8023eda:	d003      	beq.n	8023ee4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023edc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023ee0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8023ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eec:	2100      	movs	r1, #0
 8023eee:	61b9      	str	r1, [r7, #24]
 8023ef0:	f003 0304 	and.w	r3, r3, #4
 8023ef4:	61fb      	str	r3, [r7, #28]
 8023ef6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8023efa:	460b      	mov	r3, r1
 8023efc:	4313      	orrs	r3, r2
 8023efe:	d011      	beq.n	8023f24 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8023f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f04:	3308      	adds	r3, #8
 8023f06:	2102      	movs	r1, #2
 8023f08:	4618      	mov	r0, r3
 8023f0a:	f000 fb39 	bl	8024580 <RCCEx_PLL2_Config>
 8023f0e:	4603      	mov	r3, r0
 8023f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8023f14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023f18:	2b00      	cmp	r3, #0
 8023f1a:	d003      	beq.n	8023f24 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023f1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023f20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8023f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f2c:	2100      	movs	r1, #0
 8023f2e:	6139      	str	r1, [r7, #16]
 8023f30:	f003 0308 	and.w	r3, r3, #8
 8023f34:	617b      	str	r3, [r7, #20]
 8023f36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8023f3a:	460b      	mov	r3, r1
 8023f3c:	4313      	orrs	r3, r2
 8023f3e:	d011      	beq.n	8023f64 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8023f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f44:	3328      	adds	r3, #40	@ 0x28
 8023f46:	2100      	movs	r1, #0
 8023f48:	4618      	mov	r0, r3
 8023f4a:	f000 fbcb 	bl	80246e4 <RCCEx_PLL3_Config>
 8023f4e:	4603      	mov	r3, r0
 8023f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8023f54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023f58:	2b00      	cmp	r3, #0
 8023f5a:	d003      	beq.n	8023f64 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023f5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023f60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8023f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f6c:	2100      	movs	r1, #0
 8023f6e:	60b9      	str	r1, [r7, #8]
 8023f70:	f003 0310 	and.w	r3, r3, #16
 8023f74:	60fb      	str	r3, [r7, #12]
 8023f76:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8023f7a:	460b      	mov	r3, r1
 8023f7c:	4313      	orrs	r3, r2
 8023f7e:	d011      	beq.n	8023fa4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8023f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f84:	3328      	adds	r3, #40	@ 0x28
 8023f86:	2101      	movs	r1, #1
 8023f88:	4618      	mov	r0, r3
 8023f8a:	f000 fbab 	bl	80246e4 <RCCEx_PLL3_Config>
 8023f8e:	4603      	mov	r3, r0
 8023f90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8023f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023f98:	2b00      	cmp	r3, #0
 8023f9a:	d003      	beq.n	8023fa4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023fa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8023fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fac:	2100      	movs	r1, #0
 8023fae:	6039      	str	r1, [r7, #0]
 8023fb0:	f003 0320 	and.w	r3, r3, #32
 8023fb4:	607b      	str	r3, [r7, #4]
 8023fb6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8023fba:	460b      	mov	r3, r1
 8023fbc:	4313      	orrs	r3, r2
 8023fbe:	d011      	beq.n	8023fe4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8023fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023fc4:	3328      	adds	r3, #40	@ 0x28
 8023fc6:	2102      	movs	r1, #2
 8023fc8:	4618      	mov	r0, r3
 8023fca:	f000 fb8b 	bl	80246e4 <RCCEx_PLL3_Config>
 8023fce:	4603      	mov	r3, r0
 8023fd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8023fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023fd8:	2b00      	cmp	r3, #0
 8023fda:	d003      	beq.n	8023fe4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023fdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023fe0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8023fe4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8023fe8:	2b00      	cmp	r3, #0
 8023fea:	d101      	bne.n	8023ff0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8023fec:	2300      	movs	r3, #0
 8023fee:	e000      	b.n	8023ff2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8023ff0:	2301      	movs	r3, #1
}
 8023ff2:	4618      	mov	r0, r3
 8023ff4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8023ff8:	46bd      	mov	sp, r7
 8023ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023ffe:	bf00      	nop
 8024000:	58024400 	.word	0x58024400

08024004 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8024004:	b580      	push	{r7, lr}
 8024006:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8024008:	f7fe fe00 	bl	8022c0c <HAL_RCC_GetHCLKFreq>
 802400c:	4602      	mov	r2, r0
 802400e:	4b06      	ldr	r3, [pc, #24]	@ (8024028 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8024010:	6a1b      	ldr	r3, [r3, #32]
 8024012:	091b      	lsrs	r3, r3, #4
 8024014:	f003 0307 	and.w	r3, r3, #7
 8024018:	4904      	ldr	r1, [pc, #16]	@ (802402c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 802401a:	5ccb      	ldrb	r3, [r1, r3]
 802401c:	f003 031f 	and.w	r3, r3, #31
 8024020:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8024024:	4618      	mov	r0, r3
 8024026:	bd80      	pop	{r7, pc}
 8024028:	58024400 	.word	0x58024400
 802402c:	080275f4 	.word	0x080275f4

08024030 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8024030:	b480      	push	{r7}
 8024032:	b089      	sub	sp, #36	@ 0x24
 8024034:	af00      	add	r7, sp, #0
 8024036:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8024038:	4ba1      	ldr	r3, [pc, #644]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802403c:	f003 0303 	and.w	r3, r3, #3
 8024040:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8024042:	4b9f      	ldr	r3, [pc, #636]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024046:	0b1b      	lsrs	r3, r3, #12
 8024048:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802404c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 802404e:	4b9c      	ldr	r3, [pc, #624]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024052:	091b      	lsrs	r3, r3, #4
 8024054:	f003 0301 	and.w	r3, r3, #1
 8024058:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 802405a:	4b99      	ldr	r3, [pc, #612]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802405e:	08db      	lsrs	r3, r3, #3
 8024060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024064:	693a      	ldr	r2, [r7, #16]
 8024066:	fb02 f303 	mul.w	r3, r2, r3
 802406a:	ee07 3a90 	vmov	s15, r3
 802406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024072:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8024076:	697b      	ldr	r3, [r7, #20]
 8024078:	2b00      	cmp	r3, #0
 802407a:	f000 8111 	beq.w	80242a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 802407e:	69bb      	ldr	r3, [r7, #24]
 8024080:	2b02      	cmp	r3, #2
 8024082:	f000 8083 	beq.w	802418c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8024086:	69bb      	ldr	r3, [r7, #24]
 8024088:	2b02      	cmp	r3, #2
 802408a:	f200 80a1 	bhi.w	80241d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 802408e:	69bb      	ldr	r3, [r7, #24]
 8024090:	2b00      	cmp	r3, #0
 8024092:	d003      	beq.n	802409c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8024094:	69bb      	ldr	r3, [r7, #24]
 8024096:	2b01      	cmp	r3, #1
 8024098:	d056      	beq.n	8024148 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 802409a:	e099      	b.n	80241d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802409c:	4b88      	ldr	r3, [pc, #544]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802409e:	681b      	ldr	r3, [r3, #0]
 80240a0:	f003 0320 	and.w	r3, r3, #32
 80240a4:	2b00      	cmp	r3, #0
 80240a6:	d02d      	beq.n	8024104 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80240a8:	4b85      	ldr	r3, [pc, #532]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80240aa:	681b      	ldr	r3, [r3, #0]
 80240ac:	08db      	lsrs	r3, r3, #3
 80240ae:	f003 0303 	and.w	r3, r3, #3
 80240b2:	4a84      	ldr	r2, [pc, #528]	@ (80242c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80240b4:	fa22 f303 	lsr.w	r3, r2, r3
 80240b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80240ba:	68bb      	ldr	r3, [r7, #8]
 80240bc:	ee07 3a90 	vmov	s15, r3
 80240c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80240c4:	697b      	ldr	r3, [r7, #20]
 80240c6:	ee07 3a90 	vmov	s15, r3
 80240ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80240ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80240d2:	4b7b      	ldr	r3, [pc, #492]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80240d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80240d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80240da:	ee07 3a90 	vmov	s15, r3
 80240de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80240e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80240e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80242c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80240ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80240ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80240f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80240f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80240fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80240fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8024102:	e087      	b.n	8024214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8024104:	697b      	ldr	r3, [r7, #20]
 8024106:	ee07 3a90 	vmov	s15, r3
 802410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802410e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80242cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8024112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8024116:	4b6a      	ldr	r3, [pc, #424]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802411e:	ee07 3a90 	vmov	s15, r3
 8024122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8024126:	ed97 6a03 	vldr	s12, [r7, #12]
 802412a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80242c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 802412e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8024132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802413a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8024146:	e065      	b.n	8024214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8024148:	697b      	ldr	r3, [r7, #20]
 802414a:	ee07 3a90 	vmov	s15, r3
 802414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024152:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80242d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8024156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802415a:	4b59      	ldr	r3, [pc, #356]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 802415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024162:	ee07 3a90 	vmov	s15, r3
 8024166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802416a:	ed97 6a03 	vldr	s12, [r7, #12]
 802416e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80242c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8024172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8024176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802417a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802417e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 802418a:	e043      	b.n	8024214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 802418c:	697b      	ldr	r3, [r7, #20]
 802418e:	ee07 3a90 	vmov	s15, r3
 8024192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024196:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80242d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 802419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802419e:	4b48      	ldr	r3, [pc, #288]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80241a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80241a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80241a6:	ee07 3a90 	vmov	s15, r3
 80241aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80241ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80241b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80242c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80241b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80241ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80241be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80241c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80241c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80241ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80241ce:	e021      	b.n	8024214 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80241d0:	697b      	ldr	r3, [r7, #20]
 80241d2:	ee07 3a90 	vmov	s15, r3
 80241d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80241da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80242d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80241de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80241e2:	4b37      	ldr	r3, [pc, #220]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80241e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80241e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80241ea:	ee07 3a90 	vmov	s15, r3
 80241ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80241f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80241f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80242c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80241fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80241fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802420a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802420e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8024212:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8024214:	4b2a      	ldr	r3, [pc, #168]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024218:	0a5b      	lsrs	r3, r3, #9
 802421a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802421e:	ee07 3a90 	vmov	s15, r3
 8024222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024226:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802422a:	ee37 7a87 	vadd.f32	s14, s15, s14
 802422e:	edd7 6a07 	vldr	s13, [r7, #28]
 8024232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802423a:	ee17 2a90 	vmov	r2, s15
 802423e:	687b      	ldr	r3, [r7, #4]
 8024240:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8024242:	4b1f      	ldr	r3, [pc, #124]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024246:	0c1b      	lsrs	r3, r3, #16
 8024248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802424c:	ee07 3a90 	vmov	s15, r3
 8024250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024254:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024258:	ee37 7a87 	vadd.f32	s14, s15, s14
 802425c:	edd7 6a07 	vldr	s13, [r7, #28]
 8024260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024268:	ee17 2a90 	vmov	r2, s15
 802426c:	687b      	ldr	r3, [r7, #4]
 802426e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8024270:	4b13      	ldr	r3, [pc, #76]	@ (80242c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8024272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024274:	0e1b      	lsrs	r3, r3, #24
 8024276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802427a:	ee07 3a90 	vmov	s15, r3
 802427e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024282:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024286:	ee37 7a87 	vadd.f32	s14, s15, s14
 802428a:	edd7 6a07 	vldr	s13, [r7, #28]
 802428e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8024292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024296:	ee17 2a90 	vmov	r2, s15
 802429a:	687b      	ldr	r3, [r7, #4]
 802429c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 802429e:	e008      	b.n	80242b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80242a0:	687b      	ldr	r3, [r7, #4]
 80242a2:	2200      	movs	r2, #0
 80242a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80242a6:	687b      	ldr	r3, [r7, #4]
 80242a8:	2200      	movs	r2, #0
 80242aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80242ac:	687b      	ldr	r3, [r7, #4]
 80242ae:	2200      	movs	r2, #0
 80242b0:	609a      	str	r2, [r3, #8]
}
 80242b2:	bf00      	nop
 80242b4:	3724      	adds	r7, #36	@ 0x24
 80242b6:	46bd      	mov	sp, r7
 80242b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242bc:	4770      	bx	lr
 80242be:	bf00      	nop
 80242c0:	58024400 	.word	0x58024400
 80242c4:	03d09000 	.word	0x03d09000
 80242c8:	46000000 	.word	0x46000000
 80242cc:	4c742400 	.word	0x4c742400
 80242d0:	4a742400 	.word	0x4a742400
 80242d4:	4bbebc20 	.word	0x4bbebc20

080242d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80242d8:	b480      	push	{r7}
 80242da:	b089      	sub	sp, #36	@ 0x24
 80242dc:	af00      	add	r7, sp, #0
 80242de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80242e0:	4ba1      	ldr	r3, [pc, #644]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80242e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80242e4:	f003 0303 	and.w	r3, r3, #3
 80242e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80242ea:	4b9f      	ldr	r3, [pc, #636]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80242ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80242ee:	0d1b      	lsrs	r3, r3, #20
 80242f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80242f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80242f6:	4b9c      	ldr	r3, [pc, #624]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80242f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80242fa:	0a1b      	lsrs	r3, r3, #8
 80242fc:	f003 0301 	and.w	r3, r3, #1
 8024300:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8024302:	4b99      	ldr	r3, [pc, #612]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8024304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8024306:	08db      	lsrs	r3, r3, #3
 8024308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802430c:	693a      	ldr	r2, [r7, #16]
 802430e:	fb02 f303 	mul.w	r3, r2, r3
 8024312:	ee07 3a90 	vmov	s15, r3
 8024316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802431a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 802431e:	697b      	ldr	r3, [r7, #20]
 8024320:	2b00      	cmp	r3, #0
 8024322:	f000 8111 	beq.w	8024548 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8024326:	69bb      	ldr	r3, [r7, #24]
 8024328:	2b02      	cmp	r3, #2
 802432a:	f000 8083 	beq.w	8024434 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 802432e:	69bb      	ldr	r3, [r7, #24]
 8024330:	2b02      	cmp	r3, #2
 8024332:	f200 80a1 	bhi.w	8024478 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8024336:	69bb      	ldr	r3, [r7, #24]
 8024338:	2b00      	cmp	r3, #0
 802433a:	d003      	beq.n	8024344 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 802433c:	69bb      	ldr	r3, [r7, #24]
 802433e:	2b01      	cmp	r3, #1
 8024340:	d056      	beq.n	80243f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8024342:	e099      	b.n	8024478 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8024344:	4b88      	ldr	r3, [pc, #544]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8024346:	681b      	ldr	r3, [r3, #0]
 8024348:	f003 0320 	and.w	r3, r3, #32
 802434c:	2b00      	cmp	r3, #0
 802434e:	d02d      	beq.n	80243ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8024350:	4b85      	ldr	r3, [pc, #532]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8024352:	681b      	ldr	r3, [r3, #0]
 8024354:	08db      	lsrs	r3, r3, #3
 8024356:	f003 0303 	and.w	r3, r3, #3
 802435a:	4a84      	ldr	r2, [pc, #528]	@ (802456c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 802435c:	fa22 f303 	lsr.w	r3, r2, r3
 8024360:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8024362:	68bb      	ldr	r3, [r7, #8]
 8024364:	ee07 3a90 	vmov	s15, r3
 8024368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802436c:	697b      	ldr	r3, [r7, #20]
 802436e:	ee07 3a90 	vmov	s15, r3
 8024372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802437a:	4b7b      	ldr	r3, [pc, #492]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802437e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024382:	ee07 3a90 	vmov	s15, r3
 8024386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802438a:	ed97 6a03 	vldr	s12, [r7, #12]
 802438e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8024570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8024392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8024396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 802439a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802439e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80243a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80243a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80243aa:	e087      	b.n	80244bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80243ac:	697b      	ldr	r3, [r7, #20]
 80243ae:	ee07 3a90 	vmov	s15, r3
 80243b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80243b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8024574 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80243ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80243be:	4b6a      	ldr	r3, [pc, #424]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80243c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80243c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80243c6:	ee07 3a90 	vmov	s15, r3
 80243ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80243ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80243d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8024570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80243d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80243da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80243de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80243e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80243e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80243ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80243ee:	e065      	b.n	80244bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80243f0:	697b      	ldr	r3, [r7, #20]
 80243f2:	ee07 3a90 	vmov	s15, r3
 80243f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80243fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8024578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80243fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8024402:	4b59      	ldr	r3, [pc, #356]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8024404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802440a:	ee07 3a90 	vmov	s15, r3
 802440e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8024412:	ed97 6a03 	vldr	s12, [r7, #12]
 8024416:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8024570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802441a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 802441e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8024426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802442e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8024432:	e043      	b.n	80244bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8024434:	697b      	ldr	r3, [r7, #20]
 8024436:	ee07 3a90 	vmov	s15, r3
 802443a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802443e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 802457c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8024442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8024446:	4b48      	ldr	r3, [pc, #288]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8024448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802444a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802444e:	ee07 3a90 	vmov	s15, r3
 8024452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8024456:	ed97 6a03 	vldr	s12, [r7, #12]
 802445a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8024570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 802445e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8024462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8024466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802446a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 802446e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8024476:	e021      	b.n	80244bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8024478:	697b      	ldr	r3, [r7, #20]
 802447a:	ee07 3a90 	vmov	s15, r3
 802447e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8024482:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8024578 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8024486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 802448a:	4b37      	ldr	r3, [pc, #220]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802448c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8024492:	ee07 3a90 	vmov	s15, r3
 8024496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 802449a:	ed97 6a03 	vldr	s12, [r7, #12]
 802449e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8024570 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80244a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80244a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80244aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80244ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80244b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80244b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80244ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80244bc:	4b2a      	ldr	r3, [pc, #168]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80244be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80244c0:	0a5b      	lsrs	r3, r3, #9
 80244c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80244c6:	ee07 3a90 	vmov	s15, r3
 80244ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80244ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80244d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80244d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80244da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80244de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80244e2:	ee17 2a90 	vmov	r2, s15
 80244e6:	687b      	ldr	r3, [r7, #4]
 80244e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80244ea:	4b1f      	ldr	r3, [pc, #124]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80244ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80244ee:	0c1b      	lsrs	r3, r3, #16
 80244f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80244f4:	ee07 3a90 	vmov	s15, r3
 80244f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80244fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024500:	ee37 7a87 	vadd.f32	s14, s15, s14
 8024504:	edd7 6a07 	vldr	s13, [r7, #28]
 8024508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802450c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8024510:	ee17 2a90 	vmov	r2, s15
 8024514:	687b      	ldr	r3, [r7, #4]
 8024516:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8024518:	4b13      	ldr	r3, [pc, #76]	@ (8024568 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 802451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802451c:	0e1b      	lsrs	r3, r3, #24
 802451e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8024522:	ee07 3a90 	vmov	s15, r3
 8024526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802452a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802452e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8024532:	edd7 6a07 	vldr	s13, [r7, #28]
 8024536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802453a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802453e:	ee17 2a90 	vmov	r2, s15
 8024542:	687b      	ldr	r3, [r7, #4]
 8024544:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8024546:	e008      	b.n	802455a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	2200      	movs	r2, #0
 802454c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 802454e:	687b      	ldr	r3, [r7, #4]
 8024550:	2200      	movs	r2, #0
 8024552:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8024554:	687b      	ldr	r3, [r7, #4]
 8024556:	2200      	movs	r2, #0
 8024558:	609a      	str	r2, [r3, #8]
}
 802455a:	bf00      	nop
 802455c:	3724      	adds	r7, #36	@ 0x24
 802455e:	46bd      	mov	sp, r7
 8024560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024564:	4770      	bx	lr
 8024566:	bf00      	nop
 8024568:	58024400 	.word	0x58024400
 802456c:	03d09000 	.word	0x03d09000
 8024570:	46000000 	.word	0x46000000
 8024574:	4c742400 	.word	0x4c742400
 8024578:	4a742400 	.word	0x4a742400
 802457c:	4bbebc20 	.word	0x4bbebc20

08024580 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8024580:	b580      	push	{r7, lr}
 8024582:	b084      	sub	sp, #16
 8024584:	af00      	add	r7, sp, #0
 8024586:	6078      	str	r0, [r7, #4]
 8024588:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802458a:	2300      	movs	r3, #0
 802458c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 802458e:	4b53      	ldr	r3, [pc, #332]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024592:	f003 0303 	and.w	r3, r3, #3
 8024596:	2b03      	cmp	r3, #3
 8024598:	d101      	bne.n	802459e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802459a:	2301      	movs	r3, #1
 802459c:	e099      	b.n	80246d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 802459e:	4b4f      	ldr	r3, [pc, #316]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 80245a0:	681b      	ldr	r3, [r3, #0]
 80245a2:	4a4e      	ldr	r2, [pc, #312]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 80245a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80245a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80245aa:	f7fc f943 	bl	8020834 <HAL_GetTick>
 80245ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80245b0:	e008      	b.n	80245c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80245b2:	f7fc f93f 	bl	8020834 <HAL_GetTick>
 80245b6:	4602      	mov	r2, r0
 80245b8:	68bb      	ldr	r3, [r7, #8]
 80245ba:	1ad3      	subs	r3, r2, r3
 80245bc:	2b02      	cmp	r3, #2
 80245be:	d901      	bls.n	80245c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80245c0:	2303      	movs	r3, #3
 80245c2:	e086      	b.n	80246d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80245c4:	4b45      	ldr	r3, [pc, #276]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 80245c6:	681b      	ldr	r3, [r3, #0]
 80245c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80245cc:	2b00      	cmp	r3, #0
 80245ce:	d1f0      	bne.n	80245b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80245d0:	4b42      	ldr	r3, [pc, #264]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 80245d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80245d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80245d8:	687b      	ldr	r3, [r7, #4]
 80245da:	681b      	ldr	r3, [r3, #0]
 80245dc:	031b      	lsls	r3, r3, #12
 80245de:	493f      	ldr	r1, [pc, #252]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 80245e0:	4313      	orrs	r3, r2
 80245e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80245e4:	687b      	ldr	r3, [r7, #4]
 80245e6:	685b      	ldr	r3, [r3, #4]
 80245e8:	3b01      	subs	r3, #1
 80245ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80245ee:	687b      	ldr	r3, [r7, #4]
 80245f0:	689b      	ldr	r3, [r3, #8]
 80245f2:	3b01      	subs	r3, #1
 80245f4:	025b      	lsls	r3, r3, #9
 80245f6:	b29b      	uxth	r3, r3
 80245f8:	431a      	orrs	r2, r3
 80245fa:	687b      	ldr	r3, [r7, #4]
 80245fc:	68db      	ldr	r3, [r3, #12]
 80245fe:	3b01      	subs	r3, #1
 8024600:	041b      	lsls	r3, r3, #16
 8024602:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8024606:	431a      	orrs	r2, r3
 8024608:	687b      	ldr	r3, [r7, #4]
 802460a:	691b      	ldr	r3, [r3, #16]
 802460c:	3b01      	subs	r3, #1
 802460e:	061b      	lsls	r3, r3, #24
 8024610:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8024614:	4931      	ldr	r1, [pc, #196]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024616:	4313      	orrs	r3, r2
 8024618:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 802461a:	4b30      	ldr	r3, [pc, #192]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 802461c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802461e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8024622:	687b      	ldr	r3, [r7, #4]
 8024624:	695b      	ldr	r3, [r3, #20]
 8024626:	492d      	ldr	r1, [pc, #180]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024628:	4313      	orrs	r3, r2
 802462a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 802462c:	4b2b      	ldr	r3, [pc, #172]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 802462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024630:	f023 0220 	bic.w	r2, r3, #32
 8024634:	687b      	ldr	r3, [r7, #4]
 8024636:	699b      	ldr	r3, [r3, #24]
 8024638:	4928      	ldr	r1, [pc, #160]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 802463a:	4313      	orrs	r3, r2
 802463c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 802463e:	4b27      	ldr	r3, [pc, #156]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024642:	4a26      	ldr	r2, [pc, #152]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024644:	f023 0310 	bic.w	r3, r3, #16
 8024648:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 802464a:	4b24      	ldr	r3, [pc, #144]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 802464c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802464e:	4b24      	ldr	r3, [pc, #144]	@ (80246e0 <RCCEx_PLL2_Config+0x160>)
 8024650:	4013      	ands	r3, r2
 8024652:	687a      	ldr	r2, [r7, #4]
 8024654:	69d2      	ldr	r2, [r2, #28]
 8024656:	00d2      	lsls	r2, r2, #3
 8024658:	4920      	ldr	r1, [pc, #128]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 802465a:	4313      	orrs	r3, r2
 802465c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 802465e:	4b1f      	ldr	r3, [pc, #124]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024662:	4a1e      	ldr	r2, [pc, #120]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024664:	f043 0310 	orr.w	r3, r3, #16
 8024668:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802466a:	683b      	ldr	r3, [r7, #0]
 802466c:	2b00      	cmp	r3, #0
 802466e:	d106      	bne.n	802467e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8024670:	4b1a      	ldr	r3, [pc, #104]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024674:	4a19      	ldr	r2, [pc, #100]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024676:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 802467a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 802467c:	e00f      	b.n	802469e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 802467e:	683b      	ldr	r3, [r7, #0]
 8024680:	2b01      	cmp	r3, #1
 8024682:	d106      	bne.n	8024692 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8024684:	4b15      	ldr	r3, [pc, #84]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024688:	4a14      	ldr	r2, [pc, #80]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 802468a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802468e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8024690:	e005      	b.n	802469e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8024692:	4b12      	ldr	r3, [pc, #72]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024696:	4a11      	ldr	r2, [pc, #68]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 8024698:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 802469c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 802469e:	4b0f      	ldr	r3, [pc, #60]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 80246a0:	681b      	ldr	r3, [r3, #0]
 80246a2:	4a0e      	ldr	r2, [pc, #56]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 80246a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80246a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80246aa:	f7fc f8c3 	bl	8020834 <HAL_GetTick>
 80246ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80246b0:	e008      	b.n	80246c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80246b2:	f7fc f8bf 	bl	8020834 <HAL_GetTick>
 80246b6:	4602      	mov	r2, r0
 80246b8:	68bb      	ldr	r3, [r7, #8]
 80246ba:	1ad3      	subs	r3, r2, r3
 80246bc:	2b02      	cmp	r3, #2
 80246be:	d901      	bls.n	80246c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80246c0:	2303      	movs	r3, #3
 80246c2:	e006      	b.n	80246d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80246c4:	4b05      	ldr	r3, [pc, #20]	@ (80246dc <RCCEx_PLL2_Config+0x15c>)
 80246c6:	681b      	ldr	r3, [r3, #0]
 80246c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80246cc:	2b00      	cmp	r3, #0
 80246ce:	d0f0      	beq.n	80246b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80246d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80246d2:	4618      	mov	r0, r3
 80246d4:	3710      	adds	r7, #16
 80246d6:	46bd      	mov	sp, r7
 80246d8:	bd80      	pop	{r7, pc}
 80246da:	bf00      	nop
 80246dc:	58024400 	.word	0x58024400
 80246e0:	ffff0007 	.word	0xffff0007

080246e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80246e4:	b580      	push	{r7, lr}
 80246e6:	b084      	sub	sp, #16
 80246e8:	af00      	add	r7, sp, #0
 80246ea:	6078      	str	r0, [r7, #4]
 80246ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80246ee:	2300      	movs	r3, #0
 80246f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80246f2:	4b53      	ldr	r3, [pc, #332]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80246f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80246f6:	f003 0303 	and.w	r3, r3, #3
 80246fa:	2b03      	cmp	r3, #3
 80246fc:	d101      	bne.n	8024702 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80246fe:	2301      	movs	r3, #1
 8024700:	e099      	b.n	8024836 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8024702:	4b4f      	ldr	r3, [pc, #316]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 8024704:	681b      	ldr	r3, [r3, #0]
 8024706:	4a4e      	ldr	r2, [pc, #312]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 8024708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802470c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802470e:	f7fc f891 	bl	8020834 <HAL_GetTick>
 8024712:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8024714:	e008      	b.n	8024728 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8024716:	f7fc f88d 	bl	8020834 <HAL_GetTick>
 802471a:	4602      	mov	r2, r0
 802471c:	68bb      	ldr	r3, [r7, #8]
 802471e:	1ad3      	subs	r3, r2, r3
 8024720:	2b02      	cmp	r3, #2
 8024722:	d901      	bls.n	8024728 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8024724:	2303      	movs	r3, #3
 8024726:	e086      	b.n	8024836 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8024728:	4b45      	ldr	r3, [pc, #276]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 802472a:	681b      	ldr	r3, [r3, #0]
 802472c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8024730:	2b00      	cmp	r3, #0
 8024732:	d1f0      	bne.n	8024716 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8024734:	4b42      	ldr	r3, [pc, #264]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 8024736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024738:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	681b      	ldr	r3, [r3, #0]
 8024740:	051b      	lsls	r3, r3, #20
 8024742:	493f      	ldr	r1, [pc, #252]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 8024744:	4313      	orrs	r3, r2
 8024746:	628b      	str	r3, [r1, #40]	@ 0x28
 8024748:	687b      	ldr	r3, [r7, #4]
 802474a:	685b      	ldr	r3, [r3, #4]
 802474c:	3b01      	subs	r3, #1
 802474e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8024752:	687b      	ldr	r3, [r7, #4]
 8024754:	689b      	ldr	r3, [r3, #8]
 8024756:	3b01      	subs	r3, #1
 8024758:	025b      	lsls	r3, r3, #9
 802475a:	b29b      	uxth	r3, r3
 802475c:	431a      	orrs	r2, r3
 802475e:	687b      	ldr	r3, [r7, #4]
 8024760:	68db      	ldr	r3, [r3, #12]
 8024762:	3b01      	subs	r3, #1
 8024764:	041b      	lsls	r3, r3, #16
 8024766:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 802476a:	431a      	orrs	r2, r3
 802476c:	687b      	ldr	r3, [r7, #4]
 802476e:	691b      	ldr	r3, [r3, #16]
 8024770:	3b01      	subs	r3, #1
 8024772:	061b      	lsls	r3, r3, #24
 8024774:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8024778:	4931      	ldr	r1, [pc, #196]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 802477a:	4313      	orrs	r3, r2
 802477c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 802477e:	4b30      	ldr	r3, [pc, #192]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 8024780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024782:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8024786:	687b      	ldr	r3, [r7, #4]
 8024788:	695b      	ldr	r3, [r3, #20]
 802478a:	492d      	ldr	r1, [pc, #180]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 802478c:	4313      	orrs	r3, r2
 802478e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8024790:	4b2b      	ldr	r3, [pc, #172]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 8024792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024794:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8024798:	687b      	ldr	r3, [r7, #4]
 802479a:	699b      	ldr	r3, [r3, #24]
 802479c:	4928      	ldr	r1, [pc, #160]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 802479e:	4313      	orrs	r3, r2
 80247a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80247a2:	4b27      	ldr	r3, [pc, #156]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80247a6:	4a26      	ldr	r2, [pc, #152]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80247ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80247ae:	4b24      	ldr	r3, [pc, #144]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80247b2:	4b24      	ldr	r3, [pc, #144]	@ (8024844 <RCCEx_PLL3_Config+0x160>)
 80247b4:	4013      	ands	r3, r2
 80247b6:	687a      	ldr	r2, [r7, #4]
 80247b8:	69d2      	ldr	r2, [r2, #28]
 80247ba:	00d2      	lsls	r2, r2, #3
 80247bc:	4920      	ldr	r1, [pc, #128]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247be:	4313      	orrs	r3, r2
 80247c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80247c2:	4b1f      	ldr	r3, [pc, #124]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80247c6:	4a1e      	ldr	r2, [pc, #120]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80247cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80247ce:	683b      	ldr	r3, [r7, #0]
 80247d0:	2b00      	cmp	r3, #0
 80247d2:	d106      	bne.n	80247e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80247d4:	4b1a      	ldr	r3, [pc, #104]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80247d8:	4a19      	ldr	r2, [pc, #100]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80247de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80247e0:	e00f      	b.n	8024802 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80247e2:	683b      	ldr	r3, [r7, #0]
 80247e4:	2b01      	cmp	r3, #1
 80247e6:	d106      	bne.n	80247f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80247e8:	4b15      	ldr	r3, [pc, #84]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80247ec:	4a14      	ldr	r2, [pc, #80]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80247f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80247f4:	e005      	b.n	8024802 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80247f6:	4b12      	ldr	r3, [pc, #72]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80247fa:	4a11      	ldr	r2, [pc, #68]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 80247fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8024800:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8024802:	4b0f      	ldr	r3, [pc, #60]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 8024804:	681b      	ldr	r3, [r3, #0]
 8024806:	4a0e      	ldr	r2, [pc, #56]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 8024808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 802480c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802480e:	f7fc f811 	bl	8020834 <HAL_GetTick>
 8024812:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8024814:	e008      	b.n	8024828 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8024816:	f7fc f80d 	bl	8020834 <HAL_GetTick>
 802481a:	4602      	mov	r2, r0
 802481c:	68bb      	ldr	r3, [r7, #8]
 802481e:	1ad3      	subs	r3, r2, r3
 8024820:	2b02      	cmp	r3, #2
 8024822:	d901      	bls.n	8024828 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8024824:	2303      	movs	r3, #3
 8024826:	e006      	b.n	8024836 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8024828:	4b05      	ldr	r3, [pc, #20]	@ (8024840 <RCCEx_PLL3_Config+0x15c>)
 802482a:	681b      	ldr	r3, [r3, #0]
 802482c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8024830:	2b00      	cmp	r3, #0
 8024832:	d0f0      	beq.n	8024816 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8024834:	7bfb      	ldrb	r3, [r7, #15]
}
 8024836:	4618      	mov	r0, r3
 8024838:	3710      	adds	r7, #16
 802483a:	46bd      	mov	sp, r7
 802483c:	bd80      	pop	{r7, pc}
 802483e:	bf00      	nop
 8024840:	58024400 	.word	0x58024400
 8024844:	ffff0007 	.word	0xffff0007

08024848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8024848:	b580      	push	{r7, lr}
 802484a:	b082      	sub	sp, #8
 802484c:	af00      	add	r7, sp, #0
 802484e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8024850:	687b      	ldr	r3, [r7, #4]
 8024852:	2b00      	cmp	r3, #0
 8024854:	d101      	bne.n	802485a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8024856:	2301      	movs	r3, #1
 8024858:	e042      	b.n	80248e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802485a:	687b      	ldr	r3, [r7, #4]
 802485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8024860:	2b00      	cmp	r3, #0
 8024862:	d106      	bne.n	8024872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	2200      	movs	r2, #0
 8024868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802486c:	6878      	ldr	r0, [r7, #4]
 802486e:	f002 fa91 	bl	8026d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8024872:	687b      	ldr	r3, [r7, #4]
 8024874:	2224      	movs	r2, #36	@ 0x24
 8024876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	681b      	ldr	r3, [r3, #0]
 802487e:	681a      	ldr	r2, [r3, #0]
 8024880:	687b      	ldr	r3, [r7, #4]
 8024882:	681b      	ldr	r3, [r3, #0]
 8024884:	f022 0201 	bic.w	r2, r2, #1
 8024888:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802488e:	2b00      	cmp	r3, #0
 8024890:	d002      	beq.n	8024898 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8024892:	6878      	ldr	r0, [r7, #4]
 8024894:	f001 fbe0 	bl	8026058 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8024898:	6878      	ldr	r0, [r7, #4]
 802489a:	f000 fd71 	bl	8025380 <UART_SetConfig>
 802489e:	4603      	mov	r3, r0
 80248a0:	2b01      	cmp	r3, #1
 80248a2:	d101      	bne.n	80248a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80248a4:	2301      	movs	r3, #1
 80248a6:	e01b      	b.n	80248e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80248a8:	687b      	ldr	r3, [r7, #4]
 80248aa:	681b      	ldr	r3, [r3, #0]
 80248ac:	685a      	ldr	r2, [r3, #4]
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	681b      	ldr	r3, [r3, #0]
 80248b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80248b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80248b8:	687b      	ldr	r3, [r7, #4]
 80248ba:	681b      	ldr	r3, [r3, #0]
 80248bc:	689a      	ldr	r2, [r3, #8]
 80248be:	687b      	ldr	r3, [r7, #4]
 80248c0:	681b      	ldr	r3, [r3, #0]
 80248c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80248c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80248c8:	687b      	ldr	r3, [r7, #4]
 80248ca:	681b      	ldr	r3, [r3, #0]
 80248cc:	681a      	ldr	r2, [r3, #0]
 80248ce:	687b      	ldr	r3, [r7, #4]
 80248d0:	681b      	ldr	r3, [r3, #0]
 80248d2:	f042 0201 	orr.w	r2, r2, #1
 80248d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80248d8:	6878      	ldr	r0, [r7, #4]
 80248da:	f001 fc5f 	bl	802619c <UART_CheckIdleState>
 80248de:	4603      	mov	r3, r0
}
 80248e0:	4618      	mov	r0, r3
 80248e2:	3708      	adds	r7, #8
 80248e4:	46bd      	mov	sp, r7
 80248e6:	bd80      	pop	{r7, pc}

080248e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80248e8:	b580      	push	{r7, lr}
 80248ea:	b08a      	sub	sp, #40	@ 0x28
 80248ec:	af02      	add	r7, sp, #8
 80248ee:	60f8      	str	r0, [r7, #12]
 80248f0:	60b9      	str	r1, [r7, #8]
 80248f2:	603b      	str	r3, [r7, #0]
 80248f4:	4613      	mov	r3, r2
 80248f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80248f8:	68fb      	ldr	r3, [r7, #12]
 80248fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80248fe:	2b20      	cmp	r3, #32
 8024900:	d17b      	bne.n	80249fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8024902:	68bb      	ldr	r3, [r7, #8]
 8024904:	2b00      	cmp	r3, #0
 8024906:	d002      	beq.n	802490e <HAL_UART_Transmit+0x26>
 8024908:	88fb      	ldrh	r3, [r7, #6]
 802490a:	2b00      	cmp	r3, #0
 802490c:	d101      	bne.n	8024912 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 802490e:	2301      	movs	r3, #1
 8024910:	e074      	b.n	80249fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024912:	68fb      	ldr	r3, [r7, #12]
 8024914:	2200      	movs	r2, #0
 8024916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802491a:	68fb      	ldr	r3, [r7, #12]
 802491c:	2221      	movs	r2, #33	@ 0x21
 802491e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8024922:	f7fb ff87 	bl	8020834 <HAL_GetTick>
 8024926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8024928:	68fb      	ldr	r3, [r7, #12]
 802492a:	88fa      	ldrh	r2, [r7, #6]
 802492c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8024930:	68fb      	ldr	r3, [r7, #12]
 8024932:	88fa      	ldrh	r2, [r7, #6]
 8024934:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8024938:	68fb      	ldr	r3, [r7, #12]
 802493a:	689b      	ldr	r3, [r3, #8]
 802493c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8024940:	d108      	bne.n	8024954 <HAL_UART_Transmit+0x6c>
 8024942:	68fb      	ldr	r3, [r7, #12]
 8024944:	691b      	ldr	r3, [r3, #16]
 8024946:	2b00      	cmp	r3, #0
 8024948:	d104      	bne.n	8024954 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 802494a:	2300      	movs	r3, #0
 802494c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 802494e:	68bb      	ldr	r3, [r7, #8]
 8024950:	61bb      	str	r3, [r7, #24]
 8024952:	e003      	b.n	802495c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8024954:	68bb      	ldr	r3, [r7, #8]
 8024956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8024958:	2300      	movs	r3, #0
 802495a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 802495c:	e030      	b.n	80249c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802495e:	683b      	ldr	r3, [r7, #0]
 8024960:	9300      	str	r3, [sp, #0]
 8024962:	697b      	ldr	r3, [r7, #20]
 8024964:	2200      	movs	r2, #0
 8024966:	2180      	movs	r1, #128	@ 0x80
 8024968:	68f8      	ldr	r0, [r7, #12]
 802496a:	f001 fcc1 	bl	80262f0 <UART_WaitOnFlagUntilTimeout>
 802496e:	4603      	mov	r3, r0
 8024970:	2b00      	cmp	r3, #0
 8024972:	d005      	beq.n	8024980 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8024974:	68fb      	ldr	r3, [r7, #12]
 8024976:	2220      	movs	r2, #32
 8024978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 802497c:	2303      	movs	r3, #3
 802497e:	e03d      	b.n	80249fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8024980:	69fb      	ldr	r3, [r7, #28]
 8024982:	2b00      	cmp	r3, #0
 8024984:	d10b      	bne.n	802499e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8024986:	69bb      	ldr	r3, [r7, #24]
 8024988:	881b      	ldrh	r3, [r3, #0]
 802498a:	461a      	mov	r2, r3
 802498c:	68fb      	ldr	r3, [r7, #12]
 802498e:	681b      	ldr	r3, [r3, #0]
 8024990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8024994:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8024996:	69bb      	ldr	r3, [r7, #24]
 8024998:	3302      	adds	r3, #2
 802499a:	61bb      	str	r3, [r7, #24]
 802499c:	e007      	b.n	80249ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 802499e:	69fb      	ldr	r3, [r7, #28]
 80249a0:	781a      	ldrb	r2, [r3, #0]
 80249a2:	68fb      	ldr	r3, [r7, #12]
 80249a4:	681b      	ldr	r3, [r3, #0]
 80249a6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80249a8:	69fb      	ldr	r3, [r7, #28]
 80249aa:	3301      	adds	r3, #1
 80249ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80249ae:	68fb      	ldr	r3, [r7, #12]
 80249b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80249b4:	b29b      	uxth	r3, r3
 80249b6:	3b01      	subs	r3, #1
 80249b8:	b29a      	uxth	r2, r3
 80249ba:	68fb      	ldr	r3, [r7, #12]
 80249bc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80249c0:	68fb      	ldr	r3, [r7, #12]
 80249c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80249c6:	b29b      	uxth	r3, r3
 80249c8:	2b00      	cmp	r3, #0
 80249ca:	d1c8      	bne.n	802495e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80249cc:	683b      	ldr	r3, [r7, #0]
 80249ce:	9300      	str	r3, [sp, #0]
 80249d0:	697b      	ldr	r3, [r7, #20]
 80249d2:	2200      	movs	r2, #0
 80249d4:	2140      	movs	r1, #64	@ 0x40
 80249d6:	68f8      	ldr	r0, [r7, #12]
 80249d8:	f001 fc8a 	bl	80262f0 <UART_WaitOnFlagUntilTimeout>
 80249dc:	4603      	mov	r3, r0
 80249de:	2b00      	cmp	r3, #0
 80249e0:	d005      	beq.n	80249ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80249e2:	68fb      	ldr	r3, [r7, #12]
 80249e4:	2220      	movs	r2, #32
 80249e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80249ea:	2303      	movs	r3, #3
 80249ec:	e006      	b.n	80249fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80249ee:	68fb      	ldr	r3, [r7, #12]
 80249f0:	2220      	movs	r2, #32
 80249f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80249f6:	2300      	movs	r3, #0
 80249f8:	e000      	b.n	80249fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80249fa:	2302      	movs	r3, #2
  }
}
 80249fc:	4618      	mov	r0, r3
 80249fe:	3720      	adds	r7, #32
 8024a00:	46bd      	mov	sp, r7
 8024a02:	bd80      	pop	{r7, pc}

08024a04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8024a04:	b580      	push	{r7, lr}
 8024a06:	b08a      	sub	sp, #40	@ 0x28
 8024a08:	af02      	add	r7, sp, #8
 8024a0a:	60f8      	str	r0, [r7, #12]
 8024a0c:	60b9      	str	r1, [r7, #8]
 8024a0e:	603b      	str	r3, [r7, #0]
 8024a10:	4613      	mov	r3, r2
 8024a12:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8024a14:	68fb      	ldr	r3, [r7, #12]
 8024a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8024a1a:	2b20      	cmp	r3, #32
 8024a1c:	f040 80b5 	bne.w	8024b8a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8024a20:	68bb      	ldr	r3, [r7, #8]
 8024a22:	2b00      	cmp	r3, #0
 8024a24:	d002      	beq.n	8024a2c <HAL_UART_Receive+0x28>
 8024a26:	88fb      	ldrh	r3, [r7, #6]
 8024a28:	2b00      	cmp	r3, #0
 8024a2a:	d101      	bne.n	8024a30 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8024a2c:	2301      	movs	r3, #1
 8024a2e:	e0ad      	b.n	8024b8c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024a30:	68fb      	ldr	r3, [r7, #12]
 8024a32:	2200      	movs	r2, #0
 8024a34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8024a38:	68fb      	ldr	r3, [r7, #12]
 8024a3a:	2222      	movs	r2, #34	@ 0x22
 8024a3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024a40:	68fb      	ldr	r3, [r7, #12]
 8024a42:	2200      	movs	r2, #0
 8024a44:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8024a46:	f7fb fef5 	bl	8020834 <HAL_GetTick>
 8024a4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	88fa      	ldrh	r2, [r7, #6]
 8024a50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8024a54:	68fb      	ldr	r3, [r7, #12]
 8024a56:	88fa      	ldrh	r2, [r7, #6]
 8024a58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8024a5c:	68fb      	ldr	r3, [r7, #12]
 8024a5e:	689b      	ldr	r3, [r3, #8]
 8024a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8024a64:	d10e      	bne.n	8024a84 <HAL_UART_Receive+0x80>
 8024a66:	68fb      	ldr	r3, [r7, #12]
 8024a68:	691b      	ldr	r3, [r3, #16]
 8024a6a:	2b00      	cmp	r3, #0
 8024a6c:	d105      	bne.n	8024a7a <HAL_UART_Receive+0x76>
 8024a6e:	68fb      	ldr	r3, [r7, #12]
 8024a70:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8024a74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8024a78:	e02d      	b.n	8024ad6 <HAL_UART_Receive+0xd2>
 8024a7a:	68fb      	ldr	r3, [r7, #12]
 8024a7c:	22ff      	movs	r2, #255	@ 0xff
 8024a7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8024a82:	e028      	b.n	8024ad6 <HAL_UART_Receive+0xd2>
 8024a84:	68fb      	ldr	r3, [r7, #12]
 8024a86:	689b      	ldr	r3, [r3, #8]
 8024a88:	2b00      	cmp	r3, #0
 8024a8a:	d10d      	bne.n	8024aa8 <HAL_UART_Receive+0xa4>
 8024a8c:	68fb      	ldr	r3, [r7, #12]
 8024a8e:	691b      	ldr	r3, [r3, #16]
 8024a90:	2b00      	cmp	r3, #0
 8024a92:	d104      	bne.n	8024a9e <HAL_UART_Receive+0x9a>
 8024a94:	68fb      	ldr	r3, [r7, #12]
 8024a96:	22ff      	movs	r2, #255	@ 0xff
 8024a98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8024a9c:	e01b      	b.n	8024ad6 <HAL_UART_Receive+0xd2>
 8024a9e:	68fb      	ldr	r3, [r7, #12]
 8024aa0:	227f      	movs	r2, #127	@ 0x7f
 8024aa2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8024aa6:	e016      	b.n	8024ad6 <HAL_UART_Receive+0xd2>
 8024aa8:	68fb      	ldr	r3, [r7, #12]
 8024aaa:	689b      	ldr	r3, [r3, #8]
 8024aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8024ab0:	d10d      	bne.n	8024ace <HAL_UART_Receive+0xca>
 8024ab2:	68fb      	ldr	r3, [r7, #12]
 8024ab4:	691b      	ldr	r3, [r3, #16]
 8024ab6:	2b00      	cmp	r3, #0
 8024ab8:	d104      	bne.n	8024ac4 <HAL_UART_Receive+0xc0>
 8024aba:	68fb      	ldr	r3, [r7, #12]
 8024abc:	227f      	movs	r2, #127	@ 0x7f
 8024abe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8024ac2:	e008      	b.n	8024ad6 <HAL_UART_Receive+0xd2>
 8024ac4:	68fb      	ldr	r3, [r7, #12]
 8024ac6:	223f      	movs	r2, #63	@ 0x3f
 8024ac8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8024acc:	e003      	b.n	8024ad6 <HAL_UART_Receive+0xd2>
 8024ace:	68fb      	ldr	r3, [r7, #12]
 8024ad0:	2200      	movs	r2, #0
 8024ad2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8024ad6:	68fb      	ldr	r3, [r7, #12]
 8024ad8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8024adc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8024ade:	68fb      	ldr	r3, [r7, #12]
 8024ae0:	689b      	ldr	r3, [r3, #8]
 8024ae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8024ae6:	d108      	bne.n	8024afa <HAL_UART_Receive+0xf6>
 8024ae8:	68fb      	ldr	r3, [r7, #12]
 8024aea:	691b      	ldr	r3, [r3, #16]
 8024aec:	2b00      	cmp	r3, #0
 8024aee:	d104      	bne.n	8024afa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8024af0:	2300      	movs	r3, #0
 8024af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8024af4:	68bb      	ldr	r3, [r7, #8]
 8024af6:	61bb      	str	r3, [r7, #24]
 8024af8:	e003      	b.n	8024b02 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8024afa:	68bb      	ldr	r3, [r7, #8]
 8024afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8024afe:	2300      	movs	r3, #0
 8024b00:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8024b02:	e036      	b.n	8024b72 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8024b04:	683b      	ldr	r3, [r7, #0]
 8024b06:	9300      	str	r3, [sp, #0]
 8024b08:	697b      	ldr	r3, [r7, #20]
 8024b0a:	2200      	movs	r2, #0
 8024b0c:	2120      	movs	r1, #32
 8024b0e:	68f8      	ldr	r0, [r7, #12]
 8024b10:	f001 fbee 	bl	80262f0 <UART_WaitOnFlagUntilTimeout>
 8024b14:	4603      	mov	r3, r0
 8024b16:	2b00      	cmp	r3, #0
 8024b18:	d005      	beq.n	8024b26 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8024b1a:	68fb      	ldr	r3, [r7, #12]
 8024b1c:	2220      	movs	r2, #32
 8024b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8024b22:	2303      	movs	r3, #3
 8024b24:	e032      	b.n	8024b8c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8024b26:	69fb      	ldr	r3, [r7, #28]
 8024b28:	2b00      	cmp	r3, #0
 8024b2a:	d10c      	bne.n	8024b46 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8024b2c:	68fb      	ldr	r3, [r7, #12]
 8024b2e:	681b      	ldr	r3, [r3, #0]
 8024b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024b32:	b29a      	uxth	r2, r3
 8024b34:	8a7b      	ldrh	r3, [r7, #18]
 8024b36:	4013      	ands	r3, r2
 8024b38:	b29a      	uxth	r2, r3
 8024b3a:	69bb      	ldr	r3, [r7, #24]
 8024b3c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8024b3e:	69bb      	ldr	r3, [r7, #24]
 8024b40:	3302      	adds	r3, #2
 8024b42:	61bb      	str	r3, [r7, #24]
 8024b44:	e00c      	b.n	8024b60 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8024b46:	68fb      	ldr	r3, [r7, #12]
 8024b48:	681b      	ldr	r3, [r3, #0]
 8024b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024b4c:	b2da      	uxtb	r2, r3
 8024b4e:	8a7b      	ldrh	r3, [r7, #18]
 8024b50:	b2db      	uxtb	r3, r3
 8024b52:	4013      	ands	r3, r2
 8024b54:	b2da      	uxtb	r2, r3
 8024b56:	69fb      	ldr	r3, [r7, #28]
 8024b58:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8024b5a:	69fb      	ldr	r3, [r7, #28]
 8024b5c:	3301      	adds	r3, #1
 8024b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8024b60:	68fb      	ldr	r3, [r7, #12]
 8024b62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8024b66:	b29b      	uxth	r3, r3
 8024b68:	3b01      	subs	r3, #1
 8024b6a:	b29a      	uxth	r2, r3
 8024b6c:	68fb      	ldr	r3, [r7, #12]
 8024b6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8024b72:	68fb      	ldr	r3, [r7, #12]
 8024b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8024b78:	b29b      	uxth	r3, r3
 8024b7a:	2b00      	cmp	r3, #0
 8024b7c:	d1c2      	bne.n	8024b04 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8024b7e:	68fb      	ldr	r3, [r7, #12]
 8024b80:	2220      	movs	r2, #32
 8024b82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8024b86:	2300      	movs	r3, #0
 8024b88:	e000      	b.n	8024b8c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8024b8a:	2302      	movs	r3, #2
  }
}
 8024b8c:	4618      	mov	r0, r3
 8024b8e:	3720      	adds	r7, #32
 8024b90:	46bd      	mov	sp, r7
 8024b92:	bd80      	pop	{r7, pc}

08024b94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8024b94:	b580      	push	{r7, lr}
 8024b96:	b0ba      	sub	sp, #232	@ 0xe8
 8024b98:	af00      	add	r7, sp, #0
 8024b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8024b9c:	687b      	ldr	r3, [r7, #4]
 8024b9e:	681b      	ldr	r3, [r3, #0]
 8024ba0:	69db      	ldr	r3, [r3, #28]
 8024ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8024ba6:	687b      	ldr	r3, [r7, #4]
 8024ba8:	681b      	ldr	r3, [r3, #0]
 8024baa:	681b      	ldr	r3, [r3, #0]
 8024bac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8024bb0:	687b      	ldr	r3, [r7, #4]
 8024bb2:	681b      	ldr	r3, [r3, #0]
 8024bb4:	689b      	ldr	r3, [r3, #8]
 8024bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8024bba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8024bbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8024bc2:	4013      	ands	r3, r2
 8024bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8024bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024bcc:	2b00      	cmp	r3, #0
 8024bce:	d11b      	bne.n	8024c08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8024bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8024bd4:	f003 0320 	and.w	r3, r3, #32
 8024bd8:	2b00      	cmp	r3, #0
 8024bda:	d015      	beq.n	8024c08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8024bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8024be0:	f003 0320 	and.w	r3, r3, #32
 8024be4:	2b00      	cmp	r3, #0
 8024be6:	d105      	bne.n	8024bf4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8024be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	d009      	beq.n	8024c08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8024bf4:	687b      	ldr	r3, [r7, #4]
 8024bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8024bf8:	2b00      	cmp	r3, #0
 8024bfa:	f000 8393 	beq.w	8025324 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8024bfe:	687b      	ldr	r3, [r7, #4]
 8024c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8024c02:	6878      	ldr	r0, [r7, #4]
 8024c04:	4798      	blx	r3
      }
      return;
 8024c06:	e38d      	b.n	8025324 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8024c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8024c0c:	2b00      	cmp	r3, #0
 8024c0e:	f000 8123 	beq.w	8024e58 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8024c12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8024c16:	4b8d      	ldr	r3, [pc, #564]	@ (8024e4c <HAL_UART_IRQHandler+0x2b8>)
 8024c18:	4013      	ands	r3, r2
 8024c1a:	2b00      	cmp	r3, #0
 8024c1c:	d106      	bne.n	8024c2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8024c1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8024c22:	4b8b      	ldr	r3, [pc, #556]	@ (8024e50 <HAL_UART_IRQHandler+0x2bc>)
 8024c24:	4013      	ands	r3, r2
 8024c26:	2b00      	cmp	r3, #0
 8024c28:	f000 8116 	beq.w	8024e58 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8024c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8024c30:	f003 0301 	and.w	r3, r3, #1
 8024c34:	2b00      	cmp	r3, #0
 8024c36:	d011      	beq.n	8024c5c <HAL_UART_IRQHandler+0xc8>
 8024c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8024c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8024c40:	2b00      	cmp	r3, #0
 8024c42:	d00b      	beq.n	8024c5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8024c44:	687b      	ldr	r3, [r7, #4]
 8024c46:	681b      	ldr	r3, [r3, #0]
 8024c48:	2201      	movs	r2, #1
 8024c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8024c4c:	687b      	ldr	r3, [r7, #4]
 8024c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024c52:	f043 0201 	orr.w	r2, r3, #1
 8024c56:	687b      	ldr	r3, [r7, #4]
 8024c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8024c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8024c60:	f003 0302 	and.w	r3, r3, #2
 8024c64:	2b00      	cmp	r3, #0
 8024c66:	d011      	beq.n	8024c8c <HAL_UART_IRQHandler+0xf8>
 8024c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024c6c:	f003 0301 	and.w	r3, r3, #1
 8024c70:	2b00      	cmp	r3, #0
 8024c72:	d00b      	beq.n	8024c8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8024c74:	687b      	ldr	r3, [r7, #4]
 8024c76:	681b      	ldr	r3, [r3, #0]
 8024c78:	2202      	movs	r2, #2
 8024c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8024c7c:	687b      	ldr	r3, [r7, #4]
 8024c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024c82:	f043 0204 	orr.w	r2, r3, #4
 8024c86:	687b      	ldr	r3, [r7, #4]
 8024c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8024c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8024c90:	f003 0304 	and.w	r3, r3, #4
 8024c94:	2b00      	cmp	r3, #0
 8024c96:	d011      	beq.n	8024cbc <HAL_UART_IRQHandler+0x128>
 8024c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024c9c:	f003 0301 	and.w	r3, r3, #1
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	d00b      	beq.n	8024cbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8024ca4:	687b      	ldr	r3, [r7, #4]
 8024ca6:	681b      	ldr	r3, [r3, #0]
 8024ca8:	2204      	movs	r2, #4
 8024caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8024cac:	687b      	ldr	r3, [r7, #4]
 8024cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024cb2:	f043 0202 	orr.w	r2, r3, #2
 8024cb6:	687b      	ldr	r3, [r7, #4]
 8024cb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8024cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8024cc0:	f003 0308 	and.w	r3, r3, #8
 8024cc4:	2b00      	cmp	r3, #0
 8024cc6:	d017      	beq.n	8024cf8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8024cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8024ccc:	f003 0320 	and.w	r3, r3, #32
 8024cd0:	2b00      	cmp	r3, #0
 8024cd2:	d105      	bne.n	8024ce0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8024cd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8024cd8:	4b5c      	ldr	r3, [pc, #368]	@ (8024e4c <HAL_UART_IRQHandler+0x2b8>)
 8024cda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8024cdc:	2b00      	cmp	r3, #0
 8024cde:	d00b      	beq.n	8024cf8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8024ce0:	687b      	ldr	r3, [r7, #4]
 8024ce2:	681b      	ldr	r3, [r3, #0]
 8024ce4:	2208      	movs	r2, #8
 8024ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8024ce8:	687b      	ldr	r3, [r7, #4]
 8024cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024cee:	f043 0208 	orr.w	r2, r3, #8
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8024cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8024cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8024d00:	2b00      	cmp	r3, #0
 8024d02:	d012      	beq.n	8024d2a <HAL_UART_IRQHandler+0x196>
 8024d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8024d08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8024d0c:	2b00      	cmp	r3, #0
 8024d0e:	d00c      	beq.n	8024d2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8024d10:	687b      	ldr	r3, [r7, #4]
 8024d12:	681b      	ldr	r3, [r3, #0]
 8024d14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8024d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8024d1a:	687b      	ldr	r3, [r7, #4]
 8024d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024d20:	f043 0220 	orr.w	r2, r3, #32
 8024d24:	687b      	ldr	r3, [r7, #4]
 8024d26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8024d2a:	687b      	ldr	r3, [r7, #4]
 8024d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024d30:	2b00      	cmp	r3, #0
 8024d32:	f000 82f9 	beq.w	8025328 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8024d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8024d3a:	f003 0320 	and.w	r3, r3, #32
 8024d3e:	2b00      	cmp	r3, #0
 8024d40:	d013      	beq.n	8024d6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8024d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8024d46:	f003 0320 	and.w	r3, r3, #32
 8024d4a:	2b00      	cmp	r3, #0
 8024d4c:	d105      	bne.n	8024d5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8024d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8024d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8024d56:	2b00      	cmp	r3, #0
 8024d58:	d007      	beq.n	8024d6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8024d5a:	687b      	ldr	r3, [r7, #4]
 8024d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8024d5e:	2b00      	cmp	r3, #0
 8024d60:	d003      	beq.n	8024d6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8024d66:	6878      	ldr	r0, [r7, #4]
 8024d68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8024d6a:	687b      	ldr	r3, [r7, #4]
 8024d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8024d70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	681b      	ldr	r3, [r3, #0]
 8024d78:	689b      	ldr	r3, [r3, #8]
 8024d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024d7e:	2b40      	cmp	r3, #64	@ 0x40
 8024d80:	d005      	beq.n	8024d8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8024d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8024d86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8024d8a:	2b00      	cmp	r3, #0
 8024d8c:	d054      	beq.n	8024e38 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8024d8e:	6878      	ldr	r0, [r7, #4]
 8024d90:	f001 fb1c 	bl	80263cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8024d94:	687b      	ldr	r3, [r7, #4]
 8024d96:	681b      	ldr	r3, [r3, #0]
 8024d98:	689b      	ldr	r3, [r3, #8]
 8024d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024d9e:	2b40      	cmp	r3, #64	@ 0x40
 8024da0:	d146      	bne.n	8024e30 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8024da2:	687b      	ldr	r3, [r7, #4]
 8024da4:	681b      	ldr	r3, [r3, #0]
 8024da6:	3308      	adds	r3, #8
 8024da8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8024db0:	e853 3f00 	ldrex	r3, [r3]
 8024db4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8024db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8024dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8024dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8024dc4:	687b      	ldr	r3, [r7, #4]
 8024dc6:	681b      	ldr	r3, [r3, #0]
 8024dc8:	3308      	adds	r3, #8
 8024dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8024dce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8024dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8024dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8024dde:	e841 2300 	strex	r3, r2, [r1]
 8024de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8024de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8024dea:	2b00      	cmp	r3, #0
 8024dec:	d1d9      	bne.n	8024da2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8024dee:	687b      	ldr	r3, [r7, #4]
 8024df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	d017      	beq.n	8024e28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8024df8:	687b      	ldr	r3, [r7, #4]
 8024dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024dfe:	4a15      	ldr	r2, [pc, #84]	@ (8024e54 <HAL_UART_IRQHandler+0x2c0>)
 8024e00:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8024e02:	687b      	ldr	r3, [r7, #4]
 8024e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024e08:	4618      	mov	r0, r3
 8024e0a:	f7fc f9c5 	bl	8021198 <HAL_DMA_Abort_IT>
 8024e0e:	4603      	mov	r3, r0
 8024e10:	2b00      	cmp	r3, #0
 8024e12:	d019      	beq.n	8024e48 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8024e14:	687b      	ldr	r3, [r7, #4]
 8024e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8024e1c:	687a      	ldr	r2, [r7, #4]
 8024e1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8024e22:	4610      	mov	r0, r2
 8024e24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8024e26:	e00f      	b.n	8024e48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8024e28:	6878      	ldr	r0, [r7, #4]
 8024e2a:	f000 fa93 	bl	8025354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8024e2e:	e00b      	b.n	8024e48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8024e30:	6878      	ldr	r0, [r7, #4]
 8024e32:	f000 fa8f 	bl	8025354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8024e36:	e007      	b.n	8024e48 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8024e38:	6878      	ldr	r0, [r7, #4]
 8024e3a:	f000 fa8b 	bl	8025354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024e3e:	687b      	ldr	r3, [r7, #4]
 8024e40:	2200      	movs	r2, #0
 8024e42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8024e46:	e26f      	b.n	8025328 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8024e48:	bf00      	nop
    return;
 8024e4a:	e26d      	b.n	8025328 <HAL_UART_IRQHandler+0x794>
 8024e4c:	10000001 	.word	0x10000001
 8024e50:	04000120 	.word	0x04000120
 8024e54:	08026499 	.word	0x08026499

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024e58:	687b      	ldr	r3, [r7, #4]
 8024e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8024e5c:	2b01      	cmp	r3, #1
 8024e5e:	f040 8203 	bne.w	8025268 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8024e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8024e66:	f003 0310 	and.w	r3, r3, #16
 8024e6a:	2b00      	cmp	r3, #0
 8024e6c:	f000 81fc 	beq.w	8025268 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8024e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8024e74:	f003 0310 	and.w	r3, r3, #16
 8024e78:	2b00      	cmp	r3, #0
 8024e7a:	f000 81f5 	beq.w	8025268 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8024e7e:	687b      	ldr	r3, [r7, #4]
 8024e80:	681b      	ldr	r3, [r3, #0]
 8024e82:	2210      	movs	r2, #16
 8024e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8024e86:	687b      	ldr	r3, [r7, #4]
 8024e88:	681b      	ldr	r3, [r3, #0]
 8024e8a:	689b      	ldr	r3, [r3, #8]
 8024e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8024e90:	2b40      	cmp	r3, #64	@ 0x40
 8024e92:	f040 816d 	bne.w	8025170 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8024e96:	687b      	ldr	r3, [r7, #4]
 8024e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024e9c:	681b      	ldr	r3, [r3, #0]
 8024e9e:	4aa4      	ldr	r2, [pc, #656]	@ (8025130 <HAL_UART_IRQHandler+0x59c>)
 8024ea0:	4293      	cmp	r3, r2
 8024ea2:	d068      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024ea4:	687b      	ldr	r3, [r7, #4]
 8024ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024eaa:	681b      	ldr	r3, [r3, #0]
 8024eac:	4aa1      	ldr	r2, [pc, #644]	@ (8025134 <HAL_UART_IRQHandler+0x5a0>)
 8024eae:	4293      	cmp	r3, r2
 8024eb0:	d061      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024eb2:	687b      	ldr	r3, [r7, #4]
 8024eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024eb8:	681b      	ldr	r3, [r3, #0]
 8024eba:	4a9f      	ldr	r2, [pc, #636]	@ (8025138 <HAL_UART_IRQHandler+0x5a4>)
 8024ebc:	4293      	cmp	r3, r2
 8024ebe:	d05a      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024ec0:	687b      	ldr	r3, [r7, #4]
 8024ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024ec6:	681b      	ldr	r3, [r3, #0]
 8024ec8:	4a9c      	ldr	r2, [pc, #624]	@ (802513c <HAL_UART_IRQHandler+0x5a8>)
 8024eca:	4293      	cmp	r3, r2
 8024ecc:	d053      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024ece:	687b      	ldr	r3, [r7, #4]
 8024ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024ed4:	681b      	ldr	r3, [r3, #0]
 8024ed6:	4a9a      	ldr	r2, [pc, #616]	@ (8025140 <HAL_UART_IRQHandler+0x5ac>)
 8024ed8:	4293      	cmp	r3, r2
 8024eda:	d04c      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024edc:	687b      	ldr	r3, [r7, #4]
 8024ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024ee2:	681b      	ldr	r3, [r3, #0]
 8024ee4:	4a97      	ldr	r2, [pc, #604]	@ (8025144 <HAL_UART_IRQHandler+0x5b0>)
 8024ee6:	4293      	cmp	r3, r2
 8024ee8:	d045      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024eea:	687b      	ldr	r3, [r7, #4]
 8024eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024ef0:	681b      	ldr	r3, [r3, #0]
 8024ef2:	4a95      	ldr	r2, [pc, #596]	@ (8025148 <HAL_UART_IRQHandler+0x5b4>)
 8024ef4:	4293      	cmp	r3, r2
 8024ef6:	d03e      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024efe:	681b      	ldr	r3, [r3, #0]
 8024f00:	4a92      	ldr	r2, [pc, #584]	@ (802514c <HAL_UART_IRQHandler+0x5b8>)
 8024f02:	4293      	cmp	r3, r2
 8024f04:	d037      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024f06:	687b      	ldr	r3, [r7, #4]
 8024f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f0c:	681b      	ldr	r3, [r3, #0]
 8024f0e:	4a90      	ldr	r2, [pc, #576]	@ (8025150 <HAL_UART_IRQHandler+0x5bc>)
 8024f10:	4293      	cmp	r3, r2
 8024f12:	d030      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024f14:	687b      	ldr	r3, [r7, #4]
 8024f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f1a:	681b      	ldr	r3, [r3, #0]
 8024f1c:	4a8d      	ldr	r2, [pc, #564]	@ (8025154 <HAL_UART_IRQHandler+0x5c0>)
 8024f1e:	4293      	cmp	r3, r2
 8024f20:	d029      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024f22:	687b      	ldr	r3, [r7, #4]
 8024f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f28:	681b      	ldr	r3, [r3, #0]
 8024f2a:	4a8b      	ldr	r2, [pc, #556]	@ (8025158 <HAL_UART_IRQHandler+0x5c4>)
 8024f2c:	4293      	cmp	r3, r2
 8024f2e:	d022      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024f30:	687b      	ldr	r3, [r7, #4]
 8024f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f36:	681b      	ldr	r3, [r3, #0]
 8024f38:	4a88      	ldr	r2, [pc, #544]	@ (802515c <HAL_UART_IRQHandler+0x5c8>)
 8024f3a:	4293      	cmp	r3, r2
 8024f3c:	d01b      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024f3e:	687b      	ldr	r3, [r7, #4]
 8024f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f44:	681b      	ldr	r3, [r3, #0]
 8024f46:	4a86      	ldr	r2, [pc, #536]	@ (8025160 <HAL_UART_IRQHandler+0x5cc>)
 8024f48:	4293      	cmp	r3, r2
 8024f4a:	d014      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024f4c:	687b      	ldr	r3, [r7, #4]
 8024f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f52:	681b      	ldr	r3, [r3, #0]
 8024f54:	4a83      	ldr	r2, [pc, #524]	@ (8025164 <HAL_UART_IRQHandler+0x5d0>)
 8024f56:	4293      	cmp	r3, r2
 8024f58:	d00d      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f60:	681b      	ldr	r3, [r3, #0]
 8024f62:	4a81      	ldr	r2, [pc, #516]	@ (8025168 <HAL_UART_IRQHandler+0x5d4>)
 8024f64:	4293      	cmp	r3, r2
 8024f66:	d006      	beq.n	8024f76 <HAL_UART_IRQHandler+0x3e2>
 8024f68:	687b      	ldr	r3, [r7, #4]
 8024f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f6e:	681b      	ldr	r3, [r3, #0]
 8024f70:	4a7e      	ldr	r2, [pc, #504]	@ (802516c <HAL_UART_IRQHandler+0x5d8>)
 8024f72:	4293      	cmp	r3, r2
 8024f74:	d106      	bne.n	8024f84 <HAL_UART_IRQHandler+0x3f0>
 8024f76:	687b      	ldr	r3, [r7, #4]
 8024f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f7c:	681b      	ldr	r3, [r3, #0]
 8024f7e:	685b      	ldr	r3, [r3, #4]
 8024f80:	b29b      	uxth	r3, r3
 8024f82:	e005      	b.n	8024f90 <HAL_UART_IRQHandler+0x3fc>
 8024f84:	687b      	ldr	r3, [r7, #4]
 8024f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024f8a:	681b      	ldr	r3, [r3, #0]
 8024f8c:	685b      	ldr	r3, [r3, #4]
 8024f8e:	b29b      	uxth	r3, r3
 8024f90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8024f94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8024f98:	2b00      	cmp	r3, #0
 8024f9a:	f000 80ad 	beq.w	80250f8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8024fa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8024fa8:	429a      	cmp	r2, r3
 8024faa:	f080 80a5 	bcs.w	80250f8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8024fae:	687b      	ldr	r3, [r7, #4]
 8024fb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8024fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8024fb8:	687b      	ldr	r3, [r7, #4]
 8024fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8024fbe:	69db      	ldr	r3, [r3, #28]
 8024fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8024fc4:	f000 8087 	beq.w	80250d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8024fc8:	687b      	ldr	r3, [r7, #4]
 8024fca:	681b      	ldr	r3, [r3, #0]
 8024fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8024fd4:	e853 3f00 	ldrex	r3, [r3]
 8024fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8024fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8024fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8024fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8024fe8:	687b      	ldr	r3, [r7, #4]
 8024fea:	681b      	ldr	r3, [r3, #0]
 8024fec:	461a      	mov	r2, r3
 8024fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8024ff2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8024ff6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8024ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8025002:	e841 2300 	strex	r3, r2, [r1]
 8025006:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 802500a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802500e:	2b00      	cmp	r3, #0
 8025010:	d1da      	bne.n	8024fc8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8025012:	687b      	ldr	r3, [r7, #4]
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	3308      	adds	r3, #8
 8025018:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802501a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 802501c:	e853 3f00 	ldrex	r3, [r3]
 8025020:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8025022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8025024:	f023 0301 	bic.w	r3, r3, #1
 8025028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 802502c:	687b      	ldr	r3, [r7, #4]
 802502e:	681b      	ldr	r3, [r3, #0]
 8025030:	3308      	adds	r3, #8
 8025032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8025036:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 802503a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802503c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 802503e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8025042:	e841 2300 	strex	r3, r2, [r1]
 8025046:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8025048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802504a:	2b00      	cmp	r3, #0
 802504c:	d1e1      	bne.n	8025012 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 802504e:	687b      	ldr	r3, [r7, #4]
 8025050:	681b      	ldr	r3, [r3, #0]
 8025052:	3308      	adds	r3, #8
 8025054:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8025058:	e853 3f00 	ldrex	r3, [r3]
 802505c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 802505e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8025060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8025064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8025068:	687b      	ldr	r3, [r7, #4]
 802506a:	681b      	ldr	r3, [r3, #0]
 802506c:	3308      	adds	r3, #8
 802506e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8025072:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8025074:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025076:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8025078:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 802507a:	e841 2300 	strex	r3, r2, [r1]
 802507e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8025080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8025082:	2b00      	cmp	r3, #0
 8025084:	d1e3      	bne.n	802504e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8025086:	687b      	ldr	r3, [r7, #4]
 8025088:	2220      	movs	r2, #32
 802508a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802508e:	687b      	ldr	r3, [r7, #4]
 8025090:	2200      	movs	r2, #0
 8025092:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8025094:	687b      	ldr	r3, [r7, #4]
 8025096:	681b      	ldr	r3, [r3, #0]
 8025098:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802509a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802509c:	e853 3f00 	ldrex	r3, [r3]
 80250a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80250a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80250a4:	f023 0310 	bic.w	r3, r3, #16
 80250a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80250ac:	687b      	ldr	r3, [r7, #4]
 80250ae:	681b      	ldr	r3, [r3, #0]
 80250b0:	461a      	mov	r2, r3
 80250b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80250b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80250b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80250ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80250bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80250be:	e841 2300 	strex	r3, r2, [r1]
 80250c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80250c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80250c6:	2b00      	cmp	r3, #0
 80250c8:	d1e4      	bne.n	8025094 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80250ca:	687b      	ldr	r3, [r7, #4]
 80250cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80250d0:	4618      	mov	r0, r3
 80250d2:	f7fb fd43 	bl	8020b5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80250d6:	687b      	ldr	r3, [r7, #4]
 80250d8:	2202      	movs	r2, #2
 80250da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80250e2:	687b      	ldr	r3, [r7, #4]
 80250e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80250e8:	b29b      	uxth	r3, r3
 80250ea:	1ad3      	subs	r3, r2, r3
 80250ec:	b29b      	uxth	r3, r3
 80250ee:	4619      	mov	r1, r3
 80250f0:	6878      	ldr	r0, [r7, #4]
 80250f2:	f000 f939 	bl	8025368 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80250f6:	e119      	b.n	802532c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80250f8:	687b      	ldr	r3, [r7, #4]
 80250fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80250fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8025102:	429a      	cmp	r2, r3
 8025104:	f040 8112 	bne.w	802532c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8025108:	687b      	ldr	r3, [r7, #4]
 802510a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802510e:	69db      	ldr	r3, [r3, #28]
 8025110:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8025114:	f040 810a 	bne.w	802532c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8025118:	687b      	ldr	r3, [r7, #4]
 802511a:	2202      	movs	r2, #2
 802511c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 802511e:	687b      	ldr	r3, [r7, #4]
 8025120:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8025124:	4619      	mov	r1, r3
 8025126:	6878      	ldr	r0, [r7, #4]
 8025128:	f000 f91e 	bl	8025368 <HAL_UARTEx_RxEventCallback>
      return;
 802512c:	e0fe      	b.n	802532c <HAL_UART_IRQHandler+0x798>
 802512e:	bf00      	nop
 8025130:	40020010 	.word	0x40020010
 8025134:	40020028 	.word	0x40020028
 8025138:	40020040 	.word	0x40020040
 802513c:	40020058 	.word	0x40020058
 8025140:	40020070 	.word	0x40020070
 8025144:	40020088 	.word	0x40020088
 8025148:	400200a0 	.word	0x400200a0
 802514c:	400200b8 	.word	0x400200b8
 8025150:	40020410 	.word	0x40020410
 8025154:	40020428 	.word	0x40020428
 8025158:	40020440 	.word	0x40020440
 802515c:	40020458 	.word	0x40020458
 8025160:	40020470 	.word	0x40020470
 8025164:	40020488 	.word	0x40020488
 8025168:	400204a0 	.word	0x400204a0
 802516c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8025170:	687b      	ldr	r3, [r7, #4]
 8025172:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8025176:	687b      	ldr	r3, [r7, #4]
 8025178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802517c:	b29b      	uxth	r3, r3
 802517e:	1ad3      	subs	r3, r2, r3
 8025180:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8025184:	687b      	ldr	r3, [r7, #4]
 8025186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802518a:	b29b      	uxth	r3, r3
 802518c:	2b00      	cmp	r3, #0
 802518e:	f000 80cf 	beq.w	8025330 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8025192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8025196:	2b00      	cmp	r3, #0
 8025198:	f000 80ca 	beq.w	8025330 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802519c:	687b      	ldr	r3, [r7, #4]
 802519e:	681b      	ldr	r3, [r3, #0]
 80251a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80251a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80251a4:	e853 3f00 	ldrex	r3, [r3]
 80251a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80251aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80251ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80251b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80251b4:	687b      	ldr	r3, [r7, #4]
 80251b6:	681b      	ldr	r3, [r3, #0]
 80251b8:	461a      	mov	r2, r3
 80251ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80251be:	647b      	str	r3, [r7, #68]	@ 0x44
 80251c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80251c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80251c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80251c6:	e841 2300 	strex	r3, r2, [r1]
 80251ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80251cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80251ce:	2b00      	cmp	r3, #0
 80251d0:	d1e4      	bne.n	802519c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80251d2:	687b      	ldr	r3, [r7, #4]
 80251d4:	681b      	ldr	r3, [r3, #0]
 80251d6:	3308      	adds	r3, #8
 80251d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80251da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80251dc:	e853 3f00 	ldrex	r3, [r3]
 80251e0:	623b      	str	r3, [r7, #32]
   return(result);
 80251e2:	6a3a      	ldr	r2, [r7, #32]
 80251e4:	4b55      	ldr	r3, [pc, #340]	@ (802533c <HAL_UART_IRQHandler+0x7a8>)
 80251e6:	4013      	ands	r3, r2
 80251e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80251ec:	687b      	ldr	r3, [r7, #4]
 80251ee:	681b      	ldr	r3, [r3, #0]
 80251f0:	3308      	adds	r3, #8
 80251f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80251f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80251f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80251fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80251fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80251fe:	e841 2300 	strex	r3, r2, [r1]
 8025202:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8025204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025206:	2b00      	cmp	r3, #0
 8025208:	d1e3      	bne.n	80251d2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 802520a:	687b      	ldr	r3, [r7, #4]
 802520c:	2220      	movs	r2, #32
 802520e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8025212:	687b      	ldr	r3, [r7, #4]
 8025214:	2200      	movs	r2, #0
 8025216:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8025218:	687b      	ldr	r3, [r7, #4]
 802521a:	2200      	movs	r2, #0
 802521c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802521e:	687b      	ldr	r3, [r7, #4]
 8025220:	681b      	ldr	r3, [r3, #0]
 8025222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8025224:	693b      	ldr	r3, [r7, #16]
 8025226:	e853 3f00 	ldrex	r3, [r3]
 802522a:	60fb      	str	r3, [r7, #12]
   return(result);
 802522c:	68fb      	ldr	r3, [r7, #12]
 802522e:	f023 0310 	bic.w	r3, r3, #16
 8025232:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8025236:	687b      	ldr	r3, [r7, #4]
 8025238:	681b      	ldr	r3, [r3, #0]
 802523a:	461a      	mov	r2, r3
 802523c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8025240:	61fb      	str	r3, [r7, #28]
 8025242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8025244:	69b9      	ldr	r1, [r7, #24]
 8025246:	69fa      	ldr	r2, [r7, #28]
 8025248:	e841 2300 	strex	r3, r2, [r1]
 802524c:	617b      	str	r3, [r7, #20]
   return(result);
 802524e:	697b      	ldr	r3, [r7, #20]
 8025250:	2b00      	cmp	r3, #0
 8025252:	d1e4      	bne.n	802521e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8025254:	687b      	ldr	r3, [r7, #4]
 8025256:	2202      	movs	r2, #2
 8025258:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 802525a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 802525e:	4619      	mov	r1, r3
 8025260:	6878      	ldr	r0, [r7, #4]
 8025262:	f000 f881 	bl	8025368 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8025266:	e063      	b.n	8025330 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8025268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802526c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8025270:	2b00      	cmp	r3, #0
 8025272:	d00e      	beq.n	8025292 <HAL_UART_IRQHandler+0x6fe>
 8025274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8025278:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 802527c:	2b00      	cmp	r3, #0
 802527e:	d008      	beq.n	8025292 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8025280:	687b      	ldr	r3, [r7, #4]
 8025282:	681b      	ldr	r3, [r3, #0]
 8025284:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8025288:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 802528a:	6878      	ldr	r0, [r7, #4]
 802528c:	f001 f941 	bl	8026512 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8025290:	e051      	b.n	8025336 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8025292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8025296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 802529a:	2b00      	cmp	r3, #0
 802529c:	d014      	beq.n	80252c8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 802529e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80252a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80252a6:	2b00      	cmp	r3, #0
 80252a8:	d105      	bne.n	80252b6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80252aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80252ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80252b2:	2b00      	cmp	r3, #0
 80252b4:	d008      	beq.n	80252c8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80252b6:	687b      	ldr	r3, [r7, #4]
 80252b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80252ba:	2b00      	cmp	r3, #0
 80252bc:	d03a      	beq.n	8025334 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80252be:	687b      	ldr	r3, [r7, #4]
 80252c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80252c2:	6878      	ldr	r0, [r7, #4]
 80252c4:	4798      	blx	r3
    }
    return;
 80252c6:	e035      	b.n	8025334 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80252c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80252cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80252d0:	2b00      	cmp	r3, #0
 80252d2:	d009      	beq.n	80252e8 <HAL_UART_IRQHandler+0x754>
 80252d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80252d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80252dc:	2b00      	cmp	r3, #0
 80252de:	d003      	beq.n	80252e8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80252e0:	6878      	ldr	r0, [r7, #4]
 80252e2:	f001 f8eb 	bl	80264bc <UART_EndTransmit_IT>
    return;
 80252e6:	e026      	b.n	8025336 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80252e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80252ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80252f0:	2b00      	cmp	r3, #0
 80252f2:	d009      	beq.n	8025308 <HAL_UART_IRQHandler+0x774>
 80252f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80252f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80252fc:	2b00      	cmp	r3, #0
 80252fe:	d003      	beq.n	8025308 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8025300:	6878      	ldr	r0, [r7, #4]
 8025302:	f001 f91a 	bl	802653a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8025306:	e016      	b.n	8025336 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8025308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802530c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8025310:	2b00      	cmp	r3, #0
 8025312:	d010      	beq.n	8025336 <HAL_UART_IRQHandler+0x7a2>
 8025314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8025318:	2b00      	cmp	r3, #0
 802531a:	da0c      	bge.n	8025336 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 802531c:	6878      	ldr	r0, [r7, #4]
 802531e:	f001 f902 	bl	8026526 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8025322:	e008      	b.n	8025336 <HAL_UART_IRQHandler+0x7a2>
      return;
 8025324:	bf00      	nop
 8025326:	e006      	b.n	8025336 <HAL_UART_IRQHandler+0x7a2>
    return;
 8025328:	bf00      	nop
 802532a:	e004      	b.n	8025336 <HAL_UART_IRQHandler+0x7a2>
      return;
 802532c:	bf00      	nop
 802532e:	e002      	b.n	8025336 <HAL_UART_IRQHandler+0x7a2>
      return;
 8025330:	bf00      	nop
 8025332:	e000      	b.n	8025336 <HAL_UART_IRQHandler+0x7a2>
    return;
 8025334:	bf00      	nop
  }
}
 8025336:	37e8      	adds	r7, #232	@ 0xe8
 8025338:	46bd      	mov	sp, r7
 802533a:	bd80      	pop	{r7, pc}
 802533c:	effffffe 	.word	0xeffffffe

08025340 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8025340:	b480      	push	{r7}
 8025342:	b083      	sub	sp, #12
 8025344:	af00      	add	r7, sp, #0
 8025346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8025348:	bf00      	nop
 802534a:	370c      	adds	r7, #12
 802534c:	46bd      	mov	sp, r7
 802534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025352:	4770      	bx	lr

08025354 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8025354:	b480      	push	{r7}
 8025356:	b083      	sub	sp, #12
 8025358:	af00      	add	r7, sp, #0
 802535a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 802535c:	bf00      	nop
 802535e:	370c      	adds	r7, #12
 8025360:	46bd      	mov	sp, r7
 8025362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025366:	4770      	bx	lr

08025368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8025368:	b480      	push	{r7}
 802536a:	b083      	sub	sp, #12
 802536c:	af00      	add	r7, sp, #0
 802536e:	6078      	str	r0, [r7, #4]
 8025370:	460b      	mov	r3, r1
 8025372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8025374:	bf00      	nop
 8025376:	370c      	adds	r7, #12
 8025378:	46bd      	mov	sp, r7
 802537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802537e:	4770      	bx	lr

08025380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8025380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8025384:	b092      	sub	sp, #72	@ 0x48
 8025386:	af00      	add	r7, sp, #0
 8025388:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 802538a:	2300      	movs	r3, #0
 802538c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8025390:	697b      	ldr	r3, [r7, #20]
 8025392:	689a      	ldr	r2, [r3, #8]
 8025394:	697b      	ldr	r3, [r7, #20]
 8025396:	691b      	ldr	r3, [r3, #16]
 8025398:	431a      	orrs	r2, r3
 802539a:	697b      	ldr	r3, [r7, #20]
 802539c:	695b      	ldr	r3, [r3, #20]
 802539e:	431a      	orrs	r2, r3
 80253a0:	697b      	ldr	r3, [r7, #20]
 80253a2:	69db      	ldr	r3, [r3, #28]
 80253a4:	4313      	orrs	r3, r2
 80253a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80253a8:	697b      	ldr	r3, [r7, #20]
 80253aa:	681b      	ldr	r3, [r3, #0]
 80253ac:	681a      	ldr	r2, [r3, #0]
 80253ae:	4bbe      	ldr	r3, [pc, #760]	@ (80256a8 <UART_SetConfig+0x328>)
 80253b0:	4013      	ands	r3, r2
 80253b2:	697a      	ldr	r2, [r7, #20]
 80253b4:	6812      	ldr	r2, [r2, #0]
 80253b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80253b8:	430b      	orrs	r3, r1
 80253ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80253bc:	697b      	ldr	r3, [r7, #20]
 80253be:	681b      	ldr	r3, [r3, #0]
 80253c0:	685b      	ldr	r3, [r3, #4]
 80253c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80253c6:	697b      	ldr	r3, [r7, #20]
 80253c8:	68da      	ldr	r2, [r3, #12]
 80253ca:	697b      	ldr	r3, [r7, #20]
 80253cc:	681b      	ldr	r3, [r3, #0]
 80253ce:	430a      	orrs	r2, r1
 80253d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80253d2:	697b      	ldr	r3, [r7, #20]
 80253d4:	699b      	ldr	r3, [r3, #24]
 80253d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80253d8:	697b      	ldr	r3, [r7, #20]
 80253da:	681b      	ldr	r3, [r3, #0]
 80253dc:	4ab3      	ldr	r2, [pc, #716]	@ (80256ac <UART_SetConfig+0x32c>)
 80253de:	4293      	cmp	r3, r2
 80253e0:	d004      	beq.n	80253ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80253e2:	697b      	ldr	r3, [r7, #20]
 80253e4:	6a1b      	ldr	r3, [r3, #32]
 80253e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80253e8:	4313      	orrs	r3, r2
 80253ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80253ec:	697b      	ldr	r3, [r7, #20]
 80253ee:	681b      	ldr	r3, [r3, #0]
 80253f0:	689a      	ldr	r2, [r3, #8]
 80253f2:	4baf      	ldr	r3, [pc, #700]	@ (80256b0 <UART_SetConfig+0x330>)
 80253f4:	4013      	ands	r3, r2
 80253f6:	697a      	ldr	r2, [r7, #20]
 80253f8:	6812      	ldr	r2, [r2, #0]
 80253fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80253fc:	430b      	orrs	r3, r1
 80253fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8025400:	697b      	ldr	r3, [r7, #20]
 8025402:	681b      	ldr	r3, [r3, #0]
 8025404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025406:	f023 010f 	bic.w	r1, r3, #15
 802540a:	697b      	ldr	r3, [r7, #20]
 802540c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802540e:	697b      	ldr	r3, [r7, #20]
 8025410:	681b      	ldr	r3, [r3, #0]
 8025412:	430a      	orrs	r2, r1
 8025414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8025416:	697b      	ldr	r3, [r7, #20]
 8025418:	681b      	ldr	r3, [r3, #0]
 802541a:	4aa6      	ldr	r2, [pc, #664]	@ (80256b4 <UART_SetConfig+0x334>)
 802541c:	4293      	cmp	r3, r2
 802541e:	d177      	bne.n	8025510 <UART_SetConfig+0x190>
 8025420:	4ba5      	ldr	r3, [pc, #660]	@ (80256b8 <UART_SetConfig+0x338>)
 8025422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8025424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8025428:	2b28      	cmp	r3, #40	@ 0x28
 802542a:	d86d      	bhi.n	8025508 <UART_SetConfig+0x188>
 802542c:	a201      	add	r2, pc, #4	@ (adr r2, 8025434 <UART_SetConfig+0xb4>)
 802542e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025432:	bf00      	nop
 8025434:	080254d9 	.word	0x080254d9
 8025438:	08025509 	.word	0x08025509
 802543c:	08025509 	.word	0x08025509
 8025440:	08025509 	.word	0x08025509
 8025444:	08025509 	.word	0x08025509
 8025448:	08025509 	.word	0x08025509
 802544c:	08025509 	.word	0x08025509
 8025450:	08025509 	.word	0x08025509
 8025454:	080254e1 	.word	0x080254e1
 8025458:	08025509 	.word	0x08025509
 802545c:	08025509 	.word	0x08025509
 8025460:	08025509 	.word	0x08025509
 8025464:	08025509 	.word	0x08025509
 8025468:	08025509 	.word	0x08025509
 802546c:	08025509 	.word	0x08025509
 8025470:	08025509 	.word	0x08025509
 8025474:	080254e9 	.word	0x080254e9
 8025478:	08025509 	.word	0x08025509
 802547c:	08025509 	.word	0x08025509
 8025480:	08025509 	.word	0x08025509
 8025484:	08025509 	.word	0x08025509
 8025488:	08025509 	.word	0x08025509
 802548c:	08025509 	.word	0x08025509
 8025490:	08025509 	.word	0x08025509
 8025494:	080254f1 	.word	0x080254f1
 8025498:	08025509 	.word	0x08025509
 802549c:	08025509 	.word	0x08025509
 80254a0:	08025509 	.word	0x08025509
 80254a4:	08025509 	.word	0x08025509
 80254a8:	08025509 	.word	0x08025509
 80254ac:	08025509 	.word	0x08025509
 80254b0:	08025509 	.word	0x08025509
 80254b4:	080254f9 	.word	0x080254f9
 80254b8:	08025509 	.word	0x08025509
 80254bc:	08025509 	.word	0x08025509
 80254c0:	08025509 	.word	0x08025509
 80254c4:	08025509 	.word	0x08025509
 80254c8:	08025509 	.word	0x08025509
 80254cc:	08025509 	.word	0x08025509
 80254d0:	08025509 	.word	0x08025509
 80254d4:	08025501 	.word	0x08025501
 80254d8:	2301      	movs	r3, #1
 80254da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80254de:	e326      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80254e0:	2304      	movs	r3, #4
 80254e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80254e6:	e322      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80254e8:	2308      	movs	r3, #8
 80254ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80254ee:	e31e      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80254f0:	2310      	movs	r3, #16
 80254f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80254f6:	e31a      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80254f8:	2320      	movs	r3, #32
 80254fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80254fe:	e316      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025500:	2340      	movs	r3, #64	@ 0x40
 8025502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025506:	e312      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025508:	2380      	movs	r3, #128	@ 0x80
 802550a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802550e:	e30e      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025510:	697b      	ldr	r3, [r7, #20]
 8025512:	681b      	ldr	r3, [r3, #0]
 8025514:	4a69      	ldr	r2, [pc, #420]	@ (80256bc <UART_SetConfig+0x33c>)
 8025516:	4293      	cmp	r3, r2
 8025518:	d130      	bne.n	802557c <UART_SetConfig+0x1fc>
 802551a:	4b67      	ldr	r3, [pc, #412]	@ (80256b8 <UART_SetConfig+0x338>)
 802551c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802551e:	f003 0307 	and.w	r3, r3, #7
 8025522:	2b05      	cmp	r3, #5
 8025524:	d826      	bhi.n	8025574 <UART_SetConfig+0x1f4>
 8025526:	a201      	add	r2, pc, #4	@ (adr r2, 802552c <UART_SetConfig+0x1ac>)
 8025528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802552c:	08025545 	.word	0x08025545
 8025530:	0802554d 	.word	0x0802554d
 8025534:	08025555 	.word	0x08025555
 8025538:	0802555d 	.word	0x0802555d
 802553c:	08025565 	.word	0x08025565
 8025540:	0802556d 	.word	0x0802556d
 8025544:	2300      	movs	r3, #0
 8025546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802554a:	e2f0      	b.n	8025b2e <UART_SetConfig+0x7ae>
 802554c:	2304      	movs	r3, #4
 802554e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025552:	e2ec      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025554:	2308      	movs	r3, #8
 8025556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802555a:	e2e8      	b.n	8025b2e <UART_SetConfig+0x7ae>
 802555c:	2310      	movs	r3, #16
 802555e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025562:	e2e4      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025564:	2320      	movs	r3, #32
 8025566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802556a:	e2e0      	b.n	8025b2e <UART_SetConfig+0x7ae>
 802556c:	2340      	movs	r3, #64	@ 0x40
 802556e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025572:	e2dc      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025574:	2380      	movs	r3, #128	@ 0x80
 8025576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802557a:	e2d8      	b.n	8025b2e <UART_SetConfig+0x7ae>
 802557c:	697b      	ldr	r3, [r7, #20]
 802557e:	681b      	ldr	r3, [r3, #0]
 8025580:	4a4f      	ldr	r2, [pc, #316]	@ (80256c0 <UART_SetConfig+0x340>)
 8025582:	4293      	cmp	r3, r2
 8025584:	d130      	bne.n	80255e8 <UART_SetConfig+0x268>
 8025586:	4b4c      	ldr	r3, [pc, #304]	@ (80256b8 <UART_SetConfig+0x338>)
 8025588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802558a:	f003 0307 	and.w	r3, r3, #7
 802558e:	2b05      	cmp	r3, #5
 8025590:	d826      	bhi.n	80255e0 <UART_SetConfig+0x260>
 8025592:	a201      	add	r2, pc, #4	@ (adr r2, 8025598 <UART_SetConfig+0x218>)
 8025594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025598:	080255b1 	.word	0x080255b1
 802559c:	080255b9 	.word	0x080255b9
 80255a0:	080255c1 	.word	0x080255c1
 80255a4:	080255c9 	.word	0x080255c9
 80255a8:	080255d1 	.word	0x080255d1
 80255ac:	080255d9 	.word	0x080255d9
 80255b0:	2300      	movs	r3, #0
 80255b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80255b6:	e2ba      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80255b8:	2304      	movs	r3, #4
 80255ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80255be:	e2b6      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80255c0:	2308      	movs	r3, #8
 80255c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80255c6:	e2b2      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80255c8:	2310      	movs	r3, #16
 80255ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80255ce:	e2ae      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80255d0:	2320      	movs	r3, #32
 80255d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80255d6:	e2aa      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80255d8:	2340      	movs	r3, #64	@ 0x40
 80255da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80255de:	e2a6      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80255e0:	2380      	movs	r3, #128	@ 0x80
 80255e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80255e6:	e2a2      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80255e8:	697b      	ldr	r3, [r7, #20]
 80255ea:	681b      	ldr	r3, [r3, #0]
 80255ec:	4a35      	ldr	r2, [pc, #212]	@ (80256c4 <UART_SetConfig+0x344>)
 80255ee:	4293      	cmp	r3, r2
 80255f0:	d130      	bne.n	8025654 <UART_SetConfig+0x2d4>
 80255f2:	4b31      	ldr	r3, [pc, #196]	@ (80256b8 <UART_SetConfig+0x338>)
 80255f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80255f6:	f003 0307 	and.w	r3, r3, #7
 80255fa:	2b05      	cmp	r3, #5
 80255fc:	d826      	bhi.n	802564c <UART_SetConfig+0x2cc>
 80255fe:	a201      	add	r2, pc, #4	@ (adr r2, 8025604 <UART_SetConfig+0x284>)
 8025600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025604:	0802561d 	.word	0x0802561d
 8025608:	08025625 	.word	0x08025625
 802560c:	0802562d 	.word	0x0802562d
 8025610:	08025635 	.word	0x08025635
 8025614:	0802563d 	.word	0x0802563d
 8025618:	08025645 	.word	0x08025645
 802561c:	2300      	movs	r3, #0
 802561e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025622:	e284      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025624:	2304      	movs	r3, #4
 8025626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802562a:	e280      	b.n	8025b2e <UART_SetConfig+0x7ae>
 802562c:	2308      	movs	r3, #8
 802562e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025632:	e27c      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025634:	2310      	movs	r3, #16
 8025636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802563a:	e278      	b.n	8025b2e <UART_SetConfig+0x7ae>
 802563c:	2320      	movs	r3, #32
 802563e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025642:	e274      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025644:	2340      	movs	r3, #64	@ 0x40
 8025646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802564a:	e270      	b.n	8025b2e <UART_SetConfig+0x7ae>
 802564c:	2380      	movs	r3, #128	@ 0x80
 802564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025652:	e26c      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025654:	697b      	ldr	r3, [r7, #20]
 8025656:	681b      	ldr	r3, [r3, #0]
 8025658:	4a1b      	ldr	r2, [pc, #108]	@ (80256c8 <UART_SetConfig+0x348>)
 802565a:	4293      	cmp	r3, r2
 802565c:	d142      	bne.n	80256e4 <UART_SetConfig+0x364>
 802565e:	4b16      	ldr	r3, [pc, #88]	@ (80256b8 <UART_SetConfig+0x338>)
 8025660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8025662:	f003 0307 	and.w	r3, r3, #7
 8025666:	2b05      	cmp	r3, #5
 8025668:	d838      	bhi.n	80256dc <UART_SetConfig+0x35c>
 802566a:	a201      	add	r2, pc, #4	@ (adr r2, 8025670 <UART_SetConfig+0x2f0>)
 802566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025670:	08025689 	.word	0x08025689
 8025674:	08025691 	.word	0x08025691
 8025678:	08025699 	.word	0x08025699
 802567c:	080256a1 	.word	0x080256a1
 8025680:	080256cd 	.word	0x080256cd
 8025684:	080256d5 	.word	0x080256d5
 8025688:	2300      	movs	r3, #0
 802568a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802568e:	e24e      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025690:	2304      	movs	r3, #4
 8025692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025696:	e24a      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025698:	2308      	movs	r3, #8
 802569a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802569e:	e246      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80256a0:	2310      	movs	r3, #16
 80256a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80256a6:	e242      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80256a8:	cfff69f3 	.word	0xcfff69f3
 80256ac:	58000c00 	.word	0x58000c00
 80256b0:	11fff4ff 	.word	0x11fff4ff
 80256b4:	40011000 	.word	0x40011000
 80256b8:	58024400 	.word	0x58024400
 80256bc:	40004400 	.word	0x40004400
 80256c0:	40004800 	.word	0x40004800
 80256c4:	40004c00 	.word	0x40004c00
 80256c8:	40005000 	.word	0x40005000
 80256cc:	2320      	movs	r3, #32
 80256ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80256d2:	e22c      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80256d4:	2340      	movs	r3, #64	@ 0x40
 80256d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80256da:	e228      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80256dc:	2380      	movs	r3, #128	@ 0x80
 80256de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80256e2:	e224      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80256e4:	697b      	ldr	r3, [r7, #20]
 80256e6:	681b      	ldr	r3, [r3, #0]
 80256e8:	4ab1      	ldr	r2, [pc, #708]	@ (80259b0 <UART_SetConfig+0x630>)
 80256ea:	4293      	cmp	r3, r2
 80256ec:	d176      	bne.n	80257dc <UART_SetConfig+0x45c>
 80256ee:	4bb1      	ldr	r3, [pc, #708]	@ (80259b4 <UART_SetConfig+0x634>)
 80256f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80256f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80256f6:	2b28      	cmp	r3, #40	@ 0x28
 80256f8:	d86c      	bhi.n	80257d4 <UART_SetConfig+0x454>
 80256fa:	a201      	add	r2, pc, #4	@ (adr r2, 8025700 <UART_SetConfig+0x380>)
 80256fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025700:	080257a5 	.word	0x080257a5
 8025704:	080257d5 	.word	0x080257d5
 8025708:	080257d5 	.word	0x080257d5
 802570c:	080257d5 	.word	0x080257d5
 8025710:	080257d5 	.word	0x080257d5
 8025714:	080257d5 	.word	0x080257d5
 8025718:	080257d5 	.word	0x080257d5
 802571c:	080257d5 	.word	0x080257d5
 8025720:	080257ad 	.word	0x080257ad
 8025724:	080257d5 	.word	0x080257d5
 8025728:	080257d5 	.word	0x080257d5
 802572c:	080257d5 	.word	0x080257d5
 8025730:	080257d5 	.word	0x080257d5
 8025734:	080257d5 	.word	0x080257d5
 8025738:	080257d5 	.word	0x080257d5
 802573c:	080257d5 	.word	0x080257d5
 8025740:	080257b5 	.word	0x080257b5
 8025744:	080257d5 	.word	0x080257d5
 8025748:	080257d5 	.word	0x080257d5
 802574c:	080257d5 	.word	0x080257d5
 8025750:	080257d5 	.word	0x080257d5
 8025754:	080257d5 	.word	0x080257d5
 8025758:	080257d5 	.word	0x080257d5
 802575c:	080257d5 	.word	0x080257d5
 8025760:	080257bd 	.word	0x080257bd
 8025764:	080257d5 	.word	0x080257d5
 8025768:	080257d5 	.word	0x080257d5
 802576c:	080257d5 	.word	0x080257d5
 8025770:	080257d5 	.word	0x080257d5
 8025774:	080257d5 	.word	0x080257d5
 8025778:	080257d5 	.word	0x080257d5
 802577c:	080257d5 	.word	0x080257d5
 8025780:	080257c5 	.word	0x080257c5
 8025784:	080257d5 	.word	0x080257d5
 8025788:	080257d5 	.word	0x080257d5
 802578c:	080257d5 	.word	0x080257d5
 8025790:	080257d5 	.word	0x080257d5
 8025794:	080257d5 	.word	0x080257d5
 8025798:	080257d5 	.word	0x080257d5
 802579c:	080257d5 	.word	0x080257d5
 80257a0:	080257cd 	.word	0x080257cd
 80257a4:	2301      	movs	r3, #1
 80257a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80257aa:	e1c0      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80257ac:	2304      	movs	r3, #4
 80257ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80257b2:	e1bc      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80257b4:	2308      	movs	r3, #8
 80257b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80257ba:	e1b8      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80257bc:	2310      	movs	r3, #16
 80257be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80257c2:	e1b4      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80257c4:	2320      	movs	r3, #32
 80257c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80257ca:	e1b0      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80257cc:	2340      	movs	r3, #64	@ 0x40
 80257ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80257d2:	e1ac      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80257d4:	2380      	movs	r3, #128	@ 0x80
 80257d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80257da:	e1a8      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80257dc:	697b      	ldr	r3, [r7, #20]
 80257de:	681b      	ldr	r3, [r3, #0]
 80257e0:	4a75      	ldr	r2, [pc, #468]	@ (80259b8 <UART_SetConfig+0x638>)
 80257e2:	4293      	cmp	r3, r2
 80257e4:	d130      	bne.n	8025848 <UART_SetConfig+0x4c8>
 80257e6:	4b73      	ldr	r3, [pc, #460]	@ (80259b4 <UART_SetConfig+0x634>)
 80257e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80257ea:	f003 0307 	and.w	r3, r3, #7
 80257ee:	2b05      	cmp	r3, #5
 80257f0:	d826      	bhi.n	8025840 <UART_SetConfig+0x4c0>
 80257f2:	a201      	add	r2, pc, #4	@ (adr r2, 80257f8 <UART_SetConfig+0x478>)
 80257f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80257f8:	08025811 	.word	0x08025811
 80257fc:	08025819 	.word	0x08025819
 8025800:	08025821 	.word	0x08025821
 8025804:	08025829 	.word	0x08025829
 8025808:	08025831 	.word	0x08025831
 802580c:	08025839 	.word	0x08025839
 8025810:	2300      	movs	r3, #0
 8025812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025816:	e18a      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025818:	2304      	movs	r3, #4
 802581a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802581e:	e186      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025820:	2308      	movs	r3, #8
 8025822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025826:	e182      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025828:	2310      	movs	r3, #16
 802582a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802582e:	e17e      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025830:	2320      	movs	r3, #32
 8025832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025836:	e17a      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025838:	2340      	movs	r3, #64	@ 0x40
 802583a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802583e:	e176      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025840:	2380      	movs	r3, #128	@ 0x80
 8025842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025846:	e172      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025848:	697b      	ldr	r3, [r7, #20]
 802584a:	681b      	ldr	r3, [r3, #0]
 802584c:	4a5b      	ldr	r2, [pc, #364]	@ (80259bc <UART_SetConfig+0x63c>)
 802584e:	4293      	cmp	r3, r2
 8025850:	d130      	bne.n	80258b4 <UART_SetConfig+0x534>
 8025852:	4b58      	ldr	r3, [pc, #352]	@ (80259b4 <UART_SetConfig+0x634>)
 8025854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8025856:	f003 0307 	and.w	r3, r3, #7
 802585a:	2b05      	cmp	r3, #5
 802585c:	d826      	bhi.n	80258ac <UART_SetConfig+0x52c>
 802585e:	a201      	add	r2, pc, #4	@ (adr r2, 8025864 <UART_SetConfig+0x4e4>)
 8025860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025864:	0802587d 	.word	0x0802587d
 8025868:	08025885 	.word	0x08025885
 802586c:	0802588d 	.word	0x0802588d
 8025870:	08025895 	.word	0x08025895
 8025874:	0802589d 	.word	0x0802589d
 8025878:	080258a5 	.word	0x080258a5
 802587c:	2300      	movs	r3, #0
 802587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025882:	e154      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025884:	2304      	movs	r3, #4
 8025886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802588a:	e150      	b.n	8025b2e <UART_SetConfig+0x7ae>
 802588c:	2308      	movs	r3, #8
 802588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025892:	e14c      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025894:	2310      	movs	r3, #16
 8025896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802589a:	e148      	b.n	8025b2e <UART_SetConfig+0x7ae>
 802589c:	2320      	movs	r3, #32
 802589e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80258a2:	e144      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80258a4:	2340      	movs	r3, #64	@ 0x40
 80258a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80258aa:	e140      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80258ac:	2380      	movs	r3, #128	@ 0x80
 80258ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80258b2:	e13c      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80258b4:	697b      	ldr	r3, [r7, #20]
 80258b6:	681b      	ldr	r3, [r3, #0]
 80258b8:	4a41      	ldr	r2, [pc, #260]	@ (80259c0 <UART_SetConfig+0x640>)
 80258ba:	4293      	cmp	r3, r2
 80258bc:	f040 8082 	bne.w	80259c4 <UART_SetConfig+0x644>
 80258c0:	4b3c      	ldr	r3, [pc, #240]	@ (80259b4 <UART_SetConfig+0x634>)
 80258c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80258c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80258c8:	2b28      	cmp	r3, #40	@ 0x28
 80258ca:	d86d      	bhi.n	80259a8 <UART_SetConfig+0x628>
 80258cc:	a201      	add	r2, pc, #4	@ (adr r2, 80258d4 <UART_SetConfig+0x554>)
 80258ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80258d2:	bf00      	nop
 80258d4:	08025979 	.word	0x08025979
 80258d8:	080259a9 	.word	0x080259a9
 80258dc:	080259a9 	.word	0x080259a9
 80258e0:	080259a9 	.word	0x080259a9
 80258e4:	080259a9 	.word	0x080259a9
 80258e8:	080259a9 	.word	0x080259a9
 80258ec:	080259a9 	.word	0x080259a9
 80258f0:	080259a9 	.word	0x080259a9
 80258f4:	08025981 	.word	0x08025981
 80258f8:	080259a9 	.word	0x080259a9
 80258fc:	080259a9 	.word	0x080259a9
 8025900:	080259a9 	.word	0x080259a9
 8025904:	080259a9 	.word	0x080259a9
 8025908:	080259a9 	.word	0x080259a9
 802590c:	080259a9 	.word	0x080259a9
 8025910:	080259a9 	.word	0x080259a9
 8025914:	08025989 	.word	0x08025989
 8025918:	080259a9 	.word	0x080259a9
 802591c:	080259a9 	.word	0x080259a9
 8025920:	080259a9 	.word	0x080259a9
 8025924:	080259a9 	.word	0x080259a9
 8025928:	080259a9 	.word	0x080259a9
 802592c:	080259a9 	.word	0x080259a9
 8025930:	080259a9 	.word	0x080259a9
 8025934:	08025991 	.word	0x08025991
 8025938:	080259a9 	.word	0x080259a9
 802593c:	080259a9 	.word	0x080259a9
 8025940:	080259a9 	.word	0x080259a9
 8025944:	080259a9 	.word	0x080259a9
 8025948:	080259a9 	.word	0x080259a9
 802594c:	080259a9 	.word	0x080259a9
 8025950:	080259a9 	.word	0x080259a9
 8025954:	08025999 	.word	0x08025999
 8025958:	080259a9 	.word	0x080259a9
 802595c:	080259a9 	.word	0x080259a9
 8025960:	080259a9 	.word	0x080259a9
 8025964:	080259a9 	.word	0x080259a9
 8025968:	080259a9 	.word	0x080259a9
 802596c:	080259a9 	.word	0x080259a9
 8025970:	080259a9 	.word	0x080259a9
 8025974:	080259a1 	.word	0x080259a1
 8025978:	2301      	movs	r3, #1
 802597a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802597e:	e0d6      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025980:	2304      	movs	r3, #4
 8025982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025986:	e0d2      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025988:	2308      	movs	r3, #8
 802598a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802598e:	e0ce      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025990:	2310      	movs	r3, #16
 8025992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025996:	e0ca      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025998:	2320      	movs	r3, #32
 802599a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802599e:	e0c6      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80259a0:	2340      	movs	r3, #64	@ 0x40
 80259a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80259a6:	e0c2      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80259a8:	2380      	movs	r3, #128	@ 0x80
 80259aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80259ae:	e0be      	b.n	8025b2e <UART_SetConfig+0x7ae>
 80259b0:	40011400 	.word	0x40011400
 80259b4:	58024400 	.word	0x58024400
 80259b8:	40007800 	.word	0x40007800
 80259bc:	40007c00 	.word	0x40007c00
 80259c0:	40011800 	.word	0x40011800
 80259c4:	697b      	ldr	r3, [r7, #20]
 80259c6:	681b      	ldr	r3, [r3, #0]
 80259c8:	4aad      	ldr	r2, [pc, #692]	@ (8025c80 <UART_SetConfig+0x900>)
 80259ca:	4293      	cmp	r3, r2
 80259cc:	d176      	bne.n	8025abc <UART_SetConfig+0x73c>
 80259ce:	4bad      	ldr	r3, [pc, #692]	@ (8025c84 <UART_SetConfig+0x904>)
 80259d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80259d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80259d6:	2b28      	cmp	r3, #40	@ 0x28
 80259d8:	d86c      	bhi.n	8025ab4 <UART_SetConfig+0x734>
 80259da:	a201      	add	r2, pc, #4	@ (adr r2, 80259e0 <UART_SetConfig+0x660>)
 80259dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80259e0:	08025a85 	.word	0x08025a85
 80259e4:	08025ab5 	.word	0x08025ab5
 80259e8:	08025ab5 	.word	0x08025ab5
 80259ec:	08025ab5 	.word	0x08025ab5
 80259f0:	08025ab5 	.word	0x08025ab5
 80259f4:	08025ab5 	.word	0x08025ab5
 80259f8:	08025ab5 	.word	0x08025ab5
 80259fc:	08025ab5 	.word	0x08025ab5
 8025a00:	08025a8d 	.word	0x08025a8d
 8025a04:	08025ab5 	.word	0x08025ab5
 8025a08:	08025ab5 	.word	0x08025ab5
 8025a0c:	08025ab5 	.word	0x08025ab5
 8025a10:	08025ab5 	.word	0x08025ab5
 8025a14:	08025ab5 	.word	0x08025ab5
 8025a18:	08025ab5 	.word	0x08025ab5
 8025a1c:	08025ab5 	.word	0x08025ab5
 8025a20:	08025a95 	.word	0x08025a95
 8025a24:	08025ab5 	.word	0x08025ab5
 8025a28:	08025ab5 	.word	0x08025ab5
 8025a2c:	08025ab5 	.word	0x08025ab5
 8025a30:	08025ab5 	.word	0x08025ab5
 8025a34:	08025ab5 	.word	0x08025ab5
 8025a38:	08025ab5 	.word	0x08025ab5
 8025a3c:	08025ab5 	.word	0x08025ab5
 8025a40:	08025a9d 	.word	0x08025a9d
 8025a44:	08025ab5 	.word	0x08025ab5
 8025a48:	08025ab5 	.word	0x08025ab5
 8025a4c:	08025ab5 	.word	0x08025ab5
 8025a50:	08025ab5 	.word	0x08025ab5
 8025a54:	08025ab5 	.word	0x08025ab5
 8025a58:	08025ab5 	.word	0x08025ab5
 8025a5c:	08025ab5 	.word	0x08025ab5
 8025a60:	08025aa5 	.word	0x08025aa5
 8025a64:	08025ab5 	.word	0x08025ab5
 8025a68:	08025ab5 	.word	0x08025ab5
 8025a6c:	08025ab5 	.word	0x08025ab5
 8025a70:	08025ab5 	.word	0x08025ab5
 8025a74:	08025ab5 	.word	0x08025ab5
 8025a78:	08025ab5 	.word	0x08025ab5
 8025a7c:	08025ab5 	.word	0x08025ab5
 8025a80:	08025aad 	.word	0x08025aad
 8025a84:	2301      	movs	r3, #1
 8025a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025a8a:	e050      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025a8c:	2304      	movs	r3, #4
 8025a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025a92:	e04c      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025a94:	2308      	movs	r3, #8
 8025a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025a9a:	e048      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025a9c:	2310      	movs	r3, #16
 8025a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025aa2:	e044      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025aa4:	2320      	movs	r3, #32
 8025aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025aaa:	e040      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025aac:	2340      	movs	r3, #64	@ 0x40
 8025aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025ab2:	e03c      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025ab4:	2380      	movs	r3, #128	@ 0x80
 8025ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025aba:	e038      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025abc:	697b      	ldr	r3, [r7, #20]
 8025abe:	681b      	ldr	r3, [r3, #0]
 8025ac0:	4a71      	ldr	r2, [pc, #452]	@ (8025c88 <UART_SetConfig+0x908>)
 8025ac2:	4293      	cmp	r3, r2
 8025ac4:	d130      	bne.n	8025b28 <UART_SetConfig+0x7a8>
 8025ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8025c84 <UART_SetConfig+0x904>)
 8025ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8025aca:	f003 0307 	and.w	r3, r3, #7
 8025ace:	2b05      	cmp	r3, #5
 8025ad0:	d826      	bhi.n	8025b20 <UART_SetConfig+0x7a0>
 8025ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8025ad8 <UART_SetConfig+0x758>)
 8025ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025ad8:	08025af1 	.word	0x08025af1
 8025adc:	08025af9 	.word	0x08025af9
 8025ae0:	08025b01 	.word	0x08025b01
 8025ae4:	08025b09 	.word	0x08025b09
 8025ae8:	08025b11 	.word	0x08025b11
 8025aec:	08025b19 	.word	0x08025b19
 8025af0:	2302      	movs	r3, #2
 8025af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025af6:	e01a      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025af8:	2304      	movs	r3, #4
 8025afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025afe:	e016      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025b00:	2308      	movs	r3, #8
 8025b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025b06:	e012      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025b08:	2310      	movs	r3, #16
 8025b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025b0e:	e00e      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025b10:	2320      	movs	r3, #32
 8025b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025b16:	e00a      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025b18:	2340      	movs	r3, #64	@ 0x40
 8025b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025b1e:	e006      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025b20:	2380      	movs	r3, #128	@ 0x80
 8025b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8025b26:	e002      	b.n	8025b2e <UART_SetConfig+0x7ae>
 8025b28:	2380      	movs	r3, #128	@ 0x80
 8025b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8025b2e:	697b      	ldr	r3, [r7, #20]
 8025b30:	681b      	ldr	r3, [r3, #0]
 8025b32:	4a55      	ldr	r2, [pc, #340]	@ (8025c88 <UART_SetConfig+0x908>)
 8025b34:	4293      	cmp	r3, r2
 8025b36:	f040 80f8 	bne.w	8025d2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8025b3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8025b3e:	2b20      	cmp	r3, #32
 8025b40:	dc46      	bgt.n	8025bd0 <UART_SetConfig+0x850>
 8025b42:	2b02      	cmp	r3, #2
 8025b44:	db75      	blt.n	8025c32 <UART_SetConfig+0x8b2>
 8025b46:	3b02      	subs	r3, #2
 8025b48:	2b1e      	cmp	r3, #30
 8025b4a:	d872      	bhi.n	8025c32 <UART_SetConfig+0x8b2>
 8025b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8025b54 <UART_SetConfig+0x7d4>)
 8025b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025b52:	bf00      	nop
 8025b54:	08025bd7 	.word	0x08025bd7
 8025b58:	08025c33 	.word	0x08025c33
 8025b5c:	08025bdf 	.word	0x08025bdf
 8025b60:	08025c33 	.word	0x08025c33
 8025b64:	08025c33 	.word	0x08025c33
 8025b68:	08025c33 	.word	0x08025c33
 8025b6c:	08025bef 	.word	0x08025bef
 8025b70:	08025c33 	.word	0x08025c33
 8025b74:	08025c33 	.word	0x08025c33
 8025b78:	08025c33 	.word	0x08025c33
 8025b7c:	08025c33 	.word	0x08025c33
 8025b80:	08025c33 	.word	0x08025c33
 8025b84:	08025c33 	.word	0x08025c33
 8025b88:	08025c33 	.word	0x08025c33
 8025b8c:	08025bff 	.word	0x08025bff
 8025b90:	08025c33 	.word	0x08025c33
 8025b94:	08025c33 	.word	0x08025c33
 8025b98:	08025c33 	.word	0x08025c33
 8025b9c:	08025c33 	.word	0x08025c33
 8025ba0:	08025c33 	.word	0x08025c33
 8025ba4:	08025c33 	.word	0x08025c33
 8025ba8:	08025c33 	.word	0x08025c33
 8025bac:	08025c33 	.word	0x08025c33
 8025bb0:	08025c33 	.word	0x08025c33
 8025bb4:	08025c33 	.word	0x08025c33
 8025bb8:	08025c33 	.word	0x08025c33
 8025bbc:	08025c33 	.word	0x08025c33
 8025bc0:	08025c33 	.word	0x08025c33
 8025bc4:	08025c33 	.word	0x08025c33
 8025bc8:	08025c33 	.word	0x08025c33
 8025bcc:	08025c25 	.word	0x08025c25
 8025bd0:	2b40      	cmp	r3, #64	@ 0x40
 8025bd2:	d02a      	beq.n	8025c2a <UART_SetConfig+0x8aa>
 8025bd4:	e02d      	b.n	8025c32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8025bd6:	f7fe fa15 	bl	8024004 <HAL_RCCEx_GetD3PCLK1Freq>
 8025bda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8025bdc:	e02f      	b.n	8025c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8025bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8025be2:	4618      	mov	r0, r3
 8025be4:	f7fe fa24 	bl	8024030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8025be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025bec:	e027      	b.n	8025c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8025bee:	f107 0318 	add.w	r3, r7, #24
 8025bf2:	4618      	mov	r0, r3
 8025bf4:	f7fe fb70 	bl	80242d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8025bf8:	69fb      	ldr	r3, [r7, #28]
 8025bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025bfc:	e01f      	b.n	8025c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8025bfe:	4b21      	ldr	r3, [pc, #132]	@ (8025c84 <UART_SetConfig+0x904>)
 8025c00:	681b      	ldr	r3, [r3, #0]
 8025c02:	f003 0320 	and.w	r3, r3, #32
 8025c06:	2b00      	cmp	r3, #0
 8025c08:	d009      	beq.n	8025c1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8025c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8025c84 <UART_SetConfig+0x904>)
 8025c0c:	681b      	ldr	r3, [r3, #0]
 8025c0e:	08db      	lsrs	r3, r3, #3
 8025c10:	f003 0303 	and.w	r3, r3, #3
 8025c14:	4a1d      	ldr	r2, [pc, #116]	@ (8025c8c <UART_SetConfig+0x90c>)
 8025c16:	fa22 f303 	lsr.w	r3, r2, r3
 8025c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8025c1c:	e00f      	b.n	8025c3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8025c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8025c8c <UART_SetConfig+0x90c>)
 8025c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025c22:	e00c      	b.n	8025c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8025c24:	4b1a      	ldr	r3, [pc, #104]	@ (8025c90 <UART_SetConfig+0x910>)
 8025c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025c28:	e009      	b.n	8025c3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8025c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8025c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025c30:	e005      	b.n	8025c3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8025c32:	2300      	movs	r3, #0
 8025c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8025c36:	2301      	movs	r3, #1
 8025c38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8025c3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8025c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025c40:	2b00      	cmp	r3, #0
 8025c42:	f000 81ee 	beq.w	8026022 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8025c46:	697b      	ldr	r3, [r7, #20]
 8025c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025c4a:	4a12      	ldr	r2, [pc, #72]	@ (8025c94 <UART_SetConfig+0x914>)
 8025c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025c50:	461a      	mov	r2, r3
 8025c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8025c58:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8025c5a:	697b      	ldr	r3, [r7, #20]
 8025c5c:	685a      	ldr	r2, [r3, #4]
 8025c5e:	4613      	mov	r3, r2
 8025c60:	005b      	lsls	r3, r3, #1
 8025c62:	4413      	add	r3, r2
 8025c64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025c66:	429a      	cmp	r2, r3
 8025c68:	d305      	bcc.n	8025c76 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8025c6a:	697b      	ldr	r3, [r7, #20]
 8025c6c:	685b      	ldr	r3, [r3, #4]
 8025c6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8025c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8025c72:	429a      	cmp	r2, r3
 8025c74:	d910      	bls.n	8025c98 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8025c76:	2301      	movs	r3, #1
 8025c78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8025c7c:	e1d1      	b.n	8026022 <UART_SetConfig+0xca2>
 8025c7e:	bf00      	nop
 8025c80:	40011c00 	.word	0x40011c00
 8025c84:	58024400 	.word	0x58024400
 8025c88:	58000c00 	.word	0x58000c00
 8025c8c:	03d09000 	.word	0x03d09000
 8025c90:	003d0900 	.word	0x003d0900
 8025c94:	080271cc 	.word	0x080271cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025c9a:	2200      	movs	r2, #0
 8025c9c:	60bb      	str	r3, [r7, #8]
 8025c9e:	60fa      	str	r2, [r7, #12]
 8025ca0:	697b      	ldr	r3, [r7, #20]
 8025ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025ca4:	4ac0      	ldr	r2, [pc, #768]	@ (8025fa8 <UART_SetConfig+0xc28>)
 8025ca6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025caa:	b29b      	uxth	r3, r3
 8025cac:	2200      	movs	r2, #0
 8025cae:	603b      	str	r3, [r7, #0]
 8025cb0:	607a      	str	r2, [r7, #4]
 8025cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8025cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8025cba:	f7fa fb9f 	bl	80203fc <__aeabi_uldivmod>
 8025cbe:	4602      	mov	r2, r0
 8025cc0:	460b      	mov	r3, r1
 8025cc2:	4610      	mov	r0, r2
 8025cc4:	4619      	mov	r1, r3
 8025cc6:	f04f 0200 	mov.w	r2, #0
 8025cca:	f04f 0300 	mov.w	r3, #0
 8025cce:	020b      	lsls	r3, r1, #8
 8025cd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8025cd4:	0202      	lsls	r2, r0, #8
 8025cd6:	6979      	ldr	r1, [r7, #20]
 8025cd8:	6849      	ldr	r1, [r1, #4]
 8025cda:	0849      	lsrs	r1, r1, #1
 8025cdc:	2000      	movs	r0, #0
 8025cde:	460c      	mov	r4, r1
 8025ce0:	4605      	mov	r5, r0
 8025ce2:	eb12 0804 	adds.w	r8, r2, r4
 8025ce6:	eb43 0905 	adc.w	r9, r3, r5
 8025cea:	697b      	ldr	r3, [r7, #20]
 8025cec:	685b      	ldr	r3, [r3, #4]
 8025cee:	2200      	movs	r2, #0
 8025cf0:	469a      	mov	sl, r3
 8025cf2:	4693      	mov	fp, r2
 8025cf4:	4652      	mov	r2, sl
 8025cf6:	465b      	mov	r3, fp
 8025cf8:	4640      	mov	r0, r8
 8025cfa:	4649      	mov	r1, r9
 8025cfc:	f7fa fb7e 	bl	80203fc <__aeabi_uldivmod>
 8025d00:	4602      	mov	r2, r0
 8025d02:	460b      	mov	r3, r1
 8025d04:	4613      	mov	r3, r2
 8025d06:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8025d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025d0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8025d0e:	d308      	bcc.n	8025d22 <UART_SetConfig+0x9a2>
 8025d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8025d16:	d204      	bcs.n	8025d22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8025d18:	697b      	ldr	r3, [r7, #20]
 8025d1a:	681b      	ldr	r3, [r3, #0]
 8025d1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8025d1e:	60da      	str	r2, [r3, #12]
 8025d20:	e17f      	b.n	8026022 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8025d22:	2301      	movs	r3, #1
 8025d24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8025d28:	e17b      	b.n	8026022 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8025d2a:	697b      	ldr	r3, [r7, #20]
 8025d2c:	69db      	ldr	r3, [r3, #28]
 8025d2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8025d32:	f040 80bd 	bne.w	8025eb0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8025d36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8025d3a:	2b20      	cmp	r3, #32
 8025d3c:	dc48      	bgt.n	8025dd0 <UART_SetConfig+0xa50>
 8025d3e:	2b00      	cmp	r3, #0
 8025d40:	db7b      	blt.n	8025e3a <UART_SetConfig+0xaba>
 8025d42:	2b20      	cmp	r3, #32
 8025d44:	d879      	bhi.n	8025e3a <UART_SetConfig+0xaba>
 8025d46:	a201      	add	r2, pc, #4	@ (adr r2, 8025d4c <UART_SetConfig+0x9cc>)
 8025d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025d4c:	08025dd7 	.word	0x08025dd7
 8025d50:	08025ddf 	.word	0x08025ddf
 8025d54:	08025e3b 	.word	0x08025e3b
 8025d58:	08025e3b 	.word	0x08025e3b
 8025d5c:	08025de7 	.word	0x08025de7
 8025d60:	08025e3b 	.word	0x08025e3b
 8025d64:	08025e3b 	.word	0x08025e3b
 8025d68:	08025e3b 	.word	0x08025e3b
 8025d6c:	08025df7 	.word	0x08025df7
 8025d70:	08025e3b 	.word	0x08025e3b
 8025d74:	08025e3b 	.word	0x08025e3b
 8025d78:	08025e3b 	.word	0x08025e3b
 8025d7c:	08025e3b 	.word	0x08025e3b
 8025d80:	08025e3b 	.word	0x08025e3b
 8025d84:	08025e3b 	.word	0x08025e3b
 8025d88:	08025e3b 	.word	0x08025e3b
 8025d8c:	08025e07 	.word	0x08025e07
 8025d90:	08025e3b 	.word	0x08025e3b
 8025d94:	08025e3b 	.word	0x08025e3b
 8025d98:	08025e3b 	.word	0x08025e3b
 8025d9c:	08025e3b 	.word	0x08025e3b
 8025da0:	08025e3b 	.word	0x08025e3b
 8025da4:	08025e3b 	.word	0x08025e3b
 8025da8:	08025e3b 	.word	0x08025e3b
 8025dac:	08025e3b 	.word	0x08025e3b
 8025db0:	08025e3b 	.word	0x08025e3b
 8025db4:	08025e3b 	.word	0x08025e3b
 8025db8:	08025e3b 	.word	0x08025e3b
 8025dbc:	08025e3b 	.word	0x08025e3b
 8025dc0:	08025e3b 	.word	0x08025e3b
 8025dc4:	08025e3b 	.word	0x08025e3b
 8025dc8:	08025e3b 	.word	0x08025e3b
 8025dcc:	08025e2d 	.word	0x08025e2d
 8025dd0:	2b40      	cmp	r3, #64	@ 0x40
 8025dd2:	d02e      	beq.n	8025e32 <UART_SetConfig+0xab2>
 8025dd4:	e031      	b.n	8025e3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8025dd6:	f7fc ff49 	bl	8022c6c <HAL_RCC_GetPCLK1Freq>
 8025dda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8025ddc:	e033      	b.n	8025e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8025dde:	f7fc ff5b 	bl	8022c98 <HAL_RCC_GetPCLK2Freq>
 8025de2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8025de4:	e02f      	b.n	8025e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8025de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8025dea:	4618      	mov	r0, r3
 8025dec:	f7fe f920 	bl	8024030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8025df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025df4:	e027      	b.n	8025e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8025df6:	f107 0318 	add.w	r3, r7, #24
 8025dfa:	4618      	mov	r0, r3
 8025dfc:	f7fe fa6c 	bl	80242d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8025e00:	69fb      	ldr	r3, [r7, #28]
 8025e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025e04:	e01f      	b.n	8025e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8025e06:	4b69      	ldr	r3, [pc, #420]	@ (8025fac <UART_SetConfig+0xc2c>)
 8025e08:	681b      	ldr	r3, [r3, #0]
 8025e0a:	f003 0320 	and.w	r3, r3, #32
 8025e0e:	2b00      	cmp	r3, #0
 8025e10:	d009      	beq.n	8025e26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8025e12:	4b66      	ldr	r3, [pc, #408]	@ (8025fac <UART_SetConfig+0xc2c>)
 8025e14:	681b      	ldr	r3, [r3, #0]
 8025e16:	08db      	lsrs	r3, r3, #3
 8025e18:	f003 0303 	and.w	r3, r3, #3
 8025e1c:	4a64      	ldr	r2, [pc, #400]	@ (8025fb0 <UART_SetConfig+0xc30>)
 8025e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8025e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8025e24:	e00f      	b.n	8025e46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8025e26:	4b62      	ldr	r3, [pc, #392]	@ (8025fb0 <UART_SetConfig+0xc30>)
 8025e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025e2a:	e00c      	b.n	8025e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8025e2c:	4b61      	ldr	r3, [pc, #388]	@ (8025fb4 <UART_SetConfig+0xc34>)
 8025e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025e30:	e009      	b.n	8025e46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8025e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8025e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025e38:	e005      	b.n	8025e46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8025e3a:	2300      	movs	r3, #0
 8025e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8025e3e:	2301      	movs	r3, #1
 8025e40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8025e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8025e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025e48:	2b00      	cmp	r3, #0
 8025e4a:	f000 80ea 	beq.w	8026022 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025e4e:	697b      	ldr	r3, [r7, #20]
 8025e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025e52:	4a55      	ldr	r2, [pc, #340]	@ (8025fa8 <UART_SetConfig+0xc28>)
 8025e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025e58:	461a      	mov	r2, r3
 8025e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8025e60:	005a      	lsls	r2, r3, #1
 8025e62:	697b      	ldr	r3, [r7, #20]
 8025e64:	685b      	ldr	r3, [r3, #4]
 8025e66:	085b      	lsrs	r3, r3, #1
 8025e68:	441a      	add	r2, r3
 8025e6a:	697b      	ldr	r3, [r7, #20]
 8025e6c:	685b      	ldr	r3, [r3, #4]
 8025e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8025e72:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8025e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025e76:	2b0f      	cmp	r3, #15
 8025e78:	d916      	bls.n	8025ea8 <UART_SetConfig+0xb28>
 8025e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8025e80:	d212      	bcs.n	8025ea8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8025e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025e84:	b29b      	uxth	r3, r3
 8025e86:	f023 030f 	bic.w	r3, r3, #15
 8025e8a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8025e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025e8e:	085b      	lsrs	r3, r3, #1
 8025e90:	b29b      	uxth	r3, r3
 8025e92:	f003 0307 	and.w	r3, r3, #7
 8025e96:	b29a      	uxth	r2, r3
 8025e98:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8025e9a:	4313      	orrs	r3, r2
 8025e9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8025e9e:	697b      	ldr	r3, [r7, #20]
 8025ea0:	681b      	ldr	r3, [r3, #0]
 8025ea2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8025ea4:	60da      	str	r2, [r3, #12]
 8025ea6:	e0bc      	b.n	8026022 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8025ea8:	2301      	movs	r3, #1
 8025eaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8025eae:	e0b8      	b.n	8026022 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8025eb0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8025eb4:	2b20      	cmp	r3, #32
 8025eb6:	dc4b      	bgt.n	8025f50 <UART_SetConfig+0xbd0>
 8025eb8:	2b00      	cmp	r3, #0
 8025eba:	f2c0 8087 	blt.w	8025fcc <UART_SetConfig+0xc4c>
 8025ebe:	2b20      	cmp	r3, #32
 8025ec0:	f200 8084 	bhi.w	8025fcc <UART_SetConfig+0xc4c>
 8025ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8025ecc <UART_SetConfig+0xb4c>)
 8025ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025eca:	bf00      	nop
 8025ecc:	08025f57 	.word	0x08025f57
 8025ed0:	08025f5f 	.word	0x08025f5f
 8025ed4:	08025fcd 	.word	0x08025fcd
 8025ed8:	08025fcd 	.word	0x08025fcd
 8025edc:	08025f67 	.word	0x08025f67
 8025ee0:	08025fcd 	.word	0x08025fcd
 8025ee4:	08025fcd 	.word	0x08025fcd
 8025ee8:	08025fcd 	.word	0x08025fcd
 8025eec:	08025f77 	.word	0x08025f77
 8025ef0:	08025fcd 	.word	0x08025fcd
 8025ef4:	08025fcd 	.word	0x08025fcd
 8025ef8:	08025fcd 	.word	0x08025fcd
 8025efc:	08025fcd 	.word	0x08025fcd
 8025f00:	08025fcd 	.word	0x08025fcd
 8025f04:	08025fcd 	.word	0x08025fcd
 8025f08:	08025fcd 	.word	0x08025fcd
 8025f0c:	08025f87 	.word	0x08025f87
 8025f10:	08025fcd 	.word	0x08025fcd
 8025f14:	08025fcd 	.word	0x08025fcd
 8025f18:	08025fcd 	.word	0x08025fcd
 8025f1c:	08025fcd 	.word	0x08025fcd
 8025f20:	08025fcd 	.word	0x08025fcd
 8025f24:	08025fcd 	.word	0x08025fcd
 8025f28:	08025fcd 	.word	0x08025fcd
 8025f2c:	08025fcd 	.word	0x08025fcd
 8025f30:	08025fcd 	.word	0x08025fcd
 8025f34:	08025fcd 	.word	0x08025fcd
 8025f38:	08025fcd 	.word	0x08025fcd
 8025f3c:	08025fcd 	.word	0x08025fcd
 8025f40:	08025fcd 	.word	0x08025fcd
 8025f44:	08025fcd 	.word	0x08025fcd
 8025f48:	08025fcd 	.word	0x08025fcd
 8025f4c:	08025fbf 	.word	0x08025fbf
 8025f50:	2b40      	cmp	r3, #64	@ 0x40
 8025f52:	d037      	beq.n	8025fc4 <UART_SetConfig+0xc44>
 8025f54:	e03a      	b.n	8025fcc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8025f56:	f7fc fe89 	bl	8022c6c <HAL_RCC_GetPCLK1Freq>
 8025f5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8025f5c:	e03c      	b.n	8025fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8025f5e:	f7fc fe9b 	bl	8022c98 <HAL_RCC_GetPCLK2Freq>
 8025f62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8025f64:	e038      	b.n	8025fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8025f66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8025f6a:	4618      	mov	r0, r3
 8025f6c:	f7fe f860 	bl	8024030 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8025f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8025f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025f74:	e030      	b.n	8025fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8025f76:	f107 0318 	add.w	r3, r7, #24
 8025f7a:	4618      	mov	r0, r3
 8025f7c:	f7fe f9ac 	bl	80242d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8025f80:	69fb      	ldr	r3, [r7, #28]
 8025f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025f84:	e028      	b.n	8025fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8025f86:	4b09      	ldr	r3, [pc, #36]	@ (8025fac <UART_SetConfig+0xc2c>)
 8025f88:	681b      	ldr	r3, [r3, #0]
 8025f8a:	f003 0320 	and.w	r3, r3, #32
 8025f8e:	2b00      	cmp	r3, #0
 8025f90:	d012      	beq.n	8025fb8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8025f92:	4b06      	ldr	r3, [pc, #24]	@ (8025fac <UART_SetConfig+0xc2c>)
 8025f94:	681b      	ldr	r3, [r3, #0]
 8025f96:	08db      	lsrs	r3, r3, #3
 8025f98:	f003 0303 	and.w	r3, r3, #3
 8025f9c:	4a04      	ldr	r2, [pc, #16]	@ (8025fb0 <UART_SetConfig+0xc30>)
 8025f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8025fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8025fa4:	e018      	b.n	8025fd8 <UART_SetConfig+0xc58>
 8025fa6:	bf00      	nop
 8025fa8:	080271cc 	.word	0x080271cc
 8025fac:	58024400 	.word	0x58024400
 8025fb0:	03d09000 	.word	0x03d09000
 8025fb4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8025fb8:	4b24      	ldr	r3, [pc, #144]	@ (802604c <UART_SetConfig+0xccc>)
 8025fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025fbc:	e00c      	b.n	8025fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8025fbe:	4b24      	ldr	r3, [pc, #144]	@ (8026050 <UART_SetConfig+0xcd0>)
 8025fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025fc2:	e009      	b.n	8025fd8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8025fc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8025fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8025fca:	e005      	b.n	8025fd8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8025fcc:	2300      	movs	r3, #0
 8025fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8025fd0:	2301      	movs	r3, #1
 8025fd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8025fd6:	bf00      	nop
    }

    if (pclk != 0U)
 8025fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025fda:	2b00      	cmp	r3, #0
 8025fdc:	d021      	beq.n	8026022 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8025fde:	697b      	ldr	r3, [r7, #20]
 8025fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8025fe2:	4a1c      	ldr	r2, [pc, #112]	@ (8026054 <UART_SetConfig+0xcd4>)
 8025fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8025fe8:	461a      	mov	r2, r3
 8025fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8025fec:	fbb3 f2f2 	udiv	r2, r3, r2
 8025ff0:	697b      	ldr	r3, [r7, #20]
 8025ff2:	685b      	ldr	r3, [r3, #4]
 8025ff4:	085b      	lsrs	r3, r3, #1
 8025ff6:	441a      	add	r2, r3
 8025ff8:	697b      	ldr	r3, [r7, #20]
 8025ffa:	685b      	ldr	r3, [r3, #4]
 8025ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8026000:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8026002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8026004:	2b0f      	cmp	r3, #15
 8026006:	d909      	bls.n	802601c <UART_SetConfig+0xc9c>
 8026008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802600a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 802600e:	d205      	bcs.n	802601c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8026010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8026012:	b29a      	uxth	r2, r3
 8026014:	697b      	ldr	r3, [r7, #20]
 8026016:	681b      	ldr	r3, [r3, #0]
 8026018:	60da      	str	r2, [r3, #12]
 802601a:	e002      	b.n	8026022 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 802601c:	2301      	movs	r3, #1
 802601e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8026022:	697b      	ldr	r3, [r7, #20]
 8026024:	2201      	movs	r2, #1
 8026026:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 802602a:	697b      	ldr	r3, [r7, #20]
 802602c:	2201      	movs	r2, #1
 802602e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8026032:	697b      	ldr	r3, [r7, #20]
 8026034:	2200      	movs	r2, #0
 8026036:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8026038:	697b      	ldr	r3, [r7, #20]
 802603a:	2200      	movs	r2, #0
 802603c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 802603e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8026042:	4618      	mov	r0, r3
 8026044:	3748      	adds	r7, #72	@ 0x48
 8026046:	46bd      	mov	sp, r7
 8026048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802604c:	03d09000 	.word	0x03d09000
 8026050:	003d0900 	.word	0x003d0900
 8026054:	080271cc 	.word	0x080271cc

08026058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8026058:	b480      	push	{r7}
 802605a:	b083      	sub	sp, #12
 802605c:	af00      	add	r7, sp, #0
 802605e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8026060:	687b      	ldr	r3, [r7, #4]
 8026062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026064:	f003 0308 	and.w	r3, r3, #8
 8026068:	2b00      	cmp	r3, #0
 802606a:	d00a      	beq.n	8026082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802606c:	687b      	ldr	r3, [r7, #4]
 802606e:	681b      	ldr	r3, [r3, #0]
 8026070:	685b      	ldr	r3, [r3, #4]
 8026072:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8026076:	687b      	ldr	r3, [r7, #4]
 8026078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802607a:	687b      	ldr	r3, [r7, #4]
 802607c:	681b      	ldr	r3, [r3, #0]
 802607e:	430a      	orrs	r2, r1
 8026080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8026082:	687b      	ldr	r3, [r7, #4]
 8026084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026086:	f003 0301 	and.w	r3, r3, #1
 802608a:	2b00      	cmp	r3, #0
 802608c:	d00a      	beq.n	80260a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802608e:	687b      	ldr	r3, [r7, #4]
 8026090:	681b      	ldr	r3, [r3, #0]
 8026092:	685b      	ldr	r3, [r3, #4]
 8026094:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8026098:	687b      	ldr	r3, [r7, #4]
 802609a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802609c:	687b      	ldr	r3, [r7, #4]
 802609e:	681b      	ldr	r3, [r3, #0]
 80260a0:	430a      	orrs	r2, r1
 80260a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80260a4:	687b      	ldr	r3, [r7, #4]
 80260a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80260a8:	f003 0302 	and.w	r3, r3, #2
 80260ac:	2b00      	cmp	r3, #0
 80260ae:	d00a      	beq.n	80260c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80260b0:	687b      	ldr	r3, [r7, #4]
 80260b2:	681b      	ldr	r3, [r3, #0]
 80260b4:	685b      	ldr	r3, [r3, #4]
 80260b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80260ba:	687b      	ldr	r3, [r7, #4]
 80260bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80260be:	687b      	ldr	r3, [r7, #4]
 80260c0:	681b      	ldr	r3, [r3, #0]
 80260c2:	430a      	orrs	r2, r1
 80260c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80260c6:	687b      	ldr	r3, [r7, #4]
 80260c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80260ca:	f003 0304 	and.w	r3, r3, #4
 80260ce:	2b00      	cmp	r3, #0
 80260d0:	d00a      	beq.n	80260e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80260d2:	687b      	ldr	r3, [r7, #4]
 80260d4:	681b      	ldr	r3, [r3, #0]
 80260d6:	685b      	ldr	r3, [r3, #4]
 80260d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80260dc:	687b      	ldr	r3, [r7, #4]
 80260de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80260e0:	687b      	ldr	r3, [r7, #4]
 80260e2:	681b      	ldr	r3, [r3, #0]
 80260e4:	430a      	orrs	r2, r1
 80260e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80260e8:	687b      	ldr	r3, [r7, #4]
 80260ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80260ec:	f003 0310 	and.w	r3, r3, #16
 80260f0:	2b00      	cmp	r3, #0
 80260f2:	d00a      	beq.n	802610a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80260f4:	687b      	ldr	r3, [r7, #4]
 80260f6:	681b      	ldr	r3, [r3, #0]
 80260f8:	689b      	ldr	r3, [r3, #8]
 80260fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80260fe:	687b      	ldr	r3, [r7, #4]
 8026100:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8026102:	687b      	ldr	r3, [r7, #4]
 8026104:	681b      	ldr	r3, [r3, #0]
 8026106:	430a      	orrs	r2, r1
 8026108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802610a:	687b      	ldr	r3, [r7, #4]
 802610c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802610e:	f003 0320 	and.w	r3, r3, #32
 8026112:	2b00      	cmp	r3, #0
 8026114:	d00a      	beq.n	802612c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8026116:	687b      	ldr	r3, [r7, #4]
 8026118:	681b      	ldr	r3, [r3, #0]
 802611a:	689b      	ldr	r3, [r3, #8]
 802611c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8026120:	687b      	ldr	r3, [r7, #4]
 8026122:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8026124:	687b      	ldr	r3, [r7, #4]
 8026126:	681b      	ldr	r3, [r3, #0]
 8026128:	430a      	orrs	r2, r1
 802612a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802612c:	687b      	ldr	r3, [r7, #4]
 802612e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8026134:	2b00      	cmp	r3, #0
 8026136:	d01a      	beq.n	802616e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8026138:	687b      	ldr	r3, [r7, #4]
 802613a:	681b      	ldr	r3, [r3, #0]
 802613c:	685b      	ldr	r3, [r3, #4]
 802613e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8026142:	687b      	ldr	r3, [r7, #4]
 8026144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8026146:	687b      	ldr	r3, [r7, #4]
 8026148:	681b      	ldr	r3, [r3, #0]
 802614a:	430a      	orrs	r2, r1
 802614c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802614e:	687b      	ldr	r3, [r7, #4]
 8026150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8026152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8026156:	d10a      	bne.n	802616e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	681b      	ldr	r3, [r3, #0]
 802615c:	685b      	ldr	r3, [r3, #4]
 802615e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8026162:	687b      	ldr	r3, [r7, #4]
 8026164:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8026166:	687b      	ldr	r3, [r7, #4]
 8026168:	681b      	ldr	r3, [r3, #0]
 802616a:	430a      	orrs	r2, r1
 802616c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802616e:	687b      	ldr	r3, [r7, #4]
 8026170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8026172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8026176:	2b00      	cmp	r3, #0
 8026178:	d00a      	beq.n	8026190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802617a:	687b      	ldr	r3, [r7, #4]
 802617c:	681b      	ldr	r3, [r3, #0]
 802617e:	685b      	ldr	r3, [r3, #4]
 8026180:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8026184:	687b      	ldr	r3, [r7, #4]
 8026186:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8026188:	687b      	ldr	r3, [r7, #4]
 802618a:	681b      	ldr	r3, [r3, #0]
 802618c:	430a      	orrs	r2, r1
 802618e:	605a      	str	r2, [r3, #4]
  }
}
 8026190:	bf00      	nop
 8026192:	370c      	adds	r7, #12
 8026194:	46bd      	mov	sp, r7
 8026196:	f85d 7b04 	ldr.w	r7, [sp], #4
 802619a:	4770      	bx	lr

0802619c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802619c:	b580      	push	{r7, lr}
 802619e:	b098      	sub	sp, #96	@ 0x60
 80261a0:	af02      	add	r7, sp, #8
 80261a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80261a4:	687b      	ldr	r3, [r7, #4]
 80261a6:	2200      	movs	r2, #0
 80261a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80261ac:	f7fa fb42 	bl	8020834 <HAL_GetTick>
 80261b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80261b2:	687b      	ldr	r3, [r7, #4]
 80261b4:	681b      	ldr	r3, [r3, #0]
 80261b6:	681b      	ldr	r3, [r3, #0]
 80261b8:	f003 0308 	and.w	r3, r3, #8
 80261bc:	2b08      	cmp	r3, #8
 80261be:	d12f      	bne.n	8026220 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80261c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80261c4:	9300      	str	r3, [sp, #0]
 80261c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80261c8:	2200      	movs	r2, #0
 80261ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80261ce:	6878      	ldr	r0, [r7, #4]
 80261d0:	f000 f88e 	bl	80262f0 <UART_WaitOnFlagUntilTimeout>
 80261d4:	4603      	mov	r3, r0
 80261d6:	2b00      	cmp	r3, #0
 80261d8:	d022      	beq.n	8026220 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80261da:	687b      	ldr	r3, [r7, #4]
 80261dc:	681b      	ldr	r3, [r3, #0]
 80261de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80261e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80261e2:	e853 3f00 	ldrex	r3, [r3]
 80261e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80261e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80261ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80261ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80261f0:	687b      	ldr	r3, [r7, #4]
 80261f2:	681b      	ldr	r3, [r3, #0]
 80261f4:	461a      	mov	r2, r3
 80261f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80261f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80261fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80261fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80261fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8026200:	e841 2300 	strex	r3, r2, [r1]
 8026204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8026206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8026208:	2b00      	cmp	r3, #0
 802620a:	d1e6      	bne.n	80261da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 802620c:	687b      	ldr	r3, [r7, #4]
 802620e:	2220      	movs	r2, #32
 8026210:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8026214:	687b      	ldr	r3, [r7, #4]
 8026216:	2200      	movs	r2, #0
 8026218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802621c:	2303      	movs	r3, #3
 802621e:	e063      	b.n	80262e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8026220:	687b      	ldr	r3, [r7, #4]
 8026222:	681b      	ldr	r3, [r3, #0]
 8026224:	681b      	ldr	r3, [r3, #0]
 8026226:	f003 0304 	and.w	r3, r3, #4
 802622a:	2b04      	cmp	r3, #4
 802622c:	d149      	bne.n	80262c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802622e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8026232:	9300      	str	r3, [sp, #0]
 8026234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8026236:	2200      	movs	r2, #0
 8026238:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 802623c:	6878      	ldr	r0, [r7, #4]
 802623e:	f000 f857 	bl	80262f0 <UART_WaitOnFlagUntilTimeout>
 8026242:	4603      	mov	r3, r0
 8026244:	2b00      	cmp	r3, #0
 8026246:	d03c      	beq.n	80262c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8026248:	687b      	ldr	r3, [r7, #4]
 802624a:	681b      	ldr	r3, [r3, #0]
 802624c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026250:	e853 3f00 	ldrex	r3, [r3]
 8026254:	623b      	str	r3, [r7, #32]
   return(result);
 8026256:	6a3b      	ldr	r3, [r7, #32]
 8026258:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802625c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802625e:	687b      	ldr	r3, [r7, #4]
 8026260:	681b      	ldr	r3, [r3, #0]
 8026262:	461a      	mov	r2, r3
 8026264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8026266:	633b      	str	r3, [r7, #48]	@ 0x30
 8026268:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802626a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802626c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802626e:	e841 2300 	strex	r3, r2, [r1]
 8026272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8026274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8026276:	2b00      	cmp	r3, #0
 8026278:	d1e6      	bne.n	8026248 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802627a:	687b      	ldr	r3, [r7, #4]
 802627c:	681b      	ldr	r3, [r3, #0]
 802627e:	3308      	adds	r3, #8
 8026280:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026282:	693b      	ldr	r3, [r7, #16]
 8026284:	e853 3f00 	ldrex	r3, [r3]
 8026288:	60fb      	str	r3, [r7, #12]
   return(result);
 802628a:	68fb      	ldr	r3, [r7, #12]
 802628c:	f023 0301 	bic.w	r3, r3, #1
 8026290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8026292:	687b      	ldr	r3, [r7, #4]
 8026294:	681b      	ldr	r3, [r3, #0]
 8026296:	3308      	adds	r3, #8
 8026298:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802629a:	61fa      	str	r2, [r7, #28]
 802629c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802629e:	69b9      	ldr	r1, [r7, #24]
 80262a0:	69fa      	ldr	r2, [r7, #28]
 80262a2:	e841 2300 	strex	r3, r2, [r1]
 80262a6:	617b      	str	r3, [r7, #20]
   return(result);
 80262a8:	697b      	ldr	r3, [r7, #20]
 80262aa:	2b00      	cmp	r3, #0
 80262ac:	d1e5      	bne.n	802627a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80262ae:	687b      	ldr	r3, [r7, #4]
 80262b0:	2220      	movs	r2, #32
 80262b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80262b6:	687b      	ldr	r3, [r7, #4]
 80262b8:	2200      	movs	r2, #0
 80262ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80262be:	2303      	movs	r3, #3
 80262c0:	e012      	b.n	80262e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80262c2:	687b      	ldr	r3, [r7, #4]
 80262c4:	2220      	movs	r2, #32
 80262c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80262ca:	687b      	ldr	r3, [r7, #4]
 80262cc:	2220      	movs	r2, #32
 80262ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80262d2:	687b      	ldr	r3, [r7, #4]
 80262d4:	2200      	movs	r2, #0
 80262d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80262d8:	687b      	ldr	r3, [r7, #4]
 80262da:	2200      	movs	r2, #0
 80262dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80262de:	687b      	ldr	r3, [r7, #4]
 80262e0:	2200      	movs	r2, #0
 80262e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80262e6:	2300      	movs	r3, #0
}
 80262e8:	4618      	mov	r0, r3
 80262ea:	3758      	adds	r7, #88	@ 0x58
 80262ec:	46bd      	mov	sp, r7
 80262ee:	bd80      	pop	{r7, pc}

080262f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80262f0:	b580      	push	{r7, lr}
 80262f2:	b084      	sub	sp, #16
 80262f4:	af00      	add	r7, sp, #0
 80262f6:	60f8      	str	r0, [r7, #12]
 80262f8:	60b9      	str	r1, [r7, #8]
 80262fa:	603b      	str	r3, [r7, #0]
 80262fc:	4613      	mov	r3, r2
 80262fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8026300:	e04f      	b.n	80263a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8026302:	69bb      	ldr	r3, [r7, #24]
 8026304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026308:	d04b      	beq.n	80263a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802630a:	f7fa fa93 	bl	8020834 <HAL_GetTick>
 802630e:	4602      	mov	r2, r0
 8026310:	683b      	ldr	r3, [r7, #0]
 8026312:	1ad3      	subs	r3, r2, r3
 8026314:	69ba      	ldr	r2, [r7, #24]
 8026316:	429a      	cmp	r2, r3
 8026318:	d302      	bcc.n	8026320 <UART_WaitOnFlagUntilTimeout+0x30>
 802631a:	69bb      	ldr	r3, [r7, #24]
 802631c:	2b00      	cmp	r3, #0
 802631e:	d101      	bne.n	8026324 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8026320:	2303      	movs	r3, #3
 8026322:	e04e      	b.n	80263c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8026324:	68fb      	ldr	r3, [r7, #12]
 8026326:	681b      	ldr	r3, [r3, #0]
 8026328:	681b      	ldr	r3, [r3, #0]
 802632a:	f003 0304 	and.w	r3, r3, #4
 802632e:	2b00      	cmp	r3, #0
 8026330:	d037      	beq.n	80263a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8026332:	68bb      	ldr	r3, [r7, #8]
 8026334:	2b80      	cmp	r3, #128	@ 0x80
 8026336:	d034      	beq.n	80263a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8026338:	68bb      	ldr	r3, [r7, #8]
 802633a:	2b40      	cmp	r3, #64	@ 0x40
 802633c:	d031      	beq.n	80263a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802633e:	68fb      	ldr	r3, [r7, #12]
 8026340:	681b      	ldr	r3, [r3, #0]
 8026342:	69db      	ldr	r3, [r3, #28]
 8026344:	f003 0308 	and.w	r3, r3, #8
 8026348:	2b08      	cmp	r3, #8
 802634a:	d110      	bne.n	802636e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802634c:	68fb      	ldr	r3, [r7, #12]
 802634e:	681b      	ldr	r3, [r3, #0]
 8026350:	2208      	movs	r2, #8
 8026352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8026354:	68f8      	ldr	r0, [r7, #12]
 8026356:	f000 f839 	bl	80263cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802635a:	68fb      	ldr	r3, [r7, #12]
 802635c:	2208      	movs	r2, #8
 802635e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8026362:	68fb      	ldr	r3, [r7, #12]
 8026364:	2200      	movs	r2, #0
 8026366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 802636a:	2301      	movs	r3, #1
 802636c:	e029      	b.n	80263c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802636e:	68fb      	ldr	r3, [r7, #12]
 8026370:	681b      	ldr	r3, [r3, #0]
 8026372:	69db      	ldr	r3, [r3, #28]
 8026374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8026378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802637c:	d111      	bne.n	80263a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802637e:	68fb      	ldr	r3, [r7, #12]
 8026380:	681b      	ldr	r3, [r3, #0]
 8026382:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8026386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8026388:	68f8      	ldr	r0, [r7, #12]
 802638a:	f000 f81f 	bl	80263cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802638e:	68fb      	ldr	r3, [r7, #12]
 8026390:	2220      	movs	r2, #32
 8026392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8026396:	68fb      	ldr	r3, [r7, #12]
 8026398:	2200      	movs	r2, #0
 802639a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802639e:	2303      	movs	r3, #3
 80263a0:	e00f      	b.n	80263c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80263a2:	68fb      	ldr	r3, [r7, #12]
 80263a4:	681b      	ldr	r3, [r3, #0]
 80263a6:	69da      	ldr	r2, [r3, #28]
 80263a8:	68bb      	ldr	r3, [r7, #8]
 80263aa:	4013      	ands	r3, r2
 80263ac:	68ba      	ldr	r2, [r7, #8]
 80263ae:	429a      	cmp	r2, r3
 80263b0:	bf0c      	ite	eq
 80263b2:	2301      	moveq	r3, #1
 80263b4:	2300      	movne	r3, #0
 80263b6:	b2db      	uxtb	r3, r3
 80263b8:	461a      	mov	r2, r3
 80263ba:	79fb      	ldrb	r3, [r7, #7]
 80263bc:	429a      	cmp	r2, r3
 80263be:	d0a0      	beq.n	8026302 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80263c0:	2300      	movs	r3, #0
}
 80263c2:	4618      	mov	r0, r3
 80263c4:	3710      	adds	r7, #16
 80263c6:	46bd      	mov	sp, r7
 80263c8:	bd80      	pop	{r7, pc}
	...

080263cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80263cc:	b480      	push	{r7}
 80263ce:	b095      	sub	sp, #84	@ 0x54
 80263d0:	af00      	add	r7, sp, #0
 80263d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80263d4:	687b      	ldr	r3, [r7, #4]
 80263d6:	681b      	ldr	r3, [r3, #0]
 80263d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80263da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80263dc:	e853 3f00 	ldrex	r3, [r3]
 80263e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80263e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80263e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80263e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80263ea:	687b      	ldr	r3, [r7, #4]
 80263ec:	681b      	ldr	r3, [r3, #0]
 80263ee:	461a      	mov	r2, r3
 80263f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80263f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80263f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80263f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80263f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80263fa:	e841 2300 	strex	r3, r2, [r1]
 80263fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8026400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8026402:	2b00      	cmp	r3, #0
 8026404:	d1e6      	bne.n	80263d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8026406:	687b      	ldr	r3, [r7, #4]
 8026408:	681b      	ldr	r3, [r3, #0]
 802640a:	3308      	adds	r3, #8
 802640c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802640e:	6a3b      	ldr	r3, [r7, #32]
 8026410:	e853 3f00 	ldrex	r3, [r3]
 8026414:	61fb      	str	r3, [r7, #28]
   return(result);
 8026416:	69fa      	ldr	r2, [r7, #28]
 8026418:	4b1e      	ldr	r3, [pc, #120]	@ (8026494 <UART_EndRxTransfer+0xc8>)
 802641a:	4013      	ands	r3, r2
 802641c:	64bb      	str	r3, [r7, #72]	@ 0x48
 802641e:	687b      	ldr	r3, [r7, #4]
 8026420:	681b      	ldr	r3, [r3, #0]
 8026422:	3308      	adds	r3, #8
 8026424:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8026426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8026428:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802642a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802642c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802642e:	e841 2300 	strex	r3, r2, [r1]
 8026432:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8026434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8026436:	2b00      	cmp	r3, #0
 8026438:	d1e5      	bne.n	8026406 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802643a:	687b      	ldr	r3, [r7, #4]
 802643c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802643e:	2b01      	cmp	r3, #1
 8026440:	d118      	bne.n	8026474 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8026442:	687b      	ldr	r3, [r7, #4]
 8026444:	681b      	ldr	r3, [r3, #0]
 8026446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8026448:	68fb      	ldr	r3, [r7, #12]
 802644a:	e853 3f00 	ldrex	r3, [r3]
 802644e:	60bb      	str	r3, [r7, #8]
   return(result);
 8026450:	68bb      	ldr	r3, [r7, #8]
 8026452:	f023 0310 	bic.w	r3, r3, #16
 8026456:	647b      	str	r3, [r7, #68]	@ 0x44
 8026458:	687b      	ldr	r3, [r7, #4]
 802645a:	681b      	ldr	r3, [r3, #0]
 802645c:	461a      	mov	r2, r3
 802645e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8026460:	61bb      	str	r3, [r7, #24]
 8026462:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8026464:	6979      	ldr	r1, [r7, #20]
 8026466:	69ba      	ldr	r2, [r7, #24]
 8026468:	e841 2300 	strex	r3, r2, [r1]
 802646c:	613b      	str	r3, [r7, #16]
   return(result);
 802646e:	693b      	ldr	r3, [r7, #16]
 8026470:	2b00      	cmp	r3, #0
 8026472:	d1e6      	bne.n	8026442 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8026474:	687b      	ldr	r3, [r7, #4]
 8026476:	2220      	movs	r2, #32
 8026478:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802647c:	687b      	ldr	r3, [r7, #4]
 802647e:	2200      	movs	r2, #0
 8026480:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8026482:	687b      	ldr	r3, [r7, #4]
 8026484:	2200      	movs	r2, #0
 8026486:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8026488:	bf00      	nop
 802648a:	3754      	adds	r7, #84	@ 0x54
 802648c:	46bd      	mov	sp, r7
 802648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026492:	4770      	bx	lr
 8026494:	effffffe 	.word	0xeffffffe

08026498 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8026498:	b580      	push	{r7, lr}
 802649a:	b084      	sub	sp, #16
 802649c:	af00      	add	r7, sp, #0
 802649e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80264a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80264a6:	68fb      	ldr	r3, [r7, #12]
 80264a8:	2200      	movs	r2, #0
 80264aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80264ae:	68f8      	ldr	r0, [r7, #12]
 80264b0:	f7fe ff50 	bl	8025354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80264b4:	bf00      	nop
 80264b6:	3710      	adds	r7, #16
 80264b8:	46bd      	mov	sp, r7
 80264ba:	bd80      	pop	{r7, pc}

080264bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80264bc:	b580      	push	{r7, lr}
 80264be:	b088      	sub	sp, #32
 80264c0:	af00      	add	r7, sp, #0
 80264c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80264c4:	687b      	ldr	r3, [r7, #4]
 80264c6:	681b      	ldr	r3, [r3, #0]
 80264c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80264ca:	68fb      	ldr	r3, [r7, #12]
 80264cc:	e853 3f00 	ldrex	r3, [r3]
 80264d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80264d2:	68bb      	ldr	r3, [r7, #8]
 80264d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80264d8:	61fb      	str	r3, [r7, #28]
 80264da:	687b      	ldr	r3, [r7, #4]
 80264dc:	681b      	ldr	r3, [r3, #0]
 80264de:	461a      	mov	r2, r3
 80264e0:	69fb      	ldr	r3, [r7, #28]
 80264e2:	61bb      	str	r3, [r7, #24]
 80264e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80264e6:	6979      	ldr	r1, [r7, #20]
 80264e8:	69ba      	ldr	r2, [r7, #24]
 80264ea:	e841 2300 	strex	r3, r2, [r1]
 80264ee:	613b      	str	r3, [r7, #16]
   return(result);
 80264f0:	693b      	ldr	r3, [r7, #16]
 80264f2:	2b00      	cmp	r3, #0
 80264f4:	d1e6      	bne.n	80264c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80264f6:	687b      	ldr	r3, [r7, #4]
 80264f8:	2220      	movs	r2, #32
 80264fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80264fe:	687b      	ldr	r3, [r7, #4]
 8026500:	2200      	movs	r2, #0
 8026502:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8026504:	6878      	ldr	r0, [r7, #4]
 8026506:	f7fe ff1b 	bl	8025340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 802650a:	bf00      	nop
 802650c:	3720      	adds	r7, #32
 802650e:	46bd      	mov	sp, r7
 8026510:	bd80      	pop	{r7, pc}

08026512 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8026512:	b480      	push	{r7}
 8026514:	b083      	sub	sp, #12
 8026516:	af00      	add	r7, sp, #0
 8026518:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 802651a:	bf00      	nop
 802651c:	370c      	adds	r7, #12
 802651e:	46bd      	mov	sp, r7
 8026520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026524:	4770      	bx	lr

08026526 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8026526:	b480      	push	{r7}
 8026528:	b083      	sub	sp, #12
 802652a:	af00      	add	r7, sp, #0
 802652c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 802652e:	bf00      	nop
 8026530:	370c      	adds	r7, #12
 8026532:	46bd      	mov	sp, r7
 8026534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026538:	4770      	bx	lr

0802653a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 802653a:	b480      	push	{r7}
 802653c:	b083      	sub	sp, #12
 802653e:	af00      	add	r7, sp, #0
 8026540:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8026542:	bf00      	nop
 8026544:	370c      	adds	r7, #12
 8026546:	46bd      	mov	sp, r7
 8026548:	f85d 7b04 	ldr.w	r7, [sp], #4
 802654c:	4770      	bx	lr

0802654e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802654e:	b480      	push	{r7}
 8026550:	b085      	sub	sp, #20
 8026552:	af00      	add	r7, sp, #0
 8026554:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8026556:	687b      	ldr	r3, [r7, #4]
 8026558:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802655c:	2b01      	cmp	r3, #1
 802655e:	d101      	bne.n	8026564 <HAL_UARTEx_DisableFifoMode+0x16>
 8026560:	2302      	movs	r3, #2
 8026562:	e027      	b.n	80265b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8026564:	687b      	ldr	r3, [r7, #4]
 8026566:	2201      	movs	r2, #1
 8026568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802656c:	687b      	ldr	r3, [r7, #4]
 802656e:	2224      	movs	r2, #36	@ 0x24
 8026570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8026574:	687b      	ldr	r3, [r7, #4]
 8026576:	681b      	ldr	r3, [r3, #0]
 8026578:	681b      	ldr	r3, [r3, #0]
 802657a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802657c:	687b      	ldr	r3, [r7, #4]
 802657e:	681b      	ldr	r3, [r3, #0]
 8026580:	681a      	ldr	r2, [r3, #0]
 8026582:	687b      	ldr	r3, [r7, #4]
 8026584:	681b      	ldr	r3, [r3, #0]
 8026586:	f022 0201 	bic.w	r2, r2, #1
 802658a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802658c:	68fb      	ldr	r3, [r7, #12]
 802658e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8026592:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8026594:	687b      	ldr	r3, [r7, #4]
 8026596:	2200      	movs	r2, #0
 8026598:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802659a:	687b      	ldr	r3, [r7, #4]
 802659c:	681b      	ldr	r3, [r3, #0]
 802659e:	68fa      	ldr	r2, [r7, #12]
 80265a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80265a2:	687b      	ldr	r3, [r7, #4]
 80265a4:	2220      	movs	r2, #32
 80265a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80265aa:	687b      	ldr	r3, [r7, #4]
 80265ac:	2200      	movs	r2, #0
 80265ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80265b2:	2300      	movs	r3, #0
}
 80265b4:	4618      	mov	r0, r3
 80265b6:	3714      	adds	r7, #20
 80265b8:	46bd      	mov	sp, r7
 80265ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80265be:	4770      	bx	lr

080265c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80265c0:	b580      	push	{r7, lr}
 80265c2:	b084      	sub	sp, #16
 80265c4:	af00      	add	r7, sp, #0
 80265c6:	6078      	str	r0, [r7, #4]
 80265c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80265ca:	687b      	ldr	r3, [r7, #4]
 80265cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80265d0:	2b01      	cmp	r3, #1
 80265d2:	d101      	bne.n	80265d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80265d4:	2302      	movs	r3, #2
 80265d6:	e02d      	b.n	8026634 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80265d8:	687b      	ldr	r3, [r7, #4]
 80265da:	2201      	movs	r2, #1
 80265dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80265e0:	687b      	ldr	r3, [r7, #4]
 80265e2:	2224      	movs	r2, #36	@ 0x24
 80265e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80265e8:	687b      	ldr	r3, [r7, #4]
 80265ea:	681b      	ldr	r3, [r3, #0]
 80265ec:	681b      	ldr	r3, [r3, #0]
 80265ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80265f0:	687b      	ldr	r3, [r7, #4]
 80265f2:	681b      	ldr	r3, [r3, #0]
 80265f4:	681a      	ldr	r2, [r3, #0]
 80265f6:	687b      	ldr	r3, [r7, #4]
 80265f8:	681b      	ldr	r3, [r3, #0]
 80265fa:	f022 0201 	bic.w	r2, r2, #1
 80265fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8026600:	687b      	ldr	r3, [r7, #4]
 8026602:	681b      	ldr	r3, [r3, #0]
 8026604:	689b      	ldr	r3, [r3, #8]
 8026606:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 802660a:	687b      	ldr	r3, [r7, #4]
 802660c:	681b      	ldr	r3, [r3, #0]
 802660e:	683a      	ldr	r2, [r7, #0]
 8026610:	430a      	orrs	r2, r1
 8026612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8026614:	6878      	ldr	r0, [r7, #4]
 8026616:	f000 f84f 	bl	80266b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802661a:	687b      	ldr	r3, [r7, #4]
 802661c:	681b      	ldr	r3, [r3, #0]
 802661e:	68fa      	ldr	r2, [r7, #12]
 8026620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8026622:	687b      	ldr	r3, [r7, #4]
 8026624:	2220      	movs	r2, #32
 8026626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802662a:	687b      	ldr	r3, [r7, #4]
 802662c:	2200      	movs	r2, #0
 802662e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8026632:	2300      	movs	r3, #0
}
 8026634:	4618      	mov	r0, r3
 8026636:	3710      	adds	r7, #16
 8026638:	46bd      	mov	sp, r7
 802663a:	bd80      	pop	{r7, pc}

0802663c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802663c:	b580      	push	{r7, lr}
 802663e:	b084      	sub	sp, #16
 8026640:	af00      	add	r7, sp, #0
 8026642:	6078      	str	r0, [r7, #4]
 8026644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8026646:	687b      	ldr	r3, [r7, #4]
 8026648:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802664c:	2b01      	cmp	r3, #1
 802664e:	d101      	bne.n	8026654 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8026650:	2302      	movs	r3, #2
 8026652:	e02d      	b.n	80266b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8026654:	687b      	ldr	r3, [r7, #4]
 8026656:	2201      	movs	r2, #1
 8026658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802665c:	687b      	ldr	r3, [r7, #4]
 802665e:	2224      	movs	r2, #36	@ 0x24
 8026660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8026664:	687b      	ldr	r3, [r7, #4]
 8026666:	681b      	ldr	r3, [r3, #0]
 8026668:	681b      	ldr	r3, [r3, #0]
 802666a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802666c:	687b      	ldr	r3, [r7, #4]
 802666e:	681b      	ldr	r3, [r3, #0]
 8026670:	681a      	ldr	r2, [r3, #0]
 8026672:	687b      	ldr	r3, [r7, #4]
 8026674:	681b      	ldr	r3, [r3, #0]
 8026676:	f022 0201 	bic.w	r2, r2, #1
 802667a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802667c:	687b      	ldr	r3, [r7, #4]
 802667e:	681b      	ldr	r3, [r3, #0]
 8026680:	689b      	ldr	r3, [r3, #8]
 8026682:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8026686:	687b      	ldr	r3, [r7, #4]
 8026688:	681b      	ldr	r3, [r3, #0]
 802668a:	683a      	ldr	r2, [r7, #0]
 802668c:	430a      	orrs	r2, r1
 802668e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8026690:	6878      	ldr	r0, [r7, #4]
 8026692:	f000 f811 	bl	80266b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8026696:	687b      	ldr	r3, [r7, #4]
 8026698:	681b      	ldr	r3, [r3, #0]
 802669a:	68fa      	ldr	r2, [r7, #12]
 802669c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802669e:	687b      	ldr	r3, [r7, #4]
 80266a0:	2220      	movs	r2, #32
 80266a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80266a6:	687b      	ldr	r3, [r7, #4]
 80266a8:	2200      	movs	r2, #0
 80266aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80266ae:	2300      	movs	r3, #0
}
 80266b0:	4618      	mov	r0, r3
 80266b2:	3710      	adds	r7, #16
 80266b4:	46bd      	mov	sp, r7
 80266b6:	bd80      	pop	{r7, pc}

080266b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80266b8:	b480      	push	{r7}
 80266ba:	b085      	sub	sp, #20
 80266bc:	af00      	add	r7, sp, #0
 80266be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80266c0:	687b      	ldr	r3, [r7, #4]
 80266c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80266c4:	2b00      	cmp	r3, #0
 80266c6:	d108      	bne.n	80266da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80266c8:	687b      	ldr	r3, [r7, #4]
 80266ca:	2201      	movs	r2, #1
 80266cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80266d0:	687b      	ldr	r3, [r7, #4]
 80266d2:	2201      	movs	r2, #1
 80266d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80266d8:	e031      	b.n	802673e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80266da:	2310      	movs	r3, #16
 80266dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80266de:	2310      	movs	r3, #16
 80266e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	681b      	ldr	r3, [r3, #0]
 80266e6:	689b      	ldr	r3, [r3, #8]
 80266e8:	0e5b      	lsrs	r3, r3, #25
 80266ea:	b2db      	uxtb	r3, r3
 80266ec:	f003 0307 	and.w	r3, r3, #7
 80266f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80266f2:	687b      	ldr	r3, [r7, #4]
 80266f4:	681b      	ldr	r3, [r3, #0]
 80266f6:	689b      	ldr	r3, [r3, #8]
 80266f8:	0f5b      	lsrs	r3, r3, #29
 80266fa:	b2db      	uxtb	r3, r3
 80266fc:	f003 0307 	and.w	r3, r3, #7
 8026700:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8026702:	7bbb      	ldrb	r3, [r7, #14]
 8026704:	7b3a      	ldrb	r2, [r7, #12]
 8026706:	4911      	ldr	r1, [pc, #68]	@ (802674c <UARTEx_SetNbDataToProcess+0x94>)
 8026708:	5c8a      	ldrb	r2, [r1, r2]
 802670a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802670e:	7b3a      	ldrb	r2, [r7, #12]
 8026710:	490f      	ldr	r1, [pc, #60]	@ (8026750 <UARTEx_SetNbDataToProcess+0x98>)
 8026712:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8026714:	fb93 f3f2 	sdiv	r3, r3, r2
 8026718:	b29a      	uxth	r2, r3
 802671a:	687b      	ldr	r3, [r7, #4]
 802671c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8026720:	7bfb      	ldrb	r3, [r7, #15]
 8026722:	7b7a      	ldrb	r2, [r7, #13]
 8026724:	4909      	ldr	r1, [pc, #36]	@ (802674c <UARTEx_SetNbDataToProcess+0x94>)
 8026726:	5c8a      	ldrb	r2, [r1, r2]
 8026728:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802672c:	7b7a      	ldrb	r2, [r7, #13]
 802672e:	4908      	ldr	r1, [pc, #32]	@ (8026750 <UARTEx_SetNbDataToProcess+0x98>)
 8026730:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8026732:	fb93 f3f2 	sdiv	r3, r3, r2
 8026736:	b29a      	uxth	r2, r3
 8026738:	687b      	ldr	r3, [r7, #4]
 802673a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 802673e:	bf00      	nop
 8026740:	3714      	adds	r7, #20
 8026742:	46bd      	mov	sp, r7
 8026744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026748:	4770      	bx	lr
 802674a:	bf00      	nop
 802674c:	080271e4 	.word	0x080271e4
 8026750:	080271ec 	.word	0x080271ec

08026754 <crc32_custom>:
    0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};

uint32_t crc32_custom(uint32_t crc, const uint8_t *buf, size_t len)
{
 8026754:	b480      	push	{r7}
 8026756:	b087      	sub	sp, #28
 8026758:	af00      	add	r7, sp, #0
 802675a:	60f8      	str	r0, [r7, #12]
 802675c:	60b9      	str	r1, [r7, #8]
 802675e:	607a      	str	r2, [r7, #4]
    if (buf == NULL) return 0;
 8026760:	68bb      	ldr	r3, [r7, #8]
 8026762:	2b00      	cmp	r3, #0
 8026764:	d101      	bne.n	802676a <crc32_custom+0x16>
 8026766:	2300      	movs	r3, #0
 8026768:	e01d      	b.n	80267a6 <crc32_custom+0x52>

    crc = crc ^ 0xFFFFFFFF;
 802676a:	68fb      	ldr	r3, [r7, #12]
 802676c:	43db      	mvns	r3, r3
 802676e:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; i < len; i++) {
 8026770:	2300      	movs	r3, #0
 8026772:	617b      	str	r3, [r7, #20]
 8026774:	e011      	b.n	802679a <crc32_custom+0x46>
        crc = crc32_table[(crc ^ buf[i]) & 0xFF] ^ (crc >> 8);
 8026776:	68ba      	ldr	r2, [r7, #8]
 8026778:	697b      	ldr	r3, [r7, #20]
 802677a:	4413      	add	r3, r2
 802677c:	781b      	ldrb	r3, [r3, #0]
 802677e:	461a      	mov	r2, r3
 8026780:	68fb      	ldr	r3, [r7, #12]
 8026782:	4053      	eors	r3, r2
 8026784:	b2db      	uxtb	r3, r3
 8026786:	4a0b      	ldr	r2, [pc, #44]	@ (80267b4 <crc32_custom+0x60>)
 8026788:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802678c:	68fb      	ldr	r3, [r7, #12]
 802678e:	0a1b      	lsrs	r3, r3, #8
 8026790:	4053      	eors	r3, r2
 8026792:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < len; i++) {
 8026794:	697b      	ldr	r3, [r7, #20]
 8026796:	3301      	adds	r3, #1
 8026798:	617b      	str	r3, [r7, #20]
 802679a:	697a      	ldr	r2, [r7, #20]
 802679c:	687b      	ldr	r3, [r7, #4]
 802679e:	429a      	cmp	r2, r3
 80267a0:	d3e9      	bcc.n	8026776 <crc32_custom+0x22>
    }

    return crc ^ 0xFFFFFFFF;
 80267a2:	68fb      	ldr	r3, [r7, #12]
 80267a4:	43db      	mvns	r3, r3
}
 80267a6:	4618      	mov	r0, r3
 80267a8:	371c      	adds	r7, #28
 80267aa:	46bd      	mov	sp, r7
 80267ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267b0:	4770      	bx	lr
 80267b2:	bf00      	nop
 80267b4:	080271f4 	.word	0x080271f4

080267b8 <crc32>:

uint32_t crc32(const void *data, size_t size)
{
 80267b8:	b580      	push	{r7, lr}
 80267ba:	b082      	sub	sp, #8
 80267bc:	af00      	add	r7, sp, #0
 80267be:	6078      	str	r0, [r7, #4]
 80267c0:	6039      	str	r1, [r7, #0]
    return crc32_custom(0, (const uint8_t*)data, size);
 80267c2:	683a      	ldr	r2, [r7, #0]
 80267c4:	6879      	ldr	r1, [r7, #4]
 80267c6:	2000      	movs	r0, #0
 80267c8:	f7ff ffc4 	bl	8026754 <crc32_custom>
 80267cc:	4603      	mov	r3, r0
}
 80267ce:	4618      	mov	r0, r3
 80267d0:	3708      	adds	r7, #8
 80267d2:	46bd      	mov	sp, r7
 80267d4:	bd80      	pop	{r7, pc}

080267d6 <del_mem>:
//
//    // Nếu không còn chỗ trống, trả về VERSION_OK_FLAG_ADDR_END
//    return VERSION_OK_FLAG_ADDR_END;
//}

int del_mem(uint8_t start, uint8_t number_of_sector){
 80267d6:	b580      	push	{r7, lr}
 80267d8:	b088      	sub	sp, #32
 80267da:	af00      	add	r7, sp, #0
 80267dc:	4603      	mov	r3, r0
 80267de:	460a      	mov	r2, r1
 80267e0:	71fb      	strb	r3, [r7, #7]
 80267e2:	4613      	mov	r3, r2
 80267e4:	71bb      	strb	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80267e6:	f7fa ff8d 	bl	8021704 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 80267ea:	2300      	movs	r3, #0
 80267ec:	60bb      	str	r3, [r7, #8]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80267ee:	2300      	movs	r3, #0
 80267f0:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80267f2:	2320      	movs	r3, #32
 80267f4:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.Banks = FLASH_BANK_1;
 80267f6:	2301      	movs	r3, #1
 80267f8:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector = start;
 80267fa:	79fb      	ldrb	r3, [r7, #7]
 80267fc:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = number_of_sector;
 80267fe:	79bb      	ldrb	r3, [r7, #6]
 8026800:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK)
 8026802:	f107 0208 	add.w	r2, r7, #8
 8026806:	f107 030c 	add.w	r3, r7, #12
 802680a:	4611      	mov	r1, r2
 802680c:	4618      	mov	r0, r3
 802680e:	f7fb f809 	bl	8021824 <HAL_FLASHEx_Erase>
 8026812:	4603      	mov	r3, r0
 8026814:	2b00      	cmp	r3, #0
 8026816:	d103      	bne.n	8026820 <del_mem+0x4a>
    {
        // Erase failed
    	HAL_FLASH_Lock();
 8026818:	f7fa ff96 	bl	8021748 <HAL_FLASH_Lock>
    	return 1;
 802681c:	2301      	movs	r3, #1
 802681e:	e002      	b.n	8026826 <del_mem+0x50>
    }
    else
    {
    	HAL_FLASH_Lock();
 8026820:	f7fa ff92 	bl	8021748 <HAL_FLASH_Lock>
        return 0;
 8026824:	2300      	movs	r3, #0
    }
}
 8026826:	4618      	mov	r0, r3
 8026828:	3720      	adds	r7, #32
 802682a:	46bd      	mov	sp, r7
 802682c:	bd80      	pop	{r7, pc}
	...

08026830 <jump_to_bl_code_uart>:

void jump_to_bl_code_uart(){
 8026830:	b580      	push	{r7, lr}
 8026832:	b084      	sub	sp, #16
 8026834:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8026836:	b672      	cpsid	i
}
 8026838:	bf00      	nop
	__disable_irq();
	uint32_t app_msp = *(volatile uint32_t* )BL_ADDR;
 802683a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 802683e:	681b      	ldr	r3, [r3, #0]
 8026840:	60fb      	str	r3, [r7, #12]
	uint32_t app_reset_handler = *(volatile uint32_t* )(BL_ADDR + 4);
 8026842:	4b0d      	ldr	r3, [pc, #52]	@ (8026878 <jump_to_bl_code_uart+0x48>)
 8026844:	681b      	ldr	r3, [r3, #0]
 8026846:	60bb      	str	r3, [r7, #8]
 8026848:	68fb      	ldr	r3, [r7, #12]
 802684a:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 802684c:	683b      	ldr	r3, [r7, #0]
 802684e:	f383 8808 	msr	MSP, r3
}
 8026852:	bf00      	nop
   __set_MSP(app_msp);
   SCB->VTOR = BL_ADDR;
 8026854:	4b09      	ldr	r3, [pc, #36]	@ (802687c <jump_to_bl_code_uart+0x4c>)
 8026856:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 802685a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 802685c:	f3bf 8f4f 	dsb	sy
}
 8026860:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8026862:	f3bf 8f6f 	isb	sy
}
 8026866:	bf00      	nop
   __DSB();
   __ISB();
   void (*Jump_To_APP)(void) = (void (*)(void))app_reset_handler;
 8026868:	68bb      	ldr	r3, [r7, #8]
 802686a:	607b      	str	r3, [r7, #4]
   Jump_To_APP();
 802686c:	687b      	ldr	r3, [r7, #4]
 802686e:	4798      	blx	r3

}
 8026870:	bf00      	nop
 8026872:	3710      	adds	r7, #16
 8026874:	46bd      	mov	sp, r7
 8026876:	bd80      	pop	{r7, pc}
 8026878:	08000004 	.word	0x08000004
 802687c:	e000ed00 	.word	0xe000ed00

08026880 <set_run_ok_flag>:
//        }
//        HAL_UART_Transmit(&huart1, (uint8_t *)" The firmware works OK\r\n", 32, HAL_MAX_DELAY);
//        HAL_FLASH_Lock();
//    }
//}
void set_run_ok_flag(void) {
 8026880:	b590      	push	{r4, r7, lr}
 8026882:	b0a9      	sub	sp, #164	@ 0xa4
 8026884:	af00      	add	r7, sp, #0
 8026886:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 802688a:	3ba0      	subs	r3, #160	@ 0xa0
 802688c:	331f      	adds	r3, #31
 802688e:	095b      	lsrs	r3, r3, #5
 8026890:	015c      	lsls	r4, r3, #5
    uint32_t temp_addr = 0x080C0000;
 8026892:	4b1d      	ldr	r3, [pc, #116]	@ (8026908 <set_run_ok_flag+0x88>)
 8026894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    FirmwareUserStatus status_read;
    del_mem(FLASH_SECTOR_6, 1);
 8026898:	2101      	movs	r1, #1
 802689a:	2006      	movs	r0, #6
 802689c:	f7ff ff9b 	bl	80267d6 <del_mem>

    if (status_read.run_ok_flag != RUN_OK_VALUE) {
 80268a0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80268a2:	4a1a      	ldr	r2, [pc, #104]	@ (802690c <set_run_ok_flag+0x8c>)
 80268a4:	4293      	cmp	r3, r2
 80268a6:	d02b      	beq.n	8026900 <set_run_ok_flag+0x80>
        FirmwareUserStatus new_status;
        new_status.run_ok_flag = RUN_OK_VALUE;
 80268a8:	4b18      	ldr	r3, [pc, #96]	@ (802690c <set_run_ok_flag+0x8c>)
 80268aa:	6423      	str	r3, [r4, #64]	@ 0x40
        new_status.retry_counter = 0;
 80268ac:	2300      	movs	r3, #0
 80268ae:	6463      	str	r3, [r4, #68]	@ 0x44

        uint64_t status_block[8] __attribute__((aligned(32)));
        memset(status_block, 0xFF, sizeof(status_block));
 80268b0:	2240      	movs	r2, #64	@ 0x40
 80268b2:	21ff      	movs	r1, #255	@ 0xff
 80268b4:	4620      	mov	r0, r4
 80268b6:	f000 fbec 	bl	8027092 <memset>
        memcpy(status_block, &new_status, 8);
 80268ba:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
 80268be:	e9c4 2300 	strd	r2, r3, [r4]

        HAL_FLASH_Unlock();
 80268c2:	f7fa ff1f 	bl	8021704 <HAL_FLASH_Unlock>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, temp_addr, (uint32_t)&status_block) != HAL_OK) {
 80268c6:	4623      	mov	r3, r4
 80268c8:	461a      	mov	r2, r3
 80268ca:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80268ce:	2001      	movs	r0, #1
 80268d0:	f7fa fea8 	bl	8021624 <HAL_FLASH_Program>
 80268d4:	4603      	mov	r3, r0
 80268d6:	2b00      	cmp	r3, #0
 80268d8:	d009      	beq.n	80268ee <set_run_ok_flag+0x6e>
            HAL_UART_Transmit(&huart1, (uint8_t *)" Can not write the run_Ok_flag\r\n", 32, HAL_MAX_DELAY);
 80268da:	f04f 33ff 	mov.w	r3, #4294967295
 80268de:	2220      	movs	r2, #32
 80268e0:	490b      	ldr	r1, [pc, #44]	@ (8026910 <set_run_ok_flag+0x90>)
 80268e2:	480c      	ldr	r0, [pc, #48]	@ (8026914 <set_run_ok_flag+0x94>)
 80268e4:	f7fe f800 	bl	80248e8 <HAL_UART_Transmit>
            HAL_FLASH_Lock();
 80268e8:	f7fa ff2e 	bl	8021748 <HAL_FLASH_Lock>
 80268ec:	e008      	b.n	8026900 <set_run_ok_flag+0x80>
            return;
        }
        HAL_FLASH_Lock();
 80268ee:	f7fa ff2b 	bl	8021748 <HAL_FLASH_Lock>

        HAL_UART_Transmit(&huart1, (uint8_t *)" The firmware works OK\r\n", 32, HAL_MAX_DELAY);
 80268f2:	f04f 33ff 	mov.w	r3, #4294967295
 80268f6:	2220      	movs	r2, #32
 80268f8:	4907      	ldr	r1, [pc, #28]	@ (8026918 <set_run_ok_flag+0x98>)
 80268fa:	4806      	ldr	r0, [pc, #24]	@ (8026914 <set_run_ok_flag+0x94>)
 80268fc:	f7fd fff4 	bl	80248e8 <HAL_UART_Transmit>
    }
}
 8026900:	37a4      	adds	r7, #164	@ 0xa4
 8026902:	46bd      	mov	sp, r7
 8026904:	bd90      	pop	{r4, r7, pc}
 8026906:	bf00      	nop
 8026908:	080c0000 	.word	0x080c0000
 802690c:	deadbeef 	.word	0xdeadbeef
 8026910:	08027104 	.word	0x08027104
 8026914:	24000178 	.word	0x24000178
 8026918:	08027128 	.word	0x08027128

0802691c <set_user_to_bl_flag>:

void set_user_to_bl_flag(void) {
 802691c:	b590      	push	{r4, r7, lr}
 802691e:	b099      	sub	sp, #100	@ 0x64
 8026920:	af00      	add	r7, sp, #0
 8026922:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8026926:	3b60      	subs	r3, #96	@ 0x60
 8026928:	331f      	adds	r3, #31
 802692a:	095b      	lsrs	r3, r3, #5
 802692c:	015c      	lsls	r4, r3, #5


    uint32_t temp_addr = 0x080A0000;
 802692e:	4b16      	ldr	r3, [pc, #88]	@ (8026988 <set_user_to_bl_flag+0x6c>)
 8026930:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t user_to_bl_value = USER_TO_BL_VALUE;
 8026932:	4b16      	ldr	r3, [pc, #88]	@ (802698c <set_user_to_bl_flag+0x70>)
 8026934:	65bb      	str	r3, [r7, #88]	@ 0x58

    uint64_t status_block[8] __attribute__((aligned(32)));
    memset(status_block, 0xFF, sizeof(status_block));
 8026936:	2240      	movs	r2, #64	@ 0x40
 8026938:	21ff      	movs	r1, #255	@ 0xff
 802693a:	4620      	mov	r0, r4
 802693c:	f000 fba9 	bl	8027092 <memset>
    memcpy(status_block, &user_to_bl_value, sizeof(user_to_bl_value));
 8026940:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8026942:	6023      	str	r3, [r4, #0]

    HAL_FLASH_Unlock();
 8026944:	f7fa fede 	bl	8021704 <HAL_FLASH_Unlock>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, temp_addr, (uint32_t)&status_block) != HAL_OK) {
 8026948:	4623      	mov	r3, r4
 802694a:	461a      	mov	r2, r3
 802694c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 802694e:	2001      	movs	r0, #1
 8026950:	f7fa fe68 	bl	8021624 <HAL_FLASH_Program>
 8026954:	4603      	mov	r3, r0
 8026956:	2b00      	cmp	r3, #0
 8026958:	d009      	beq.n	802696e <set_user_to_bl_flag+0x52>
        HAL_UART_Transmit(&huart1, (uint8_t *)"Failed to write user_to_bl_flag\r\n", 36, HAL_MAX_DELAY);
 802695a:	f04f 33ff 	mov.w	r3, #4294967295
 802695e:	2224      	movs	r2, #36	@ 0x24
 8026960:	490b      	ldr	r1, [pc, #44]	@ (8026990 <set_user_to_bl_flag+0x74>)
 8026962:	480c      	ldr	r0, [pc, #48]	@ (8026994 <set_user_to_bl_flag+0x78>)
 8026964:	f7fd ffc0 	bl	80248e8 <HAL_UART_Transmit>
        HAL_FLASH_Lock();
 8026968:	f7fa feee 	bl	8021748 <HAL_FLASH_Lock>
 802696c:	e008      	b.n	8026980 <set_user_to_bl_flag+0x64>
        return;
    }

    HAL_FLASH_Lock();
 802696e:	f7fa feeb 	bl	8021748 <HAL_FLASH_Lock>
    HAL_UART_Transmit(&huart1, (uint8_t *)"✅ Good\r\n", 9, HAL_MAX_DELAY);
 8026972:	f04f 33ff 	mov.w	r3, #4294967295
 8026976:	2209      	movs	r2, #9
 8026978:	4907      	ldr	r1, [pc, #28]	@ (8026998 <set_user_to_bl_flag+0x7c>)
 802697a:	4806      	ldr	r0, [pc, #24]	@ (8026994 <set_user_to_bl_flag+0x78>)
 802697c:	f7fd ffb4 	bl	80248e8 <HAL_UART_Transmit>
}
 8026980:	3764      	adds	r7, #100	@ 0x64
 8026982:	46bd      	mov	sp, r7
 8026984:	bd90      	pop	{r4, r7, pc}
 8026986:	bf00      	nop
 8026988:	080a0000 	.word	0x080a0000
 802698c:	deadbeef 	.word	0xdeadbeef
 8026990:	08027144 	.word	0x08027144
 8026994:	24000178 	.word	0x24000178
 8026998:	08027168 	.word	0x08027168

0802699c <user_code_go_back_to_bootloader>:


void user_code_go_back_to_bootloader(uint8_t* buffer){
 802699c:	b580      	push	{r7, lr}
 802699e:	b088      	sub	sp, #32
 80269a0:	af00      	add	r7, sp, #0
 80269a2:	6078      	str	r0, [r7, #4]
	uint32_t len = buffer[0] + 1;
 80269a4:	687b      	ldr	r3, [r7, #4]
 80269a6:	781b      	ldrb	r3, [r3, #0]
 80269a8:	3301      	adds	r3, #1
 80269aa:	61fb      	str	r3, [r7, #28]
	uint32_t crc_host = crc32(buffer, len - 4);
 80269ac:	69fb      	ldr	r3, [r7, #28]
 80269ae:	3b04      	subs	r3, #4
 80269b0:	4619      	mov	r1, r3
 80269b2:	6878      	ldr	r0, [r7, #4]
 80269b4:	f7ff ff00 	bl	80267b8 <crc32>
 80269b8:	61b8      	str	r0, [r7, #24]
	uint32_t crc_recv = 0;
 80269ba:	2300      	movs	r3, #0
 80269bc:	60fb      	str	r3, [r7, #12]
	memcpy(&crc_recv, &buffer[len - 4], 4);
 80269be:	69fb      	ldr	r3, [r7, #28]
 80269c0:	3b04      	subs	r3, #4
 80269c2:	687a      	ldr	r2, [r7, #4]
 80269c4:	4413      	add	r3, r2
 80269c6:	681b      	ldr	r3, [r3, #0]
 80269c8:	60fb      	str	r3, [r7, #12]
	if (crc_host == crc_recv) {
 80269ca:	68fb      	ldr	r3, [r7, #12]
 80269cc:	69ba      	ldr	r2, [r7, #24]
 80269ce:	429a      	cmp	r2, r3
 80269d0:	d111      	bne.n	80269f6 <user_code_go_back_to_bootloader+0x5a>
		const char *msg = "Preparing to go back to bootloader\r\n";
 80269d2:	4b11      	ldr	r3, [pc, #68]	@ (8026a18 <user_code_go_back_to_bootloader+0x7c>)
 80269d4:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80269d6:	6938      	ldr	r0, [r7, #16]
 80269d8:	f7f9 fd08 	bl	80203ec <strlen>
 80269dc:	4603      	mov	r3, r0
 80269de:	b29a      	uxth	r2, r3
 80269e0:	f04f 33ff 	mov.w	r3, #4294967295
 80269e4:	6939      	ldr	r1, [r7, #16]
 80269e6:	480d      	ldr	r0, [pc, #52]	@ (8026a1c <user_code_go_back_to_bootloader+0x80>)
 80269e8:	f7fd ff7e 	bl	80248e8 <HAL_UART_Transmit>
		set_user_to_bl_flag();
 80269ec:	f7ff ff96 	bl	802691c <set_user_to_bl_flag>
		jump_to_bl_code_uart();
 80269f0:	f7ff ff1e 	bl	8026830 <jump_to_bl_code_uart>
	} else {
		const char *msg = "CRC failed\r\n";
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	}
}
 80269f4:	e00c      	b.n	8026a10 <user_code_go_back_to_bootloader+0x74>
		const char *msg = "CRC failed\r\n";
 80269f6:	4b0a      	ldr	r3, [pc, #40]	@ (8026a20 <user_code_go_back_to_bootloader+0x84>)
 80269f8:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80269fa:	6978      	ldr	r0, [r7, #20]
 80269fc:	f7f9 fcf6 	bl	80203ec <strlen>
 8026a00:	4603      	mov	r3, r0
 8026a02:	b29a      	uxth	r2, r3
 8026a04:	f04f 33ff 	mov.w	r3, #4294967295
 8026a08:	6979      	ldr	r1, [r7, #20]
 8026a0a:	4804      	ldr	r0, [pc, #16]	@ (8026a1c <user_code_go_back_to_bootloader+0x80>)
 8026a0c:	f7fd ff6c 	bl	80248e8 <HAL_UART_Transmit>
}
 8026a10:	bf00      	nop
 8026a12:	3720      	adds	r7, #32
 8026a14:	46bd      	mov	sp, r7
 8026a16:	bd80      	pop	{r7, pc}
 8026a18:	08027174 	.word	0x08027174
 8026a1c:	24000178 	.word	0x24000178
 8026a20:	0802719c 	.word	0x0802719c

08026a24 <processing_uart_command>:
void processing_uart_command(){
 8026a24:	b580      	push	{r7, lr}
 8026a26:	b082      	sub	sp, #8
 8026a28:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8026a2a:	2300      	movs	r3, #0
 8026a2c:	71fb      	strb	r3, [r7, #7]
	while(1){
	memset(user_buffer, 0, 300);
 8026a2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8026a32:	2100      	movs	r1, #0
 8026a34:	480f      	ldr	r0, [pc, #60]	@ (8026a74 <processing_uart_command+0x50>)
 8026a36:	f000 fb2c 	bl	8027092 <memset>
	HAL_UART_Receive(&huart1, user_buffer, 1, HAL_MAX_DELAY);
 8026a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8026a3e:	2201      	movs	r2, #1
 8026a40:	490c      	ldr	r1, [pc, #48]	@ (8026a74 <processing_uart_command+0x50>)
 8026a42:	480d      	ldr	r0, [pc, #52]	@ (8026a78 <processing_uart_command+0x54>)
 8026a44:	f7fd ffde 	bl	8024a04 <HAL_UART_Receive>
	rcv_len = user_buffer[0];
 8026a48:	4b0a      	ldr	r3, [pc, #40]	@ (8026a74 <processing_uart_command+0x50>)
 8026a4a:	781b      	ldrb	r3, [r3, #0]
 8026a4c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(&huart1, &user_buffer[1], rcv_len, HAL_MAX_DELAY);
 8026a4e:	79fb      	ldrb	r3, [r7, #7]
 8026a50:	b29a      	uxth	r2, r3
 8026a52:	f04f 33ff 	mov.w	r3, #4294967295
 8026a56:	4909      	ldr	r1, [pc, #36]	@ (8026a7c <processing_uart_command+0x58>)
 8026a58:	4807      	ldr	r0, [pc, #28]	@ (8026a78 <processing_uart_command+0x54>)
 8026a5a:	f7fd ffd3 	bl	8024a04 <HAL_UART_Receive>
	switch(user_buffer[1]){
 8026a5e:	4b05      	ldr	r3, [pc, #20]	@ (8026a74 <processing_uart_command+0x50>)
 8026a60:	785b      	ldrb	r3, [r3, #1]
 8026a62:	2b56      	cmp	r3, #86	@ 0x56
 8026a64:	d103      	bne.n	8026a6e <processing_uart_command+0x4a>
	case USER_GOBACK_BL:
		user_code_go_back_to_bootloader(user_buffer);
 8026a66:	4803      	ldr	r0, [pc, #12]	@ (8026a74 <processing_uart_command+0x50>)
 8026a68:	f7ff ff98 	bl	802699c <user_code_go_back_to_bootloader>
		break;
 8026a6c:	e000      	b.n	8026a70 <processing_uart_command+0x4c>
	default:
		break;
 8026a6e:	bf00      	nop
	memset(user_buffer, 0, 300);
 8026a70:	e7dd      	b.n	8026a2e <processing_uart_command+0xa>
 8026a72:	bf00      	nop
 8026a74:	2400004c 	.word	0x2400004c
 8026a78:	24000178 	.word	0x24000178
 8026a7c:	2400004d 	.word	0x2400004d

08026a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8026a80:	b580      	push	{r7, lr}
 8026a82:	b082      	sub	sp, #8
 8026a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8026a86:	f000 f939 	bl	8026cfc <MPU_Config>
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8026a8a:	f7f9 fe4d 	bl	8020728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8026a8e:	f000 f823 	bl	8026ad8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8026a92:	f000 f8dd 	bl	8026c50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8026a96:	f000 f88f 	bl	8026bb8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char *command = "This is the user applicaiton 1\n";
 8026a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8026acc <main+0x4c>)
 8026a9c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, command, strlen(command), HAL_MAX_DELAY);
 8026a9e:	6878      	ldr	r0, [r7, #4]
 8026aa0:	f7f9 fca4 	bl	80203ec <strlen>
 8026aa4:	4603      	mov	r3, r0
 8026aa6:	b29a      	uxth	r2, r3
 8026aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8026aac:	6879      	ldr	r1, [r7, #4]
 8026aae:	4808      	ldr	r0, [pc, #32]	@ (8026ad0 <main+0x50>)
 8026ab0:	f7fd ff1a 	bl	80248e8 <HAL_UART_Transmit>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_15);
 8026ab4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8026ab8:	4806      	ldr	r0, [pc, #24]	@ (8026ad4 <main+0x54>)
 8026aba:	f7fb f948 	bl	8021d4e <HAL_GPIO_TogglePin>
  set_run_ok_flag();
 8026abe:	f7ff fedf 	bl	8026880 <set_run_ok_flag>
  processing_uart_command();
 8026ac2:	f7ff ffaf 	bl	8026a24 <processing_uart_command>

  while (1)
 8026ac6:	bf00      	nop
 8026ac8:	e7fd      	b.n	8026ac6 <main+0x46>
 8026aca:	bf00      	nop
 8026acc:	080271ac 	.word	0x080271ac
 8026ad0:	24000178 	.word	0x24000178
 8026ad4:	58020000 	.word	0x58020000

08026ad8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8026ad8:	b580      	push	{r7, lr}
 8026ada:	b09c      	sub	sp, #112	@ 0x70
 8026adc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8026ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8026ae2:	224c      	movs	r2, #76	@ 0x4c
 8026ae4:	2100      	movs	r1, #0
 8026ae6:	4618      	mov	r0, r3
 8026ae8:	f000 fad3 	bl	8027092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8026aec:	1d3b      	adds	r3, r7, #4
 8026aee:	2220      	movs	r2, #32
 8026af0:	2100      	movs	r1, #0
 8026af2:	4618      	mov	r0, r3
 8026af4:	f000 facd 	bl	8027092 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8026af8:	2002      	movs	r0, #2
 8026afa:	f7fb f943 	bl	8021d84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8026afe:	2300      	movs	r3, #0
 8026b00:	603b      	str	r3, [r7, #0]
 8026b02:	4b2c      	ldr	r3, [pc, #176]	@ (8026bb4 <SystemClock_Config+0xdc>)
 8026b04:	699b      	ldr	r3, [r3, #24]
 8026b06:	4a2b      	ldr	r2, [pc, #172]	@ (8026bb4 <SystemClock_Config+0xdc>)
 8026b08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8026b0c:	6193      	str	r3, [r2, #24]
 8026b0e:	4b29      	ldr	r3, [pc, #164]	@ (8026bb4 <SystemClock_Config+0xdc>)
 8026b10:	699b      	ldr	r3, [r3, #24]
 8026b12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8026b16:	603b      	str	r3, [r7, #0]
 8026b18:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8026b1a:	bf00      	nop
 8026b1c:	4b25      	ldr	r3, [pc, #148]	@ (8026bb4 <SystemClock_Config+0xdc>)
 8026b1e:	699b      	ldr	r3, [r3, #24]
 8026b20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8026b24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8026b28:	d1f8      	bne.n	8026b1c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8026b2a:	2302      	movs	r3, #2
 8026b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8026b2e:	2301      	movs	r3, #1
 8026b30:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8026b32:	2340      	movs	r3, #64	@ 0x40
 8026b34:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8026b36:	2302      	movs	r3, #2
 8026b38:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8026b3a:	2300      	movs	r3, #0
 8026b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8026b3e:	2304      	movs	r3, #4
 8026b40:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8026b42:	2322      	movs	r3, #34	@ 0x22
 8026b44:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8026b46:	2301      	movs	r3, #1
 8026b48:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8026b4a:	2302      	movs	r3, #2
 8026b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8026b4e:	2302      	movs	r3, #2
 8026b50:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8026b52:	230c      	movs	r3, #12
 8026b54:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8026b56:	2300      	movs	r3, #0
 8026b58:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8026b5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8026b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8026b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8026b64:	4618      	mov	r0, r3
 8026b66:	f7fb f947 	bl	8021df8 <HAL_RCC_OscConfig>
 8026b6a:	4603      	mov	r3, r0
 8026b6c:	2b00      	cmp	r3, #0
 8026b6e:	d001      	beq.n	8026b74 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8026b70:	f000 f8f0 	bl	8026d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8026b74:	233f      	movs	r3, #63	@ 0x3f
 8026b76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8026b78:	2303      	movs	r3, #3
 8026b7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8026b7c:	2300      	movs	r3, #0
 8026b7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8026b80:	2308      	movs	r3, #8
 8026b82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8026b84:	2340      	movs	r3, #64	@ 0x40
 8026b86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8026b88:	2340      	movs	r3, #64	@ 0x40
 8026b8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8026b8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026b90:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8026b92:	2340      	movs	r3, #64	@ 0x40
 8026b94:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8026b96:	1d3b      	adds	r3, r7, #4
 8026b98:	2103      	movs	r1, #3
 8026b9a:	4618      	mov	r0, r3
 8026b9c:	f7fb fd06 	bl	80225ac <HAL_RCC_ClockConfig>
 8026ba0:	4603      	mov	r3, r0
 8026ba2:	2b00      	cmp	r3, #0
 8026ba4:	d001      	beq.n	8026baa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8026ba6:	f000 f8d5 	bl	8026d54 <Error_Handler>
  }
}
 8026baa:	bf00      	nop
 8026bac:	3770      	adds	r7, #112	@ 0x70
 8026bae:	46bd      	mov	sp, r7
 8026bb0:	bd80      	pop	{r7, pc}
 8026bb2:	bf00      	nop
 8026bb4:	58024800 	.word	0x58024800

08026bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
 void MX_USART1_UART_Init(void)
{
 8026bb8:	b580      	push	{r7, lr}
 8026bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8026bbc:	4b22      	ldr	r3, [pc, #136]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bbe:	4a23      	ldr	r2, [pc, #140]	@ (8026c4c <MX_USART1_UART_Init+0x94>)
 8026bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8026bc2:	4b21      	ldr	r3, [pc, #132]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8026bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8026bca:	4b1f      	ldr	r3, [pc, #124]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bcc:	2200      	movs	r2, #0
 8026bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8026bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bd2:	2200      	movs	r2, #0
 8026bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8026bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bd8:	2200      	movs	r2, #0
 8026bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8026bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bde:	220c      	movs	r2, #12
 8026be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8026be2:	4b19      	ldr	r3, [pc, #100]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026be4:	2200      	movs	r2, #0
 8026be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8026be8:	4b17      	ldr	r3, [pc, #92]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bea:	2200      	movs	r2, #0
 8026bec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8026bee:	4b16      	ldr	r3, [pc, #88]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bf0:	2200      	movs	r2, #0
 8026bf2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8026bf4:	4b14      	ldr	r3, [pc, #80]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bf6:	2200      	movs	r2, #0
 8026bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8026bfa:	4b13      	ldr	r3, [pc, #76]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026bfc:	2200      	movs	r2, #0
 8026bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8026c00:	4811      	ldr	r0, [pc, #68]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026c02:	f7fd fe21 	bl	8024848 <HAL_UART_Init>
 8026c06:	4603      	mov	r3, r0
 8026c08:	2b00      	cmp	r3, #0
 8026c0a:	d001      	beq.n	8026c10 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8026c0c:	f000 f8a2 	bl	8026d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8026c10:	2100      	movs	r1, #0
 8026c12:	480d      	ldr	r0, [pc, #52]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026c14:	f7ff fcd4 	bl	80265c0 <HAL_UARTEx_SetTxFifoThreshold>
 8026c18:	4603      	mov	r3, r0
 8026c1a:	2b00      	cmp	r3, #0
 8026c1c:	d001      	beq.n	8026c22 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8026c1e:	f000 f899 	bl	8026d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8026c22:	2100      	movs	r1, #0
 8026c24:	4808      	ldr	r0, [pc, #32]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026c26:	f7ff fd09 	bl	802663c <HAL_UARTEx_SetRxFifoThreshold>
 8026c2a:	4603      	mov	r3, r0
 8026c2c:	2b00      	cmp	r3, #0
 8026c2e:	d001      	beq.n	8026c34 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8026c30:	f000 f890 	bl	8026d54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8026c34:	4804      	ldr	r0, [pc, #16]	@ (8026c48 <MX_USART1_UART_Init+0x90>)
 8026c36:	f7ff fc8a 	bl	802654e <HAL_UARTEx_DisableFifoMode>
 8026c3a:	4603      	mov	r3, r0
 8026c3c:	2b00      	cmp	r3, #0
 8026c3e:	d001      	beq.n	8026c44 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8026c40:	f000 f888 	bl	8026d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8026c44:	bf00      	nop
 8026c46:	bd80      	pop	{r7, pc}
 8026c48:	24000178 	.word	0x24000178
 8026c4c:	40011000 	.word	0x40011000

08026c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
 void MX_GPIO_Init(void)
{
 8026c50:	b580      	push	{r7, lr}
 8026c52:	b088      	sub	sp, #32
 8026c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026c56:	f107 030c 	add.w	r3, r7, #12
 8026c5a:	2200      	movs	r2, #0
 8026c5c:	601a      	str	r2, [r3, #0]
 8026c5e:	605a      	str	r2, [r3, #4]
 8026c60:	609a      	str	r2, [r3, #8]
 8026c62:	60da      	str	r2, [r3, #12]
 8026c64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8026c66:	4b23      	ldr	r3, [pc, #140]	@ (8026cf4 <MX_GPIO_Init+0xa4>)
 8026c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8026c6c:	4a21      	ldr	r2, [pc, #132]	@ (8026cf4 <MX_GPIO_Init+0xa4>)
 8026c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026c72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8026c76:	4b1f      	ldr	r3, [pc, #124]	@ (8026cf4 <MX_GPIO_Init+0xa4>)
 8026c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8026c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8026c80:	60bb      	str	r3, [r7, #8]
 8026c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8026c84:	4b1b      	ldr	r3, [pc, #108]	@ (8026cf4 <MX_GPIO_Init+0xa4>)
 8026c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8026c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8026cf4 <MX_GPIO_Init+0xa4>)
 8026c8c:	f043 0302 	orr.w	r3, r3, #2
 8026c90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8026c94:	4b17      	ldr	r3, [pc, #92]	@ (8026cf4 <MX_GPIO_Init+0xa4>)
 8026c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8026c9a:	f003 0302 	and.w	r3, r3, #2
 8026c9e:	607b      	str	r3, [r7, #4]
 8026ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8026ca2:	4b14      	ldr	r3, [pc, #80]	@ (8026cf4 <MX_GPIO_Init+0xa4>)
 8026ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8026ca8:	4a12      	ldr	r2, [pc, #72]	@ (8026cf4 <MX_GPIO_Init+0xa4>)
 8026caa:	f043 0301 	orr.w	r3, r3, #1
 8026cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8026cb2:	4b10      	ldr	r3, [pc, #64]	@ (8026cf4 <MX_GPIO_Init+0xa4>)
 8026cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8026cb8:	f003 0301 	and.w	r3, r3, #1
 8026cbc:	603b      	str	r3, [r7, #0]
 8026cbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8026cc0:	2200      	movs	r2, #0
 8026cc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8026cc6:	480c      	ldr	r0, [pc, #48]	@ (8026cf8 <MX_GPIO_Init+0xa8>)
 8026cc8:	f7fb f828 	bl	8021d1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8026ccc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8026cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8026cd2:	2301      	movs	r3, #1
 8026cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026cd6:	2300      	movs	r3, #0
 8026cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026cda:	2300      	movs	r3, #0
 8026cdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8026cde:	f107 030c 	add.w	r3, r7, #12
 8026ce2:	4619      	mov	r1, r3
 8026ce4:	4804      	ldr	r0, [pc, #16]	@ (8026cf8 <MX_GPIO_Init+0xa8>)
 8026ce6:	f7fa fe71 	bl	80219cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8026cea:	bf00      	nop
 8026cec:	3720      	adds	r7, #32
 8026cee:	46bd      	mov	sp, r7
 8026cf0:	bd80      	pop	{r7, pc}
 8026cf2:	bf00      	nop
 8026cf4:	58024400 	.word	0x58024400
 8026cf8:	58020000 	.word	0x58020000

08026cfc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8026cfc:	b580      	push	{r7, lr}
 8026cfe:	b084      	sub	sp, #16
 8026d00:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8026d02:	463b      	mov	r3, r7
 8026d04:	2200      	movs	r2, #0
 8026d06:	601a      	str	r2, [r3, #0]
 8026d08:	605a      	str	r2, [r3, #4]
 8026d0a:	609a      	str	r2, [r3, #8]
 8026d0c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8026d0e:	f7f9 fead 	bl	8020a6c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8026d12:	2301      	movs	r3, #1
 8026d14:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8026d16:	2300      	movs	r3, #0
 8026d18:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8026d1a:	2300      	movs	r3, #0
 8026d1c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8026d1e:	231f      	movs	r3, #31
 8026d20:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8026d22:	2387      	movs	r3, #135	@ 0x87
 8026d24:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8026d26:	2300      	movs	r3, #0
 8026d28:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8026d2a:	2303      	movs	r3, #3
 8026d2c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8026d2e:	2301      	movs	r3, #1
 8026d30:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8026d32:	2301      	movs	r3, #1
 8026d34:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8026d36:	2300      	movs	r3, #0
 8026d38:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8026d3a:	2300      	movs	r3, #0
 8026d3c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8026d3e:	463b      	mov	r3, r7
 8026d40:	4618      	mov	r0, r3
 8026d42:	f7f9 fecb 	bl	8020adc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8026d46:	2004      	movs	r0, #4
 8026d48:	f7f9 fea8 	bl	8020a9c <HAL_MPU_Enable>

}
 8026d4c:	bf00      	nop
 8026d4e:	3710      	adds	r7, #16
 8026d50:	46bd      	mov	sp, r7
 8026d52:	bd80      	pop	{r7, pc}

08026d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8026d54:	b480      	push	{r7}
 8026d56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8026d58:	b672      	cpsid	i
}
 8026d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8026d5c:	bf00      	nop
 8026d5e:	e7fd      	b.n	8026d5c <Error_Handler+0x8>

08026d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8026d60:	b480      	push	{r7}
 8026d62:	b083      	sub	sp, #12
 8026d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8026d66:	4b0a      	ldr	r3, [pc, #40]	@ (8026d90 <HAL_MspInit+0x30>)
 8026d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8026d6c:	4a08      	ldr	r2, [pc, #32]	@ (8026d90 <HAL_MspInit+0x30>)
 8026d6e:	f043 0302 	orr.w	r3, r3, #2
 8026d72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8026d76:	4b06      	ldr	r3, [pc, #24]	@ (8026d90 <HAL_MspInit+0x30>)
 8026d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8026d7c:	f003 0302 	and.w	r3, r3, #2
 8026d80:	607b      	str	r3, [r7, #4]
 8026d82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8026d84:	bf00      	nop
 8026d86:	370c      	adds	r7, #12
 8026d88:	46bd      	mov	sp, r7
 8026d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d8e:	4770      	bx	lr
 8026d90:	58024400 	.word	0x58024400

08026d94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8026d94:	b580      	push	{r7, lr}
 8026d96:	b0b8      	sub	sp, #224	@ 0xe0
 8026d98:	af00      	add	r7, sp, #0
 8026d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026d9c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8026da0:	2200      	movs	r2, #0
 8026da2:	601a      	str	r2, [r3, #0]
 8026da4:	605a      	str	r2, [r3, #4]
 8026da6:	609a      	str	r2, [r3, #8]
 8026da8:	60da      	str	r2, [r3, #12]
 8026daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8026dac:	f107 0310 	add.w	r3, r7, #16
 8026db0:	22b8      	movs	r2, #184	@ 0xb8
 8026db2:	2100      	movs	r1, #0
 8026db4:	4618      	mov	r0, r3
 8026db6:	f000 f96c 	bl	8027092 <memset>
  if(huart->Instance==USART1)
 8026dba:	687b      	ldr	r3, [r7, #4]
 8026dbc:	681b      	ldr	r3, [r3, #0]
 8026dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8026e6c <HAL_UART_MspInit+0xd8>)
 8026dc0:	4293      	cmp	r3, r2
 8026dc2:	d14e      	bne.n	8026e62 <HAL_UART_MspInit+0xce>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8026dc4:	f04f 0201 	mov.w	r2, #1
 8026dc8:	f04f 0300 	mov.w	r3, #0
 8026dcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8026dd0:	2300      	movs	r3, #0
 8026dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8026dd6:	f107 0310 	add.w	r3, r7, #16
 8026dda:	4618      	mov	r0, r3
 8026ddc:	f7fb ff72 	bl	8022cc4 <HAL_RCCEx_PeriphCLKConfig>
 8026de0:	4603      	mov	r3, r0
 8026de2:	2b00      	cmp	r3, #0
 8026de4:	d001      	beq.n	8026dea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8026de6:	f7ff ffb5 	bl	8026d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8026dea:	4b21      	ldr	r3, [pc, #132]	@ (8026e70 <HAL_UART_MspInit+0xdc>)
 8026dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8026df0:	4a1f      	ldr	r2, [pc, #124]	@ (8026e70 <HAL_UART_MspInit+0xdc>)
 8026df2:	f043 0310 	orr.w	r3, r3, #16
 8026df6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8026dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8026e70 <HAL_UART_MspInit+0xdc>)
 8026dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8026e00:	f003 0310 	and.w	r3, r3, #16
 8026e04:	60fb      	str	r3, [r7, #12]
 8026e06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026e08:	4b19      	ldr	r3, [pc, #100]	@ (8026e70 <HAL_UART_MspInit+0xdc>)
 8026e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8026e0e:	4a18      	ldr	r2, [pc, #96]	@ (8026e70 <HAL_UART_MspInit+0xdc>)
 8026e10:	f043 0302 	orr.w	r3, r3, #2
 8026e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8026e18:	4b15      	ldr	r3, [pc, #84]	@ (8026e70 <HAL_UART_MspInit+0xdc>)
 8026e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8026e1e:	f003 0302 	and.w	r3, r3, #2
 8026e22:	60bb      	str	r3, [r7, #8]
 8026e24:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8026e26:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8026e2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026e2e:	2302      	movs	r3, #2
 8026e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8026e34:	2300      	movs	r3, #0
 8026e36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026e3a:	2300      	movs	r3, #0
 8026e3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8026e40:	2304      	movs	r3, #4
 8026e42:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8026e46:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8026e4a:	4619      	mov	r1, r3
 8026e4c:	4809      	ldr	r0, [pc, #36]	@ (8026e74 <HAL_UART_MspInit+0xe0>)
 8026e4e:	f7fa fdbd 	bl	80219cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8026e52:	2200      	movs	r2, #0
 8026e54:	2100      	movs	r1, #0
 8026e56:	2025      	movs	r0, #37	@ 0x25
 8026e58:	f7f9 fdd3 	bl	8020a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8026e5c:	2025      	movs	r0, #37	@ 0x25
 8026e5e:	f7f9 fdea 	bl	8020a36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8026e62:	bf00      	nop
 8026e64:	37e0      	adds	r7, #224	@ 0xe0
 8026e66:	46bd      	mov	sp, r7
 8026e68:	bd80      	pop	{r7, pc}
 8026e6a:	bf00      	nop
 8026e6c:	40011000 	.word	0x40011000
 8026e70:	58024400 	.word	0x58024400
 8026e74:	58020400 	.word	0x58020400

08026e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8026e78:	b480      	push	{r7}
 8026e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8026e7c:	bf00      	nop
 8026e7e:	e7fd      	b.n	8026e7c <NMI_Handler+0x4>

08026e80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8026e80:	b480      	push	{r7}
 8026e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8026e84:	bf00      	nop
 8026e86:	e7fd      	b.n	8026e84 <HardFault_Handler+0x4>

08026e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8026e88:	b480      	push	{r7}
 8026e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8026e8c:	bf00      	nop
 8026e8e:	e7fd      	b.n	8026e8c <MemManage_Handler+0x4>

08026e90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8026e90:	b480      	push	{r7}
 8026e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8026e94:	bf00      	nop
 8026e96:	e7fd      	b.n	8026e94 <BusFault_Handler+0x4>

08026e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8026e98:	b480      	push	{r7}
 8026e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8026e9c:	bf00      	nop
 8026e9e:	e7fd      	b.n	8026e9c <UsageFault_Handler+0x4>

08026ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8026ea0:	b480      	push	{r7}
 8026ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8026ea4:	bf00      	nop
 8026ea6:	46bd      	mov	sp, r7
 8026ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eac:	4770      	bx	lr

08026eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8026eae:	b480      	push	{r7}
 8026eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8026eb2:	bf00      	nop
 8026eb4:	46bd      	mov	sp, r7
 8026eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026eba:	4770      	bx	lr

08026ebc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8026ebc:	b480      	push	{r7}
 8026ebe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8026ec0:	bf00      	nop
 8026ec2:	46bd      	mov	sp, r7
 8026ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ec8:	4770      	bx	lr

08026eca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8026eca:	b580      	push	{r7, lr}
 8026ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8026ece:	f7f9 fc9d 	bl	802080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8026ed2:	bf00      	nop
 8026ed4:	bd80      	pop	{r7, pc}
	...

08026ed8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8026ed8:	b580      	push	{r7, lr}
 8026eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8026edc:	4802      	ldr	r0, [pc, #8]	@ (8026ee8 <USART1_IRQHandler+0x10>)
 8026ede:	f7fd fe59 	bl	8024b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8026ee2:	bf00      	nop
 8026ee4:	bd80      	pop	{r7, pc}
 8026ee6:	bf00      	nop
 8026ee8:	24000178 	.word	0x24000178

08026eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8026eec:	b480      	push	{r7}
 8026eee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8026ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8026fec <SystemInit+0x100>)
 8026ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8026ef6:	4a3d      	ldr	r2, [pc, #244]	@ (8026fec <SystemInit+0x100>)
 8026ef8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8026efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8026f00:	4b3b      	ldr	r3, [pc, #236]	@ (8026ff0 <SystemInit+0x104>)
 8026f02:	681b      	ldr	r3, [r3, #0]
 8026f04:	f003 030f 	and.w	r3, r3, #15
 8026f08:	2b06      	cmp	r3, #6
 8026f0a:	d807      	bhi.n	8026f1c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8026f0c:	4b38      	ldr	r3, [pc, #224]	@ (8026ff0 <SystemInit+0x104>)
 8026f0e:	681b      	ldr	r3, [r3, #0]
 8026f10:	f023 030f 	bic.w	r3, r3, #15
 8026f14:	4a36      	ldr	r2, [pc, #216]	@ (8026ff0 <SystemInit+0x104>)
 8026f16:	f043 0307 	orr.w	r3, r3, #7
 8026f1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8026f1c:	4b35      	ldr	r3, [pc, #212]	@ (8026ff4 <SystemInit+0x108>)
 8026f1e:	681b      	ldr	r3, [r3, #0]
 8026f20:	4a34      	ldr	r2, [pc, #208]	@ (8026ff4 <SystemInit+0x108>)
 8026f22:	f043 0301 	orr.w	r3, r3, #1
 8026f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8026f28:	4b32      	ldr	r3, [pc, #200]	@ (8026ff4 <SystemInit+0x108>)
 8026f2a:	2200      	movs	r2, #0
 8026f2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8026f2e:	4b31      	ldr	r3, [pc, #196]	@ (8026ff4 <SystemInit+0x108>)
 8026f30:	681a      	ldr	r2, [r3, #0]
 8026f32:	4930      	ldr	r1, [pc, #192]	@ (8026ff4 <SystemInit+0x108>)
 8026f34:	4b30      	ldr	r3, [pc, #192]	@ (8026ff8 <SystemInit+0x10c>)
 8026f36:	4013      	ands	r3, r2
 8026f38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8026f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8026ff0 <SystemInit+0x104>)
 8026f3c:	681b      	ldr	r3, [r3, #0]
 8026f3e:	f003 0308 	and.w	r3, r3, #8
 8026f42:	2b00      	cmp	r3, #0
 8026f44:	d007      	beq.n	8026f56 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8026f46:	4b2a      	ldr	r3, [pc, #168]	@ (8026ff0 <SystemInit+0x104>)
 8026f48:	681b      	ldr	r3, [r3, #0]
 8026f4a:	f023 030f 	bic.w	r3, r3, #15
 8026f4e:	4a28      	ldr	r2, [pc, #160]	@ (8026ff0 <SystemInit+0x104>)
 8026f50:	f043 0307 	orr.w	r3, r3, #7
 8026f54:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8026f56:	4b27      	ldr	r3, [pc, #156]	@ (8026ff4 <SystemInit+0x108>)
 8026f58:	2200      	movs	r2, #0
 8026f5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8026f5c:	4b25      	ldr	r3, [pc, #148]	@ (8026ff4 <SystemInit+0x108>)
 8026f5e:	2200      	movs	r2, #0
 8026f60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8026f62:	4b24      	ldr	r3, [pc, #144]	@ (8026ff4 <SystemInit+0x108>)
 8026f64:	2200      	movs	r2, #0
 8026f66:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8026f68:	4b22      	ldr	r3, [pc, #136]	@ (8026ff4 <SystemInit+0x108>)
 8026f6a:	4a24      	ldr	r2, [pc, #144]	@ (8026ffc <SystemInit+0x110>)
 8026f6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8026f6e:	4b21      	ldr	r3, [pc, #132]	@ (8026ff4 <SystemInit+0x108>)
 8026f70:	4a23      	ldr	r2, [pc, #140]	@ (8027000 <SystemInit+0x114>)
 8026f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8026f74:	4b1f      	ldr	r3, [pc, #124]	@ (8026ff4 <SystemInit+0x108>)
 8026f76:	4a23      	ldr	r2, [pc, #140]	@ (8027004 <SystemInit+0x118>)
 8026f78:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8026f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8026ff4 <SystemInit+0x108>)
 8026f7c:	2200      	movs	r2, #0
 8026f7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8026f80:	4b1c      	ldr	r3, [pc, #112]	@ (8026ff4 <SystemInit+0x108>)
 8026f82:	4a20      	ldr	r2, [pc, #128]	@ (8027004 <SystemInit+0x118>)
 8026f84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8026f86:	4b1b      	ldr	r3, [pc, #108]	@ (8026ff4 <SystemInit+0x108>)
 8026f88:	2200      	movs	r2, #0
 8026f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8026f8c:	4b19      	ldr	r3, [pc, #100]	@ (8026ff4 <SystemInit+0x108>)
 8026f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8027004 <SystemInit+0x118>)
 8026f90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8026f92:	4b18      	ldr	r3, [pc, #96]	@ (8026ff4 <SystemInit+0x108>)
 8026f94:	2200      	movs	r2, #0
 8026f96:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8026f98:	4b16      	ldr	r3, [pc, #88]	@ (8026ff4 <SystemInit+0x108>)
 8026f9a:	681b      	ldr	r3, [r3, #0]
 8026f9c:	4a15      	ldr	r2, [pc, #84]	@ (8026ff4 <SystemInit+0x108>)
 8026f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8026fa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8026fa4:	4b13      	ldr	r3, [pc, #76]	@ (8026ff4 <SystemInit+0x108>)
 8026fa6:	2200      	movs	r2, #0
 8026fa8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8026faa:	4b12      	ldr	r3, [pc, #72]	@ (8026ff4 <SystemInit+0x108>)
 8026fac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8026fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8026fb4:	2b00      	cmp	r3, #0
 8026fb6:	d113      	bne.n	8026fe0 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8026fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8026ff4 <SystemInit+0x108>)
 8026fba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8026fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8026ff4 <SystemInit+0x108>)
 8026fc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8026fc4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8026fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8027008 <SystemInit+0x11c>)
 8026fca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8026fce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8026fd0:	4b08      	ldr	r3, [pc, #32]	@ (8026ff4 <SystemInit+0x108>)
 8026fd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8026fd6:	4a07      	ldr	r2, [pc, #28]	@ (8026ff4 <SystemInit+0x108>)
 8026fd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8026fdc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8026fe0:	bf00      	nop
 8026fe2:	46bd      	mov	sp, r7
 8026fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fe8:	4770      	bx	lr
 8026fea:	bf00      	nop
 8026fec:	e000ed00 	.word	0xe000ed00
 8026ff0:	52002000 	.word	0x52002000
 8026ff4:	58024400 	.word	0x58024400
 8026ff8:	eaf6ed7f 	.word	0xeaf6ed7f
 8026ffc:	02020200 	.word	0x02020200
 8027000:	01ff0000 	.word	0x01ff0000
 8027004:	01010280 	.word	0x01010280
 8027008:	52004000 	.word	0x52004000

0802700c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 802700c:	b480      	push	{r7}
 802700e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8027010:	4b09      	ldr	r3, [pc, #36]	@ (8027038 <ExitRun0Mode+0x2c>)
 8027012:	68db      	ldr	r3, [r3, #12]
 8027014:	4a08      	ldr	r2, [pc, #32]	@ (8027038 <ExitRun0Mode+0x2c>)
 8027016:	f043 0302 	orr.w	r3, r3, #2
 802701a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 802701c:	bf00      	nop
 802701e:	4b06      	ldr	r3, [pc, #24]	@ (8027038 <ExitRun0Mode+0x2c>)
 8027020:	685b      	ldr	r3, [r3, #4]
 8027022:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8027026:	2b00      	cmp	r3, #0
 8027028:	d0f9      	beq.n	802701e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 802702a:	bf00      	nop
 802702c:	bf00      	nop
 802702e:	46bd      	mov	sp, r7
 8027030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027034:	4770      	bx	lr
 8027036:	bf00      	nop
 8027038:	58024800 	.word	0x58024800

0802703c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 802703c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8027078 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8027040:	f7ff ffe4 	bl	802700c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8027044:	f7ff ff52 	bl	8026eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8027048:	480c      	ldr	r0, [pc, #48]	@ (802707c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 802704a:	490d      	ldr	r1, [pc, #52]	@ (8027080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 802704c:	4a0d      	ldr	r2, [pc, #52]	@ (8027084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 802704e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8027050:	e002      	b.n	8027058 <LoopCopyDataInit>

08027052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8027052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8027054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8027056:	3304      	adds	r3, #4

08027058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8027058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 802705a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 802705c:	d3f9      	bcc.n	8027052 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 802705e:	4a0a      	ldr	r2, [pc, #40]	@ (8027088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8027060:	4c0a      	ldr	r4, [pc, #40]	@ (802708c <LoopFillZerobss+0x22>)
  movs r3, #0
 8027062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8027064:	e001      	b.n	802706a <LoopFillZerobss>

08027066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8027066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8027068:	3204      	adds	r2, #4

0802706a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 802706a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 802706c:	d3fb      	bcc.n	8027066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 802706e:	f000 f819 	bl	80270a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8027072:	f7ff fd05 	bl	8026a80 <main>
  bx  lr
 8027076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8027078:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 802707c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8027080:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8027084:	08027614 	.word	0x08027614
  ldr r2, =_sbss
 8027088:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 802708c:	2400020c 	.word	0x2400020c

08027090 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8027090:	e7fe      	b.n	8027090 <ADC3_IRQHandler>

08027092 <memset>:
 8027092:	4402      	add	r2, r0
 8027094:	4603      	mov	r3, r0
 8027096:	4293      	cmp	r3, r2
 8027098:	d100      	bne.n	802709c <memset+0xa>
 802709a:	4770      	bx	lr
 802709c:	f803 1b01 	strb.w	r1, [r3], #1
 80270a0:	e7f9      	b.n	8027096 <memset+0x4>
	...

080270a4 <__libc_init_array>:
 80270a4:	b570      	push	{r4, r5, r6, lr}
 80270a6:	4d0d      	ldr	r5, [pc, #52]	@ (80270dc <__libc_init_array+0x38>)
 80270a8:	4c0d      	ldr	r4, [pc, #52]	@ (80270e0 <__libc_init_array+0x3c>)
 80270aa:	1b64      	subs	r4, r4, r5
 80270ac:	10a4      	asrs	r4, r4, #2
 80270ae:	2600      	movs	r6, #0
 80270b0:	42a6      	cmp	r6, r4
 80270b2:	d109      	bne.n	80270c8 <__libc_init_array+0x24>
 80270b4:	4d0b      	ldr	r5, [pc, #44]	@ (80270e4 <__libc_init_array+0x40>)
 80270b6:	4c0c      	ldr	r4, [pc, #48]	@ (80270e8 <__libc_init_array+0x44>)
 80270b8:	f000 f818 	bl	80270ec <_init>
 80270bc:	1b64      	subs	r4, r4, r5
 80270be:	10a4      	asrs	r4, r4, #2
 80270c0:	2600      	movs	r6, #0
 80270c2:	42a6      	cmp	r6, r4
 80270c4:	d105      	bne.n	80270d2 <__libc_init_array+0x2e>
 80270c6:	bd70      	pop	{r4, r5, r6, pc}
 80270c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80270cc:	4798      	blx	r3
 80270ce:	3601      	adds	r6, #1
 80270d0:	e7ee      	b.n	80270b0 <__libc_init_array+0xc>
 80270d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80270d6:	4798      	blx	r3
 80270d8:	3601      	adds	r6, #1
 80270da:	e7f2      	b.n	80270c2 <__libc_init_array+0x1e>
 80270dc:	0802760c 	.word	0x0802760c
 80270e0:	0802760c 	.word	0x0802760c
 80270e4:	0802760c 	.word	0x0802760c
 80270e8:	08027610 	.word	0x08027610

080270ec <_init>:
 80270ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80270ee:	bf00      	nop
 80270f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80270f2:	bc08      	pop	{r3}
 80270f4:	469e      	mov	lr, r3
 80270f6:	4770      	bx	lr

080270f8 <_fini>:
 80270f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80270fa:	bf00      	nop
 80270fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80270fe:	bc08      	pop	{r3}
 8027100:	469e      	mov	lr, r3
 8027102:	4770      	bx	lr
