
Firmware1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e28  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c8  080160f8  080160f8  000170f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080173c0  080173c0  000183c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080173c8  080173c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080173cc  080173cc  000183cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000ac  24000000  080173d0  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002634  240000ac  0801747c  000190ac  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240026e0  0801747c  000196e0  2**0
                  ALLOC
  9 .lwip_sec     00000400  30000000  30000000  0001a000  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000190ac  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022c9b  00000000  00000000  000190da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000044c4  00000000  00000000  0003bd75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a90  00000000  00000000  00040240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014e8  00000000  00000000  00041cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00006e9f  00000000  00000000  000431b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026721  00000000  00000000  0004a057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00156e8d  00000000  00000000  00070778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001c7605  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000075d0  00000000  00000000  001c7648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000066  00000000  00000000  001cec18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000ac 	.word	0x240000ac
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080160e0 	.word	0x080160e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000b0 	.word	0x240000b0
 800030c:	080160e0 	.word	0x080160e0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <crc32_custom>:
    0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};

uint32_t crc32_custom(uint32_t crc, const uint8_t *buf, size_t len)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
    if (buf == NULL) return 0;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <crc32_custom+0x16>
 80006fe:	2300      	movs	r3, #0
 8000700:	e01d      	b.n	800073e <crc32_custom+0x52>

    crc = crc ^ 0xFFFFFFFF;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	43db      	mvns	r3, r3
 8000706:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; i < len; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e011      	b.n	8000732 <crc32_custom+0x46>
        crc = crc32_table[(crc ^ buf[i]) & 0xFF] ^ (crc >> 8);
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4053      	eors	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <crc32_custom+0x60>)
 8000720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	4053      	eors	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < len; i++) {
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	3301      	adds	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	429a      	cmp	r2, r3
 8000738:	d3e9      	bcc.n	800070e <crc32_custom+0x22>
    }

    return crc ^ 0xFFFFFFFF;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	43db      	mvns	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	371c      	adds	r7, #28
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	08016548 	.word	0x08016548

08000750 <crc32>:

uint32_t crc32(const void *data, size_t size)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
    return crc32_custom(0, (const uint8_t*)data, size);
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ffc4 	bl	80006ec <crc32_custom>
 8000764:	4603      	mov	r3, r0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <MX_GPIO_Init+0xa4>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	4a21      	ldr	r2, [pc, #132]	@ (8000814 <MX_GPIO_Init+0xa4>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_GPIO_Init+0xa4>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007e6:	480c      	ldr	r0, [pc, #48]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007e8:	f003 f84e 	bl	8003888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0xa8>)
 8000806:	f002 fe97 	bl	8003538 <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58024400 	.word	0x58024400
 8000818:	58020000 	.word	0x58020000

0800081c <check_signature_magic_number_app_1>:
    		return false;
    	}
    }
    return true;
}// User app want to jump to bootloader
bool check_signature_magic_number_app_1(){
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; i++){
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e014      	b.n	8000852 <check_signature_magic_number_app_1+0x36>
    	if(SIGNATURE_FLAG_APP1_P[i] != expected_magic_number[i]){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	00da      	lsls	r2, r3, #3
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <check_signature_magic_number_app_1+0x4c>)
 800082e:	4413      	add	r3, r2
 8000830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000834:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <check_signature_magic_number_app_1+0x50>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	4413      	add	r3, r2
 800083c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000840:	4299      	cmp	r1, r3
 8000842:	bf08      	it	eq
 8000844:	4290      	cmpeq	r0, r2
 8000846:	d001      	beq.n	800084c <check_signature_magic_number_app_1+0x30>
    		return false;
 8000848:	2300      	movs	r3, #0
 800084a:	e006      	b.n	800085a <check_signature_magic_number_app_1+0x3e>
    for(int i = 0; i < 4; i++){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b03      	cmp	r3, #3
 8000856:	dde7      	ble.n	8000828 <check_signature_magic_number_app_1+0xc>
    	}
    }
    return true;
 8000858:	2301      	movs	r3, #1
}// Check signature
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	080e0000 	.word	0x080e0000
 800086c:	24000010 	.word	0x24000010

08000870 <check_signature_magic_number_app_2>:
bool check_signature_magic_number_app_2(){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; i++){
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	e014      	b.n	80008a6 <check_signature_magic_number_app_2+0x36>
    	if(SIGNATURE_FLAG_APP2_P[i] != expected_magic_number[i]){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	00da      	lsls	r2, r3, #3
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <check_signature_magic_number_app_2+0x4c>)
 8000882:	4413      	add	r3, r2
 8000884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <check_signature_magic_number_app_2+0x50>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000894:	4299      	cmp	r1, r3
 8000896:	bf08      	it	eq
 8000898:	4290      	cmpeq	r0, r2
 800089a:	d001      	beq.n	80008a0 <check_signature_magic_number_app_2+0x30>
    		return false;
 800089c:	2300      	movs	r3, #0
 800089e:	e006      	b.n	80008ae <check_signature_magic_number_app_2+0x3e>
    for(int i = 0; i < 4; i++){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	dde7      	ble.n	800087c <check_signature_magic_number_app_2+0xc>
    	}
    }
    return true;
 80008ac:	2301      	movs	r3, #1
}//
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	080e0020 	.word	0x080e0020
 80008c0:	24000010 	.word	0x24000010

080008c4 <cal_flash_used_app_1>:
uint32_t cal_flash_used_app_1(void) {
 80008c4:	b4f0      	push	{r4, r5, r6, r7}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
    uint32_t count;
    __asm__ volatile (
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	4912      	ldr	r1, [pc, #72]	@ (8000918 <done+0x12>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <done+0x16>)

080008d2 <loop_start>:
 80008d2:	4291      	cmp	r1, r2
 80008d4:	da17      	bge.n	8000906 <done>
 80008d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80008da:	f851 4b04 	ldr.w	r4, [r1], #4
 80008de:	f851 5b04 	ldr.w	r5, [r1], #4
 80008e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80008e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ea:	d109      	bne.n	8000900 <inc>
 80008ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008f0:	d106      	bne.n	8000900 <inc>
 80008f2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80008f6:	d103      	bne.n	8000900 <inc>
 80008f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80008fc:	d100      	bne.n	8000900 <inc>
 80008fe:	e7e8      	b.n	80008d2 <loop_start>

08000900 <inc>:
 8000900:	f100 0001 	add.w	r0, r0, #1
 8000904:	e7e5      	b.n	80008d2 <loop_start>

08000906 <done>:
 8000906:	4684      	mov	ip, r0
 8000908:	4663      	mov	r3, ip
 800090a:	607b      	str	r3, [r7, #4]
        "mov %[out], r0\n"
        : [out] "=r" (count)
        :
        : "r0", "r1", "r2", "r3", "r4", "r5", "r6"
    );
    return count;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bcf0      	pop	{r4, r5, r6, r7}
 8000916:	4770      	bx	lr
 8000918:	08020000 	.word	0x08020000
 800091c:	0805ffff 	.word	0x0805ffff

08000920 <cal_flash_used_app_2>:

uint32_t cal_flash_used_app_2(void) {
 8000920:	b4f0      	push	{r4, r5, r6, r7}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
    uint32_t count;
    __asm__ volatile (
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4912      	ldr	r1, [pc, #72]	@ (8000974 <flash1_done+0x12>)
 800092c:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <flash1_done+0x16>)

0800092e <flash1_loop_start>:
 800092e:	4291      	cmp	r1, r2
 8000930:	da17      	bge.n	8000962 <flash1_done>
 8000932:	f851 3b04 	ldr.w	r3, [r1], #4
 8000936:	f851 4b04 	ldr.w	r4, [r1], #4
 800093a:	f851 5b04 	ldr.w	r5, [r1], #4
 800093e:	f851 6b04 	ldr.w	r6, [r1], #4
 8000942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000946:	d109      	bne.n	800095c <flash1_inc>
 8000948:	f1b4 3fff 	cmp.w	r4, #4294967295
 800094c:	d106      	bne.n	800095c <flash1_inc>
 800094e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000952:	d103      	bne.n	800095c <flash1_inc>
 8000954:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000958:	d100      	bne.n	800095c <flash1_inc>
 800095a:	e7e8      	b.n	800092e <flash1_loop_start>

0800095c <flash1_inc>:
 800095c:	f100 0001 	add.w	r0, r0, #1
 8000960:	e7e5      	b.n	800092e <flash1_loop_start>

08000962 <flash1_done>:
 8000962:	4684      	mov	ip, r0
 8000964:	4663      	mov	r3, ip
 8000966:	607b      	str	r3, [r7, #4]
        : [out] "=r" (count)
        :
        : "r0", "r1", "r2", "r3", "r4", "r5", "r6"
    );

    return count;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bcf0      	pop	{r4, r5, r6, r7}
 8000972:	4770      	bx	lr
 8000974:	08060000 	.word	0x08060000
 8000978:	0809ffff 	.word	0x0809ffff

0800097c <del_mem>:
int del_mem(uint8_t start, uint8_t number_of_sector){
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	460a      	mov	r2, r1
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	71bb      	strb	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800098c:	f002 fc70 	bl	8003270 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000998:	2320      	movs	r3, #32
 800099a:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.Banks = FLASH_BANK_1;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector = start;
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = number_of_sector;
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK)
 80009a8:	f107 0208 	add.w	r2, r7, #8
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fcec 	bl	8003390 <HAL_FLASHEx_Erase>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <del_mem+0x4a>
    {
        // Erase failed
    	HAL_FLASH_Lock();
 80009be:	f002 fc79 	bl	80032b4 <HAL_FLASH_Lock>
    	return 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e002      	b.n	80009cc <del_mem+0x50>
    }
    else
    {
    	HAL_FLASH_Lock();
 80009c6:	f002 fc75 	bl	80032b4 <HAL_FLASH_Lock>
        return 0;
 80009ca:	2300      	movs	r3, #0
    }
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <bl_jump_to_code_uart>:

void bl_jump_to_code_uart(uint8_t *buffer){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	uint32_t len = buffer[0] + 1;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
	uint32_t crc_host = crc32(buffer, len - 4);
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3b04      	subs	r3, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff feb0 	bl	8000750 <crc32>
 80009f0:	6138      	str	r0, [r7, #16]
	uint32_t crc_recv = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
	memcpy(&crc_recv, &buffer[len - 4], 4);
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3b04      	subs	r3, #4
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60bb      	str	r3, [r7, #8]

	if (crc_host == crc_recv) {
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d00c      	beq.n	8000a24 <bl_jump_to_code_uart+0x50>
//			const char *msg = "Signature failed \r\n";
//			HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
//			return;
//		}
	} else {
		const char *msg = "CRC failed\r\n";
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <bl_jump_to_code_uart+0x58>)
 8000a0c:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f7ff fc7e 	bl	8000310 <strlen>
 8000a14:	4603      	mov	r3, r0
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	68f9      	ldr	r1, [r7, #12]
 8000a1e:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <bl_jump_to_code_uart+0x5c>)
 8000a20:	f006 f8b4 	bl	8006b8c <HAL_UART_Transmit>
	}

}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	080160f8 	.word	0x080160f8
 8000a30:	24000294 	.word	0x24000294

08000a34 <bl_check_connect_uart>:

void bl_check_connect_uart(uint8_t *buffer) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	uint32_t len = buffer[0] + 1;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
	uint32_t crc_host = crc32(buffer, len - 4);
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	3b04      	subs	r3, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff fe80 	bl	8000750 <crc32>
 8000a50:	61b8      	str	r0, [r7, #24]
	uint32_t crc_recv = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
	memcpy(&crc_recv, &buffer[len - 4], 4);
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3b04      	subs	r3, #4
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]

	if (crc_host == crc_recv) {
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d10d      	bne.n	8000a86 <bl_check_connect_uart+0x52>
		const char *msg = "CONNECTED\r\n";
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <bl_check_connect_uart+0x74>)
 8000a6c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a6e:	6938      	ldr	r0, [r7, #16]
 8000a70:	f7ff fc4e 	bl	8000310 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7c:	6939      	ldr	r1, [r7, #16]
 8000a7e:	480b      	ldr	r0, [pc, #44]	@ (8000aac <bl_check_connect_uart+0x78>)
 8000a80:	f006 f884 	bl	8006b8c <HAL_UART_Transmit>
	} else {
		const char *msg = "CRC failed\r\n";
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	}
}
 8000a84:	e00c      	b.n	8000aa0 <bl_check_connect_uart+0x6c>
		const char *msg = "CRC failed\r\n";
 8000a86:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab0 <bl_check_connect_uart+0x7c>)
 8000a88:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff fc40 	bl	8000310 <strlen>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	6979      	ldr	r1, [r7, #20]
 8000a9a:	4804      	ldr	r0, [pc, #16]	@ (8000aac <bl_check_connect_uart+0x78>)
 8000a9c:	f006 f876 	bl	8006b8c <HAL_UART_Transmit>
}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	08016108 	.word	0x08016108
 8000aac:	24000294 	.word	0x24000294
 8000ab0:	080160f8 	.word	0x080160f8

08000ab4 <bl_reset_metadata_state>:
static uint32_t current_verified_app_base = 0;
void bl_reset_metadata_state(void) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
    current_verified_app_base = 0;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <bl_reset_metadata_state+0x14>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	240001f4 	.word	0x240001f4

08000acc <bl_write_mem_uart>:
}__attribute__((packed, aligned(32))) FirmwareMetadata;
typedef struct{
	uint32_t run_ok_flag;
	uint32_t retry_counter;
}__attribute__((packed, aligned(32))) FirmwareUserStatus;
void bl_write_mem_uart(uint8_t *buffer) {
 8000acc:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8000ad0:	f2ad 5d3c 	subw	sp, sp, #1340	@ 0x53c
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ada:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000ade:	6018      	str	r0, [r3, #0]
 8000ae0:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ae4:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8000ae8:	331f      	adds	r3, #31
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	015c      	lsls	r4, r3, #5
	FirmwareMetadata F;
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
 8000aee:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 f9bc 	bl	8008e70 <mbedtls_aes_init>
    mbedtls_aes_setkey_dec(&aes, aes_key, 128);
 8000af8:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 8000afc:	2280      	movs	r2, #128	@ 0x80
 8000afe:	49d2      	ldr	r1, [pc, #840]	@ (8000e48 <bl_write_mem_uart+0x37c>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f008 fbb5 	bl	8009270 <mbedtls_aes_setkey_dec>

    uint32_t command_len = buffer[0] + 1;
 8000b06:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b0a:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    uint32_t crc_host = crc32(buffer, command_len - 4);
 8000b18:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8000b1c:	1f1a      	subs	r2, r3, #4
 8000b1e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b22:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b26:	4611      	mov	r1, r2
 8000b28:	6818      	ldr	r0, [r3, #0]
 8000b2a:	f7ff fe11 	bl	8000750 <crc32>
 8000b2e:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
    uint32_t crc_recv;
    memcpy(&crc_recv, &buffer[command_len - 4], 4);
 8000b32:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8000b36:	3b04      	subs	r3, #4
 8000b38:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8000b3c:	f2a2 522c 	subw	r2, r2, #1324	@ 0x52c
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000b50:	601a      	str	r2, [r3, #0]

    if (crc_host != crc_recv) {
 8000b52:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b56:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d007      	beq.n	8000b74 <bl_write_mem_uart+0xa8>
        HAL_UART_Transmit(&huart1, (uint8_t *)"CRC failed\r\n", 12, HAL_MAX_DELAY);
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	220c      	movs	r2, #12
 8000b6a:	49b8      	ldr	r1, [pc, #736]	@ (8000e4c <bl_write_mem_uart+0x380>)
 8000b6c:	48b8      	ldr	r0, [pc, #736]	@ (8000e50 <bl_write_mem_uart+0x384>)
 8000b6e:	f006 f80d 	bl	8006b8c <HAL_UART_Transmit>
        return;
 8000b72:	e25f      	b.n	8001034 <bl_write_mem_uart+0x568>
    }

    uint32_t address;
    uint8_t size_firmware;
    memcpy(&address, &buffer[2], 4);
 8000b74:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b78:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b88:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000b8c:	601a      	str	r2, [r3, #0]
    memcpy(&size_firmware, &buffer[6], 1);
 8000b8e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b92:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3306      	adds	r3, #6
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ba0:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000ba4:	701a      	strb	r2, [r3, #0]

    uint8_t *firmware = &buffer[7];
 8000ba6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000baa:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	3307      	adds	r3, #7
 8000bb2:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518

    if (address == APP1_ADDR_START || address == APP2_ADDR_START) {//First chunk, check metedata
 8000bb6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4aa4      	ldr	r2, [pc, #656]	@ (8000e54 <bl_write_mem_uart+0x388>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d008      	beq.n	8000bd8 <bl_write_mem_uart+0x10c>
 8000bc6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4aa1      	ldr	r2, [pc, #644]	@ (8000e58 <bl_write_mem_uart+0x38c>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	f040 815f 	bne.w	8000e96 <bl_write_mem_uart+0x3ca>
        uint32_t version;
        uint32_t total_firmware_length;
        memcpy(&version, &firmware[0], 4);
 8000bd8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000be4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8000be8:	601a      	str	r2, [r3, #0]
        memcpy(&total_firmware_length, &firmware[4], 4);
 8000bea:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000bee:	3304      	adds	r3, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bf8:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000bfc:	601a      	str	r2, [r3, #0]

        if (total_firmware_length > 256000) {
 8000bfe:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c02:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f5b3 3f7a 	cmp.w	r3, #256000	@ 0x3e800
 8000c0c:	d909      	bls.n	8000c22 <bl_write_mem_uart+0x156>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ FIRMWARE TOO LARGE\r\n", 24, HAL_MAX_DELAY);
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	2218      	movs	r2, #24
 8000c14:	4991      	ldr	r1, [pc, #580]	@ (8000e5c <bl_write_mem_uart+0x390>)
 8000c16:	488e      	ldr	r0, [pc, #568]	@ (8000e50 <bl_write_mem_uart+0x384>)
 8000c18:	f005 ffb8 	bl	8006b8c <HAL_UART_Transmit>
            bl_reset_metadata_state();
 8000c1c:	f7ff ff4a 	bl	8000ab4 <bl_reset_metadata_state>
            return;
 8000c20:	e208      	b.n	8001034 <bl_write_mem_uart+0x568>
        }

        // 👉 Lấy ECC signature
        uint8_t *sig = &firmware[8];  // 64 bytes //ECC
 8000c22:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000c26:	3308      	adds	r3, #8
 8000c28:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
        uint8_t version_data[8];
        memcpy(version_data, &firmware[0], 8);
 8000c2c:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c30:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8000c34:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8000c38:	6810      	ldr	r0, [r2, #0]
 8000c3a:	6851      	ldr	r1, [r2, #4]
 8000c3c:	c303      	stmia	r3!, {r0, r1}
        uint32_t version_ex;
        memcpy(&version_ex, &firmware[0], 4);
 8000c3e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c4a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c4e:	601a      	str	r2, [r3, #0]

        F.address = address + 224;
 8000c50:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c54:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	33e0      	adds	r3, #224	@ 0xe0
 8000c5c:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
        F.version = version_ex;
 8000c60:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c64:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0

        uint64_t *flag_ptr = (uint64_t *)0X08017680;
 8000c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e60 <bl_write_mem_uart+0x394>)
 8000c70:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
        while (*flag_ptr != 0xFFFFFFFFFFFFFFFFULL) {
 8000c74:	e01c      	b.n	8000cb0 <bl_write_mem_uart+0x1e4>
            uint32_t stored_version = *(uint32_t *)flag_ptr;
 8000c76:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
            if (version_ex <= stored_version) {
 8000c80:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c84:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d309      	bcc.n	8000ca6 <bl_write_mem_uart+0x1da>
                HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Version is too old\r\n", 24, HAL_MAX_DELAY);
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	2218      	movs	r2, #24
 8000c98:	4972      	ldr	r1, [pc, #456]	@ (8000e64 <bl_write_mem_uart+0x398>)
 8000c9a:	486d      	ldr	r0, [pc, #436]	@ (8000e50 <bl_write_mem_uart+0x384>)
 8000c9c:	f005 ff76 	bl	8006b8c <HAL_UART_Transmit>
                bl_reset_metadata_state();
 8000ca0:	f7ff ff08 	bl	8000ab4 <bl_reset_metadata_state>
                return;
 8000ca4:	e1c6      	b.n	8001034 <bl_write_mem_uart+0x568>
            }
            flag_ptr += 4;
 8000ca6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8000caa:	3320      	adds	r3, #32
 8000cac:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
        while (*flag_ptr != 0xFFFFFFFFFFFFFFFFULL) {
 8000cb0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	bf08      	it	eq
 8000cbe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000cc2:	d1d8      	bne.n	8000c76 <bl_write_mem_uart+0x1aa>
        }
        uint8_t hash[32];
        mbedtls_sha256(version_data, 8, hash, 0); // 0 = SHA256
 8000cc4:	f107 020c 	add.w	r2, r7, #12
 8000cc8:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 8000ccc:	2300      	movs	r3, #0
 8000cce:	2108      	movs	r1, #8
 8000cd0:	f014 fd20 	bl	8015714 <mbedtls_sha256>

        mbedtls_ecdsa_context ctx;
        mbedtls_ecdsa_init(&ctx);
 8000cd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f00d f8f3 	bl	800dec4 <mbedtls_ecdsa_init>
        mbedtls_ecp_group_load(&ctx.grp, MBEDTLS_ECP_DP_SECP256R1);
 8000cde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f010 fb0d 	bl	8011304 <mbedtls_ecp_group_load>
        mbedtls_mpi_read_binary(&ctx.Q.X, public_key, 32);
 8000cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cee:	3388      	adds	r3, #136	@ 0x88
 8000cf0:	2220      	movs	r2, #32
 8000cf2:	495d      	ldr	r1, [pc, #372]	@ (8000e68 <bl_write_mem_uart+0x39c>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f009 ff2f 	bl	800ab58 <mbedtls_mpi_read_binary>
        mbedtls_mpi_read_binary(&ctx.Q.Y, public_key + 32, 32);
 8000cfa:	495c      	ldr	r1, [pc, #368]	@ (8000e6c <bl_write_mem_uart+0x3a0>)
 8000cfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d00:	3394      	adds	r3, #148	@ 0x94
 8000d02:	2220      	movs	r2, #32
 8000d04:	4618      	mov	r0, r3
 8000d06:	f009 ff27 	bl	800ab58 <mbedtls_mpi_read_binary>
        mbedtls_mpi_lset(&ctx.Q.Z, 1);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0e:	33a0      	adds	r3, #160	@ 0xa0
 8000d10:	2101      	movs	r1, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f009 fc8c 	bl	800a630 <mbedtls_mpi_lset>

        mbedtls_mpi r, s;
        mbedtls_mpi_init(&r); mbedtls_mpi_init(&s);
 8000d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f009 fa46 	bl	800a1ae <mbedtls_mpi_init>
 8000d22:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d26:	4618      	mov	r0, r3
 8000d28:	f009 fa41 	bl	800a1ae <mbedtls_mpi_init>
        mbedtls_mpi_read_binary(&r, sig, 32);
 8000d2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d30:	2220      	movs	r2, #32
 8000d32:	f8d7 1514 	ldr.w	r1, [r7, #1300]	@ 0x514
 8000d36:	4618      	mov	r0, r3
 8000d38:	f009 ff0e 	bl	800ab58 <mbedtls_mpi_read_binary>
        mbedtls_mpi_read_binary(&s, sig + 32, 32);
 8000d3c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8000d40:	f103 0120 	add.w	r1, r3, #32
 8000d44:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d48:	2220      	movs	r2, #32
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f009 ff04 	bl	800ab58 <mbedtls_mpi_read_binary>

        int ret = mbedtls_ecdsa_verify(&ctx.grp, hash, 32, &ctx.Q, &r, &s);
 8000d50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d54:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8000d58:	f107 010c 	add.w	r1, r7, #12
 8000d5c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000d60:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	2220      	movs	r2, #32
 8000d70:	f00d f890 	bl	800de94 <mbedtls_ecdsa_verify>
 8000d74:	f8c7 0510 	str.w	r0, [r7, #1296]	@ 0x510

        mbedtls_mpi_free(&r); mbedtls_mpi_free(&s);
 8000d78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fa29 	bl	800a1d4 <mbedtls_mpi_free>
 8000d82:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d86:	4618      	mov	r0, r3
 8000d88:	f009 fa24 	bl	800a1d4 <mbedtls_mpi_free>
        mbedtls_ecdsa_free(&ctx);
 8000d8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d90:	4618      	mov	r0, r3
 8000d92:	f00d f8a2 	bl	800deda <mbedtls_ecdsa_free>

        if (ret != 0) {
 8000d96:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d009      	beq.n	8000db2 <bl_write_mem_uart+0x2e6>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Metadata Signature FAIL\r\n", 28, HAL_MAX_DELAY);
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	221c      	movs	r2, #28
 8000da4:	4932      	ldr	r1, [pc, #200]	@ (8000e70 <bl_write_mem_uart+0x3a4>)
 8000da6:	482a      	ldr	r0, [pc, #168]	@ (8000e50 <bl_write_mem_uart+0x384>)
 8000da8:	f005 fef0 	bl	8006b8c <HAL_UART_Transmit>
            bl_reset_metadata_state();
 8000dac:	f7ff fe82 	bl	8000ab4 <bl_reset_metadata_state>
            return;
 8000db0:	e140      	b.n	8001034 <bl_write_mem_uart+0x568>
        }
        uint64_t version_block[8] __attribute__((aligned(32))); // 64 bytes
        memset(version_block, 0xFF, sizeof(version_block));
 8000db2:	2240      	movs	r2, #64	@ 0x40
 8000db4:	21ff      	movs	r1, #255	@ 0xff
 8000db6:	4620      	mov	r0, r4
 8000db8:	f014 fddc 	bl	8015974 <memset>
        memcpy(version_block, &F, 8); // chỉ lưu version
 8000dbc:	e9d4 2338 	ldrd	r2, r3, [r4, #224]	@ 0xe0
 8000dc0:	e9c4 2300 	strd	r2, r3, [r4]

        HAL_FLASH_Unlock();
 8000dc4:	f002 fa54 	bl	8003270 <HAL_FLASH_Unlock>
        uint32_t dummy_flag = 0X08017680; //0x08020000
 8000dc8:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <bl_write_mem_uart+0x394>)
 8000dca:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
        uint64_t temp;
        while (1) {
            memcpy(&temp, dummy_flag, sizeof(temp));
 8000dce:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8000dd2:	f8d3 8000 	ldr.w	r8, [r3]
 8000dd6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8000dda:	4642      	mov	r2, r8
 8000ddc:	464b      	mov	r3, r9
 8000dde:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
            if (temp == 0xFFFFFFFFFFFFFFFFULL) break;
 8000de2:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8000de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dea:	bf08      	it	eq
 8000dec:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000df0:	d005      	beq.n	8000dfe <bl_write_mem_uart+0x332>
            dummy_flag += 32;
 8000df2:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8000df6:	3320      	adds	r3, #32
 8000df8:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
            memcpy(&temp, dummy_flag, sizeof(temp));
 8000dfc:	e7e7      	b.n	8000dce <bl_write_mem_uart+0x302>
            if (temp == 0xFFFFFFFFFFFFFFFFULL) break;
 8000dfe:	bf00      	nop
        }
        if (((uint32_t)dummy_flag % 32) != 0) {
 8000e00:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8000e04:	f003 031f 	and.w	r3, r3, #31
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d007      	beq.n	8000e1c <bl_write_mem_uart+0x350>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Addr not aligned\r\n", 22, HAL_MAX_DELAY);
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	2216      	movs	r2, #22
 8000e12:	4918      	ldr	r1, [pc, #96]	@ (8000e74 <bl_write_mem_uart+0x3a8>)
 8000e14:	480e      	ldr	r0, [pc, #56]	@ (8000e50 <bl_write_mem_uart+0x384>)
 8000e16:	f005 feb9 	bl	8006b8c <HAL_UART_Transmit>
            return;
 8000e1a:	e10b      	b.n	8001034 <bl_write_mem_uart+0x568>
        }

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD , dummy_flag , (uint32_t)&version_block) != HAL_OK) {
 8000e1c:	4623      	mov	r3, r4
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f8d7 1528 	ldr.w	r1, [r7, #1320]	@ 0x528
 8000e24:	2001      	movs	r0, #1
 8000e26:	f002 f9b3 	bl	8003190 <HAL_FLASH_Program>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d025      	beq.n	8000e7c <bl_write_mem_uart+0x3b0>
			HAL_FLASH_Lock();
 8000e30:	f002 fa40 	bl	80032b4 <HAL_FLASH_Lock>
			HAL_UART_Transmit(&huart1, (uint8_t *)"WRITE ERROR\r\n", 14, HAL_MAX_DELAY);
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
 8000e38:	220e      	movs	r2, #14
 8000e3a:	490f      	ldr	r1, [pc, #60]	@ (8000e78 <bl_write_mem_uart+0x3ac>)
 8000e3c:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <bl_write_mem_uart+0x384>)
 8000e3e:	f005 fea5 	bl	8006b8c <HAL_UART_Transmit>
			bl_reset_metadata_state();
 8000e42:	f7ff fe37 	bl	8000ab4 <bl_reset_metadata_state>
			return;
 8000e46:	e0f5      	b.n	8001034 <bl_write_mem_uart+0x568>
 8000e48:	08016988 	.word	0x08016988
 8000e4c:	080160f8 	.word	0x080160f8
 8000e50:	24000294 	.word	0x24000294
 8000e54:	08020000 	.word	0x08020000
 8000e58:	08060000 	.word	0x08060000
 8000e5c:	08016114 	.word	0x08016114
 8000e60:	08017680 	.word	0x08017680
 8000e64:	08016130 	.word	0x08016130
 8000e68:	08016948 	.word	0x08016948
 8000e6c:	08016968 	.word	0x08016968
 8000e70:	0801614c 	.word	0x0801614c
 8000e74:	0801616c 	.word	0x0801616c
 8000e78:	08016184 	.word	0x08016184
		}
	    HAL_FLASH_Lock();
 8000e7c:	f002 fa1a 	bl	80032b4 <HAL_FLASH_Lock>
	    current_verified_app_base = 1;
 8000e80:	4b6f      	ldr	r3, [pc, #444]	@ (8001040 <bl_write_mem_uart+0x574>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t *)"✅ Metadata Signature OK\r\n", 26, HAL_MAX_DELAY);
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	221a      	movs	r2, #26
 8000e8c:	496d      	ldr	r1, [pc, #436]	@ (8001044 <bl_write_mem_uart+0x578>)
 8000e8e:	486e      	ldr	r0, [pc, #440]	@ (8001048 <bl_write_mem_uart+0x57c>)
 8000e90:	f005 fe7c 	bl	8006b8c <HAL_UART_Transmit>

        return;
 8000e94:	e0ce      	b.n	8001034 <bl_write_mem_uart+0x568>
    }

    if(current_verified_app_base != 1){
 8000e96:	4b6a      	ldr	r3, [pc, #424]	@ (8001040 <bl_write_mem_uart+0x574>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d007      	beq.n	8000eae <bl_write_mem_uart+0x3e2>
    	HAL_UART_Transmit(&huart1, (uint8_t *)"ECC of version is FAILED\r\n", 30, HAL_MAX_DELAY);
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	221e      	movs	r2, #30
 8000ea4:	4969      	ldr	r1, [pc, #420]	@ (800104c <bl_write_mem_uart+0x580>)
 8000ea6:	4868      	ldr	r0, [pc, #416]	@ (8001048 <bl_write_mem_uart+0x57c>)
 8000ea8:	f005 fe70 	bl	8006b8c <HAL_UART_Transmit>
    	return;
 8000eac:	e0c2      	b.n	8001034 <bl_write_mem_uart+0x568>
    }
	if (address < 0x08000000 || address + size_firmware > 0x08200000 || address % 32 != 0) {
 8000eae:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000eb2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000ebc:	d317      	bcc.n	8000eee <bl_write_mem_uart+0x422>
 8000ebe:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ec2:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ece:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8000eda:	d808      	bhi.n	8000eee <bl_write_mem_uart+0x422>
 8000edc:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ee0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d007      	beq.n	8000efe <bl_write_mem_uart+0x432>
		HAL_UART_Transmit(&huart1, (uint8_t *)"INVALID ADDRESS\r\n", 17, HAL_MAX_DELAY);
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	2211      	movs	r2, #17
 8000ef4:	4956      	ldr	r1, [pc, #344]	@ (8001050 <bl_write_mem_uart+0x584>)
 8000ef6:	4854      	ldr	r0, [pc, #336]	@ (8001048 <bl_write_mem_uart+0x57c>)
 8000ef8:	f005 fe48 	bl	8006b8c <HAL_UART_Transmit>
		return;
 8000efc:	e09a      	b.n	8001034 <bl_write_mem_uart+0x568>
	}

	uint8_t padded_input[224];
	uint8_t decrypted_firmware[224];
	memset(padded_input, 0xFF, sizeof(padded_input));
 8000efe:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000f02:	22e0      	movs	r2, #224	@ 0xe0
 8000f04:	21ff      	movs	r1, #255	@ 0xff
 8000f06:	4618      	mov	r0, r3
 8000f08:	f014 fd34 	bl	8015974 <memset>
	memcpy(padded_input, firmware, size_firmware);
 8000f0c:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000f10:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000f1c:	f8d7 1518 	ldr.w	r1, [r7, #1304]	@ 0x518
 8000f20:	4618      	mov	r0, r3
 8000f22:	f014 fd6b 	bl	80159fc <memcpy>

	if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, 224, iv, padded_input, decrypted_firmware)) {
 8000f26:	f507 707d 	add.w	r0, r7, #1012	@ 0x3f4
 8000f2a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000f2e:	9301      	str	r3, [sp, #4]
 8000f30:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	4b47      	ldr	r3, [pc, #284]	@ (8001054 <bl_write_mem_uart+0x588>)
 8000f38:	22e0      	movs	r2, #224	@ 0xe0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f009 f8a7 	bl	800a08e <mbedtls_aes_crypt_cbc>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d007      	beq.n	8000f56 <bl_write_mem_uart+0x48a>
		HAL_UART_Transmit(&huart1, (uint8_t *)"DECRYPT FAILED\r\n", 17, HAL_MAX_DELAY);
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	2211      	movs	r2, #17
 8000f4c:	4942      	ldr	r1, [pc, #264]	@ (8001058 <bl_write_mem_uart+0x58c>)
 8000f4e:	483e      	ldr	r0, [pc, #248]	@ (8001048 <bl_write_mem_uart+0x57c>)
 8000f50:	f005 fe1c 	bl	8006b8c <HAL_UART_Transmit>
		return;
 8000f54:	e06e      	b.n	8001034 <bl_write_mem_uart+0x568>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f56:	f3bf 8f4f 	dsb	sy
}
 8000f5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f5c:	f3bf 8f6f 	isb	sy
}
 8000f60:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f62:	4b3e      	ldr	r3, [pc, #248]	@ (800105c <bl_write_mem_uart+0x590>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a3d      	ldr	r2, [pc, #244]	@ (800105c <bl_write_mem_uart+0x590>)
 8000f68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000f6c:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800105c <bl_write_mem_uart+0x590>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f76:	f3bf 8f4f 	dsb	sy
}
 8000f7a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f7c:	f3bf 8f6f 	isb	sy
}
 8000f80:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000f82:	bf00      	nop
	 * decrypt
	 */
	SCB_DisableICache();
	// SCB_DisableDCache();

	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000f84:	f002 f974 	bl	8003270 <HAL_FLASH_Unlock>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <bl_write_mem_uart+0x4d2>
		HAL_UART_Transmit(&huart1, (uint8_t *)"UNLOCK ERROR\r\n", 15, HAL_MAX_DELAY);
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	220f      	movs	r2, #15
 8000f94:	4932      	ldr	r1, [pc, #200]	@ (8001060 <bl_write_mem_uart+0x594>)
 8000f96:	482c      	ldr	r0, [pc, #176]	@ (8001048 <bl_write_mem_uart+0x57c>)
 8000f98:	f005 fdf8 	bl	8006b8c <HAL_UART_Transmit>
		return;
 8000f9c:	e04a      	b.n	8001034 <bl_write_mem_uart+0x568>
	}

	uint64_t val[28] __attribute__((aligned(32)));
	memset(val, 0xFF, sizeof(val));
 8000f9e:	22e0      	movs	r2, #224	@ 0xe0
 8000fa0:	21ff      	movs	r1, #255	@ 0xff
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	f014 fce6 	bl	8015974 <memset>
	memcpy(val, decrypted_firmware, size_firmware);
 8000fa8:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000fac:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f014 fd1e 	bl	80159fc <memcpy>

	for (uint32_t offset = 0; offset < size_firmware; offset += 32) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8000fc6:	e022      	b.n	800100e <bl_write_mem_uart+0x542>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, address + offset, (uint32_t)&val[offset / 8]) != HAL_OK) {
 8000fc8:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000fcc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8000fd6:	18d1      	adds	r1, r2, r3
 8000fd8:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	4423      	add	r3, r4
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f002 f8d3 	bl	8003190 <HAL_FLASH_Program>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d009      	beq.n	8001004 <bl_write_mem_uart+0x538>
			HAL_FLASH_Lock();
 8000ff0:	f002 f960 	bl	80032b4 <HAL_FLASH_Lock>
			HAL_UART_Transmit(&huart1, (uint8_t *)"WRITE ERROR\r\n", 14, HAL_MAX_DELAY);
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	220e      	movs	r2, #14
 8000ffa:	491a      	ldr	r1, [pc, #104]	@ (8001064 <bl_write_mem_uart+0x598>)
 8000ffc:	4812      	ldr	r0, [pc, #72]	@ (8001048 <bl_write_mem_uart+0x57c>)
 8000ffe:	f005 fdc5 	bl	8006b8c <HAL_UART_Transmit>
			return;
 8001002:	e017      	b.n	8001034 <bl_write_mem_uart+0x568>
	for (uint32_t offset = 0; offset < size_firmware; offset += 32) {
 8001004:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001008:	3320      	adds	r3, #32
 800100a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 800100e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8001012:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800101e:	4293      	cmp	r3, r2
 8001020:	d3d2      	bcc.n	8000fc8 <bl_write_mem_uart+0x4fc>
		}
	}

	HAL_FLASH_Lock();
 8001022:	f002 f947 	bl	80032b4 <HAL_FLASH_Lock>

	HAL_UART_Transmit(&huart1, (uint8_t *)"WRITE OK\r\n", 10, HAL_MAX_DELAY);
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	220a      	movs	r2, #10
 800102c:	490e      	ldr	r1, [pc, #56]	@ (8001068 <bl_write_mem_uart+0x59c>)
 800102e:	4806      	ldr	r0, [pc, #24]	@ (8001048 <bl_write_mem_uart+0x57c>)
 8001030:	f005 fdac 	bl	8006b8c <HAL_UART_Transmit>

}
 8001034:	f207 5734 	addw	r7, r7, #1332	@ 0x534
 8001038:	46bd      	mov	sp, r7
 800103a:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 800103e:	bf00      	nop
 8001040:	240001f4 	.word	0x240001f4
 8001044:	08016194 	.word	0x08016194
 8001048:	24000294 	.word	0x24000294
 800104c:	080161b0 	.word	0x080161b0
 8001050:	080161cc 	.word	0x080161cc
 8001054:	24000000 	.word	0x24000000
 8001058:	080161e0 	.word	0x080161e0
 800105c:	e000ed00 	.word	0xe000ed00
 8001060:	080161f4 	.word	0x080161f4
 8001064:	08016184 	.word	0x08016184
 8001068:	08016204 	.word	0x08016204

0800106c <bl_del_mem>:
void bl_del_mem(uint8_t* buffer){
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	@ 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    uint32_t command_len = buffer[0] + 1;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t host_crc = crc32(buffer, command_len - 4);
 800107c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800107e:	3b04      	subs	r3, #4
 8001080:	4619      	mov	r1, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fb64 	bl	8000750 <crc32>
 8001088:	62b8      	str	r0, [r7, #40]	@ 0x28
    uint32_t crc_recv = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
    memcpy(&crc_recv, &buffer[command_len - 4], 4);
 800108e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001090:	3b04      	subs	r3, #4
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	613b      	str	r3, [r7, #16]
    if(host_crc == crc_recv){
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800109e:	429a      	cmp	r2, r3
 80010a0:	d171      	bne.n	8001186 <bl_del_mem+0x11a>
    	uint32_t addr = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
    	memcpy(&addr, &buffer[2], 4);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3302      	adds	r3, #2
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]

        if (addr != APP1_ADDR_START && addr != APP2_ADDR_START) {
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4a3d      	ldr	r2, [pc, #244]	@ (80011a8 <bl_del_mem+0x13c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00b      	beq.n	80010ce <bl_del_mem+0x62>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4a3c      	ldr	r2, [pc, #240]	@ (80011ac <bl_del_mem+0x140>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d007      	beq.n	80010ce <bl_del_mem+0x62>
            HAL_UART_Transmit(&huart1, (uint8_t *)"INVALID ERASE ADDR\r\n", 21, HAL_MAX_DELAY);
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	2215      	movs	r2, #21
 80010c4:	493a      	ldr	r1, [pc, #232]	@ (80011b0 <bl_del_mem+0x144>)
 80010c6:	483b      	ldr	r0, [pc, #236]	@ (80011b4 <bl_del_mem+0x148>)
 80010c8:	f005 fd60 	bl	8006b8c <HAL_UART_Transmit>
            return;
 80010cc:	e069      	b.n	80011a2 <bl_del_mem+0x136>
        }
        else if(addr == APP1_ADDR_START){
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4a35      	ldr	r2, [pc, #212]	@ (80011a8 <bl_del_mem+0x13c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d129      	bne.n	800112a <bl_del_mem+0xbe>
        	if(del_mem(FLASH_SECTOR_1, 2) == 1 && del_mem(FLASH_SECTOR_7, 1) == 1 ){
 80010d6:	2102      	movs	r1, #2
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff fc4f 	bl	800097c <del_mem>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d114      	bne.n	800110e <bl_del_mem+0xa2>
 80010e4:	2101      	movs	r1, #1
 80010e6:	2007      	movs	r0, #7
 80010e8:	f7ff fc48 	bl	800097c <del_mem>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d10d      	bne.n	800110e <bl_del_mem+0xa2>
            	const char *msg = "DELETE APP 1 SUCCESSFULLY\r\n";
 80010f2:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <bl_del_mem+0x14c>)
 80010f4:	61bb      	str	r3, [r7, #24]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80010f6:	69b8      	ldr	r0, [r7, #24]
 80010f8:	f7ff f90a 	bl	8000310 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
 8001104:	69b9      	ldr	r1, [r7, #24]
 8001106:	482b      	ldr	r0, [pc, #172]	@ (80011b4 <bl_del_mem+0x148>)
 8001108:	f005 fd40 	bl	8006b8c <HAL_UART_Transmit>
            	return;
 800110c:	e049      	b.n	80011a2 <bl_del_mem+0x136>
        	}
        	else{
            	const char *msg = "DELETE APP 1 FAILED\r\n";
 800110e:	4b2b      	ldr	r3, [pc, #172]	@ (80011bc <bl_del_mem+0x150>)
 8001110:	617b      	str	r3, [r7, #20]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff f8fc 	bl	8000310 <strlen>
 8001118:	4603      	mov	r3, r0
 800111a:	b29a      	uxth	r2, r3
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	6979      	ldr	r1, [r7, #20]
 8001122:	4824      	ldr	r0, [pc, #144]	@ (80011b4 <bl_del_mem+0x148>)
 8001124:	f005 fd32 	bl	8006b8c <HAL_UART_Transmit>
            	return;
 8001128:	e03b      	b.n	80011a2 <bl_del_mem+0x136>
        	}
        }
        else if(addr == APP2_ADDR_START){
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <bl_del_mem+0x140>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d137      	bne.n	80011a2 <bl_del_mem+0x136>
        	if(del_mem(FLASH_SECTOR_3, 2) == 1 && del_mem(FLASH_SECTOR_7, 1) == 1){
 8001132:	2102      	movs	r1, #2
 8001134:	2003      	movs	r0, #3
 8001136:	f7ff fc21 	bl	800097c <del_mem>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d114      	bne.n	800116a <bl_del_mem+0xfe>
 8001140:	2101      	movs	r1, #1
 8001142:	2007      	movs	r0, #7
 8001144:	f7ff fc1a 	bl	800097c <del_mem>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d10d      	bne.n	800116a <bl_del_mem+0xfe>
            	const char *msg = "DELETE APP 2 SUCCESSFULLY\r\n";
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <bl_del_mem+0x154>)
 8001150:	623b      	str	r3, [r7, #32]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001152:	6a38      	ldr	r0, [r7, #32]
 8001154:	f7ff f8dc 	bl	8000310 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	6a39      	ldr	r1, [r7, #32]
 8001162:	4814      	ldr	r0, [pc, #80]	@ (80011b4 <bl_del_mem+0x148>)
 8001164:	f005 fd12 	bl	8006b8c <HAL_UART_Transmit>
            	return;
 8001168:	e01b      	b.n	80011a2 <bl_del_mem+0x136>
        	}
        	else{
            	const char *msg = "DELETE DELETE APP2 FAILED\r\n";
 800116a:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <bl_del_mem+0x158>)
 800116c:	61fb      	str	r3, [r7, #28]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800116e:	69f8      	ldr	r0, [r7, #28]
 8001170:	f7ff f8ce 	bl	8000310 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	69f9      	ldr	r1, [r7, #28]
 800117e:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <bl_del_mem+0x148>)
 8001180:	f005 fd04 	bl	8006b8c <HAL_UART_Transmit>
            	return;
 8001184:	e00d      	b.n	80011a2 <bl_del_mem+0x136>
        	}

        }
    }
    else{
		const char *msg = "CRC failed\r\n";
 8001186:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <bl_del_mem+0x15c>)
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800118a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800118c:	f7ff f8c0 	bl	8000310 <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	f04f 33ff 	mov.w	r3, #4294967295
 8001198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <bl_del_mem+0x148>)
 800119c:	f005 fcf6 	bl	8006b8c <HAL_UART_Transmit>
		return;
 80011a0:	bf00      	nop
    }
}
 80011a2:	3730      	adds	r7, #48	@ 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	08020000 	.word	0x08020000
 80011ac:	08060000 	.word	0x08060000
 80011b0:	08016210 	.word	0x08016210
 80011b4:	24000294 	.word	0x24000294
 80011b8:	08016228 	.word	0x08016228
 80011bc:	08016244 	.word	0x08016244
 80011c0:	0801625c 	.word	0x0801625c
 80011c4:	08016278 	.word	0x08016278
 80011c8:	080160f8 	.word	0x080160f8

080011cc <bl_check_mem_uart>:
void bl_check_mem_uart(uint8_t *buffer) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b0ae      	sub	sp, #184	@ 0xb8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	uint32_t command_len = buffer[0] + 1;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	uint32_t crc_host = crc32(buffer, command_len - 4);
 80011de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011e2:	3b04      	subs	r3, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fab2 	bl	8000750 <crc32>
 80011ec:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
	uint32_t crc_recv;
	memcpy(&crc_recv, &buffer[command_len - 4], 4);
 80011f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80011f4:	3b04      	subs	r3, #4
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (crc_host != crc_recv) {
 8001200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001204:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001208:	429a      	cmp	r2, r3
 800120a:	d010      	beq.n	800122e <bl_check_mem_uart+0x62>
		const char *msg = "CRC failed\r\n";
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <bl_check_mem_uart+0xac>)
 800120e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001212:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001216:	f7ff f87b 	bl	8000310 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001226:	4815      	ldr	r0, [pc, #84]	@ (800127c <bl_check_mem_uart+0xb0>)
 8001228:	f005 fcb0 	bl	8006b8c <HAL_UART_Transmit>
 800122c:	e020      	b.n	8001270 <bl_check_mem_uart+0xa4>
		return ;
	}
	char dummy[150];
	uint32_t result1 = cal_flash_used_app_1();
 800122e:	f7ff fb49 	bl	80008c4 <cal_flash_used_app_1>
 8001232:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	uint32_t result2 = cal_flash_used_app_2();
 8001236:	f7ff fb73 	bl	8000920 <cal_flash_used_app_2>
 800123a:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	sprintf(dummy, "Segment 1 of flash use %d / 256000 bytes and Segment 2 of flash use %d /256000 bytes. \n", result1 * 16, result2 * 16);
 800123e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001242:	011a      	lsls	r2, r3, #4
 8001244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	f107 0008 	add.w	r0, r7, #8
 800124e:	490c      	ldr	r1, [pc, #48]	@ (8001280 <bl_check_mem_uart+0xb4>)
 8001250:	f014 fb44 	bl	80158dc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)dummy, strlen(dummy), HAL_MAX_DELAY);
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f859 	bl	8000310 <strlen>
 800125e:	4603      	mov	r3, r0
 8001260:	b29a      	uxth	r2, r3
 8001262:	f107 0108 	add.w	r1, r7, #8
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	4804      	ldr	r0, [pc, #16]	@ (800127c <bl_check_mem_uart+0xb0>)
 800126c:	f005 fc8e 	bl	8006b8c <HAL_UART_Transmit>
}
 8001270:	37b8      	adds	r7, #184	@ 0xb8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	080160f8 	.word	0x080160f8
 800127c:	24000294 	.word	0x24000294
 8001280:	08016294 	.word	0x08016294

08001284 <bl_verify_signature>:

void bl_verify_signature(uint8_t *buffer) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b0e6      	sub	sp, #408	@ 0x198
 8001288:	af02      	add	r7, sp, #8
 800128a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800128e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001292:	6018      	str	r0, [r3, #0]
    uint32_t command_len = buffer[0] + 1;
 8001294:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001298:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    uint32_t crc_recv = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    memcpy(&crc_recv, &buffer[command_len - 4], 4);
 80012ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80012b0:	3b04      	subs	r3, #4
 80012b2:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 80012b6:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    uint32_t host_crc = crc32(buffer, command_len - 4);
 80012c4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80012c8:	1f1a      	subs	r2, r3, #4
 80012ca:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80012ce:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80012d2:	4611      	mov	r1, r2
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f7ff fa3b 	bl	8000750 <crc32>
 80012da:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180

    if (crc_recv != host_crc) {
 80012de:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80012e2:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d007      	beq.n	80012fa <bl_verify_signature+0x76>
        HAL_UART_Transmit(&huart1, (uint8_t *)"CRC mismatch\r\n", 14, HAL_MAX_DELAY);
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	220e      	movs	r2, #14
 80012f0:	4998      	ldr	r1, [pc, #608]	@ (8001554 <bl_verify_signature+0x2d0>)
 80012f2:	4899      	ldr	r0, [pc, #612]	@ (8001558 <bl_verify_signature+0x2d4>)
 80012f4:	f005 fc4a 	bl	8006b8c <HAL_UART_Transmit>
        return;
 80012f8:	e128      	b.n	800154c <bl_verify_signature+0x2c8>
    }

    uint8_t *payload = &buffer[2];  // Skip LTF
 80012fa:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80012fe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3302      	adds	r3, #2
 8001306:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    uint32_t user_app_address = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    memcpy(&user_app_address, &payload[0], 4);
 8001310:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    uint32_t firmware_len = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    memcpy(&firmware_len, &payload[4], 4);
 8001320:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001324:	3304      	adds	r3, #4
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

    uint8_t *host_hash = &payload[8];          // SHA256 (32 bytes)
 800132c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001330:	3308      	adds	r3, #8
 8001332:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    uint8_t *sig = &payload[8 + 32];           // ECC Signature (64 bytes)
 8001336:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800133a:	3328      	adds	r3, #40	@ 0x28
 800133c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    uint8_t calc_hash[32];
    mbedtls_sha256_context sha_ctx;
    mbedtls_sha256_init(&sha_ctx);
 8001340:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001344:	4618      	mov	r0, r3
 8001346:	f012 f9ff 	bl	8013748 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret(&sha_ctx, 0); // 0 = SHA256
 800134a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f012 fa17 	bl	8013784 <mbedtls_sha256_starts_ret>
    user_app_address += 224;
 8001356:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800135a:	33e0      	adds	r3, #224	@ 0xe0
 800135c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    for (uint32_t i = 0; i < firmware_len; i++) {
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001366:	e017      	b.n	8001398 <bl_verify_signature+0x114>
        uint8_t byte = *(uint8_t *)(user_app_address + i);
 8001368:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800136c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001370:	4413      	add	r3, r2
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001378:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 800137c:	701a      	strb	r2, [r3, #0]
        mbedtls_sha256_update_ret(&sha_ctx, &byte, 1);
 800137e:	f107 010f 	add.w	r1, r7, #15
 8001382:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001386:	2201      	movs	r2, #1
 8001388:	4618      	mov	r0, r3
 800138a:	f013 ffaf 	bl	80152ec <mbedtls_sha256_update_ret>
    for (uint32_t i = 0; i < firmware_len; i++) {
 800138e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001392:	3301      	adds	r3, #1
 8001394:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001398:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800139c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3e1      	bcc.n	8001368 <bl_verify_signature+0xe4>
    }
    mbedtls_sha256_finish_ret(&sha_ctx, calc_hash);
 80013a4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80013a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f014 f811 	bl	80153d6 <mbedtls_sha256_finish_ret>
    mbedtls_sha256_free(&sha_ctx);
 80013b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f012 f9d2 	bl	8013762 <mbedtls_sha256_free>

    if (memcmp(host_hash, calc_hash, 32) != 0) {
 80013be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013c2:	2220      	movs	r2, #32
 80013c4:	4619      	mov	r1, r3
 80013c6:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 80013ca:	f014 faa9 	bl	8015920 <memcmp>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d007      	beq.n	80013e4 <bl_verify_signature+0x160>
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ SHA256 mismatch\r\n", 21, HAL_MAX_DELAY);
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	2215      	movs	r2, #21
 80013da:	4960      	ldr	r1, [pc, #384]	@ (800155c <bl_verify_signature+0x2d8>)
 80013dc:	485e      	ldr	r0, [pc, #376]	@ (8001558 <bl_verify_signature+0x2d4>)
 80013de:	f005 fbd5 	bl	8006b8c <HAL_UART_Transmit>
        return;
 80013e2:	e0b3      	b.n	800154c <bl_verify_signature+0x2c8>
    }
    mbedtls_ecdsa_context ctx;
    mbedtls_ecdsa_init(&ctx);
 80013e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013e8:	4618      	mov	r0, r3
 80013ea:	f00c fd6b 	bl	800dec4 <mbedtls_ecdsa_init>
    mbedtls_ecp_group_load(&ctx.grp, MBEDTLS_ECP_DP_SECP256R1);
 80013ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f2:	2103      	movs	r1, #3
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00f ff85 	bl	8011304 <mbedtls_ecp_group_load>
    mbedtls_mpi_read_binary(&ctx.Q.X, public_key, 32);
 80013fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013fe:	3388      	adds	r3, #136	@ 0x88
 8001400:	2220      	movs	r2, #32
 8001402:	4957      	ldr	r1, [pc, #348]	@ (8001560 <bl_verify_signature+0x2dc>)
 8001404:	4618      	mov	r0, r3
 8001406:	f009 fba7 	bl	800ab58 <mbedtls_mpi_read_binary>
    mbedtls_mpi_read_binary(&ctx.Q.Y, public_key + 32, 32);
 800140a:	4956      	ldr	r1, [pc, #344]	@ (8001564 <bl_verify_signature+0x2e0>)
 800140c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001410:	3394      	adds	r3, #148	@ 0x94
 8001412:	2220      	movs	r2, #32
 8001414:	4618      	mov	r0, r3
 8001416:	f009 fb9f 	bl	800ab58 <mbedtls_mpi_read_binary>
    mbedtls_mpi_lset(&ctx.Q.Z, 1);
 800141a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800141e:	33a0      	adds	r3, #160	@ 0xa0
 8001420:	2101      	movs	r1, #1
 8001422:	4618      	mov	r0, r3
 8001424:	f009 f904 	bl	800a630 <mbedtls_mpi_lset>

    mbedtls_mpi r, s;
    mbedtls_mpi_init(&r); mbedtls_mpi_init(&s);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4618      	mov	r0, r3
 800142e:	f008 febe 	bl	800a1ae <mbedtls_mpi_init>
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4618      	mov	r0, r3
 8001438:	f008 feb9 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_read_binary(&r, sig, 32);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	2220      	movs	r2, #32
 8001442:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001446:	4618      	mov	r0, r3
 8001448:	f009 fb86 	bl	800ab58 <mbedtls_mpi_read_binary>
    mbedtls_mpi_read_binary(&s, sig + 32, 32);
 800144c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001450:	f103 0120 	add.w	r1, r3, #32
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	2220      	movs	r2, #32
 800145a:	4618      	mov	r0, r3
 800145c:	f009 fb7c 	bl	800ab58 <mbedtls_mpi_read_binary>

    int ret = mbedtls_ecdsa_verify(&ctx.grp, calc_hash, 32, &ctx.Q, &r, &s);
 8001460:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001464:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8001468:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800146c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	2220      	movs	r2, #32
 8001480:	f00c fd08 	bl	800de94 <mbedtls_ecdsa_verify>
 8001484:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170

    mbedtls_mpi_free(&r); mbedtls_mpi_free(&s);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4618      	mov	r0, r3
 800148e:	f008 fea1 	bl	800a1d4 <mbedtls_mpi_free>
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	4618      	mov	r0, r3
 8001498:	f008 fe9c 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_ecdsa_free(&ctx);
 800149c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00c fd1a 	bl	800deda <mbedtls_ecdsa_free>

    if (ret != 0) {
 80014a6:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <bl_verify_signature+0x23a>
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Signature and Integrity FAIL\r\n", 33, HAL_MAX_DELAY);
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	2221      	movs	r2, #33	@ 0x21
 80014b4:	492c      	ldr	r1, [pc, #176]	@ (8001568 <bl_verify_signature+0x2e4>)
 80014b6:	4828      	ldr	r0, [pc, #160]	@ (8001558 <bl_verify_signature+0x2d4>)
 80014b8:	f005 fb68 	bl	8006b8c <HAL_UART_Transmit>
        return;
 80014bc:	e046      	b.n	800154c <bl_verify_signature+0x2c8>
    }

    HAL_FLASH_Unlock();
 80014be:	f001 fed7 	bl	8003270 <HAL_FLASH_Unlock>

    uint32_t sig_flag_addr = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    uint32_t status_flag_addr = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    if (user_app_address == APP1_ADDR_START + 224) {
 80014ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80014d2:	4a26      	ldr	r2, [pc, #152]	@ (800156c <bl_verify_signature+0x2e8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d106      	bne.n	80014e6 <bl_verify_signature+0x262>
        sig_flag_addr = SIGNATURE_FLAG_APP1;
 80014d8:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <bl_verify_signature+0x2ec>)
 80014da:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
        status_flag_addr = STATUS_FLAG_APP1;
 80014de:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <bl_verify_signature+0x2f0>)
 80014e0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80014e4:	e015      	b.n	8001512 <bl_verify_signature+0x28e>
    } else if (user_app_address == APP2_ADDR_START + 224) {
 80014e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80014ea:	4a23      	ldr	r2, [pc, #140]	@ (8001578 <bl_verify_signature+0x2f4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d106      	bne.n	80014fe <bl_verify_signature+0x27a>
        sig_flag_addr = SIGNATURE_FLAG_APP2;
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <bl_verify_signature+0x2f8>)
 80014f2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
        status_flag_addr = STATUS_FLAG_APP2;
 80014f6:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <bl_verify_signature+0x2fc>)
 80014f8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80014fc:	e009      	b.n	8001512 <bl_verify_signature+0x28e>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Unknown APP address\r\n", 24, HAL_MAX_DELAY);
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	2218      	movs	r2, #24
 8001504:	491f      	ldr	r1, [pc, #124]	@ (8001584 <bl_verify_signature+0x300>)
 8001506:	4814      	ldr	r0, [pc, #80]	@ (8001558 <bl_verify_signature+0x2d4>)
 8001508:	f005 fb40 	bl	8006b8c <HAL_UART_Transmit>
        HAL_FLASH_Lock();
 800150c:	f001 fed2 	bl	80032b4 <HAL_FLASH_Lock>
        return;
 8001510:	e01c      	b.n	800154c <bl_verify_signature+0x2c8>
    }

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, sig_flag_addr, (uint32_t)expected_magic_number) != HAL_OK) {
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <bl_verify_signature+0x304>)
 8001514:	461a      	mov	r2, r3
 8001516:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 800151a:	2001      	movs	r0, #1
 800151c:	f001 fe38 	bl	8003190 <HAL_FLASH_Program>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <bl_verify_signature+0x2b6>
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Failed to write flags\r\n", 26, HAL_MAX_DELAY);
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	221a      	movs	r2, #26
 800152c:	4917      	ldr	r1, [pc, #92]	@ (800158c <bl_verify_signature+0x308>)
 800152e:	480a      	ldr	r0, [pc, #40]	@ (8001558 <bl_verify_signature+0x2d4>)
 8001530:	f005 fb2c 	bl	8006b8c <HAL_UART_Transmit>
        HAL_FLASH_Lock();
 8001534:	f001 febe 	bl	80032b4 <HAL_FLASH_Lock>
        return;
 8001538:	e008      	b.n	800154c <bl_verify_signature+0x2c8>
    }

    HAL_FLASH_Lock();
 800153a:	f001 febb 	bl	80032b4 <HAL_FLASH_Lock>

    HAL_UART_Transmit(&huart1, (uint8_t *)"✅ Signature and Integrity OK\r\n", 31, HAL_MAX_DELAY);
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	221f      	movs	r2, #31
 8001544:	4912      	ldr	r1, [pc, #72]	@ (8001590 <bl_verify_signature+0x30c>)
 8001546:	4804      	ldr	r0, [pc, #16]	@ (8001558 <bl_verify_signature+0x2d4>)
 8001548:	f005 fb20 	bl	8006b8c <HAL_UART_Transmit>
}
 800154c:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	080162ec 	.word	0x080162ec
 8001558:	24000294 	.word	0x24000294
 800155c:	080162fc 	.word	0x080162fc
 8001560:	08016948 	.word	0x08016948
 8001564:	08016968 	.word	0x08016968
 8001568:	08016314 	.word	0x08016314
 800156c:	080200e0 	.word	0x080200e0
 8001570:	080e0000 	.word	0x080e0000
 8001574:	080c0000 	.word	0x080c0000
 8001578:	080600e0 	.word	0x080600e0
 800157c:	080e0020 	.word	0x080e0020
 8001580:	080c0020 	.word	0x080c0020
 8001584:	08016338 	.word	0x08016338
 8001588:	24000010 	.word	0x24000010
 800158c:	08016354 	.word	0x08016354
 8001590:	08016370 	.word	0x08016370

08001594 <bl_check_version>:
void bl_check_version(uint8_t* buffer){
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b0ac      	sub	sp, #176	@ 0xb0
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    uint32_t len = buffer[0] + 1;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    uint32_t crc_host = crc32(buffer, len - 4);
 80015a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015aa:	3b04      	subs	r3, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff f8ce 	bl	8000750 <crc32>
 80015b4:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    uint32_t crc_recv = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    memcpy(&crc_recv, &buffer[len - 4], 4);
 80015be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015c2:	3b04      	subs	r3, #4
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    if (crc_host == crc_recv) {
 80015ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d152      	bne.n	8001680 <bl_check_version+0xec>
        uint32_t dummy_flag = VERSION_OK_FLAG;
 80015da:	4b33      	ldr	r3, [pc, #204]	@ (80016a8 <bl_check_version+0x114>)
 80015dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        uint64_t temp;
        char msg[128];
        uint8_t first = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab

        HAL_UART_Transmit(&huart1, (uint8_t *)"{ \"versions\": [", 15, HAL_MAX_DELAY);
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ea:	220f      	movs	r2, #15
 80015ec:	492f      	ldr	r1, [pc, #188]	@ (80016ac <bl_check_version+0x118>)
 80015ee:	4830      	ldr	r0, [pc, #192]	@ (80016b0 <bl_check_version+0x11c>)
 80015f0:	f005 facc 	bl	8006b8c <HAL_UART_Transmit>

        while (1) {
            memcpy(&temp, (void*)dummy_flag, sizeof(temp));
 80015f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015f8:	681c      	ldr	r4, [r3, #0]
 80015fa:	685d      	ldr	r5, [r3, #4]
 80015fc:	4622      	mov	r2, r4
 80015fe:	462b      	mov	r3, r5
 8001600:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
            if (temp == 0xFFFFFFFFFFFFFFFFULL) break;
 8001604:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	bf08      	it	eq
 800160e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001612:	d107      	bne.n	8001624 <bl_check_version+0x90>

            first = 0;
            dummy_flag += 32;
        }

        HAL_UART_Transmit(&huart1, (uint8_t *)"] }\r\n", 5, HAL_MAX_DELAY);
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
 8001618:	2205      	movs	r2, #5
 800161a:	4926      	ldr	r1, [pc, #152]	@ (80016b4 <bl_check_version+0x120>)
 800161c:	4824      	ldr	r0, [pc, #144]	@ (80016b0 <bl_check_version+0x11c>)
 800161e:	f005 fab5 	bl	8006b8c <HAL_UART_Transmit>

    } else {
        const char *msg = "❌ CRC failed\r\n";
        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 8001622:	e03d      	b.n	80016a0 <bl_check_version+0x10c>
            memcpy(&version, &temp, 4);
 8001624:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001628:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            if (!first) HAL_UART_Transmit(&huart1, (uint8_t *)", ", 2, HAL_MAX_DELAY);
 800162c:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 8001630:	2b00      	cmp	r3, #0
 8001632:	d106      	bne.n	8001642 <bl_check_version+0xae>
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	2202      	movs	r2, #2
 800163a:	491f      	ldr	r1, [pc, #124]	@ (80016b8 <bl_check_version+0x124>)
 800163c:	481c      	ldr	r0, [pc, #112]	@ (80016b0 <bl_check_version+0x11c>)
 800163e:	f005 faa5 	bl	8006b8c <HAL_UART_Transmit>
            sprintf(msg, "\"0x%08lX\"", version);
 8001642:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	491c      	ldr	r1, [pc, #112]	@ (80016bc <bl_check_version+0x128>)
 800164c:	4618      	mov	r0, r3
 800164e:	f014 f945 	bl	80158dc <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fe5a 	bl	8000310 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	f107 010c 	add.w	r1, r7, #12
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	4811      	ldr	r0, [pc, #68]	@ (80016b0 <bl_check_version+0x11c>)
 800166a:	f005 fa8f 	bl	8006b8c <HAL_UART_Transmit>
            first = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
            dummy_flag += 32;
 8001674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001678:	3320      	adds	r3, #32
 800167a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while (1) {
 800167e:	e7b9      	b.n	80015f4 <bl_check_version+0x60>
        const char *msg = "❌ CRC failed\r\n";
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <bl_check_version+0x12c>)
 8001682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001686:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 800168a:	f7fe fe41 	bl	8000310 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800169a:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <bl_check_version+0x11c>)
 800169c:	f005 fa76 	bl	8006b8c <HAL_UART_Transmit>
}
 80016a0:	bf00      	nop
 80016a2:	37b0      	adds	r7, #176	@ 0xb0
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdb0      	pop	{r4, r5, r7, pc}
 80016a8:	080a0000 	.word	0x080a0000
 80016ac:	08016394 	.word	0x08016394
 80016b0:	24000294 	.word	0x24000294
 80016b4:	080163a4 	.word	0x080163a4
 80016b8:	080163ac 	.word	0x080163ac
 80016bc:	080163b0 	.word	0x080163b0
 80016c0:	080163bc 	.word	0x080163bc

080016c4 <jump_to_user_code_uart>:
void jump_to_user_code_uart(uint32_t addr){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
	__disable_irq();
	uint32_t app_msp = *(volatile uint32_t* )addr;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	617b      	str	r3, [r7, #20]
	uint32_t app_reset_handler = *(volatile uint32_t* )(addr + 4);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	f383 8808 	msr	MSP, r3
}
 80016e8:	bf00      	nop
   __set_MSP(app_msp);
   SCB->VTOR = addr;
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <jump_to_user_code_uart+0x3c>)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6093      	str	r3, [r2, #8]
   void (*Jump_To_APP)(void) = (void (*)(void))app_reset_handler;
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60fb      	str	r3, [r7, #12]

   Jump_To_APP();
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4798      	blx	r3

}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <check_ECC_Flag>:
int check_ECC_Flag(uint32_t addr){
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	if(addr == 0x080200E0){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a0f      	ldr	r2, [pc, #60]	@ (800174c <check_ECC_Flag+0x48>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d108      	bne.n	8001726 <check_ECC_Flag+0x22>
		if(check_signature_magic_number_app_1()){
 8001714:	f7ff f882 	bl	800081c <check_signature_magic_number_app_1>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <check_ECC_Flag+0x1e>
			return 1;
 800171e:	2301      	movs	r3, #1
 8001720:	e00f      	b.n	8001742 <check_ECC_Flag+0x3e>
		}
		else{
			return 0;
 8001722:	2300      	movs	r3, #0
 8001724:	e00d      	b.n	8001742 <check_ECC_Flag+0x3e>
		}
	}
	else if(addr == 0x080600E0){
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a09      	ldr	r2, [pc, #36]	@ (8001750 <check_ECC_Flag+0x4c>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d108      	bne.n	8001740 <check_ECC_Flag+0x3c>
		if(check_signature_magic_number_app_2()){
 800172e:	f7ff f89f 	bl	8000870 <check_signature_magic_number_app_2>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <check_ECC_Flag+0x38>
			return 1;
 8001738:	2301      	movs	r3, #1
 800173a:	e002      	b.n	8001742 <check_ECC_Flag+0x3e>
		}
		else{
			return 0;
 800173c:	2300      	movs	r3, #0
 800173e:	e000      	b.n	8001742 <check_ECC_Flag+0x3e>
		}
	}
	return 0;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	080200e0 	.word	0x080200e0
 8001750:	080600e0 	.word	0x080600e0

08001754 <is_run_ok_flag_set>:
int is_fail_counter_exceeded(uint32_t status_addr) {
	FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
    return (status->retry_counter >= MAX_FAILED_ALLOWED);
}
int is_run_ok_flag_set(uint32_t status_addr) {
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	60fb      	str	r3, [r7, #12]
    return (status->run_ok_flag == RUN_OK_VALUE);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a05      	ldr	r2, [pc, #20]	@ (800177c <is_run_ok_flag_set+0x28>)
 8001766:	4293      	cmp	r3, r2
 8001768:	bf0c      	ite	eq
 800176a:	2301      	moveq	r3, #1
 800176c:	2300      	movne	r3, #0
 800176e:	b2db      	uxtb	r3, r3
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	deadbeef 	.word	0xdeadbeef

08001780 <get_fail_counter>:

uint8_t get_fail_counter(uint32_t status_addr) {
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	b0a3      	sub	sp, #140	@ 0x8c
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800178c:	3b80      	subs	r3, #128	@ 0x80
 800178e:	331f      	adds	r3, #31
 8001790:	095b      	lsrs	r3, r3, #5
 8001792:	015e      	lsls	r6, r3, #5
    FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    // Nếu địa chỉ hiện tại trống
    if (status->retry_counter == 0xFFFFFFFF) {
 800179a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d12e      	bne.n	8001804 <get_fail_counter+0x84>
        uint32_t dummy_addr = status_addr;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
        FirmwareUserStatus new_status = {
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
 80017b0:	6433      	str	r3, [r6, #64]	@ 0x40
 80017b2:	2300      	movs	r3, #0
 80017b4:	6473      	str	r3, [r6, #68]	@ 0x44
            .run_ok_flag = 0xFFFFFFFF,
            .retry_counter = 0
        };

        uint64_t status_block[8] __attribute__((aligned(32))); // 64 bytes
        memset(status_block, 0xFF, sizeof(status_block));
 80017b6:	2240      	movs	r2, #64	@ 0x40
 80017b8:	21ff      	movs	r1, #255	@ 0xff
 80017ba:	4630      	mov	r0, r6
 80017bc:	f014 f8da 	bl	8015974 <memset>
        memcpy(status_block, &new_status, sizeof(FirmwareUserStatus));
 80017c0:	4635      	mov	r5, r6
 80017c2:	f106 0440 	add.w	r4, r6, #64	@ 0x40
 80017c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017ce:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

        HAL_FLASH_Unlock();
 80017d2:	f001 fd4d 	bl	8003270 <HAL_FLASH_Unlock>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, dummy_addr, (uint32_t)&status_block) != HAL_OK) {
 80017d6:	4633      	mov	r3, r6
 80017d8:	461a      	mov	r2, r3
 80017da:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80017de:	2001      	movs	r0, #1
 80017e0:	f001 fcd6 	bl	8003190 <HAL_FLASH_Program>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <get_fail_counter+0x78>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Failed to write status flags get\r\n", 40, HAL_MAX_DELAY);
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	2228      	movs	r2, #40	@ 0x28
 80017f0:	4908      	ldr	r1, [pc, #32]	@ (8001814 <get_fail_counter+0x94>)
 80017f2:	4809      	ldr	r0, [pc, #36]	@ (8001818 <get_fail_counter+0x98>)
 80017f4:	f005 f9ca 	bl	8006b8c <HAL_UART_Transmit>
        }
        HAL_FLASH_Lock();
 80017f8:	f001 fd5c 	bl	80032b4 <HAL_FLASH_Lock>

        // ✅ đọc lại từ địa chỉ vừa ghi
        status = (FirmwareUserStatus *)dummy_addr;
 80017fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    }
    return status->retry_counter;
 8001804:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	b2db      	uxtb	r3, r3
}
 800180c:	4618      	mov	r0, r3
 800180e:	378c      	adds	r7, #140	@ 0x8c
 8001810:	46bd      	mov	sp, r7
 8001812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001814:	080163d0 	.word	0x080163d0
 8001818:	24000294 	.word	0x24000294

0800181c <increase_fail_counter>:

void increase_fail_counter(uint32_t status_addr){
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	b0a3      	sub	sp, #140	@ 0x8c
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001828:	3b80      	subs	r3, #128	@ 0x80
 800182a:	331f      	adds	r3, #31
 800182c:	095b      	lsrs	r3, r3, #5
 800182e:	015e      	lsls	r6, r3, #5

	if(status_addr == 0xFFFFFFFF){
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001836:	d107      	bne.n	8001848 <increase_fail_counter+0x2c>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Address of run_ok_flag is invalid", 35, HAL_MAX_DELAY);
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	2223      	movs	r2, #35	@ 0x23
 800183e:	491b      	ldr	r1, [pc, #108]	@ (80018ac <increase_fail_counter+0x90>)
 8001840:	481b      	ldr	r0, [pc, #108]	@ (80018b0 <increase_fail_counter+0x94>)
 8001842:	f005 f9a3 	bl	8006b8c <HAL_UART_Transmit>
 8001846:	e02d      	b.n	80018a4 <increase_fail_counter+0x88>
		return 0;
	}
	FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	FirmwareUserStatus new_status;
	del_mem(FLASH_SECTOR_6, 1);
 800184e:	2101      	movs	r1, #1
 8001850:	2006      	movs	r0, #6
 8001852:	f7ff f893 	bl	800097c <del_mem>
	new_status.run_ok_flag = 0xFFFFFFFF;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	6433      	str	r3, [r6, #64]	@ 0x40
	new_status.retry_counter = 1;
 800185c:	2301      	movs	r3, #1
 800185e:	6473      	str	r3, [r6, #68]	@ 0x44
	uint64_t status_block[8] __attribute__((aligned(32))); // 64 bytes
	memset(status_block, 0xFF, sizeof(status_block));
 8001860:	2240      	movs	r2, #64	@ 0x40
 8001862:	21ff      	movs	r1, #255	@ 0xff
 8001864:	4630      	mov	r0, r6
 8001866:	f014 f885 	bl	8015974 <memset>
	memcpy(status_block, &new_status, sizeof(FirmwareUserStatus)); // chỉ lưu version
 800186a:	4635      	mov	r5, r6
 800186c:	f106 0440 	add.w	r4, r6, #64	@ 0x40
 8001870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001874:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001878:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	HAL_FLASH_Unlock();
 800187c:	f001 fcf8 	bl	8003270 <HAL_FLASH_Unlock>
	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, status_addr, (uint32_t)&status_block) != HAL_OK) {
 8001880:	4633      	mov	r3, r6
 8001882:	461a      	mov	r2, r3
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	2001      	movs	r0, #1
 8001888:	f001 fc82 	bl	8003190 <HAL_FLASH_Program>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d006      	beq.n	80018a0 <increase_fail_counter+0x84>
		HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Failed to write status flags\r\n", 26, HAL_MAX_DELAY);
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	221a      	movs	r2, #26
 8001898:	4906      	ldr	r1, [pc, #24]	@ (80018b4 <increase_fail_counter+0x98>)
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <increase_fail_counter+0x94>)
 800189c:	f005 f976 	bl	8006b8c <HAL_UART_Transmit>

	}
	HAL_FLASH_Lock();
 80018a0:	f001 fd08 	bl	80032b4 <HAL_FLASH_Lock>

}
 80018a4:	378c      	adds	r7, #140	@ 0x8c
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	080163f8 	.word	0x080163f8
 80018b0:	24000294 	.word	0x24000294
 80018b4:	0801641c 	.word	0x0801641c

080018b8 <count_version_in_flash>:
//        increase_fail_counter(status_addr);
//    }
//    HAL_UART_Transmit(&huart1, (uint8_t *)"Jumping to user code...\r\n", 35, HAL_MAX_DELAY);
//    jump_to_user_code_uart(addr);
//}
int count_version_in_flash(){
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
    int count = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
    uint32_t *temp_addr_flash = (uint32_t *)0x08017680;
 80018c2:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <count_version_in_flash+0x34>)
 80018c4:	603b      	str	r3, [r7, #0]

    while (*temp_addr_flash != 0xFFFFFFFF) {
 80018c6:	e005      	b.n	80018d4 <count_version_in_flash+0x1c>
        count++;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3301      	adds	r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
        temp_addr_flash += 8;  // Tăng theo đơn vị 4 bytes
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3320      	adds	r3, #32
 80018d2:	603b      	str	r3, [r7, #0]
    while (*temp_addr_flash != 0xFFFFFFFF) {
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d1f4      	bne.n	80018c8 <count_version_in_flash+0x10>
    }
    return count;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	08017680 	.word	0x08017680

080018f0 <check_condition_jump_to_code_uart>:
void check_condition_jump_to_code_uart() {
 80018f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018f4:	b08b      	sub	sp, #44	@ 0x2c
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	466b      	mov	r3, sp
 80018fa:	461e      	mov	r6, r3
    FirmwareMetadata *F = (FirmwareMetadata*)0x08017680;
 80018fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001a68 <check_condition_jump_to_code_uart+0x178>)
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
    int count_max = count_version_in_flash();
 8001900:	f7ff ffda 	bl	80018b8 <count_version_in_flash>
 8001904:	61b8      	str	r0, [r7, #24]
    FirmwareMetadata valid_firmware[count_max];
 8001906:	69b9      	ldr	r1, [r7, #24]
 8001908:	1e4b      	subs	r3, r1, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	460a      	mov	r2, r1
 800190e:	2300      	movs	r3, #0
 8001910:	4690      	mov	r8, r2
 8001912:	4699      	mov	r9, r3
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	f04f 0300 	mov.w	r3, #0
 800191c:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8001920:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8001924:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8001928:	460a      	mov	r2, r1
 800192a:	2300      	movs	r3, #0
 800192c:	4614      	mov	r4, r2
 800192e:	461d      	mov	r5, r3
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	022b      	lsls	r3, r5, #8
 800193a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800193e:	0222      	lsls	r2, r4, #8
 8001940:	460b      	mov	r3, r1
 8001942:	015b      	lsls	r3, r3, #5
 8001944:	3318      	adds	r3, #24
 8001946:	3307      	adds	r3, #7
 8001948:	08db      	lsrs	r3, r3, #3
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	ebad 0d03 	sub.w	sp, sp, r3
 8001950:	466b      	mov	r3, sp
 8001952:	331f      	adds	r3, #31
 8001954:	095b      	lsrs	r3, r3, #5
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	613b      	str	r3, [r7, #16]
    int count  = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
    // Collect valid firmware
    while (F->version != 0xFFFFFFFF && F->address != 0xFFFFFFFF && count < count_max) {
 800195e:	e011      	b.n	8001984 <check_condition_jump_to_code_uart+0x94>
        valid_firmware[count++] = *F++;
 8001960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001962:	f102 0320 	add.w	r3, r2, #32
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	1c59      	adds	r1, r3, #1
 800196c:	6239      	str	r1, [r7, #32]
 800196e:	6939      	ldr	r1, [r7, #16]
 8001970:	015b      	lsls	r3, r3, #5
 8001972:	440b      	add	r3, r1
 8001974:	461c      	mov	r4, r3
 8001976:	4615      	mov	r5, r2
 8001978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (F->version != 0xFFFFFFFF && F->address != 0xFFFFFFFF && count < count_max) {
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d008      	beq.n	80019a0 <check_condition_jump_to_code_uart+0xb0>
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001996:	d003      	beq.n	80019a0 <check_condition_jump_to_code_uart+0xb0>
 8001998:	6a3a      	ldr	r2, [r7, #32]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	429a      	cmp	r2, r3
 800199e:	dbdf      	blt.n	8001960 <check_condition_jump_to_code_uart+0x70>
    }
    if (count == 0) {
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d107      	bne.n	80019b6 <check_condition_jump_to_code_uart+0xc6>
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ No valid firmware found\r\n", 28, HAL_MAX_DELAY);
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	221c      	movs	r2, #28
 80019ac:	492f      	ldr	r1, [pc, #188]	@ (8001a6c <check_condition_jump_to_code_uart+0x17c>)
 80019ae:	4830      	ldr	r0, [pc, #192]	@ (8001a70 <check_condition_jump_to_code_uart+0x180>)
 80019b0:	f005 f8ec 	bl	8006b8c <HAL_UART_Transmit>
        return;
 80019b4:	e052      	b.n	8001a5c <check_condition_jump_to_code_uart+0x16c>
    }
    uint32_t user_to_bl_value = 0x080A0000;
 80019b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001a74 <check_condition_jump_to_code_uart+0x184>)
 80019b8:	60fb      	str	r3, [r7, #12]
    if (*(uint32_t*)user_to_bl_value == 0xDEADBEEF) {
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2e      	ldr	r2, [pc, #184]	@ (8001a78 <check_condition_jump_to_code_uart+0x188>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d04a      	beq.n	8001a5a <check_condition_jump_to_code_uart+0x16a>
        return;
    }
    for (int i = count - 1; i >= 0; i--) {
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e03a      	b.n	8001a42 <check_condition_jump_to_code_uart+0x152>
        uint32_t addr = valid_firmware[i].address;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	015b      	lsls	r3, r3, #5
 80019d2:	4413      	add	r3, r2
 80019d4:	3304      	adds	r3, #4
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60bb      	str	r3, [r7, #8]
        uint32_t status_addr = 0x080C0000;
 80019da:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <check_condition_jump_to_code_uart+0x18c>)
 80019dc:	607b      	str	r3, [r7, #4]
        uint8_t fail_counter = get_fail_counter(status_addr);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fece 	bl	8001780 <get_fail_counter>
 80019e4:	4603      	mov	r3, r0
 80019e6:	70fb      	strb	r3, [r7, #3]
        if (!check_ECC_Flag(addr)) {
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f7ff fe8b 	bl	8001704 <check_ECC_Flag>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <check_condition_jump_to_code_uart+0x114>
        	HAL_UART_Transmit(&huart1, (uint8_t *)"ECC of firmware at is failed\r\n", 41, HAL_MAX_DELAY);
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	2229      	movs	r2, #41	@ 0x29
 80019fa:	4921      	ldr	r1, [pc, #132]	@ (8001a80 <check_condition_jump_to_code_uart+0x190>)
 80019fc:	481c      	ldr	r0, [pc, #112]	@ (8001a70 <check_condition_jump_to_code_uart+0x180>)
 80019fe:	f005 f8c5 	bl	8006b8c <HAL_UART_Transmit>
            continue;
 8001a02:	e01b      	b.n	8001a3c <check_condition_jump_to_code_uart+0x14c>
        }
        if (fail_counter == 0) {
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <check_condition_jump_to_code_uart+0x136>
            // Lần chạy đầu tiên
            HAL_UART_Transmit(&huart1, (uint8_t *)"First run - increasing fail-counter\r\n", 41, HAL_MAX_DELAY);
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	2229      	movs	r2, #41	@ 0x29
 8001a10:	491c      	ldr	r1, [pc, #112]	@ (8001a84 <check_condition_jump_to_code_uart+0x194>)
 8001a12:	4817      	ldr	r0, [pc, #92]	@ (8001a70 <check_condition_jump_to_code_uart+0x180>)
 8001a14:	f005 f8ba 	bl	8006b8c <HAL_UART_Transmit>
            increase_fail_counter(status_addr);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff feff 	bl	800181c <increase_fail_counter>
            jump_to_user_code_uart(addr);
 8001a1e:	68b8      	ldr	r0, [r7, #8]
 8001a20:	f7ff fe50 	bl	80016c4 <jump_to_user_code_uart>
 8001a24:	e00a      	b.n	8001a3c <check_condition_jump_to_code_uart+0x14c>
        } else if (is_run_ok_flag_set(status_addr)) {
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fe94 	bl	8001754 <is_run_ok_flag_set>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <check_condition_jump_to_code_uart+0x14a>
            jump_to_user_code_uart(addr);
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f7ff fe46 	bl	80016c4 <jump_to_user_code_uart>
            return;
 8001a38:	e010      	b.n	8001a5c <check_condition_jump_to_code_uart+0x16c>
        } else {
            continue;
 8001a3a:	bf00      	nop
    for (int i = count - 1; i >= 0; i--) {
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	dac1      	bge.n	80019cc <check_condition_jump_to_code_uart+0xdc>
        }
    }

    HAL_UART_Transmit(&huart1, (uint8_t *)"All firmwares failed, staying in bootloader\r\n", 48, HAL_MAX_DELAY);
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	2230      	movs	r2, #48	@ 0x30
 8001a4e:	490e      	ldr	r1, [pc, #56]	@ (8001a88 <check_condition_jump_to_code_uart+0x198>)
 8001a50:	4807      	ldr	r0, [pc, #28]	@ (8001a70 <check_condition_jump_to_code_uart+0x180>)
 8001a52:	f005 f89b 	bl	8006b8c <HAL_UART_Transmit>
 8001a56:	46b5      	mov	sp, r6
 8001a58:	e001      	b.n	8001a5e <check_condition_jump_to_code_uart+0x16e>
        return;
 8001a5a:	bf00      	nop
        return;
 8001a5c:	46b5      	mov	sp, r6
}
 8001a5e:	372c      	adds	r7, #44	@ 0x2c
 8001a60:	46bd      	mov	sp, r7
 8001a62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a66:	bf00      	nop
 8001a68:	08017680 	.word	0x08017680
 8001a6c:	08016440 	.word	0x08016440
 8001a70:	24000294 	.word	0x24000294
 8001a74:	080a0000 	.word	0x080a0000
 8001a78:	deadbeef 	.word	0xdeadbeef
 8001a7c:	080c0000 	.word	0x080c0000
 8001a80:	08016460 	.word	0x08016460
 8001a84:	08016480 	.word	0x08016480
 8001a88:	080164a8 	.word	0x080164a8

08001a8c <process_uart_command>:

void process_uart_command() {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	71fb      	strb	r3, [r7, #7]
	while(1){
	memset(rx_buffer, 0, 300);
 8001a96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	482e      	ldr	r0, [pc, #184]	@ (8001b58 <process_uart_command+0xcc>)
 8001a9e:	f013 ff69 	bl	8015974 <memset>
	HAL_UART_Receive(&huart1, rx_buffer, 1, HAL_MAX_DELAY);
 8001aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	492b      	ldr	r1, [pc, #172]	@ (8001b58 <process_uart_command+0xcc>)
 8001aaa:	482c      	ldr	r0, [pc, #176]	@ (8001b5c <process_uart_command+0xd0>)
 8001aac:	f005 f8fc 	bl	8006ca8 <HAL_UART_Receive>
	rcv_len = rx_buffer[0];
 8001ab0:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <process_uart_command+0xcc>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(&huart1, &rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295
 8001abe:	4928      	ldr	r1, [pc, #160]	@ (8001b60 <process_uart_command+0xd4>)
 8001ac0:	4826      	ldr	r0, [pc, #152]	@ (8001b5c <process_uart_command+0xd0>)
 8001ac2:	f005 f8f1 	bl	8006ca8 <HAL_UART_Receive>
	switch(rx_buffer[1]){
 8001ac6:	4b24      	ldr	r3, [pc, #144]	@ (8001b58 <process_uart_command+0xcc>)
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	3b50      	subs	r3, #80	@ 0x50
 8001acc:	2b10      	cmp	r3, #16
 8001ace:	d8e2      	bhi.n	8001a96 <process_uart_command+0xa>
 8001ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <process_uart_command+0x4c>)
 8001ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad6:	bf00      	nop
 8001ad8:	08001b1d 	.word	0x08001b1d
 8001adc:	08001b25 	.word	0x08001b25
 8001ae0:	08001a97 	.word	0x08001a97
 8001ae4:	08001b2d 	.word	0x08001b2d
 8001ae8:	08001b35 	.word	0x08001b35
 8001aec:	08001b3d 	.word	0x08001b3d
 8001af0:	08001a97 	.word	0x08001a97
 8001af4:	08001a97 	.word	0x08001a97
 8001af8:	08001b45 	.word	0x08001b45
 8001afc:	08001a97 	.word	0x08001a97
 8001b00:	08001a97 	.word	0x08001a97
 8001b04:	08001a97 	.word	0x08001a97
 8001b08:	08001a97 	.word	0x08001a97
 8001b0c:	08001a97 	.word	0x08001a97
 8001b10:	08001a97 	.word	0x08001a97
 8001b14:	08001a97 	.word	0x08001a97
 8001b18:	08001b4d 	.word	0x08001b4d
	case BL_CHECK_CONNECTION:
		bl_check_connect_uart(rx_buffer);
 8001b1c:	480e      	ldr	r0, [pc, #56]	@ (8001b58 <process_uart_command+0xcc>)
 8001b1e:	f7fe ff89 	bl	8000a34 <bl_check_connect_uart>
		break;
 8001b22:	e018      	b.n	8001b56 <process_uart_command+0xca>
	case BL_WRITE_MEM:
		bl_write_mem_uart(rx_buffer);
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <process_uart_command+0xcc>)
 8001b26:	f7fe ffd1 	bl	8000acc <bl_write_mem_uart>
		break;
 8001b2a:	e014      	b.n	8001b56 <process_uart_command+0xca>
	case BL_CHECK_MEM:
		bl_check_mem_uart(rx_buffer);
 8001b2c:	480a      	ldr	r0, [pc, #40]	@ (8001b58 <process_uart_command+0xcc>)
 8001b2e:	f7ff fb4d 	bl	80011cc <bl_check_mem_uart>
		break;
 8001b32:	e010      	b.n	8001b56 <process_uart_command+0xca>
	case BL_DEL_MEM:
		bl_del_mem(rx_buffer);
 8001b34:	4808      	ldr	r0, [pc, #32]	@ (8001b58 <process_uart_command+0xcc>)
 8001b36:	f7ff fa99 	bl	800106c <bl_del_mem>
		break;
 8001b3a:	e00c      	b.n	8001b56 <process_uart_command+0xca>
	case BL_JUMP_TO_USER_CODE:
		bl_jump_to_code_uart(rx_buffer);
 8001b3c:	4806      	ldr	r0, [pc, #24]	@ (8001b58 <process_uart_command+0xcc>)
 8001b3e:	f7fe ff49 	bl	80009d4 <bl_jump_to_code_uart>
		break;
 8001b42:	e008      	b.n	8001b56 <process_uart_command+0xca>
	case BL_VERIFY_SIGNATURE:
		bl_verify_signature(rx_buffer);
 8001b44:	4804      	ldr	r0, [pc, #16]	@ (8001b58 <process_uart_command+0xcc>)
 8001b46:	f7ff fb9d 	bl	8001284 <bl_verify_signature>
		break;
 8001b4a:	e004      	b.n	8001b56 <process_uart_command+0xca>
	case BL_CHECK_PREVIOUS_VERSION:
		bl_check_version(rx_buffer);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <process_uart_command+0xcc>)
 8001b4e:	f7ff fd21 	bl	8001594 <bl_check_version>
		break;
 8001b52:	bf00      	nop
 8001b54:	e79f      	b.n	8001a96 <process_uart_command+0xa>
	memset(rx_buffer, 0, 300);
 8001b56:	e79e      	b.n	8001a96 <process_uart_command+0xa>
 8001b58:	240000c8 	.word	0x240000c8
 8001b5c:	24000294 	.word	0x24000294
 8001b60:	240000c9 	.word	0x240000c9

08001b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001b68:	f000 f886 	bl	8001c78 <MPU_Config>
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b6c:	f000 fbf8 	bl	8002360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b70:	f000 f812 	bl	8001b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b74:	f7fe fdfc 	bl	8000770 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001b78:	f000 faa8 	bl	80020cc <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001b7c:	f000 fb06 	bl	800218c <MX_USART1_UART_Init>
  //MX_RNG_Init();
  MX_MBEDTLS_Init();
 8001b80:	f006 ff3a 	bl	80089f8 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */

  check_condition_jump_to_code_uart();
 8001b84:	f7ff feb4 	bl	80018f0 <check_condition_jump_to_code_uart>
  //clear_flag();
  del_mem(FLASH_SECTOR_5, 1);
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2005      	movs	r0, #5
 8001b8c:	f7fe fef6 	bl	800097c <del_mem>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  process_uart_command();
 8001b90:	f7ff ff7c 	bl	8001a8c <process_uart_command>
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <main+0x30>

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b09c      	sub	sp, #112	@ 0x70
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba2:	224c      	movs	r2, #76	@ 0x4c
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f013 fee4 	bl	8015974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	2220      	movs	r2, #32
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f013 fede 	bl	8015974 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f001 fe7f 	bl	80038bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <SystemClock_Config+0xdc>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c74 <SystemClock_Config+0xdc>)
 8001bc8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bcc:	6193      	str	r3, [r2, #24]
 8001bce:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <SystemClock_Config+0xdc>)
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001bda:	bf00      	nop
 8001bdc:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <SystemClock_Config+0xdc>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001be8:	d1f8      	bne.n	8001bdc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001bea:	2321      	movs	r3, #33	@ 0x21
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8001c04:	2344      	movs	r3, #68	@ 0x44
 8001c06:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 11;
 8001c0c:	230b      	movs	r3, #11
 8001c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c14:	230c      	movs	r3, #12
 8001c16:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001c1c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c26:	4618      	mov	r0, r3
 8001c28:	f001 fe82 	bl	8003930 <HAL_RCC_OscConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c32:	f000 f887 	bl	8001d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c36:	233f      	movs	r3, #63	@ 0x3f
 8001c38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c42:	2308      	movs	r3, #8
 8001c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c46:	2340      	movs	r3, #64	@ 0x40
 8001c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c4a:	2340      	movs	r3, #64	@ 0x40
 8001c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c54:	2340      	movs	r3, #64	@ 0x40
 8001c56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2103      	movs	r1, #3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fa41 	bl	80040e4 <HAL_RCC_ClockConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c68:	f000 f86c 	bl	8001d44 <Error_Handler>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3770      	adds	r7, #112	@ 0x70
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	58024800 	.word	0x58024800

08001c78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c8a:	f000 fca5 	bl	80025d8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c9a:	231f      	movs	r3, #31
 8001c9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001c9e:	2387      	movs	r3, #135	@ 0x87
 8001ca0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 fcc3 	bl	8002648 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001cc6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001cca:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001ccc:	2309      	movs	r3, #9
 8001cce:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fcae 	bl	8002648 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001cec:	2302      	movs	r3, #2
 8001cee:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <MPU_Config+0xa4>)
 8001cf2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001cf4:	230d      	movs	r3, #13
 8001cf6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d04:	463b      	mov	r3, r7
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fc9e 	bl	8002648 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d0c:	2004      	movs	r0, #4
 8001d0e:	f000 fc7b 	bl	8002608 <HAL_MPU_Enable>

}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	30004000 	.word	0x30004000

08001d20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
////
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001d32:	f000 fb51 	bl	80023d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
////
  /* USER CODE END Callback 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40010000 	.word	0x40010000

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <Error_Handler+0x8>

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_MspInit+0x30>)
 8001d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d5c:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <HAL_MspInit+0x30>)
 8001d5e:	f043 0302 	orr.w	r3, r3, #2
 8001d62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_MspInit+0x30>)
 8001d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	58024400 	.word	0x58024400

08001d84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08e      	sub	sp, #56	@ 0x38
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d844      	bhi.n	8001e1c <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	2019      	movs	r0, #25
 8001d98:	f000 fbf6 	bl	8002588 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d9c:	2019      	movs	r0, #25
 8001d9e:	f000 fc0d 	bl	80025bc <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001da2:	4a24      	ldr	r2, [pc, #144]	@ (8001e34 <HAL_InitTick+0xb0>)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001da8:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <HAL_InitTick+0xb4>)
 8001daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dae:	4a22      	ldr	r2, [pc, #136]	@ (8001e38 <HAL_InitTick+0xb4>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001db8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <HAL_InitTick+0xb4>)
 8001dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f002 fd13 	bl	80047fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001dd6:	f002 fcfb 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de2:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <HAL_InitTick+0xb8>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	0c9b      	lsrs	r3, r3, #18
 8001dea:	3b01      	subs	r3, #1
 8001dec:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_InitTick+0xbc>)
 8001df0:	4a14      	ldr	r2, [pc, #80]	@ (8001e44 <HAL_InitTick+0xc0>)
 8001df2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_InitTick+0xbc>)
 8001df6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001dfa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dfc:	4a10      	ldr	r2, [pc, #64]	@ (8001e40 <HAL_InitTick+0xbc>)
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e00:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <HAL_InitTick+0xbc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <HAL_InitTick+0xbc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e0e:	480c      	ldr	r0, [pc, #48]	@ (8001e40 <HAL_InitTick+0xbc>)
 8001e10:	f004 faf8 	bl	8006404 <HAL_TIM_Base_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d107      	bne.n	8001e2a <HAL_InitTick+0xa6>
 8001e1a:	e001      	b.n	8001e20 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e005      	b.n	8001e2c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e20:	4807      	ldr	r0, [pc, #28]	@ (8001e40 <HAL_InitTick+0xbc>)
 8001e22:	f004 fb47 	bl	80064b4 <HAL_TIM_Base_Start_IT>
 8001e26:	4603      	mov	r3, r0
 8001e28:	e000      	b.n	8001e2c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3738      	adds	r7, #56	@ 0x38
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	24000038 	.word	0x24000038
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	240001f8 	.word	0x240001f8
 8001e44:	40010000 	.word	0x40010000

08001e48 <__NVIC_SystemReset>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001e4c:	f3bf 8f4f 	dsb	sy
}
 8001e50:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <__NVIC_SystemReset+0x24>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e5a:	4904      	ldr	r1, [pc, #16]	@ (8001e6c <__NVIC_SystemReset+0x24>)
 8001e5c:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <__NVIC_SystemReset+0x28>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e62:	f3bf 8f4f 	dsb	sy
}
 8001e66:	bf00      	nop
    __NOP();
 8001e68:	bf00      	nop
 8001e6a:	e7fd      	b.n	8001e68 <__NVIC_SystemReset+0x20>
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	05fa0004 	.word	0x05fa0004

08001e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <NMI_Handler+0x4>

08001e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8001e80:	f7ff ffe2 	bl	8001e48 <__NVIC_SystemReset>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <BusFault_Handler+0x4>

08001e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <UsageFault_Handler+0x4>

08001e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <TIM1_UP_IRQHandler+0x10>)
 8001eda:	f004 fb71 	bl	80065c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	240001f8 	.word	0x240001f8

08001ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <USART1_IRQHandler+0x10>)
 8001eee:	f004 ffa3 	bl	8006e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	24000294 	.word	0x24000294

08001efc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <TIM6_DAC_IRQHandler+0x10>)
 8001f02:	f004 fb5d 	bl	80065c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	24000248 	.word	0x24000248

08001f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f18:	4a14      	ldr	r2, [pc, #80]	@ (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f24:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f32:	4b10      	ldr	r3, [pc, #64]	@ (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f40:	f013 fd30 	bl	80159a4 <__errno>
 8001f44:	4603      	mov	r3, r0
 8001f46:	220c      	movs	r2, #12
 8001f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f56:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <_sbrk+0x64>)
 8001f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	24050000 	.word	0x24050000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	24000244 	.word	0x24000244
 8001f78:	240026e0 	.word	0x240026e0

08001f7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f80:	4b3e      	ldr	r3, [pc, #248]	@ (800207c <SystemInit+0x100>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	4a3d      	ldr	r2, [pc, #244]	@ (800207c <SystemInit+0x100>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f90:	4b3b      	ldr	r3, [pc, #236]	@ (8002080 <SystemInit+0x104>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	2b06      	cmp	r3, #6
 8001f9a:	d807      	bhi.n	8001fac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f9c:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <SystemInit+0x104>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 030f 	bic.w	r3, r3, #15
 8001fa4:	4a36      	ldr	r2, [pc, #216]	@ (8002080 <SystemInit+0x104>)
 8001fa6:	f043 0307 	orr.w	r3, r3, #7
 8001faa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001fac:	4b35      	ldr	r3, [pc, #212]	@ (8002084 <SystemInit+0x108>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a34      	ldr	r2, [pc, #208]	@ (8002084 <SystemInit+0x108>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fb8:	4b32      	ldr	r3, [pc, #200]	@ (8002084 <SystemInit+0x108>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001fbe:	4b31      	ldr	r3, [pc, #196]	@ (8002084 <SystemInit+0x108>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4930      	ldr	r1, [pc, #192]	@ (8002084 <SystemInit+0x108>)
 8001fc4:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <SystemInit+0x10c>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fca:	4b2d      	ldr	r3, [pc, #180]	@ (8002080 <SystemInit+0x104>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002080 <SystemInit+0x104>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 030f 	bic.w	r3, r3, #15
 8001fde:	4a28      	ldr	r2, [pc, #160]	@ (8002080 <SystemInit+0x104>)
 8001fe0:	f043 0307 	orr.w	r3, r3, #7
 8001fe4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fe6:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <SystemInit+0x108>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fec:	4b25      	ldr	r3, [pc, #148]	@ (8002084 <SystemInit+0x108>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ff2:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <SystemInit+0x108>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <SystemInit+0x108>)
 8001ffa:	4a24      	ldr	r2, [pc, #144]	@ (800208c <SystemInit+0x110>)
 8001ffc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	@ (8002084 <SystemInit+0x108>)
 8002000:	4a23      	ldr	r2, [pc, #140]	@ (8002090 <SystemInit+0x114>)
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002004:	4b1f      	ldr	r3, [pc, #124]	@ (8002084 <SystemInit+0x108>)
 8002006:	4a23      	ldr	r2, [pc, #140]	@ (8002094 <SystemInit+0x118>)
 8002008:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <SystemInit+0x108>)
 800200c:	2200      	movs	r2, #0
 800200e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002010:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <SystemInit+0x108>)
 8002012:	4a20      	ldr	r2, [pc, #128]	@ (8002094 <SystemInit+0x118>)
 8002014:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002016:	4b1b      	ldr	r3, [pc, #108]	@ (8002084 <SystemInit+0x108>)
 8002018:	2200      	movs	r2, #0
 800201a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800201c:	4b19      	ldr	r3, [pc, #100]	@ (8002084 <SystemInit+0x108>)
 800201e:	4a1d      	ldr	r2, [pc, #116]	@ (8002094 <SystemInit+0x118>)
 8002020:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <SystemInit+0x108>)
 8002024:	2200      	movs	r2, #0
 8002026:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002028:	4b16      	ldr	r3, [pc, #88]	@ (8002084 <SystemInit+0x108>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a15      	ldr	r2, [pc, #84]	@ (8002084 <SystemInit+0x108>)
 800202e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002032:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002034:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <SystemInit+0x108>)
 8002036:	2200      	movs	r2, #0
 8002038:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800203a:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <SystemInit+0x108>)
 800203c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002040:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d113      	bne.n	8002070 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002048:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <SystemInit+0x108>)
 800204a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800204e:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <SystemInit+0x108>)
 8002050:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002054:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <SystemInit+0x11c>)
 800205a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800205e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002060:	4b08      	ldr	r3, [pc, #32]	@ (8002084 <SystemInit+0x108>)
 8002062:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002066:	4a07      	ldr	r2, [pc, #28]	@ (8002084 <SystemInit+0x108>)
 8002068:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800206c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00
 8002080:	52002000 	.word	0x52002000
 8002084:	58024400 	.word	0x58024400
 8002088:	eaf6ed7f 	.word	0xeaf6ed7f
 800208c:	02020200 	.word	0x02020200
 8002090:	01ff0000 	.word	0x01ff0000
 8002094:	01010280 	.word	0x01010280
 8002098:	52004000 	.word	0x52004000

0800209c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <ExitRun0Mode+0x2c>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4a08      	ldr	r2, [pc, #32]	@ (80020c8 <ExitRun0Mode+0x2c>)
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80020ac:	bf00      	nop
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <ExitRun0Mode+0x2c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f9      	beq.n	80020ae <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	58024800 	.word	0x58024800

080020cc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020dc:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <MX_TIM6_Init+0x68>)
 80020de:	4a16      	ldr	r2, [pc, #88]	@ (8002138 <MX_TIM6_Init+0x6c>)
 80020e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 80020e2:	4b14      	ldr	r3, [pc, #80]	@ (8002134 <MX_TIM6_Init+0x68>)
 80020e4:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80020e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <MX_TIM6_Init+0x68>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80020f0:	4b10      	ldr	r3, [pc, #64]	@ (8002134 <MX_TIM6_Init+0x68>)
 80020f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <MX_TIM6_Init+0x68>)
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020fe:	480d      	ldr	r0, [pc, #52]	@ (8002134 <MX_TIM6_Init+0x68>)
 8002100:	f004 f980 	bl	8006404 <HAL_TIM_Base_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800210a:	f7ff fe1b 	bl	8001d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4806      	ldr	r0, [pc, #24]	@ (8002134 <MX_TIM6_Init+0x68>)
 800211c:	f004 fc2c 	bl	8006978 <HAL_TIMEx_MasterConfigSynchronization>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002126:	f7ff fe0d 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	24000248 	.word	0x24000248
 8002138:	40001000 	.word	0x40001000

0800213c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a0e      	ldr	r2, [pc, #56]	@ (8002184 <HAL_TIM_Base_MspInit+0x48>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d116      	bne.n	800217c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_TIM_Base_MspInit+0x4c>)
 8002150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002154:	4a0c      	ldr	r2, [pc, #48]	@ (8002188 <HAL_TIM_Base_MspInit+0x4c>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800215e:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <HAL_TIM_Base_MspInit+0x4c>)
 8002160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	210f      	movs	r1, #15
 8002170:	2036      	movs	r0, #54	@ 0x36
 8002172:	f000 fa09 	bl	8002588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002176:	2036      	movs	r0, #54	@ 0x36
 8002178:	f000 fa20 	bl	80025bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800217c:	bf00      	nop
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40001000 	.word	0x40001000
 8002188:	58024400 	.word	0x58024400

0800218c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002190:	4b22      	ldr	r3, [pc, #136]	@ (800221c <MX_USART1_UART_Init+0x90>)
 8002192:	4a23      	ldr	r2, [pc, #140]	@ (8002220 <MX_USART1_UART_Init+0x94>)
 8002194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002196:	4b21      	ldr	r3, [pc, #132]	@ (800221c <MX_USART1_UART_Init+0x90>)
 8002198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800219c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219e:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a4:	4b1d      	ldr	r3, [pc, #116]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b0:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021b2:	220c      	movs	r2, #12
 80021b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021bc:	4b17      	ldr	r3, [pc, #92]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c2:	4b16      	ldr	r3, [pc, #88]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ce:	4b13      	ldr	r3, [pc, #76]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d4:	4811      	ldr	r0, [pc, #68]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021d6:	f004 fc89 	bl	8006aec <HAL_UART_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021e0:	f7ff fdb0 	bl	8001d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021e4:	2100      	movs	r1, #0
 80021e6:	480d      	ldr	r0, [pc, #52]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021e8:	f006 fb3c 	bl	8008864 <HAL_UARTEx_SetTxFifoThreshold>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80021f2:	f7ff fda7 	bl	8001d44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f6:	2100      	movs	r1, #0
 80021f8:	4808      	ldr	r0, [pc, #32]	@ (800221c <MX_USART1_UART_Init+0x90>)
 80021fa:	f006 fb71 	bl	80088e0 <HAL_UARTEx_SetRxFifoThreshold>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002204:	f7ff fd9e 	bl	8001d44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <MX_USART1_UART_Init+0x90>)
 800220a:	f006 faf2 	bl	80087f2 <HAL_UARTEx_DisableFifoMode>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002214:	f7ff fd96 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	24000294 	.word	0x24000294
 8002220:	40011000 	.word	0x40011000

08002224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0b8      	sub	sp, #224	@ 0xe0
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	22b8      	movs	r2, #184	@ 0xb8
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f013 fb95 	bl	8015974 <memset>
  if(uartHandle->Instance==USART1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a2b      	ldr	r2, [pc, #172]	@ (80022fc <HAL_UART_MspInit+0xd8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d14e      	bne.n	80022f2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002254:	f04f 0201 	mov.w	r2, #1
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fb08 	bl	8004880 <HAL_RCCEx_PeriphCLKConfig>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002276:	f7ff fd65 	bl	8001d44 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_UART_MspInit+0xdc>)
 800227c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002280:	4a1f      	ldr	r2, [pc, #124]	@ (8002300 <HAL_UART_MspInit+0xdc>)
 8002282:	f043 0310 	orr.w	r3, r3, #16
 8002286:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800228a:	4b1d      	ldr	r3, [pc, #116]	@ (8002300 <HAL_UART_MspInit+0xdc>)
 800228c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_UART_MspInit+0xdc>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800229e:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <HAL_UART_MspInit+0xdc>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022a8:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <HAL_UART_MspInit+0xdc>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80022b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80022ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80022d0:	2304      	movs	r3, #4
 80022d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80022da:	4619      	mov	r1, r3
 80022dc:	4809      	ldr	r0, [pc, #36]	@ (8002304 <HAL_UART_MspInit+0xe0>)
 80022de:	f001 f92b 	bl	8003538 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	2025      	movs	r0, #37	@ 0x25
 80022e8:	f000 f94e 	bl	8002588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ec:	2025      	movs	r0, #37	@ 0x25
 80022ee:	f000 f965 	bl	80025bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022f2:	bf00      	nop
 80022f4:	37e0      	adds	r7, #224	@ 0xe0
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40011000 	.word	0x40011000
 8002300:	58024400 	.word	0x58024400
 8002304:	58020400 	.word	0x58020400

08002308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002308:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002344 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800230c:	f7ff fec6 	bl	800209c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002310:	f7ff fe34 	bl	8001f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002316:	490d      	ldr	r1, [pc, #52]	@ (800234c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800232c:	4c0a      	ldr	r4, [pc, #40]	@ (8002358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800233a:	f013 fb39 	bl	80159b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7ff fc11 	bl	8001b64 <main>
  bx  lr
 8002342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002344:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002348:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800234c:	240000ac 	.word	0x240000ac
  ldr r2, =_sidata
 8002350:	080173d0 	.word	0x080173d0
  ldr r2, =_sbss
 8002354:	240000ac 	.word	0x240000ac
  ldr r4, =_ebss
 8002358:	240026e0 	.word	0x240026e0

0800235c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC3_IRQHandler>
	...

08002360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002366:	2003      	movs	r0, #3
 8002368:	f000 f903 	bl	8002572 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800236c:	f002 f870 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <HAL_Init+0x68>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	4913      	ldr	r1, [pc, #76]	@ (80023cc <HAL_Init+0x6c>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800238a:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <HAL_Init+0x68>)
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	4a0e      	ldr	r2, [pc, #56]	@ (80023cc <HAL_Init+0x6c>)
 8002394:	5cd3      	ldrb	r3, [r2, r3]
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	4a0b      	ldr	r2, [pc, #44]	@ (80023d0 <HAL_Init+0x70>)
 80023a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023a4:	4a0b      	ldr	r2, [pc, #44]	@ (80023d4 <HAL_Init+0x74>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023aa:	200f      	movs	r0, #15
 80023ac:	f7ff fcea 	bl	8001d84 <HAL_InitTick>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e002      	b.n	80023c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023ba:	f7ff fcc9 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	58024400 	.word	0x58024400
 80023cc:	08016998 	.word	0x08016998
 80023d0:	24000034 	.word	0x24000034
 80023d4:	24000030 	.word	0x24000030

080023d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_IncTick+0x20>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_IncTick+0x24>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <HAL_IncTick+0x24>)
 80023ea:	6013      	str	r3, [r2, #0]
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	2400003c 	.word	0x2400003c
 80023fc:	24000328 	.word	0x24000328

08002400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return uwTick;
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <HAL_GetTick+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	24000328 	.word	0x24000328

08002418 <__NVIC_SetPriorityGrouping>:
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002428:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <__NVIC_SetPriorityGrouping+0x40>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	4313      	orrs	r3, r2
 8002444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002446:	4a04      	ldr	r2, [pc, #16]	@ (8002458 <__NVIC_SetPriorityGrouping+0x40>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	60d3      	str	r3, [r2, #12]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000ed00 	.word	0xe000ed00
 800245c:	05fa0000 	.word	0x05fa0000

08002460 <__NVIC_GetPriorityGrouping>:
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002464:	4b04      	ldr	r3, [pc, #16]	@ (8002478 <__NVIC_GetPriorityGrouping+0x18>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0307 	and.w	r3, r3, #7
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_EnableIRQ>:
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800248a:	2b00      	cmp	r3, #0
 800248c:	db0b      	blt.n	80024a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	f003 021f 	and.w	r2, r3, #31
 8002494:	4907      	ldr	r1, [pc, #28]	@ (80024b4 <__NVIC_EnableIRQ+0x38>)
 8002496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2001      	movs	r0, #1
 800249e:	fa00 f202 	lsl.w	r2, r0, r2
 80024a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000e100 	.word	0xe000e100

080024b8 <__NVIC_SetPriority>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	db0a      	blt.n	80024e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	490c      	ldr	r1, [pc, #48]	@ (8002504 <__NVIC_SetPriority+0x4c>)
 80024d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	440b      	add	r3, r1
 80024dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80024e0:	e00a      	b.n	80024f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4908      	ldr	r1, [pc, #32]	@ (8002508 <__NVIC_SetPriority+0x50>)
 80024e8:	88fb      	ldrh	r3, [r7, #6]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3b04      	subs	r3, #4
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	440b      	add	r3, r1
 80024f6:	761a      	strb	r2, [r3, #24]
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	e000e100 	.word	0xe000e100
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <NVIC_EncodePriority>:
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	@ 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f1c3 0307 	rsb	r3, r3, #7
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf28      	it	cs
 800252a:	2304      	movcs	r3, #4
 800252c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3304      	adds	r3, #4
 8002532:	2b06      	cmp	r3, #6
 8002534:	d902      	bls.n	800253c <NVIC_EncodePriority+0x30>
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	3b03      	subs	r3, #3
 800253a:	e000      	b.n	800253e <NVIC_EncodePriority+0x32>
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	f04f 32ff 	mov.w	r2, #4294967295
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43da      	mvns	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	401a      	ands	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	43d9      	mvns	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002564:	4313      	orrs	r3, r2
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	@ 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7ff ff4c 	bl	8002418 <__NVIC_SetPriorityGrouping>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002596:	f7ff ff63 	bl	8002460 <__NVIC_GetPriorityGrouping>
 800259a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	6978      	ldr	r0, [r7, #20]
 80025a2:	f7ff ffb3 	bl	800250c <NVIC_EncodePriority>
 80025a6:	4602      	mov	r2, r0
 80025a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff82 	bl	80024b8 <__NVIC_SetPriority>
}
 80025b4:	bf00      	nop
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff56 	bl	800247c <__NVIC_EnableIRQ>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80025dc:	f3bf 8f5f 	dmb	sy
}
 80025e0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80025e2:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <HAL_MPU_Disable+0x28>)
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	4a06      	ldr	r2, [pc, #24]	@ (8002600 <HAL_MPU_Disable+0x28>)
 80025e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ec:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80025ee:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_MPU_Disable+0x2c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	605a      	str	r2, [r3, #4]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000ed00 	.word	0xe000ed00
 8002604:	e000ed90 	.word	0xe000ed90

08002608 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002610:	4a0b      	ldr	r2, [pc, #44]	@ (8002640 <HAL_MPU_Enable+0x38>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800261a:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_MPU_Enable+0x3c>)
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	4a09      	ldr	r2, [pc, #36]	@ (8002644 <HAL_MPU_Enable+0x3c>)
 8002620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002624:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002626:	f3bf 8f4f 	dsb	sy
}
 800262a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800262c:	f3bf 8f6f 	isb	sy
}
 8002630:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000ed90 	.word	0xe000ed90
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	785a      	ldrb	r2, [r3, #1]
 8002654:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <HAL_MPU_ConfigRegion+0x7c>)
 8002656:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002658:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <HAL_MPU_ConfigRegion+0x7c>)
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	4a19      	ldr	r2, [pc, #100]	@ (80026c4 <HAL_MPU_ConfigRegion+0x7c>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002664:	4a17      	ldr	r2, [pc, #92]	@ (80026c4 <HAL_MPU_ConfigRegion+0x7c>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7b1b      	ldrb	r3, [r3, #12]
 8002670:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7adb      	ldrb	r3, [r3, #11]
 8002676:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002678:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7a9b      	ldrb	r3, [r3, #10]
 800267e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002680:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	7b5b      	ldrb	r3, [r3, #13]
 8002686:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002688:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7b9b      	ldrb	r3, [r3, #14]
 800268e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002690:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7bdb      	ldrb	r3, [r3, #15]
 8002696:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002698:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7a5b      	ldrb	r3, [r3, #9]
 800269e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7a1b      	ldrb	r3, [r3, #8]
 80026a6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80026a8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	7812      	ldrb	r2, [r2, #0]
 80026ae:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026b0:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80026b2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026b4:	6113      	str	r3, [r2, #16]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000ed90 	.word	0xe000ed90

080026c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fe96 	bl	8002400 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e2dc      	b.n	8002c9a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d008      	beq.n	80026fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2280      	movs	r2, #128	@ 0x80
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e2cd      	b.n	8002c9a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a76      	ldr	r2, [pc, #472]	@ (80028dc <HAL_DMA_Abort+0x214>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d04a      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a74      	ldr	r2, [pc, #464]	@ (80028e0 <HAL_DMA_Abort+0x218>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d045      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a73      	ldr	r2, [pc, #460]	@ (80028e4 <HAL_DMA_Abort+0x21c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d040      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a71      	ldr	r2, [pc, #452]	@ (80028e8 <HAL_DMA_Abort+0x220>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d03b      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a70      	ldr	r2, [pc, #448]	@ (80028ec <HAL_DMA_Abort+0x224>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d036      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6e      	ldr	r2, [pc, #440]	@ (80028f0 <HAL_DMA_Abort+0x228>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d031      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a6d      	ldr	r2, [pc, #436]	@ (80028f4 <HAL_DMA_Abort+0x22c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d02c      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6b      	ldr	r2, [pc, #428]	@ (80028f8 <HAL_DMA_Abort+0x230>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d027      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6a      	ldr	r2, [pc, #424]	@ (80028fc <HAL_DMA_Abort+0x234>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d022      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a68      	ldr	r2, [pc, #416]	@ (8002900 <HAL_DMA_Abort+0x238>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d01d      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a67      	ldr	r2, [pc, #412]	@ (8002904 <HAL_DMA_Abort+0x23c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d018      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a65      	ldr	r2, [pc, #404]	@ (8002908 <HAL_DMA_Abort+0x240>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a64      	ldr	r2, [pc, #400]	@ (800290c <HAL_DMA_Abort+0x244>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a62      	ldr	r2, [pc, #392]	@ (8002910 <HAL_DMA_Abort+0x248>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a61      	ldr	r2, [pc, #388]	@ (8002914 <HAL_DMA_Abort+0x24c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_DMA_Abort+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5f      	ldr	r2, [pc, #380]	@ (8002918 <HAL_DMA_Abort+0x250>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_DMA_Abort+0xda>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_DMA_Abort+0xdc>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d013      	beq.n	80027d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 021e 	bic.w	r2, r2, #30
 80027b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	e00a      	b.n	80027e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 020e 	bic.w	r2, r2, #14
 80027de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a3c      	ldr	r2, [pc, #240]	@ (80028dc <HAL_DMA_Abort+0x214>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d072      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a3a      	ldr	r2, [pc, #232]	@ (80028e0 <HAL_DMA_Abort+0x218>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d06d      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a39      	ldr	r2, [pc, #228]	@ (80028e4 <HAL_DMA_Abort+0x21c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d068      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a37      	ldr	r2, [pc, #220]	@ (80028e8 <HAL_DMA_Abort+0x220>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d063      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a36      	ldr	r2, [pc, #216]	@ (80028ec <HAL_DMA_Abort+0x224>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d05e      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a34      	ldr	r2, [pc, #208]	@ (80028f0 <HAL_DMA_Abort+0x228>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d059      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a33      	ldr	r2, [pc, #204]	@ (80028f4 <HAL_DMA_Abort+0x22c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d054      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a31      	ldr	r2, [pc, #196]	@ (80028f8 <HAL_DMA_Abort+0x230>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d04f      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a30      	ldr	r2, [pc, #192]	@ (80028fc <HAL_DMA_Abort+0x234>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d04a      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2e      	ldr	r2, [pc, #184]	@ (8002900 <HAL_DMA_Abort+0x238>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d045      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2d      	ldr	r2, [pc, #180]	@ (8002904 <HAL_DMA_Abort+0x23c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d040      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2b      	ldr	r2, [pc, #172]	@ (8002908 <HAL_DMA_Abort+0x240>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d03b      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2a      	ldr	r2, [pc, #168]	@ (800290c <HAL_DMA_Abort+0x244>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d036      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a28      	ldr	r2, [pc, #160]	@ (8002910 <HAL_DMA_Abort+0x248>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d031      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a27      	ldr	r2, [pc, #156]	@ (8002914 <HAL_DMA_Abort+0x24c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d02c      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a25      	ldr	r2, [pc, #148]	@ (8002918 <HAL_DMA_Abort+0x250>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d027      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a24      	ldr	r2, [pc, #144]	@ (800291c <HAL_DMA_Abort+0x254>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d022      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <HAL_DMA_Abort+0x258>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01d      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	@ (8002924 <HAL_DMA_Abort+0x25c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d018      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002928 <HAL_DMA_Abort+0x260>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a1e      	ldr	r2, [pc, #120]	@ (800292c <HAL_DMA_Abort+0x264>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00e      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002930 <HAL_DMA_Abort+0x268>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d009      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002934 <HAL_DMA_Abort+0x26c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_DMA_Abort+0x20e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	@ (8002938 <HAL_DMA_Abort+0x270>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d132      	bne.n	800293c <HAL_DMA_Abort+0x274>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e031      	b.n	800293e <HAL_DMA_Abort+0x276>
 80028da:	bf00      	nop
 80028dc:	40020010 	.word	0x40020010
 80028e0:	40020028 	.word	0x40020028
 80028e4:	40020040 	.word	0x40020040
 80028e8:	40020058 	.word	0x40020058
 80028ec:	40020070 	.word	0x40020070
 80028f0:	40020088 	.word	0x40020088
 80028f4:	400200a0 	.word	0x400200a0
 80028f8:	400200b8 	.word	0x400200b8
 80028fc:	40020410 	.word	0x40020410
 8002900:	40020428 	.word	0x40020428
 8002904:	40020440 	.word	0x40020440
 8002908:	40020458 	.word	0x40020458
 800290c:	40020470 	.word	0x40020470
 8002910:	40020488 	.word	0x40020488
 8002914:	400204a0 	.word	0x400204a0
 8002918:	400204b8 	.word	0x400204b8
 800291c:	58025408 	.word	0x58025408
 8002920:	5802541c 	.word	0x5802541c
 8002924:	58025430 	.word	0x58025430
 8002928:	58025444 	.word	0x58025444
 800292c:	58025458 	.word	0x58025458
 8002930:	5802546c 	.word	0x5802546c
 8002934:	58025480 	.word	0x58025480
 8002938:	58025494 	.word	0x58025494
 800293c:	2300      	movs	r3, #0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002950:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6d      	ldr	r2, [pc, #436]	@ (8002b0c <HAL_DMA_Abort+0x444>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d04a      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6b      	ldr	r2, [pc, #428]	@ (8002b10 <HAL_DMA_Abort+0x448>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d045      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a6a      	ldr	r2, [pc, #424]	@ (8002b14 <HAL_DMA_Abort+0x44c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d040      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a68      	ldr	r2, [pc, #416]	@ (8002b18 <HAL_DMA_Abort+0x450>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d03b      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a67      	ldr	r2, [pc, #412]	@ (8002b1c <HAL_DMA_Abort+0x454>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d036      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a65      	ldr	r2, [pc, #404]	@ (8002b20 <HAL_DMA_Abort+0x458>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d031      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a64      	ldr	r2, [pc, #400]	@ (8002b24 <HAL_DMA_Abort+0x45c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d02c      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a62      	ldr	r2, [pc, #392]	@ (8002b28 <HAL_DMA_Abort+0x460>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d027      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a61      	ldr	r2, [pc, #388]	@ (8002b2c <HAL_DMA_Abort+0x464>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5f      	ldr	r2, [pc, #380]	@ (8002b30 <HAL_DMA_Abort+0x468>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a5e      	ldr	r2, [pc, #376]	@ (8002b34 <HAL_DMA_Abort+0x46c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d018      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002b38 <HAL_DMA_Abort+0x470>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a5b      	ldr	r2, [pc, #364]	@ (8002b3c <HAL_DMA_Abort+0x474>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a59      	ldr	r2, [pc, #356]	@ (8002b40 <HAL_DMA_Abort+0x478>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a58      	ldr	r2, [pc, #352]	@ (8002b44 <HAL_DMA_Abort+0x47c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_DMA_Abort+0x32a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a56      	ldr	r2, [pc, #344]	@ (8002b48 <HAL_DMA_Abort+0x480>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <HAL_DMA_Abort+0x33c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e007      	b.n	8002a14 <HAL_DMA_Abort+0x34c>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a14:	e013      	b.n	8002a3e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a16:	f7ff fcf3 	bl	8002400 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d90c      	bls.n	8002a3e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e12d      	b.n	8002c9a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e5      	bne.n	8002a16 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8002b0c <HAL_DMA_Abort+0x444>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04a      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2d      	ldr	r2, [pc, #180]	@ (8002b10 <HAL_DMA_Abort+0x448>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d045      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2c      	ldr	r2, [pc, #176]	@ (8002b14 <HAL_DMA_Abort+0x44c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d040      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002b18 <HAL_DMA_Abort+0x450>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d03b      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a29      	ldr	r2, [pc, #164]	@ (8002b1c <HAL_DMA_Abort+0x454>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d036      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a27      	ldr	r2, [pc, #156]	@ (8002b20 <HAL_DMA_Abort+0x458>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a26      	ldr	r2, [pc, #152]	@ (8002b24 <HAL_DMA_Abort+0x45c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d02c      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a24      	ldr	r2, [pc, #144]	@ (8002b28 <HAL_DMA_Abort+0x460>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d027      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <HAL_DMA_Abort+0x464>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d022      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a21      	ldr	r2, [pc, #132]	@ (8002b30 <HAL_DMA_Abort+0x468>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01d      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a20      	ldr	r2, [pc, #128]	@ (8002b34 <HAL_DMA_Abort+0x46c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d018      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b38 <HAL_DMA_Abort+0x470>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b3c <HAL_DMA_Abort+0x474>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <HAL_DMA_Abort+0x478>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <HAL_DMA_Abort+0x47c>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d004      	beq.n	8002aea <HAL_DMA_Abort+0x422>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a18      	ldr	r2, [pc, #96]	@ (8002b48 <HAL_DMA_Abort+0x480>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_DMA_Abort+0x426>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_DMA_Abort+0x428>
 8002aee:	2300      	movs	r3, #0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d02b      	beq.n	8002b4c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	223f      	movs	r2, #63	@ 0x3f
 8002b04:	409a      	lsls	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	609a      	str	r2, [r3, #8]
 8002b0a:	e02a      	b.n	8002b62 <HAL_DMA_Abort+0x49a>
 8002b0c:	40020010 	.word	0x40020010
 8002b10:	40020028 	.word	0x40020028
 8002b14:	40020040 	.word	0x40020040
 8002b18:	40020058 	.word	0x40020058
 8002b1c:	40020070 	.word	0x40020070
 8002b20:	40020088 	.word	0x40020088
 8002b24:	400200a0 	.word	0x400200a0
 8002b28:	400200b8 	.word	0x400200b8
 8002b2c:	40020410 	.word	0x40020410
 8002b30:	40020428 	.word	0x40020428
 8002b34:	40020440 	.word	0x40020440
 8002b38:	40020458 	.word	0x40020458
 8002b3c:	40020470 	.word	0x40020470
 8002b40:	40020488 	.word	0x40020488
 8002b44:	400204a0 	.word	0x400204a0
 8002b48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b50:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4f      	ldr	r2, [pc, #316]	@ (8002ca4 <HAL_DMA_Abort+0x5dc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d072      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a4d      	ldr	r2, [pc, #308]	@ (8002ca8 <HAL_DMA_Abort+0x5e0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d06d      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4c      	ldr	r2, [pc, #304]	@ (8002cac <HAL_DMA_Abort+0x5e4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d068      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb0 <HAL_DMA_Abort+0x5e8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d063      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a49      	ldr	r2, [pc, #292]	@ (8002cb4 <HAL_DMA_Abort+0x5ec>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d05e      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a47      	ldr	r2, [pc, #284]	@ (8002cb8 <HAL_DMA_Abort+0x5f0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d059      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a46      	ldr	r2, [pc, #280]	@ (8002cbc <HAL_DMA_Abort+0x5f4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d054      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a44      	ldr	r2, [pc, #272]	@ (8002cc0 <HAL_DMA_Abort+0x5f8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d04f      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a43      	ldr	r2, [pc, #268]	@ (8002cc4 <HAL_DMA_Abort+0x5fc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d04a      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a41      	ldr	r2, [pc, #260]	@ (8002cc8 <HAL_DMA_Abort+0x600>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d045      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a40      	ldr	r2, [pc, #256]	@ (8002ccc <HAL_DMA_Abort+0x604>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d040      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3e      	ldr	r2, [pc, #248]	@ (8002cd0 <HAL_DMA_Abort+0x608>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d03b      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3d      	ldr	r2, [pc, #244]	@ (8002cd4 <HAL_DMA_Abort+0x60c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d036      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a3b      	ldr	r2, [pc, #236]	@ (8002cd8 <HAL_DMA_Abort+0x610>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d031      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a3a      	ldr	r2, [pc, #232]	@ (8002cdc <HAL_DMA_Abort+0x614>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d02c      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a38      	ldr	r2, [pc, #224]	@ (8002ce0 <HAL_DMA_Abort+0x618>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d027      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a37      	ldr	r2, [pc, #220]	@ (8002ce4 <HAL_DMA_Abort+0x61c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d022      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a35      	ldr	r2, [pc, #212]	@ (8002ce8 <HAL_DMA_Abort+0x620>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d01d      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a34      	ldr	r2, [pc, #208]	@ (8002cec <HAL_DMA_Abort+0x624>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d018      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a32      	ldr	r2, [pc, #200]	@ (8002cf0 <HAL_DMA_Abort+0x628>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d013      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a31      	ldr	r2, [pc, #196]	@ (8002cf4 <HAL_DMA_Abort+0x62c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00e      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a2f      	ldr	r2, [pc, #188]	@ (8002cf8 <HAL_DMA_Abort+0x630>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d009      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2e      	ldr	r2, [pc, #184]	@ (8002cfc <HAL_DMA_Abort+0x634>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d004      	beq.n	8002c52 <HAL_DMA_Abort+0x58a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002d00 <HAL_DMA_Abort+0x638>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_DMA_Abort+0x58e>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_DMA_Abort+0x590>
 8002c56:	2300      	movs	r3, #0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c64:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00c      	beq.n	8002c88 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c86:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40020010 	.word	0x40020010
 8002ca8:	40020028 	.word	0x40020028
 8002cac:	40020040 	.word	0x40020040
 8002cb0:	40020058 	.word	0x40020058
 8002cb4:	40020070 	.word	0x40020070
 8002cb8:	40020088 	.word	0x40020088
 8002cbc:	400200a0 	.word	0x400200a0
 8002cc0:	400200b8 	.word	0x400200b8
 8002cc4:	40020410 	.word	0x40020410
 8002cc8:	40020428 	.word	0x40020428
 8002ccc:	40020440 	.word	0x40020440
 8002cd0:	40020458 	.word	0x40020458
 8002cd4:	40020470 	.word	0x40020470
 8002cd8:	40020488 	.word	0x40020488
 8002cdc:	400204a0 	.word	0x400204a0
 8002ce0:	400204b8 	.word	0x400204b8
 8002ce4:	58025408 	.word	0x58025408
 8002ce8:	5802541c 	.word	0x5802541c
 8002cec:	58025430 	.word	0x58025430
 8002cf0:	58025444 	.word	0x58025444
 8002cf4:	58025458 	.word	0x58025458
 8002cf8:	5802546c 	.word	0x5802546c
 8002cfc:	58025480 	.word	0x58025480
 8002d00:	58025494 	.word	0x58025494

08002d04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e237      	b.n	8003186 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d004      	beq.n	8002d2c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2280      	movs	r2, #128	@ 0x80
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e22c      	b.n	8003186 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5c      	ldr	r2, [pc, #368]	@ (8002ea4 <HAL_DMA_Abort_IT+0x1a0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d04a      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea8 <HAL_DMA_Abort_IT+0x1a4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d045      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a59      	ldr	r2, [pc, #356]	@ (8002eac <HAL_DMA_Abort_IT+0x1a8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d040      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a58      	ldr	r2, [pc, #352]	@ (8002eb0 <HAL_DMA_Abort_IT+0x1ac>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d03b      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a56      	ldr	r2, [pc, #344]	@ (8002eb4 <HAL_DMA_Abort_IT+0x1b0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d036      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a55      	ldr	r2, [pc, #340]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1b4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d031      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a53      	ldr	r2, [pc, #332]	@ (8002ebc <HAL_DMA_Abort_IT+0x1b8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02c      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a52      	ldr	r2, [pc, #328]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1bc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d027      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a50      	ldr	r2, [pc, #320]	@ (8002ec4 <HAL_DMA_Abort_IT+0x1c0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d022      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a4f      	ldr	r2, [pc, #316]	@ (8002ec8 <HAL_DMA_Abort_IT+0x1c4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d01d      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a4d      	ldr	r2, [pc, #308]	@ (8002ecc <HAL_DMA_Abort_IT+0x1c8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d018      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a4c      	ldr	r2, [pc, #304]	@ (8002ed0 <HAL_DMA_Abort_IT+0x1cc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ed4 <HAL_DMA_Abort_IT+0x1d0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00e      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a49      	ldr	r2, [pc, #292]	@ (8002ed8 <HAL_DMA_Abort_IT+0x1d4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d009      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a47      	ldr	r2, [pc, #284]	@ (8002edc <HAL_DMA_Abort_IT+0x1d8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_Abort_IT+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a46      	ldr	r2, [pc, #280]	@ (8002ee0 <HAL_DMA_Abort_IT+0x1dc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d101      	bne.n	8002dd0 <HAL_DMA_Abort_IT+0xcc>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_DMA_Abort_IT+0xce>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8086 	beq.w	8002ee4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea4 <HAL_DMA_Abort_IT+0x1a0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d04a      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea8 <HAL_DMA_Abort_IT+0x1a4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d045      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2c      	ldr	r2, [pc, #176]	@ (8002eac <HAL_DMA_Abort_IT+0x1a8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d040      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb0 <HAL_DMA_Abort_IT+0x1ac>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d03b      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a29      	ldr	r2, [pc, #164]	@ (8002eb4 <HAL_DMA_Abort_IT+0x1b0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d036      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a28      	ldr	r2, [pc, #160]	@ (8002eb8 <HAL_DMA_Abort_IT+0x1b4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d031      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a26      	ldr	r2, [pc, #152]	@ (8002ebc <HAL_DMA_Abort_IT+0x1b8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d02c      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a25      	ldr	r2, [pc, #148]	@ (8002ec0 <HAL_DMA_Abort_IT+0x1bc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d027      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a23      	ldr	r2, [pc, #140]	@ (8002ec4 <HAL_DMA_Abort_IT+0x1c0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d022      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a22      	ldr	r2, [pc, #136]	@ (8002ec8 <HAL_DMA_Abort_IT+0x1c4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d01d      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a20      	ldr	r2, [pc, #128]	@ (8002ecc <HAL_DMA_Abort_IT+0x1c8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d018      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1f      	ldr	r2, [pc, #124]	@ (8002ed0 <HAL_DMA_Abort_IT+0x1cc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed4 <HAL_DMA_Abort_IT+0x1d0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00e      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <HAL_DMA_Abort_IT+0x1d4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d009      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <HAL_DMA_Abort_IT+0x1d8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d004      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x17c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a19      	ldr	r2, [pc, #100]	@ (8002ee0 <HAL_DMA_Abort_IT+0x1dc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <HAL_DMA_Abort_IT+0x18e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e178      	b.n	8003184 <HAL_DMA_Abort_IT+0x480>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0201 	bic.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	e16f      	b.n	8003184 <HAL_DMA_Abort_IT+0x480>
 8002ea4:	40020010 	.word	0x40020010
 8002ea8:	40020028 	.word	0x40020028
 8002eac:	40020040 	.word	0x40020040
 8002eb0:	40020058 	.word	0x40020058
 8002eb4:	40020070 	.word	0x40020070
 8002eb8:	40020088 	.word	0x40020088
 8002ebc:	400200a0 	.word	0x400200a0
 8002ec0:	400200b8 	.word	0x400200b8
 8002ec4:	40020410 	.word	0x40020410
 8002ec8:	40020428 	.word	0x40020428
 8002ecc:	40020440 	.word	0x40020440
 8002ed0:	40020458 	.word	0x40020458
 8002ed4:	40020470 	.word	0x40020470
 8002ed8:	40020488 	.word	0x40020488
 8002edc:	400204a0 	.word	0x400204a0
 8002ee0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 020e 	bic.w	r2, r2, #14
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6c      	ldr	r2, [pc, #432]	@ (80030ac <HAL_DMA_Abort_IT+0x3a8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d04a      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a6b      	ldr	r2, [pc, #428]	@ (80030b0 <HAL_DMA_Abort_IT+0x3ac>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d045      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a69      	ldr	r2, [pc, #420]	@ (80030b4 <HAL_DMA_Abort_IT+0x3b0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d040      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a68      	ldr	r2, [pc, #416]	@ (80030b8 <HAL_DMA_Abort_IT+0x3b4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d03b      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a66      	ldr	r2, [pc, #408]	@ (80030bc <HAL_DMA_Abort_IT+0x3b8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d036      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a65      	ldr	r2, [pc, #404]	@ (80030c0 <HAL_DMA_Abort_IT+0x3bc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d031      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a63      	ldr	r2, [pc, #396]	@ (80030c4 <HAL_DMA_Abort_IT+0x3c0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d02c      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a62      	ldr	r2, [pc, #392]	@ (80030c8 <HAL_DMA_Abort_IT+0x3c4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d027      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a60      	ldr	r2, [pc, #384]	@ (80030cc <HAL_DMA_Abort_IT+0x3c8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d022      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a5f      	ldr	r2, [pc, #380]	@ (80030d0 <HAL_DMA_Abort_IT+0x3cc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d01d      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80030d4 <HAL_DMA_Abort_IT+0x3d0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d018      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5c      	ldr	r2, [pc, #368]	@ (80030d8 <HAL_DMA_Abort_IT+0x3d4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a5a      	ldr	r2, [pc, #360]	@ (80030dc <HAL_DMA_Abort_IT+0x3d8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00e      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a59      	ldr	r2, [pc, #356]	@ (80030e0 <HAL_DMA_Abort_IT+0x3dc>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d009      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a57      	ldr	r2, [pc, #348]	@ (80030e4 <HAL_DMA_Abort_IT+0x3e0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d004      	beq.n	8002f94 <HAL_DMA_Abort_IT+0x290>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a56      	ldr	r2, [pc, #344]	@ (80030e8 <HAL_DMA_Abort_IT+0x3e4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d108      	bne.n	8002fa6 <HAL_DMA_Abort_IT+0x2a2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e007      	b.n	8002fb6 <HAL_DMA_Abort_IT+0x2b2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a3c      	ldr	r2, [pc, #240]	@ (80030ac <HAL_DMA_Abort_IT+0x3a8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d072      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a3a      	ldr	r2, [pc, #232]	@ (80030b0 <HAL_DMA_Abort_IT+0x3ac>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d06d      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a39      	ldr	r2, [pc, #228]	@ (80030b4 <HAL_DMA_Abort_IT+0x3b0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d068      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a37      	ldr	r2, [pc, #220]	@ (80030b8 <HAL_DMA_Abort_IT+0x3b4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d063      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a36      	ldr	r2, [pc, #216]	@ (80030bc <HAL_DMA_Abort_IT+0x3b8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d05e      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a34      	ldr	r2, [pc, #208]	@ (80030c0 <HAL_DMA_Abort_IT+0x3bc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d059      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a33      	ldr	r2, [pc, #204]	@ (80030c4 <HAL_DMA_Abort_IT+0x3c0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d054      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a31      	ldr	r2, [pc, #196]	@ (80030c8 <HAL_DMA_Abort_IT+0x3c4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d04f      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a30      	ldr	r2, [pc, #192]	@ (80030cc <HAL_DMA_Abort_IT+0x3c8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d04a      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2e      	ldr	r2, [pc, #184]	@ (80030d0 <HAL_DMA_Abort_IT+0x3cc>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d045      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2d      	ldr	r2, [pc, #180]	@ (80030d4 <HAL_DMA_Abort_IT+0x3d0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d040      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a2b      	ldr	r2, [pc, #172]	@ (80030d8 <HAL_DMA_Abort_IT+0x3d4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d03b      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2a      	ldr	r2, [pc, #168]	@ (80030dc <HAL_DMA_Abort_IT+0x3d8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d036      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a28      	ldr	r2, [pc, #160]	@ (80030e0 <HAL_DMA_Abort_IT+0x3dc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d031      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a27      	ldr	r2, [pc, #156]	@ (80030e4 <HAL_DMA_Abort_IT+0x3e0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d02c      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a25      	ldr	r2, [pc, #148]	@ (80030e8 <HAL_DMA_Abort_IT+0x3e4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d027      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a24      	ldr	r2, [pc, #144]	@ (80030ec <HAL_DMA_Abort_IT+0x3e8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a22      	ldr	r2, [pc, #136]	@ (80030f0 <HAL_DMA_Abort_IT+0x3ec>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01d      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a21      	ldr	r2, [pc, #132]	@ (80030f4 <HAL_DMA_Abort_IT+0x3f0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d018      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1f      	ldr	r2, [pc, #124]	@ (80030f8 <HAL_DMA_Abort_IT+0x3f4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1e      	ldr	r2, [pc, #120]	@ (80030fc <HAL_DMA_Abort_IT+0x3f8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d00e      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a1c      	ldr	r2, [pc, #112]	@ (8003100 <HAL_DMA_Abort_IT+0x3fc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d009      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <HAL_DMA_Abort_IT+0x400>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d004      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x3a2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a19      	ldr	r2, [pc, #100]	@ (8003108 <HAL_DMA_Abort_IT+0x404>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d132      	bne.n	800310c <HAL_DMA_Abort_IT+0x408>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e031      	b.n	800310e <HAL_DMA_Abort_IT+0x40a>
 80030aa:	bf00      	nop
 80030ac:	40020010 	.word	0x40020010
 80030b0:	40020028 	.word	0x40020028
 80030b4:	40020040 	.word	0x40020040
 80030b8:	40020058 	.word	0x40020058
 80030bc:	40020070 	.word	0x40020070
 80030c0:	40020088 	.word	0x40020088
 80030c4:	400200a0 	.word	0x400200a0
 80030c8:	400200b8 	.word	0x400200b8
 80030cc:	40020410 	.word	0x40020410
 80030d0:	40020428 	.word	0x40020428
 80030d4:	40020440 	.word	0x40020440
 80030d8:	40020458 	.word	0x40020458
 80030dc:	40020470 	.word	0x40020470
 80030e0:	40020488 	.word	0x40020488
 80030e4:	400204a0 	.word	0x400204a0
 80030e8:	400204b8 	.word	0x400204b8
 80030ec:	58025408 	.word	0x58025408
 80030f0:	5802541c 	.word	0x5802541c
 80030f4:	58025430 	.word	0x58025430
 80030f8:	58025444 	.word	0x58025444
 80030fc:	58025458 	.word	0x58025458
 8003100:	5802546c 	.word	0x5802546c
 8003104:	58025480 	.word	0x58025480
 8003108:	58025494 	.word	0x58025494
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d028      	beq.n	8003164 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003120:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2201      	movs	r2, #1
 8003132:	409a      	lsls	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003140:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00c      	beq.n	8003164 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003154:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003158:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003162:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop

08003190 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	@ 0x28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 80031a4:	2308      	movs	r3, #8
 80031a6:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80031a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003268 <HAL_FLASH_Program+0xd8>)
 80031aa:	7d1b      	ldrb	r3, [r3, #20]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_FLASH_Program+0x24>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e054      	b.n	800325e <HAL_FLASH_Program+0xce>
 80031b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003268 <HAL_FLASH_Program+0xd8>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031c0:	d316      	bcc.n	80031f0 <HAL_FLASH_Program+0x60>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 80031c8:	d212      	bcs.n	80031f0 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 80031ce:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80031d0:	4b25      	ldr	r3, [pc, #148]	@ (8003268 <HAL_FLASH_Program+0xd8>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80031d6:	6979      	ldr	r1, [r7, #20]
 80031d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80031dc:	f000 f882 	bl	80032e4 <FLASH_WaitForLastOperation>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 80031e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d132      	bne.n	8003254 <HAL_FLASH_Program+0xc4>
 80031ee:	e001      	b.n	80031f4 <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e034      	b.n	800325e <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80031f4:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_FLASH_Program+0xdc>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <HAL_FLASH_Program+0xdc>)
 80031fa:	f043 0302 	orr.w	r3, r3, #2
 80031fe:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8003200:	f3bf 8f6f 	isb	sy
}
 8003204:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8003206:	f3bf 8f4f 	dsb	sy
}
 800320a:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	3304      	adds	r3, #4
 8003218:	623b      	str	r3, [r7, #32]
        src_addr++;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3304      	adds	r3, #4
 800321e:	61fb      	str	r3, [r7, #28]
        row_index--;
 8003220:	7efb      	ldrb	r3, [r7, #27]
 8003222:	3b01      	subs	r3, #1
 8003224:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 8003226:	7efb      	ldrb	r3, [r7, #27]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ef      	bne.n	800320c <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 800322c:	f3bf 8f6f 	isb	sy
}
 8003230:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8003232:	f3bf 8f4f 	dsb	sy
}
 8003236:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8003238:	6979      	ldr	r1, [r7, #20]
 800323a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800323e:	f000 f851 	bl	80032e4 <FLASH_WaitForLastOperation>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8003248:	4b08      	ldr	r3, [pc, #32]	@ (800326c <HAL_FLASH_Program+0xdc>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a07      	ldr	r2, [pc, #28]	@ (800326c <HAL_FLASH_Program+0xdc>)
 800324e:	f023 0302 	bic.w	r3, r3, #2
 8003252:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003254:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <HAL_FLASH_Program+0xd8>)
 8003256:	2200      	movs	r2, #0
 8003258:	751a      	strb	r2, [r3, #20]

  return status;
 800325a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800325e:	4618      	mov	r0, r3
 8003260:	3728      	adds	r7, #40	@ 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2400032c 	.word	0x2400032c
 800326c:	52002000 	.word	0x52002000

08003270 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8003274:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <HAL_FLASH_Unlock+0x38>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00d      	beq.n	800329c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_FLASH_Unlock+0x38>)
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <HAL_FLASH_Unlock+0x3c>)
 8003284:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8003286:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <HAL_FLASH_Unlock+0x38>)
 8003288:	4a09      	ldr	r2, [pc, #36]	@ (80032b0 <HAL_FLASH_Unlock+0x40>)
 800328a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_FLASH_Unlock+0x38>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	52002000 	.word	0x52002000
 80032ac:	45670123 	.word	0x45670123
 80032b0:	cdef89ab 	.word	0xcdef89ab

080032b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80032b8:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <HAL_FLASH_Lock+0x2c>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a08      	ldr	r2, [pc, #32]	@ (80032e0 <HAL_FLASH_Lock+0x2c>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80032c4:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_FLASH_Lock+0x2c>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	52002000 	.word	0x52002000

080032e4 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 80032ee:	2304      	movs	r3, #4
 80032f0:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032f6:	f7ff f883 	bl	8002400 <HAL_GetTick>
 80032fa:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 80032fc:	e010      	b.n	8003320 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d00c      	beq.n	8003320 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7ff f87b 	bl	8002400 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <FLASH_WaitForLastOperation+0x38>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e02d      	b.n	800337c <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003320:	4b18      	ldr	r3, [pc, #96]	@ (8003384 <FLASH_WaitForLastOperation+0xa0>)
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	429a      	cmp	r2, r3
 800332c:	d0e7      	beq.n	80032fe <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d104      	bne.n	800333e <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8003334:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <FLASH_WaitForLastOperation+0xa0>)
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <FLASH_WaitForLastOperation+0xa4>)
 800333a:	4013      	ands	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8003348:	4b10      	ldr	r3, [pc, #64]	@ (800338c <FLASH_WaitForLastOperation+0xa8>)
 800334a:	699a      	ldr	r2, [r3, #24]
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	4a0e      	ldr	r2, [pc, #56]	@ (800338c <FLASH_WaitForLastOperation+0xa8>)
 8003352:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8003354:	4a0b      	ldr	r2, [pc, #44]	@ (8003384 <FLASH_WaitForLastOperation+0xa0>)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e00e      	b.n	800337c <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d10a      	bne.n	800337a <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <FLASH_WaitForLastOperation+0xa0>)
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003370:	d103      	bne.n	800337a <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8003372:	4b04      	ldr	r3, [pc, #16]	@ (8003384 <FLASH_WaitForLastOperation+0xa0>)
 8003374:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003378:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	52002000 	.word	0x52002000
 8003388:	17ee0000 	.word	0x17ee0000
 800338c:	2400032c 	.word	0x2400032c

08003390 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800339e:	4b3f      	ldr	r3, [pc, #252]	@ (800349c <HAL_FLASHEx_Erase+0x10c>)
 80033a0:	7d1b      	ldrb	r3, [r3, #20]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_FLASHEx_Erase+0x1a>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e074      	b.n	8003494 <HAL_FLASHEx_Erase+0x104>
 80033aa:	4b3c      	ldr	r3, [pc, #240]	@ (800349c <HAL_FLASHEx_Erase+0x10c>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033b0:	4b3a      	ldr	r3, [pc, #232]	@ (800349c <HAL_FLASHEx_Erase+0x10c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80033c2:	2101      	movs	r1, #1
 80033c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80033c8:	f7ff ff8c 	bl	80032e4 <FLASH_WaitForLastOperation>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d157      	bne.n	800348c <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d11e      	bne.n	8003422 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f000 f85a 	bl	80034a8 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d045      	beq.n	800348c <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8003400:	2101      	movs	r1, #1
 8003402:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003406:	f7ff ff6d 	bl	80032e4 <FLASH_WaitForLastOperation>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8003414:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <HAL_FLASHEx_Erase+0x110>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a21      	ldr	r2, [pc, #132]	@ (80034a0 <HAL_FLASHEx_Erase+0x110>)
 800341a:	f023 0308 	bic.w	r3, r3, #8
 800341e:	60d3      	str	r3, [r2, #12]
 8003420:	e034      	b.n	800348c <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	e024      	b.n	800347c <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	461a      	mov	r2, r3
 800343c:	68b8      	ldr	r0, [r7, #8]
 800343e:	f000 f857 	bl	80034f0 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00c      	beq.n	8003468 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800344e:	2101      	movs	r1, #1
 8003450:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003454:	f7ff ff46 	bl	80032e4 <FLASH_WaitForLastOperation>
 8003458:	4603      	mov	r3, r0
 800345a:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800345c:	4b10      	ldr	r3, [pc, #64]	@ (80034a0 <HAL_FLASHEx_Erase+0x110>)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	490f      	ldr	r1, [pc, #60]	@ (80034a0 <HAL_FLASHEx_Erase+0x110>)
 8003462:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <HAL_FLASHEx_Erase+0x114>)
 8003464:	4013      	ands	r3, r2
 8003466:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	601a      	str	r2, [r3, #0]
          break;
 8003474:	e00a      	b.n	800348c <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3301      	adds	r3, #1
 800347a:	60bb      	str	r3, [r7, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4413      	add	r3, r2
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	429a      	cmp	r2, r3
 800348a:	d3d2      	bcc.n	8003432 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800348c:	4b03      	ldr	r3, [pc, #12]	@ (800349c <HAL_FLASHEx_Erase+0x10c>)
 800348e:	2200      	movs	r2, #0
 8003490:	751a      	strb	r2, [r3, #20]

  return status;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	2400032c 	.word	0x2400032c
 80034a0:	52002000 	.word	0x52002000
 80034a4:	fffff8fb 	.word	0xfffff8fb

080034a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d011      	beq.n	80034e0 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <FLASH_MassErase+0x44>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a0a      	ldr	r2, [pc, #40]	@ (80034ec <FLASH_MassErase+0x44>)
 80034c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80034c6:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <FLASH_MassErase+0x44>)
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	4907      	ldr	r1, [pc, #28]	@ (80034ec <FLASH_MassErase+0x44>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 80034d4:	4b05      	ldr	r3, [pc, #20]	@ (80034ec <FLASH_MassErase+0x44>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a04      	ldr	r2, [pc, #16]	@ (80034ec <FLASH_MassErase+0x44>)
 80034da:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 80034de:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	52002000 	.word	0x52002000

080034f0 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d010      	beq.n	8003528 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 8003506:	4b0b      	ldr	r3, [pc, #44]	@ (8003534 <FLASH_Erase_Sector+0x44>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	4a0a      	ldr	r2, [pc, #40]	@ (8003534 <FLASH_Erase_Sector+0x44>)
 800350c:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8003510:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8003512:	4b08      	ldr	r3, [pc, #32]	@ (8003534 <FLASH_Erase_Sector+0x44>)
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	0219      	lsls	r1, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	430b      	orrs	r3, r1
 800351e:	4313      	orrs	r3, r2
 8003520:	4a04      	ldr	r2, [pc, #16]	@ (8003534 <FLASH_Erase_Sector+0x44>)
 8003522:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 8003526:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	52002000 	.word	0x52002000

08003538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003538:	b480      	push	{r7}
 800353a:	b089      	sub	sp, #36	@ 0x24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003546:	4b86      	ldr	r3, [pc, #536]	@ (8003760 <HAL_GPIO_Init+0x228>)
 8003548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800354a:	e18c      	b.n	8003866 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	2101      	movs	r1, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 817e 	beq.w	8003860 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d005      	beq.n	800357c <HAL_GPIO_Init+0x44>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d130      	bne.n	80035de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	2203      	movs	r2, #3
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035b2:	2201      	movs	r2, #1
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	f003 0201 	and.w	r2, r3, #1
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b03      	cmp	r3, #3
 80035e8:	d017      	beq.n	800361a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	2203      	movs	r2, #3
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d123      	bne.n	800366e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	08da      	lsrs	r2, r3, #3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3208      	adds	r2, #8
 800362e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	220f      	movs	r2, #15
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43db      	mvns	r3, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4013      	ands	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	08da      	lsrs	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3208      	adds	r2, #8
 8003668:	69b9      	ldr	r1, [r7, #24]
 800366a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	2203      	movs	r2, #3
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	43db      	mvns	r3, r3
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	4013      	ands	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0203 	and.w	r2, r3, #3
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fa02 f303 	lsl.w	r3, r2, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 80d8 	beq.w	8003860 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003764 <HAL_GPIO_Init+0x22c>)
 80036b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003764 <HAL_GPIO_Init+0x22c>)
 80036b8:	f043 0302 	orr.w	r3, r3, #2
 80036bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80036c0:	4b28      	ldr	r3, [pc, #160]	@ (8003764 <HAL_GPIO_Init+0x22c>)
 80036c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ce:	4a26      	ldr	r2, [pc, #152]	@ (8003768 <HAL_GPIO_Init+0x230>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a1d      	ldr	r2, [pc, #116]	@ (800376c <HAL_GPIO_Init+0x234>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d04a      	beq.n	8003790 <HAL_GPIO_Init+0x258>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003770 <HAL_GPIO_Init+0x238>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02b      	beq.n	800375a <HAL_GPIO_Init+0x222>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a1b      	ldr	r2, [pc, #108]	@ (8003774 <HAL_GPIO_Init+0x23c>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d025      	beq.n	8003756 <HAL_GPIO_Init+0x21e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1a      	ldr	r2, [pc, #104]	@ (8003778 <HAL_GPIO_Init+0x240>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d01f      	beq.n	8003752 <HAL_GPIO_Init+0x21a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a19      	ldr	r2, [pc, #100]	@ (800377c <HAL_GPIO_Init+0x244>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d019      	beq.n	800374e <HAL_GPIO_Init+0x216>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a18      	ldr	r2, [pc, #96]	@ (8003780 <HAL_GPIO_Init+0x248>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_GPIO_Init+0x212>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a17      	ldr	r2, [pc, #92]	@ (8003784 <HAL_GPIO_Init+0x24c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00d      	beq.n	8003746 <HAL_GPIO_Init+0x20e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a16      	ldr	r2, [pc, #88]	@ (8003788 <HAL_GPIO_Init+0x250>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d007      	beq.n	8003742 <HAL_GPIO_Init+0x20a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a15      	ldr	r2, [pc, #84]	@ (800378c <HAL_GPIO_Init+0x254>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d101      	bne.n	800373e <HAL_GPIO_Init+0x206>
 800373a:	2309      	movs	r3, #9
 800373c:	e029      	b.n	8003792 <HAL_GPIO_Init+0x25a>
 800373e:	230a      	movs	r3, #10
 8003740:	e027      	b.n	8003792 <HAL_GPIO_Init+0x25a>
 8003742:	2307      	movs	r3, #7
 8003744:	e025      	b.n	8003792 <HAL_GPIO_Init+0x25a>
 8003746:	2306      	movs	r3, #6
 8003748:	e023      	b.n	8003792 <HAL_GPIO_Init+0x25a>
 800374a:	2305      	movs	r3, #5
 800374c:	e021      	b.n	8003792 <HAL_GPIO_Init+0x25a>
 800374e:	2304      	movs	r3, #4
 8003750:	e01f      	b.n	8003792 <HAL_GPIO_Init+0x25a>
 8003752:	2303      	movs	r3, #3
 8003754:	e01d      	b.n	8003792 <HAL_GPIO_Init+0x25a>
 8003756:	2302      	movs	r3, #2
 8003758:	e01b      	b.n	8003792 <HAL_GPIO_Init+0x25a>
 800375a:	2301      	movs	r3, #1
 800375c:	e019      	b.n	8003792 <HAL_GPIO_Init+0x25a>
 800375e:	bf00      	nop
 8003760:	58000080 	.word	0x58000080
 8003764:	58024400 	.word	0x58024400
 8003768:	58000400 	.word	0x58000400
 800376c:	58020000 	.word	0x58020000
 8003770:	58020400 	.word	0x58020400
 8003774:	58020800 	.word	0x58020800
 8003778:	58020c00 	.word	0x58020c00
 800377c:	58021000 	.word	0x58021000
 8003780:	58021400 	.word	0x58021400
 8003784:	58021800 	.word	0x58021800
 8003788:	58021c00 	.word	0x58021c00
 800378c:	58022400 	.word	0x58022400
 8003790:	2300      	movs	r3, #0
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	f002 0203 	and.w	r2, r2, #3
 8003798:	0092      	lsls	r2, r2, #2
 800379a:	4093      	lsls	r3, r2
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037a2:	4938      	ldr	r1, [pc, #224]	@ (8003884 <HAL_GPIO_Init+0x34c>)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80037d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80037de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4013      	ands	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003804:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	43db      	mvns	r3, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	3301      	adds	r3, #1
 8003864:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	f47f ae6b 	bne.w	800354c <HAL_GPIO_Init+0x14>
  }
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	3724      	adds	r7, #36	@ 0x24
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	58000400 	.word	0x58000400

08003888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
 8003894:	4613      	mov	r3, r2
 8003896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003898:	787b      	ldrb	r3, [r7, #1]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80038a4:	e003      	b.n	80038ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80038a6:	887b      	ldrh	r3, [r7, #2]
 80038a8:	041a      	lsls	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	619a      	str	r2, [r3, #24]
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038c4:	4b19      	ldr	r3, [pc, #100]	@ (800392c <HAL_PWREx_ConfigSupply+0x70>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d00a      	beq.n	80038e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80038d0:	4b16      	ldr	r3, [pc, #88]	@ (800392c <HAL_PWREx_ConfigSupply+0x70>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d001      	beq.n	80038e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e01f      	b.n	8003922 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e01d      	b.n	8003922 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80038e6:	4b11      	ldr	r3, [pc, #68]	@ (800392c <HAL_PWREx_ConfigSupply+0x70>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f023 0207 	bic.w	r2, r3, #7
 80038ee:	490f      	ldr	r1, [pc, #60]	@ (800392c <HAL_PWREx_ConfigSupply+0x70>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80038f6:	f7fe fd83 	bl	8002400 <HAL_GetTick>
 80038fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80038fc:	e009      	b.n	8003912 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80038fe:	f7fe fd7f 	bl	8002400 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800390c:	d901      	bls.n	8003912 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e007      	b.n	8003922 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_PWREx_ConfigSupply+0x70>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800391a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800391e:	d1ee      	bne.n	80038fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	58024800 	.word	0x58024800

08003930 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	@ 0x30
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e3c8      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8087 	beq.w	8003a5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003950:	4b88      	ldr	r3, [pc, #544]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800395a:	4b86      	ldr	r3, [pc, #536]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	2b10      	cmp	r3, #16
 8003964:	d007      	beq.n	8003976 <HAL_RCC_OscConfig+0x46>
 8003966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003968:	2b18      	cmp	r3, #24
 800396a:	d110      	bne.n	800398e <HAL_RCC_OscConfig+0x5e>
 800396c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d10b      	bne.n	800398e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003976:	4b7f      	ldr	r3, [pc, #508]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d06c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x12c>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d168      	bne.n	8003a5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e3a2      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x76>
 8003998:	4b76      	ldr	r3, [pc, #472]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a75      	ldr	r2, [pc, #468]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 800399e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e02e      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x98>
 80039ae:	4b71      	ldr	r3, [pc, #452]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a70      	ldr	r2, [pc, #448]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6d      	ldr	r2, [pc, #436]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	e01d      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0xbc>
 80039d2:	4b68      	ldr	r3, [pc, #416]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a67      	ldr	r2, [pc, #412]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b65      	ldr	r3, [pc, #404]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a64      	ldr	r2, [pc, #400]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0xd4>
 80039ec:	4b61      	ldr	r3, [pc, #388]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a60      	ldr	r2, [pc, #384]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 80039fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fcf8 	bl	8002400 <HAL_GetTick>
 8003a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a14:	f7fe fcf4 	bl	8002400 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b64      	cmp	r3, #100	@ 0x64
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e356      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a26:	4b53      	ldr	r3, [pc, #332]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0f0      	beq.n	8003a14 <HAL_RCC_OscConfig+0xe4>
 8003a32:	e014      	b.n	8003a5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a34:	f7fe fce4 	bl	8002400 <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fce0 	bl	8002400 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	@ 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e342      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a4e:	4b49      	ldr	r3, [pc, #292]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x10c>
 8003a5a:	e000      	b.n	8003a5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 808c 	beq.w	8003b84 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a6c:	4b41      	ldr	r3, [pc, #260]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a76:	4b3f      	ldr	r3, [pc, #252]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_RCC_OscConfig+0x162>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2b18      	cmp	r3, #24
 8003a86:	d137      	bne.n	8003af8 <HAL_RCC_OscConfig+0x1c8>
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d132      	bne.n	8003af8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a92:	4b38      	ldr	r3, [pc, #224]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <HAL_RCC_OscConfig+0x17a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e314      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003aaa:	4b32      	ldr	r3, [pc, #200]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f023 0219 	bic.w	r2, r3, #25
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	492f      	ldr	r1, [pc, #188]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe fca0 	bl	8002400 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ac4:	f7fe fc9c 	bl	8002400 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e2fe      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad6:	4b27      	ldr	r3, [pc, #156]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	061b      	lsls	r3, r3, #24
 8003af0:	4920      	ldr	r1, [pc, #128]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003af6:	e045      	b.n	8003b84 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d026      	beq.n	8003b4e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b00:	4b1c      	ldr	r3, [pc, #112]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f023 0219 	bic.w	r2, r3, #25
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	4919      	ldr	r1, [pc, #100]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fe fc75 	bl	8002400 <HAL_GetTick>
 8003b16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fe fc71 	bl	8002400 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e2d3      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b2c:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b0e      	ldr	r3, [pc, #56]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	061b      	lsls	r3, r3, #24
 8003b46:	490b      	ldr	r1, [pc, #44]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
 8003b4c:	e01a      	b.n	8003b84 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4e:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a08      	ldr	r2, [pc, #32]	@ (8003b74 <HAL_RCC_OscConfig+0x244>)
 8003b54:	f023 0301 	bic.w	r3, r3, #1
 8003b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fe fc51 	bl	8002400 <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b62:	f7fe fc4d 	bl	8002400 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d903      	bls.n	8003b78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e2af      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
 8003b74:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b78:	4b96      	ldr	r3, [pc, #600]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ee      	bne.n	8003b62 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d06a      	beq.n	8003c66 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b90:	4b90      	ldr	r3, [pc, #576]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b98:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b9a:	4b8e      	ldr	r3, [pc, #568]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d007      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x286>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b18      	cmp	r3, #24
 8003baa:	d11b      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2b4>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d116      	bne.n	8003be4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bb6:	4b87      	ldr	r3, [pc, #540]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_RCC_OscConfig+0x29e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	2b80      	cmp	r3, #128	@ 0x80
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e282      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bce:	4b81      	ldr	r3, [pc, #516]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	497d      	ldr	r1, [pc, #500]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003be2:	e040      	b.n	8003c66 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d023      	beq.n	8003c34 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bec:	4b79      	ldr	r3, [pc, #484]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a78      	ldr	r2, [pc, #480]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fc02 	bl	8002400 <HAL_GetTick>
 8003bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c00:	f7fe fbfe 	bl	8002400 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e260      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c12:	4b70      	ldr	r3, [pc, #448]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0f0      	beq.n	8003c00 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	061b      	lsls	r3, r3, #24
 8003c2c:	4969      	ldr	r1, [pc, #420]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60cb      	str	r3, [r1, #12]
 8003c32:	e018      	b.n	8003c66 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c34:	4b67      	ldr	r3, [pc, #412]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a66      	ldr	r2, [pc, #408]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe fbde 	bl	8002400 <HAL_GetTick>
 8003c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c48:	f7fe fbda 	bl	8002400 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e23c      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c5a:	4b5e      	ldr	r3, [pc, #376]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d036      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d019      	beq.n	8003cae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c7a:	4b56      	ldr	r3, [pc, #344]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7e:	4a55      	ldr	r2, [pc, #340]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fe fbbb 	bl	8002400 <HAL_GetTick>
 8003c8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fe fbb7 	bl	8002400 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e219      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ca0:	4b4c      	ldr	r3, [pc, #304]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x35e>
 8003cac:	e018      	b.n	8003ce0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cae:	4b49      	ldr	r3, [pc, #292]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb2:	4a48      	ldr	r2, [pc, #288]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cba:	f7fe fba1 	bl	8002400 <HAL_GetTick>
 8003cbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc2:	f7fe fb9d 	bl	8002400 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e1ff      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f0      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d036      	beq.n	8003d5a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d019      	beq.n	8003d28 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cf4:	4b37      	ldr	r3, [pc, #220]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a36      	ldr	r2, [pc, #216]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003cfa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cfe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d00:	f7fe fb7e 	bl	8002400 <HAL_GetTick>
 8003d04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d08:	f7fe fb7a 	bl	8002400 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e1dc      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f0      	beq.n	8003d08 <HAL_RCC_OscConfig+0x3d8>
 8003d26:	e018      	b.n	8003d5a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d28:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a29      	ldr	r2, [pc, #164]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003d2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d34:	f7fe fb64 	bl	8002400 <HAL_GetTick>
 8003d38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d3c:	f7fe fb60 	bl	8002400 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e1c2      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d4e:	4b21      	ldr	r3, [pc, #132]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8086 	beq.w	8003e74 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d68:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd8 <HAL_RCC_OscConfig+0x4a8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd8 <HAL_RCC_OscConfig+0x4a8>)
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d74:	f7fe fb44 	bl	8002400 <HAL_GetTick>
 8003d78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7c:	f7fe fb40 	bl	8002400 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	@ 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e1a2      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d8e:	4b12      	ldr	r3, [pc, #72]	@ (8003dd8 <HAL_RCC_OscConfig+0x4a8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d106      	bne.n	8003db0 <HAL_RCC_OscConfig+0x480>
 8003da2:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da6:	4a0b      	ldr	r2, [pc, #44]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dae:	e032      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d111      	bne.n	8003ddc <HAL_RCC_OscConfig+0x4ac>
 8003db8:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbc:	4a05      	ldr	r2, [pc, #20]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003dbe:	f023 0301 	bic.w	r3, r3, #1
 8003dc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc4:	4b03      	ldr	r3, [pc, #12]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc8:	4a02      	ldr	r2, [pc, #8]	@ (8003dd4 <HAL_RCC_OscConfig+0x4a4>)
 8003dca:	f023 0304 	bic.w	r3, r3, #4
 8003dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd0:	e021      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e6>
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	58024800 	.word	0x58024800
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCC_OscConfig+0x4ce>
 8003de4:	4b83      	ldr	r3, [pc, #524]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	4a82      	ldr	r2, [pc, #520]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df0:	4b80      	ldr	r3, [pc, #512]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dfc:	e00b      	b.n	8003e16 <HAL_RCC_OscConfig+0x4e6>
 8003dfe:	4b7d      	ldr	r3, [pc, #500]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	4a7c      	ldr	r2, [pc, #496]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003e04:	f023 0301 	bic.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e0a:	4b7a      	ldr	r3, [pc, #488]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	4a79      	ldr	r2, [pc, #484]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003e10:	f023 0304 	bic.w	r3, r3, #4
 8003e14:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d015      	beq.n	8003e4a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fe faef 	bl	8002400 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e24:	e00a      	b.n	8003e3c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e26:	f7fe faeb 	bl	8002400 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e14b      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e3c:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ee      	beq.n	8003e26 <HAL_RCC_OscConfig+0x4f6>
 8003e48:	e014      	b.n	8003e74 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fe fad9 	bl	8002400 <HAL_GetTick>
 8003e4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fe fad5 	bl	8002400 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e135      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e68:	4b62      	ldr	r3, [pc, #392]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1ee      	bne.n	8003e52 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 812a 	beq.w	80040d2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e86:	2b18      	cmp	r3, #24
 8003e88:	f000 80ba 	beq.w	8004000 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	f040 8095 	bne.w	8003fc0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e96:	4b57      	ldr	r3, [pc, #348]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a56      	ldr	r2, [pc, #344]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003e9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea2:	f7fe faad 	bl	8002400 <HAL_GetTick>
 8003ea6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fe faa9 	bl	8002400 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e10b      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff8 <HAL_RCC_OscConfig+0x6c8>)
 8003ece:	4013      	ands	r3, r2
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ed8:	0112      	lsls	r2, r2, #4
 8003eda:	430a      	orrs	r2, r1
 8003edc:	4945      	ldr	r1, [pc, #276]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	025b      	lsls	r3, r3, #9
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	3b01      	subs	r3, #1
 8003efe:	041b      	lsls	r3, r3, #16
 8003f00:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	061b      	lsls	r3, r3, #24
 8003f0e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f12:	4938      	ldr	r1, [pc, #224]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f18:	4b36      	ldr	r3, [pc, #216]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	4a35      	ldr	r2, [pc, #212]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f24:	4b33      	ldr	r3, [pc, #204]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f28:	4b34      	ldr	r3, [pc, #208]	@ (8003ffc <HAL_RCC_OscConfig+0x6cc>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f30:	00d2      	lsls	r2, r2, #3
 8003f32:	4930      	ldr	r1, [pc, #192]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f38:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	f023 020c 	bic.w	r2, r3, #12
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	492b      	ldr	r1, [pc, #172]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	f023 0202 	bic.w	r2, r3, #2
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	4927      	ldr	r1, [pc, #156]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	4a24      	ldr	r2, [pc, #144]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f68:	4b22      	ldr	r3, [pc, #136]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	4a21      	ldr	r2, [pc, #132]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f74:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f7a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f80:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a18      	ldr	r2, [pc, #96]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f98:	f7fe fa32 	bl	8002400 <HAL_GetTick>
 8003f9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fe fa2e 	bl	8002400 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e090      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x670>
 8003fbe:	e088      	b.n	80040d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fa18 	bl	8002400 <HAL_GetTick>
 8003fd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fe fa14 	bl	8002400 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e076      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fe6:	4b03      	ldr	r3, [pc, #12]	@ (8003ff4 <HAL_RCC_OscConfig+0x6c4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x6a4>
 8003ff2:	e06e      	b.n	80040d2 <HAL_RCC_OscConfig+0x7a2>
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	fffffc0c 	.word	0xfffffc0c
 8003ffc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004000:	4b36      	ldr	r3, [pc, #216]	@ (80040dc <HAL_RCC_OscConfig+0x7ac>)
 8004002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004004:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004006:	4b35      	ldr	r3, [pc, #212]	@ (80040dc <HAL_RCC_OscConfig+0x7ac>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	2b01      	cmp	r3, #1
 8004012:	d031      	beq.n	8004078 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f003 0203 	and.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d12a      	bne.n	8004078 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d122      	bne.n	8004078 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800403e:	429a      	cmp	r2, r3
 8004040:	d11a      	bne.n	8004078 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	0a5b      	lsrs	r3, r3, #9
 8004046:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800404e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d111      	bne.n	8004078 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004060:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004062:	429a      	cmp	r2, r3
 8004064:	d108      	bne.n	8004078 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	0e1b      	lsrs	r3, r3, #24
 800406a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e02b      	b.n	80040d4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800407c:	4b17      	ldr	r3, [pc, #92]	@ (80040dc <HAL_RCC_OscConfig+0x7ac>)
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	08db      	lsrs	r3, r3, #3
 8004082:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004086:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d01f      	beq.n	80040d2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004092:	4b12      	ldr	r3, [pc, #72]	@ (80040dc <HAL_RCC_OscConfig+0x7ac>)
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	4a11      	ldr	r2, [pc, #68]	@ (80040dc <HAL_RCC_OscConfig+0x7ac>)
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800409e:	f7fe f9af 	bl	8002400 <HAL_GetTick>
 80040a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040a4:	bf00      	nop
 80040a6:	f7fe f9ab 	bl	8002400 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d0f9      	beq.n	80040a6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040b2:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <HAL_RCC_OscConfig+0x7ac>)
 80040b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b6:	4b0a      	ldr	r3, [pc, #40]	@ (80040e0 <HAL_RCC_OscConfig+0x7b0>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040be:	00d2      	lsls	r2, r2, #3
 80040c0:	4906      	ldr	r1, [pc, #24]	@ (80040dc <HAL_RCC_OscConfig+0x7ac>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040c6:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <HAL_RCC_OscConfig+0x7ac>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ca:	4a04      	ldr	r2, [pc, #16]	@ (80040dc <HAL_RCC_OscConfig+0x7ac>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3730      	adds	r7, #48	@ 0x30
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	58024400 	.word	0x58024400
 80040e0:	ffff0007 	.word	0xffff0007

080040e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e19c      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b8a      	ldr	r3, [pc, #552]	@ (8004324 <HAL_RCC_ClockConfig+0x240>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d910      	bls.n	8004128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b87      	ldr	r3, [pc, #540]	@ (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	4985      	ldr	r1, [pc, #532]	@ (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b83      	ldr	r3, [pc, #524]	@ (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e184      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d010      	beq.n	8004156 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	4b7b      	ldr	r3, [pc, #492]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004140:	429a      	cmp	r2, r3
 8004142:	d908      	bls.n	8004156 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004144:	4b78      	ldr	r3, [pc, #480]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	4975      	ldr	r1, [pc, #468]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004152:	4313      	orrs	r3, r2
 8004154:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d010      	beq.n	8004184 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	4b70      	ldr	r3, [pc, #448]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800416e:	429a      	cmp	r2, r3
 8004170:	d908      	bls.n	8004184 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004172:	4b6d      	ldr	r3, [pc, #436]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	496a      	ldr	r1, [pc, #424]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004180:	4313      	orrs	r3, r2
 8004182:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d010      	beq.n	80041b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	4b64      	ldr	r3, [pc, #400]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800419c:	429a      	cmp	r2, r3
 800419e:	d908      	bls.n	80041b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041a0:	4b61      	ldr	r3, [pc, #388]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	495e      	ldr	r1, [pc, #376]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	4b59      	ldr	r3, [pc, #356]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d908      	bls.n	80041e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041ce:	4b56      	ldr	r3, [pc, #344]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	4953      	ldr	r1, [pc, #332]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d010      	beq.n	800420e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d908      	bls.n	800420e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f023 020f 	bic.w	r2, r3, #15
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4947      	ldr	r1, [pc, #284]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 800420a:	4313      	orrs	r3, r2
 800420c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d055      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800421a:	4b43      	ldr	r3, [pc, #268]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4940      	ldr	r1, [pc, #256]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004228:	4313      	orrs	r3, r2
 800422a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d107      	bne.n	8004244 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004234:	4b3c      	ldr	r3, [pc, #240]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d121      	bne.n	8004284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0f6      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d107      	bne.n	800425c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800424c:	4b36      	ldr	r3, [pc, #216]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d115      	bne.n	8004284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0ea      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004264:	4b30      	ldr	r3, [pc, #192]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0de      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004274:	4b2c      	ldr	r3, [pc, #176]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0d6      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004284:	4b28      	ldr	r3, [pc, #160]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f023 0207 	bic.w	r2, r3, #7
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4925      	ldr	r1, [pc, #148]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004296:	f7fe f8b3 	bl	8002400 <HAL_GetTick>
 800429a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429e:	f7fe f8af 	bl	8002400 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0be      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d1eb      	bne.n	800429e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d010      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	4b14      	ldr	r3, [pc, #80]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	429a      	cmp	r2, r3
 80042e0:	d208      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e2:	4b11      	ldr	r3, [pc, #68]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f023 020f 	bic.w	r2, r3, #15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	490e      	ldr	r1, [pc, #56]	@ (8004328 <HAL_RCC_ClockConfig+0x244>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <HAL_RCC_ClockConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d214      	bcs.n	800432c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b08      	ldr	r3, [pc, #32]	@ (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 020f 	bic.w	r2, r3, #15
 800430a:	4906      	ldr	r1, [pc, #24]	@ (8004324 <HAL_RCC_ClockConfig+0x240>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b04      	ldr	r3, [pc, #16]	@ (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e086      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
 8004324:	52002000 	.word	0x52002000
 8004328:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d010      	beq.n	800435a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	4b3f      	ldr	r3, [pc, #252]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004344:	429a      	cmp	r2, r3
 8004346:	d208      	bcs.n	800435a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004348:	4b3c      	ldr	r3, [pc, #240]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	4939      	ldr	r1, [pc, #228]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 8004356:	4313      	orrs	r3, r2
 8004358:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d010      	beq.n	8004388 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	4b34      	ldr	r3, [pc, #208]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004372:	429a      	cmp	r2, r3
 8004374:	d208      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004376:	4b31      	ldr	r3, [pc, #196]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	492e      	ldr	r1, [pc, #184]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 8004384:	4313      	orrs	r3, r2
 8004386:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	d010      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	4b28      	ldr	r3, [pc, #160]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d208      	bcs.n	80043b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043a4:	4b25      	ldr	r3, [pc, #148]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	4922      	ldr	r1, [pc, #136]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d010      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	4b1d      	ldr	r3, [pc, #116]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d208      	bcs.n	80043e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043d2:	4b1a      	ldr	r3, [pc, #104]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	4917      	ldr	r1, [pc, #92]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043e4:	f000 f834 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b14      	ldr	r3, [pc, #80]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	0a1b      	lsrs	r3, r3, #8
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	4912      	ldr	r1, [pc, #72]	@ (8004440 <HAL_RCC_ClockConfig+0x35c>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004402:	4b0e      	ldr	r3, [pc, #56]	@ (800443c <HAL_RCC_ClockConfig+0x358>)
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	4a0d      	ldr	r2, [pc, #52]	@ (8004440 <HAL_RCC_ClockConfig+0x35c>)
 800440c:	5cd3      	ldrb	r3, [r2, r3]
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <HAL_RCC_ClockConfig+0x360>)
 800441a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800441c:	4a0a      	ldr	r2, [pc, #40]	@ (8004448 <HAL_RCC_ClockConfig+0x364>)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004422:	4b0a      	ldr	r3, [pc, #40]	@ (800444c <HAL_RCC_ClockConfig+0x368>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fd fcac 	bl	8001d84 <HAL_InitTick>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	58024400 	.word	0x58024400
 8004440:	08016998 	.word	0x08016998
 8004444:	24000034 	.word	0x24000034
 8004448:	24000030 	.word	0x24000030
 800444c:	24000038 	.word	0x24000038

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	@ 0x24
 8004454:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004456:	4bb3      	ldr	r3, [pc, #716]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800445e:	2b18      	cmp	r3, #24
 8004460:	f200 8155 	bhi.w	800470e <HAL_RCC_GetSysClockFreq+0x2be>
 8004464:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	080044d1 	.word	0x080044d1
 8004470:	0800470f 	.word	0x0800470f
 8004474:	0800470f 	.word	0x0800470f
 8004478:	0800470f 	.word	0x0800470f
 800447c:	0800470f 	.word	0x0800470f
 8004480:	0800470f 	.word	0x0800470f
 8004484:	0800470f 	.word	0x0800470f
 8004488:	0800470f 	.word	0x0800470f
 800448c:	080044f7 	.word	0x080044f7
 8004490:	0800470f 	.word	0x0800470f
 8004494:	0800470f 	.word	0x0800470f
 8004498:	0800470f 	.word	0x0800470f
 800449c:	0800470f 	.word	0x0800470f
 80044a0:	0800470f 	.word	0x0800470f
 80044a4:	0800470f 	.word	0x0800470f
 80044a8:	0800470f 	.word	0x0800470f
 80044ac:	080044fd 	.word	0x080044fd
 80044b0:	0800470f 	.word	0x0800470f
 80044b4:	0800470f 	.word	0x0800470f
 80044b8:	0800470f 	.word	0x0800470f
 80044bc:	0800470f 	.word	0x0800470f
 80044c0:	0800470f 	.word	0x0800470f
 80044c4:	0800470f 	.word	0x0800470f
 80044c8:	0800470f 	.word	0x0800470f
 80044cc:	08004503 	.word	0x08004503
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d0:	4b94      	ldr	r3, [pc, #592]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d009      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044dc:	4b91      	ldr	r3, [pc, #580]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	08db      	lsrs	r3, r3, #3
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	4a90      	ldr	r2, [pc, #576]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044ee:	e111      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044f0:	4b8d      	ldr	r3, [pc, #564]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044f2:	61bb      	str	r3, [r7, #24]
      break;
 80044f4:	e10e      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044f6:	4b8d      	ldr	r3, [pc, #564]	@ (800472c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044f8:	61bb      	str	r3, [r7, #24]
      break;
 80044fa:	e10b      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044fc:	4b8c      	ldr	r3, [pc, #560]	@ (8004730 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044fe:	61bb      	str	r3, [r7, #24]
      break;
 8004500:	e108      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004502:	4b88      	ldr	r3, [pc, #544]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800450c:	4b85      	ldr	r3, [pc, #532]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004516:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004518:	4b82      	ldr	r3, [pc, #520]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004522:	4b80      	ldr	r3, [pc, #512]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004526:	08db      	lsrs	r3, r3, #3
 8004528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80e1 	beq.w	8004708 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b02      	cmp	r3, #2
 800454a:	f000 8083 	beq.w	8004654 <HAL_RCC_GetSysClockFreq+0x204>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b02      	cmp	r3, #2
 8004552:	f200 80a1 	bhi.w	8004698 <HAL_RCC_GetSysClockFreq+0x248>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0x114>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d056      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004562:	e099      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004564:	4b6f      	ldr	r3, [pc, #444]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02d      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004570:	4b6c      	ldr	r3, [pc, #432]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	08db      	lsrs	r3, r3, #3
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	4a6b      	ldr	r2, [pc, #428]	@ (8004728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
 8004580:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459a:	4b62      	ldr	r3, [pc, #392]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045ca:	e087      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004738 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045de:	4b51      	ldr	r3, [pc, #324]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80045f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800460e:	e065      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800473c <HAL_RCC_GetSysClockFreq+0x2ec>
 800461e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004622:	4b40      	ldr	r3, [pc, #256]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004632:	ed97 6a02 	vldr	s12, [r7, #8]
 8004636:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 800463a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004652:	e043      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004740 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004666:	4b2f      	ldr	r3, [pc, #188]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004676:	ed97 6a02 	vldr	s12, [r7, #8]
 800467a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 800467e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800468a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004696:	e021      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800473c <HAL_RCC_GetSysClockFreq+0x2ec>
 80046a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80046be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046dc:	4b11      	ldr	r3, [pc, #68]	@ (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e6:	3301      	adds	r3, #1
 80046e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004700:	ee17 3a90 	vmov	r3, s15
 8004704:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004706:	e005      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	61bb      	str	r3, [r7, #24]
      break;
 800470c:	e002      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800470e:	4b07      	ldr	r3, [pc, #28]	@ (800472c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004710:	61bb      	str	r3, [r7, #24]
      break;
 8004712:	bf00      	nop
  }

  return sysclockfreq;
 8004714:	69bb      	ldr	r3, [r7, #24]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3724      	adds	r7, #36	@ 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	58024400 	.word	0x58024400
 8004728:	03d09000 	.word	0x03d09000
 800472c:	003d0900 	.word	0x003d0900
 8004730:	007a1200 	.word	0x007a1200
 8004734:	46000000 	.word	0x46000000
 8004738:	4c742400 	.word	0x4c742400
 800473c:	4a742400 	.word	0x4a742400
 8004740:	4af42400 	.word	0x4af42400

08004744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800474a:	f7ff fe81 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800474e:	4602      	mov	r2, r0
 8004750:	4b10      	ldr	r3, [pc, #64]	@ (8004794 <HAL_RCC_GetHCLKFreq+0x50>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	490f      	ldr	r1, [pc, #60]	@ (8004798 <HAL_RCC_GetHCLKFreq+0x54>)
 800475c:	5ccb      	ldrb	r3, [r1, r3]
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	fa22 f303 	lsr.w	r3, r2, r3
 8004766:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004768:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <HAL_RCC_GetHCLKFreq+0x50>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	4a09      	ldr	r2, [pc, #36]	@ (8004798 <HAL_RCC_GetHCLKFreq+0x54>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a07      	ldr	r2, [pc, #28]	@ (800479c <HAL_RCC_GetHCLKFreq+0x58>)
 8004780:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004782:	4a07      	ldr	r2, [pc, #28]	@ (80047a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004788:	4b04      	ldr	r3, [pc, #16]	@ (800479c <HAL_RCC_GetHCLKFreq+0x58>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	58024400 	.word	0x58024400
 8004798:	08016998 	.word	0x08016998
 800479c:	24000034 	.word	0x24000034
 80047a0:	24000030 	.word	0x24000030

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047a8:	f7ff ffcc 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4904      	ldr	r1, [pc, #16]	@ (80047cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	58024400 	.word	0x58024400
 80047cc:	08016998 	.word	0x08016998

080047d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047d4:	f7ff ffb6 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4904      	ldr	r1, [pc, #16]	@ (80047f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	58024400 	.word	0x58024400
 80047f8:	08016998 	.word	0x08016998

080047fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	223f      	movs	r2, #63	@ 0x3f
 800480a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800480c:	4b1a      	ldr	r3, [pc, #104]	@ (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0207 	and.w	r2, r3, #7
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004818:	4b17      	ldr	r3, [pc, #92]	@ (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004824:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f003 020f 	and.w	r2, r3, #15
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004830:	4b11      	ldr	r3, [pc, #68]	@ (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800483c:	4b0e      	ldr	r3, [pc, #56]	@ (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004854:	4b08      	ldr	r3, [pc, #32]	@ (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004860:	4b06      	ldr	r3, [pc, #24]	@ (800487c <HAL_RCC_GetClockConfig+0x80>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 020f 	and.w	r2, r3, #15
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	601a      	str	r2, [r3, #0]
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	58024400 	.word	0x58024400
 800487c:	52002000 	.word	0x52002000

08004880 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004884:	b0c6      	sub	sp, #280	@ 0x118
 8004886:	af00      	add	r7, sp, #0
 8004888:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004892:	2300      	movs	r3, #0
 8004894:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80048a4:	2500      	movs	r5, #0
 80048a6:	ea54 0305 	orrs.w	r3, r4, r5
 80048aa:	d049      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80048ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048b6:	d02f      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048b8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048bc:	d828      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048c2:	d01a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048c8:	d822      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d2:	d007      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048d4:	e01c      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d6:	4bab      	ldr	r3, [pc, #684]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	4aaa      	ldr	r2, [pc, #680]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80048dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048e2:	e01a      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e8:	3308      	adds	r3, #8
 80048ea:	2102      	movs	r1, #2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 fc25 	bl	800613c <RCCEx_PLL2_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048f8:	e00f      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048fe:	3328      	adds	r3, #40	@ 0x28
 8004900:	2102      	movs	r1, #2
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fccc 	bl	80062a0 <RCCEx_PLL3_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800490e:	e004      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004916:	e000      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800491a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004922:	4b98      	ldr	r3, [pc, #608]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004926:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800492a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800492e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004930:	4a94      	ldr	r2, [pc, #592]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004932:	430b      	orrs	r3, r1
 8004934:	6513      	str	r3, [r2, #80]	@ 0x50
 8004936:	e003      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800493c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800494c:	f04f 0900 	mov.w	r9, #0
 8004950:	ea58 0309 	orrs.w	r3, r8, r9
 8004954:	d047      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495c:	2b04      	cmp	r3, #4
 800495e:	d82a      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004960:	a201      	add	r2, pc, #4	@ (adr r2, 8004968 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800497d 	.word	0x0800497d
 800496c:	0800498b 	.word	0x0800498b
 8004970:	080049a1 	.word	0x080049a1
 8004974:	080049bf 	.word	0x080049bf
 8004978:	080049bf 	.word	0x080049bf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800497c:	4b81      	ldr	r3, [pc, #516]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	4a80      	ldr	r2, [pc, #512]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004988:	e01a      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498e:	3308      	adds	r3, #8
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fbd2 	bl	800613c <RCCEx_PLL2_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800499e:	e00f      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a4:	3328      	adds	r3, #40	@ 0x28
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f001 fc79 	bl	80062a0 <RCCEx_PLL3_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049b4:	e004      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049bc:	e000      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c8:	4b6e      	ldr	r3, [pc, #440]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049cc:	f023 0107 	bic.w	r1, r3, #7
 80049d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049d8:	430b      	orrs	r3, r1
 80049da:	6513      	str	r3, [r2, #80]	@ 0x50
 80049dc:	e003      	b.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049e2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80049e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80049f2:	f04f 0b00 	mov.w	fp, #0
 80049f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80049fa:	d05b      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80049fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a04:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004a08:	d03b      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004a0a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004a0e:	d834      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a10:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a14:	d037      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a1a:	d82e      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a1c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a20:	d033      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004a22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a26:	d828      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a2c:	d01a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a32:	d822      	bhi.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004a38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a3c:	d007      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004a3e:	e01c      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a40:	4b50      	ldr	r3, [pc, #320]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	4a4f      	ldr	r2, [pc, #316]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a4c:	e01e      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a52:	3308      	adds	r3, #8
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 fb70 	bl	800613c <RCCEx_PLL2_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a62:	e013      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a68:	3328      	adds	r3, #40	@ 0x28
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 fc17 	bl	80062a0 <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a78:	e008      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a80:	e004      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a82:	bf00      	nop
 8004a84:	e002      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a86:	bf00      	nop
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d10b      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004a94:	4b3b      	ldr	r3, [pc, #236]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a98:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004aa4:	4a37      	ldr	r2, [pc, #220]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004aaa:	e003      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ab0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004ac0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004aca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	d05d      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004adc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ae0:	d03b      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004ae2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004ae6:	d834      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004ae8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aec:	d037      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004aee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004af2:	d82e      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004af4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004af8:	d033      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004afa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004afe:	d828      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b04:	d01a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b0a:	d822      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004b10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b14:	d007      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b16:	e01c      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b18:	4b1a      	ldr	r3, [pc, #104]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b24:	e01e      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 fb04 	bl	800613c <RCCEx_PLL2_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004b3a:	e013      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b40:	3328      	adds	r3, #40	@ 0x28
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f001 fbab 	bl	80062a0 <RCCEx_PLL3_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b50:	e008      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b58:	e004      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b5a:	bf00      	nop
 8004b5c:	e002      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10d      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b6c:	4b05      	ldr	r3, [pc, #20]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b70:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b7c:	4a01      	ldr	r2, [pc, #4]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b82:	e005      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004b84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004b9c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004ba6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4313      	orrs	r3, r2
 8004bae:	d03a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb6:	2b30      	cmp	r3, #48	@ 0x30
 8004bb8:	d01f      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004bba:	2b30      	cmp	r3, #48	@ 0x30
 8004bbc:	d819      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d00c      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d815      	bhi.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d019      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d111      	bne.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bce:	4baa      	ldr	r3, [pc, #680]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd2:	4aa9      	ldr	r2, [pc, #676]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004bd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bda:	e011      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be0:	3308      	adds	r3, #8
 8004be2:	2102      	movs	r1, #2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 faa9 	bl	800613c <RCCEx_PLL2_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004bf0:	e006      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bf8:	e002      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004bfa:	bf00      	nop
 8004bfc:	e000      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c08:	4b9b      	ldr	r3, [pc, #620]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c0c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c16:	4a98      	ldr	r2, [pc, #608]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c1c:	e003      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c36:	2300      	movs	r3, #0
 8004c38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c40:	460b      	mov	r3, r1
 8004c42:	4313      	orrs	r3, r2
 8004c44:	d051      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c50:	d035      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c56:	d82e      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c5c:	d031      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004c5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c62:	d828      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c68:	d01a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c6e:	d822      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c78:	d007      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004c7a:	e01c      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7c:	4b7e      	ldr	r3, [pc, #504]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	4a7d      	ldr	r2, [pc, #500]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c88:	e01c      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c8e:	3308      	adds	r3, #8
 8004c90:	2100      	movs	r1, #0
 8004c92:	4618      	mov	r0, r3
 8004c94:	f001 fa52 	bl	800613c <RCCEx_PLL2_Config>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c9e:	e011      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ca4:	3328      	adds	r3, #40	@ 0x28
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 faf9 	bl	80062a0 <RCCEx_PLL3_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cb4:	e006      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cbc:	e002      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004cbe:	bf00      	nop
 8004cc0:	e000      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004cc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ccc:	4b6a      	ldr	r3, [pc, #424]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cda:	4a67      	ldr	r2, [pc, #412]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ce0:	e003      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ce6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004cf6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d00:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d053      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d14:	d033      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004d16:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d1a:	d82c      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d20:	d02f      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004d22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d26:	d826      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d2c:	d02b      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004d2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d32:	d820      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d38:	d012      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004d3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d3e:	d81a      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d022      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d48:	d115      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4e:	3308      	adds	r3, #8
 8004d50:	2101      	movs	r1, #1
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 f9f2 	bl	800613c <RCCEx_PLL2_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d5e:	e015      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d64:	3328      	adds	r3, #40	@ 0x28
 8004d66:	2101      	movs	r1, #1
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 fa99 	bl	80062a0 <RCCEx_PLL3_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004d74:	e00a      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d7c:	e006      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e004      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d82:	bf00      	nop
 8004d84:	e002      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d86:	bf00      	nop
 8004d88:	e000      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d94:	4b38      	ldr	r3, [pc, #224]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d98:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004da2:	4a35      	ldr	r2, [pc, #212]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004da4:	430b      	orrs	r3, r1
 8004da6:	6513      	str	r3, [r2, #80]	@ 0x50
 8004da8:	e003      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004dc8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	d058      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dde:	d033      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004de4:	d82c      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dea:	d02f      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df0:	d826      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004df6:	d02b      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004df8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004dfc:	d820      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e02:	d012      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e08:	d81a      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d022      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e12:	d115      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e18:	3308      	adds	r3, #8
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 f98d 	bl	800613c <RCCEx_PLL2_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e28:	e015      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e2e:	3328      	adds	r3, #40	@ 0x28
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 fa34 	bl	80062a0 <RCCEx_PLL3_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e3e:	e00a      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e46:	e006      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e48:	bf00      	nop
 8004e4a:	e004      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e4c:	bf00      	nop
 8004e4e:	e002      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e50:	bf00      	nop
 8004e52:	e000      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10e      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e5e:	4b06      	ldr	r3, [pc, #24]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e6e:	4a02      	ldr	r2, [pc, #8]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e70:	430b      	orrs	r3, r1
 8004e72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e74:	e006      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004e76:	bf00      	nop
 8004e78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e94:	2300      	movs	r3, #0
 8004e96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	d037      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eae:	d00e      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004eb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004eb4:	d816      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d018      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ebe:	d111      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec0:	4bc4      	ldr	r3, [pc, #784]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	4ac3      	ldr	r2, [pc, #780]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ecc:	e00f      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 f930 	bl	800613c <RCCEx_PLL2_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004ee2:	e004      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004eea:	e000      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ef6:	4bb7      	ldr	r3, [pc, #732]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004efa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f04:	4ab3      	ldr	r2, [pc, #716]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f06:	430b      	orrs	r3, r1
 8004f08:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f0a:	e003      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f24:	2300      	movs	r3, #0
 8004f26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4313      	orrs	r3, r2
 8004f32:	d039      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d81c      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f44 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f81 	.word	0x08004f81
 8004f48:	08004f55 	.word	0x08004f55
 8004f4c:	08004f63 	.word	0x08004f63
 8004f50:	08004f81 	.word	0x08004f81
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f54:	4b9f      	ldr	r3, [pc, #636]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f58:	4a9e      	ldr	r2, [pc, #632]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f60:	e00f      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	3308      	adds	r3, #8
 8004f68:	2102      	movs	r1, #2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 f8e6 	bl	800613c <RCCEx_PLL2_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004f76:	e004      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f7e:	e000      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f8a:	4b92      	ldr	r3, [pc, #584]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f8e:	f023 0103 	bic.w	r1, r3, #3
 8004f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f98:	4a8e      	ldr	r2, [pc, #568]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f9e:	e003      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f000 8099 	beq.w	80050fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fca:	4b83      	ldr	r3, [pc, #524]	@ (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a82      	ldr	r2, [pc, #520]	@ (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fd6:	f7fd fa13 	bl	8002400 <HAL_GetTick>
 8004fda:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fde:	e00b      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fe0:	f7fd fa0e 	bl	8002400 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b64      	cmp	r3, #100	@ 0x64
 8004fee:	d903      	bls.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ff6:	e005      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ff8:	4b77      	ldr	r3, [pc, #476]	@ (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0ed      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005008:	2b00      	cmp	r3, #0
 800500a:	d173      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800500c:	4b71      	ldr	r3, [pc, #452]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800500e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005018:	4053      	eors	r3, r2
 800501a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800501e:	2b00      	cmp	r3, #0
 8005020:	d015      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005022:	4b6c      	ldr	r3, [pc, #432]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800502a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800502e:	4b69      	ldr	r3, [pc, #420]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005032:	4a68      	ldr	r2, [pc, #416]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005038:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800503a:	4b66      	ldr	r3, [pc, #408]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503e:	4a65      	ldr	r2, [pc, #404]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005040:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005044:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005046:	4a63      	ldr	r2, [pc, #396]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005048:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800504c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800504e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800505a:	d118      	bne.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fd f9d0 	bl	8002400 <HAL_GetTick>
 8005060:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005064:	e00d      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005066:	f7fd f9cb 	bl	8002400 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005070:	1ad2      	subs	r2, r2, r3
 8005072:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005076:	429a      	cmp	r2, r3
 8005078:	d903      	bls.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005080:	e005      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005082:	4b54      	ldr	r3, [pc, #336]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0eb      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800508e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005092:	2b00      	cmp	r3, #0
 8005094:	d129      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800509a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800509e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050a6:	d10e      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80050a8:	4b4a      	ldr	r3, [pc, #296]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80050b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050b8:	091a      	lsrs	r2, r3, #4
 80050ba:	4b48      	ldr	r3, [pc, #288]	@ (80051dc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80050bc:	4013      	ands	r3, r2
 80050be:	4a45      	ldr	r2, [pc, #276]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6113      	str	r3, [r2, #16]
 80050c4:	e005      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80050c6:	4b43      	ldr	r3, [pc, #268]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	4a42      	ldr	r2, [pc, #264]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80050d0:	6113      	str	r3, [r2, #16]
 80050d2:	4b40      	ldr	r3, [pc, #256]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80050d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e2:	4a3c      	ldr	r2, [pc, #240]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80050e8:	e008      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80050f2:	e003      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f002 0301 	and.w	r3, r2, #1
 8005108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800510c:	2300      	movs	r3, #0
 800510e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005112:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005116:	460b      	mov	r3, r1
 8005118:	4313      	orrs	r3, r2
 800511a:	f000 808f 	beq.w	800523c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800511e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005122:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005124:	2b28      	cmp	r3, #40	@ 0x28
 8005126:	d871      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005128:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005215 	.word	0x08005215
 8005134:	0800520d 	.word	0x0800520d
 8005138:	0800520d 	.word	0x0800520d
 800513c:	0800520d 	.word	0x0800520d
 8005140:	0800520d 	.word	0x0800520d
 8005144:	0800520d 	.word	0x0800520d
 8005148:	0800520d 	.word	0x0800520d
 800514c:	0800520d 	.word	0x0800520d
 8005150:	080051e1 	.word	0x080051e1
 8005154:	0800520d 	.word	0x0800520d
 8005158:	0800520d 	.word	0x0800520d
 800515c:	0800520d 	.word	0x0800520d
 8005160:	0800520d 	.word	0x0800520d
 8005164:	0800520d 	.word	0x0800520d
 8005168:	0800520d 	.word	0x0800520d
 800516c:	0800520d 	.word	0x0800520d
 8005170:	080051f7 	.word	0x080051f7
 8005174:	0800520d 	.word	0x0800520d
 8005178:	0800520d 	.word	0x0800520d
 800517c:	0800520d 	.word	0x0800520d
 8005180:	0800520d 	.word	0x0800520d
 8005184:	0800520d 	.word	0x0800520d
 8005188:	0800520d 	.word	0x0800520d
 800518c:	0800520d 	.word	0x0800520d
 8005190:	08005215 	.word	0x08005215
 8005194:	0800520d 	.word	0x0800520d
 8005198:	0800520d 	.word	0x0800520d
 800519c:	0800520d 	.word	0x0800520d
 80051a0:	0800520d 	.word	0x0800520d
 80051a4:	0800520d 	.word	0x0800520d
 80051a8:	0800520d 	.word	0x0800520d
 80051ac:	0800520d 	.word	0x0800520d
 80051b0:	08005215 	.word	0x08005215
 80051b4:	0800520d 	.word	0x0800520d
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	0800520d 	.word	0x0800520d
 80051c0:	0800520d 	.word	0x0800520d
 80051c4:	0800520d 	.word	0x0800520d
 80051c8:	0800520d 	.word	0x0800520d
 80051cc:	0800520d 	.word	0x0800520d
 80051d0:	08005215 	.word	0x08005215
 80051d4:	58024400 	.word	0x58024400
 80051d8:	58024800 	.word	0x58024800
 80051dc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e4:	3308      	adds	r3, #8
 80051e6:	2101      	movs	r1, #1
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 ffa7 	bl	800613c <RCCEx_PLL2_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80051f4:	e00f      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051fa:	3328      	adds	r3, #40	@ 0x28
 80051fc:	2101      	movs	r1, #1
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 f84e 	bl	80062a0 <RCCEx_PLL3_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800520a:	e004      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005212:	e000      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005216:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800521e:	4bbf      	ldr	r3, [pc, #764]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800522a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800522c:	4abb      	ldr	r2, [pc, #748]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800522e:	430b      	orrs	r3, r1
 8005230:	6553      	str	r3, [r2, #84]	@ 0x54
 8005232:	e003      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005238:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f002 0302 	and.w	r3, r2, #2
 8005248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800524c:	2300      	movs	r3, #0
 800524e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005252:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	d041      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800525c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005262:	2b05      	cmp	r3, #5
 8005264:	d824      	bhi.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005266:	a201      	add	r2, pc, #4	@ (adr r2, 800526c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	080052b9 	.word	0x080052b9
 8005270:	08005285 	.word	0x08005285
 8005274:	0800529b 	.word	0x0800529b
 8005278:	080052b9 	.word	0x080052b9
 800527c:	080052b9 	.word	0x080052b9
 8005280:	080052b9 	.word	0x080052b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005288:	3308      	adds	r3, #8
 800528a:	2101      	movs	r1, #1
 800528c:	4618      	mov	r0, r3
 800528e:	f000 ff55 	bl	800613c <RCCEx_PLL2_Config>
 8005292:	4603      	mov	r3, r0
 8005294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005298:	e00f      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800529a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800529e:	3328      	adds	r3, #40	@ 0x28
 80052a0:	2101      	movs	r1, #1
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 fffc 	bl	80062a0 <RCCEx_PLL3_Config>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80052ae:	e004      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80052b6:	e000      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80052b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80052c2:	4b96      	ldr	r3, [pc, #600]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c6:	f023 0107 	bic.w	r1, r3, #7
 80052ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d0:	4a92      	ldr	r2, [pc, #584]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80052d2:	430b      	orrs	r3, r1
 80052d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80052d6:	e003      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f002 0304 	and.w	r3, r2, #4
 80052ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052f0:	2300      	movs	r3, #0
 80052f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052fa:	460b      	mov	r3, r1
 80052fc:	4313      	orrs	r3, r2
 80052fe:	d044      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005308:	2b05      	cmp	r3, #5
 800530a:	d825      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800530c:	a201      	add	r2, pc, #4	@ (adr r2, 8005314 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005361 	.word	0x08005361
 8005318:	0800532d 	.word	0x0800532d
 800531c:	08005343 	.word	0x08005343
 8005320:	08005361 	.word	0x08005361
 8005324:	08005361 	.word	0x08005361
 8005328:	08005361 	.word	0x08005361
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800532c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005330:	3308      	adds	r3, #8
 8005332:	2101      	movs	r1, #1
 8005334:	4618      	mov	r0, r3
 8005336:	f000 ff01 	bl	800613c <RCCEx_PLL2_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005340:	e00f      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005346:	3328      	adds	r3, #40	@ 0x28
 8005348:	2101      	movs	r1, #1
 800534a:	4618      	mov	r0, r3
 800534c:	f000 ffa8 	bl	80062a0 <RCCEx_PLL3_Config>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005356:	e004      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800535e:	e000      	b.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8005360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005362:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800536a:	4b6c      	ldr	r3, [pc, #432]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536e:	f023 0107 	bic.w	r1, r3, #7
 8005372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800537a:	4a68      	ldr	r2, [pc, #416]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800537c:	430b      	orrs	r3, r1
 800537e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005380:	e003      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005386:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800538a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f002 0320 	and.w	r3, r2, #32
 8005396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800539a:	2300      	movs	r3, #0
 800539c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4313      	orrs	r3, r2
 80053a8:	d055      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053b6:	d033      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80053b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053bc:	d82c      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c2:	d02f      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80053c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053c8:	d826      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053ce:	d02b      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80053d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80053d4:	d820      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053da:	d012      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80053dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e0:	d81a      	bhi.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d022      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80053e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ea:	d115      	bne.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f0:	3308      	adds	r3, #8
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fea1 	bl	800613c <RCCEx_PLL2_Config>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005400:	e015      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005406:	3328      	adds	r3, #40	@ 0x28
 8005408:	2102      	movs	r1, #2
 800540a:	4618      	mov	r0, r3
 800540c:	f000 ff48 	bl	80062a0 <RCCEx_PLL3_Config>
 8005410:	4603      	mov	r3, r0
 8005412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005416:	e00a      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800541e:	e006      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005420:	bf00      	nop
 8005422:	e004      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005424:	bf00      	nop
 8005426:	e002      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005428:	bf00      	nop
 800542a:	e000      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800542c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005436:	4b39      	ldr	r3, [pc, #228]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800543e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005442:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005446:	4a35      	ldr	r2, [pc, #212]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005448:	430b      	orrs	r3, r1
 800544a:	6553      	str	r3, [r2, #84]	@ 0x54
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005452:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005462:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800546c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005470:	460b      	mov	r3, r1
 8005472:	4313      	orrs	r3, r2
 8005474:	d058      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800547e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005482:	d033      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8005484:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005488:	d82c      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548e:	d02f      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8005490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005494:	d826      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005496:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800549a:	d02b      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800549c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80054a0:	d820      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80054a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a6:	d012      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80054a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054ac:	d81a      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d022      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80054b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054b6:	d115      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	3308      	adds	r3, #8
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fe3b 	bl	800613c <RCCEx_PLL2_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054cc:	e015      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054d2:	3328      	adds	r3, #40	@ 0x28
 80054d4:	2102      	movs	r1, #2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fee2 	bl	80062a0 <RCCEx_PLL3_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80054e2:	e00a      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80054ea:	e006      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054ec:	bf00      	nop
 80054ee:	e004      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054f0:	bf00      	nop
 80054f2:	e002      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054f4:	bf00      	nop
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80054f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10e      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005502:	4b06      	ldr	r3, [pc, #24]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005506:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800550a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800550e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005512:	4a02      	ldr	r2, [pc, #8]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005514:	430b      	orrs	r3, r1
 8005516:	6593      	str	r3, [r2, #88]	@ 0x58
 8005518:	e006      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800551a:	bf00      	nop
 800551c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005524:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005534:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005538:	2300      	movs	r3, #0
 800553a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800553e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005542:	460b      	mov	r3, r1
 8005544:	4313      	orrs	r3, r2
 8005546:	d055      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800554c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005550:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005554:	d033      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8005556:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800555a:	d82c      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800555c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005560:	d02f      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8005562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005566:	d826      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005568:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800556c:	d02b      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800556e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005572:	d820      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005574:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005578:	d012      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800557a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800557e:	d81a      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d022      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005588:	d115      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800558a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558e:	3308      	adds	r3, #8
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fdd2 	bl	800613c <RCCEx_PLL2_Config>
 8005598:	4603      	mov	r3, r0
 800559a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800559e:	e015      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a4:	3328      	adds	r3, #40	@ 0x28
 80055a6:	2102      	movs	r1, #2
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fe79 	bl	80062a0 <RCCEx_PLL3_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80055b4:	e00a      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80055bc:	e006      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80055be:	bf00      	nop
 80055c0:	e004      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80055c2:	bf00      	nop
 80055c4:	e002      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80055c6:	bf00      	nop
 80055c8:	e000      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80055ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80055d4:	4ba0      	ldr	r3, [pc, #640]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80055dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055e4:	4a9c      	ldr	r2, [pc, #624]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80055e6:	430b      	orrs	r3, r1
 80055e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80055ea:	e003      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f002 0308 	and.w	r3, r2, #8
 8005600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005604:	2300      	movs	r3, #0
 8005606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800560a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800560e:	460b      	mov	r3, r1
 8005610:	4313      	orrs	r3, r2
 8005612:	d01e      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005620:	d10c      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005626:	3328      	adds	r3, #40	@ 0x28
 8005628:	2102      	movs	r1, #2
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fe38 	bl	80062a0 <RCCEx_PLL3_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800563c:	4b86      	ldr	r3, [pc, #536]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800563e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005640:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800564c:	4a82      	ldr	r2, [pc, #520]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800564e:	430b      	orrs	r3, r1
 8005650:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f002 0310 	and.w	r3, r2, #16
 800565e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005662:	2300      	movs	r3, #0
 8005664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005668:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d01e      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800567a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800567e:	d10c      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005684:	3328      	adds	r3, #40	@ 0x28
 8005686:	2102      	movs	r1, #2
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fe09 	bl	80062a0 <RCCEx_PLL3_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800569a:	4b6f      	ldr	r3, [pc, #444]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800569c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056aa:	4a6b      	ldr	r2, [pc, #428]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056ac:	430b      	orrs	r3, r1
 80056ae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80056bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056be:	2300      	movs	r3, #0
 80056c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056c6:	460b      	mov	r3, r1
 80056c8:	4313      	orrs	r3, r2
 80056ca:	d03e      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80056cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056d8:	d022      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80056da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056de:	d81b      	bhi.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80056e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e8:	d00b      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80056ea:	e015      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f0:	3308      	adds	r3, #8
 80056f2:	2100      	movs	r1, #0
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fd21 	bl	800613c <RCCEx_PLL2_Config>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005700:	e00f      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005706:	3328      	adds	r3, #40	@ 0x28
 8005708:	2102      	movs	r1, #2
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fdc8 	bl	80062a0 <RCCEx_PLL3_Config>
 8005710:	4603      	mov	r3, r0
 8005712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005716:	e004      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800571e:	e000      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005722:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800572a:	4b4b      	ldr	r3, [pc, #300]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800572c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005736:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800573a:	4a47      	ldr	r2, [pc, #284]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800573c:	430b      	orrs	r3, r1
 800573e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005740:	e003      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005742:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005746:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800574a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005756:	673b      	str	r3, [r7, #112]	@ 0x70
 8005758:	2300      	movs	r3, #0
 800575a:	677b      	str	r3, [r7, #116]	@ 0x74
 800575c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005760:	460b      	mov	r3, r1
 8005762:	4313      	orrs	r3, r2
 8005764:	d03b      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800576e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005772:	d01f      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005774:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005778:	d818      	bhi.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800577a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800577e:	d003      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8005780:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005784:	d007      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005786:	e011      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005788:	4b33      	ldr	r3, [pc, #204]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	4a32      	ldr	r2, [pc, #200]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800578e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005794:	e00f      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579a:	3328      	adds	r3, #40	@ 0x28
 800579c:	2101      	movs	r1, #1
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fd7e 	bl	80062a0 <RCCEx_PLL3_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80057aa:	e004      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057b2:	e000      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80057b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10b      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057be:	4b26      	ldr	r3, [pc, #152]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057ce:	4a22      	ldr	r2, [pc, #136]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057d0:	430b      	orrs	r3, r1
 80057d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057ec:	2300      	movs	r3, #0
 80057ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057f0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057f4:	460b      	mov	r3, r1
 80057f6:	4313      	orrs	r3, r2
 80057f8:	d034      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80057fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005808:	d007      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800580a:	e011      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800580c:	4b12      	ldr	r3, [pc, #72]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	4a11      	ldr	r2, [pc, #68]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005818:	e00e      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800581a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581e:	3308      	adds	r3, #8
 8005820:	2102      	movs	r1, #2
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fc8a 	bl	800613c <RCCEx_PLL2_Config>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800582e:	e003      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10d      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005840:	4b05      	ldr	r3, [pc, #20]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005844:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800584e:	4a02      	ldr	r2, [pc, #8]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005850:	430b      	orrs	r3, r1
 8005852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005854:	e006      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8005856:	bf00      	nop
 8005858:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005870:	663b      	str	r3, [r7, #96]	@ 0x60
 8005872:	2300      	movs	r3, #0
 8005874:	667b      	str	r3, [r7, #100]	@ 0x64
 8005876:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800587a:	460b      	mov	r3, r1
 800587c:	4313      	orrs	r3, r2
 800587e:	d00c      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005884:	3328      	adds	r3, #40	@ 0x28
 8005886:	2102      	movs	r1, #2
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fd09 	bl	80062a0 <RCCEx_PLL3_Config>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80058a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058a8:	2300      	movs	r3, #0
 80058aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058ac:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80058b0:	460b      	mov	r3, r1
 80058b2:	4313      	orrs	r3, r2
 80058b4:	d036      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80058b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058c0:	d018      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80058c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058c6:	d811      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80058c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058cc:	d014      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80058ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058d2:	d80b      	bhi.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d011      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80058d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058dc:	d106      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058de:	4bb7      	ldr	r3, [pc, #732]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e2:	4ab6      	ldr	r2, [pc, #728]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80058e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80058ea:	e008      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058f2:	e004      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058f4:	bf00      	nop
 80058f6:	e002      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005906:	4bad      	ldr	r3, [pc, #692]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005912:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005914:	4aa9      	ldr	r2, [pc, #676]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005916:	430b      	orrs	r3, r1
 8005918:	6553      	str	r3, [r2, #84]	@ 0x54
 800591a:	e003      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005930:	653b      	str	r3, [r7, #80]	@ 0x50
 8005932:	2300      	movs	r3, #0
 8005934:	657b      	str	r3, [r7, #84]	@ 0x54
 8005936:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800593a:	460b      	mov	r3, r1
 800593c:	4313      	orrs	r3, r2
 800593e:	d009      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005940:	4b9e      	ldr	r3, [pc, #632]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005944:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	4a9b      	ldr	r2, [pc, #620]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005950:	430b      	orrs	r3, r1
 8005952:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005960:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005962:	2300      	movs	r3, #0
 8005964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005966:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800596a:	460b      	mov	r3, r1
 800596c:	4313      	orrs	r3, r2
 800596e:	d009      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005970:	4b92      	ldr	r3, [pc, #584]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005974:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800597e:	4a8f      	ldr	r2, [pc, #572]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005980:	430b      	orrs	r3, r1
 8005982:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005990:	643b      	str	r3, [r7, #64]	@ 0x40
 8005992:	2300      	movs	r3, #0
 8005994:	647b      	str	r3, [r7, #68]	@ 0x44
 8005996:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800599a:	460b      	mov	r3, r1
 800599c:	4313      	orrs	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059a0:	4b86      	ldr	r3, [pc, #536]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	4a85      	ldr	r2, [pc, #532]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80059aa:	6113      	str	r3, [r2, #16]
 80059ac:	4b83      	ldr	r3, [pc, #524]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ae:	6919      	ldr	r1, [r3, #16]
 80059b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80059b8:	4a80      	ldr	r2, [pc, #512]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ba:	430b      	orrs	r3, r1
 80059bc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80059be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80059ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059cc:	2300      	movs	r3, #0
 80059ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059d0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059d4:	460b      	mov	r3, r1
 80059d6:	4313      	orrs	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80059da:	4b78      	ldr	r3, [pc, #480]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059de:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e8:	4a74      	ldr	r2, [pc, #464]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059ea:	430b      	orrs	r3, r1
 80059ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80059fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80059fc:	2300      	movs	r3, #0
 80059fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a00:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a04:	460b      	mov	r3, r1
 8005a06:	4313      	orrs	r3, r2
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a0e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1a:	4a68      	ldr	r2, [pc, #416]	@ (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a28:	2100      	movs	r1, #0
 8005a2a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a32:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a36:	460b      	mov	r3, r1
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	d011      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a40:	3308      	adds	r3, #8
 8005a42:	2100      	movs	r1, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fb79 	bl	800613c <RCCEx_PLL2_Config>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	2100      	movs	r1, #0
 8005a6a:	6239      	str	r1, [r7, #32]
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a72:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a76:	460b      	mov	r3, r1
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	d011      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a80:	3308      	adds	r3, #8
 8005a82:	2101      	movs	r1, #1
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fb59 	bl	800613c <RCCEx_PLL2_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	61b9      	str	r1, [r7, #24]
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	d011      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ac0:	3308      	adds	r3, #8
 8005ac2:	2102      	movs	r1, #2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fb39 	bl	800613c <RCCEx_PLL2_Config>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	2100      	movs	r1, #0
 8005aea:	6139      	str	r1, [r7, #16]
 8005aec:	f003 0308 	and.w	r3, r3, #8
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005af6:	460b      	mov	r3, r1
 8005af8:	4313      	orrs	r3, r2
 8005afa:	d011      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b00:	3328      	adds	r3, #40	@ 0x28
 8005b02:	2100      	movs	r1, #0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fbcb 	bl	80062a0 <RCCEx_PLL3_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b36:	460b      	mov	r3, r1
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	d011      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	3328      	adds	r3, #40	@ 0x28
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 fbab 	bl	80062a0 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	2100      	movs	r1, #0
 8005b6a:	6039      	str	r1, [r7, #0]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b76:	460b      	mov	r3, r1
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	d011      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b80:	3328      	adds	r3, #40	@ 0x28
 8005b82:	2102      	movs	r1, #2
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fb8b 	bl	80062a0 <RCCEx_PLL3_Config>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005ba0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bba:	bf00      	nop
 8005bbc:	58024400 	.word	0x58024400

08005bc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bc4:	f7fe fdbe 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	4904      	ldr	r1, [pc, #16]	@ (8005be8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bd6:	5ccb      	ldrb	r3, [r1, r3]
 8005bd8:	f003 031f 	and.w	r3, r3, #31
 8005bdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	58024400 	.word	0x58024400
 8005be8:	08016998 	.word	0x08016998

08005bec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b089      	sub	sp, #36	@ 0x24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005bfe:	4b9f      	ldr	r3, [pc, #636]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	0b1b      	lsrs	r3, r3, #12
 8005c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	091b      	lsrs	r3, r3, #4
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c16:	4b99      	ldr	r3, [pc, #612]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	fb02 f303 	mul.w	r3, r2, r3
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 8111 	beq.w	8005e5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	f000 8083 	beq.w	8005d48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	f200 80a1 	bhi.w	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d056      	beq.n	8005d04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c56:	e099      	b.n	8005d8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c58:	4b88      	ldr	r3, [pc, #544]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0320 	and.w	r3, r3, #32
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d02d      	beq.n	8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c64:	4b85      	ldr	r3, [pc, #532]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	08db      	lsrs	r3, r3, #3
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	4a84      	ldr	r2, [pc, #528]	@ (8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c70:	fa22 f303 	lsr.w	r3, r2, r3
 8005c74:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	ee07 3a90 	vmov	s15, r3
 8005c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8e:	4b7b      	ldr	r3, [pc, #492]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c96:	ee07 3a90 	vmov	s15, r3
 8005c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cbe:	e087      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d02:	e065      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	ee07 3a90 	vmov	s15, r3
 8005d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d16:	4b59      	ldr	r3, [pc, #356]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d46:	e043      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	ee07 3a90 	vmov	s15, r3
 8005d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d5a:	4b48      	ldr	r3, [pc, #288]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d8a:	e021      	b.n	8005dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9e:	4b37      	ldr	r3, [pc, #220]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005db2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	0a5b      	lsrs	r3, r3, #9
 8005dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005df6:	ee17 2a90 	vmov	r2, s15
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e02:	0c1b      	lsrs	r3, r3, #16
 8005e04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e08:	ee07 3a90 	vmov	s15, r3
 8005e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e24:	ee17 2a90 	vmov	r2, s15
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e2c:	4b13      	ldr	r3, [pc, #76]	@ (8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	0e1b      	lsrs	r3, r3, #24
 8005e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e52:	ee17 2a90 	vmov	r2, s15
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e5a:	e008      	b.n	8005e6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	609a      	str	r2, [r3, #8]
}
 8005e6e:	bf00      	nop
 8005e70:	3724      	adds	r7, #36	@ 0x24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	03d09000 	.word	0x03d09000
 8005e84:	46000000 	.word	0x46000000
 8005e88:	4c742400 	.word	0x4c742400
 8005e8c:	4a742400 	.word	0x4a742400
 8005e90:	4af42400 	.word	0x4af42400

08005e94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b089      	sub	sp, #36	@ 0x24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e9c:	4ba1      	ldr	r3, [pc, #644]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ea6:	4b9f      	ldr	r3, [pc, #636]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eaa:	0d1b      	lsrs	r3, r3, #20
 8005eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005eb2:	4b9c      	ldr	r3, [pc, #624]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005ebe:	4b99      	ldr	r3, [pc, #612]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec2:	08db      	lsrs	r3, r3, #3
 8005ec4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	ee07 3a90 	vmov	s15, r3
 8005ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8111 	beq.w	8006104 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	f000 8083 	beq.w	8005ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	f200 80a1 	bhi.w	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d056      	beq.n	8005fac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005efe:	e099      	b.n	8006034 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f00:	4b88      	ldr	r3, [pc, #544]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d02d      	beq.n	8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f0c:	4b85      	ldr	r3, [pc, #532]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	08db      	lsrs	r3, r3, #3
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	4a84      	ldr	r2, [pc, #528]	@ (8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f36:	4b7b      	ldr	r3, [pc, #492]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005f66:	e087      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006130 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005faa:	e065      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fbe:	4b59      	ldr	r3, [pc, #356]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fee:	e043      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006002:	4b48      	ldr	r3, [pc, #288]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006012:	ed97 6a03 	vldr	s12, [r7, #12]
 8006016:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800601a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006032:	e021      	b.n	8006078 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006046:	4b37      	ldr	r3, [pc, #220]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006056:	ed97 6a03 	vldr	s12, [r7, #12]
 800605a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800612c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800605e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006066:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800606a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800606e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006076:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006078:	4b2a      	ldr	r3, [pc, #168]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	0a5b      	lsrs	r3, r3, #9
 800607e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800608e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006092:	edd7 6a07 	vldr	s13, [r7, #28]
 8006096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800609a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800609e:	ee17 2a90 	vmov	r2, s15
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80060a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	0c1b      	lsrs	r3, r3, #16
 80060ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060b0:	ee07 3a90 	vmov	s15, r3
 80060b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060cc:	ee17 2a90 	vmov	r2, s15
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80060d4:	4b13      	ldr	r3, [pc, #76]	@ (8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d8:	0e1b      	lsrs	r3, r3, #24
 80060da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fa:	ee17 2a90 	vmov	r2, s15
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006102:	e008      	b.n	8006116 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	609a      	str	r2, [r3, #8]
}
 8006116:	bf00      	nop
 8006118:	3724      	adds	r7, #36	@ 0x24
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
 8006128:	03d09000 	.word	0x03d09000
 800612c:	46000000 	.word	0x46000000
 8006130:	4c742400 	.word	0x4c742400
 8006134:	4a742400 	.word	0x4a742400
 8006138:	4af42400 	.word	0x4af42400

0800613c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800614a:	4b53      	ldr	r3, [pc, #332]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800614c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	2b03      	cmp	r3, #3
 8006154:	d101      	bne.n	800615a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e099      	b.n	800628e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800615a:	4b4f      	ldr	r3, [pc, #316]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a4e      	ldr	r2, [pc, #312]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006160:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006166:	f7fc f94b 	bl	8002400 <HAL_GetTick>
 800616a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800616c:	e008      	b.n	8006180 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800616e:	f7fc f947 	bl	8002400 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e086      	b.n	800628e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006180:	4b45      	ldr	r3, [pc, #276]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800618c:	4b42      	ldr	r3, [pc, #264]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	031b      	lsls	r3, r3, #12
 800619a:	493f      	ldr	r1, [pc, #252]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	628b      	str	r3, [r1, #40]	@ 0x28
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	025b      	lsls	r3, r3, #9
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80061d0:	4931      	ldr	r1, [pc, #196]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061d6:	4b30      	ldr	r3, [pc, #192]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	492d      	ldr	r1, [pc, #180]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	f023 0220 	bic.w	r2, r3, #32
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	4928      	ldr	r1, [pc, #160]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80061fa:	4b27      	ldr	r3, [pc, #156]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fe:	4a26      	ldr	r2, [pc, #152]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006200:	f023 0310 	bic.w	r3, r3, #16
 8006204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006206:	4b24      	ldr	r3, [pc, #144]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800620a:	4b24      	ldr	r3, [pc, #144]	@ (800629c <RCCEx_PLL2_Config+0x160>)
 800620c:	4013      	ands	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	69d2      	ldr	r2, [r2, #28]
 8006212:	00d2      	lsls	r2, r2, #3
 8006214:	4920      	ldr	r1, [pc, #128]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006216:	4313      	orrs	r3, r2
 8006218:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800621a:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800621c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800621e:	4a1e      	ldr	r2, [pc, #120]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006220:	f043 0310 	orr.w	r3, r3, #16
 8006224:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800622c:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	4a19      	ldr	r2, [pc, #100]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006238:	e00f      	b.n	800625a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d106      	bne.n	800624e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006240:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	4a14      	ldr	r2, [pc, #80]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006246:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800624a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800624c:	e005      	b.n	800625a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800624e:	4b12      	ldr	r3, [pc, #72]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	4a11      	ldr	r2, [pc, #68]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006254:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006258:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800625a:	4b0f      	ldr	r3, [pc, #60]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a0e      	ldr	r2, [pc, #56]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006260:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006266:	f7fc f8cb 	bl	8002400 <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800626c:	e008      	b.n	8006280 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800626e:	f7fc f8c7 	bl	8002400 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e006      	b.n	800628e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006280:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <RCCEx_PLL2_Config+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
 800629c:	ffff0007 	.word	0xffff0007

080062a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062ae:	4b53      	ldr	r3, [pc, #332]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d101      	bne.n	80062be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e099      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062be:	4b4f      	ldr	r3, [pc, #316]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a4e      	ldr	r2, [pc, #312]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ca:	f7fc f899 	bl	8002400 <HAL_GetTick>
 80062ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062d0:	e008      	b.n	80062e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062d2:	f7fc f895 	bl	8002400 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d901      	bls.n	80062e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e086      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062e4:	4b45      	ldr	r3, [pc, #276]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1f0      	bne.n	80062d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80062f0:	4b42      	ldr	r3, [pc, #264]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80062f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	051b      	lsls	r3, r3, #20
 80062fe:	493f      	ldr	r1, [pc, #252]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006300:	4313      	orrs	r3, r2
 8006302:	628b      	str	r3, [r1, #40]	@ 0x28
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	3b01      	subs	r3, #1
 800630a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	3b01      	subs	r3, #1
 8006314:	025b      	lsls	r3, r3, #9
 8006316:	b29b      	uxth	r3, r3
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	3b01      	subs	r3, #1
 8006320:	041b      	lsls	r3, r3, #16
 8006322:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	3b01      	subs	r3, #1
 800632e:	061b      	lsls	r3, r3, #24
 8006330:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006334:	4931      	ldr	r1, [pc, #196]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006336:	4313      	orrs	r3, r2
 8006338:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800633a:	4b30      	ldr	r3, [pc, #192]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800633c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	492d      	ldr	r1, [pc, #180]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006348:	4313      	orrs	r3, r2
 800634a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800634c:	4b2b      	ldr	r3, [pc, #172]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	4928      	ldr	r1, [pc, #160]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800635a:	4313      	orrs	r3, r2
 800635c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800635e:	4b27      	ldr	r3, [pc, #156]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	4a26      	ldr	r2, [pc, #152]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006368:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800636a:	4b24      	ldr	r3, [pc, #144]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800636c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800636e:	4b24      	ldr	r3, [pc, #144]	@ (8006400 <RCCEx_PLL3_Config+0x160>)
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	69d2      	ldr	r2, [r2, #28]
 8006376:	00d2      	lsls	r2, r2, #3
 8006378:	4920      	ldr	r1, [pc, #128]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800637e:	4b1f      	ldr	r3, [pc, #124]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006382:	4a1e      	ldr	r2, [pc, #120]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006388:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d106      	bne.n	800639e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006390:	4b1a      	ldr	r3, [pc, #104]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006394:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 8006396:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800639a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800639c:	e00f      	b.n	80063be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d106      	bne.n	80063b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063a4:	4b15      	ldr	r3, [pc, #84]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a8:	4a14      	ldr	r2, [pc, #80]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80063ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80063b0:	e005      	b.n	80063be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063b2:	4b12      	ldr	r3, [pc, #72]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	4a11      	ldr	r2, [pc, #68]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063be:	4b0f      	ldr	r3, [pc, #60]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a0e      	ldr	r2, [pc, #56]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ca:	f7fc f819 	bl	8002400 <HAL_GetTick>
 80063ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063d0:	e008      	b.n	80063e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063d2:	f7fc f815 	bl	8002400 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e006      	b.n	80063f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063e4:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <RCCEx_PLL3_Config+0x15c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	58024400 	.word	0x58024400
 8006400:	ffff0007 	.word	0xffff0007

08006404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e049      	b.n	80064aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fb fe86 	bl	800213c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f000 f9ec 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d001      	beq.n	80064cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e05e      	b.n	800658a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006598 <HAL_TIM_Base_Start_IT+0xe4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d02c      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f6:	d027      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a27      	ldr	r2, [pc, #156]	@ (800659c <HAL_TIM_Base_Start_IT+0xe8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d022      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a26      	ldr	r2, [pc, #152]	@ (80065a0 <HAL_TIM_Base_Start_IT+0xec>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d01d      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a24      	ldr	r2, [pc, #144]	@ (80065a4 <HAL_TIM_Base_Start_IT+0xf0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d018      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a23      	ldr	r2, [pc, #140]	@ (80065a8 <HAL_TIM_Base_Start_IT+0xf4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a21      	ldr	r2, [pc, #132]	@ (80065ac <HAL_TIM_Base_Start_IT+0xf8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00e      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a20      	ldr	r2, [pc, #128]	@ (80065b0 <HAL_TIM_Base_Start_IT+0xfc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d009      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1e      	ldr	r2, [pc, #120]	@ (80065b4 <HAL_TIM_Base_Start_IT+0x100>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x94>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a1d      	ldr	r2, [pc, #116]	@ (80065b8 <HAL_TIM_Base_Start_IT+0x104>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d115      	bne.n	8006574 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	4b1b      	ldr	r3, [pc, #108]	@ (80065bc <HAL_TIM_Base_Start_IT+0x108>)
 8006550:	4013      	ands	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b06      	cmp	r3, #6
 8006558:	d015      	beq.n	8006586 <HAL_TIM_Base_Start_IT+0xd2>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006560:	d011      	beq.n	8006586 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f042 0201 	orr.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006572:	e008      	b.n	8006586 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0201 	orr.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	e000      	b.n	8006588 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3714      	adds	r7, #20
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40010000 	.word	0x40010000
 800659c:	40000400 	.word	0x40000400
 80065a0:	40000800 	.word	0x40000800
 80065a4:	40000c00 	.word	0x40000c00
 80065a8:	40010400 	.word	0x40010400
 80065ac:	40001800 	.word	0x40001800
 80065b0:	40014000 	.word	0x40014000
 80065b4:	4000e000 	.word	0x4000e000
 80065b8:	4000e400 	.word	0x4000e400
 80065bc:	00010007 	.word	0x00010007

080065c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d020      	beq.n	8006624 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d01b      	beq.n	8006624 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0202 	mvn.w	r2, #2
 80065f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8e9 	bl	80067e2 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f8db 	bl	80067ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f8ec 	bl	80067f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	d020      	beq.n	8006670 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01b      	beq.n	8006670 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f06f 0204 	mvn.w	r2, #4
 8006640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8c3 	bl	80067e2 <HAL_TIM_IC_CaptureCallback>
 800665c:	e005      	b.n	800666a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f8b5 	bl	80067ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f8c6 	bl	80067f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f003 0308 	and.w	r3, r3, #8
 8006676:	2b00      	cmp	r3, #0
 8006678:	d020      	beq.n	80066bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01b      	beq.n	80066bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0208 	mvn.w	r2, #8
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2204      	movs	r2, #4
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f003 0303 	and.w	r3, r3, #3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f89d 	bl	80067e2 <HAL_TIM_IC_CaptureCallback>
 80066a8:	e005      	b.n	80066b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f88f 	bl	80067ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8a0 	bl	80067f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0310 	and.w	r3, r3, #16
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d020      	beq.n	8006708 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01b      	beq.n	8006708 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f06f 0210 	mvn.w	r2, #16
 80066d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2208      	movs	r2, #8
 80066de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f877 	bl	80067e2 <HAL_TIM_IC_CaptureCallback>
 80066f4:	e005      	b.n	8006702 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f869 	bl	80067ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f87a 	bl	80067f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0201 	mvn.w	r2, #1
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fb fafa 	bl	8001d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006732:	2b00      	cmp	r3, #0
 8006734:	d104      	bne.n	8006740 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006746:	2b00      	cmp	r3, #0
 8006748:	d007      	beq.n	800675a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f9b5 	bl	8006ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00c      	beq.n	800677e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f9ad 	bl	8006ad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800679a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f834 	bl	800680a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00c      	beq.n	80067c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f003 0320 	and.w	r3, r3, #32
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f06f 0220 	mvn.w	r2, #32
 80067be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f975 	bl	8006ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067c6:	bf00      	nop
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr

080067f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a47      	ldr	r2, [pc, #284]	@ (8006950 <TIM_Base_SetConfig+0x130>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d013      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683e:	d00f      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a44      	ldr	r2, [pc, #272]	@ (8006954 <TIM_Base_SetConfig+0x134>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00b      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a43      	ldr	r2, [pc, #268]	@ (8006958 <TIM_Base_SetConfig+0x138>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d007      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a42      	ldr	r2, [pc, #264]	@ (800695c <TIM_Base_SetConfig+0x13c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d003      	beq.n	8006860 <TIM_Base_SetConfig+0x40>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a41      	ldr	r2, [pc, #260]	@ (8006960 <TIM_Base_SetConfig+0x140>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d108      	bne.n	8006872 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a36      	ldr	r2, [pc, #216]	@ (8006950 <TIM_Base_SetConfig+0x130>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d027      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006880:	d023      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a33      	ldr	r2, [pc, #204]	@ (8006954 <TIM_Base_SetConfig+0x134>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01f      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a32      	ldr	r2, [pc, #200]	@ (8006958 <TIM_Base_SetConfig+0x138>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01b      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a31      	ldr	r2, [pc, #196]	@ (800695c <TIM_Base_SetConfig+0x13c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d017      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a30      	ldr	r2, [pc, #192]	@ (8006960 <TIM_Base_SetConfig+0x140>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006964 <TIM_Base_SetConfig+0x144>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00f      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006968 <TIM_Base_SetConfig+0x148>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a2d      	ldr	r2, [pc, #180]	@ (800696c <TIM_Base_SetConfig+0x14c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006970 <TIM_Base_SetConfig+0x150>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006974 <TIM_Base_SetConfig+0x154>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a14      	ldr	r2, [pc, #80]	@ (8006950 <TIM_Base_SetConfig+0x130>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d00f      	beq.n	8006922 <TIM_Base_SetConfig+0x102>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a16      	ldr	r2, [pc, #88]	@ (8006960 <TIM_Base_SetConfig+0x140>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00b      	beq.n	8006922 <TIM_Base_SetConfig+0x102>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a15      	ldr	r2, [pc, #84]	@ (8006964 <TIM_Base_SetConfig+0x144>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d007      	beq.n	8006922 <TIM_Base_SetConfig+0x102>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a14      	ldr	r2, [pc, #80]	@ (8006968 <TIM_Base_SetConfig+0x148>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d003      	beq.n	8006922 <TIM_Base_SetConfig+0x102>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a13      	ldr	r2, [pc, #76]	@ (800696c <TIM_Base_SetConfig+0x14c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d103      	bne.n	800692a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	691a      	ldr	r2, [r3, #16]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f043 0204 	orr.w	r2, r3, #4
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	601a      	str	r2, [r3, #0]
}
 8006942:	bf00      	nop
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	40010000 	.word	0x40010000
 8006954:	40000400 	.word	0x40000400
 8006958:	40000800 	.word	0x40000800
 800695c:	40000c00 	.word	0x40000c00
 8006960:	40010400 	.word	0x40010400
 8006964:	40014000 	.word	0x40014000
 8006968:	40014400 	.word	0x40014400
 800696c:	40014800 	.word	0x40014800
 8006970:	4000e000 	.word	0x4000e000
 8006974:	4000e400 	.word	0x4000e400

08006978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800698c:	2302      	movs	r3, #2
 800698e:	e077      	b.n	8006a80 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a35      	ldr	r2, [pc, #212]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a34      	ldr	r2, [pc, #208]	@ (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d108      	bne.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80069ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a25      	ldr	r2, [pc, #148]	@ (8006a8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d02c      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a02:	d027      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a22      	ldr	r2, [pc, #136]	@ (8006a94 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d022      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a21      	ldr	r2, [pc, #132]	@ (8006a98 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d01d      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d018      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a1a      	ldr	r2, [pc, #104]	@ (8006a90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d013      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00e      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d009      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a18      	ldr	r2, [pc, #96]	@ (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d004      	beq.n	8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a17      	ldr	r2, [pc, #92]	@ (8006aac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d10c      	bne.n	8006a6e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40010400 	.word	0x40010400
 8006a94:	40000400 	.word	0x40000400
 8006a98:	40000800 	.word	0x40000800
 8006a9c:	40000c00 	.word	0x40000c00
 8006aa0:	40001800 	.word	0x40001800
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	4000e000 	.word	0x4000e000
 8006aac:	4000e400 	.word	0x4000e400

08006ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e042      	b.n	8006b84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d106      	bne.n	8006b16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7fb fb87 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	@ 0x24
 8006b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f001 fbe0 	bl	80082fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fd71 	bl	8007624 <UART_SetConfig>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d101      	bne.n	8006b4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e01b      	b.n	8006b84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 fc5f 	bl	8008440 <UART_CheckIdleState>
 8006b82:	4603      	mov	r3, r0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	@ 0x28
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d17b      	bne.n	8006c9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <HAL_UART_Transmit+0x26>
 8006bac:	88fb      	ldrh	r3, [r7, #6]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e074      	b.n	8006ca0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2221      	movs	r2, #33	@ 0x21
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bc6:	f7fb fc1b 	bl	8002400 <HAL_GetTick>
 8006bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	88fa      	ldrh	r2, [r7, #6]
 8006bd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	88fa      	ldrh	r2, [r7, #6]
 8006bd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006be4:	d108      	bne.n	8006bf8 <HAL_UART_Transmit+0x6c>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d104      	bne.n	8006bf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e003      	b.n	8006c00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c00:	e030      	b.n	8006c64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2180      	movs	r1, #128	@ 0x80
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f001 fcc1 	bl	8008594 <UART_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e03d      	b.n	8006ca0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10b      	bne.n	8006c42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	3302      	adds	r3, #2
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	e007      	b.n	8006c52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	781a      	ldrb	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1c8      	bne.n	8006c02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	2200      	movs	r2, #0
 8006c78:	2140      	movs	r1, #64	@ 0x40
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f001 fc8a 	bl	8008594 <UART_WaitOnFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e006      	b.n	8006ca0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e000      	b.n	8006ca0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c9e:	2302      	movs	r3, #2
  }
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08a      	sub	sp, #40	@ 0x28
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	f040 80b5 	bne.w	8006e2e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_UART_Receive+0x28>
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0ad      	b.n	8006e30 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2222      	movs	r2, #34	@ 0x22
 8006ce0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cea:	f7fb fb89 	bl	8002400 <HAL_GetTick>
 8006cee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	88fa      	ldrh	r2, [r7, #6]
 8006cf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d08:	d10e      	bne.n	8006d28 <HAL_UART_Receive+0x80>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d105      	bne.n	8006d1e <HAL_UART_Receive+0x76>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d18:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d1c:	e02d      	b.n	8006d7a <HAL_UART_Receive+0xd2>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	22ff      	movs	r2, #255	@ 0xff
 8006d22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d26:	e028      	b.n	8006d7a <HAL_UART_Receive+0xd2>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10d      	bne.n	8006d4c <HAL_UART_Receive+0xa4>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <HAL_UART_Receive+0x9a>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	22ff      	movs	r2, #255	@ 0xff
 8006d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d40:	e01b      	b.n	8006d7a <HAL_UART_Receive+0xd2>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	227f      	movs	r2, #127	@ 0x7f
 8006d46:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d4a:	e016      	b.n	8006d7a <HAL_UART_Receive+0xd2>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d54:	d10d      	bne.n	8006d72 <HAL_UART_Receive+0xca>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d104      	bne.n	8006d68 <HAL_UART_Receive+0xc0>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	227f      	movs	r2, #127	@ 0x7f
 8006d62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d66:	e008      	b.n	8006d7a <HAL_UART_Receive+0xd2>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	223f      	movs	r2, #63	@ 0x3f
 8006d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d70:	e003      	b.n	8006d7a <HAL_UART_Receive+0xd2>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d80:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d8a:	d108      	bne.n	8006d9e <HAL_UART_Receive+0xf6>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d104      	bne.n	8006d9e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	61bb      	str	r3, [r7, #24]
 8006d9c:	e003      	b.n	8006da6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006da6:	e036      	b.n	8006e16 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2200      	movs	r2, #0
 8006db0:	2120      	movs	r1, #32
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f001 fbee 	bl	8008594 <UART_WaitOnFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e032      	b.n	8006e30 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10c      	bne.n	8006dea <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	8a7b      	ldrh	r3, [r7, #18]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	3302      	adds	r3, #2
 8006de6:	61bb      	str	r3, [r7, #24]
 8006de8:	e00c      	b.n	8006e04 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	8a7b      	ldrh	r3, [r7, #18]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	4013      	ands	r3, r2
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	3301      	adds	r3, #1
 8006e02:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1c2      	bne.n	8006da8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	e000      	b.n	8006e30 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006e2e:	2302      	movs	r3, #2
  }
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b0ba      	sub	sp, #232	@ 0xe8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e62:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e66:	4013      	ands	r3, r2
 8006e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d11b      	bne.n	8006eac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e78:	f003 0320 	and.w	r3, r3, #32
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d015      	beq.n	8006eac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d105      	bne.n	8006e98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d009      	beq.n	8006eac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8393 	beq.w	80075c8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
      }
      return;
 8006eaa:	e38d      	b.n	80075c8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 8123 	beq.w	80070fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006eb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006eba:	4b8d      	ldr	r3, [pc, #564]	@ (80070f0 <HAL_UART_IRQHandler+0x2b8>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ec6:	4b8b      	ldr	r3, [pc, #556]	@ (80070f4 <HAL_UART_IRQHandler+0x2bc>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8116 	beq.w	80070fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d011      	beq.n	8006f00 <HAL_UART_IRQHandler+0xc8>
 8006edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2201      	movs	r2, #1
 8006eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ef6:	f043 0201 	orr.w	r2, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d011      	beq.n	8006f30 <HAL_UART_IRQHandler+0xf8>
 8006f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00b      	beq.n	8006f30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f26:	f043 0204 	orr.w	r2, r3, #4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d011      	beq.n	8006f60 <HAL_UART_IRQHandler+0x128>
 8006f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f56:	f043 0202 	orr.w	r2, r3, #2
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d017      	beq.n	8006f9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80070f0 <HAL_UART_IRQHandler+0x2b8>)
 8006f7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2208      	movs	r2, #8
 8006f8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f92:	f043 0208 	orr.w	r2, r3, #8
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <HAL_UART_IRQHandler+0x196>
 8006fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc4:	f043 0220 	orr.w	r2, r3, #32
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 82f9 	beq.w	80075cc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fde:	f003 0320 	and.w	r3, r3, #32
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d013      	beq.n	800700e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fea:	f003 0320 	and.w	r3, r3, #32
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d105      	bne.n	8006ffe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007002:	2b00      	cmp	r3, #0
 8007004:	d003      	beq.n	800700e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007022:	2b40      	cmp	r3, #64	@ 0x40
 8007024:	d005      	beq.n	8007032 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800702a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800702e:	2b00      	cmp	r3, #0
 8007030:	d054      	beq.n	80070dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 fb1c 	bl	8008670 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007042:	2b40      	cmp	r3, #64	@ 0x40
 8007044:	d146      	bne.n	80070d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800705c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3308      	adds	r3, #8
 800706e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007072:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800707e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800708a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1d9      	bne.n	8007046 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007098:	2b00      	cmp	r3, #0
 800709a:	d017      	beq.n	80070cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070a2:	4a15      	ldr	r2, [pc, #84]	@ (80070f8 <HAL_UART_IRQHandler+0x2c0>)
 80070a4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fb fe29 	bl	8002d04 <HAL_DMA_Abort_IT>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d019      	beq.n	80070ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80070c6:	4610      	mov	r0, r2
 80070c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ca:	e00f      	b.n	80070ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fa93 	bl	80075f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d2:	e00b      	b.n	80070ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fa8f 	bl	80075f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070da:	e007      	b.n	80070ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fa8b 	bl	80075f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80070ea:	e26f      	b.n	80075cc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ec:	bf00      	nop
    return;
 80070ee:	e26d      	b.n	80075cc <HAL_UART_IRQHandler+0x794>
 80070f0:	10000001 	.word	0x10000001
 80070f4:	04000120 	.word	0x04000120
 80070f8:	0800873d 	.word	0x0800873d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007100:	2b01      	cmp	r3, #1
 8007102:	f040 8203 	bne.w	800750c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800710a:	f003 0310 	and.w	r3, r3, #16
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 81fc 	beq.w	800750c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007118:	f003 0310 	and.w	r3, r3, #16
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 81f5 	beq.w	800750c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2210      	movs	r2, #16
 8007128:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007134:	2b40      	cmp	r3, #64	@ 0x40
 8007136:	f040 816d 	bne.w	8007414 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4aa4      	ldr	r2, [pc, #656]	@ (80073d4 <HAL_UART_IRQHandler+0x59c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d068      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4aa1      	ldr	r2, [pc, #644]	@ (80073d8 <HAL_UART_IRQHandler+0x5a0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d061      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a9f      	ldr	r2, [pc, #636]	@ (80073dc <HAL_UART_IRQHandler+0x5a4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d05a      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a9c      	ldr	r2, [pc, #624]	@ (80073e0 <HAL_UART_IRQHandler+0x5a8>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d053      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a9a      	ldr	r2, [pc, #616]	@ (80073e4 <HAL_UART_IRQHandler+0x5ac>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d04c      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a97      	ldr	r2, [pc, #604]	@ (80073e8 <HAL_UART_IRQHandler+0x5b0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d045      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a95      	ldr	r2, [pc, #596]	@ (80073ec <HAL_UART_IRQHandler+0x5b4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d03e      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a92      	ldr	r2, [pc, #584]	@ (80073f0 <HAL_UART_IRQHandler+0x5b8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d037      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a90      	ldr	r2, [pc, #576]	@ (80073f4 <HAL_UART_IRQHandler+0x5bc>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d030      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a8d      	ldr	r2, [pc, #564]	@ (80073f8 <HAL_UART_IRQHandler+0x5c0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d029      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a8b      	ldr	r2, [pc, #556]	@ (80073fc <HAL_UART_IRQHandler+0x5c4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d022      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a88      	ldr	r2, [pc, #544]	@ (8007400 <HAL_UART_IRQHandler+0x5c8>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01b      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a86      	ldr	r2, [pc, #536]	@ (8007404 <HAL_UART_IRQHandler+0x5cc>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d014      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a83      	ldr	r2, [pc, #524]	@ (8007408 <HAL_UART_IRQHandler+0x5d0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00d      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a81      	ldr	r2, [pc, #516]	@ (800740c <HAL_UART_IRQHandler+0x5d4>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d006      	beq.n	800721a <HAL_UART_IRQHandler+0x3e2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a7e      	ldr	r2, [pc, #504]	@ (8007410 <HAL_UART_IRQHandler+0x5d8>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d106      	bne.n	8007228 <HAL_UART_IRQHandler+0x3f0>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	b29b      	uxth	r3, r3
 8007226:	e005      	b.n	8007234 <HAL_UART_IRQHandler+0x3fc>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	b29b      	uxth	r3, r3
 8007234:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80ad 	beq.w	800739c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007248:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800724c:	429a      	cmp	r2, r3
 800724e:	f080 80a5 	bcs.w	800739c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007258:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007268:	f000 8087 	beq.w	800737a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007296:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800729a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80072a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80072ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1da      	bne.n	800726c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072c8:	f023 0301 	bic.w	r3, r3, #1
 80072cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80072de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e1      	bne.n	80072b6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3308      	adds	r3, #8
 8007312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007316:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007318:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800731c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e3      	bne.n	80072f2 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007348:	f023 0310 	bic.w	r3, r3, #16
 800734c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800735a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800735c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007360:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007368:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e4      	bne.n	8007338 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007374:	4618      	mov	r0, r3
 8007376:	f7fb f9a7 	bl	80026c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800738c:	b29b      	uxth	r3, r3
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	b29b      	uxth	r3, r3
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f939 	bl	800760c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800739a:	e119      	b.n	80075d0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073a6:	429a      	cmp	r2, r3
 80073a8:	f040 8112 	bne.w	80075d0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b8:	f040 810a 	bne.w	80075d0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f91e 	bl	800760c <HAL_UARTEx_RxEventCallback>
      return;
 80073d0:	e0fe      	b.n	80075d0 <HAL_UART_IRQHandler+0x798>
 80073d2:	bf00      	nop
 80073d4:	40020010 	.word	0x40020010
 80073d8:	40020028 	.word	0x40020028
 80073dc:	40020040 	.word	0x40020040
 80073e0:	40020058 	.word	0x40020058
 80073e4:	40020070 	.word	0x40020070
 80073e8:	40020088 	.word	0x40020088
 80073ec:	400200a0 	.word	0x400200a0
 80073f0:	400200b8 	.word	0x400200b8
 80073f4:	40020410 	.word	0x40020410
 80073f8:	40020428 	.word	0x40020428
 80073fc:	40020440 	.word	0x40020440
 8007400:	40020458 	.word	0x40020458
 8007404:	40020470 	.word	0x40020470
 8007408:	40020488 	.word	0x40020488
 800740c:	400204a0 	.word	0x400204a0
 8007410:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007420:	b29b      	uxth	r3, r3
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800742e:	b29b      	uxth	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80cf 	beq.w	80075d4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007436:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 80ca 	beq.w	80075d4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800744e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007454:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007462:	647b      	str	r3, [r7, #68]	@ 0x44
 8007464:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007468:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e4      	bne.n	8007440 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3308      	adds	r3, #8
 800747c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	e853 3f00 	ldrex	r3, [r3]
 8007484:	623b      	str	r3, [r7, #32]
   return(result);
 8007486:	6a3a      	ldr	r2, [r7, #32]
 8007488:	4b55      	ldr	r3, [pc, #340]	@ (80075e0 <HAL_UART_IRQHandler+0x7a8>)
 800748a:	4013      	ands	r3, r2
 800748c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3308      	adds	r3, #8
 8007496:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800749a:	633a      	str	r2, [r7, #48]	@ 0x30
 800749c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a2:	e841 2300 	strex	r3, r2, [r1]
 80074a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e3      	bne.n	8007476 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0310 	bic.w	r3, r3, #16
 80074d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	69b9      	ldr	r1, [r7, #24]
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	617b      	str	r3, [r7, #20]
   return(result);
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e4      	bne.n	80074c2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f881 	bl	800760c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800750a:	e063      	b.n	80075d4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800750c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00e      	beq.n	8007536 <HAL_UART_IRQHandler+0x6fe>
 8007518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800751c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d008      	beq.n	8007536 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800752c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 f941 	bl	80087b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007534:	e051      	b.n	80075da <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800753a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753e:	2b00      	cmp	r3, #0
 8007540:	d014      	beq.n	800756c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754a:	2b00      	cmp	r3, #0
 800754c:	d105      	bne.n	800755a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800754e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d008      	beq.n	800756c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800755e:	2b00      	cmp	r3, #0
 8007560:	d03a      	beq.n	80075d8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
    }
    return;
 800756a:	e035      	b.n	80075d8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <HAL_UART_IRQHandler+0x754>
 8007578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800757c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d003      	beq.n	800758c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 f8eb 	bl	8008760 <UART_EndTransmit_IT>
    return;
 800758a:	e026      	b.n	80075da <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800758c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007590:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d009      	beq.n	80075ac <HAL_UART_IRQHandler+0x774>
 8007598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800759c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 f91a 	bl	80087de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075aa:	e016      	b.n	80075da <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80075ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d010      	beq.n	80075da <HAL_UART_IRQHandler+0x7a2>
 80075b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	da0c      	bge.n	80075da <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f001 f902 	bl	80087ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075c6:	e008      	b.n	80075da <HAL_UART_IRQHandler+0x7a2>
      return;
 80075c8:	bf00      	nop
 80075ca:	e006      	b.n	80075da <HAL_UART_IRQHandler+0x7a2>
    return;
 80075cc:	bf00      	nop
 80075ce:	e004      	b.n	80075da <HAL_UART_IRQHandler+0x7a2>
      return;
 80075d0:	bf00      	nop
 80075d2:	e002      	b.n	80075da <HAL_UART_IRQHandler+0x7a2>
      return;
 80075d4:	bf00      	nop
 80075d6:	e000      	b.n	80075da <HAL_UART_IRQHandler+0x7a2>
    return;
 80075d8:	bf00      	nop
  }
}
 80075da:	37e8      	adds	r7, #232	@ 0xe8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	effffffe 	.word	0xeffffffe

080075e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007628:	b092      	sub	sp, #72	@ 0x48
 800762a:	af00      	add	r7, sp, #0
 800762c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	431a      	orrs	r2, r3
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	431a      	orrs	r2, r3
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	4313      	orrs	r3, r2
 800764a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4bbe      	ldr	r3, [pc, #760]	@ (800794c <UART_SetConfig+0x328>)
 8007654:	4013      	ands	r3, r2
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800765c:	430b      	orrs	r3, r1
 800765e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4ab3      	ldr	r2, [pc, #716]	@ (8007950 <UART_SetConfig+0x32c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d004      	beq.n	8007690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800768c:	4313      	orrs	r3, r2
 800768e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689a      	ldr	r2, [r3, #8]
 8007696:	4baf      	ldr	r3, [pc, #700]	@ (8007954 <UART_SetConfig+0x330>)
 8007698:	4013      	ands	r3, r2
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	f023 010f 	bic.w	r1, r3, #15
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4aa6      	ldr	r2, [pc, #664]	@ (8007958 <UART_SetConfig+0x334>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d177      	bne.n	80077b4 <UART_SetConfig+0x190>
 80076c4:	4ba5      	ldr	r3, [pc, #660]	@ (800795c <UART_SetConfig+0x338>)
 80076c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076cc:	2b28      	cmp	r3, #40	@ 0x28
 80076ce:	d86d      	bhi.n	80077ac <UART_SetConfig+0x188>
 80076d0:	a201      	add	r2, pc, #4	@ (adr r2, 80076d8 <UART_SetConfig+0xb4>)
 80076d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d6:	bf00      	nop
 80076d8:	0800777d 	.word	0x0800777d
 80076dc:	080077ad 	.word	0x080077ad
 80076e0:	080077ad 	.word	0x080077ad
 80076e4:	080077ad 	.word	0x080077ad
 80076e8:	080077ad 	.word	0x080077ad
 80076ec:	080077ad 	.word	0x080077ad
 80076f0:	080077ad 	.word	0x080077ad
 80076f4:	080077ad 	.word	0x080077ad
 80076f8:	08007785 	.word	0x08007785
 80076fc:	080077ad 	.word	0x080077ad
 8007700:	080077ad 	.word	0x080077ad
 8007704:	080077ad 	.word	0x080077ad
 8007708:	080077ad 	.word	0x080077ad
 800770c:	080077ad 	.word	0x080077ad
 8007710:	080077ad 	.word	0x080077ad
 8007714:	080077ad 	.word	0x080077ad
 8007718:	0800778d 	.word	0x0800778d
 800771c:	080077ad 	.word	0x080077ad
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077ad 	.word	0x080077ad
 8007728:	080077ad 	.word	0x080077ad
 800772c:	080077ad 	.word	0x080077ad
 8007730:	080077ad 	.word	0x080077ad
 8007734:	080077ad 	.word	0x080077ad
 8007738:	08007795 	.word	0x08007795
 800773c:	080077ad 	.word	0x080077ad
 8007740:	080077ad 	.word	0x080077ad
 8007744:	080077ad 	.word	0x080077ad
 8007748:	080077ad 	.word	0x080077ad
 800774c:	080077ad 	.word	0x080077ad
 8007750:	080077ad 	.word	0x080077ad
 8007754:	080077ad 	.word	0x080077ad
 8007758:	0800779d 	.word	0x0800779d
 800775c:	080077ad 	.word	0x080077ad
 8007760:	080077ad 	.word	0x080077ad
 8007764:	080077ad 	.word	0x080077ad
 8007768:	080077ad 	.word	0x080077ad
 800776c:	080077ad 	.word	0x080077ad
 8007770:	080077ad 	.word	0x080077ad
 8007774:	080077ad 	.word	0x080077ad
 8007778:	080077a5 	.word	0x080077a5
 800777c:	2301      	movs	r3, #1
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e326      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e322      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e31e      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e31a      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 800779c:	2320      	movs	r3, #32
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e316      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80077a4:	2340      	movs	r3, #64	@ 0x40
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e312      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80077ac:	2380      	movs	r3, #128	@ 0x80
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b2:	e30e      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a69      	ldr	r2, [pc, #420]	@ (8007960 <UART_SetConfig+0x33c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d130      	bne.n	8007820 <UART_SetConfig+0x1fc>
 80077be:	4b67      	ldr	r3, [pc, #412]	@ (800795c <UART_SetConfig+0x338>)
 80077c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d826      	bhi.n	8007818 <UART_SetConfig+0x1f4>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0x1ac>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077e9 	.word	0x080077e9
 80077d4:	080077f1 	.word	0x080077f1
 80077d8:	080077f9 	.word	0x080077f9
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007809 	.word	0x08007809
 80077e4:	08007811 	.word	0x08007811
 80077e8:	2300      	movs	r3, #0
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e2f0      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e2ec      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e2e8      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e2e4      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007808:	2320      	movs	r3, #32
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e2e0      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007810:	2340      	movs	r3, #64	@ 0x40
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e2dc      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007818:	2380      	movs	r3, #128	@ 0x80
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e2d8      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a4f      	ldr	r2, [pc, #316]	@ (8007964 <UART_SetConfig+0x340>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d130      	bne.n	800788c <UART_SetConfig+0x268>
 800782a:	4b4c      	ldr	r3, [pc, #304]	@ (800795c <UART_SetConfig+0x338>)
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b05      	cmp	r3, #5
 8007834:	d826      	bhi.n	8007884 <UART_SetConfig+0x260>
 8007836:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <UART_SetConfig+0x218>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007855 	.word	0x08007855
 8007840:	0800785d 	.word	0x0800785d
 8007844:	08007865 	.word	0x08007865
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007875 	.word	0x08007875
 8007850:	0800787d 	.word	0x0800787d
 8007854:	2300      	movs	r3, #0
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e2ba      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e2b6      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e2b2      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e2ae      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007874:	2320      	movs	r3, #32
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e2aa      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 800787c:	2340      	movs	r3, #64	@ 0x40
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e2a6      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007884:	2380      	movs	r3, #128	@ 0x80
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e2a2      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a35      	ldr	r2, [pc, #212]	@ (8007968 <UART_SetConfig+0x344>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d130      	bne.n	80078f8 <UART_SetConfig+0x2d4>
 8007896:	4b31      	ldr	r3, [pc, #196]	@ (800795c <UART_SetConfig+0x338>)
 8007898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b05      	cmp	r3, #5
 80078a0:	d826      	bhi.n	80078f0 <UART_SetConfig+0x2cc>
 80078a2:	a201      	add	r2, pc, #4	@ (adr r2, 80078a8 <UART_SetConfig+0x284>)
 80078a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a8:	080078c1 	.word	0x080078c1
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078d1 	.word	0x080078d1
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078e1 	.word	0x080078e1
 80078bc:	080078e9 	.word	0x080078e9
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c6:	e284      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80078c8:	2304      	movs	r3, #4
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ce:	e280      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80078d0:	2308      	movs	r3, #8
 80078d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d6:	e27c      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80078d8:	2310      	movs	r3, #16
 80078da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078de:	e278      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80078e0:	2320      	movs	r3, #32
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e274      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80078e8:	2340      	movs	r3, #64	@ 0x40
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e270      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80078f0:	2380      	movs	r3, #128	@ 0x80
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e26c      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1b      	ldr	r2, [pc, #108]	@ (800796c <UART_SetConfig+0x348>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d142      	bne.n	8007988 <UART_SetConfig+0x364>
 8007902:	4b16      	ldr	r3, [pc, #88]	@ (800795c <UART_SetConfig+0x338>)
 8007904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	2b05      	cmp	r3, #5
 800790c:	d838      	bhi.n	8007980 <UART_SetConfig+0x35c>
 800790e:	a201      	add	r2, pc, #4	@ (adr r2, 8007914 <UART_SetConfig+0x2f0>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	0800792d 	.word	0x0800792d
 8007918:	08007935 	.word	0x08007935
 800791c:	0800793d 	.word	0x0800793d
 8007920:	08007945 	.word	0x08007945
 8007924:	08007971 	.word	0x08007971
 8007928:	08007979 	.word	0x08007979
 800792c:	2300      	movs	r3, #0
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e24e      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007934:	2304      	movs	r3, #4
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793a:	e24a      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 800793c:	2308      	movs	r3, #8
 800793e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007942:	e246      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794a:	e242      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 800794c:	cfff69f3 	.word	0xcfff69f3
 8007950:	58000c00 	.word	0x58000c00
 8007954:	11fff4ff 	.word	0x11fff4ff
 8007958:	40011000 	.word	0x40011000
 800795c:	58024400 	.word	0x58024400
 8007960:	40004400 	.word	0x40004400
 8007964:	40004800 	.word	0x40004800
 8007968:	40004c00 	.word	0x40004c00
 800796c:	40005000 	.word	0x40005000
 8007970:	2320      	movs	r3, #32
 8007972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007976:	e22c      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007978:	2340      	movs	r3, #64	@ 0x40
 800797a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797e:	e228      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007980:	2380      	movs	r3, #128	@ 0x80
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007986:	e224      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4ab1      	ldr	r2, [pc, #708]	@ (8007c54 <UART_SetConfig+0x630>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d176      	bne.n	8007a80 <UART_SetConfig+0x45c>
 8007992:	4bb1      	ldr	r3, [pc, #708]	@ (8007c58 <UART_SetConfig+0x634>)
 8007994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007996:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800799a:	2b28      	cmp	r3, #40	@ 0x28
 800799c:	d86c      	bhi.n	8007a78 <UART_SetConfig+0x454>
 800799e:	a201      	add	r2, pc, #4	@ (adr r2, 80079a4 <UART_SetConfig+0x380>)
 80079a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a4:	08007a49 	.word	0x08007a49
 80079a8:	08007a79 	.word	0x08007a79
 80079ac:	08007a79 	.word	0x08007a79
 80079b0:	08007a79 	.word	0x08007a79
 80079b4:	08007a79 	.word	0x08007a79
 80079b8:	08007a79 	.word	0x08007a79
 80079bc:	08007a79 	.word	0x08007a79
 80079c0:	08007a79 	.word	0x08007a79
 80079c4:	08007a51 	.word	0x08007a51
 80079c8:	08007a79 	.word	0x08007a79
 80079cc:	08007a79 	.word	0x08007a79
 80079d0:	08007a79 	.word	0x08007a79
 80079d4:	08007a79 	.word	0x08007a79
 80079d8:	08007a79 	.word	0x08007a79
 80079dc:	08007a79 	.word	0x08007a79
 80079e0:	08007a79 	.word	0x08007a79
 80079e4:	08007a59 	.word	0x08007a59
 80079e8:	08007a79 	.word	0x08007a79
 80079ec:	08007a79 	.word	0x08007a79
 80079f0:	08007a79 	.word	0x08007a79
 80079f4:	08007a79 	.word	0x08007a79
 80079f8:	08007a79 	.word	0x08007a79
 80079fc:	08007a79 	.word	0x08007a79
 8007a00:	08007a79 	.word	0x08007a79
 8007a04:	08007a61 	.word	0x08007a61
 8007a08:	08007a79 	.word	0x08007a79
 8007a0c:	08007a79 	.word	0x08007a79
 8007a10:	08007a79 	.word	0x08007a79
 8007a14:	08007a79 	.word	0x08007a79
 8007a18:	08007a79 	.word	0x08007a79
 8007a1c:	08007a79 	.word	0x08007a79
 8007a20:	08007a79 	.word	0x08007a79
 8007a24:	08007a69 	.word	0x08007a69
 8007a28:	08007a79 	.word	0x08007a79
 8007a2c:	08007a79 	.word	0x08007a79
 8007a30:	08007a79 	.word	0x08007a79
 8007a34:	08007a79 	.word	0x08007a79
 8007a38:	08007a79 	.word	0x08007a79
 8007a3c:	08007a79 	.word	0x08007a79
 8007a40:	08007a79 	.word	0x08007a79
 8007a44:	08007a71 	.word	0x08007a71
 8007a48:	2301      	movs	r3, #1
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e1c0      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007a50:	2304      	movs	r3, #4
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a56:	e1bc      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007a58:	2308      	movs	r3, #8
 8007a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a5e:	e1b8      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007a60:	2310      	movs	r3, #16
 8007a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a66:	e1b4      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007a68:	2320      	movs	r3, #32
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6e:	e1b0      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007a70:	2340      	movs	r3, #64	@ 0x40
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a76:	e1ac      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007a78:	2380      	movs	r3, #128	@ 0x80
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7e:	e1a8      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a75      	ldr	r2, [pc, #468]	@ (8007c5c <UART_SetConfig+0x638>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d130      	bne.n	8007aec <UART_SetConfig+0x4c8>
 8007a8a:	4b73      	ldr	r3, [pc, #460]	@ (8007c58 <UART_SetConfig+0x634>)
 8007a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	2b05      	cmp	r3, #5
 8007a94:	d826      	bhi.n	8007ae4 <UART_SetConfig+0x4c0>
 8007a96:	a201      	add	r2, pc, #4	@ (adr r2, 8007a9c <UART_SetConfig+0x478>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007ab5 	.word	0x08007ab5
 8007aa0:	08007abd 	.word	0x08007abd
 8007aa4:	08007ac5 	.word	0x08007ac5
 8007aa8:	08007acd 	.word	0x08007acd
 8007aac:	08007ad5 	.word	0x08007ad5
 8007ab0:	08007add 	.word	0x08007add
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aba:	e18a      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007abc:	2304      	movs	r3, #4
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac2:	e186      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007ac4:	2308      	movs	r3, #8
 8007ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aca:	e182      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007acc:	2310      	movs	r3, #16
 8007ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad2:	e17e      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007ad4:	2320      	movs	r3, #32
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ada:	e17a      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007adc:	2340      	movs	r3, #64	@ 0x40
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae2:	e176      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007ae4:	2380      	movs	r3, #128	@ 0x80
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aea:	e172      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a5b      	ldr	r2, [pc, #364]	@ (8007c60 <UART_SetConfig+0x63c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d130      	bne.n	8007b58 <UART_SetConfig+0x534>
 8007af6:	4b58      	ldr	r3, [pc, #352]	@ (8007c58 <UART_SetConfig+0x634>)
 8007af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	2b05      	cmp	r3, #5
 8007b00:	d826      	bhi.n	8007b50 <UART_SetConfig+0x52c>
 8007b02:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <UART_SetConfig+0x4e4>)
 8007b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b08:	08007b21 	.word	0x08007b21
 8007b0c:	08007b29 	.word	0x08007b29
 8007b10:	08007b31 	.word	0x08007b31
 8007b14:	08007b39 	.word	0x08007b39
 8007b18:	08007b41 	.word	0x08007b41
 8007b1c:	08007b49 	.word	0x08007b49
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e154      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2e:	e150      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007b30:	2308      	movs	r3, #8
 8007b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b36:	e14c      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007b38:	2310      	movs	r3, #16
 8007b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3e:	e148      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007b40:	2320      	movs	r3, #32
 8007b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b46:	e144      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007b48:	2340      	movs	r3, #64	@ 0x40
 8007b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4e:	e140      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007b50:	2380      	movs	r3, #128	@ 0x80
 8007b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b56:	e13c      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a41      	ldr	r2, [pc, #260]	@ (8007c64 <UART_SetConfig+0x640>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	f040 8082 	bne.w	8007c68 <UART_SetConfig+0x644>
 8007b64:	4b3c      	ldr	r3, [pc, #240]	@ (8007c58 <UART_SetConfig+0x634>)
 8007b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b6c:	2b28      	cmp	r3, #40	@ 0x28
 8007b6e:	d86d      	bhi.n	8007c4c <UART_SetConfig+0x628>
 8007b70:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <UART_SetConfig+0x554>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007c1d 	.word	0x08007c1d
 8007b7c:	08007c4d 	.word	0x08007c4d
 8007b80:	08007c4d 	.word	0x08007c4d
 8007b84:	08007c4d 	.word	0x08007c4d
 8007b88:	08007c4d 	.word	0x08007c4d
 8007b8c:	08007c4d 	.word	0x08007c4d
 8007b90:	08007c4d 	.word	0x08007c4d
 8007b94:	08007c4d 	.word	0x08007c4d
 8007b98:	08007c25 	.word	0x08007c25
 8007b9c:	08007c4d 	.word	0x08007c4d
 8007ba0:	08007c4d 	.word	0x08007c4d
 8007ba4:	08007c4d 	.word	0x08007c4d
 8007ba8:	08007c4d 	.word	0x08007c4d
 8007bac:	08007c4d 	.word	0x08007c4d
 8007bb0:	08007c4d 	.word	0x08007c4d
 8007bb4:	08007c4d 	.word	0x08007c4d
 8007bb8:	08007c2d 	.word	0x08007c2d
 8007bbc:	08007c4d 	.word	0x08007c4d
 8007bc0:	08007c4d 	.word	0x08007c4d
 8007bc4:	08007c4d 	.word	0x08007c4d
 8007bc8:	08007c4d 	.word	0x08007c4d
 8007bcc:	08007c4d 	.word	0x08007c4d
 8007bd0:	08007c4d 	.word	0x08007c4d
 8007bd4:	08007c4d 	.word	0x08007c4d
 8007bd8:	08007c35 	.word	0x08007c35
 8007bdc:	08007c4d 	.word	0x08007c4d
 8007be0:	08007c4d 	.word	0x08007c4d
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007c4d 	.word	0x08007c4d
 8007bec:	08007c4d 	.word	0x08007c4d
 8007bf0:	08007c4d 	.word	0x08007c4d
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c3d 	.word	0x08007c3d
 8007bfc:	08007c4d 	.word	0x08007c4d
 8007c00:	08007c4d 	.word	0x08007c4d
 8007c04:	08007c4d 	.word	0x08007c4d
 8007c08:	08007c4d 	.word	0x08007c4d
 8007c0c:	08007c4d 	.word	0x08007c4d
 8007c10:	08007c4d 	.word	0x08007c4d
 8007c14:	08007c4d 	.word	0x08007c4d
 8007c18:	08007c45 	.word	0x08007c45
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c22:	e0d6      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007c24:	2304      	movs	r3, #4
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2a:	e0d2      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c32:	e0ce      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007c34:	2310      	movs	r3, #16
 8007c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c3a:	e0ca      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007c3c:	2320      	movs	r3, #32
 8007c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c42:	e0c6      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007c44:	2340      	movs	r3, #64	@ 0x40
 8007c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4a:	e0c2      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007c4c:	2380      	movs	r3, #128	@ 0x80
 8007c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c52:	e0be      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007c54:	40011400 	.word	0x40011400
 8007c58:	58024400 	.word	0x58024400
 8007c5c:	40007800 	.word	0x40007800
 8007c60:	40007c00 	.word	0x40007c00
 8007c64:	40011800 	.word	0x40011800
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4aad      	ldr	r2, [pc, #692]	@ (8007f24 <UART_SetConfig+0x900>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d176      	bne.n	8007d60 <UART_SetConfig+0x73c>
 8007c72:	4bad      	ldr	r3, [pc, #692]	@ (8007f28 <UART_SetConfig+0x904>)
 8007c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c7a:	2b28      	cmp	r3, #40	@ 0x28
 8007c7c:	d86c      	bhi.n	8007d58 <UART_SetConfig+0x734>
 8007c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <UART_SetConfig+0x660>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007d29 	.word	0x08007d29
 8007c88:	08007d59 	.word	0x08007d59
 8007c8c:	08007d59 	.word	0x08007d59
 8007c90:	08007d59 	.word	0x08007d59
 8007c94:	08007d59 	.word	0x08007d59
 8007c98:	08007d59 	.word	0x08007d59
 8007c9c:	08007d59 	.word	0x08007d59
 8007ca0:	08007d59 	.word	0x08007d59
 8007ca4:	08007d31 	.word	0x08007d31
 8007ca8:	08007d59 	.word	0x08007d59
 8007cac:	08007d59 	.word	0x08007d59
 8007cb0:	08007d59 	.word	0x08007d59
 8007cb4:	08007d59 	.word	0x08007d59
 8007cb8:	08007d59 	.word	0x08007d59
 8007cbc:	08007d59 	.word	0x08007d59
 8007cc0:	08007d59 	.word	0x08007d59
 8007cc4:	08007d39 	.word	0x08007d39
 8007cc8:	08007d59 	.word	0x08007d59
 8007ccc:	08007d59 	.word	0x08007d59
 8007cd0:	08007d59 	.word	0x08007d59
 8007cd4:	08007d59 	.word	0x08007d59
 8007cd8:	08007d59 	.word	0x08007d59
 8007cdc:	08007d59 	.word	0x08007d59
 8007ce0:	08007d59 	.word	0x08007d59
 8007ce4:	08007d41 	.word	0x08007d41
 8007ce8:	08007d59 	.word	0x08007d59
 8007cec:	08007d59 	.word	0x08007d59
 8007cf0:	08007d59 	.word	0x08007d59
 8007cf4:	08007d59 	.word	0x08007d59
 8007cf8:	08007d59 	.word	0x08007d59
 8007cfc:	08007d59 	.word	0x08007d59
 8007d00:	08007d59 	.word	0x08007d59
 8007d04:	08007d49 	.word	0x08007d49
 8007d08:	08007d59 	.word	0x08007d59
 8007d0c:	08007d59 	.word	0x08007d59
 8007d10:	08007d59 	.word	0x08007d59
 8007d14:	08007d59 	.word	0x08007d59
 8007d18:	08007d59 	.word	0x08007d59
 8007d1c:	08007d59 	.word	0x08007d59
 8007d20:	08007d59 	.word	0x08007d59
 8007d24:	08007d51 	.word	0x08007d51
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2e:	e050      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007d30:	2304      	movs	r3, #4
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e04c      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007d38:	2308      	movs	r3, #8
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e048      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007d40:	2310      	movs	r3, #16
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e044      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007d48:	2320      	movs	r3, #32
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e040      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007d50:	2340      	movs	r3, #64	@ 0x40
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e03c      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007d58:	2380      	movs	r3, #128	@ 0x80
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e038      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a71      	ldr	r2, [pc, #452]	@ (8007f2c <UART_SetConfig+0x908>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d130      	bne.n	8007dcc <UART_SetConfig+0x7a8>
 8007d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8007f28 <UART_SetConfig+0x904>)
 8007d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	2b05      	cmp	r3, #5
 8007d74:	d826      	bhi.n	8007dc4 <UART_SetConfig+0x7a0>
 8007d76:	a201      	add	r2, pc, #4	@ (adr r2, 8007d7c <UART_SetConfig+0x758>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007d95 	.word	0x08007d95
 8007d80:	08007d9d 	.word	0x08007d9d
 8007d84:	08007da5 	.word	0x08007da5
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007db5 	.word	0x08007db5
 8007d90:	08007dbd 	.word	0x08007dbd
 8007d94:	2302      	movs	r3, #2
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e01a      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e016      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007da4:	2308      	movs	r3, #8
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e012      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007dac:	2310      	movs	r3, #16
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e00e      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007db4:	2320      	movs	r3, #32
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e00a      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007dbc:	2340      	movs	r3, #64	@ 0x40
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc2:	e006      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007dc4:	2380      	movs	r3, #128	@ 0x80
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dca:	e002      	b.n	8007dd2 <UART_SetConfig+0x7ae>
 8007dcc:	2380      	movs	r3, #128	@ 0x80
 8007dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a55      	ldr	r2, [pc, #340]	@ (8007f2c <UART_SetConfig+0x908>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	f040 80f8 	bne.w	8007fce <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007dde:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007de2:	2b20      	cmp	r3, #32
 8007de4:	dc46      	bgt.n	8007e74 <UART_SetConfig+0x850>
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	db75      	blt.n	8007ed6 <UART_SetConfig+0x8b2>
 8007dea:	3b02      	subs	r3, #2
 8007dec:	2b1e      	cmp	r3, #30
 8007dee:	d872      	bhi.n	8007ed6 <UART_SetConfig+0x8b2>
 8007df0:	a201      	add	r2, pc, #4	@ (adr r2, 8007df8 <UART_SetConfig+0x7d4>)
 8007df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df6:	bf00      	nop
 8007df8:	08007e7b 	.word	0x08007e7b
 8007dfc:	08007ed7 	.word	0x08007ed7
 8007e00:	08007e83 	.word	0x08007e83
 8007e04:	08007ed7 	.word	0x08007ed7
 8007e08:	08007ed7 	.word	0x08007ed7
 8007e0c:	08007ed7 	.word	0x08007ed7
 8007e10:	08007e93 	.word	0x08007e93
 8007e14:	08007ed7 	.word	0x08007ed7
 8007e18:	08007ed7 	.word	0x08007ed7
 8007e1c:	08007ed7 	.word	0x08007ed7
 8007e20:	08007ed7 	.word	0x08007ed7
 8007e24:	08007ed7 	.word	0x08007ed7
 8007e28:	08007ed7 	.word	0x08007ed7
 8007e2c:	08007ed7 	.word	0x08007ed7
 8007e30:	08007ea3 	.word	0x08007ea3
 8007e34:	08007ed7 	.word	0x08007ed7
 8007e38:	08007ed7 	.word	0x08007ed7
 8007e3c:	08007ed7 	.word	0x08007ed7
 8007e40:	08007ed7 	.word	0x08007ed7
 8007e44:	08007ed7 	.word	0x08007ed7
 8007e48:	08007ed7 	.word	0x08007ed7
 8007e4c:	08007ed7 	.word	0x08007ed7
 8007e50:	08007ed7 	.word	0x08007ed7
 8007e54:	08007ed7 	.word	0x08007ed7
 8007e58:	08007ed7 	.word	0x08007ed7
 8007e5c:	08007ed7 	.word	0x08007ed7
 8007e60:	08007ed7 	.word	0x08007ed7
 8007e64:	08007ed7 	.word	0x08007ed7
 8007e68:	08007ed7 	.word	0x08007ed7
 8007e6c:	08007ed7 	.word	0x08007ed7
 8007e70:	08007ec9 	.word	0x08007ec9
 8007e74:	2b40      	cmp	r3, #64	@ 0x40
 8007e76:	d02a      	beq.n	8007ece <UART_SetConfig+0x8aa>
 8007e78:	e02d      	b.n	8007ed6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e7a:	f7fd fea1 	bl	8005bc0 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e80:	e02f      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fd feb0 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e90:	e027      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e92:	f107 0318 	add.w	r3, r7, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fd fffc 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea0:	e01f      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ea2:	4b21      	ldr	r3, [pc, #132]	@ (8007f28 <UART_SetConfig+0x904>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d009      	beq.n	8007ec2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007eae:	4b1e      	ldr	r3, [pc, #120]	@ (8007f28 <UART_SetConfig+0x904>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	08db      	lsrs	r3, r3, #3
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f30 <UART_SetConfig+0x90c>)
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ec0:	e00f      	b.n	8007ee2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f30 <UART_SetConfig+0x90c>)
 8007ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ec6:	e00c      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f34 <UART_SetConfig+0x910>)
 8007eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ecc:	e009      	b.n	8007ee2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ed4:	e005      	b.n	8007ee2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ee0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 81ee 	beq.w	80082c6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eee:	4a12      	ldr	r2, [pc, #72]	@ (8007f38 <UART_SetConfig+0x914>)
 8007ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007efc:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	4613      	mov	r3, r2
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d305      	bcc.n	8007f1a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d910      	bls.n	8007f3c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f20:	e1d1      	b.n	80082c6 <UART_SetConfig+0xca2>
 8007f22:	bf00      	nop
 8007f24:	40011c00 	.word	0x40011c00
 8007f28:	58024400 	.word	0x58024400
 8007f2c:	58000c00 	.word	0x58000c00
 8007f30:	03d09000 	.word	0x03d09000
 8007f34:	003d0900 	.word	0x003d0900
 8007f38:	080169a8 	.word	0x080169a8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3e:	2200      	movs	r2, #0
 8007f40:	60bb      	str	r3, [r7, #8]
 8007f42:	60fa      	str	r2, [r7, #12]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f48:	4ac0      	ldr	r2, [pc, #768]	@ (800824c <UART_SetConfig+0xc28>)
 8007f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2200      	movs	r2, #0
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	607a      	str	r2, [r7, #4]
 8007f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f5e:	f7f8 fa2f 	bl	80003c0 <__aeabi_uldivmod>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4610      	mov	r0, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	f04f 0200 	mov.w	r2, #0
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	020b      	lsls	r3, r1, #8
 8007f74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f78:	0202      	lsls	r2, r0, #8
 8007f7a:	6979      	ldr	r1, [r7, #20]
 8007f7c:	6849      	ldr	r1, [r1, #4]
 8007f7e:	0849      	lsrs	r1, r1, #1
 8007f80:	2000      	movs	r0, #0
 8007f82:	460c      	mov	r4, r1
 8007f84:	4605      	mov	r5, r0
 8007f86:	eb12 0804 	adds.w	r8, r2, r4
 8007f8a:	eb43 0905 	adc.w	r9, r3, r5
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	469a      	mov	sl, r3
 8007f96:	4693      	mov	fp, r2
 8007f98:	4652      	mov	r2, sl
 8007f9a:	465b      	mov	r3, fp
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	f7f8 fa0e 	bl	80003c0 <__aeabi_uldivmod>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	4613      	mov	r3, r2
 8007faa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fb2:	d308      	bcc.n	8007fc6 <UART_SetConfig+0x9a2>
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fba:	d204      	bcs.n	8007fc6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fc2:	60da      	str	r2, [r3, #12]
 8007fc4:	e17f      	b.n	80082c6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007fcc:	e17b      	b.n	80082c6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fd6:	f040 80bd 	bne.w	8008154 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007fda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	dc48      	bgt.n	8008074 <UART_SetConfig+0xa50>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	db7b      	blt.n	80080de <UART_SetConfig+0xaba>
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d879      	bhi.n	80080de <UART_SetConfig+0xaba>
 8007fea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <UART_SetConfig+0x9cc>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	0800807b 	.word	0x0800807b
 8007ff4:	08008083 	.word	0x08008083
 8007ff8:	080080df 	.word	0x080080df
 8007ffc:	080080df 	.word	0x080080df
 8008000:	0800808b 	.word	0x0800808b
 8008004:	080080df 	.word	0x080080df
 8008008:	080080df 	.word	0x080080df
 800800c:	080080df 	.word	0x080080df
 8008010:	0800809b 	.word	0x0800809b
 8008014:	080080df 	.word	0x080080df
 8008018:	080080df 	.word	0x080080df
 800801c:	080080df 	.word	0x080080df
 8008020:	080080df 	.word	0x080080df
 8008024:	080080df 	.word	0x080080df
 8008028:	080080df 	.word	0x080080df
 800802c:	080080df 	.word	0x080080df
 8008030:	080080ab 	.word	0x080080ab
 8008034:	080080df 	.word	0x080080df
 8008038:	080080df 	.word	0x080080df
 800803c:	080080df 	.word	0x080080df
 8008040:	080080df 	.word	0x080080df
 8008044:	080080df 	.word	0x080080df
 8008048:	080080df 	.word	0x080080df
 800804c:	080080df 	.word	0x080080df
 8008050:	080080df 	.word	0x080080df
 8008054:	080080df 	.word	0x080080df
 8008058:	080080df 	.word	0x080080df
 800805c:	080080df 	.word	0x080080df
 8008060:	080080df 	.word	0x080080df
 8008064:	080080df 	.word	0x080080df
 8008068:	080080df 	.word	0x080080df
 800806c:	080080df 	.word	0x080080df
 8008070:	080080d1 	.word	0x080080d1
 8008074:	2b40      	cmp	r3, #64	@ 0x40
 8008076:	d02e      	beq.n	80080d6 <UART_SetConfig+0xab2>
 8008078:	e031      	b.n	80080de <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800807a:	f7fc fb93 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 800807e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008080:	e033      	b.n	80080ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008082:	f7fc fba5 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 8008086:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008088:	e02f      	b.n	80080ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800808a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800808e:	4618      	mov	r0, r3
 8008090:	f7fd fdac 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008098:	e027      	b.n	80080ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800809a:	f107 0318 	add.w	r3, r7, #24
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fd fef8 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080a8:	e01f      	b.n	80080ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080aa:	4b69      	ldr	r3, [pc, #420]	@ (8008250 <UART_SetConfig+0xc2c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d009      	beq.n	80080ca <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080b6:	4b66      	ldr	r3, [pc, #408]	@ (8008250 <UART_SetConfig+0xc2c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	08db      	lsrs	r3, r3, #3
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	4a64      	ldr	r2, [pc, #400]	@ (8008254 <UART_SetConfig+0xc30>)
 80080c2:	fa22 f303 	lsr.w	r3, r2, r3
 80080c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080c8:	e00f      	b.n	80080ea <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80080ca:	4b62      	ldr	r3, [pc, #392]	@ (8008254 <UART_SetConfig+0xc30>)
 80080cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080ce:	e00c      	b.n	80080ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080d0:	4b61      	ldr	r3, [pc, #388]	@ (8008258 <UART_SetConfig+0xc34>)
 80080d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d4:	e009      	b.n	80080ea <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080dc:	e005      	b.n	80080ea <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80080de:	2300      	movs	r3, #0
 80080e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80080e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 80ea 	beq.w	80082c6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f6:	4a55      	ldr	r2, [pc, #340]	@ (800824c <UART_SetConfig+0xc28>)
 80080f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080fc:	461a      	mov	r2, r3
 80080fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008100:	fbb3 f3f2 	udiv	r3, r3, r2
 8008104:	005a      	lsls	r2, r3, #1
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	085b      	lsrs	r3, r3, #1
 800810c:	441a      	add	r2, r3
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	fbb2 f3f3 	udiv	r3, r2, r3
 8008116:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	2b0f      	cmp	r3, #15
 800811c:	d916      	bls.n	800814c <UART_SetConfig+0xb28>
 800811e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008124:	d212      	bcs.n	800814c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008128:	b29b      	uxth	r3, r3
 800812a:	f023 030f 	bic.w	r3, r3, #15
 800812e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008132:	085b      	lsrs	r3, r3, #1
 8008134:	b29b      	uxth	r3, r3
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	b29a      	uxth	r2, r3
 800813c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800813e:	4313      	orrs	r3, r2
 8008140:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008148:	60da      	str	r2, [r3, #12]
 800814a:	e0bc      	b.n	80082c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008152:	e0b8      	b.n	80082c6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008154:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008158:	2b20      	cmp	r3, #32
 800815a:	dc4b      	bgt.n	80081f4 <UART_SetConfig+0xbd0>
 800815c:	2b00      	cmp	r3, #0
 800815e:	f2c0 8087 	blt.w	8008270 <UART_SetConfig+0xc4c>
 8008162:	2b20      	cmp	r3, #32
 8008164:	f200 8084 	bhi.w	8008270 <UART_SetConfig+0xc4c>
 8008168:	a201      	add	r2, pc, #4	@ (adr r2, 8008170 <UART_SetConfig+0xb4c>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	080081fb 	.word	0x080081fb
 8008174:	08008203 	.word	0x08008203
 8008178:	08008271 	.word	0x08008271
 800817c:	08008271 	.word	0x08008271
 8008180:	0800820b 	.word	0x0800820b
 8008184:	08008271 	.word	0x08008271
 8008188:	08008271 	.word	0x08008271
 800818c:	08008271 	.word	0x08008271
 8008190:	0800821b 	.word	0x0800821b
 8008194:	08008271 	.word	0x08008271
 8008198:	08008271 	.word	0x08008271
 800819c:	08008271 	.word	0x08008271
 80081a0:	08008271 	.word	0x08008271
 80081a4:	08008271 	.word	0x08008271
 80081a8:	08008271 	.word	0x08008271
 80081ac:	08008271 	.word	0x08008271
 80081b0:	0800822b 	.word	0x0800822b
 80081b4:	08008271 	.word	0x08008271
 80081b8:	08008271 	.word	0x08008271
 80081bc:	08008271 	.word	0x08008271
 80081c0:	08008271 	.word	0x08008271
 80081c4:	08008271 	.word	0x08008271
 80081c8:	08008271 	.word	0x08008271
 80081cc:	08008271 	.word	0x08008271
 80081d0:	08008271 	.word	0x08008271
 80081d4:	08008271 	.word	0x08008271
 80081d8:	08008271 	.word	0x08008271
 80081dc:	08008271 	.word	0x08008271
 80081e0:	08008271 	.word	0x08008271
 80081e4:	08008271 	.word	0x08008271
 80081e8:	08008271 	.word	0x08008271
 80081ec:	08008271 	.word	0x08008271
 80081f0:	08008263 	.word	0x08008263
 80081f4:	2b40      	cmp	r3, #64	@ 0x40
 80081f6:	d037      	beq.n	8008268 <UART_SetConfig+0xc44>
 80081f8:	e03a      	b.n	8008270 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081fa:	f7fc fad3 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 80081fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008200:	e03c      	b.n	800827c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008202:	f7fc fae5 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 8008206:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008208:	e038      	b.n	800827c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800820a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800820e:	4618      	mov	r0, r3
 8008210:	f7fd fcec 	bl	8005bec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008218:	e030      	b.n	800827c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800821a:	f107 0318 	add.w	r3, r7, #24
 800821e:	4618      	mov	r0, r3
 8008220:	f7fd fe38 	bl	8005e94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008228:	e028      	b.n	800827c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800822a:	4b09      	ldr	r3, [pc, #36]	@ (8008250 <UART_SetConfig+0xc2c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d012      	beq.n	800825c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008236:	4b06      	ldr	r3, [pc, #24]	@ (8008250 <UART_SetConfig+0xc2c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	08db      	lsrs	r3, r3, #3
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	4a04      	ldr	r2, [pc, #16]	@ (8008254 <UART_SetConfig+0xc30>)
 8008242:	fa22 f303 	lsr.w	r3, r2, r3
 8008246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008248:	e018      	b.n	800827c <UART_SetConfig+0xc58>
 800824a:	bf00      	nop
 800824c:	080169a8 	.word	0x080169a8
 8008250:	58024400 	.word	0x58024400
 8008254:	03d09000 	.word	0x03d09000
 8008258:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800825c:	4b24      	ldr	r3, [pc, #144]	@ (80082f0 <UART_SetConfig+0xccc>)
 800825e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008260:	e00c      	b.n	800827c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008262:	4b24      	ldr	r3, [pc, #144]	@ (80082f4 <UART_SetConfig+0xcd0>)
 8008264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008266:	e009      	b.n	800827c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800826c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800826e:	e005      	b.n	800827c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800827a:	bf00      	nop
    }

    if (pclk != 0U)
 800827c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d021      	beq.n	80082c6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008286:	4a1c      	ldr	r2, [pc, #112]	@ (80082f8 <UART_SetConfig+0xcd4>)
 8008288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800828c:	461a      	mov	r2, r3
 800828e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008290:	fbb3 f2f2 	udiv	r2, r3, r2
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	085b      	lsrs	r3, r3, #1
 800829a:	441a      	add	r2, r3
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a8:	2b0f      	cmp	r3, #15
 80082aa:	d909      	bls.n	80082c0 <UART_SetConfig+0xc9c>
 80082ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b2:	d205      	bcs.n	80082c0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	e002      	b.n	80082c6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2200      	movs	r2, #0
 80082da:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2200      	movs	r2, #0
 80082e0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80082e2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3748      	adds	r7, #72	@ 0x48
 80082ea:	46bd      	mov	sp, r7
 80082ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082f0:	03d09000 	.word	0x03d09000
 80082f4:	003d0900 	.word	0x003d0900
 80082f8:	080169a8 	.word	0x080169a8

080082fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00a      	beq.n	8008326 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834c:	f003 0302 	and.w	r3, r3, #2
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00a      	beq.n	800838c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	430a      	orrs	r2, r1
 800838a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008390:	f003 0310 	and.w	r3, r3, #16
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b2:	f003 0320 	and.w	r3, r3, #32
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	430a      	orrs	r2, r1
 80083ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d01a      	beq.n	8008412 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083fa:	d10a      	bne.n	8008412 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	430a      	orrs	r2, r1
 8008410:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	605a      	str	r2, [r3, #4]
  }
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b098      	sub	sp, #96	@ 0x60
 8008444:	af02      	add	r7, sp, #8
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008450:	f7f9 ffd6 	bl	8002400 <HAL_GetTick>
 8008454:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b08      	cmp	r3, #8
 8008462:	d12f      	bne.n	80084c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008464:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800846c:	2200      	movs	r2, #0
 800846e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f88e 	bl	8008594 <UART_WaitOnFlagUntilTimeout>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d022      	beq.n	80084c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	e853 3f00 	ldrex	r3, [r3]
 800848a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800848c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800848e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008492:	653b      	str	r3, [r7, #80]	@ 0x50
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	461a      	mov	r2, r3
 800849a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800849c:	647b      	str	r3, [r7, #68]	@ 0x44
 800849e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084a4:	e841 2300 	strex	r3, r2, [r1]
 80084a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80084aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e6      	bne.n	800847e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2220      	movs	r2, #32
 80084b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e063      	b.n	800858c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0304 	and.w	r3, r3, #4
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d149      	bne.n	8008566 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084da:	2200      	movs	r2, #0
 80084dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 f857 	bl	8008594 <UART_WaitOnFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d03c      	beq.n	8008566 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	623b      	str	r3, [r7, #32]
   return(result);
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008500:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800850a:	633b      	str	r3, [r7, #48]	@ 0x30
 800850c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e6      	bne.n	80084ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	e853 3f00 	ldrex	r3, [r3]
 800852c:	60fb      	str	r3, [r7, #12]
   return(result);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f023 0301 	bic.w	r3, r3, #1
 8008534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	3308      	adds	r3, #8
 800853c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800853e:	61fa      	str	r2, [r7, #28]
 8008540:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008542:	69b9      	ldr	r1, [r7, #24]
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	e841 2300 	strex	r3, r2, [r1]
 800854a:	617b      	str	r3, [r7, #20]
   return(result);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1e5      	bne.n	800851e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2220      	movs	r2, #32
 8008556:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e012      	b.n	800858c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2220      	movs	r2, #32
 8008572:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3758      	adds	r7, #88	@ 0x58
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	4613      	mov	r3, r2
 80085a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085a4:	e04f      	b.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ac:	d04b      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ae:	f7f9 ff27 	bl	8002400 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d302      	bcc.n	80085c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e04e      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0304 	and.w	r3, r3, #4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d037      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b80      	cmp	r3, #128	@ 0x80
 80085da:	d034      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2b40      	cmp	r3, #64	@ 0x40
 80085e0:	d031      	beq.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d110      	bne.n	8008612 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2208      	movs	r2, #8
 80085f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f000 f839 	bl	8008670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2208      	movs	r2, #8
 8008602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e029      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800861c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008620:	d111      	bne.n	8008646 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800862a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 f81f 	bl	8008670 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2220      	movs	r2, #32
 8008636:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e00f      	b.n	8008666 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4013      	ands	r3, r2
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	bf0c      	ite	eq
 8008656:	2301      	moveq	r3, #1
 8008658:	2300      	movne	r3, #0
 800865a:	b2db      	uxtb	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	429a      	cmp	r2, r3
 8008662:	d0a0      	beq.n	80085a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008670:	b480      	push	{r7}
 8008672:	b095      	sub	sp, #84	@ 0x54
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008680:	e853 3f00 	ldrex	r3, [r3]
 8008684:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800868c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008696:	643b      	str	r3, [r7, #64]	@ 0x40
 8008698:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800869c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800869e:	e841 2300 	strex	r3, r2, [r1]
 80086a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1e6      	bne.n	8008678 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3308      	adds	r3, #8
 80086b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80086ba:	69fa      	ldr	r2, [r7, #28]
 80086bc:	4b1e      	ldr	r3, [pc, #120]	@ (8008738 <UART_EndRxTransfer+0xc8>)
 80086be:	4013      	ands	r3, r2
 80086c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80086cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e5      	bne.n	80086aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d118      	bne.n	8008718 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f023 0310 	bic.w	r3, r3, #16
 80086fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	461a      	mov	r2, r3
 8008702:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008704:	61bb      	str	r3, [r7, #24]
 8008706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	6979      	ldr	r1, [r7, #20]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	613b      	str	r3, [r7, #16]
   return(result);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e6      	bne.n	80086e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2220      	movs	r2, #32
 800871c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800872c:	bf00      	nop
 800872e:	3754      	adds	r7, #84	@ 0x54
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	effffffe 	.word	0xeffffffe

0800873c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7fe ff50 	bl	80075f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	60bb      	str	r3, [r7, #8]
   return(result);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800877c:	61fb      	str	r3, [r7, #28]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	61bb      	str	r3, [r7, #24]
 8008788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6979      	ldr	r1, [r7, #20]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	613b      	str	r3, [r7, #16]
   return(result);
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e6      	bne.n	8008768 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7fe ff1b 	bl	80075e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ae:	bf00      	nop
 80087b0:	3720      	adds	r7, #32
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b085      	sub	sp, #20
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_UARTEx_DisableFifoMode+0x16>
 8008804:	2302      	movs	r3, #2
 8008806:	e027      	b.n	8008858 <HAL_UARTEx_DisableFifoMode+0x66>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2224      	movs	r2, #36	@ 0x24
 8008814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0201 	bic.w	r2, r2, #1
 800882e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008836:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008878:	2302      	movs	r3, #2
 800887a:	e02d      	b.n	80088d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2224      	movs	r2, #36	@ 0x24
 8008888:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0201 	bic.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f84f 	bl	800895c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e02d      	b.n	8008954 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	@ 0x24
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0201 	bic.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f811 	bl	800895c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008968:	2b00      	cmp	r3, #0
 800896a:	d108      	bne.n	800897e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800897c:	e031      	b.n	80089e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800897e:	2310      	movs	r3, #16
 8008980:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008982:	2310      	movs	r3, #16
 8008984:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	0e5b      	lsrs	r3, r3, #25
 800898e:	b2db      	uxtb	r3, r3
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	0f5b      	lsrs	r3, r3, #29
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	7b3a      	ldrb	r2, [r7, #12]
 80089aa:	4911      	ldr	r1, [pc, #68]	@ (80089f0 <UARTEx_SetNbDataToProcess+0x94>)
 80089ac:	5c8a      	ldrb	r2, [r1, r2]
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80089b2:	7b3a      	ldrb	r2, [r7, #12]
 80089b4:	490f      	ldr	r1, [pc, #60]	@ (80089f4 <UARTEx_SetNbDataToProcess+0x98>)
 80089b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80089bc:	b29a      	uxth	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	7b7a      	ldrb	r2, [r7, #13]
 80089c8:	4909      	ldr	r1, [pc, #36]	@ (80089f0 <UARTEx_SetNbDataToProcess+0x94>)
 80089ca:	5c8a      	ldrb	r2, [r1, r2]
 80089cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80089d0:	7b7a      	ldrb	r2, [r7, #13]
 80089d2:	4908      	ldr	r1, [pc, #32]	@ (80089f4 <UARTEx_SetNbDataToProcess+0x98>)
 80089d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80089e2:	bf00      	nop
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	080169c0 	.word	0x080169c0
 80089f4:	080169c8 	.word	0x080169c8

080089f8 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 80089f8:	b480      	push	{r7}
 80089fa:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 80089fc:	bf00      	nop
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
	...

08008a08 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8008a08:	b480      	push	{r7}
 8008a0a:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 8008a0e:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8008a10:	2300      	movs	r3, #0
 8008a12:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008a16:	2301      	movs	r3, #1
 8008a18:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008a1c:	e02b      	b.n	8008a76 <aes_gen_tables+0x6e>
    {
        pow[i] = x;
 8008a1e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008a22:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008a26:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8008a2a:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8008a32:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008a36:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008a3a:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008a3e:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8008a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8008a46:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008a50:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008a54:	2a00      	cmp	r2, #0
 8008a56:	d001      	beq.n	8008a5c <aes_gen_tables+0x54>
 8008a58:	221b      	movs	r2, #27
 8008a5a:	e000      	b.n	8008a5e <aes_gen_tables+0x56>
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	405a      	eors	r2, r3
 8008a60:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008a64:	4053      	eors	r3, r2
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8008a6c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008a70:	3301      	adds	r3, #1
 8008a72:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008a76:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008a7a:	2bff      	cmp	r3, #255	@ 0xff
 8008a7c:	ddcf      	ble.n	8008a1e <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008a84:	2301      	movs	r3, #1
 8008a86:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008a8a:	e01b      	b.n	8008ac4 <aes_gen_tables+0xbc>
    {
        RCON[i] = (uint32_t) x;
 8008a8c:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008a90:	49cc      	ldr	r1, [pc, #816]	@ (8008dc4 <aes_gen_tables+0x3bc>)
 8008a92:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME( x ) & 0xFF;
 8008a9a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008aa4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008aa8:	2a00      	cmp	r2, #0
 8008aaa:	d001      	beq.n	8008ab0 <aes_gen_tables+0xa8>
 8008aac:	221b      	movs	r2, #27
 8008aae:	e000      	b.n	8008ab2 <aes_gen_tables+0xaa>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4053      	eors	r3, r2
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8008aba:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008abe:	3301      	adds	r3, #1
 8008ac0:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008ac4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ac8:	2b09      	cmp	r3, #9
 8008aca:	dddf      	ble.n	8008a8c <aes_gen_tables+0x84>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8008acc:	4bbe      	ldr	r3, [pc, #760]	@ (8008dc8 <aes_gen_tables+0x3c0>)
 8008ace:	2263      	movs	r2, #99	@ 0x63
 8008ad0:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8008ad2:	4bbe      	ldr	r3, [pc, #760]	@ (8008dcc <aes_gen_tables+0x3c4>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

    for( i = 1; i < 256; i++ )
 8008ada:	2301      	movs	r3, #1
 8008adc:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008ae0:	e072      	b.n	8008bc8 <aes_gen_tables+0x1c0>
    {
        x = pow[255 - log[i]];
 8008ae2:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008ae6:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008aea:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8008af6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008afa:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b02:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008b06:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008b0a:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8008b0e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b12:	005a      	lsls	r2, r3, #1
 8008b14:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b18:	11db      	asrs	r3, r3, #7
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008b22:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008b26:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b2a:	4053      	eors	r3, r2
 8008b2c:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008b30:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b34:	005a      	lsls	r2, r3, #1
 8008b36:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b3a:	11db      	asrs	r3, r3, #7
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008b44:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008b48:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b4c:	4053      	eors	r3, r2
 8008b4e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008b52:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b56:	005a      	lsls	r2, r3, #1
 8008b58:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b5c:	11db      	asrs	r3, r3, #7
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008b66:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008b6a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b6e:	4053      	eors	r3, r2
 8008b70:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008b74:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b78:	005a      	lsls	r2, r3, #1
 8008b7a:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b7e:	11db      	asrs	r3, r3, #7
 8008b80:	4313      	orrs	r3, r2
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y ^ 0x63;
 8008b88:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b8c:	f083 0363 	eor.w	r3, r3, #99	@ 0x63
 8008b90:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008b94:	4053      	eors	r3, r2
 8008b96:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        FSb[i] = (unsigned char) x;
 8008b9a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008b9e:	b2d9      	uxtb	r1, r3
 8008ba0:	4a89      	ldr	r2, [pc, #548]	@ (8008dc8 <aes_gen_tables+0x3c0>)
 8008ba2:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ba6:	4413      	add	r3, r2
 8008ba8:	460a      	mov	r2, r1
 8008baa:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8008bac:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008bb0:	b2d9      	uxtb	r1, r3
 8008bb2:	4a86      	ldr	r2, [pc, #536]	@ (8008dcc <aes_gen_tables+0x3c4>)
 8008bb4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008bb8:	4413      	add	r3, r2
 8008bba:	460a      	mov	r2, r1
 8008bbc:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8008bbe:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008bc8:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008bcc:	2bff      	cmp	r3, #255	@ 0xff
 8008bce:	dd88      	ble.n	8008ae2 <aes_gen_tables+0xda>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008bd6:	e136      	b.n	8008e46 <aes_gen_tables+0x43e>
    {
        x = FSb[i];
 8008bd8:	4a7b      	ldr	r2, [pc, #492]	@ (8008dc8 <aes_gen_tables+0x3c0>)
 8008bda:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008bde:	4413      	add	r3, r2
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
        y = XTIME( x ) & 0xFF;
 8008be6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008bf0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008bf4:	2a00      	cmp	r2, #0
 8008bf6:	d001      	beq.n	8008bfc <aes_gen_tables+0x1f4>
 8008bf8:	221b      	movs	r2, #27
 8008bfa:	e000      	b.n	8008bfe <aes_gen_tables+0x1f6>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	4053      	eors	r3, r2
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        z =  ( y ^ x ) & 0xFF;
 8008c06:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8008c0a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c0e:	4053      	eors	r3, r2
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8008c16:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c1a:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 8008c1c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008c20:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 8008c22:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c26:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8008c28:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 8008c2a:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 8008c2e:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 8008c30:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 8008c32:	4967      	ldr	r1, [pc, #412]	@ (8008dd0 <aes_gen_tables+0x3c8>)
 8008c34:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 8008c3c:	4a64      	ldr	r2, [pc, #400]	@ (8008dd0 <aes_gen_tables+0x3c8>)
 8008c3e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c46:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008c4a:	4962      	ldr	r1, [pc, #392]	@ (8008dd4 <aes_gen_tables+0x3cc>)
 8008c4c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8008c54:	4a5f      	ldr	r2, [pc, #380]	@ (8008dd4 <aes_gen_tables+0x3cc>)
 8008c56:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5e:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008c62:	495d      	ldr	r1, [pc, #372]	@ (8008dd8 <aes_gen_tables+0x3d0>)
 8008c64:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 8008c6c:	4a5a      	ldr	r2, [pc, #360]	@ (8008dd8 <aes_gen_tables+0x3d0>)
 8008c6e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c76:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008c7a:	4958      	ldr	r1, [pc, #352]	@ (8008ddc <aes_gen_tables+0x3d4>)
 8008c7c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8008c84:	4a51      	ldr	r2, [pc, #324]	@ (8008dcc <aes_gen_tables+0x3c4>)
 8008c86:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c8a:	4413      	add	r3, r2
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8008c92:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d020      	beq.n	8008cdc <aes_gen_tables+0x2d4>
 8008c9a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008c9e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ca4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008ca8:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008cac:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008cb0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cb4:	441a      	add	r2, r3
 8008cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8008de0 <aes_gen_tables+0x3d8>)
 8008cb8:	fb83 1302 	smull	r1, r3, r3, r2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	11d9      	asrs	r1, r3, #7
 8008cc0:	17d3      	asrs	r3, r2, #31
 8008cc2:	1ac9      	subs	r1, r1, r3
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	021b      	lsls	r3, r3, #8
 8008cc8:	1a5b      	subs	r3, r3, r1
 8008cca:	1ad1      	subs	r1, r2, r3
 8008ccc:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008cd0:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008cd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	e000      	b.n	8008cde <aes_gen_tables+0x2d6>
 8008cdc:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8008cde:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d020      	beq.n	8008d28 <aes_gen_tables+0x320>
 8008ce6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008cea:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cf0:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008cf4:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008cf8:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008cfc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d00:	441a      	add	r2, r3
 8008d02:	4b37      	ldr	r3, [pc, #220]	@ (8008de0 <aes_gen_tables+0x3d8>)
 8008d04:	fb83 1302 	smull	r1, r3, r3, r2
 8008d08:	4413      	add	r3, r2
 8008d0a:	11d9      	asrs	r1, r3, #7
 8008d0c:	17d3      	asrs	r3, r2, #31
 8008d0e:	1ac9      	subs	r1, r1, r3
 8008d10:	460b      	mov	r3, r1
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	1a5b      	subs	r3, r3, r1
 8008d16:	1ad1      	subs	r1, r2, r3
 8008d18:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d1c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008d20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d24:	021b      	lsls	r3, r3, #8
 8008d26:	e000      	b.n	8008d2a <aes_gen_tables+0x322>
 8008d28:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8008d2a:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8008d2c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d020      	beq.n	8008d76 <aes_gen_tables+0x36e>
 8008d34:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d38:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d3e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d42:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d46:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008d4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d4e:	441a      	add	r2, r3
 8008d50:	4b23      	ldr	r3, [pc, #140]	@ (8008de0 <aes_gen_tables+0x3d8>)
 8008d52:	fb83 1302 	smull	r1, r3, r3, r2
 8008d56:	4413      	add	r3, r2
 8008d58:	11d9      	asrs	r1, r3, #7
 8008d5a:	17d3      	asrs	r3, r2, #31
 8008d5c:	1ac9      	subs	r1, r1, r3
 8008d5e:	460b      	mov	r3, r1
 8008d60:	021b      	lsls	r3, r3, #8
 8008d62:	1a5b      	subs	r3, r3, r1
 8008d64:	1ad1      	subs	r1, r2, r3
 8008d66:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d6a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008d6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d72:	041b      	lsls	r3, r3, #16
 8008d74:	e000      	b.n	8008d78 <aes_gen_tables+0x370>
 8008d76:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8008d78:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8008d7a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d030      	beq.n	8008de4 <aes_gen_tables+0x3dc>
 8008d82:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d86:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d8c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d90:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d94:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008d98:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d9c:	441a      	add	r2, r3
 8008d9e:	4b10      	ldr	r3, [pc, #64]	@ (8008de0 <aes_gen_tables+0x3d8>)
 8008da0:	fb83 1302 	smull	r1, r3, r3, r2
 8008da4:	4413      	add	r3, r2
 8008da6:	11d9      	asrs	r1, r3, #7
 8008da8:	17d3      	asrs	r3, r2, #31
 8008daa:	1ac9      	subs	r1, r1, r3
 8008dac:	460b      	mov	r3, r1
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	1a5b      	subs	r3, r3, r1
 8008db2:	1ad1      	subs	r1, r2, r3
 8008db4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008db8:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008dbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dc0:	061b      	lsls	r3, r3, #24
 8008dc2:	e010      	b.n	8008de6 <aes_gen_tables+0x3de>
 8008dc4:	24002548 	.word	0x24002548
 8008dc8:	24000348 	.word	0x24000348
 8008dcc:	24001448 	.word	0x24001448
 8008dd0:	24000448 	.word	0x24000448
 8008dd4:	24000848 	.word	0x24000848
 8008dd8:	24000c48 	.word	0x24000c48
 8008ddc:	24001048 	.word	0x24001048
 8008de0:	80808081 	.word	0x80808081
 8008de4:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8008de6:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8008dea:	491d      	ldr	r1, [pc, #116]	@ (8008e60 <aes_gen_tables+0x458>)
 8008dec:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8008df4:	4a1a      	ldr	r2, [pc, #104]	@ (8008e60 <aes_gen_tables+0x458>)
 8008df6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dfe:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008e02:	4918      	ldr	r1, [pc, #96]	@ (8008e64 <aes_gen_tables+0x45c>)
 8008e04:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8008e0c:	4a15      	ldr	r2, [pc, #84]	@ (8008e64 <aes_gen_tables+0x45c>)
 8008e0e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e16:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008e1a:	4913      	ldr	r1, [pc, #76]	@ (8008e68 <aes_gen_tables+0x460>)
 8008e1c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8008e24:	4a10      	ldr	r2, [pc, #64]	@ (8008e68 <aes_gen_tables+0x460>)
 8008e26:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e2e:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008e32:	490e      	ldr	r1, [pc, #56]	@ (8008e6c <aes_gen_tables+0x464>)
 8008e34:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 8008e3c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e40:	3301      	adds	r3, #1
 8008e42:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008e46:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e4a:	2bff      	cmp	r3, #255	@ 0xff
 8008e4c:	f77f aec4 	ble.w	8008bd8 <aes_gen_tables+0x1d0>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	24001548 	.word	0x24001548
 8008e64:	24001948 	.word	0x24001948
 8008e68:	24001d48 	.word	0x24001d48
 8008e6c:	24002148 	.word	0x24002148

08008e70 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8008e78:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f00c fd78 	bl	8015974 <memset>
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8008e9a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f00a fc40 	bl	8013724 <mbedtls_platform_zeroize>
 8008ea4:	e000      	b.n	8008ea8 <mbedtls_aes_free+0x1c>
        return;
 8008ea6:	bf00      	nop
}
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ec2:	d012      	beq.n	8008eea <mbedtls_aes_setkey_enc+0x3a>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eca:	d812      	bhi.n	8008ef2 <mbedtls_aes_setkey_enc+0x42>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b80      	cmp	r3, #128	@ 0x80
 8008ed0:	d003      	beq.n	8008eda <mbedtls_aes_setkey_enc+0x2a>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ed6:	d004      	beq.n	8008ee2 <mbedtls_aes_setkey_enc+0x32>
 8008ed8:	e00b      	b.n	8008ef2 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	220a      	movs	r2, #10
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	e00a      	b.n	8008ef8 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	220c      	movs	r2, #12
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	e006      	b.n	8008ef8 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	220e      	movs	r2, #14
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	e002      	b.n	8008ef8 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8008ef2:	f06f 031f 	mvn.w	r3, #31
 8008ef6:	e1b3      	b.n	8009260 <mbedtls_aes_setkey_enc+0x3b0>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8008ef8:	4b88      	ldr	r3, [pc, #544]	@ (800911c <mbedtls_aes_setkey_enc+0x26c>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d104      	bne.n	8008f0a <mbedtls_aes_setkey_enc+0x5a>
    {
        aes_gen_tables();
 8008f00:	f7ff fd82 	bl	8008a08 <aes_gen_tables>
        aes_init_done = 1;
 8008f04:	4b85      	ldr	r3, [pc, #532]	@ (800911c <mbedtls_aes_setkey_enc+0x26c>)
 8008f06:	2201      	movs	r2, #1
 8008f08:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	e027      	b.n	8008f6c <mbedtls_aes_setkey_enc+0xbc>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	4413      	add	r3, r2
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	4619      	mov	r1, r3
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	4413      	add	r3, r2
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	021b      	lsls	r3, r3, #8
 8008f36:	ea41 0203 	orr.w	r2, r1, r3
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	3302      	adds	r3, #2
 8008f40:	68b9      	ldr	r1, [r7, #8]
 8008f42:	440b      	add	r3, r1
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	041b      	lsls	r3, r3, #16
 8008f48:	ea42 0103 	orr.w	r1, r2, r3
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	3303      	adds	r3, #3
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	4413      	add	r3, r2
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	061a      	lsls	r2, r3, #24
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	6938      	ldr	r0, [r7, #16]
 8008f60:	4403      	add	r3, r0
 8008f62:	430a      	orrs	r2, r1
 8008f64:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d3d2      	bcc.n	8008f1c <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b0e      	cmp	r3, #14
 8008f7c:	f000 80ca 	beq.w	8009114 <mbedtls_aes_setkey_enc+0x264>
 8008f80:	2b0e      	cmp	r3, #14
 8008f82:	f300 816c 	bgt.w	800925e <mbedtls_aes_setkey_enc+0x3ae>
 8008f86:	2b0a      	cmp	r3, #10
 8008f88:	d002      	beq.n	8008f90 <mbedtls_aes_setkey_enc+0xe0>
 8008f8a:	2b0c      	cmp	r3, #12
 8008f8c:	d057      	beq.n	800903e <mbedtls_aes_setkey_enc+0x18e>
 8008f8e:	e166      	b.n	800925e <mbedtls_aes_setkey_enc+0x3ae>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8008f90:	2300      	movs	r3, #0
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e04f      	b.n	8009036 <mbedtls_aes_setkey_enc+0x186>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	4961      	ldr	r1, [pc, #388]	@ (8009120 <mbedtls_aes_setkey_enc+0x270>)
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008fa2:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	320c      	adds	r2, #12
 8008fa8:	6812      	ldr	r2, [r2, #0]
 8008faa:	0a12      	lsrs	r2, r2, #8
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	495d      	ldr	r1, [pc, #372]	@ (8009124 <mbedtls_aes_setkey_enc+0x274>)
 8008fb0:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8008fb2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	330c      	adds	r3, #12
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	0c1b      	lsrs	r3, r3, #16
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	4959      	ldr	r1, [pc, #356]	@ (8009124 <mbedtls_aes_setkey_enc+0x274>)
 8008fc0:	5ccb      	ldrb	r3, [r1, r3]
 8008fc2:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8008fc4:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	330c      	adds	r3, #12
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	0e1b      	lsrs	r3, r3, #24
 8008fce:	4955      	ldr	r1, [pc, #340]	@ (8009124 <mbedtls_aes_setkey_enc+0x274>)
 8008fd0:	5ccb      	ldrb	r3, [r1, r3]
 8008fd2:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8008fd4:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	330c      	adds	r3, #12
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4a50      	ldr	r2, [pc, #320]	@ (8009124 <mbedtls_aes_setkey_enc+0x274>)
 8008fe2:	5cd3      	ldrb	r3, [r2, r3]
 8008fe4:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8008fea:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8008fec:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	6819      	ldr	r1, [r3, #0]
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	3310      	adds	r3, #16
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	3314      	adds	r3, #20
 8008ffe:	404a      	eors	r2, r1
 8009000:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	3308      	adds	r3, #8
 8009006:	6819      	ldr	r1, [r3, #0]
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	3314      	adds	r3, #20
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	3318      	adds	r3, #24
 8009012:	404a      	eors	r2, r1
 8009014:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	330c      	adds	r3, #12
 800901a:	6819      	ldr	r1, [r3, #0]
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	3318      	adds	r3, #24
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	331c      	adds	r3, #28
 8009026:	404a      	eors	r2, r1
 8009028:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	3301      	adds	r3, #1
 800902e:	617b      	str	r3, [r7, #20]
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	3310      	adds	r3, #16
 8009034:	613b      	str	r3, [r7, #16]
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b09      	cmp	r3, #9
 800903a:	d9ac      	bls.n	8008f96 <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 800903c:	e10f      	b.n	800925e <mbedtls_aes_setkey_enc+0x3ae>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 800903e:	2300      	movs	r3, #0
 8009040:	617b      	str	r3, [r7, #20]
 8009042:	e063      	b.n	800910c <mbedtls_aes_setkey_enc+0x25c>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	4935      	ldr	r1, [pc, #212]	@ (8009120 <mbedtls_aes_setkey_enc+0x270>)
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009050:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	3214      	adds	r2, #20
 8009056:	6812      	ldr	r2, [r2, #0]
 8009058:	0a12      	lsrs	r2, r2, #8
 800905a:	b2d2      	uxtb	r2, r2
 800905c:	4931      	ldr	r1, [pc, #196]	@ (8009124 <mbedtls_aes_setkey_enc+0x274>)
 800905e:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8009060:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	3314      	adds	r3, #20
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	0c1b      	lsrs	r3, r3, #16
 800906a:	b2db      	uxtb	r3, r3
 800906c:	492d      	ldr	r1, [pc, #180]	@ (8009124 <mbedtls_aes_setkey_enc+0x274>)
 800906e:	5ccb      	ldrb	r3, [r1, r3]
 8009070:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8009072:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	3314      	adds	r3, #20
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	0e1b      	lsrs	r3, r3, #24
 800907c:	4929      	ldr	r1, [pc, #164]	@ (8009124 <mbedtls_aes_setkey_enc+0x274>)
 800907e:	5ccb      	ldrb	r3, [r1, r3]
 8009080:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8009082:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	3314      	adds	r3, #20
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	b2db      	uxtb	r3, r3
 800908e:	4a25      	ldr	r2, [pc, #148]	@ (8009124 <mbedtls_aes_setkey_enc+0x274>)
 8009090:	5cd3      	ldrb	r3, [r2, r3]
 8009092:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009098:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 800909a:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	3304      	adds	r3, #4
 80090a0:	6819      	ldr	r1, [r3, #0]
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	3318      	adds	r3, #24
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	331c      	adds	r3, #28
 80090ac:	404a      	eors	r2, r1
 80090ae:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	3308      	adds	r3, #8
 80090b4:	6819      	ldr	r1, [r3, #0]
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	331c      	adds	r3, #28
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	3320      	adds	r3, #32
 80090c0:	404a      	eors	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	330c      	adds	r3, #12
 80090c8:	6819      	ldr	r1, [r3, #0]
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	3320      	adds	r3, #32
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	3324      	adds	r3, #36	@ 0x24
 80090d4:	404a      	eors	r2, r1
 80090d6:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	3310      	adds	r3, #16
 80090dc:	6819      	ldr	r1, [r3, #0]
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	3324      	adds	r3, #36	@ 0x24
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	3328      	adds	r3, #40	@ 0x28
 80090e8:	404a      	eors	r2, r1
 80090ea:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	3314      	adds	r3, #20
 80090f0:	6819      	ldr	r1, [r3, #0]
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3328      	adds	r3, #40	@ 0x28
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	332c      	adds	r3, #44	@ 0x2c
 80090fc:	404a      	eors	r2, r1
 80090fe:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	3301      	adds	r3, #1
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	3318      	adds	r3, #24
 800910a:	613b      	str	r3, [r7, #16]
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2b07      	cmp	r3, #7
 8009110:	d998      	bls.n	8009044 <mbedtls_aes_setkey_enc+0x194>
            }
            break;
 8009112:	e0a4      	b.n	800925e <mbedtls_aes_setkey_enc+0x3ae>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8009114:	2300      	movs	r3, #0
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	e09c      	b.n	8009254 <mbedtls_aes_setkey_enc+0x3a4>
 800911a:	bf00      	nop
 800911c:	24002570 	.word	0x24002570
 8009120:	24002548 	.word	0x24002548
 8009124:	24000348 	.word	0x24000348
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	494e      	ldr	r1, [pc, #312]	@ (8009268 <mbedtls_aes_setkey_enc+0x3b8>)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009134:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	321c      	adds	r2, #28
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	0a12      	lsrs	r2, r2, #8
 800913e:	b2d2      	uxtb	r2, r2
 8009140:	494a      	ldr	r1, [pc, #296]	@ (800926c <mbedtls_aes_setkey_enc+0x3bc>)
 8009142:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 8009144:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	331c      	adds	r3, #28
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	0c1b      	lsrs	r3, r3, #16
 800914e:	b2db      	uxtb	r3, r3
 8009150:	4946      	ldr	r1, [pc, #280]	@ (800926c <mbedtls_aes_setkey_enc+0x3bc>)
 8009152:	5ccb      	ldrb	r3, [r1, r3]
 8009154:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8009156:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	331c      	adds	r3, #28
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	0e1b      	lsrs	r3, r3, #24
 8009160:	4942      	ldr	r1, [pc, #264]	@ (800926c <mbedtls_aes_setkey_enc+0x3bc>)
 8009162:	5ccb      	ldrb	r3, [r1, r3]
 8009164:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8009166:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	331c      	adds	r3, #28
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	4a3e      	ldr	r2, [pc, #248]	@ (800926c <mbedtls_aes_setkey_enc+0x3bc>)
 8009174:	5cd3      	ldrb	r3, [r2, r3]
 8009176:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800917c:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800917e:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	3304      	adds	r3, #4
 8009184:	6819      	ldr	r1, [r3, #0]
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	3320      	adds	r3, #32
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	3324      	adds	r3, #36	@ 0x24
 8009190:	404a      	eors	r2, r1
 8009192:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	3308      	adds	r3, #8
 8009198:	6819      	ldr	r1, [r3, #0]
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	3324      	adds	r3, #36	@ 0x24
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	3328      	adds	r3, #40	@ 0x28
 80091a4:	404a      	eors	r2, r1
 80091a6:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	330c      	adds	r3, #12
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	3328      	adds	r3, #40	@ 0x28
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	332c      	adds	r3, #44	@ 0x2c
 80091b8:	404a      	eors	r2, r1
 80091ba:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	3310      	adds	r3, #16
 80091c0:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	322c      	adds	r2, #44	@ 0x2c
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	b2d2      	uxtb	r2, r2
 80091ca:	4928      	ldr	r1, [pc, #160]	@ (800926c <mbedtls_aes_setkey_enc+0x3bc>)
 80091cc:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 80091ce:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	332c      	adds	r3, #44	@ 0x2c
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	0a1b      	lsrs	r3, r3, #8
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	4924      	ldr	r1, [pc, #144]	@ (800926c <mbedtls_aes_setkey_enc+0x3bc>)
 80091dc:	5ccb      	ldrb	r3, [r1, r3]
 80091de:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80091e0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	332c      	adds	r3, #44	@ 0x2c
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	0c1b      	lsrs	r3, r3, #16
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	491f      	ldr	r1, [pc, #124]	@ (800926c <mbedtls_aes_setkey_enc+0x3bc>)
 80091ee:	5ccb      	ldrb	r3, [r1, r3]
 80091f0:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80091f2:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	332c      	adds	r3, #44	@ 0x2c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	0e1b      	lsrs	r3, r3, #24
 80091fe:	4a1b      	ldr	r2, [pc, #108]	@ (800926c <mbedtls_aes_setkey_enc+0x3bc>)
 8009200:	5cd3      	ldrb	r3, [r2, r3]
 8009202:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8009208:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 800920a:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	3314      	adds	r3, #20
 8009210:	6819      	ldr	r1, [r3, #0]
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	3330      	adds	r3, #48	@ 0x30
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3334      	adds	r3, #52	@ 0x34
 800921c:	404a      	eors	r2, r1
 800921e:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	3318      	adds	r3, #24
 8009224:	6819      	ldr	r1, [r3, #0]
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	3334      	adds	r3, #52	@ 0x34
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	3338      	adds	r3, #56	@ 0x38
 8009230:	404a      	eors	r2, r1
 8009232:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	331c      	adds	r3, #28
 8009238:	6819      	ldr	r1, [r3, #0]
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	3338      	adds	r3, #56	@ 0x38
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	333c      	adds	r3, #60	@ 0x3c
 8009244:	404a      	eors	r2, r1
 8009246:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	3301      	adds	r3, #1
 800924c:	617b      	str	r3, [r7, #20]
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	3320      	adds	r3, #32
 8009252:	613b      	str	r3, [r7, #16]
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2b06      	cmp	r3, #6
 8009258:	f67f af66 	bls.w	8009128 <mbedtls_aes_setkey_enc+0x278>
            }
            break;
 800925c:	bf00      	nop
    }

    return( 0 );
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	24002548 	.word	0x24002548
 800926c:	24000348 	.word	0x24000348

08009270 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b0d0      	sub	sp, #320	@ 0x140
 8009274:	af00      	add	r7, sp, #0
 8009276:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800927a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800927e:	6018      	str	r0, [r3, #0]
 8009280:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009284:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009288:	6019      	str	r1, [r3, #0]
 800928a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800928e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8009292:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8009294:	f107 0314 	add.w	r3, r7, #20
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fde9 	bl	8008e70 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800929e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	3308      	adds	r3, #8
 80092aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80092ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80092bc:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 80092be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092c2:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80092c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80092ce:	f107 0014 	add.w	r0, r7, #20
 80092d2:	6812      	ldr	r2, [r2, #0]
 80092d4:	6819      	ldr	r1, [r3, #0]
 80092d6:	f7ff fdeb 	bl	8008eb0 <mbedtls_aes_setkey_enc>
 80092da:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 80092de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f040 80dd 	bne.w	80094a2 <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 80092e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80092fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009302:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800930c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	011b      	lsls	r3, r3, #4
 8009314:	4413      	add	r3, r2
 8009316:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 800931a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800931e:	1d13      	adds	r3, r2, #4
 8009320:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009324:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009328:	1d19      	adds	r1, r3, #4
 800932a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009332:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009336:	1d13      	adds	r3, r2, #4
 8009338:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800933c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009340:	1d19      	adds	r1, r3, #4
 8009342:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009346:	6812      	ldr	r2, [r2, #0]
 8009348:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800934a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800934e:	1d13      	adds	r3, r2, #4
 8009350:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009354:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009358:	1d19      	adds	r1, r3, #4
 800935a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800935e:	6812      	ldr	r2, [r2, #0]
 8009360:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009362:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009366:	1d13      	adds	r3, r2, #4
 8009368:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800936c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009370:	1d19      	adds	r1, r3, #4
 8009372:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009376:	6812      	ldr	r2, [r2, #0]
 8009378:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800937a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800937e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3b01      	subs	r3, #1
 8009388:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800938c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009390:	3b20      	subs	r3, #32
 8009392:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009396:	e04f      	b.n	8009438 <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 8009398:	2300      	movs	r3, #0
 800939a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800939e:	e03d      	b.n	800941c <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80093a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	4a44      	ldr	r2, [pc, #272]	@ (80094bc <mbedtls_aes_setkey_dec+0x24c>)
 80093aa:	5cd3      	ldrb	r3, [r2, r3]
 80093ac:	461a      	mov	r2, r3
 80093ae:	4b44      	ldr	r3, [pc, #272]	@ (80094c0 <mbedtls_aes_setkey_dec+0x250>)
 80093b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80093b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	493f      	ldr	r1, [pc, #252]	@ (80094bc <mbedtls_aes_setkey_dec+0x24c>)
 80093c0:	5ccb      	ldrb	r3, [r1, r3]
 80093c2:	4619      	mov	r1, r3
 80093c4:	4b3f      	ldr	r3, [pc, #252]	@ (80094c4 <mbedtls_aes_setkey_dec+0x254>)
 80093c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80093ca:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80093cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	0c1b      	lsrs	r3, r3, #16
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	4939      	ldr	r1, [pc, #228]	@ (80094bc <mbedtls_aes_setkey_dec+0x24c>)
 80093d8:	5ccb      	ldrb	r3, [r1, r3]
 80093da:	4619      	mov	r1, r3
 80093dc:	4b3a      	ldr	r3, [pc, #232]	@ (80094c8 <mbedtls_aes_setkey_dec+0x258>)
 80093de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80093e2:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80093e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	0e1b      	lsrs	r3, r3, #24
 80093ee:	4a33      	ldr	r2, [pc, #204]	@ (80094bc <mbedtls_aes_setkey_dec+0x24c>)
 80093f0:	5cd3      	ldrb	r3, [r2, r3]
 80093f2:	461a      	mov	r2, r3
 80093f4:	4b35      	ldr	r3, [pc, #212]	@ (80094cc <mbedtls_aes_setkey_dec+0x25c>)
 80093f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80093fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80093fe:	1d18      	adds	r0, r3, #4
 8009400:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009404:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009406:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 8009408:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800940c:	3301      	adds	r3, #1
 800940e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8009412:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009416:	3304      	adds	r3, #4
 8009418:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800941c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009420:	2b03      	cmp	r3, #3
 8009422:	ddbd      	ble.n	80093a0 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8009424:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009428:	3b01      	subs	r3, #1
 800942a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800942e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009432:	3b20      	subs	r3, #32
 8009434:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009438:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800943c:	2b00      	cmp	r3, #0
 800943e:	dcab      	bgt.n	8009398 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8009440:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009444:	1d13      	adds	r3, r2, #4
 8009446:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800944a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800944e:	1d19      	adds	r1, r3, #4
 8009450:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009454:	6812      	ldr	r2, [r2, #0]
 8009456:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009458:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800945c:	1d13      	adds	r3, r2, #4
 800945e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009462:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009466:	1d19      	adds	r1, r3, #4
 8009468:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800946c:	6812      	ldr	r2, [r2, #0]
 800946e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009470:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009474:	1d13      	adds	r3, r2, #4
 8009476:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800947a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800947e:	1d19      	adds	r1, r3, #4
 8009480:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009484:	6812      	ldr	r2, [r2, #0]
 8009486:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8009488:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800948c:	1d13      	adds	r3, r2, #4
 800948e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009492:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009496:	1d19      	adds	r1, r3, #4
 8009498:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800949c:	6812      	ldr	r2, [r2, #0]
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	e000      	b.n	80094a4 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 80094a2:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 80094a4:	f107 0314 	add.w	r3, r7, #20
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff fcef 	bl	8008e8c <mbedtls_aes_free>

    return( ret );
 80094ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	24000348 	.word	0x24000348
 80094c0:	24001548 	.word	0x24001548
 80094c4:	24001948 	.word	0x24001948
 80094c8:	24001d48 	.word	0x24001d48
 80094cc:	24002148 	.word	0x24002148

080094d0 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80094d0:	b480      	push	{r7}
 80094d2:	b08f      	sub	sp, #60	@ 0x3c
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3301      	adds	r3, #1
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	431a      	orrs	r2, r3
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	3302      	adds	r3, #2
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	041b      	lsls	r3, r3, #16
 80094fa:	431a      	orrs	r2, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	3303      	adds	r3, #3
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	061b      	lsls	r3, r3, #24
 8009504:	4313      	orrs	r3, r2
 8009506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950a:	1d1a      	adds	r2, r3, #4
 800950c:	633a      	str	r2, [r7, #48]	@ 0x30
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009512:	4053      	eors	r3, r2
 8009514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	3304      	adds	r3, #4
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	3305      	adds	r3, #5
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	021b      	lsls	r3, r3, #8
 8009526:	431a      	orrs	r2, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	3306      	adds	r3, #6
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	041b      	lsls	r3, r3, #16
 8009530:	431a      	orrs	r2, r3
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	3307      	adds	r3, #7
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	061b      	lsls	r3, r3, #24
 800953a:	4313      	orrs	r3, r2
 800953c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	1d1a      	adds	r2, r3, #4
 8009542:	633a      	str	r2, [r7, #48]	@ 0x30
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009548:	4053      	eors	r3, r2
 800954a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	3308      	adds	r3, #8
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	3309      	adds	r3, #9
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	021b      	lsls	r3, r3, #8
 800955c:	431a      	orrs	r2, r3
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	330a      	adds	r3, #10
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	041b      	lsls	r3, r3, #16
 8009566:	431a      	orrs	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	330b      	adds	r3, #11
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	061b      	lsls	r3, r3, #24
 8009570:	4313      	orrs	r3, r2
 8009572:	627b      	str	r3, [r7, #36]	@ 0x24
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	1d1a      	adds	r2, r3, #4
 8009578:	633a      	str	r2, [r7, #48]	@ 0x30
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800957e:	4053      	eors	r3, r2
 8009580:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	330c      	adds	r3, #12
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	461a      	mov	r2, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	330d      	adds	r3, #13
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	021b      	lsls	r3, r3, #8
 8009592:	431a      	orrs	r2, r3
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	330e      	adds	r3, #14
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	041b      	lsls	r3, r3, #16
 800959c:	431a      	orrs	r2, r3
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	330f      	adds	r3, #15
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	061b      	lsls	r3, r3, #24
 80095a6:	4313      	orrs	r3, r2
 80095a8:	623b      	str	r3, [r7, #32]
 80095aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ac:	1d1a      	adds	r2, r3, #4
 80095ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6a3a      	ldr	r2, [r7, #32]
 80095b4:	4053      	eors	r3, r2
 80095b6:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	105b      	asrs	r3, r3, #1
 80095be:	3b01      	subs	r3, #1
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c2:	e0fa      	b.n	80097ba <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	1d1a      	adds	r2, r3, #4
 80095c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	49ab      	ldr	r1, [pc, #684]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 80095d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80095d6:	405a      	eors	r2, r3
 80095d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095da:	0a1b      	lsrs	r3, r3, #8
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	49a9      	ldr	r1, [pc, #676]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 80095e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80095e4:	405a      	eors	r2, r3
 80095e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e8:	0c1b      	lsrs	r3, r3, #16
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	49a6      	ldr	r1, [pc, #664]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 80095ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80095f2:	405a      	eors	r2, r3
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	0e1b      	lsrs	r3, r3, #24
 80095f8:	49a4      	ldr	r1, [pc, #656]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 80095fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80095fe:	4053      	eors	r3, r2
 8009600:	61fb      	str	r3, [r7, #28]
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	1d1a      	adds	r2, r3, #4
 8009606:	633a      	str	r2, [r7, #48]	@ 0x30
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960c:	b2db      	uxtb	r3, r3
 800960e:	499c      	ldr	r1, [pc, #624]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 8009610:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009614:	405a      	eors	r2, r3
 8009616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009618:	0a1b      	lsrs	r3, r3, #8
 800961a:	b2db      	uxtb	r3, r3
 800961c:	4999      	ldr	r1, [pc, #612]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 800961e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009622:	405a      	eors	r2, r3
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	0c1b      	lsrs	r3, r3, #16
 8009628:	b2db      	uxtb	r3, r3
 800962a:	4997      	ldr	r1, [pc, #604]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 800962c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009630:	405a      	eors	r2, r3
 8009632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009634:	0e1b      	lsrs	r3, r3, #24
 8009636:	4995      	ldr	r1, [pc, #596]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 8009638:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800963c:	4053      	eors	r3, r2
 800963e:	61bb      	str	r3, [r7, #24]
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	1d1a      	adds	r2, r3, #4
 8009644:	633a      	str	r2, [r7, #48]	@ 0x30
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964a:	b2db      	uxtb	r3, r3
 800964c:	498c      	ldr	r1, [pc, #560]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 800964e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009652:	405a      	eors	r2, r3
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	0a1b      	lsrs	r3, r3, #8
 8009658:	b2db      	uxtb	r3, r3
 800965a:	498a      	ldr	r1, [pc, #552]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 800965c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009660:	405a      	eors	r2, r3
 8009662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009664:	0c1b      	lsrs	r3, r3, #16
 8009666:	b2db      	uxtb	r3, r3
 8009668:	4987      	ldr	r1, [pc, #540]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 800966a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800966e:	405a      	eors	r2, r3
 8009670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009672:	0e1b      	lsrs	r3, r3, #24
 8009674:	4985      	ldr	r1, [pc, #532]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 8009676:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800967a:	4053      	eors	r3, r2
 800967c:	617b      	str	r3, [r7, #20]
 800967e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009680:	1d1a      	adds	r2, r3, #4
 8009682:	633a      	str	r2, [r7, #48]	@ 0x30
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	497d      	ldr	r1, [pc, #500]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 800968c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009690:	405a      	eors	r2, r3
 8009692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009694:	0a1b      	lsrs	r3, r3, #8
 8009696:	b2db      	uxtb	r3, r3
 8009698:	497a      	ldr	r1, [pc, #488]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 800969a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800969e:	405a      	eors	r2, r3
 80096a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a2:	0c1b      	lsrs	r3, r3, #16
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	4978      	ldr	r1, [pc, #480]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 80096a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096ac:	405a      	eors	r2, r3
 80096ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b0:	0e1b      	lsrs	r3, r3, #24
 80096b2:	4976      	ldr	r1, [pc, #472]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 80096b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096b8:	4053      	eors	r3, r2
 80096ba:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80096bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	496d      	ldr	r1, [pc, #436]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 80096ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096ce:	405a      	eors	r2, r3
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	0a1b      	lsrs	r3, r3, #8
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	496b      	ldr	r1, [pc, #428]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 80096d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096dc:	405a      	eors	r2, r3
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	0c1b      	lsrs	r3, r3, #16
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	4968      	ldr	r1, [pc, #416]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 80096e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096ea:	405a      	eors	r2, r3
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	0e1b      	lsrs	r3, r3, #24
 80096f0:	4966      	ldr	r1, [pc, #408]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 80096f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096f6:	4053      	eors	r3, r2
 80096f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	1d1a      	adds	r2, r3, #4
 80096fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	b2db      	uxtb	r3, r3
 8009706:	495e      	ldr	r1, [pc, #376]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 8009708:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800970c:	405a      	eors	r2, r3
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	0a1b      	lsrs	r3, r3, #8
 8009712:	b2db      	uxtb	r3, r3
 8009714:	495b      	ldr	r1, [pc, #364]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 8009716:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800971a:	405a      	eors	r2, r3
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	0c1b      	lsrs	r3, r3, #16
 8009720:	b2db      	uxtb	r3, r3
 8009722:	4959      	ldr	r1, [pc, #356]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009724:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009728:	405a      	eors	r2, r3
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	0e1b      	lsrs	r3, r3, #24
 800972e:	4957      	ldr	r1, [pc, #348]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 8009730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009734:	4053      	eors	r3, r2
 8009736:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973a:	1d1a      	adds	r2, r3, #4
 800973c:	633a      	str	r2, [r7, #48]	@ 0x30
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	494e      	ldr	r1, [pc, #312]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 8009746:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800974a:	405a      	eors	r2, r3
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	0a1b      	lsrs	r3, r3, #8
 8009750:	b2db      	uxtb	r3, r3
 8009752:	494c      	ldr	r1, [pc, #304]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 8009754:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009758:	405a      	eors	r2, r3
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	0c1b      	lsrs	r3, r3, #16
 800975e:	b2db      	uxtb	r3, r3
 8009760:	4949      	ldr	r1, [pc, #292]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009762:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009766:	405a      	eors	r2, r3
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	0e1b      	lsrs	r3, r3, #24
 800976c:	4947      	ldr	r1, [pc, #284]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 800976e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009772:	4053      	eors	r3, r2
 8009774:	627b      	str	r3, [r7, #36]	@ 0x24
 8009776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009778:	1d1a      	adds	r2, r3, #4
 800977a:	633a      	str	r2, [r7, #48]	@ 0x30
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	b2db      	uxtb	r3, r3
 8009782:	493f      	ldr	r1, [pc, #252]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 8009784:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009788:	405a      	eors	r2, r3
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	0a1b      	lsrs	r3, r3, #8
 800978e:	b2db      	uxtb	r3, r3
 8009790:	493c      	ldr	r1, [pc, #240]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 8009792:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009796:	405a      	eors	r2, r3
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	0c1b      	lsrs	r3, r3, #16
 800979c:	b2db      	uxtb	r3, r3
 800979e:	493a      	ldr	r1, [pc, #232]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 80097a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097a4:	405a      	eors	r2, r3
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	0e1b      	lsrs	r3, r3, #24
 80097aa:	4938      	ldr	r1, [pc, #224]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 80097ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097b0:	4053      	eors	r3, r2
 80097b2:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80097b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b6:	3b01      	subs	r3, #1
 80097b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f73f af01 	bgt.w	80095c4 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80097c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c4:	1d1a      	adds	r2, r3, #4
 80097c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	492c      	ldr	r1, [pc, #176]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 80097d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097d4:	405a      	eors	r2, r3
 80097d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d8:	0a1b      	lsrs	r3, r3, #8
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	4929      	ldr	r1, [pc, #164]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 80097de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097e2:	405a      	eors	r2, r3
 80097e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e6:	0c1b      	lsrs	r3, r3, #16
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	4927      	ldr	r1, [pc, #156]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 80097ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097f0:	405a      	eors	r2, r3
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	0e1b      	lsrs	r3, r3, #24
 80097f6:	4925      	ldr	r1, [pc, #148]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 80097f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097fc:	4053      	eors	r3, r2
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009802:	1d1a      	adds	r2, r3, #4
 8009804:	633a      	str	r2, [r7, #48]	@ 0x30
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980a:	b2db      	uxtb	r3, r3
 800980c:	491c      	ldr	r1, [pc, #112]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 800980e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009812:	405a      	eors	r2, r3
 8009814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009816:	0a1b      	lsrs	r3, r3, #8
 8009818:	b2db      	uxtb	r3, r3
 800981a:	491a      	ldr	r1, [pc, #104]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 800981c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009820:	405a      	eors	r2, r3
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	0c1b      	lsrs	r3, r3, #16
 8009826:	b2db      	uxtb	r3, r3
 8009828:	4917      	ldr	r1, [pc, #92]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 800982a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800982e:	405a      	eors	r2, r3
 8009830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009832:	0e1b      	lsrs	r3, r3, #24
 8009834:	4915      	ldr	r1, [pc, #84]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 8009836:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800983a:	4053      	eors	r3, r2
 800983c:	61bb      	str	r3, [r7, #24]
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	1d1a      	adds	r2, r3, #4
 8009842:	633a      	str	r2, [r7, #48]	@ 0x30
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	b2db      	uxtb	r3, r3
 800984a:	490d      	ldr	r1, [pc, #52]	@ (8009880 <mbedtls_internal_aes_encrypt+0x3b0>)
 800984c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009850:	405a      	eors	r2, r3
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	0a1b      	lsrs	r3, r3, #8
 8009856:	b2db      	uxtb	r3, r3
 8009858:	490a      	ldr	r1, [pc, #40]	@ (8009884 <mbedtls_internal_aes_encrypt+0x3b4>)
 800985a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800985e:	405a      	eors	r2, r3
 8009860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009862:	0c1b      	lsrs	r3, r3, #16
 8009864:	b2db      	uxtb	r3, r3
 8009866:	4908      	ldr	r1, [pc, #32]	@ (8009888 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009868:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800986c:	405a      	eors	r2, r3
 800986e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009870:	0e1b      	lsrs	r3, r3, #24
 8009872:	4906      	ldr	r1, [pc, #24]	@ (800988c <mbedtls_internal_aes_encrypt+0x3bc>)
 8009874:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009878:	4053      	eors	r3, r2
 800987a:	617b      	str	r3, [r7, #20]
 800987c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987e:	e007      	b.n	8009890 <mbedtls_internal_aes_encrypt+0x3c0>
 8009880:	24000448 	.word	0x24000448
 8009884:	24000848 	.word	0x24000848
 8009888:	24000c48 	.word	0x24000c48
 800988c:	24001048 	.word	0x24001048
 8009890:	1d1a      	adds	r2, r3, #4
 8009892:	633a      	str	r2, [r7, #48]	@ 0x30
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	6a3b      	ldr	r3, [r7, #32]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	4979      	ldr	r1, [pc, #484]	@ (8009a80 <mbedtls_internal_aes_encrypt+0x5b0>)
 800989c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098a0:	405a      	eors	r2, r3
 80098a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a4:	0a1b      	lsrs	r3, r3, #8
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	4976      	ldr	r1, [pc, #472]	@ (8009a84 <mbedtls_internal_aes_encrypt+0x5b4>)
 80098aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098ae:	405a      	eors	r2, r3
 80098b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b2:	0c1b      	lsrs	r3, r3, #16
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	4974      	ldr	r1, [pc, #464]	@ (8009a88 <mbedtls_internal_aes_encrypt+0x5b8>)
 80098b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098bc:	405a      	eors	r2, r3
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	0e1b      	lsrs	r3, r3, #24
 80098c2:	4972      	ldr	r1, [pc, #456]	@ (8009a8c <mbedtls_internal_aes_encrypt+0x5bc>)
 80098c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098c8:	4053      	eors	r3, r2
 80098ca:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 80098cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ce:	1d1a      	adds	r2, r3, #4
 80098d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80098d2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	b2d2      	uxtb	r2, r2
 80098d8:	496d      	ldr	r1, [pc, #436]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 80098da:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 80098dc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	0a1b      	lsrs	r3, r3, #8
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	496a      	ldr	r1, [pc, #424]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 80098e6:	5ccb      	ldrb	r3, [r1, r3]
 80098e8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80098ea:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	0c1b      	lsrs	r3, r3, #16
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	4967      	ldr	r1, [pc, #412]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 80098f4:	5ccb      	ldrb	r3, [r1, r3]
 80098f6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80098f8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	0e1b      	lsrs	r3, r3, #24
 80098fe:	4964      	ldr	r1, [pc, #400]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009900:	5ccb      	ldrb	r3, [r1, r3]
 8009902:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8009904:	4053      	eors	r3, r2
 8009906:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8009908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990a:	1d1a      	adds	r2, r3, #4
 800990c:	633a      	str	r2, [r7, #48]	@ 0x30
 800990e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	495e      	ldr	r1, [pc, #376]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009916:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8009918:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	0a1b      	lsrs	r3, r3, #8
 800991e:	b2db      	uxtb	r3, r3
 8009920:	495b      	ldr	r1, [pc, #364]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009922:	5ccb      	ldrb	r3, [r1, r3]
 8009924:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8009926:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	0c1b      	lsrs	r3, r3, #16
 800992c:	b2db      	uxtb	r3, r3
 800992e:	4958      	ldr	r1, [pc, #352]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009930:	5ccb      	ldrb	r3, [r1, r3]
 8009932:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009934:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	0e1b      	lsrs	r3, r3, #24
 800993a:	4955      	ldr	r1, [pc, #340]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 800993c:	5ccb      	ldrb	r3, [r1, r3]
 800993e:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8009940:	4053      	eors	r3, r2
 8009942:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8009944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009946:	1d1a      	adds	r2, r3, #4
 8009948:	633a      	str	r2, [r7, #48]	@ 0x30
 800994a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	494f      	ldr	r1, [pc, #316]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009952:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8009954:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	0a1b      	lsrs	r3, r3, #8
 800995a:	b2db      	uxtb	r3, r3
 800995c:	494c      	ldr	r1, [pc, #304]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 800995e:	5ccb      	ldrb	r3, [r1, r3]
 8009960:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8009962:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8009964:	69fb      	ldr	r3, [r7, #28]
 8009966:	0c1b      	lsrs	r3, r3, #16
 8009968:	b2db      	uxtb	r3, r3
 800996a:	4949      	ldr	r1, [pc, #292]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 800996c:	5ccb      	ldrb	r3, [r1, r3]
 800996e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009970:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	0e1b      	lsrs	r3, r3, #24
 8009976:	4946      	ldr	r1, [pc, #280]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009978:	5ccb      	ldrb	r3, [r1, r3]
 800997a:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 800997c:	4053      	eors	r3, r2
 800997e:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	1d1a      	adds	r2, r3, #4
 8009984:	633a      	str	r2, [r7, #48]	@ 0x30
 8009986:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	b2d2      	uxtb	r2, r2
 800998c:	4940      	ldr	r1, [pc, #256]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 800998e:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8009990:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	0a1b      	lsrs	r3, r3, #8
 8009996:	b2db      	uxtb	r3, r3
 8009998:	493d      	ldr	r1, [pc, #244]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 800999a:	5ccb      	ldrb	r3, [r1, r3]
 800999c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800999e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	0c1b      	lsrs	r3, r3, #16
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	493a      	ldr	r1, [pc, #232]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 80099a8:	5ccb      	ldrb	r3, [r1, r3]
 80099aa:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80099ac:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	0e1b      	lsrs	r3, r3, #24
 80099b2:	4937      	ldr	r1, [pc, #220]	@ (8009a90 <mbedtls_internal_aes_encrypt+0x5c0>)
 80099b4:	5ccb      	ldrb	r3, [r1, r3]
 80099b6:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 80099b8:	4053      	eors	r3, r2
 80099ba:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	701a      	strb	r2, [r3, #0]
 80099c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c6:	0a1a      	lsrs	r2, r3, #8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3301      	adds	r3, #1
 80099cc:	b2d2      	uxtb	r2, r2
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d2:	0c1a      	lsrs	r2, r3, #16
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3302      	adds	r3, #2
 80099d8:	b2d2      	uxtb	r2, r2
 80099da:	701a      	strb	r2, [r3, #0]
 80099dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099de:	0e1a      	lsrs	r2, r3, #24
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3303      	adds	r3, #3
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3304      	adds	r3, #4
 80099ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	701a      	strb	r2, [r3, #0]
 80099f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f4:	0a1a      	lsrs	r2, r3, #8
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	3305      	adds	r3, #5
 80099fa:	b2d2      	uxtb	r2, r2
 80099fc:	701a      	strb	r2, [r3, #0]
 80099fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a00:	0c1a      	lsrs	r2, r3, #16
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	3306      	adds	r3, #6
 8009a06:	b2d2      	uxtb	r2, r2
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0c:	0e1a      	lsrs	r2, r3, #24
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3307      	adds	r3, #7
 8009a12:	b2d2      	uxtb	r2, r2
 8009a14:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	3308      	adds	r3, #8
 8009a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
 8009a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a22:	0a1a      	lsrs	r2, r3, #8
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3309      	adds	r3, #9
 8009a28:	b2d2      	uxtb	r2, r2
 8009a2a:	701a      	strb	r2, [r3, #0]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2e:	0c1a      	lsrs	r2, r3, #16
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	330a      	adds	r3, #10
 8009a34:	b2d2      	uxtb	r2, r2
 8009a36:	701a      	strb	r2, [r3, #0]
 8009a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3a:	0e1a      	lsrs	r2, r3, #24
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	330b      	adds	r3, #11
 8009a40:	b2d2      	uxtb	r2, r2
 8009a42:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	330c      	adds	r3, #12
 8009a48:	6a3a      	ldr	r2, [r7, #32]
 8009a4a:	b2d2      	uxtb	r2, r2
 8009a4c:	701a      	strb	r2, [r3, #0]
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	0a1a      	lsrs	r2, r3, #8
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	330d      	adds	r3, #13
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	701a      	strb	r2, [r3, #0]
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	0c1a      	lsrs	r2, r3, #16
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	330e      	adds	r3, #14
 8009a62:	b2d2      	uxtb	r2, r2
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	0e1a      	lsrs	r2, r3, #24
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	330f      	adds	r3, #15
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	373c      	adds	r7, #60	@ 0x3c
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	24000448 	.word	0x24000448
 8009a84:	24000848 	.word	0x24000848
 8009a88:	24000c48 	.word	0x24000c48
 8009a8c:	24001048 	.word	0x24001048
 8009a90:	24000348 	.word	0x24000348

08009a94 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b08f      	sub	sp, #60	@ 0x3c
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	021b      	lsls	r3, r3, #8
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	3302      	adds	r3, #2
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	041b      	lsls	r3, r3, #16
 8009abe:	431a      	orrs	r2, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	3303      	adds	r3, #3
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	061b      	lsls	r3, r3, #24
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	1d1a      	adds	r2, r3, #4
 8009ad0:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ad6:	4053      	eors	r3, r2
 8009ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	3304      	adds	r3, #4
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	3305      	adds	r3, #5
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	021b      	lsls	r3, r3, #8
 8009aea:	431a      	orrs	r2, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	3306      	adds	r3, #6
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	041b      	lsls	r3, r3, #16
 8009af4:	431a      	orrs	r2, r3
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	3307      	adds	r3, #7
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	061b      	lsls	r3, r3, #24
 8009afe:	4313      	orrs	r3, r2
 8009b00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b04:	1d1a      	adds	r2, r3, #4
 8009b06:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b0c:	4053      	eors	r3, r2
 8009b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	3308      	adds	r3, #8
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	3309      	adds	r3, #9
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	021b      	lsls	r3, r3, #8
 8009b20:	431a      	orrs	r2, r3
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	330a      	adds	r3, #10
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	041b      	lsls	r3, r3, #16
 8009b2a:	431a      	orrs	r2, r3
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	330b      	adds	r3, #11
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	061b      	lsls	r3, r3, #24
 8009b34:	4313      	orrs	r3, r2
 8009b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3a:	1d1a      	adds	r2, r3, #4
 8009b3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b42:	4053      	eors	r3, r2
 8009b44:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	330c      	adds	r3, #12
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	330d      	adds	r3, #13
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	021b      	lsls	r3, r3, #8
 8009b56:	431a      	orrs	r2, r3
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	330e      	adds	r3, #14
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	041b      	lsls	r3, r3, #16
 8009b60:	431a      	orrs	r2, r3
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	330f      	adds	r3, #15
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	061b      	lsls	r3, r3, #24
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	623b      	str	r3, [r7, #32]
 8009b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b70:	1d1a      	adds	r2, r3, #4
 8009b72:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6a3a      	ldr	r2, [r7, #32]
 8009b78:	4053      	eors	r3, r2
 8009b7a:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	105b      	asrs	r3, r3, #1
 8009b82:	3b01      	subs	r3, #1
 8009b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b86:	e0fa      	b.n	8009d7e <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8a:	1d1a      	adds	r2, r3, #4
 8009b8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	49ab      	ldr	r1, [pc, #684]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009b96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009b9a:	405a      	eors	r2, r3
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	0a1b      	lsrs	r3, r3, #8
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	49a9      	ldr	r1, [pc, #676]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009ba4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ba8:	405a      	eors	r2, r3
 8009baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bac:	0c1b      	lsrs	r3, r3, #16
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	49a6      	ldr	r1, [pc, #664]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009bb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009bb6:	405a      	eors	r2, r3
 8009bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bba:	0e1b      	lsrs	r3, r3, #24
 8009bbc:	49a4      	ldr	r1, [pc, #656]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009bbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009bc2:	4053      	eors	r3, r2
 8009bc4:	61fb      	str	r3, [r7, #28]
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bc8:	1d1a      	adds	r2, r3, #4
 8009bca:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	499c      	ldr	r1, [pc, #624]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009bd8:	405a      	eors	r2, r3
 8009bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bdc:	0a1b      	lsrs	r3, r3, #8
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	4999      	ldr	r1, [pc, #612]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009be2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009be6:	405a      	eors	r2, r3
 8009be8:	6a3b      	ldr	r3, [r7, #32]
 8009bea:	0c1b      	lsrs	r3, r3, #16
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	4997      	ldr	r1, [pc, #604]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009bf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009bf4:	405a      	eors	r2, r3
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf8:	0e1b      	lsrs	r3, r3, #24
 8009bfa:	4995      	ldr	r1, [pc, #596]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009bfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c00:	4053      	eors	r3, r2
 8009c02:	61bb      	str	r3, [r7, #24]
 8009c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c06:	1d1a      	adds	r2, r3, #4
 8009c08:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	498c      	ldr	r1, [pc, #560]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009c12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c16:	405a      	eors	r2, r3
 8009c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1a:	0a1b      	lsrs	r3, r3, #8
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	498a      	ldr	r1, [pc, #552]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009c20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c24:	405a      	eors	r2, r3
 8009c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c28:	0c1b      	lsrs	r3, r3, #16
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	4987      	ldr	r1, [pc, #540]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009c2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c32:	405a      	eors	r2, r3
 8009c34:	6a3b      	ldr	r3, [r7, #32]
 8009c36:	0e1b      	lsrs	r3, r3, #24
 8009c38:	4985      	ldr	r1, [pc, #532]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009c3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c3e:	4053      	eors	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]
 8009c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c44:	1d1a      	adds	r2, r3, #4
 8009c46:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	497d      	ldr	r1, [pc, #500]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009c50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c54:	405a      	eors	r2, r3
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	0a1b      	lsrs	r3, r3, #8
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	497a      	ldr	r1, [pc, #488]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009c5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c62:	405a      	eors	r2, r3
 8009c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c66:	0c1b      	lsrs	r3, r3, #16
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	4978      	ldr	r1, [pc, #480]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c70:	405a      	eors	r2, r3
 8009c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c74:	0e1b      	lsrs	r3, r3, #24
 8009c76:	4976      	ldr	r1, [pc, #472]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009c78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c7c:	4053      	eors	r3, r2
 8009c7e:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c82:	1d1a      	adds	r2, r3, #4
 8009c84:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	496d      	ldr	r1, [pc, #436]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009c8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c92:	405a      	eors	r2, r3
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	0a1b      	lsrs	r3, r3, #8
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	496b      	ldr	r1, [pc, #428]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009c9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ca0:	405a      	eors	r2, r3
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	0c1b      	lsrs	r3, r3, #16
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	4968      	ldr	r1, [pc, #416]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009caa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cae:	405a      	eors	r2, r3
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	0e1b      	lsrs	r3, r3, #24
 8009cb4:	4966      	ldr	r1, [pc, #408]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009cb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cba:	4053      	eors	r3, r2
 8009cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc0:	1d1a      	adds	r2, r3, #4
 8009cc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	495e      	ldr	r1, [pc, #376]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009ccc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cd0:	405a      	eors	r2, r3
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	0a1b      	lsrs	r3, r3, #8
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	495b      	ldr	r1, [pc, #364]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009cda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cde:	405a      	eors	r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	0c1b      	lsrs	r3, r3, #16
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	4959      	ldr	r1, [pc, #356]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009ce8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cec:	405a      	eors	r2, r3
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	0e1b      	lsrs	r3, r3, #24
 8009cf2:	4957      	ldr	r1, [pc, #348]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009cf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cf8:	4053      	eors	r3, r2
 8009cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfe:	1d1a      	adds	r2, r3, #4
 8009d00:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	494e      	ldr	r1, [pc, #312]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009d0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d0e:	405a      	eors	r2, r3
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	0a1b      	lsrs	r3, r3, #8
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	494c      	ldr	r1, [pc, #304]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009d18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d1c:	405a      	eors	r2, r3
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	0c1b      	lsrs	r3, r3, #16
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	4949      	ldr	r1, [pc, #292]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009d26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d2a:	405a      	eors	r2, r3
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	0e1b      	lsrs	r3, r3, #24
 8009d30:	4947      	ldr	r1, [pc, #284]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009d32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d36:	4053      	eors	r3, r2
 8009d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3c:	1d1a      	adds	r2, r3, #4
 8009d3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	493f      	ldr	r1, [pc, #252]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009d48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d4c:	405a      	eors	r2, r3
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	0a1b      	lsrs	r3, r3, #8
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	493c      	ldr	r1, [pc, #240]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009d56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d5a:	405a      	eors	r2, r3
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	0c1b      	lsrs	r3, r3, #16
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	493a      	ldr	r1, [pc, #232]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009d64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d68:	405a      	eors	r2, r3
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	0e1b      	lsrs	r3, r3, #24
 8009d6e:	4938      	ldr	r1, [pc, #224]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d74:	4053      	eors	r3, r2
 8009d76:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f73f af01 	bgt.w	8009b88 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	1d1a      	adds	r2, r3, #4
 8009d8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	492c      	ldr	r1, [pc, #176]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009d94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d98:	405a      	eors	r2, r3
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	0a1b      	lsrs	r3, r3, #8
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	4929      	ldr	r1, [pc, #164]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009da2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009da6:	405a      	eors	r2, r3
 8009da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009daa:	0c1b      	lsrs	r3, r3, #16
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	4927      	ldr	r1, [pc, #156]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009db0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009db4:	405a      	eors	r2, r3
 8009db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db8:	0e1b      	lsrs	r3, r3, #24
 8009dba:	4925      	ldr	r1, [pc, #148]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009dbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009dc0:	4053      	eors	r3, r2
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc6:	1d1a      	adds	r2, r3, #4
 8009dc8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	491c      	ldr	r1, [pc, #112]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009dd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009dd6:	405a      	eors	r2, r3
 8009dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dda:	0a1b      	lsrs	r3, r3, #8
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	491a      	ldr	r1, [pc, #104]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009de0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009de4:	405a      	eors	r2, r3
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	0c1b      	lsrs	r3, r3, #16
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	4917      	ldr	r1, [pc, #92]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009dee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009df2:	405a      	eors	r2, r3
 8009df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df6:	0e1b      	lsrs	r3, r3, #24
 8009df8:	4915      	ldr	r1, [pc, #84]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009dfa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009dfe:	4053      	eors	r3, r2
 8009e00:	61bb      	str	r3, [r7, #24]
 8009e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e04:	1d1a      	adds	r2, r3, #4
 8009e06:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	490d      	ldr	r1, [pc, #52]	@ (8009e44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8009e10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e14:	405a      	eors	r2, r3
 8009e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e18:	0a1b      	lsrs	r3, r3, #8
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	490a      	ldr	r1, [pc, #40]	@ (8009e48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009e1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e22:	405a      	eors	r2, r3
 8009e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e26:	0c1b      	lsrs	r3, r3, #16
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	4908      	ldr	r1, [pc, #32]	@ (8009e4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8009e2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e30:	405a      	eors	r2, r3
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	0e1b      	lsrs	r3, r3, #24
 8009e36:	4906      	ldr	r1, [pc, #24]	@ (8009e50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009e38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e3c:	4053      	eors	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]
 8009e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e42:	e007      	b.n	8009e54 <mbedtls_internal_aes_decrypt+0x3c0>
 8009e44:	24001548 	.word	0x24001548
 8009e48:	24001948 	.word	0x24001948
 8009e4c:	24001d48 	.word	0x24001d48
 8009e50:	24002148 	.word	0x24002148
 8009e54:	1d1a      	adds	r2, r3, #4
 8009e56:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	4979      	ldr	r1, [pc, #484]	@ (800a044 <mbedtls_internal_aes_decrypt+0x5b0>)
 8009e60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e64:	405a      	eors	r2, r3
 8009e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e68:	0a1b      	lsrs	r3, r3, #8
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	4976      	ldr	r1, [pc, #472]	@ (800a048 <mbedtls_internal_aes_decrypt+0x5b4>)
 8009e6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e72:	405a      	eors	r2, r3
 8009e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e76:	0c1b      	lsrs	r3, r3, #16
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	4974      	ldr	r1, [pc, #464]	@ (800a04c <mbedtls_internal_aes_decrypt+0x5b8>)
 8009e7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e80:	405a      	eors	r2, r3
 8009e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e84:	0e1b      	lsrs	r3, r3, #24
 8009e86:	4972      	ldr	r1, [pc, #456]	@ (800a050 <mbedtls_internal_aes_decrypt+0x5bc>)
 8009e88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e8c:	4053      	eors	r3, r2
 8009e8e:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8009e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e92:	1d1a      	adds	r2, r3, #4
 8009e94:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e96:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8009e98:	69fa      	ldr	r2, [r7, #28]
 8009e9a:	b2d2      	uxtb	r2, r2
 8009e9c:	496d      	ldr	r1, [pc, #436]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009e9e:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8009ea0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	0a1b      	lsrs	r3, r3, #8
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	496a      	ldr	r1, [pc, #424]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009eaa:	5ccb      	ldrb	r3, [r1, r3]
 8009eac:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8009eae:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	0c1b      	lsrs	r3, r3, #16
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	4967      	ldr	r1, [pc, #412]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009eb8:	5ccb      	ldrb	r3, [r1, r3]
 8009eba:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ebc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	0e1b      	lsrs	r3, r3, #24
 8009ec2:	4964      	ldr	r1, [pc, #400]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009ec4:	5ccb      	ldrb	r3, [r1, r3]
 8009ec6:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8009ec8:	4053      	eors	r3, r2
 8009eca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ece:	1d1a      	adds	r2, r3, #4
 8009ed0:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ed2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	495e      	ldr	r1, [pc, #376]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009eda:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8009edc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	0a1b      	lsrs	r3, r3, #8
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	495b      	ldr	r1, [pc, #364]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009ee6:	5ccb      	ldrb	r3, [r1, r3]
 8009ee8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8009eea:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	0c1b      	lsrs	r3, r3, #16
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	4958      	ldr	r1, [pc, #352]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009ef4:	5ccb      	ldrb	r3, [r1, r3]
 8009ef6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009ef8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	0e1b      	lsrs	r3, r3, #24
 8009efe:	4955      	ldr	r1, [pc, #340]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f00:	5ccb      	ldrb	r3, [r1, r3]
 8009f02:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8009f04:	4053      	eors	r3, r2
 8009f06:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	1d1a      	adds	r2, r3, #4
 8009f0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f0e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	494f      	ldr	r1, [pc, #316]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f16:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8009f18:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	0a1b      	lsrs	r3, r3, #8
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	494c      	ldr	r1, [pc, #304]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f22:	5ccb      	ldrb	r3, [r1, r3]
 8009f24:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8009f26:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	0c1b      	lsrs	r3, r3, #16
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	4949      	ldr	r1, [pc, #292]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f30:	5ccb      	ldrb	r3, [r1, r3]
 8009f32:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f34:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	0e1b      	lsrs	r3, r3, #24
 8009f3a:	4946      	ldr	r1, [pc, #280]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f3c:	5ccb      	ldrb	r3, [r1, r3]
 8009f3e:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8009f40:	4053      	eors	r3, r2
 8009f42:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8009f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f46:	1d1a      	adds	r2, r3, #4
 8009f48:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f4a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	b2d2      	uxtb	r2, r2
 8009f50:	4940      	ldr	r1, [pc, #256]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f52:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8009f54:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	493d      	ldr	r1, [pc, #244]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f5e:	5ccb      	ldrb	r3, [r1, r3]
 8009f60:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8009f62:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	0c1b      	lsrs	r3, r3, #16
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	493a      	ldr	r1, [pc, #232]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f6c:	5ccb      	ldrb	r3, [r1, r3]
 8009f6e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f70:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	0e1b      	lsrs	r3, r3, #24
 8009f76:	4937      	ldr	r1, [pc, #220]	@ (800a054 <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f78:	5ccb      	ldrb	r3, [r1, r3]
 8009f7a:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8009f7c:	4053      	eors	r3, r2
 8009f7e:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8009f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	701a      	strb	r2, [r3, #0]
 8009f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f8a:	0a1a      	lsrs	r2, r3, #8
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	b2d2      	uxtb	r2, r2
 8009f92:	701a      	strb	r2, [r3, #0]
 8009f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f96:	0c1a      	lsrs	r2, r3, #16
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3302      	adds	r3, #2
 8009f9c:	b2d2      	uxtb	r2, r2
 8009f9e:	701a      	strb	r2, [r3, #0]
 8009fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa2:	0e1a      	lsrs	r2, r3, #24
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3303      	adds	r3, #3
 8009fa8:	b2d2      	uxtb	r2, r2
 8009faa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fb2:	b2d2      	uxtb	r2, r2
 8009fb4:	701a      	strb	r2, [r3, #0]
 8009fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb8:	0a1a      	lsrs	r2, r3, #8
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3305      	adds	r3, #5
 8009fbe:	b2d2      	uxtb	r2, r2
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc4:	0c1a      	lsrs	r2, r3, #16
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	3306      	adds	r3, #6
 8009fca:	b2d2      	uxtb	r2, r2
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd0:	0e1a      	lsrs	r2, r3, #24
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3307      	adds	r3, #7
 8009fd6:	b2d2      	uxtb	r2, r2
 8009fd8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	3308      	adds	r3, #8
 8009fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fe0:	b2d2      	uxtb	r2, r2
 8009fe2:	701a      	strb	r2, [r3, #0]
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe6:	0a1a      	lsrs	r2, r3, #8
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3309      	adds	r3, #9
 8009fec:	b2d2      	uxtb	r2, r2
 8009fee:	701a      	strb	r2, [r3, #0]
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff2:	0c1a      	lsrs	r2, r3, #16
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	330a      	adds	r3, #10
 8009ff8:	b2d2      	uxtb	r2, r2
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffe:	0e1a      	lsrs	r2, r3, #24
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	330b      	adds	r3, #11
 800a004:	b2d2      	uxtb	r2, r2
 800a006:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	330c      	adds	r3, #12
 800a00c:	6a3a      	ldr	r2, [r7, #32]
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	701a      	strb	r2, [r3, #0]
 800a012:	6a3b      	ldr	r3, [r7, #32]
 800a014:	0a1a      	lsrs	r2, r3, #8
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	330d      	adds	r3, #13
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	6a3b      	ldr	r3, [r7, #32]
 800a020:	0c1a      	lsrs	r2, r3, #16
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	330e      	adds	r3, #14
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	0e1a      	lsrs	r2, r3, #24
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	330f      	adds	r3, #15
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	373c      	adds	r7, #60	@ 0x3c
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	24001548 	.word	0x24001548
 800a048:	24001948 	.word	0x24001948
 800a04c:	24001d48 	.word	0x24001d48
 800a050:	24002148 	.word	0x24002148
 800a054:	24001448 	.word	0x24001448

0800a058 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d106      	bne.n	800a07a <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800a06c:	683a      	ldr	r2, [r7, #0]
 800a06e:	6879      	ldr	r1, [r7, #4]
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7ff fa2d 	bl	80094d0 <mbedtls_internal_aes_encrypt>
 800a076:	4603      	mov	r3, r0
 800a078:	e005      	b.n	800a086 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	6879      	ldr	r1, [r7, #4]
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7ff fd08 	bl	8009a94 <mbedtls_internal_aes_decrypt>
 800a084:	4603      	mov	r3, r0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 800a08e:	b5b0      	push	{r4, r5, r7, lr}
 800a090:	b08a      	sub	sp, #40	@ 0x28
 800a092:	af00      	add	r7, sp, #0
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	607a      	str	r2, [r7, #4]
 800a09a:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f003 030f 	and.w	r3, r3, #15
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d002      	beq.n	800a0ac <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800a0a6:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800a0aa:	e06d      	b.n	800a188 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d166      	bne.n	800a180 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 800a0b2:	e036      	b.n	800a122 <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 800a0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b6:	f107 0414 	add.w	r4, r7, #20
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	6859      	ldr	r1, [r3, #4]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 800a0c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f7ff ffc4 	bl	800a058 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0d4:	e010      	b.n	800a0f8 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a0da:	4413      	add	r3, r2
 800a0dc:	7819      	ldrb	r1, [r3, #0]
 800a0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	781a      	ldrb	r2, [r3, #0]
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a0ea:	4403      	add	r3, r0
 800a0ec:	404a      	eors	r2, r1
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800a0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0fa:	2b0f      	cmp	r3, #15
 800a0fc:	ddeb      	ble.n	800a0d6 <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	461d      	mov	r5, r3
 800a102:	f107 0414 	add.w	r4, r7, #20
 800a106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a108:	6028      	str	r0, [r5, #0]
 800a10a:	6069      	str	r1, [r5, #4]
 800a10c:	60aa      	str	r2, [r5, #8]
 800a10e:	60eb      	str	r3, [r5, #12]

            input  += 16;
 800a110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a112:	3310      	adds	r3, #16
 800a114:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 800a116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a118:	3310      	adds	r3, #16
 800a11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	3b10      	subs	r3, #16
 800a120:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1c5      	bne.n	800a0b4 <mbedtls_aes_crypt_cbc+0x26>
 800a128:	e02d      	b.n	800a186 <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 800a12a:	2300      	movs	r3, #0
 800a12c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a12e:	e010      	b.n	800a152 <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800a130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a132:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a134:	4413      	add	r3, r2
 800a136:	7819      	ldrb	r1, [r3, #0]
 800a138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	4413      	add	r3, r2
 800a13e:	781a      	ldrb	r2, [r3, #0]
 800a140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a142:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a144:	4403      	add	r3, r0
 800a146:	404a      	eors	r2, r1
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800a14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a14e:	3301      	adds	r3, #1
 800a150:	627b      	str	r3, [r7, #36]	@ 0x24
 800a152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a154:	2b0f      	cmp	r3, #15
 800a156:	ddeb      	ble.n	800a130 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800a158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a15c:	68b9      	ldr	r1, [r7, #8]
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7ff ff7a 	bl	800a058 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 800a164:	2210      	movs	r2, #16
 800a166:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a168:	6838      	ldr	r0, [r7, #0]
 800a16a:	f00b fc47 	bl	80159fc <memcpy>

            input  += 16;
 800a16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a170:	3310      	adds	r3, #16
 800a172:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 800a174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a176:	3310      	adds	r3, #16
 800a178:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	3b10      	subs	r3, #16
 800a17e:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1d1      	bne.n	800a12a <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3728      	adds	r7, #40	@ 0x28
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bdb0      	pop	{r4, r5, r7, pc}

0800a190 <mbedtls_mpi_zeroize>:
#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
    mbedtls_platform_zeroize( v, ciL * n );
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4619      	mov	r1, r3
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f009 fabf 	bl	8013724 <mbedtls_platform_zeroize>
}
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b083      	sub	sp, #12
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
    X->n = 0;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	609a      	str	r2, [r3, #8]
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d01a      	beq.n	800a218 <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00c      	beq.n	800a204 <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	f7ff ffcb 	bl	800a190 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f00b fab6 	bl	8015770 <free>
    }

    X->s = 1;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	601a      	str	r2, [r3, #0]
    X->n = 0;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	609a      	str	r2, [r3, #8]
 800a216:	e000      	b.n	800a21a <mbedtls_mpi_free+0x46>
        return;
 800a218:	bf00      	nop
}
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a230:	4293      	cmp	r3, r2
 800a232:	d902      	bls.n	800a23a <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a234:	f06f 030f 	mvn.w	r3, #15
 800a238:	e031      	b.n	800a29e <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	429a      	cmp	r2, r3
 800a242:	d92b      	bls.n	800a29c <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800a244:	2104      	movs	r1, #4
 800a246:	6838      	ldr	r0, [r7, #0]
 800a248:	f00b fa76 	bl	8015738 <calloc>
 800a24c:	4603      	mov	r3, r0
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d102      	bne.n	800a25c <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a256:	f06f 030f 	mvn.w	r3, #15
 800a25a:	e020      	b.n	800a29e <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d015      	beq.n	800a290 <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6899      	ldr	r1, [r3, #8]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	461a      	mov	r2, r3
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f00b fbc3 	bl	80159fc <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689a      	ldr	r2, [r3, #8]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	4619      	mov	r1, r3
 800a280:	4610      	mov	r0, r2
 800a282:	f7ff ff85 	bl	800a190 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f00b fa70 	bl	8015770 <free>
        }

        X->n = nblimbs;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	605a      	str	r2, [r3, #4]
        X->p = p;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <mbedtls_mpi_shrink>:
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d902      	bls.n	800a2c0 <mbedtls_mpi_shrink+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a2ba:	f06f 030f 	mvn.w	r3, #15
 800a2be:	e054      	b.n	800a36a <mbedtls_mpi_shrink+0xc4>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d305      	bcc.n	800a2d6 <mbedtls_mpi_shrink+0x30>
        return( mbedtls_mpi_grow( X, nblimbs ) );
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff ffa7 	bl	800a220 <mbedtls_mpi_grow>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	e049      	b.n	800a36a <mbedtls_mpi_shrink+0xc4>

    for( i = X->n - 1; i > 0; i-- )
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	e00a      	b.n	800a2f6 <mbedtls_mpi_shrink+0x50>
        if( X->p[i] != 0 )
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d106      	bne.n	800a2fe <mbedtls_mpi_shrink+0x58>
    for( i = X->n - 1; i > 0; i-- )
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	60fb      	str	r3, [r7, #12]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1f1      	bne.n	800a2e0 <mbedtls_mpi_shrink+0x3a>
 800a2fc:	e000      	b.n	800a300 <mbedtls_mpi_shrink+0x5a>
            break;
 800a2fe:	bf00      	nop
    i++;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	3301      	adds	r3, #1
 800a304:	60fb      	str	r3, [r7, #12]

    if( i < nblimbs )
 800a306:	68fa      	ldr	r2, [r7, #12]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d201      	bcs.n	800a312 <mbedtls_mpi_shrink+0x6c>
        i = nblimbs;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	60fb      	str	r3, [r7, #12]

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 800a312:	2104      	movs	r1, #4
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f00b fa0f 	bl	8015738 <calloc>
 800a31a:	4603      	mov	r3, r0
 800a31c:	60bb      	str	r3, [r7, #8]
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d102      	bne.n	800a32a <mbedtls_mpi_shrink+0x84>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a324:	f06f 030f 	mvn.w	r3, #15
 800a328:	e01f      	b.n	800a36a <mbedtls_mpi_shrink+0xc4>

    if( X->p != NULL )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d014      	beq.n	800a35c <mbedtls_mpi_shrink+0xb6>
    {
        memcpy( p, X->p, i * ciL );
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6899      	ldr	r1, [r3, #8]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	461a      	mov	r2, r3
 800a33c:	68b8      	ldr	r0, [r7, #8]
 800a33e:	f00b fb5d 	bl	80159fc <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	689a      	ldr	r2, [r3, #8]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	f7ff ff1f 	bl	800a190 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	4618      	mov	r0, r3
 800a358:	f00b fa0a 	bl	8015770 <free>
    }

    X->n = i;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	605a      	str	r2, [r3, #4]
    X->p = p;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	609a      	str	r2, [r3, #8]

    return( 0 );
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b084      	sub	sp, #16
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60fb      	str	r3, [r7, #12]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d101      	bne.n	800a38c <mbedtls_mpi_copy+0x1a>
        return( 0 );
 800a388:	2300      	movs	r3, #0
 800a38a:	e04a      	b.n	800a422 <mbedtls_mpi_copy+0xb0>

    if( Y->p == NULL )
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d104      	bne.n	800a39e <mbedtls_mpi_copy+0x2c>
    {
        mbedtls_mpi_free( X );
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff ff1d 	bl	800a1d4 <mbedtls_mpi_free>
        return( 0 );
 800a39a:	2300      	movs	r3, #0
 800a39c:	e041      	b.n	800a422 <mbedtls_mpi_copy+0xb0>
    }

    for( i = Y->n - 1; i > 0; i-- )
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	60bb      	str	r3, [r7, #8]
 800a3a6:	e00a      	b.n	800a3be <mbedtls_mpi_copy+0x4c>
        if( Y->p[i] != 0 )
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d106      	bne.n	800a3c6 <mbedtls_mpi_copy+0x54>
    for( i = Y->n - 1; i > 0; i-- )
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	60bb      	str	r3, [r7, #8]
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1f1      	bne.n	800a3a8 <mbedtls_mpi_copy+0x36>
 800a3c4:	e000      	b.n	800a3c8 <mbedtls_mpi_copy+0x56>
            break;
 800a3c6:	bf00      	nop
    i++;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	60bb      	str	r3, [r7, #8]

    X->s = Y->s;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	601a      	str	r2, [r3, #0]

    if( X->n < i )
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d908      	bls.n	800a3f2 <mbedtls_mpi_copy+0x80>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800a3e0:	68b9      	ldr	r1, [r7, #8]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7ff ff1c 	bl	800a220 <mbedtls_mpi_grow>
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00e      	beq.n	800a40e <mbedtls_mpi_copy+0x9c>
 800a3f0:	e016      	b.n	800a420 <mbedtls_mpi_copy+0xae>
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	689a      	ldr	r2, [r3, #8]
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	18d0      	adds	r0, r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	461a      	mov	r2, r3
 800a408:	2100      	movs	r1, #0
 800a40a:	f00b fab3 	bl	8015974 <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6898      	ldr	r0, [r3, #8]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	6899      	ldr	r1, [r3, #8]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	461a      	mov	r2, r3
 800a41c:	f00b faee 	bl	80159fc <memcpy>

cleanup:

    return( ret );
 800a420:	68fb      	ldr	r3, [r7, #12]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	60f8      	str	r0, [r7, #12]
 800a432:	60b9      	str	r1, [r7, #8]
 800a434:	4613      	mov	r3, r2
 800a436:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800a438:	2300      	movs	r3, #0
 800a43a:	613b      	str	r3, [r7, #16]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	425b      	negs	r3, r3
 800a440:	b2da      	uxtb	r2, r3
 800a442:	79fb      	ldrb	r3, [r7, #7]
 800a444:	4313      	orrs	r3, r2
 800a446:	b2db      	uxtb	r3, r3
 800a448:	09db      	lsrs	r3, r3, #7
 800a44a:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	4619      	mov	r1, r3
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f7ff fee4 	bl	800a220 <mbedtls_mpi_grow>
 800a458:	6138      	str	r0, [r7, #16]
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d150      	bne.n	800a502 <mbedtls_mpi_safe_cond_assign+0xd8>

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	79fa      	ldrb	r2, [r7, #7]
 800a466:	f1c2 0201 	rsb	r2, r2, #1
 800a46a:	fb03 f202 	mul.w	r2, r3, r2
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	79f9      	ldrb	r1, [r7, #7]
 800a474:	fb01 f303 	mul.w	r3, r1, r3
 800a478:	441a      	add	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	601a      	str	r2, [r3, #0]

    for( i = 0; i < Y->n; i++ )
 800a47e:	2300      	movs	r3, #0
 800a480:	617b      	str	r3, [r7, #20]
 800a482:	e01d      	b.n	800a4c0 <mbedtls_mpi_safe_cond_assign+0x96>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	689a      	ldr	r2, [r3, #8]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	79fa      	ldrb	r2, [r7, #7]
 800a492:	f1c2 0201 	rsb	r2, r2, #1
 800a496:	fb02 f103 	mul.w	r1, r2, r3
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	689a      	ldr	r2, [r3, #8]
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	79fa      	ldrb	r2, [r7, #7]
 800a4a8:	fb03 f202 	mul.w	r2, r3, r2
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	6898      	ldr	r0, [r3, #8]
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4403      	add	r3, r0
 800a4b6:	440a      	add	r2, r1
 800a4b8:	601a      	str	r2, [r3, #0]
    for( i = 0; i < Y->n; i++ )
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d3dc      	bcc.n	800a484 <mbedtls_mpi_safe_cond_assign+0x5a>

    for( ; i < X->n; i++ )
 800a4ca:	e014      	b.n	800a4f6 <mbedtls_mpi_safe_cond_assign+0xcc>
        X->p[i] *= ( 1 - assign );
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	689a      	ldr	r2, [r3, #8]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	f1c3 0301 	rsb	r3, r3, #1
 800a4de:	4618      	mov	r0, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6899      	ldr	r1, [r3, #8]
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	440b      	add	r3, r1
 800a4ea:	fb00 f202 	mul.w	r2, r0, r2
 800a4ee:	601a      	str	r2, [r3, #0]
    for( ; i < X->n; i++ )
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	617b      	str	r3, [r7, #20]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d3e5      	bcc.n	800a4cc <mbedtls_mpi_safe_cond_assign+0xa2>

cleanup:
 800a500:	bf00      	nop
    return( ret );
 800a502:	693b      	ldr	r3, [r7, #16]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <mbedtls_mpi_safe_cond_swap>:
 * about whether the swap was made or not.
 * Here it is not ok to simply swap the pointers, which whould lead to
 * different memory access patterns when X and Y are used afterwards.
 */
int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b088      	sub	sp, #32
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	4613      	mov	r3, r2
 800a518:	71fb      	strb	r3, [r7, #7]
    size_t i;
    mbedtls_mpi_uint tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d101      	bne.n	800a526 <mbedtls_mpi_safe_cond_swap+0x1a>
        return( 0 );
 800a522:	2300      	movs	r3, #0
 800a524:	e080      	b.n	800a628 <mbedtls_mpi_safe_cond_swap+0x11c>

    /* make sure swap is 0 or 1 in a time-constant manner */
    swap = (swap | (unsigned char)-swap) >> 7;
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	425b      	negs	r3, r3
 800a52a:	b2da      	uxtb	r2, r3
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	4313      	orrs	r3, r2
 800a530:	b2db      	uxtb	r3, r3
 800a532:	09db      	lsrs	r3, r3, #7
 800a534:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	4619      	mov	r1, r3
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f7ff fe6f 	bl	800a220 <mbedtls_mpi_grow>
 800a542:	61f8      	str	r0, [r7, #28]
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d16d      	bne.n	800a626 <mbedtls_mpi_safe_cond_swap+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	4619      	mov	r1, r3
 800a550:	68b8      	ldr	r0, [r7, #8]
 800a552:	f7ff fe65 	bl	800a220 <mbedtls_mpi_grow>
 800a556:	61f8      	str	r0, [r7, #28]
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d163      	bne.n	800a626 <mbedtls_mpi_safe_cond_swap+0x11a>

    s = X->s;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	617b      	str	r3, [r7, #20]
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	79fa      	ldrb	r2, [r7, #7]
 800a56a:	f1c2 0201 	rsb	r2, r2, #1
 800a56e:	fb03 f202 	mul.w	r2, r3, r2
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	79f9      	ldrb	r1, [r7, #7]
 800a578:	fb01 f303 	mul.w	r3, r1, r3
 800a57c:	441a      	add	r2, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	601a      	str	r2, [r3, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	79fa      	ldrb	r2, [r7, #7]
 800a588:	f1c2 0201 	rsb	r2, r2, #1
 800a58c:	fb03 f202 	mul.w	r2, r3, r2
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	6979      	ldr	r1, [r7, #20]
 800a594:	fb01 f303 	mul.w	r3, r1, r3
 800a598:	441a      	add	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	601a      	str	r2, [r3, #0]


    for( i = 0; i < X->n; i++ )
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61bb      	str	r3, [r7, #24]
 800a5a2:	e03a      	b.n	800a61a <mbedtls_mpi_safe_cond_swap+0x10e>
    {
        tmp = X->p[i];
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	689a      	ldr	r2, [r3, #8]
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	613b      	str	r3, [r7, #16]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	79fa      	ldrb	r2, [r7, #7]
 800a5c0:	f1c2 0201 	rsb	r2, r2, #1
 800a5c4:	fb02 f103 	mul.w	r1, r2, r3
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	689a      	ldr	r2, [r3, #8]
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	79fa      	ldrb	r2, [r7, #7]
 800a5d6:	fb03 f202 	mul.w	r2, r3, r2
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6898      	ldr	r0, [r3, #8]
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4403      	add	r3, r0
 800a5e4:	440a      	add	r2, r1
 800a5e6:	601a      	str	r2, [r3, #0]
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	79fa      	ldrb	r2, [r7, #7]
 800a5f6:	f1c2 0201 	rsb	r2, r2, #1
 800a5fa:	fb02 f103 	mul.w	r1, r2, r3
 800a5fe:	79fb      	ldrb	r3, [r7, #7]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	fb03 f202 	mul.w	r2, r3, r2
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	6898      	ldr	r0, [r3, #8]
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4403      	add	r3, r0
 800a610:	440a      	add	r2, r1
 800a612:	601a      	str	r2, [r3, #0]
    for( i = 0; i < X->n; i++ )
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	3301      	adds	r3, #1
 800a618:	61bb      	str	r3, [r7, #24]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	429a      	cmp	r2, r3
 800a622:	d3bf      	bcc.n	800a5a4 <mbedtls_mpi_safe_cond_swap+0x98>
    }

cleanup:
 800a624:	bf00      	nop
    return( ret );
 800a626:	69fb      	ldr	r3, [r7, #28]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3720      	adds	r7, #32
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800a63a:	2101      	movs	r1, #1
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f7ff fdef 	bl	800a220 <mbedtls_mpi_grow>
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d119      	bne.n	800a67e <mbedtls_mpi_lset+0x4e>
    memset( X->p, 0, X->n * ciL );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6898      	ldr	r0, [r3, #8]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	461a      	mov	r2, r3
 800a656:	2100      	movs	r1, #0
 800a658:	f00b f98c 	bl	8015974 <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a662:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	da02      	bge.n	800a678 <mbedtls_mpi_lset+0x48>
 800a672:	f04f 32ff 	mov.w	r2, #4294967295
 800a676:	e000      	b.n	800a67a <mbedtls_mpi_lset+0x4a>
 800a678:	2201      	movs	r2, #1
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 800a67e:	68fb      	ldr	r3, [r7, #12]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	015b      	lsls	r3, r3, #5
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d301      	bcc.n	800a6a2 <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e00d      	b.n	800a6be <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	095b      	lsrs	r3, r3, #5
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	f003 031f 	and.w	r3, r3, #31
 800a6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ba:	f003 0301 	and.w	r3, r3, #1
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <mbedtls_mpi_set_bit>:

/*
 * Set a bit to a specific value of 0 or 1
 */
int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b088      	sub	sp, #32
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	61fb      	str	r3, [r7, #28]
    size_t off = pos / biL;
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	095b      	lsrs	r3, r3, #5
 800a6e0:	61bb      	str	r3, [r7, #24]
    size_t idx = pos % biL;
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f003 031f 	and.w	r3, r3, #31
 800a6e8:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    if( val != 0 && val != 1 )
 800a6ea:	79fb      	ldrb	r3, [r7, #7]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d005      	beq.n	800a6fc <mbedtls_mpi_set_bit+0x32>
 800a6f0:	79fb      	ldrb	r3, [r7, #7]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d002      	beq.n	800a6fc <mbedtls_mpi_set_bit+0x32>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a6f6:	f06f 0303 	mvn.w	r3, #3
 800a6fa:	e037      	b.n	800a76c <mbedtls_mpi_set_bit+0xa2>

    if( X->n * biL <= pos )
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	015b      	lsls	r3, r3, #5
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	429a      	cmp	r2, r3
 800a706:	d30e      	bcc.n	800a726 <mbedtls_mpi_set_bit+0x5c>
    {
        if( val == 0 )
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <mbedtls_mpi_set_bit+0x48>
            return( 0 );
 800a70e:	2300      	movs	r3, #0
 800a710:	e02c      	b.n	800a76c <mbedtls_mpi_set_bit+0xa2>

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	3301      	adds	r3, #1
 800a716:	4619      	mov	r1, r3
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7ff fd81 	bl	800a220 <mbedtls_mpi_grow>
 800a71e:	61f8      	str	r0, [r7, #28]
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d121      	bne.n	800a76a <mbedtls_mpi_set_bit+0xa0>
    }

    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	689a      	ldr	r2, [r3, #8]
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4413      	add	r3, r2
 800a730:	6819      	ldr	r1, [r3, #0]
 800a732:	2201      	movs	r2, #1
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	fa02 f303 	lsl.w	r3, r2, r3
 800a73a:	43da      	mvns	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6898      	ldr	r0, [r3, #8]
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4403      	add	r3, r0
 800a746:	400a      	ands	r2, r1
 800a748:	601a      	str	r2, [r3, #0]
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	689a      	ldr	r2, [r3, #8]
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	6819      	ldr	r1, [r3, #0]
 800a756:	79fa      	ldrb	r2, [r7, #7]
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	409a      	lsls	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6898      	ldr	r0, [r3, #8]
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4403      	add	r3, r0
 800a766:	430a      	orrs	r2, r1
 800a768:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 800a76a:	69fb      	ldr	r3, [r7, #28]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3720      	adds	r7, #32
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 800a774:	b480      	push	{r7}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 800a780:	2300      	movs	r3, #0
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	e01d      	b.n	800a7c2 <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 800a786:	2300      	movs	r3, #0
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	e014      	b.n	800a7b6 <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	fa22 f303 	lsr.w	r3, r2, r3
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <mbedtls_mpi_lsb+0x36>
                return( count );
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	e011      	b.n	800a7ce <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	613b      	str	r3, [r7, #16]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	2b1f      	cmp	r3, #31
 800a7ba:	d9e7      	bls.n	800a78c <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	617b      	str	r3, [r7, #20]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d3dc      	bcc.n	800a786 <mbedtls_mpi_lsb+0x12>

    return( 0 );
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	371c      	adds	r7, #28
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr

0800a7da <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b085      	sub	sp, #20
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800a7e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7e6:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	e00a      	b.n	800a804 <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d109      	bne.n	800a80c <mbedtls_clz+0x32>

        mask >>= 1;
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	085b      	lsrs	r3, r3, #1
 800a7fc:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3301      	adds	r3, #1
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2b1f      	cmp	r3, #31
 800a808:	d9f1      	bls.n	800a7ee <mbedtls_clz+0x14>
 800a80a:	e000      	b.n	800a80e <mbedtls_clz+0x34>
        if( x & mask ) break;
 800a80c:	bf00      	nop
    }

    return j;
 800a80e:	68fb      	ldr	r3, [r7, #12]
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 800a82c:	2300      	movs	r3, #0
 800a82e:	e025      	b.n	800a87c <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	3b01      	subs	r3, #1
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	e00a      	b.n	800a850 <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	689a      	ldr	r2, [r3, #8]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	4413      	add	r3, r2
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	60fb      	str	r3, [r7, #12]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f1      	bne.n	800a83a <mbedtls_mpi_bitlen+0x1e>
 800a856:	e000      	b.n	800a85a <mbedtls_mpi_bitlen+0x3e>
            break;
 800a858:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	689a      	ldr	r2, [r3, #8]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4618      	mov	r0, r3
 800a868:	f7ff ffb7 	bl	800a7da <mbedtls_clz>
 800a86c:	4603      	mov	r3, r0
 800a86e:	f1c3 0320 	rsb	r3, r3, #32
 800a872:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	4413      	add	r3, r2
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff ffc5 	bl	800a81c <mbedtls_mpi_bitlen>
 800a892:	4603      	mov	r3, r0
 800a894:	3307      	adds	r3, #7
 800a896:	08db      	lsrs	r3, r3, #3
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3708      	adds	r7, #8
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <mpi_get_digit>:

/*
 * Convert an ASCII character to digit value
 */
static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	71fb      	strb	r3, [r7, #7]
    *d = 255;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	22ff      	movs	r2, #255	@ 0xff
 800a8b2:	601a      	str	r2, [r3, #0]

    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 800a8b4:	79fb      	ldrb	r3, [r7, #7]
 800a8b6:	2b2f      	cmp	r3, #47	@ 0x2f
 800a8b8:	d907      	bls.n	800a8ca <mpi_get_digit+0x2a>
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	2b39      	cmp	r3, #57	@ 0x39
 800a8be:	d804      	bhi.n	800a8ca <mpi_get_digit+0x2a>
 800a8c0:	79fb      	ldrb	r3, [r7, #7]
 800a8c2:	3b30      	subs	r3, #48	@ 0x30
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	601a      	str	r2, [r3, #0]
    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	2b40      	cmp	r3, #64	@ 0x40
 800a8ce:	d907      	bls.n	800a8e0 <mpi_get_digit+0x40>
 800a8d0:	79fb      	ldrb	r3, [r7, #7]
 800a8d2:	2b46      	cmp	r3, #70	@ 0x46
 800a8d4:	d804      	bhi.n	800a8e0 <mpi_get_digit+0x40>
 800a8d6:	79fb      	ldrb	r3, [r7, #7]
 800a8d8:	3b37      	subs	r3, #55	@ 0x37
 800a8da:	461a      	mov	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	601a      	str	r2, [r3, #0]
    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
 800a8e0:	79fb      	ldrb	r3, [r7, #7]
 800a8e2:	2b60      	cmp	r3, #96	@ 0x60
 800a8e4:	d907      	bls.n	800a8f6 <mpi_get_digit+0x56>
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	2b66      	cmp	r3, #102	@ 0x66
 800a8ea:	d804      	bhi.n	800a8f6 <mpi_get_digit+0x56>
 800a8ec:	79fb      	ldrb	r3, [r7, #7]
 800a8ee:	3b57      	subs	r3, #87	@ 0x57
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	601a      	str	r2, [r3, #0]

    if( *d >= (mbedtls_mpi_uint) radix )
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d302      	bcc.n	800a906 <mpi_get_digit+0x66>
        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );
 800a900:	f06f 0305 	mvn.w	r3, #5
 800a904:	e000      	b.n	800a908 <mpi_get_digit+0x68>

    return( 0 );
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <mbedtls_mpi_read_string>:

/*
 * Import from an ASCII string
 */
int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08e      	sub	sp, #56	@ 0x38
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint d;
    mbedtls_mpi T;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( s != NULL );

    if( radix < 2 || radix > 16 )
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2b01      	cmp	r3, #1
 800a924:	dd02      	ble.n	800a92c <mbedtls_mpi_read_string+0x18>
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	2b10      	cmp	r3, #16
 800a92a:	dd02      	ble.n	800a932 <mbedtls_mpi_read_string+0x1e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a92c:	f06f 0303 	mvn.w	r3, #3
 800a930:	e0cf      	b.n	800aad2 <mbedtls_mpi_read_string+0x1be>

    mbedtls_mpi_init( &T );
 800a932:	f107 0314 	add.w	r3, r7, #20
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fc39 	bl	800a1ae <mbedtls_mpi_init>

    slen = strlen( s );
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7f5 fce7 	bl	8000310 <strlen>
 800a942:	62b8      	str	r0, [r7, #40]	@ 0x28

    if( radix == 16 )
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b10      	cmp	r3, #16
 800a948:	d166      	bne.n	800aa18 <mbedtls_mpi_read_string+0x104>
    {
        if( slen > MPI_SIZE_T_MAX >> 2 )
 800a94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a950:	d302      	bcc.n	800a958 <mbedtls_mpi_read_string+0x44>
            return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a952:	f06f 0303 	mvn.w	r3, #3
 800a956:	e0bc      	b.n	800aad2 <mbedtls_mpi_read_string+0x1be>

        n = BITS_TO_LIMBS( slen << 2 );
 800a958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	095b      	lsrs	r3, r3, #5
 800a95e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a960:	f002 0207 	and.w	r2, r2, #7
 800a964:	2a00      	cmp	r2, #0
 800a966:	bf14      	ite	ne
 800a968:	2201      	movne	r2, #1
 800a96a:	2200      	moveq	r2, #0
 800a96c:	b2d2      	uxtb	r2, r2
 800a96e:	4413      	add	r3, r2
 800a970:	627b      	str	r3, [r7, #36]	@ 0x24

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 800a972:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f7ff fc53 	bl	800a220 <mbedtls_mpi_grow>
 800a97a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a97c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f040 80a1 	bne.w	800aac6 <mbedtls_mpi_read_string+0x1b2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800a984:	2100      	movs	r1, #0
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f7ff fe52 	bl	800a630 <mbedtls_mpi_lset>
 800a98c:	6378      	str	r0, [r7, #52]	@ 0x34
 800a98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a990:	2b00      	cmp	r3, #0
 800a992:	f040 8098 	bne.w	800aac6 <mbedtls_mpi_read_string+0x1b2>

        for( i = slen, j = 0; i > 0; i--, j++ )
 800a996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a998:	633b      	str	r3, [r7, #48]	@ 0x30
 800a99a:	2300      	movs	r3, #0
 800a99c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a99e:	e037      	b.n	800aa10 <mbedtls_mpi_read_string+0xfc>
        {
            if( i == 1 && s[i - 1] == '-' )
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d10b      	bne.n	800a9be <mbedtls_mpi_read_string+0xaa>
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2b2d      	cmp	r3, #45	@ 0x2d
 800a9b2:	d104      	bne.n	800a9be <mbedtls_mpi_read_string+0xaa>
            {
                X->s = -1;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ba:	601a      	str	r2, [r3, #0]
                break;
 800a9bc:	e083      	b.n	800aac6 <mbedtls_mpi_read_string+0x1b2>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 800a9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	781a      	ldrb	r2, [r3, #0]
 800a9c8:	f107 0320 	add.w	r3, r7, #32
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7ff ff66 	bl	800a8a0 <mpi_get_digit>
 800a9d4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d174      	bne.n	800aac6 <mbedtls_mpi_read_string+0x1b2>
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6899      	ldr	r1, [r3, #8]
 800a9e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e2:	08db      	lsrs	r3, r3, #3
 800a9e4:	009a      	lsls	r2, r3, #2
 800a9e6:	440a      	add	r2, r1
 800a9e8:	6811      	ldr	r1, [r2, #0]
 800a9ea:	6a38      	ldr	r0, [r7, #32]
 800a9ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9ee:	0092      	lsls	r2, r2, #2
 800a9f0:	f002 021c 	and.w	r2, r2, #28
 800a9f4:	fa00 f202 	lsl.w	r2, r0, r2
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	6880      	ldr	r0, [r0, #8]
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4403      	add	r3, r0
 800aa00:	430a      	orrs	r2, r1
 800aa02:	601a      	str	r2, [r3, #0]
        for( i = slen, j = 0; i > 0; i--, j++ )
 800aa04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa06:	3b01      	subs	r3, #1
 800aa08:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1c4      	bne.n	800a9a0 <mbedtls_mpi_read_string+0x8c>
 800aa16:	e056      	b.n	800aac6 <mbedtls_mpi_read_string+0x1b2>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800aa18:	2100      	movs	r1, #0
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7ff fe08 	bl	800a630 <mbedtls_mpi_lset>
 800aa20:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d14e      	bne.n	800aac6 <mbedtls_mpi_read_string+0x1b2>

        for( i = 0; i < slen; i++ )
 800aa28:	2300      	movs	r3, #0
 800aa2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa2c:	e046      	b.n	800aabc <mbedtls_mpi_read_string+0x1a8>
        {
            if( i == 0 && s[i] == '-' )
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <mbedtls_mpi_read_string+0x136>
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa38:	4413      	add	r3, r2
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa3e:	d104      	bne.n	800aa4a <mbedtls_mpi_read_string+0x136>
            {
                X->s = -1;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f04f 32ff 	mov.w	r2, #4294967295
 800aa46:	601a      	str	r2, [r3, #0]
                continue;
 800aa48:	e035      	b.n	800aab6 <mbedtls_mpi_read_string+0x1a2>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4e:	4413      	add	r3, r2
 800aa50:	781a      	ldrb	r2, [r3, #0]
 800aa52:	f107 0320 	add.w	r3, r7, #32
 800aa56:	68b9      	ldr	r1, [r7, #8]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7ff ff21 	bl	800a8a0 <mpi_get_digit>
 800aa5e:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d12f      	bne.n	800aac6 <mbedtls_mpi_read_string+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	f107 0314 	add.w	r3, r7, #20
 800aa6c:	68f9      	ldr	r1, [r7, #12]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f002 f9c6 	bl	800ce00 <mbedtls_mpi_mul_int>
 800aa74:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d124      	bne.n	800aac6 <mbedtls_mpi_read_string+0x1b2>

            if( X->s == 1 )
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d10c      	bne.n	800aa9e <mbedtls_mpi_read_string+0x18a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	461a      	mov	r2, r3
 800aa88:	f107 0314 	add.w	r3, r7, #20
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f000 fd1c 	bl	800b4cc <mbedtls_mpi_add_int>
 800aa94:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00c      	beq.n	800aab6 <mbedtls_mpi_read_string+0x1a2>
 800aa9c:	e013      	b.n	800aac6 <mbedtls_mpi_read_string+0x1b2>
            }
            else
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 800aa9e:	6a3b      	ldr	r3, [r7, #32]
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	f107 0314 	add.w	r3, r7, #20
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 fd33 	bl	800b514 <mbedtls_mpi_sub_int>
 800aaae:	6378      	str	r0, [r7, #52]	@ 0x34
 800aab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d107      	bne.n	800aac6 <mbedtls_mpi_read_string+0x1b2>
        for( i = 0; i < slen; i++ )
 800aab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab8:	3301      	adds	r3, #1
 800aaba:	633b      	str	r3, [r7, #48]	@ 0x30
 800aabc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d3b4      	bcc.n	800aa2e <mbedtls_mpi_read_string+0x11a>
            }
        }
    }

cleanup:
 800aac4:	bf00      	nop

    mbedtls_mpi_free( &T );
 800aac6:	f107 0314 	add.w	r3, r7, #20
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fb82 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800aad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3738      	adds	r7, #56	@ 0x38
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <mpi_uint_bigendian_to_host>:
        tmp |= ( x & 0xFF ) << ( ( ciL - 1 - i ) << 3 );
    return( tmp );
}

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	ba1b      	rev	r3, r3
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b086      	sub	sp, #24
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d026      	beq.n	800ab50 <mpi_bigendian_to_host+0x5e>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	617b      	str	r3, [r7, #20]
 800ab06:	683a      	ldr	r2, [r7, #0]
 800ab08:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ab0c:	4413      	add	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	4413      	add	r3, r2
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	e016      	b.n	800ab46 <mpi_bigendian_to_host+0x54>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff ffdc 	bl	800aada <mpi_uint_bigendian_to_host>
 800ab22:	60f8      	str	r0, [r7, #12]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff ffd6 	bl	800aada <mpi_uint_bigendian_to_host>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	601a      	str	r2, [r3, #0]
        *cur_limb_right = tmp;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	601a      	str	r2, [r3, #0]
         cur_limb_left++, cur_limb_right-- )
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	617b      	str	r3, [r7, #20]
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	3b04      	subs	r3, #4
 800ab44:	613b      	str	r3, [r7, #16]
         cur_limb_left <= cur_limb_right;
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d9e4      	bls.n	800ab18 <mpi_bigendian_to_host+0x26>
 800ab4e:	e000      	b.n	800ab52 <mpi_bigendian_to_host+0x60>
        return;
 800ab50:	bf00      	nop
    }
}
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b088      	sub	sp, #32
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	089b      	lsrs	r3, r3, #2
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	f002 0203 	and.w	r2, r2, #3
 800ab6e:	2a00      	cmp	r2, #0
 800ab70:	bf14      	ite	ne
 800ab72:	2201      	movne	r2, #1
 800ab74:	2200      	moveq	r2, #0
 800ab76:	b2d2      	uxtb	r2, r2
 800ab78:	4413      	add	r3, r2
 800ab7a:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - buflen;
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	009a      	lsls	r2, r3, #2
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	1ad3      	subs	r3, r2, r3
 800ab84:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	69ba      	ldr	r2, [r7, #24]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d00d      	beq.n	800abac <mbedtls_mpi_read_binary+0x54>
    {
        mbedtls_mpi_free( X );
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f7ff fb1f 	bl	800a1d4 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f7ff fb09 	bl	800a1ae <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800ab9c:	69b9      	ldr	r1, [r7, #24]
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f7ff fb3e 	bl	800a220 <mbedtls_mpi_grow>
 800aba4:	61f8      	str	r0, [r7, #28]
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d11d      	bne.n	800abe8 <mbedtls_mpi_read_binary+0x90>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800abac:	2100      	movs	r1, #0
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7ff fd3e 	bl	800a630 <mbedtls_mpi_lset>
 800abb4:	61f8      	str	r0, [r7, #28]
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d115      	bne.n	800abe8 <mbedtls_mpi_read_binary+0x90>

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d011      	beq.n	800abe6 <mbedtls_mpi_read_binary+0x8e>
    {
        Xp = (unsigned char*) X->p;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	613b      	str	r3, [r7, #16]
        memcpy( Xp + overhead, buf, buflen );
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	4413      	add	r3, r2
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	68b9      	ldr	r1, [r7, #8]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f00a ff12 	bl	80159fc <memcpy>

        mpi_bigendian_to_host( X->p, limbs );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	689b      	ldr	r3, [r3, #8]
 800abdc:	69b9      	ldr	r1, [r7, #24]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff ff87 	bl	800aaf2 <mpi_bigendian_to_host>
 800abe4:	e000      	b.n	800abe8 <mbedtls_mpi_read_binary+0x90>
    }

cleanup:
 800abe6:	bf00      	nop

    return( ret );
 800abe8:	69fb      	ldr	r3, [r7, #28]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3720      	adds	r7, #32
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b088      	sub	sp, #32
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
 800abfa:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	095b      	lsrs	r3, r3, #5
 800ac04:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	f003 031f 	and.w	r3, r3, #31
 800ac0c:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7ff fe04 	bl	800a81c <mbedtls_mpi_bitlen>
 800ac14:	4602      	mov	r2, r0
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	4413      	add	r3, r2
 800ac1a:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	015b      	lsls	r3, r3, #5
 800ac22:	69ba      	ldr	r2, [r7, #24]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d912      	bls.n	800ac4e <mbedtls_mpi_shift_l+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	095b      	lsrs	r3, r3, #5
 800ac2c:	69ba      	ldr	r2, [r7, #24]
 800ac2e:	f002 021f 	and.w	r2, r2, #31
 800ac32:	2a00      	cmp	r2, #0
 800ac34:	bf14      	ite	ne
 800ac36:	2201      	movne	r2, #1
 800ac38:	2200      	moveq	r2, #0
 800ac3a:	b2d2      	uxtb	r2, r2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff faed 	bl	800a220 <mbedtls_mpi_grow>
 800ac46:	61f8      	str	r0, [r7, #28]
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d16e      	bne.n	800ad2c <mbedtls_mpi_shift_l+0x13a>

    ret = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d02f      	beq.n	800acb8 <mbedtls_mpi_shift_l+0xc6>
    {
        for( i = X->n; i > v0; i-- )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	61bb      	str	r3, [r7, #24]
 800ac5e:	e016      	b.n	800ac8e <mbedtls_mpi_shift_l+0x9c>
            X->p[i - 1] = X->p[i - v0 - 1];
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	689a      	ldr	r2, [r3, #8]
 800ac64:	69b9      	ldr	r1, [r7, #24]
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	1ac9      	subs	r1, r1, r3
 800ac6a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ac6e:	440b      	add	r3, r1
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	441a      	add	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6899      	ldr	r1, [r3, #8]
 800ac78:	69b8      	ldr	r0, [r7, #24]
 800ac7a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ac7e:	4403      	add	r3, r0
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	440b      	add	r3, r1
 800ac84:	6812      	ldr	r2, [r2, #0]
 800ac86:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	61bb      	str	r3, [r7, #24]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d8e4      	bhi.n	800ac60 <mbedtls_mpi_shift_l+0x6e>

        for( ; i > 0; i-- )
 800ac96:	e00c      	b.n	800acb2 <mbedtls_mpi_shift_l+0xc0>
            X->p[i - 1] = 0;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	689a      	ldr	r2, [r3, #8]
 800ac9c:	69b9      	ldr	r1, [r7, #24]
 800ac9e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aca2:	440b      	add	r3, r1
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	3b01      	subs	r3, #1
 800acb0:	61bb      	str	r3, [r7, #24]
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1ef      	bne.n	800ac98 <mbedtls_mpi_shift_l+0xa6>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d035      	beq.n	800ad2a <mbedtls_mpi_shift_l+0x138>
    {
        for( i = v0; i < X->n; i++ )
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	61bb      	str	r3, [r7, #24]
 800acc2:	e02d      	b.n	800ad20 <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	689a      	ldr	r2, [r3, #8]
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f1c3 0320 	rsb	r3, r3, #32
 800acd6:	fa22 f303 	lsr.w	r3, r2, r3
 800acda:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	689a      	ldr	r2, [r3, #8]
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	4413      	add	r3, r2
 800ace6:	6819      	ldr	r1, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689a      	ldr	r2, [r3, #8]
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	fa01 f202 	lsl.w	r2, r1, r2
 800acf8:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	689a      	ldr	r2, [r3, #8]
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	6819      	ldr	r1, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	689a      	ldr	r2, [r3, #8]
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	697a      	ldr	r2, [r7, #20]
 800ad12:	430a      	orrs	r2, r1
 800ad14:	601a      	str	r2, [r3, #0]
            r0 = r1;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	61bb      	str	r3, [r7, #24]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d3cc      	bcc.n	800acc4 <mbedtls_mpi_shift_l+0xd2>
        }
    }

cleanup:
 800ad2a:	bf00      	nop

    return( ret );
 800ad2c:	69fb      	ldr	r3, [r7, #28]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3720      	adds	r7, #32
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b088      	sub	sp, #32
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 800ad40:	2300      	movs	r3, #0
 800ad42:	61bb      	str	r3, [r7, #24]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	095b      	lsrs	r3, r3, #5
 800ad48:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	f003 031f 	and.w	r3, r3, #31
 800ad50:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d807      	bhi.n	800ad6c <mbedtls_mpi_shift_r+0x36>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	697a      	ldr	r2, [r7, #20]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d108      	bne.n	800ad78 <mbedtls_mpi_shift_r+0x42>
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d005      	beq.n	800ad78 <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff fc5e 	bl	800a630 <mbedtls_mpi_lset>
 800ad74:	4603      	mov	r3, r0
 800ad76:	e075      	b.n	800ae64 <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d02a      	beq.n	800add4 <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 800ad7e:	2300      	movs	r3, #0
 800ad80:	61fb      	str	r3, [r7, #28]
 800ad82:	e010      	b.n	800ada6 <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	69f9      	ldr	r1, [r7, #28]
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	440b      	add	r3, r1
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	441a      	add	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6899      	ldr	r1, [r3, #8]
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	440b      	add	r3, r1
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	3301      	adds	r3, #1
 800ada4:	61fb      	str	r3, [r7, #28]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	69fa      	ldr	r2, [r7, #28]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d3e7      	bcc.n	800ad84 <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 800adb4:	e009      	b.n	800adca <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	689a      	ldr	r2, [r3, #8]
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	009b      	lsls	r3, r3, #2
 800adbe:	4413      	add	r3, r2
 800adc0:	2200      	movs	r2, #0
 800adc2:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	3301      	adds	r3, #1
 800adc8:	61fb      	str	r3, [r7, #28]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	69fa      	ldr	r2, [r7, #28]
 800add0:	429a      	cmp	r2, r3
 800add2:	d3f0      	bcc.n	800adb6 <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d043      	beq.n	800ae62 <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	61fb      	str	r3, [r7, #28]
 800ade0:	e03c      	b.n	800ae5c <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	689a      	ldr	r2, [r3, #8]
 800ade6:	69f9      	ldr	r1, [r7, #28]
 800ade8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800adec:	440b      	add	r3, r1
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	f1c3 0320 	rsb	r3, r3, #32
 800adfa:	fa02 f303 	lsl.w	r3, r2, r3
 800adfe:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	689a      	ldr	r2, [r3, #8]
 800ae04:	69f9      	ldr	r1, [r7, #28]
 800ae06:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae0a:	440b      	add	r3, r1
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4413      	add	r3, r2
 800ae10:	6819      	ldr	r1, [r3, #0]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	689a      	ldr	r2, [r3, #8]
 800ae16:	69f8      	ldr	r0, [r7, #28]
 800ae18:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae1c:	4403      	add	r3, r0
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	fa21 f202 	lsr.w	r2, r1, r2
 800ae28:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	689a      	ldr	r2, [r3, #8]
 800ae2e:	69f9      	ldr	r1, [r7, #28]
 800ae30:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae34:	440b      	add	r3, r1
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	6819      	ldr	r1, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	689a      	ldr	r2, [r3, #8]
 800ae40:	69f8      	ldr	r0, [r7, #28]
 800ae42:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae46:	4403      	add	r3, r0
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	601a      	str	r2, [r3, #0]
            r0 = r1;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	61fb      	str	r3, [r7, #28]
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1bf      	bne.n	800ade2 <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	e00d      	b.n	800ae9a <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	689a      	ldr	r2, [r3, #8]
 800ae82:	68f9      	ldr	r1, [r7, #12]
 800ae84:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae88:	440b      	add	r3, r1
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d106      	bne.n	800aea2 <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	3b01      	subs	r3, #1
 800ae98:	60fb      	str	r3, [r7, #12]
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1ee      	bne.n	800ae7e <mbedtls_mpi_cmp_abs+0x12>
 800aea0:	e000      	b.n	800aea4 <mbedtls_mpi_cmp_abs+0x38>
            break;
 800aea2:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	60bb      	str	r3, [r7, #8]
 800aeaa:	e00d      	b.n	800aec8 <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	689a      	ldr	r2, [r3, #8]
 800aeb0:	68b9      	ldr	r1, [r7, #8]
 800aeb2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aeb6:	440b      	add	r3, r1
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	4413      	add	r3, r2
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d106      	bne.n	800aed0 <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	60bb      	str	r3, [r7, #8]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1ee      	bne.n	800aeac <mbedtls_mpi_cmp_abs+0x40>
 800aece:	e000      	b.n	800aed2 <mbedtls_mpi_cmp_abs+0x66>
            break;
 800aed0:	bf00      	nop

    if( i == 0 && j == 0 )
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d104      	bne.n	800aee2 <mbedtls_mpi_cmp_abs+0x76>
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 800aede:	2300      	movs	r3, #0
 800aee0:	e040      	b.n	800af64 <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d901      	bls.n	800aeee <mbedtls_mpi_cmp_abs+0x82>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e03a      	b.n	800af64 <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d932      	bls.n	800af5c <mbedtls_mpi_cmp_abs+0xf0>
 800aef6:	f04f 33ff 	mov.w	r3, #4294967295
 800aefa:	e033      	b.n	800af64 <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	689a      	ldr	r2, [r3, #8]
 800af00:	68f9      	ldr	r1, [r7, #12]
 800af02:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af06:	440b      	add	r3, r1
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	6899      	ldr	r1, [r3, #8]
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af18:	4403      	add	r3, r0
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	440b      	add	r3, r1
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	429a      	cmp	r2, r3
 800af22:	d901      	bls.n	800af28 <mbedtls_mpi_cmp_abs+0xbc>
 800af24:	2301      	movs	r3, #1
 800af26:	e01d      	b.n	800af64 <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	689a      	ldr	r2, [r3, #8]
 800af2c:	68f9      	ldr	r1, [r7, #12]
 800af2e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af32:	440b      	add	r3, r1
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	6899      	ldr	r1, [r3, #8]
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af44:	4403      	add	r3, r0
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	440b      	add	r3, r1
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d202      	bcs.n	800af56 <mbedtls_mpi_cmp_abs+0xea>
 800af50:	f04f 33ff 	mov.w	r3, #4294967295
 800af54:	e006      	b.n	800af64 <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	3b01      	subs	r3, #1
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d1cc      	bne.n	800aefc <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	60fb      	str	r3, [r7, #12]
 800af80:	e00d      	b.n	800af9e <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	689a      	ldr	r2, [r3, #8]
 800af86:	68f9      	ldr	r1, [r7, #12]
 800af88:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af8c:	440b      	add	r3, r1
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	4413      	add	r3, r2
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d106      	bne.n	800afa6 <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1ee      	bne.n	800af82 <mbedtls_mpi_cmp_mpi+0x12>
 800afa4:	e000      	b.n	800afa8 <mbedtls_mpi_cmp_mpi+0x38>
            break;
 800afa6:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	60bb      	str	r3, [r7, #8]
 800afae:	e00d      	b.n	800afcc <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	689a      	ldr	r2, [r3, #8]
 800afb4:	68b9      	ldr	r1, [r7, #8]
 800afb6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800afba:	440b      	add	r3, r1
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d106      	bne.n	800afd4 <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	3b01      	subs	r3, #1
 800afca:	60bb      	str	r3, [r7, #8]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1ee      	bne.n	800afb0 <mbedtls_mpi_cmp_mpi+0x40>
 800afd2:	e000      	b.n	800afd6 <mbedtls_mpi_cmp_mpi+0x66>
            break;
 800afd4:	bf00      	nop

    if( i == 0 && j == 0 )
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d104      	bne.n	800afe6 <mbedtls_mpi_cmp_mpi+0x76>
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 800afe2:	2300      	movs	r3, #0
 800afe4:	e059      	b.n	800b09a <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 800afe6:	68fa      	ldr	r2, [r7, #12]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	429a      	cmp	r2, r3
 800afec:	d902      	bls.n	800aff4 <mbedtls_mpi_cmp_mpi+0x84>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	e052      	b.n	800b09a <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d903      	bls.n	800b004 <mbedtls_mpi_cmp_mpi+0x94>
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	425b      	negs	r3, r3
 800b002:	e04a      	b.n	800b09a <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	dd05      	ble.n	800b018 <mbedtls_mpi_cmp_mpi+0xa8>
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	da01      	bge.n	800b018 <mbedtls_mpi_cmp_mpi+0xa8>
 800b014:	2301      	movs	r3, #1
 800b016:	e040      	b.n	800b09a <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dd38      	ble.n	800b092 <mbedtls_mpi_cmp_mpi+0x122>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	da34      	bge.n	800b092 <mbedtls_mpi_cmp_mpi+0x122>
 800b028:	f04f 33ff 	mov.w	r3, #4294967295
 800b02c:	e035      	b.n	800b09a <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	689a      	ldr	r2, [r3, #8]
 800b032:	68f9      	ldr	r1, [r7, #12]
 800b034:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b038:	440b      	add	r3, r1
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4413      	add	r3, r2
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	6899      	ldr	r1, [r3, #8]
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b04a:	4403      	add	r3, r0
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	440b      	add	r3, r1
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	429a      	cmp	r2, r3
 800b054:	d902      	bls.n	800b05c <mbedtls_mpi_cmp_mpi+0xec>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	e01e      	b.n	800b09a <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689a      	ldr	r2, [r3, #8]
 800b060:	68f9      	ldr	r1, [r7, #12]
 800b062:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b066:	440b      	add	r3, r1
 800b068:	009b      	lsls	r3, r3, #2
 800b06a:	4413      	add	r3, r2
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	6899      	ldr	r1, [r3, #8]
 800b072:	68f8      	ldr	r0, [r7, #12]
 800b074:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b078:	4403      	add	r3, r0
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	440b      	add	r3, r1
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	429a      	cmp	r2, r3
 800b082:	d203      	bcs.n	800b08c <mbedtls_mpi_cmp_mpi+0x11c>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	425b      	negs	r3, r3
 800b08a:	e006      	b.n	800b09a <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3b01      	subs	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1ca      	bne.n	800b02e <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b086      	sub	sp, #24
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	bfb8      	it	lt
 800b0b6:	425b      	neglt	r3, r3
 800b0b8:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	da02      	bge.n	800b0c6 <mbedtls_mpi_cmp_int+0x20>
 800b0c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c4:	e000      	b.n	800b0c8 <mbedtls_mpi_cmp_int+0x22>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	613b      	str	r3, [r7, #16]
    Y.p = p;
 800b0ce:	f107 0308 	add.w	r3, r7, #8
 800b0d2:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800b0d4:	f107 030c 	add.w	r3, r7, #12
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7ff ff48 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800b0e0:	4603      	mov	r3, r0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b08c      	sub	sp, #48	@ 0x30
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	60f8      	str	r0, [r7, #12]
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d105      	bne.n	800b10a <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	617b      	str	r3, [r7, #20]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	60bb      	str	r3, [r7, #8]
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d008      	beq.n	800b124 <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800b112:	68b9      	ldr	r1, [r7, #8]
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f7ff f92c 	bl	800a372 <mbedtls_mpi_copy>
 800b11a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f040 808d 	bne.w	800b23e <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2201      	movs	r2, #1
 800b128:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b130:	e00d      	b.n	800b14e <mbedtls_mpi_add_abs+0x64>
        if( B->p[j - 1] != 0 )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689a      	ldr	r2, [r3, #8]
 800b136:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b138:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b13c:	440b      	add	r3, r1
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d106      	bne.n	800b156 <mbedtls_mpi_add_abs+0x6c>
    for( j = B->n; j > 0; j-- )
 800b148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14a:	3b01      	subs	r3, #1
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1ee      	bne.n	800b132 <mbedtls_mpi_add_abs+0x48>
 800b154:	e000      	b.n	800b158 <mbedtls_mpi_add_abs+0x6e>
            break;
 800b156:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800b158:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f7ff f860 	bl	800a220 <mbedtls_mpi_grow>
 800b160:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b164:	2b00      	cmp	r3, #0
 800b166:	d16a      	bne.n	800b23e <mbedtls_mpi_add_abs+0x154>

    o = B->p; p = X->p; c = 0;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	623b      	str	r3, [r7, #32]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	61fb      	str	r3, [r7, #28]
 800b174:	2300      	movs	r3, #0
 800b176:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 800b178:	2300      	movs	r3, #0
 800b17a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b17c:	e02c      	b.n	800b1d8 <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	441a      	add	r2, r3
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	601a      	str	r2, [r3, #0]
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	69ba      	ldr	r2, [r7, #24]
 800b196:	429a      	cmp	r2, r3
 800b198:	bf8c      	ite	hi
 800b19a:	2301      	movhi	r3, #1
 800b19c:	2300      	movls	r3, #0
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	441a      	add	r2, r3
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	693a      	ldr	r2, [r7, #16]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	bf8c      	ite	hi
 800b1b8:	2301      	movhi	r3, #1
 800b1ba:	2300      	movls	r3, #0
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	461a      	mov	r2, r3
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 800b1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	623b      	str	r3, [r7, #32]
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	3304      	adds	r3, #4
 800b1d6:	61fb      	str	r3, [r7, #28]
 800b1d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d3ce      	bcc.n	800b17e <mbedtls_mpi_add_abs+0x94>
    }

    while( c != 0 )
 800b1e0:	e029      	b.n	800b236 <mbedtls_mpi_add_abs+0x14c>
    {
        if( i >= X->n )
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d30f      	bcc.n	800b20c <mbedtls_mpi_add_abs+0x122>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800b1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f7ff f814 	bl	800a220 <mbedtls_mpi_grow>
 800b1f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d11e      	bne.n	800b23e <mbedtls_mpi_add_abs+0x154>
            p = X->p + i;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	689a      	ldr	r2, [r3, #8]
 800b204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 800b20c:	69fb      	ldr	r3, [r7, #28]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	441a      	add	r2, r3
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	429a      	cmp	r2, r3
 800b220:	bf8c      	ite	hi
 800b222:	2301      	movhi	r3, #1
 800b224:	2300      	movls	r3, #0
 800b226:	b2db      	uxtb	r3, r3
 800b228:	61bb      	str	r3, [r7, #24]
 800b22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b22c:	3301      	adds	r3, #1
 800b22e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	3304      	adds	r3, #4
 800b234:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1d2      	bne.n	800b1e2 <mbedtls_mpi_add_abs+0xf8>
    }

cleanup:
 800b23c:	bf00      	nop

    return( ret );
 800b23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b240:	4618      	mov	r0, r3
 800b242:	3730      	adds	r7, #48	@ 0x30
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 800b248:	b480      	push	{r7}
 800b24a:	b089      	sub	sp, #36	@ 0x24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800b254:	2300      	movs	r3, #0
 800b256:	61bb      	str	r3, [r7, #24]
 800b258:	2300      	movs	r3, #0
 800b25a:	61fb      	str	r3, [r7, #28]
 800b25c:	e02b      	b.n	800b2b6 <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	69ba      	ldr	r2, [r7, #24]
 800b264:	429a      	cmp	r2, r3
 800b266:	bf8c      	ite	hi
 800b268:	2301      	movhi	r3, #1
 800b26a:	2300      	movls	r3, #0
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	617b      	str	r3, [r7, #20]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	1ad2      	subs	r2, r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	bf34      	ite	cc
 800b288:	2301      	movcc	r3, #1
 800b28a:	2300      	movcs	r3, #0
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	461a      	mov	r2, r3
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	4413      	add	r3, r2
 800b294:	61bb      	str	r3, [r7, #24]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	1ad2      	subs	r2, r2, r3
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	601a      	str	r2, [r3, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	61fb      	str	r3, [r7, #28]
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	60bb      	str	r3, [r7, #8]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	607b      	str	r3, [r7, #4]
 800b2b6:	69fa      	ldr	r2, [r7, #28]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d3cf      	bcc.n	800b25e <mpi_sub_hlp+0x16>
    }

    while( c != 0 )
 800b2be:	e013      	b.n	800b2e8 <mpi_sub_hlp+0xa0>
    {
        z = ( *d < c ); *d -= c;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	bf8c      	ite	hi
 800b2ca:	2301      	movhi	r3, #1
 800b2cc:	2300      	movls	r3, #0
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	617b      	str	r3, [r7, #20]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	1ad2      	subs	r2, r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	601a      	str	r2, [r3, #0]
        c = z; d++;
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	61bb      	str	r3, [r7, #24]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1e8      	bne.n	800b2c0 <mpi_sub_hlp+0x78>
    }
}
 800b2ee:	bf00      	nop
 800b2f0:	bf00      	nop
 800b2f2:	3724      	adds	r7, #36	@ 0x24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08a      	sub	sp, #40	@ 0x28
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800b308:	6879      	ldr	r1, [r7, #4]
 800b30a:	68b8      	ldr	r0, [r7, #8]
 800b30c:	f7ff fdae 	bl	800ae6c <mbedtls_mpi_cmp_abs>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	da02      	bge.n	800b31c <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800b316:	f06f 0309 	mvn.w	r3, #9
 800b31a:	e04b      	b.n	800b3b4 <mbedtls_mpi_sub_abs+0xb8>

    mbedtls_mpi_init( &TB );
 800b31c:	f107 0314 	add.w	r3, r7, #20
 800b320:	4618      	mov	r0, r3
 800b322:	f7fe ff44 	bl	800a1ae <mbedtls_mpi_init>

    if( X == B )
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d10c      	bne.n	800b348 <mbedtls_mpi_sub_abs+0x4c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800b32e:	f107 0314 	add.w	r3, r7, #20
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff f81c 	bl	800a372 <mbedtls_mpi_copy>
 800b33a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d132      	bne.n	800b3a8 <mbedtls_mpi_sub_abs+0xac>
        B = &TB;
 800b342:	f107 0314 	add.w	r3, r7, #20
 800b346:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d007      	beq.n	800b360 <mbedtls_mpi_sub_abs+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800b350:	68b9      	ldr	r1, [r7, #8]
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7ff f80d 	bl	800a372 <mbedtls_mpi_copy>
 800b358:	6278      	str	r0, [r7, #36]	@ 0x24
 800b35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d123      	bne.n	800b3a8 <mbedtls_mpi_sub_abs+0xac>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2201      	movs	r2, #1
 800b364:	601a      	str	r2, [r3, #0]

    ret = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	627b      	str	r3, [r7, #36]	@ 0x24

    for( n = B->n; n > 0; n-- )
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	623b      	str	r3, [r7, #32]
 800b370:	e00d      	b.n	800b38e <mbedtls_mpi_sub_abs+0x92>
        if( B->p[n - 1] != 0 )
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	689a      	ldr	r2, [r3, #8]
 800b376:	6a39      	ldr	r1, [r7, #32]
 800b378:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b37c:	440b      	add	r3, r1
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	4413      	add	r3, r2
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d106      	bne.n	800b396 <mbedtls_mpi_sub_abs+0x9a>
    for( n = B->n; n > 0; n-- )
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	623b      	str	r3, [r7, #32]
 800b38e:	6a3b      	ldr	r3, [r7, #32]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1ee      	bne.n	800b372 <mbedtls_mpi_sub_abs+0x76>
 800b394:	e000      	b.n	800b398 <mbedtls_mpi_sub_abs+0x9c>
            break;
 800b396:	bf00      	nop

    mpi_sub_hlp( n, B->p, X->p );
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6899      	ldr	r1, [r3, #8]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	6a38      	ldr	r0, [r7, #32]
 800b3a4:	f7ff ff50 	bl	800b248 <mpi_sub_hlp>

cleanup:

    mbedtls_mpi_free( &TB );
 800b3a8:	f107 0314 	add.w	r3, r7, #20
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fe ff11 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3728      	adds	r7, #40	@ 0x28
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	613b      	str	r3, [r7, #16]
    if( A->s * B->s < 0 )
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	6812      	ldr	r2, [r2, #0]
 800b3d6:	fb02 f303 	mul.w	r3, r2, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	da21      	bge.n	800b422 <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	68b8      	ldr	r0, [r7, #8]
 800b3e2:	f7ff fd43 	bl	800ae6c <mbedtls_mpi_cmp_abs>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	db0c      	blt.n	800b406 <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	68b9      	ldr	r1, [r7, #8]
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f7ff ff83 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800b3f6:	6178      	str	r0, [r7, #20]
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d11d      	bne.n	800b43a <mbedtls_mpi_add_mpi+0x7e>
            X->s =  s;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	601a      	str	r2, [r3, #0]
 800b404:	e019      	b.n	800b43a <mbedtls_mpi_add_mpi+0x7e>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	6879      	ldr	r1, [r7, #4]
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f7ff ff76 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800b410:	6178      	str	r0, [r7, #20]
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d110      	bne.n	800b43a <mbedtls_mpi_add_mpi+0x7e>
            X->s = -s;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	425a      	negs	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	601a      	str	r2, [r3, #0]
 800b420:	e00b      	b.n	800b43a <mbedtls_mpi_add_mpi+0x7e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	68b9      	ldr	r1, [r7, #8]
 800b426:	68f8      	ldr	r0, [r7, #12]
 800b428:	f7ff fe5f 	bl	800b0ea <mbedtls_mpi_add_abs>
 800b42c:	6178      	str	r0, [r7, #20]
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d102      	bne.n	800b43a <mbedtls_mpi_add_mpi+0x7e>
        X->s = s;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	693a      	ldr	r2, [r7, #16]
 800b438:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 800b43a:	697b      	ldr	r3, [r7, #20]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3718      	adds	r7, #24
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	613b      	str	r3, [r7, #16]
    if( A->s * B->s > 0 )
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	6812      	ldr	r2, [r2, #0]
 800b45e:	fb02 f303 	mul.w	r3, r2, r3
 800b462:	2b00      	cmp	r3, #0
 800b464:	dd21      	ble.n	800b4aa <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	68b8      	ldr	r0, [r7, #8]
 800b46a:	f7ff fcff 	bl	800ae6c <mbedtls_mpi_cmp_abs>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	db0c      	blt.n	800b48e <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	68b9      	ldr	r1, [r7, #8]
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f7ff ff3f 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800b47e:	6178      	str	r0, [r7, #20]
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d11d      	bne.n	800b4c2 <mbedtls_mpi_sub_mpi+0x7e>
            X->s =  s;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	601a      	str	r2, [r3, #0]
 800b48c:	e019      	b.n	800b4c2 <mbedtls_mpi_sub_mpi+0x7e>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	6879      	ldr	r1, [r7, #4]
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f7ff ff32 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800b498:	6178      	str	r0, [r7, #20]
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d110      	bne.n	800b4c2 <mbedtls_mpi_sub_mpi+0x7e>
            X->s = -s;
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	425a      	negs	r2, r3
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	601a      	str	r2, [r3, #0]
 800b4a8:	e00b      	b.n	800b4c2 <mbedtls_mpi_sub_mpi+0x7e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	68b9      	ldr	r1, [r7, #8]
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f7ff fe1b 	bl	800b0ea <mbedtls_mpi_add_abs>
 800b4b4:	6178      	str	r0, [r7, #20]
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <mbedtls_mpi_sub_mpi+0x7e>
        X->s = s;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 800b4c2:	697b      	ldr	r3, [r7, #20]
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bfb8      	it	lt
 800b4de:	425b      	neglt	r3, r3
 800b4e0:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	da02      	bge.n	800b4ee <mbedtls_mpi_add_int+0x22>
 800b4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ec:	e000      	b.n	800b4f0 <mbedtls_mpi_add_int+0x24>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800b4f6:	f107 0310 	add.w	r3, r7, #16
 800b4fa:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 800b4fc:	f107 0314 	add.w	r3, r7, #20
 800b500:	461a      	mov	r2, r3
 800b502:	68b9      	ldr	r1, [r7, #8]
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f7ff ff59 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800b50a:	4603      	mov	r3, r0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3720      	adds	r7, #32
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b088      	sub	sp, #32
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	bfb8      	it	lt
 800b526:	425b      	neglt	r3, r3
 800b528:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	da02      	bge.n	800b536 <mbedtls_mpi_sub_int+0x22>
 800b530:	f04f 33ff 	mov.w	r3, #4294967295
 800b534:	e000      	b.n	800b538 <mbedtls_mpi_sub_int+0x24>
 800b536:	2301      	movs	r3, #1
 800b538:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800b53a:	2301      	movs	r3, #1
 800b53c:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800b53e:	f107 0310 	add.w	r3, r7, #16
 800b542:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800b544:	f107 0314 	add.w	r3, r7, #20
 800b548:	461a      	mov	r2, r3
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7ff ff79 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800b552:	4603      	mov	r3, r0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3720      	adds	r7, #32
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800b55c:	b480      	push	{r7}
 800b55e:	b09f      	sub	sp, #124	@ 0x7c
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	607a      	str	r2, [r7, #4]
 800b568:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint c = 0, t = 0;
 800b56a:	2300      	movs	r3, #0
 800b56c:	677b      	str	r3, [r7, #116]	@ 0x74
 800b56e:	2300      	movs	r3, #0
 800b570:	673b      	str	r3, [r7, #112]	@ 0x70
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800b572:	f000 bf49 	b.w	800c408 <mpi_mul_hlp+0xeac>
    {
        MULADDC_INIT
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	0c1b      	lsrs	r3, r3, #16
 800b580:	62bb      	str	r3, [r7, #40]	@ 0x28
        MULADDC_CORE   MULADDC_CORE
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	b29b      	uxth	r3, r3
 800b588:	627b      	str	r3, [r7, #36]	@ 0x24
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	0c1b      	lsrs	r3, r3, #16
 800b590:	623b      	str	r3, [r7, #32]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	3304      	adds	r3, #4
 800b596:	60bb      	str	r3, [r7, #8]
 800b598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b59c:	fb02 f303 	mul.w	r3, r2, r3
 800b5a0:	61fb      	str	r3, [r7, #28]
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5a6:	fb02 f303 	mul.w	r3, r2, r3
 800b5aa:	61bb      	str	r3, [r7, #24]
 800b5ac:	6a3b      	ldr	r3, [r7, #32]
 800b5ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5b0:	fb02 f303 	mul.w	r3, r2, r3
 800b5b4:	617b      	str	r3, [r7, #20]
 800b5b6:	6a3b      	ldr	r3, [r7, #32]
 800b5b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5ba:	fb02 f303 	mul.w	r3, r2, r3
 800b5be:	613b      	str	r3, [r7, #16]
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	0c1b      	lsrs	r3, r3, #16
 800b5c4:	693a      	ldr	r2, [r7, #16]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	613b      	str	r3, [r7, #16]
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	0c1b      	lsrs	r3, r3, #16
 800b5ce:	693a      	ldr	r2, [r7, #16]
 800b5d0:	4413      	add	r3, r2
 800b5d2:	613b      	str	r3, [r7, #16]
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	041b      	lsls	r3, r3, #16
 800b5d8:	61fb      	str	r3, [r7, #28]
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	041b      	lsls	r3, r3, #16
 800b5de:	617b      	str	r3, [r7, #20]
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	4413      	add	r3, r2
 800b5e6:	61bb      	str	r3, [r7, #24]
 800b5e8:	69ba      	ldr	r2, [r7, #24]
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	bf34      	ite	cc
 800b5f0:	2301      	movcc	r3, #1
 800b5f2:	2300      	movcs	r3, #0
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	613b      	str	r3, [r7, #16]
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	4413      	add	r3, r2
 800b604:	61bb      	str	r3, [r7, #24]
 800b606:	69ba      	ldr	r2, [r7, #24]
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	bf34      	ite	cc
 800b60e:	2301      	movcc	r3, #1
 800b610:	2300      	movcs	r3, #0
 800b612:	b2db      	uxtb	r3, r3
 800b614:	461a      	mov	r2, r3
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	4413      	add	r3, r2
 800b61a:	613b      	str	r3, [r7, #16]
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b620:	4413      	add	r3, r2
 800b622:	61bb      	str	r3, [r7, #24]
 800b624:	69ba      	ldr	r2, [r7, #24]
 800b626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b628:	429a      	cmp	r2, r3
 800b62a:	bf34      	ite	cc
 800b62c:	2301      	movcc	r3, #1
 800b62e:	2300      	movcs	r3, #0
 800b630:	b2db      	uxtb	r3, r3
 800b632:	461a      	mov	r2, r3
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	4413      	add	r3, r2
 800b638:	613b      	str	r3, [r7, #16]
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	69ba      	ldr	r2, [r7, #24]
 800b640:	4413      	add	r3, r2
 800b642:	61bb      	str	r3, [r7, #24]
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	69ba      	ldr	r2, [r7, #24]
 800b64a:	429a      	cmp	r2, r3
 800b64c:	bf34      	ite	cc
 800b64e:	2301      	movcc	r3, #1
 800b650:	2300      	movcs	r3, #0
 800b652:	b2db      	uxtb	r3, r3
 800b654:	461a      	mov	r2, r3
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	4413      	add	r3, r2
 800b65a:	613b      	str	r3, [r7, #16]
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	677b      	str	r3, [r7, #116]	@ 0x74
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	1d1a      	adds	r2, r3, #4
 800b664:	607a      	str	r2, [r7, #4]
 800b666:	69ba      	ldr	r2, [r7, #24]
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	627b      	str	r3, [r7, #36]	@ 0x24
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	0c1b      	lsrs	r3, r3, #16
 800b678:	623b      	str	r3, [r7, #32]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	3304      	adds	r3, #4
 800b67e:	60bb      	str	r3, [r7, #8]
 800b680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b682:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b684:	fb02 f303 	mul.w	r3, r2, r3
 800b688:	61fb      	str	r3, [r7, #28]
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b68e:	fb02 f303 	mul.w	r3, r2, r3
 800b692:	61bb      	str	r3, [r7, #24]
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b698:	fb02 f303 	mul.w	r3, r2, r3
 800b69c:	617b      	str	r3, [r7, #20]
 800b69e:	6a3b      	ldr	r3, [r7, #32]
 800b6a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
 800b6a6:	613b      	str	r3, [r7, #16]
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	0c1b      	lsrs	r3, r3, #16
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	613b      	str	r3, [r7, #16]
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	0c1b      	lsrs	r3, r3, #16
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	613b      	str	r3, [r7, #16]
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	041b      	lsls	r3, r3, #16
 800b6c0:	61fb      	str	r3, [r7, #28]
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	041b      	lsls	r3, r3, #16
 800b6c6:	617b      	str	r3, [r7, #20]
 800b6c8:	69ba      	ldr	r2, [r7, #24]
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	61bb      	str	r3, [r7, #24]
 800b6d0:	69ba      	ldr	r2, [r7, #24]
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	bf34      	ite	cc
 800b6d8:	2301      	movcc	r3, #1
 800b6da:	2300      	movcs	r3, #0
 800b6dc:	b2db      	uxtb	r3, r3
 800b6de:	461a      	mov	r2, r3
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	613b      	str	r3, [r7, #16]
 800b6e6:	69ba      	ldr	r2, [r7, #24]
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	61bb      	str	r3, [r7, #24]
 800b6ee:	69ba      	ldr	r2, [r7, #24]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	bf34      	ite	cc
 800b6f6:	2301      	movcc	r3, #1
 800b6f8:	2300      	movcs	r3, #0
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	4413      	add	r3, r2
 800b702:	613b      	str	r3, [r7, #16]
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b708:	4413      	add	r3, r2
 800b70a:	61bb      	str	r3, [r7, #24]
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b710:	429a      	cmp	r2, r3
 800b712:	bf34      	ite	cc
 800b714:	2301      	movcc	r3, #1
 800b716:	2300      	movcs	r3, #0
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	461a      	mov	r2, r3
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	4413      	add	r3, r2
 800b720:	613b      	str	r3, [r7, #16]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	69ba      	ldr	r2, [r7, #24]
 800b728:	4413      	add	r3, r2
 800b72a:	61bb      	str	r3, [r7, #24]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	69ba      	ldr	r2, [r7, #24]
 800b732:	429a      	cmp	r2, r3
 800b734:	bf34      	ite	cc
 800b736:	2301      	movcc	r3, #1
 800b738:	2300      	movcs	r3, #0
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	461a      	mov	r2, r3
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	4413      	add	r3, r2
 800b742:	613b      	str	r3, [r7, #16]
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	677b      	str	r3, [r7, #116]	@ 0x74
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	1d1a      	adds	r2, r3, #4
 800b74c:	607a      	str	r2, [r7, #4]
 800b74e:	69ba      	ldr	r2, [r7, #24]
 800b750:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	b29b      	uxth	r3, r3
 800b758:	627b      	str	r3, [r7, #36]	@ 0x24
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	0c1b      	lsrs	r3, r3, #16
 800b760:	623b      	str	r3, [r7, #32]
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	3304      	adds	r3, #4
 800b766:	60bb      	str	r3, [r7, #8]
 800b768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b76c:	fb02 f303 	mul.w	r3, r2, r3
 800b770:	61fb      	str	r3, [r7, #28]
 800b772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b776:	fb02 f303 	mul.w	r3, r2, r3
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	6a3b      	ldr	r3, [r7, #32]
 800b77e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b780:	fb02 f303 	mul.w	r3, r2, r3
 800b784:	617b      	str	r3, [r7, #20]
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b78a:	fb02 f303 	mul.w	r3, r2, r3
 800b78e:	613b      	str	r3, [r7, #16]
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	0c1b      	lsrs	r3, r3, #16
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	4413      	add	r3, r2
 800b798:	613b      	str	r3, [r7, #16]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	0c1b      	lsrs	r3, r3, #16
 800b79e:	693a      	ldr	r2, [r7, #16]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	613b      	str	r3, [r7, #16]
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	041b      	lsls	r3, r3, #16
 800b7a8:	61fb      	str	r3, [r7, #28]
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	041b      	lsls	r3, r3, #16
 800b7ae:	617b      	str	r3, [r7, #20]
 800b7b0:	69ba      	ldr	r2, [r7, #24]
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	61bb      	str	r3, [r7, #24]
 800b7b8:	69ba      	ldr	r2, [r7, #24]
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	bf34      	ite	cc
 800b7c0:	2301      	movcc	r3, #1
 800b7c2:	2300      	movcs	r3, #0
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	613b      	str	r3, [r7, #16]
 800b7ce:	69ba      	ldr	r2, [r7, #24]
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	61bb      	str	r3, [r7, #24]
 800b7d6:	69ba      	ldr	r2, [r7, #24]
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	bf34      	ite	cc
 800b7de:	2301      	movcc	r3, #1
 800b7e0:	2300      	movcs	r3, #0
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	613b      	str	r3, [r7, #16]
 800b7ec:	69ba      	ldr	r2, [r7, #24]
 800b7ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7f0:	4413      	add	r3, r2
 800b7f2:	61bb      	str	r3, [r7, #24]
 800b7f4:	69ba      	ldr	r2, [r7, #24]
 800b7f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	bf34      	ite	cc
 800b7fc:	2301      	movcc	r3, #1
 800b7fe:	2300      	movcs	r3, #0
 800b800:	b2db      	uxtb	r3, r3
 800b802:	461a      	mov	r2, r3
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	4413      	add	r3, r2
 800b808:	613b      	str	r3, [r7, #16]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	69ba      	ldr	r2, [r7, #24]
 800b810:	4413      	add	r3, r2
 800b812:	61bb      	str	r3, [r7, #24]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	bf34      	ite	cc
 800b81e:	2301      	movcc	r3, #1
 800b820:	2300      	movcs	r3, #0
 800b822:	b2db      	uxtb	r3, r3
 800b824:	461a      	mov	r2, r3
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	4413      	add	r3, r2
 800b82a:	613b      	str	r3, [r7, #16]
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	677b      	str	r3, [r7, #116]	@ 0x74
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	1d1a      	adds	r2, r3, #4
 800b834:	607a      	str	r2, [r7, #4]
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	601a      	str	r2, [r3, #0]
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	b29b      	uxth	r3, r3
 800b840:	627b      	str	r3, [r7, #36]	@ 0x24
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	0c1b      	lsrs	r3, r3, #16
 800b848:	623b      	str	r3, [r7, #32]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	3304      	adds	r3, #4
 800b84e:	60bb      	str	r3, [r7, #8]
 800b850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b852:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b854:	fb02 f303 	mul.w	r3, r2, r3
 800b858:	61fb      	str	r3, [r7, #28]
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b85e:	fb02 f303 	mul.w	r3, r2, r3
 800b862:	61bb      	str	r3, [r7, #24]
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b868:	fb02 f303 	mul.w	r3, r2, r3
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	6a3b      	ldr	r3, [r7, #32]
 800b870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b872:	fb02 f303 	mul.w	r3, r2, r3
 800b876:	613b      	str	r3, [r7, #16]
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	0c1b      	lsrs	r3, r3, #16
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	4413      	add	r3, r2
 800b880:	613b      	str	r3, [r7, #16]
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	0c1b      	lsrs	r3, r3, #16
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	4413      	add	r3, r2
 800b88a:	613b      	str	r3, [r7, #16]
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	041b      	lsls	r3, r3, #16
 800b890:	61fb      	str	r3, [r7, #28]
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	041b      	lsls	r3, r3, #16
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	4413      	add	r3, r2
 800b89e:	61bb      	str	r3, [r7, #24]
 800b8a0:	69ba      	ldr	r2, [r7, #24]
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	bf34      	ite	cc
 800b8a8:	2301      	movcc	r3, #1
 800b8aa:	2300      	movcs	r3, #0
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	613b      	str	r3, [r7, #16]
 800b8b6:	69ba      	ldr	r2, [r7, #24]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	61bb      	str	r3, [r7, #24]
 800b8be:	69ba      	ldr	r2, [r7, #24]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	bf34      	ite	cc
 800b8c6:	2301      	movcc	r3, #1
 800b8c8:	2300      	movcs	r3, #0
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	613b      	str	r3, [r7, #16]
 800b8d4:	69ba      	ldr	r2, [r7, #24]
 800b8d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8d8:	4413      	add	r3, r2
 800b8da:	61bb      	str	r3, [r7, #24]
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	bf34      	ite	cc
 800b8e4:	2301      	movcc	r3, #1
 800b8e6:	2300      	movcs	r3, #0
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	613b      	str	r3, [r7, #16]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	69ba      	ldr	r2, [r7, #24]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	61bb      	str	r3, [r7, #24]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	429a      	cmp	r2, r3
 800b904:	bf34      	ite	cc
 800b906:	2301      	movcc	r3, #1
 800b908:	2300      	movcs	r3, #0
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	461a      	mov	r2, r3
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	4413      	add	r3, r2
 800b912:	613b      	str	r3, [r7, #16]
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	677b      	str	r3, [r7, #116]	@ 0x74
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	1d1a      	adds	r2, r3, #4
 800b91c:	607a      	str	r2, [r7, #4]
 800b91e:	69ba      	ldr	r2, [r7, #24]
 800b920:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	b29b      	uxth	r3, r3
 800b928:	627b      	str	r3, [r7, #36]	@ 0x24
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	0c1b      	lsrs	r3, r3, #16
 800b930:	623b      	str	r3, [r7, #32]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	3304      	adds	r3, #4
 800b936:	60bb      	str	r3, [r7, #8]
 800b938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b93a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b93c:	fb02 f303 	mul.w	r3, r2, r3
 800b940:	61fb      	str	r3, [r7, #28]
 800b942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b946:	fb02 f303 	mul.w	r3, r2, r3
 800b94a:	61bb      	str	r3, [r7, #24]
 800b94c:	6a3b      	ldr	r3, [r7, #32]
 800b94e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b950:	fb02 f303 	mul.w	r3, r2, r3
 800b954:	617b      	str	r3, [r7, #20]
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b95a:	fb02 f303 	mul.w	r3, r2, r3
 800b95e:	613b      	str	r3, [r7, #16]
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	0c1b      	lsrs	r3, r3, #16
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	4413      	add	r3, r2
 800b968:	613b      	str	r3, [r7, #16]
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	0c1b      	lsrs	r3, r3, #16
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	4413      	add	r3, r2
 800b972:	613b      	str	r3, [r7, #16]
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	041b      	lsls	r3, r3, #16
 800b978:	61fb      	str	r3, [r7, #28]
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	041b      	lsls	r3, r3, #16
 800b97e:	617b      	str	r3, [r7, #20]
 800b980:	69ba      	ldr	r2, [r7, #24]
 800b982:	69fb      	ldr	r3, [r7, #28]
 800b984:	4413      	add	r3, r2
 800b986:	61bb      	str	r3, [r7, #24]
 800b988:	69ba      	ldr	r2, [r7, #24]
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	bf34      	ite	cc
 800b990:	2301      	movcc	r3, #1
 800b992:	2300      	movcs	r3, #0
 800b994:	b2db      	uxtb	r3, r3
 800b996:	461a      	mov	r2, r3
 800b998:	693b      	ldr	r3, [r7, #16]
 800b99a:	4413      	add	r3, r2
 800b99c:	613b      	str	r3, [r7, #16]
 800b99e:	69ba      	ldr	r2, [r7, #24]
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	61bb      	str	r3, [r7, #24]
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	bf34      	ite	cc
 800b9ae:	2301      	movcc	r3, #1
 800b9b0:	2300      	movcs	r3, #0
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	613b      	str	r3, [r7, #16]
 800b9bc:	69ba      	ldr	r2, [r7, #24]
 800b9be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b9c0:	4413      	add	r3, r2
 800b9c2:	61bb      	str	r3, [r7, #24]
 800b9c4:	69ba      	ldr	r2, [r7, #24]
 800b9c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	bf34      	ite	cc
 800b9cc:	2301      	movcc	r3, #1
 800b9ce:	2300      	movcs	r3, #0
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	613b      	str	r3, [r7, #16]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	69ba      	ldr	r2, [r7, #24]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	61bb      	str	r3, [r7, #24]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	69ba      	ldr	r2, [r7, #24]
 800b9ea:	429a      	cmp	r2, r3
 800b9ec:	bf34      	ite	cc
 800b9ee:	2301      	movcc	r3, #1
 800b9f0:	2300      	movcs	r3, #0
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	613b      	str	r3, [r7, #16]
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	1d1a      	adds	r2, r3, #4
 800ba04:	607a      	str	r2, [r7, #4]
 800ba06:	69ba      	ldr	r2, [r7, #24]
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	0c1b      	lsrs	r3, r3, #16
 800ba18:	623b      	str	r3, [r7, #32]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	3304      	adds	r3, #4
 800ba1e:	60bb      	str	r3, [r7, #8]
 800ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba24:	fb02 f303 	mul.w	r3, r2, r3
 800ba28:	61fb      	str	r3, [r7, #28]
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2e:	fb02 f303 	mul.w	r3, r2, r3
 800ba32:	61bb      	str	r3, [r7, #24]
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba38:	fb02 f303 	mul.w	r3, r2, r3
 800ba3c:	617b      	str	r3, [r7, #20]
 800ba3e:	6a3b      	ldr	r3, [r7, #32]
 800ba40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba42:	fb02 f303 	mul.w	r3, r2, r3
 800ba46:	613b      	str	r3, [r7, #16]
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	0c1b      	lsrs	r3, r3, #16
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	4413      	add	r3, r2
 800ba50:	613b      	str	r3, [r7, #16]
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	0c1b      	lsrs	r3, r3, #16
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	4413      	add	r3, r2
 800ba5a:	613b      	str	r3, [r7, #16]
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	041b      	lsls	r3, r3, #16
 800ba60:	61fb      	str	r3, [r7, #28]
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	041b      	lsls	r3, r3, #16
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	69ba      	ldr	r2, [r7, #24]
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	61bb      	str	r3, [r7, #24]
 800ba70:	69ba      	ldr	r2, [r7, #24]
 800ba72:	69fb      	ldr	r3, [r7, #28]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	bf34      	ite	cc
 800ba78:	2301      	movcc	r3, #1
 800ba7a:	2300      	movcs	r3, #0
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	461a      	mov	r2, r3
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	4413      	add	r3, r2
 800ba84:	613b      	str	r3, [r7, #16]
 800ba86:	69ba      	ldr	r2, [r7, #24]
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	4413      	add	r3, r2
 800ba8c:	61bb      	str	r3, [r7, #24]
 800ba8e:	69ba      	ldr	r2, [r7, #24]
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	bf34      	ite	cc
 800ba96:	2301      	movcc	r3, #1
 800ba98:	2300      	movcs	r3, #0
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	4413      	add	r3, r2
 800baa2:	613b      	str	r3, [r7, #16]
 800baa4:	69ba      	ldr	r2, [r7, #24]
 800baa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800baa8:	4413      	add	r3, r2
 800baaa:	61bb      	str	r3, [r7, #24]
 800baac:	69ba      	ldr	r2, [r7, #24]
 800baae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bab0:	429a      	cmp	r2, r3
 800bab2:	bf34      	ite	cc
 800bab4:	2301      	movcc	r3, #1
 800bab6:	2300      	movcs	r3, #0
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	461a      	mov	r2, r3
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	4413      	add	r3, r2
 800bac0:	613b      	str	r3, [r7, #16]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	69ba      	ldr	r2, [r7, #24]
 800bac8:	4413      	add	r3, r2
 800baca:	61bb      	str	r3, [r7, #24]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	69ba      	ldr	r2, [r7, #24]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	bf34      	ite	cc
 800bad6:	2301      	movcc	r3, #1
 800bad8:	2300      	movcs	r3, #0
 800bada:	b2db      	uxtb	r3, r3
 800badc:	461a      	mov	r2, r3
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	4413      	add	r3, r2
 800bae2:	613b      	str	r3, [r7, #16]
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	677b      	str	r3, [r7, #116]	@ 0x74
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	1d1a      	adds	r2, r3, #4
 800baec:	607a      	str	r2, [r7, #4]
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	0c1b      	lsrs	r3, r3, #16
 800bb00:	623b      	str	r3, [r7, #32]
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	3304      	adds	r3, #4
 800bb06:	60bb      	str	r3, [r7, #8]
 800bb08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb0c:	fb02 f303 	mul.w	r3, r2, r3
 800bb10:	61fb      	str	r3, [r7, #28]
 800bb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb16:	fb02 f303 	mul.w	r3, r2, r3
 800bb1a:	61bb      	str	r3, [r7, #24]
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb20:	fb02 f303 	mul.w	r3, r2, r3
 800bb24:	617b      	str	r3, [r7, #20]
 800bb26:	6a3b      	ldr	r3, [r7, #32]
 800bb28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb2a:	fb02 f303 	mul.w	r3, r2, r3
 800bb2e:	613b      	str	r3, [r7, #16]
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	0c1b      	lsrs	r3, r3, #16
 800bb34:	693a      	ldr	r2, [r7, #16]
 800bb36:	4413      	add	r3, r2
 800bb38:	613b      	str	r3, [r7, #16]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	0c1b      	lsrs	r3, r3, #16
 800bb3e:	693a      	ldr	r2, [r7, #16]
 800bb40:	4413      	add	r3, r2
 800bb42:	613b      	str	r3, [r7, #16]
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	041b      	lsls	r3, r3, #16
 800bb48:	61fb      	str	r3, [r7, #28]
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	041b      	lsls	r3, r3, #16
 800bb4e:	617b      	str	r3, [r7, #20]
 800bb50:	69ba      	ldr	r2, [r7, #24]
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	4413      	add	r3, r2
 800bb56:	61bb      	str	r3, [r7, #24]
 800bb58:	69ba      	ldr	r2, [r7, #24]
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	bf34      	ite	cc
 800bb60:	2301      	movcc	r3, #1
 800bb62:	2300      	movcs	r3, #0
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	461a      	mov	r2, r3
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	613b      	str	r3, [r7, #16]
 800bb6e:	69ba      	ldr	r2, [r7, #24]
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	4413      	add	r3, r2
 800bb74:	61bb      	str	r3, [r7, #24]
 800bb76:	69ba      	ldr	r2, [r7, #24]
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	bf34      	ite	cc
 800bb7e:	2301      	movcc	r3, #1
 800bb80:	2300      	movcs	r3, #0
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	461a      	mov	r2, r3
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	4413      	add	r3, r2
 800bb8a:	613b      	str	r3, [r7, #16]
 800bb8c:	69ba      	ldr	r2, [r7, #24]
 800bb8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb90:	4413      	add	r3, r2
 800bb92:	61bb      	str	r3, [r7, #24]
 800bb94:	69ba      	ldr	r2, [r7, #24]
 800bb96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	bf34      	ite	cc
 800bb9c:	2301      	movcc	r3, #1
 800bb9e:	2300      	movcs	r3, #0
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	461a      	mov	r2, r3
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	4413      	add	r3, r2
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	69ba      	ldr	r2, [r7, #24]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	61bb      	str	r3, [r7, #24]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	69ba      	ldr	r2, [r7, #24]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	bf34      	ite	cc
 800bbbe:	2301      	movcc	r3, #1
 800bbc0:	2300      	movcs	r3, #0
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	4413      	add	r3, r2
 800bbca:	613b      	str	r3, [r7, #16]
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	677b      	str	r3, [r7, #116]	@ 0x74
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	1d1a      	adds	r2, r3, #4
 800bbd4:	607a      	str	r2, [r7, #4]
 800bbd6:	69ba      	ldr	r2, [r7, #24]
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	0c1b      	lsrs	r3, r3, #16
 800bbe8:	623b      	str	r3, [r7, #32]
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	3304      	adds	r3, #4
 800bbee:	60bb      	str	r3, [r7, #8]
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbf4:	fb02 f303 	mul.w	r3, r2, r3
 800bbf8:	61fb      	str	r3, [r7, #28]
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbfe:	fb02 f303 	mul.w	r3, r2, r3
 800bc02:	61bb      	str	r3, [r7, #24]
 800bc04:	6a3b      	ldr	r3, [r7, #32]
 800bc06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc08:	fb02 f303 	mul.w	r3, r2, r3
 800bc0c:	617b      	str	r3, [r7, #20]
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc12:	fb02 f303 	mul.w	r3, r2, r3
 800bc16:	613b      	str	r3, [r7, #16]
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	0c1b      	lsrs	r3, r3, #16
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	4413      	add	r3, r2
 800bc20:	613b      	str	r3, [r7, #16]
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	0c1b      	lsrs	r3, r3, #16
 800bc26:	693a      	ldr	r2, [r7, #16]
 800bc28:	4413      	add	r3, r2
 800bc2a:	613b      	str	r3, [r7, #16]
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	041b      	lsls	r3, r3, #16
 800bc30:	61fb      	str	r3, [r7, #28]
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	041b      	lsls	r3, r3, #16
 800bc36:	617b      	str	r3, [r7, #20]
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	61bb      	str	r3, [r7, #24]
 800bc40:	69ba      	ldr	r2, [r7, #24]
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	bf34      	ite	cc
 800bc48:	2301      	movcc	r3, #1
 800bc4a:	2300      	movcs	r3, #0
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	461a      	mov	r2, r3
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	4413      	add	r3, r2
 800bc54:	613b      	str	r3, [r7, #16]
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	61bb      	str	r3, [r7, #24]
 800bc5e:	69ba      	ldr	r2, [r7, #24]
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	bf34      	ite	cc
 800bc66:	2301      	movcc	r3, #1
 800bc68:	2300      	movcs	r3, #0
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	4413      	add	r3, r2
 800bc72:	613b      	str	r3, [r7, #16]
 800bc74:	69ba      	ldr	r2, [r7, #24]
 800bc76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc78:	4413      	add	r3, r2
 800bc7a:	61bb      	str	r3, [r7, #24]
 800bc7c:	69ba      	ldr	r2, [r7, #24]
 800bc7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc80:	429a      	cmp	r2, r3
 800bc82:	bf34      	ite	cc
 800bc84:	2301      	movcc	r3, #1
 800bc86:	2300      	movcs	r3, #0
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	4413      	add	r3, r2
 800bc90:	613b      	str	r3, [r7, #16]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	69ba      	ldr	r2, [r7, #24]
 800bc98:	4413      	add	r3, r2
 800bc9a:	61bb      	str	r3, [r7, #24]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	69ba      	ldr	r2, [r7, #24]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	bf34      	ite	cc
 800bca6:	2301      	movcc	r3, #1
 800bca8:	2300      	movcs	r3, #0
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	461a      	mov	r2, r3
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	613b      	str	r3, [r7, #16]
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	677b      	str	r3, [r7, #116]	@ 0x74
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	607a      	str	r2, [r7, #4]
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	0c1b      	lsrs	r3, r3, #16
 800bcd0:	623b      	str	r3, [r7, #32]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	60bb      	str	r3, [r7, #8]
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcdc:	fb02 f303 	mul.w	r3, r2, r3
 800bce0:	61fb      	str	r3, [r7, #28]
 800bce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bce6:	fb02 f303 	mul.w	r3, r2, r3
 800bcea:	61bb      	str	r3, [r7, #24]
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcf0:	fb02 f303 	mul.w	r3, r2, r3
 800bcf4:	617b      	str	r3, [r7, #20]
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcfa:	fb02 f303 	mul.w	r3, r2, r3
 800bcfe:	613b      	str	r3, [r7, #16]
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	0c1b      	lsrs	r3, r3, #16
 800bd04:	693a      	ldr	r2, [r7, #16]
 800bd06:	4413      	add	r3, r2
 800bd08:	613b      	str	r3, [r7, #16]
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	0c1b      	lsrs	r3, r3, #16
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	4413      	add	r3, r2
 800bd12:	613b      	str	r3, [r7, #16]
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	041b      	lsls	r3, r3, #16
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	041b      	lsls	r3, r3, #16
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	4413      	add	r3, r2
 800bd26:	61bb      	str	r3, [r7, #24]
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	bf34      	ite	cc
 800bd30:	2301      	movcc	r3, #1
 800bd32:	2300      	movcs	r3, #0
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	461a      	mov	r2, r3
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	613b      	str	r3, [r7, #16]
 800bd3e:	69ba      	ldr	r2, [r7, #24]
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	4413      	add	r3, r2
 800bd44:	61bb      	str	r3, [r7, #24]
 800bd46:	69ba      	ldr	r2, [r7, #24]
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	bf34      	ite	cc
 800bd4e:	2301      	movcc	r3, #1
 800bd50:	2300      	movcs	r3, #0
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	461a      	mov	r2, r3
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	4413      	add	r3, r2
 800bd5a:	613b      	str	r3, [r7, #16]
 800bd5c:	69ba      	ldr	r2, [r7, #24]
 800bd5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd60:	4413      	add	r3, r2
 800bd62:	61bb      	str	r3, [r7, #24]
 800bd64:	69ba      	ldr	r2, [r7, #24]
 800bd66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	bf34      	ite	cc
 800bd6c:	2301      	movcc	r3, #1
 800bd6e:	2300      	movcs	r3, #0
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	461a      	mov	r2, r3
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	4413      	add	r3, r2
 800bd78:	613b      	str	r3, [r7, #16]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	69ba      	ldr	r2, [r7, #24]
 800bd80:	4413      	add	r3, r2
 800bd82:	61bb      	str	r3, [r7, #24]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	69ba      	ldr	r2, [r7, #24]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	bf34      	ite	cc
 800bd8e:	2301      	movcc	r3, #1
 800bd90:	2300      	movcs	r3, #0
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	461a      	mov	r2, r3
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	4413      	add	r3, r2
 800bd9a:	613b      	str	r3, [r7, #16]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	677b      	str	r3, [r7, #116]	@ 0x74
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	1d1a      	adds	r2, r3, #4
 800bda4:	607a      	str	r2, [r7, #4]
 800bda6:	69ba      	ldr	r2, [r7, #24]
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	0c1b      	lsrs	r3, r3, #16
 800bdb8:	623b      	str	r3, [r7, #32]
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	60bb      	str	r3, [r7, #8]
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdc4:	fb02 f303 	mul.w	r3, r2, r3
 800bdc8:	61fb      	str	r3, [r7, #28]
 800bdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdce:	fb02 f303 	mul.w	r3, r2, r3
 800bdd2:	61bb      	str	r3, [r7, #24]
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdd8:	fb02 f303 	mul.w	r3, r2, r3
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bde2:	fb02 f303 	mul.w	r3, r2, r3
 800bde6:	613b      	str	r3, [r7, #16]
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	0c1b      	lsrs	r3, r3, #16
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	4413      	add	r3, r2
 800bdf0:	613b      	str	r3, [r7, #16]
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	0c1b      	lsrs	r3, r3, #16
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	613b      	str	r3, [r7, #16]
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	041b      	lsls	r3, r3, #16
 800be00:	61fb      	str	r3, [r7, #28]
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	041b      	lsls	r3, r3, #16
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	69ba      	ldr	r2, [r7, #24]
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	4413      	add	r3, r2
 800be0e:	61bb      	str	r3, [r7, #24]
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	429a      	cmp	r2, r3
 800be16:	bf34      	ite	cc
 800be18:	2301      	movcc	r3, #1
 800be1a:	2300      	movcs	r3, #0
 800be1c:	b2db      	uxtb	r3, r3
 800be1e:	461a      	mov	r2, r3
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	4413      	add	r3, r2
 800be24:	613b      	str	r3, [r7, #16]
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	4413      	add	r3, r2
 800be2c:	61bb      	str	r3, [r7, #24]
 800be2e:	69ba      	ldr	r2, [r7, #24]
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	429a      	cmp	r2, r3
 800be34:	bf34      	ite	cc
 800be36:	2301      	movcc	r3, #1
 800be38:	2300      	movcs	r3, #0
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	461a      	mov	r2, r3
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	4413      	add	r3, r2
 800be42:	613b      	str	r3, [r7, #16]
 800be44:	69ba      	ldr	r2, [r7, #24]
 800be46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be48:	4413      	add	r3, r2
 800be4a:	61bb      	str	r3, [r7, #24]
 800be4c:	69ba      	ldr	r2, [r7, #24]
 800be4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800be50:	429a      	cmp	r2, r3
 800be52:	bf34      	ite	cc
 800be54:	2301      	movcc	r3, #1
 800be56:	2300      	movcs	r3, #0
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	461a      	mov	r2, r3
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	4413      	add	r3, r2
 800be60:	613b      	str	r3, [r7, #16]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	69ba      	ldr	r2, [r7, #24]
 800be68:	4413      	add	r3, r2
 800be6a:	61bb      	str	r3, [r7, #24]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	69ba      	ldr	r2, [r7, #24]
 800be72:	429a      	cmp	r2, r3
 800be74:	bf34      	ite	cc
 800be76:	2301      	movcc	r3, #1
 800be78:	2300      	movcs	r3, #0
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	461a      	mov	r2, r3
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	4413      	add	r3, r2
 800be82:	613b      	str	r3, [r7, #16]
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	677b      	str	r3, [r7, #116]	@ 0x74
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	1d1a      	adds	r2, r3, #4
 800be8c:	607a      	str	r2, [r7, #4]
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	b29b      	uxth	r3, r3
 800be98:	627b      	str	r3, [r7, #36]	@ 0x24
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	0c1b      	lsrs	r3, r3, #16
 800bea0:	623b      	str	r3, [r7, #32]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	3304      	adds	r3, #4
 800bea6:	60bb      	str	r3, [r7, #8]
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800beac:	fb02 f303 	mul.w	r3, r2, r3
 800beb0:	61fb      	str	r3, [r7, #28]
 800beb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800beb6:	fb02 f303 	mul.w	r3, r2, r3
 800beba:	61bb      	str	r3, [r7, #24]
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bec0:	fb02 f303 	mul.w	r3, r2, r3
 800bec4:	617b      	str	r3, [r7, #20]
 800bec6:	6a3b      	ldr	r3, [r7, #32]
 800bec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800beca:	fb02 f303 	mul.w	r3, r2, r3
 800bece:	613b      	str	r3, [r7, #16]
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	0c1b      	lsrs	r3, r3, #16
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	4413      	add	r3, r2
 800bed8:	613b      	str	r3, [r7, #16]
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	0c1b      	lsrs	r3, r3, #16
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	4413      	add	r3, r2
 800bee2:	613b      	str	r3, [r7, #16]
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	041b      	lsls	r3, r3, #16
 800bee8:	61fb      	str	r3, [r7, #28]
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	041b      	lsls	r3, r3, #16
 800beee:	617b      	str	r3, [r7, #20]
 800bef0:	69ba      	ldr	r2, [r7, #24]
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	4413      	add	r3, r2
 800bef6:	61bb      	str	r3, [r7, #24]
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	429a      	cmp	r2, r3
 800befe:	bf34      	ite	cc
 800bf00:	2301      	movcc	r3, #1
 800bf02:	2300      	movcs	r3, #0
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	461a      	mov	r2, r3
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	613b      	str	r3, [r7, #16]
 800bf0e:	69ba      	ldr	r2, [r7, #24]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	4413      	add	r3, r2
 800bf14:	61bb      	str	r3, [r7, #24]
 800bf16:	69ba      	ldr	r2, [r7, #24]
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	bf34      	ite	cc
 800bf1e:	2301      	movcc	r3, #1
 800bf20:	2300      	movcs	r3, #0
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	461a      	mov	r2, r3
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	4413      	add	r3, r2
 800bf2a:	613b      	str	r3, [r7, #16]
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf30:	4413      	add	r3, r2
 800bf32:	61bb      	str	r3, [r7, #24]
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	bf34      	ite	cc
 800bf3c:	2301      	movcc	r3, #1
 800bf3e:	2300      	movcs	r3, #0
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	461a      	mov	r2, r3
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	4413      	add	r3, r2
 800bf48:	613b      	str	r3, [r7, #16]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	4413      	add	r3, r2
 800bf52:	61bb      	str	r3, [r7, #24]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	69ba      	ldr	r2, [r7, #24]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	bf34      	ite	cc
 800bf5e:	2301      	movcc	r3, #1
 800bf60:	2300      	movcs	r3, #0
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	461a      	mov	r2, r3
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	4413      	add	r3, r2
 800bf6a:	613b      	str	r3, [r7, #16]
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	677b      	str	r3, [r7, #116]	@ 0x74
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	1d1a      	adds	r2, r3, #4
 800bf74:	607a      	str	r2, [r7, #4]
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	601a      	str	r2, [r3, #0]
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	0c1b      	lsrs	r3, r3, #16
 800bf88:	623b      	str	r3, [r7, #32]
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	60bb      	str	r3, [r7, #8]
 800bf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf94:	fb02 f303 	mul.w	r3, r2, r3
 800bf98:	61fb      	str	r3, [r7, #28]
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf9e:	fb02 f303 	mul.w	r3, r2, r3
 800bfa2:	61bb      	str	r3, [r7, #24]
 800bfa4:	6a3b      	ldr	r3, [r7, #32]
 800bfa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfa8:	fb02 f303 	mul.w	r3, r2, r3
 800bfac:	617b      	str	r3, [r7, #20]
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfb2:	fb02 f303 	mul.w	r3, r2, r3
 800bfb6:	613b      	str	r3, [r7, #16]
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	0c1b      	lsrs	r3, r3, #16
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	613b      	str	r3, [r7, #16]
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	0c1b      	lsrs	r3, r3, #16
 800bfc6:	693a      	ldr	r2, [r7, #16]
 800bfc8:	4413      	add	r3, r2
 800bfca:	613b      	str	r3, [r7, #16]
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	041b      	lsls	r3, r3, #16
 800bfd0:	61fb      	str	r3, [r7, #28]
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	041b      	lsls	r3, r3, #16
 800bfd6:	617b      	str	r3, [r7, #20]
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	4413      	add	r3, r2
 800bfde:	61bb      	str	r3, [r7, #24]
 800bfe0:	69ba      	ldr	r2, [r7, #24]
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	bf34      	ite	cc
 800bfe8:	2301      	movcc	r3, #1
 800bfea:	2300      	movcs	r3, #0
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	461a      	mov	r2, r3
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	4413      	add	r3, r2
 800bff4:	613b      	str	r3, [r7, #16]
 800bff6:	69ba      	ldr	r2, [r7, #24]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	4413      	add	r3, r2
 800bffc:	61bb      	str	r3, [r7, #24]
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	429a      	cmp	r2, r3
 800c004:	bf34      	ite	cc
 800c006:	2301      	movcc	r3, #1
 800c008:	2300      	movcs	r3, #0
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	461a      	mov	r2, r3
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	4413      	add	r3, r2
 800c012:	613b      	str	r3, [r7, #16]
 800c014:	69ba      	ldr	r2, [r7, #24]
 800c016:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c018:	4413      	add	r3, r2
 800c01a:	61bb      	str	r3, [r7, #24]
 800c01c:	69ba      	ldr	r2, [r7, #24]
 800c01e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c020:	429a      	cmp	r2, r3
 800c022:	bf34      	ite	cc
 800c024:	2301      	movcc	r3, #1
 800c026:	2300      	movcs	r3, #0
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	461a      	mov	r2, r3
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	4413      	add	r3, r2
 800c030:	613b      	str	r3, [r7, #16]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	4413      	add	r3, r2
 800c03a:	61bb      	str	r3, [r7, #24]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	69ba      	ldr	r2, [r7, #24]
 800c042:	429a      	cmp	r2, r3
 800c044:	bf34      	ite	cc
 800c046:	2301      	movcc	r3, #1
 800c048:	2300      	movcs	r3, #0
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	461a      	mov	r2, r3
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	4413      	add	r3, r2
 800c052:	613b      	str	r3, [r7, #16]
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	677b      	str	r3, [r7, #116]	@ 0x74
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	1d1a      	adds	r2, r3, #4
 800c05c:	607a      	str	r2, [r7, #4]
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	b29b      	uxth	r3, r3
 800c068:	627b      	str	r3, [r7, #36]	@ 0x24
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	0c1b      	lsrs	r3, r3, #16
 800c070:	623b      	str	r3, [r7, #32]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	3304      	adds	r3, #4
 800c076:	60bb      	str	r3, [r7, #8]
 800c078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c07a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c07c:	fb02 f303 	mul.w	r3, r2, r3
 800c080:	61fb      	str	r3, [r7, #28]
 800c082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c086:	fb02 f303 	mul.w	r3, r2, r3
 800c08a:	61bb      	str	r3, [r7, #24]
 800c08c:	6a3b      	ldr	r3, [r7, #32]
 800c08e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c090:	fb02 f303 	mul.w	r3, r2, r3
 800c094:	617b      	str	r3, [r7, #20]
 800c096:	6a3b      	ldr	r3, [r7, #32]
 800c098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c09a:	fb02 f303 	mul.w	r3, r2, r3
 800c09e:	613b      	str	r3, [r7, #16]
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	0c1b      	lsrs	r3, r3, #16
 800c0a4:	693a      	ldr	r2, [r7, #16]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	613b      	str	r3, [r7, #16]
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	0c1b      	lsrs	r3, r3, #16
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	613b      	str	r3, [r7, #16]
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	041b      	lsls	r3, r3, #16
 800c0b8:	61fb      	str	r3, [r7, #28]
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	041b      	lsls	r3, r3, #16
 800c0be:	617b      	str	r3, [r7, #20]
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	61bb      	str	r3, [r7, #24]
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	bf34      	ite	cc
 800c0d0:	2301      	movcc	r3, #1
 800c0d2:	2300      	movcs	r3, #0
 800c0d4:	b2db      	uxtb	r3, r3
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	4413      	add	r3, r2
 800c0dc:	613b      	str	r3, [r7, #16]
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	61bb      	str	r3, [r7, #24]
 800c0e6:	69ba      	ldr	r2, [r7, #24]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	bf34      	ite	cc
 800c0ee:	2301      	movcc	r3, #1
 800c0f0:	2300      	movcs	r3, #0
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	613b      	str	r3, [r7, #16]
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c100:	4413      	add	r3, r2
 800c102:	61bb      	str	r3, [r7, #24]
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c108:	429a      	cmp	r2, r3
 800c10a:	bf34      	ite	cc
 800c10c:	2301      	movcc	r3, #1
 800c10e:	2300      	movcs	r3, #0
 800c110:	b2db      	uxtb	r3, r3
 800c112:	461a      	mov	r2, r3
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	4413      	add	r3, r2
 800c118:	613b      	str	r3, [r7, #16]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	69ba      	ldr	r2, [r7, #24]
 800c120:	4413      	add	r3, r2
 800c122:	61bb      	str	r3, [r7, #24]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	69ba      	ldr	r2, [r7, #24]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	bf34      	ite	cc
 800c12e:	2301      	movcc	r3, #1
 800c130:	2300      	movcs	r3, #0
 800c132:	b2db      	uxtb	r3, r3
 800c134:	461a      	mov	r2, r3
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	4413      	add	r3, r2
 800c13a:	613b      	str	r3, [r7, #16]
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	1d1a      	adds	r2, r3, #4
 800c144:	607a      	str	r2, [r7, #4]
 800c146:	69ba      	ldr	r2, [r7, #24]
 800c148:	601a      	str	r2, [r3, #0]
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	b29b      	uxth	r3, r3
 800c150:	627b      	str	r3, [r7, #36]	@ 0x24
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	0c1b      	lsrs	r3, r3, #16
 800c158:	623b      	str	r3, [r7, #32]
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	3304      	adds	r3, #4
 800c15e:	60bb      	str	r3, [r7, #8]
 800c160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c162:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c164:	fb02 f303 	mul.w	r3, r2, r3
 800c168:	61fb      	str	r3, [r7, #28]
 800c16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c16e:	fb02 f303 	mul.w	r3, r2, r3
 800c172:	61bb      	str	r3, [r7, #24]
 800c174:	6a3b      	ldr	r3, [r7, #32]
 800c176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c178:	fb02 f303 	mul.w	r3, r2, r3
 800c17c:	617b      	str	r3, [r7, #20]
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c182:	fb02 f303 	mul.w	r3, r2, r3
 800c186:	613b      	str	r3, [r7, #16]
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	0c1b      	lsrs	r3, r3, #16
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4413      	add	r3, r2
 800c190:	613b      	str	r3, [r7, #16]
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	0c1b      	lsrs	r3, r3, #16
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	4413      	add	r3, r2
 800c19a:	613b      	str	r3, [r7, #16]
 800c19c:	69fb      	ldr	r3, [r7, #28]
 800c19e:	041b      	lsls	r3, r3, #16
 800c1a0:	61fb      	str	r3, [r7, #28]
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	041b      	lsls	r3, r3, #16
 800c1a6:	617b      	str	r3, [r7, #20]
 800c1a8:	69ba      	ldr	r2, [r7, #24]
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	61bb      	str	r3, [r7, #24]
 800c1b0:	69ba      	ldr	r2, [r7, #24]
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	bf34      	ite	cc
 800c1b8:	2301      	movcc	r3, #1
 800c1ba:	2300      	movcs	r3, #0
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	461a      	mov	r2, r3
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	613b      	str	r3, [r7, #16]
 800c1c6:	69ba      	ldr	r2, [r7, #24]
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	61bb      	str	r3, [r7, #24]
 800c1ce:	69ba      	ldr	r2, [r7, #24]
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	bf34      	ite	cc
 800c1d6:	2301      	movcc	r3, #1
 800c1d8:	2300      	movcs	r3, #0
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	461a      	mov	r2, r3
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	613b      	str	r3, [r7, #16]
 800c1e4:	69ba      	ldr	r2, [r7, #24]
 800c1e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1e8:	4413      	add	r3, r2
 800c1ea:	61bb      	str	r3, [r7, #24]
 800c1ec:	69ba      	ldr	r2, [r7, #24]
 800c1ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	bf34      	ite	cc
 800c1f4:	2301      	movcc	r3, #1
 800c1f6:	2300      	movcs	r3, #0
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	4413      	add	r3, r2
 800c200:	613b      	str	r3, [r7, #16]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	69ba      	ldr	r2, [r7, #24]
 800c208:	4413      	add	r3, r2
 800c20a:	61bb      	str	r3, [r7, #24]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	69ba      	ldr	r2, [r7, #24]
 800c212:	429a      	cmp	r2, r3
 800c214:	bf34      	ite	cc
 800c216:	2301      	movcc	r3, #1
 800c218:	2300      	movcs	r3, #0
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	461a      	mov	r2, r3
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	4413      	add	r3, r2
 800c222:	613b      	str	r3, [r7, #16]
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	677b      	str	r3, [r7, #116]	@ 0x74
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	1d1a      	adds	r2, r3, #4
 800c22c:	607a      	str	r2, [r7, #4]
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	b29b      	uxth	r3, r3
 800c238:	627b      	str	r3, [r7, #36]	@ 0x24
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	0c1b      	lsrs	r3, r3, #16
 800c240:	623b      	str	r3, [r7, #32]
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	3304      	adds	r3, #4
 800c246:	60bb      	str	r3, [r7, #8]
 800c248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c24c:	fb02 f303 	mul.w	r3, r2, r3
 800c250:	61fb      	str	r3, [r7, #28]
 800c252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c254:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c256:	fb02 f303 	mul.w	r3, r2, r3
 800c25a:	61bb      	str	r3, [r7, #24]
 800c25c:	6a3b      	ldr	r3, [r7, #32]
 800c25e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c260:	fb02 f303 	mul.w	r3, r2, r3
 800c264:	617b      	str	r3, [r7, #20]
 800c266:	6a3b      	ldr	r3, [r7, #32]
 800c268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c26a:	fb02 f303 	mul.w	r3, r2, r3
 800c26e:	613b      	str	r3, [r7, #16]
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	0c1b      	lsrs	r3, r3, #16
 800c274:	693a      	ldr	r2, [r7, #16]
 800c276:	4413      	add	r3, r2
 800c278:	613b      	str	r3, [r7, #16]
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	0c1b      	lsrs	r3, r3, #16
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	4413      	add	r3, r2
 800c282:	613b      	str	r3, [r7, #16]
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	041b      	lsls	r3, r3, #16
 800c288:	61fb      	str	r3, [r7, #28]
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	041b      	lsls	r3, r3, #16
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	69ba      	ldr	r2, [r7, #24]
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	4413      	add	r3, r2
 800c296:	61bb      	str	r3, [r7, #24]
 800c298:	69ba      	ldr	r2, [r7, #24]
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	bf34      	ite	cc
 800c2a0:	2301      	movcc	r3, #1
 800c2a2:	2300      	movcs	r3, #0
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	613b      	str	r3, [r7, #16]
 800c2ae:	69ba      	ldr	r2, [r7, #24]
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	61bb      	str	r3, [r7, #24]
 800c2b6:	69ba      	ldr	r2, [r7, #24]
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	bf34      	ite	cc
 800c2be:	2301      	movcc	r3, #1
 800c2c0:	2300      	movcs	r3, #0
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	613b      	str	r3, [r7, #16]
 800c2cc:	69ba      	ldr	r2, [r7, #24]
 800c2ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2d0:	4413      	add	r3, r2
 800c2d2:	61bb      	str	r3, [r7, #24]
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	bf34      	ite	cc
 800c2dc:	2301      	movcc	r3, #1
 800c2de:	2300      	movcs	r3, #0
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	4413      	add	r3, r2
 800c2e8:	613b      	str	r3, [r7, #16]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	69ba      	ldr	r2, [r7, #24]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	61bb      	str	r3, [r7, #24]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	bf34      	ite	cc
 800c2fe:	2301      	movcc	r3, #1
 800c300:	2300      	movcs	r3, #0
 800c302:	b2db      	uxtb	r3, r3
 800c304:	461a      	mov	r2, r3
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	4413      	add	r3, r2
 800c30a:	613b      	str	r3, [r7, #16]
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	1d1a      	adds	r2, r3, #4
 800c314:	607a      	str	r2, [r7, #4]
 800c316:	69ba      	ldr	r2, [r7, #24]
 800c318:	601a      	str	r2, [r3, #0]
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	627b      	str	r3, [r7, #36]	@ 0x24
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	0c1b      	lsrs	r3, r3, #16
 800c328:	623b      	str	r3, [r7, #32]
 800c32a:	68bb      	ldr	r3, [r7, #8]
 800c32c:	3304      	adds	r3, #4
 800c32e:	60bb      	str	r3, [r7, #8]
 800c330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c334:	fb02 f303 	mul.w	r3, r2, r3
 800c338:	61fb      	str	r3, [r7, #28]
 800c33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c33e:	fb02 f303 	mul.w	r3, r2, r3
 800c342:	61bb      	str	r3, [r7, #24]
 800c344:	6a3b      	ldr	r3, [r7, #32]
 800c346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c348:	fb02 f303 	mul.w	r3, r2, r3
 800c34c:	617b      	str	r3, [r7, #20]
 800c34e:	6a3b      	ldr	r3, [r7, #32]
 800c350:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c352:	fb02 f303 	mul.w	r3, r2, r3
 800c356:	613b      	str	r3, [r7, #16]
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	0c1b      	lsrs	r3, r3, #16
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	4413      	add	r3, r2
 800c360:	613b      	str	r3, [r7, #16]
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	0c1b      	lsrs	r3, r3, #16
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	4413      	add	r3, r2
 800c36a:	613b      	str	r3, [r7, #16]
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	041b      	lsls	r3, r3, #16
 800c370:	61fb      	str	r3, [r7, #28]
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	041b      	lsls	r3, r3, #16
 800c376:	617b      	str	r3, [r7, #20]
 800c378:	69ba      	ldr	r2, [r7, #24]
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	4413      	add	r3, r2
 800c37e:	61bb      	str	r3, [r7, #24]
 800c380:	69ba      	ldr	r2, [r7, #24]
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	429a      	cmp	r2, r3
 800c386:	bf34      	ite	cc
 800c388:	2301      	movcc	r3, #1
 800c38a:	2300      	movcs	r3, #0
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	461a      	mov	r2, r3
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	4413      	add	r3, r2
 800c394:	613b      	str	r3, [r7, #16]
 800c396:	69ba      	ldr	r2, [r7, #24]
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	4413      	add	r3, r2
 800c39c:	61bb      	str	r3, [r7, #24]
 800c39e:	69ba      	ldr	r2, [r7, #24]
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	bf34      	ite	cc
 800c3a6:	2301      	movcc	r3, #1
 800c3a8:	2300      	movcs	r3, #0
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	613b      	str	r3, [r7, #16]
 800c3b4:	69ba      	ldr	r2, [r7, #24]
 800c3b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3b8:	4413      	add	r3, r2
 800c3ba:	61bb      	str	r3, [r7, #24]
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	bf34      	ite	cc
 800c3c4:	2301      	movcc	r3, #1
 800c3c6:	2300      	movcs	r3, #0
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	613b      	str	r3, [r7, #16]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	69ba      	ldr	r2, [r7, #24]
 800c3d8:	4413      	add	r3, r2
 800c3da:	61bb      	str	r3, [r7, #24]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	69ba      	ldr	r2, [r7, #24]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	bf34      	ite	cc
 800c3e6:	2301      	movcc	r3, #1
 800c3e8:	2300      	movcs	r3, #0
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	613b      	str	r3, [r7, #16]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	1d1a      	adds	r2, r3, #4
 800c3fc:	607a      	str	r2, [r7, #4]
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	601a      	str	r2, [r3, #0]
    for( ; i >= 16; i -= 16 )
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	3b10      	subs	r3, #16
 800c406:	60fb      	str	r3, [r7, #12]
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2b0f      	cmp	r3, #15
 800c40c:	f63f a8b3 	bhi.w	800b576 <mpi_mul_hlp+0x1a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800c410:	e3a8      	b.n	800cb64 <mpi_mul_hlp+0x1608>
    {
        MULADDC_INIT
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	b29b      	uxth	r3, r3
 800c416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	0c1b      	lsrs	r3, r3, #16
 800c41c:	64bb      	str	r3, [r7, #72]	@ 0x48
        MULADDC_CORE   MULADDC_CORE
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	b29b      	uxth	r3, r3
 800c424:	647b      	str	r3, [r7, #68]	@ 0x44
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	0c1b      	lsrs	r3, r3, #16
 800c42c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	3304      	adds	r3, #4
 800c432:	60bb      	str	r3, [r7, #8]
 800c434:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c438:	fb02 f303 	mul.w	r3, r2, r3
 800c43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c43e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c442:	fb02 f303 	mul.w	r3, r2, r3
 800c446:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c44a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c44c:	fb02 f303 	mul.w	r3, r2, r3
 800c450:	637b      	str	r3, [r7, #52]	@ 0x34
 800c452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c454:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c456:	fb02 f303 	mul.w	r3, r2, r3
 800c45a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c45e:	0c1b      	lsrs	r3, r3, #16
 800c460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c462:	4413      	add	r3, r2
 800c464:	633b      	str	r3, [r7, #48]	@ 0x30
 800c466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c468:	0c1b      	lsrs	r3, r3, #16
 800c46a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c46c:	4413      	add	r3, r2
 800c46e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c472:	041b      	lsls	r3, r3, #16
 800c474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c478:	041b      	lsls	r3, r3, #16
 800c47a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c47c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c47e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c480:	4413      	add	r3, r2
 800c482:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c488:	429a      	cmp	r2, r3
 800c48a:	bf34      	ite	cc
 800c48c:	2301      	movcc	r3, #1
 800c48e:	2300      	movcs	r3, #0
 800c490:	b2db      	uxtb	r3, r3
 800c492:	461a      	mov	r2, r3
 800c494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c496:	4413      	add	r3, r2
 800c498:	633b      	str	r3, [r7, #48]	@ 0x30
 800c49a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c49c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c49e:	4413      	add	r3, r2
 800c4a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	bf34      	ite	cc
 800c4aa:	2301      	movcc	r3, #1
 800c4ac:	2300      	movcs	r3, #0
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b4:	4413      	add	r3, r2
 800c4b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4bc:	4413      	add	r3, r2
 800c4be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	bf34      	ite	cc
 800c4c8:	2301      	movcc	r3, #1
 800c4ca:	2300      	movcs	r3, #0
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d2:	4413      	add	r3, r2
 800c4d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4dc:	4413      	add	r3, r2
 800c4de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	bf34      	ite	cc
 800c4ea:	2301      	movcc	r3, #1
 800c4ec:	2300      	movcs	r3, #0
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f4:	4413      	add	r3, r2
 800c4f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fa:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	1d1a      	adds	r2, r3, #4
 800c500:	607a      	str	r2, [r7, #4]
 800c502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	0c1b      	lsrs	r3, r3, #16
 800c514:	643b      	str	r3, [r7, #64]	@ 0x40
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	3304      	adds	r3, #4
 800c51a:	60bb      	str	r3, [r7, #8]
 800c51c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c51e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c520:	fb02 f303 	mul.w	r3, r2, r3
 800c524:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c52a:	fb02 f303 	mul.w	r3, r2, r3
 800c52e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c532:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c534:	fb02 f303 	mul.w	r3, r2, r3
 800c538:	637b      	str	r3, [r7, #52]	@ 0x34
 800c53a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c53c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c53e:	fb02 f303 	mul.w	r3, r2, r3
 800c542:	633b      	str	r3, [r7, #48]	@ 0x30
 800c544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c546:	0c1b      	lsrs	r3, r3, #16
 800c548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c54a:	4413      	add	r3, r2
 800c54c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c550:	0c1b      	lsrs	r3, r3, #16
 800c552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c554:	4413      	add	r3, r2
 800c556:	633b      	str	r3, [r7, #48]	@ 0x30
 800c558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c55a:	041b      	lsls	r3, r3, #16
 800c55c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c560:	041b      	lsls	r3, r3, #16
 800c562:	637b      	str	r3, [r7, #52]	@ 0x34
 800c564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c568:	4413      	add	r3, r2
 800c56a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c56c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c570:	429a      	cmp	r2, r3
 800c572:	bf34      	ite	cc
 800c574:	2301      	movcc	r3, #1
 800c576:	2300      	movcs	r3, #0
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	461a      	mov	r2, r3
 800c57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57e:	4413      	add	r3, r2
 800c580:	633b      	str	r3, [r7, #48]	@ 0x30
 800c582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c586:	4413      	add	r3, r2
 800c588:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c58a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c58c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c58e:	429a      	cmp	r2, r3
 800c590:	bf34      	ite	cc
 800c592:	2301      	movcc	r3, #1
 800c594:	2300      	movcs	r3, #0
 800c596:	b2db      	uxtb	r3, r3
 800c598:	461a      	mov	r2, r3
 800c59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59c:	4413      	add	r3, r2
 800c59e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5a4:	4413      	add	r3, r2
 800c5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	bf34      	ite	cc
 800c5b0:	2301      	movcc	r3, #1
 800c5b2:	2300      	movcs	r3, #0
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ba:	4413      	add	r3, r2
 800c5bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5c4:	4413      	add	r3, r2
 800c5c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	bf34      	ite	cc
 800c5d2:	2301      	movcc	r3, #1
 800c5d4:	2300      	movcs	r3, #0
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	461a      	mov	r2, r3
 800c5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5dc:	4413      	add	r3, r2
 800c5de:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e2:	677b      	str	r3, [r7, #116]	@ 0x74
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	1d1a      	adds	r2, r3, #4
 800c5e8:	607a      	str	r2, [r7, #4]
 800c5ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5ec:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	0c1b      	lsrs	r3, r3, #16
 800c5fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	3304      	adds	r3, #4
 800c602:	60bb      	str	r3, [r7, #8]
 800c604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c608:	fb02 f303 	mul.w	r3, r2, r3
 800c60c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c60e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c612:	fb02 f303 	mul.w	r3, r2, r3
 800c616:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c61a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c61c:	fb02 f303 	mul.w	r3, r2, r3
 800c620:	637b      	str	r3, [r7, #52]	@ 0x34
 800c622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c626:	fb02 f303 	mul.w	r3, r2, r3
 800c62a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c62e:	0c1b      	lsrs	r3, r3, #16
 800c630:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c632:	4413      	add	r3, r2
 800c634:	633b      	str	r3, [r7, #48]	@ 0x30
 800c636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c638:	0c1b      	lsrs	r3, r3, #16
 800c63a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c63c:	4413      	add	r3, r2
 800c63e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c642:	041b      	lsls	r3, r3, #16
 800c644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c648:	041b      	lsls	r3, r3, #16
 800c64a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c64c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c650:	4413      	add	r3, r2
 800c652:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c654:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c658:	429a      	cmp	r2, r3
 800c65a:	bf34      	ite	cc
 800c65c:	2301      	movcc	r3, #1
 800c65e:	2300      	movcs	r3, #0
 800c660:	b2db      	uxtb	r3, r3
 800c662:	461a      	mov	r2, r3
 800c664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c666:	4413      	add	r3, r2
 800c668:	633b      	str	r3, [r7, #48]	@ 0x30
 800c66a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c66c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c66e:	4413      	add	r3, r2
 800c670:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c672:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c676:	429a      	cmp	r2, r3
 800c678:	bf34      	ite	cc
 800c67a:	2301      	movcc	r3, #1
 800c67c:	2300      	movcs	r3, #0
 800c67e:	b2db      	uxtb	r3, r3
 800c680:	461a      	mov	r2, r3
 800c682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c684:	4413      	add	r3, r2
 800c686:	633b      	str	r3, [r7, #48]	@ 0x30
 800c688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c68a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c68c:	4413      	add	r3, r2
 800c68e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c694:	429a      	cmp	r2, r3
 800c696:	bf34      	ite	cc
 800c698:	2301      	movcc	r3, #1
 800c69a:	2300      	movcs	r3, #0
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	461a      	mov	r2, r3
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a2:	4413      	add	r3, r2
 800c6a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6ac:	4413      	add	r3, r2
 800c6ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	bf34      	ite	cc
 800c6ba:	2301      	movcc	r3, #1
 800c6bc:	2300      	movcs	r3, #0
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c4:	4413      	add	r3, r2
 800c6c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ca:	677b      	str	r3, [r7, #116]	@ 0x74
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	1d1a      	adds	r2, r3, #4
 800c6d0:	607a      	str	r2, [r7, #4]
 800c6d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	b29b      	uxth	r3, r3
 800c6dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	0c1b      	lsrs	r3, r3, #16
 800c6e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	60bb      	str	r3, [r7, #8]
 800c6ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6f0:	fb02 f303 	mul.w	r3, r2, r3
 800c6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c6fa:	fb02 f303 	mul.w	r3, r2, r3
 800c6fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c702:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c704:	fb02 f303 	mul.w	r3, r2, r3
 800c708:	637b      	str	r3, [r7, #52]	@ 0x34
 800c70a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c70c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c70e:	fb02 f303 	mul.w	r3, r2, r3
 800c712:	633b      	str	r3, [r7, #48]	@ 0x30
 800c714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c716:	0c1b      	lsrs	r3, r3, #16
 800c718:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c71a:	4413      	add	r3, r2
 800c71c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c71e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c720:	0c1b      	lsrs	r3, r3, #16
 800c722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c724:	4413      	add	r3, r2
 800c726:	633b      	str	r3, [r7, #48]	@ 0x30
 800c728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c72a:	041b      	lsls	r3, r3, #16
 800c72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c730:	041b      	lsls	r3, r3, #16
 800c732:	637b      	str	r3, [r7, #52]	@ 0x34
 800c734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c738:	4413      	add	r3, r2
 800c73a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c73c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c740:	429a      	cmp	r2, r3
 800c742:	bf34      	ite	cc
 800c744:	2301      	movcc	r3, #1
 800c746:	2300      	movcs	r3, #0
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	461a      	mov	r2, r3
 800c74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c74e:	4413      	add	r3, r2
 800c750:	633b      	str	r3, [r7, #48]	@ 0x30
 800c752:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c756:	4413      	add	r3, r2
 800c758:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c75a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c75e:	429a      	cmp	r2, r3
 800c760:	bf34      	ite	cc
 800c762:	2301      	movcc	r3, #1
 800c764:	2300      	movcs	r3, #0
 800c766:	b2db      	uxtb	r3, r3
 800c768:	461a      	mov	r2, r3
 800c76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76c:	4413      	add	r3, r2
 800c76e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c772:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c774:	4413      	add	r3, r2
 800c776:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c77a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c77c:	429a      	cmp	r2, r3
 800c77e:	bf34      	ite	cc
 800c780:	2301      	movcc	r3, #1
 800c782:	2300      	movcs	r3, #0
 800c784:	b2db      	uxtb	r3, r3
 800c786:	461a      	mov	r2, r3
 800c788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c78a:	4413      	add	r3, r2
 800c78c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c794:	4413      	add	r3, r2
 800c796:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	bf34      	ite	cc
 800c7a2:	2301      	movcc	r3, #1
 800c7a4:	2300      	movcs	r3, #0
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	4413      	add	r3, r2
 800c7ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b2:	677b      	str	r3, [r7, #116]	@ 0x74
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	1d1a      	adds	r2, r3, #4
 800c7b8:	607a      	str	r2, [r7, #4]
 800c7ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7bc:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	0c1b      	lsrs	r3, r3, #16
 800c7cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	60bb      	str	r3, [r7, #8]
 800c7d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7d8:	fb02 f303 	mul.w	r3, r2, r3
 800c7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c7e2:	fb02 f303 	mul.w	r3, r2, r3
 800c7e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c7ec:	fb02 f303 	mul.w	r3, r2, r3
 800c7f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7f6:	fb02 f303 	mul.w	r3, r2, r3
 800c7fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7fe:	0c1b      	lsrs	r3, r3, #16
 800c800:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c802:	4413      	add	r3, r2
 800c804:	633b      	str	r3, [r7, #48]	@ 0x30
 800c806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c808:	0c1b      	lsrs	r3, r3, #16
 800c80a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c80c:	4413      	add	r3, r2
 800c80e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c812:	041b      	lsls	r3, r3, #16
 800c814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c818:	041b      	lsls	r3, r3, #16
 800c81a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c81c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c81e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c820:	4413      	add	r3, r2
 800c822:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c828:	429a      	cmp	r2, r3
 800c82a:	bf34      	ite	cc
 800c82c:	2301      	movcc	r3, #1
 800c82e:	2300      	movcs	r3, #0
 800c830:	b2db      	uxtb	r3, r3
 800c832:	461a      	mov	r2, r3
 800c834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c836:	4413      	add	r3, r2
 800c838:	633b      	str	r3, [r7, #48]	@ 0x30
 800c83a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c83e:	4413      	add	r3, r2
 800c840:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c842:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c846:	429a      	cmp	r2, r3
 800c848:	bf34      	ite	cc
 800c84a:	2301      	movcc	r3, #1
 800c84c:	2300      	movcs	r3, #0
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	461a      	mov	r2, r3
 800c852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c854:	4413      	add	r3, r2
 800c856:	633b      	str	r3, [r7, #48]	@ 0x30
 800c858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c85a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c85c:	4413      	add	r3, r2
 800c85e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c864:	429a      	cmp	r2, r3
 800c866:	bf34      	ite	cc
 800c868:	2301      	movcc	r3, #1
 800c86a:	2300      	movcs	r3, #0
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	461a      	mov	r2, r3
 800c870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c872:	4413      	add	r3, r2
 800c874:	633b      	str	r3, [r7, #48]	@ 0x30
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c87c:	4413      	add	r3, r2
 800c87e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c886:	429a      	cmp	r2, r3
 800c888:	bf34      	ite	cc
 800c88a:	2301      	movcc	r3, #1
 800c88c:	2300      	movcs	r3, #0
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	461a      	mov	r2, r3
 800c892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c894:	4413      	add	r3, r2
 800c896:	633b      	str	r3, [r7, #48]	@ 0x30
 800c898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	1d1a      	adds	r2, r3, #4
 800c8a0:	607a      	str	r2, [r7, #4]
 800c8a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8a4:	601a      	str	r2, [r3, #0]
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	0c1b      	lsrs	r3, r3, #16
 800c8b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	3304      	adds	r3, #4
 800c8ba:	60bb      	str	r3, [r7, #8]
 800c8bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8c0:	fb02 f303 	mul.w	r3, r2, r3
 800c8c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c8ca:	fb02 f303 	mul.w	r3, r2, r3
 800c8ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c8d4:	fb02 f303 	mul.w	r3, r2, r3
 800c8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8de:	fb02 f303 	mul.w	r3, r2, r3
 800c8e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8e6:	0c1b      	lsrs	r3, r3, #16
 800c8e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8ea:	4413      	add	r3, r2
 800c8ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f0:	0c1b      	lsrs	r3, r3, #16
 800c8f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8f4:	4413      	add	r3, r2
 800c8f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8fa:	041b      	lsls	r3, r3, #16
 800c8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c900:	041b      	lsls	r3, r3, #16
 800c902:	637b      	str	r3, [r7, #52]	@ 0x34
 800c904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c908:	4413      	add	r3, r2
 800c90a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c90c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c90e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c910:	429a      	cmp	r2, r3
 800c912:	bf34      	ite	cc
 800c914:	2301      	movcc	r3, #1
 800c916:	2300      	movcs	r3, #0
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	461a      	mov	r2, r3
 800c91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91e:	4413      	add	r3, r2
 800c920:	633b      	str	r3, [r7, #48]	@ 0x30
 800c922:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c926:	4413      	add	r3, r2
 800c928:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c92a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c92e:	429a      	cmp	r2, r3
 800c930:	bf34      	ite	cc
 800c932:	2301      	movcc	r3, #1
 800c934:	2300      	movcs	r3, #0
 800c936:	b2db      	uxtb	r3, r3
 800c938:	461a      	mov	r2, r3
 800c93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c93c:	4413      	add	r3, r2
 800c93e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c944:	4413      	add	r3, r2
 800c946:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c948:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c94a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c94c:	429a      	cmp	r2, r3
 800c94e:	bf34      	ite	cc
 800c950:	2301      	movcc	r3, #1
 800c952:	2300      	movcs	r3, #0
 800c954:	b2db      	uxtb	r3, r3
 800c956:	461a      	mov	r2, r3
 800c958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c95a:	4413      	add	r3, r2
 800c95c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c964:	4413      	add	r3, r2
 800c966:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c96e:	429a      	cmp	r2, r3
 800c970:	bf34      	ite	cc
 800c972:	2301      	movcc	r3, #1
 800c974:	2300      	movcs	r3, #0
 800c976:	b2db      	uxtb	r3, r3
 800c978:	461a      	mov	r2, r3
 800c97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c97c:	4413      	add	r3, r2
 800c97e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c982:	677b      	str	r3, [r7, #116]	@ 0x74
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	1d1a      	adds	r2, r3, #4
 800c988:	607a      	str	r2, [r7, #4]
 800c98a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c98c:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	b29b      	uxth	r3, r3
 800c994:	647b      	str	r3, [r7, #68]	@ 0x44
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	0c1b      	lsrs	r3, r3, #16
 800c99c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	3304      	adds	r3, #4
 800c9a2:	60bb      	str	r3, [r7, #8]
 800c9a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9a8:	fb02 f303 	mul.w	r3, r2, r3
 800c9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c9b2:	fb02 f303 	mul.w	r3, r2, r3
 800c9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c9bc:	fb02 f303 	mul.w	r3, r2, r3
 800c9c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9c6:	fb02 f303 	mul.w	r3, r2, r3
 800c9ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ce:	0c1b      	lsrs	r3, r3, #16
 800c9d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9d2:	4413      	add	r3, r2
 800c9d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9d8:	0c1b      	lsrs	r3, r3, #16
 800c9da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9dc:	4413      	add	r3, r2
 800c9de:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9e2:	041b      	lsls	r3, r3, #16
 800c9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e8:	041b      	lsls	r3, r3, #16
 800c9ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9f0:	4413      	add	r3, r2
 800c9f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	bf34      	ite	cc
 800c9fc:	2301      	movcc	r3, #1
 800c9fe:	2300      	movcs	r3, #0
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	461a      	mov	r2, r3
 800ca04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca06:	4413      	add	r3, r2
 800ca08:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca0e:	4413      	add	r3, r2
 800ca10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca16:	429a      	cmp	r2, r3
 800ca18:	bf34      	ite	cc
 800ca1a:	2301      	movcc	r3, #1
 800ca1c:	2300      	movcs	r3, #0
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	461a      	mov	r2, r3
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	4413      	add	r3, r2
 800ca26:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca2c:	4413      	add	r3, r2
 800ca2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca34:	429a      	cmp	r2, r3
 800ca36:	bf34      	ite	cc
 800ca38:	2301      	movcc	r3, #1
 800ca3a:	2300      	movcs	r3, #0
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	461a      	mov	r2, r3
 800ca40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca42:	4413      	add	r3, r2
 800ca44:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca4c:	4413      	add	r3, r2
 800ca4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca56:	429a      	cmp	r2, r3
 800ca58:	bf34      	ite	cc
 800ca5a:	2301      	movcc	r3, #1
 800ca5c:	2300      	movcs	r3, #0
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	461a      	mov	r2, r3
 800ca62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca64:	4413      	add	r3, r2
 800ca66:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	1d1a      	adds	r2, r3, #4
 800ca70:	607a      	str	r2, [r7, #4]
 800ca72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca74:	601a      	str	r2, [r3, #0]
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	0c1b      	lsrs	r3, r3, #16
 800ca84:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	3304      	adds	r3, #4
 800ca8a:	60bb      	str	r3, [r7, #8]
 800ca8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca90:	fb02 f303 	mul.w	r3, r2, r3
 800ca94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca9a:	fb02 f303 	mul.w	r3, r2, r3
 800ca9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800caa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800caa4:	fb02 f303 	mul.w	r3, r2, r3
 800caa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800caaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800caac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800caae:	fb02 f303 	mul.w	r3, r2, r3
 800cab2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cab6:	0c1b      	lsrs	r3, r3, #16
 800cab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caba:	4413      	add	r3, r2
 800cabc:	633b      	str	r3, [r7, #48]	@ 0x30
 800cabe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac0:	0c1b      	lsrs	r3, r3, #16
 800cac2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cac4:	4413      	add	r3, r2
 800cac6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caca:	041b      	lsls	r3, r3, #16
 800cacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad0:	041b      	lsls	r3, r3, #16
 800cad2:	637b      	str	r3, [r7, #52]	@ 0x34
 800cad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cad8:	4413      	add	r3, r2
 800cada:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cadc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cae0:	429a      	cmp	r2, r3
 800cae2:	bf34      	ite	cc
 800cae4:	2301      	movcc	r3, #1
 800cae6:	2300      	movcs	r3, #0
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	461a      	mov	r2, r3
 800caec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caee:	4413      	add	r3, r2
 800caf0:	633b      	str	r3, [r7, #48]	@ 0x30
 800caf2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800caf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf6:	4413      	add	r3, r2
 800caf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cafa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafe:	429a      	cmp	r2, r3
 800cb00:	bf34      	ite	cc
 800cb02:	2301      	movcc	r3, #1
 800cb04:	2300      	movcs	r3, #0
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	461a      	mov	r2, r3
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb0c:	4413      	add	r3, r2
 800cb0e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb14:	4413      	add	r3, r2
 800cb16:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	bf34      	ite	cc
 800cb20:	2301      	movcc	r3, #1
 800cb22:	2300      	movcs	r3, #0
 800cb24:	b2db      	uxtb	r3, r3
 800cb26:	461a      	mov	r2, r3
 800cb28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2a:	4413      	add	r3, r2
 800cb2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb34:	4413      	add	r3, r2
 800cb36:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	bf34      	ite	cc
 800cb42:	2301      	movcc	r3, #1
 800cb44:	2300      	movcs	r3, #0
 800cb46:	b2db      	uxtb	r3, r3
 800cb48:	461a      	mov	r2, r3
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb4c:	4413      	add	r3, r2
 800cb4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb52:	677b      	str	r3, [r7, #116]	@ 0x74
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	1d1a      	adds	r2, r3, #4
 800cb58:	607a      	str	r2, [r7, #4]
 800cb5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb5c:	601a      	str	r2, [r3, #0]
    for( ; i >= 8; i -= 8 )
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3b08      	subs	r3, #8
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b07      	cmp	r3, #7
 800cb68:	f63f ac53 	bhi.w	800c412 <mpi_mul_hlp+0xeb6>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 800cb6c:	e07c      	b.n	800cc68 <mpi_mul_hlp+0x170c>
    {
        MULADDC_INIT
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	0c1b      	lsrs	r3, r3, #16
 800cb78:	66bb      	str	r3, [r7, #104]	@ 0x68
        MULADDC_CORE
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	667b      	str	r3, [r7, #100]	@ 0x64
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	0c1b      	lsrs	r3, r3, #16
 800cb88:	663b      	str	r3, [r7, #96]	@ 0x60
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	60bb      	str	r3, [r7, #8]
 800cb90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb92:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cb94:	fb02 f303 	mul.w	r3, r2, r3
 800cb98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cb9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cb9e:	fb02 f303 	mul.w	r3, r2, r3
 800cba2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cba6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cba8:	fb02 f303 	mul.w	r3, r2, r3
 800cbac:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cbb0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbb2:	fb02 f303 	mul.w	r3, r2, r3
 800cbb6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbba:	0c1b      	lsrs	r3, r3, #16
 800cbbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbbe:	4413      	add	r3, r2
 800cbc0:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbc4:	0c1b      	lsrs	r3, r3, #16
 800cbc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbc8:	4413      	add	r3, r2
 800cbca:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbce:	041b      	lsls	r3, r3, #16
 800cbd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cbd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbd4:	041b      	lsls	r3, r3, #16
 800cbd6:	657b      	str	r3, [r7, #84]	@ 0x54
 800cbd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cbda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbdc:	4413      	add	r3, r2
 800cbde:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cbe0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cbe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	bf34      	ite	cc
 800cbe8:	2301      	movcc	r3, #1
 800cbea:	2300      	movcs	r3, #0
 800cbec:	b2db      	uxtb	r3, r3
 800cbee:	461a      	mov	r2, r3
 800cbf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbf2:	4413      	add	r3, r2
 800cbf4:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cbf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbfa:	4413      	add	r3, r2
 800cbfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cbfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc02:	429a      	cmp	r2, r3
 800cc04:	bf34      	ite	cc
 800cc06:	2301      	movcc	r3, #1
 800cc08:	2300      	movcs	r3, #0
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc10:	4413      	add	r3, r2
 800cc12:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc18:	4413      	add	r3, r2
 800cc1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc20:	429a      	cmp	r2, r3
 800cc22:	bf34      	ite	cc
 800cc24:	2301      	movcc	r3, #1
 800cc26:	2300      	movcs	r3, #0
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc2e:	4413      	add	r3, r2
 800cc30:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc38:	4413      	add	r3, r2
 800cc3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc42:	429a      	cmp	r2, r3
 800cc44:	bf34      	ite	cc
 800cc46:	2301      	movcc	r3, #1
 800cc48:	2300      	movcs	r3, #0
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc50:	4413      	add	r3, r2
 800cc52:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc56:	677b      	str	r3, [r7, #116]	@ 0x74
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	1d1a      	adds	r2, r3, #4
 800cc5c:	607a      	str	r2, [r7, #4]
 800cc5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc60:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3b01      	subs	r3, #1
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f47f af7f 	bne.w	800cb6e <mpi_mul_hlp+0x1612>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 800cc70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc72:	3301      	adds	r3, #1
 800cc74:	673b      	str	r3, [r7, #112]	@ 0x70

    do {
        *d += c; c = ( *d < c ); d++;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc7c:	441a      	add	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	bf8c      	ite	hi
 800cc8c:	2301      	movhi	r3, #1
 800cc8e:	2300      	movls	r3, #0
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	677b      	str	r3, [r7, #116]	@ 0x74
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	3304      	adds	r3, #4
 800cc98:	607b      	str	r3, [r7, #4]
    }
    while( c != 0 );
 800cc9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1ea      	bne.n	800cc76 <mpi_mul_hlp+0x171a>
}
 800cca0:	bf00      	nop
 800cca2:	bf00      	nop
 800cca4:	377c      	adds	r7, #124	@ 0x7c
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800ccae:	b590      	push	{r4, r7, lr}
 800ccb0:	b08f      	sub	sp, #60	@ 0x3c
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	60f8      	str	r0, [r7, #12]
 800ccb6:	60b9      	str	r1, [r7, #8]
 800ccb8:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TA, TB;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800ccba:	f107 0320 	add.w	r3, r7, #32
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f7fd fa75 	bl	800a1ae <mbedtls_mpi_init>
 800ccc4:	f107 0314 	add.w	r3, r7, #20
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fd fa70 	bl	800a1ae <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d10c      	bne.n	800ccf0 <mbedtls_mpi_mul_mpi+0x42>
 800ccd6:	f107 0320 	add.w	r3, r7, #32
 800ccda:	68b9      	ldr	r1, [r7, #8]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7fd fb48 	bl	800a372 <mbedtls_mpi_copy>
 800cce2:	6378      	str	r0, [r7, #52]	@ 0x34
 800cce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d17b      	bne.n	800cde2 <mbedtls_mpi_mul_mpi+0x134>
 800ccea:	f107 0320 	add.w	r3, r7, #32
 800ccee:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d10c      	bne.n	800cd12 <mbedtls_mpi_mul_mpi+0x64>
 800ccf8:	f107 0314 	add.w	r3, r7, #20
 800ccfc:	6879      	ldr	r1, [r7, #4]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fd fb37 	bl	800a372 <mbedtls_mpi_copy>
 800cd04:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d16a      	bne.n	800cde2 <mbedtls_mpi_mul_mpi+0x134>
 800cd0c:	f107 0314 	add.w	r3, r7, #20
 800cd10:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd18:	e00d      	b.n	800cd36 <mbedtls_mpi_mul_mpi+0x88>
        if( A->p[i - 1] != 0 )
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd20:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cd24:	440b      	add	r3, r1
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	4413      	add	r3, r2
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d106      	bne.n	800cd3e <mbedtls_mpi_mul_mpi+0x90>
    for( i = A->n; i > 0; i-- )
 800cd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd32:	3b01      	subs	r3, #1
 800cd34:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1ee      	bne.n	800cd1a <mbedtls_mpi_mul_mpi+0x6c>
 800cd3c:	e000      	b.n	800cd40 <mbedtls_mpi_mul_mpi+0x92>
            break;
 800cd3e:	bf00      	nop

    for( j = B->n; j > 0; j-- )
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd46:	e00d      	b.n	800cd64 <mbedtls_mpi_mul_mpi+0xb6>
        if( B->p[j - 1] != 0 )
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	689a      	ldr	r2, [r3, #8]
 800cd4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd4e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cd52:	440b      	add	r3, r1
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d106      	bne.n	800cd6c <mbedtls_mpi_mul_mpi+0xbe>
    for( j = B->n; j > 0; j-- )
 800cd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd60:	3b01      	subs	r3, #1
 800cd62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d1ee      	bne.n	800cd48 <mbedtls_mpi_mul_mpi+0x9a>
 800cd6a:	e000      	b.n	800cd6e <mbedtls_mpi_mul_mpi+0xc0>
            break;
 800cd6c:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800cd6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd72:	4413      	add	r3, r2
 800cd74:	4619      	mov	r1, r3
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	f7fd fa52 	bl	800a220 <mbedtls_mpi_grow>
 800cd7c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d12e      	bne.n	800cde2 <mbedtls_mpi_mul_mpi+0x134>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800cd84:	2100      	movs	r1, #0
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	f7fd fc52 	bl	800a630 <mbedtls_mpi_lset>
 800cd8c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d126      	bne.n	800cde2 <mbedtls_mpi_mul_mpi+0x134>

    for( ; j > 0; j-- )
 800cd94:	e01a      	b.n	800cdcc <mbedtls_mpi_mul_mpi+0x11e>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	6898      	ldr	r0, [r3, #8]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	689a      	ldr	r2, [r3, #8]
 800cd9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cda0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cda4:	440b      	add	r3, r1
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	18d4      	adds	r4, r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	689a      	ldr	r2, [r3, #8]
 800cdae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdb0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cdb4:	440b      	add	r3, r1
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4622      	mov	r2, r4
 800cdbe:	4601      	mov	r1, r0
 800cdc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cdc2:	f7fe fbcb 	bl	800b55c <mpi_mul_hlp>
    for( ; j > 0; j-- )
 800cdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1e1      	bne.n	800cd96 <mbedtls_mpi_mul_mpi+0xe8>

    X->s = A->s * B->s;
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	6812      	ldr	r2, [r2, #0]
 800cdda:	fb03 f202 	mul.w	r2, r3, r2
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	601a      	str	r2, [r3, #0]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 800cde2:	f107 0314 	add.w	r3, r7, #20
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7fd f9f4 	bl	800a1d4 <mbedtls_mpi_free>
 800cdec:	f107 0320 	add.w	r3, r7, #32
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fd f9ef 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	373c      	adds	r7, #60	@ 0x3c
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd90      	pop	{r4, r7, pc}

0800ce00 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b088      	sub	sp, #32
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800ce10:	2301      	movs	r3, #1
 800ce12:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800ce14:	f107 0310 	add.w	r3, r7, #16
 800ce18:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800ce1e:	f107 0314 	add.w	r3, r7, #20
 800ce22:	461a      	mov	r2, r3
 800ce24:	68b9      	ldr	r1, [r7, #8]
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f7ff ff41 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800ce2c:	4603      	mov	r3, r0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3720      	adds	r7, #32
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b090      	sub	sp, #64	@ 0x40
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	60f8      	str	r0, [r7, #12]
 800ce3e:	60b9      	str	r1, [r7, #8]
 800ce40:	607a      	str	r2, [r7, #4]
 800ce42:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_HAVE_UDBL)
    mbedtls_t_udbl dividend, quotient;
#else
    const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;
 800ce44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ce48:	633b      	str	r3, [r7, #48]	@ 0x30
    const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;
 800ce4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <mbedtls_int_div_int+0x28>
 800ce56:	68fa      	ldr	r2, [r7, #12]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d309      	bcc.n	800ce72 <mbedtls_int_div_int+0x3c>
    {
        if (r != NULL) *r = ~0;
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d003      	beq.n	800ce6c <mbedtls_int_div_int+0x36>
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	f04f 32ff 	mov.w	r2, #4294967295
 800ce6a:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 800ce6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce70:	e0a7      	b.n	800cfc2 <mbedtls_int_div_int+0x18c>
     */

    /*
     * Normalize the divisor, d, and dividend, u0, u1
     */
    s = mbedtls_clz( d );
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f7fd fcb1 	bl	800a7da <mbedtls_clz>
 800ce78:	62b8      	str	r0, [r7, #40]	@ 0x28
    d = d << s;
 800ce7a:	687a      	ldr	r2, [r7, #4]
 800ce7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce82:	607b      	str	r3, [r7, #4]

    u1 = u1 << s;
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce88:	fa02 f303 	lsl.w	r3, r2, r3
 800ce8c:	60fb      	str	r3, [r7, #12]
    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
 800ce8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce90:	f1c3 0320 	rsb	r3, r3, #32
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	fa22 f303 	lsr.w	r3, r2, r3
 800ce9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce9c:	4252      	negs	r2, r2
 800ce9e:	17d2      	asrs	r2, r2, #31
 800cea0:	4013      	ands	r3, r2
 800cea2:	68fa      	ldr	r2, [r7, #12]
 800cea4:	4313      	orrs	r3, r2
 800cea6:	60fb      	str	r3, [r7, #12]
    u0 =  u0 << s;
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceac:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb0:	60bb      	str	r3, [r7, #8]

    d1 = d >> biH;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	0c1b      	lsrs	r3, r3, #16
 800ceb6:	627b      	str	r3, [r7, #36]	@ 0x24
    d0 = d & uint_halfword_mask;
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cebc:	4013      	ands	r3, r2
 800cebe:	623b      	str	r3, [r7, #32]

    u0_msw = u0 >> biH;
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	0c1b      	lsrs	r3, r3, #16
 800cec4:	61fb      	str	r3, [r7, #28]
    u0_lsw = u0 & uint_halfword_mask;
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceca:	4013      	ands	r3, r2
 800cecc:	61bb      	str	r3, [r7, #24]

    /*
     * Find the first quotient and remainder
     */
    q1 = u1 / d1;
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ced2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ced6:	63bb      	str	r3, [r7, #56]	@ 0x38
    r0 = u1 - d1 * q1;
 800ced8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cedc:	fb02 f303 	mul.w	r3, r2, r3
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	637b      	str	r3, [r7, #52]	@ 0x34

    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 800cee6:	e00a      	b.n	800cefe <mbedtls_int_div_int+0xc8>
    {
        q1 -= 1;
 800cee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceea:	3b01      	subs	r3, #1
 800ceec:	63bb      	str	r3, [r7, #56]	@ 0x38
        r0 += d1;
 800ceee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef2:	4413      	add	r3, r2
 800cef4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ( r0 >= radix ) break;
 800cef6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d210      	bcs.n	800cf20 <mbedtls_int_div_int+0xea>
    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 800cefe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d2f0      	bcs.n	800cee8 <mbedtls_int_div_int+0xb2>
 800cf06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf08:	6a3a      	ldr	r2, [r7, #32]
 800cf0a:	fb03 f202 	mul.w	r2, r3, r2
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf10:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf12:	fb03 f101 	mul.w	r1, r3, r1
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	440b      	add	r3, r1
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d8e4      	bhi.n	800cee8 <mbedtls_int_div_int+0xb2>
 800cf1e:	e000      	b.n	800cf22 <mbedtls_int_div_int+0xec>
        if ( r0 >= radix ) break;
 800cf20:	bf00      	nop
    }

    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf26:	fb03 f202 	mul.w	r2, r3, r2
 800cf2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf2c:	6879      	ldr	r1, [r7, #4]
 800cf2e:	fb01 f303 	mul.w	r3, r1, r3
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	69fa      	ldr	r2, [r7, #28]
 800cf36:	4413      	add	r3, r2
 800cf38:	617b      	str	r3, [r7, #20]
    q0 = rAX / d1;
 800cf3a:	697a      	ldr	r2, [r7, #20]
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    r0 = rAX - q0 * d1;
 800cf44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf48:	fb02 f303 	mul.w	r3, r2, r3
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	637b      	str	r3, [r7, #52]	@ 0x34

    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 800cf52:	e00a      	b.n	800cf6a <mbedtls_int_div_int+0x134>
    {
        q0 -= 1;
 800cf54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf56:	3b01      	subs	r3, #1
 800cf58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        r0 += d1;
 800cf5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5e:	4413      	add	r3, r2
 800cf60:	637b      	str	r3, [r7, #52]	@ 0x34

        if ( r0 >= radix ) break;
 800cf62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d210      	bcs.n	800cf8c <mbedtls_int_div_int+0x156>
    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 800cf6a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d2f0      	bcs.n	800cf54 <mbedtls_int_div_int+0x11e>
 800cf72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf74:	6a3a      	ldr	r2, [r7, #32]
 800cf76:	fb03 f202 	mul.w	r2, r3, r2
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf7e:	fb03 f101 	mul.w	r1, r3, r1
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	440b      	add	r3, r1
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d8e4      	bhi.n	800cf54 <mbedtls_int_div_int+0x11e>
 800cf8a:	e000      	b.n	800cf8e <mbedtls_int_div_int+0x158>
        if ( r0 >= radix ) break;
 800cf8c:	bf00      	nop
    }

    if (r != NULL)
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00e      	beq.n	800cfb2 <mbedtls_int_div_int+0x17c>
        *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf98:	fb03 f202 	mul.w	r2, r3, r2
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	441a      	add	r2, r3
 800cfa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfa2:	6879      	ldr	r1, [r7, #4]
 800cfa4:	fb01 f303 	mul.w	r3, r1, r3
 800cfa8:	1ad2      	subs	r2, r2, r3
 800cfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfac:	40da      	lsrs	r2, r3
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	601a      	str	r2, [r3, #0]

    quotient = q1 * radix + q0;
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfb6:	fb02 f303 	mul.w	r3, r2, r3
 800cfba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cfbc:	4413      	add	r3, r2
 800cfbe:	613b      	str	r3, [r7, #16]

    return quotient;
 800cfc0:	693b      	ldr	r3, [r7, #16]
#endif
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3740      	adds	r7, #64	@ 0x40
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 800cfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfce:	b099      	sub	sp, #100	@ 0x64
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	603b      	str	r3, [r7, #0]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800cfda:	2100      	movs	r1, #0
 800cfdc:	6838      	ldr	r0, [r7, #0]
 800cfde:	f7fe f862 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d102      	bne.n	800cfee <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800cfe8:	f06f 030b 	mvn.w	r3, #11
 800cfec:	e289      	b.n	800d502 <mbedtls_mpi_div_mpi+0x536>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800cfee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fd f8db 	bl	800a1ae <mbedtls_mpi_init>
 800cff8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fd f8d6 	bl	800a1ae <mbedtls_mpi_init>
 800d002:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d006:	4618      	mov	r0, r3
 800d008:	f7fd f8d1 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 800d00c:	f107 031c 	add.w	r3, r7, #28
 800d010:	4618      	mov	r0, r3
 800d012:	f7fd f8cc 	bl	800a1ae <mbedtls_mpi_init>
 800d016:	f107 0310 	add.w	r3, r7, #16
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7fd f8c7 	bl	800a1ae <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f7fd ff22 	bl	800ae6c <mbedtls_mpi_cmp_abs>
 800d028:	4603      	mov	r3, r0
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	da19      	bge.n	800d062 <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d008      	beq.n	800d046 <mbedtls_mpi_div_mpi+0x7a>
 800d034:	2100      	movs	r1, #0
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f7fd fafa 	bl	800a630 <mbedtls_mpi_lset>
 800d03c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d03e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d040:	2b00      	cmp	r3, #0
 800d042:	f040 8244 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d008      	beq.n	800d05e <mbedtls_mpi_div_mpi+0x92>
 800d04c:	6879      	ldr	r1, [r7, #4]
 800d04e:	68b8      	ldr	r0, [r7, #8]
 800d050:	f7fd f98f 	bl	800a372 <mbedtls_mpi_copy>
 800d054:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d058:	2b00      	cmp	r3, #0
 800d05a:	f040 8238 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
        return( 0 );
 800d05e:	2300      	movs	r3, #0
 800d060:	e24f      	b.n	800d502 <mbedtls_mpi_div_mpi+0x536>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800d062:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d066:	6879      	ldr	r1, [r7, #4]
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fd f982 	bl	800a372 <mbedtls_mpi_copy>
 800d06e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d070:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d072:	2b00      	cmp	r3, #0
 800d074:	f040 822b 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 800d078:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d07c:	6839      	ldr	r1, [r7, #0]
 800d07e:	4618      	mov	r0, r3
 800d080:	f7fd f977 	bl	800a372 <mbedtls_mpi_copy>
 800d084:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f040 8220 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
    X.s = Y.s = 1;
 800d08e:	2301      	movs	r3, #1
 800d090:	637b      	str	r3, [r7, #52]	@ 0x34
 800d092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d094:	643b      	str	r3, [r7, #64]	@ 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	1c9a      	adds	r2, r3, #2
 800d09c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fd f8bc 	bl	800a220 <mbedtls_mpi_grow>
 800d0a8:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d0aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f040 820e 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800d0b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f7fd fab9 	bl	800a630 <mbedtls_mpi_lset>
 800d0be:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d0c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 8203 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 800d0c8:	f107 031c 	add.w	r3, r7, #28
 800d0cc:	2102      	movs	r1, #2
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fd f8a6 	bl	800a220 <mbedtls_mpi_grow>
 800d0d4:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d0d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	f040 81f8 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 800d0de:	f107 0310 	add.w	r3, r7, #16
 800d0e2:	2103      	movs	r1, #3
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fd f89b 	bl	800a220 <mbedtls_mpi_grow>
 800d0ea:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d0ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f040 81ed 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800d0f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fd fb8f 	bl	800a81c <mbedtls_mpi_bitlen>
 800d0fe:	4603      	mov	r3, r0
 800d100:	f003 031f 	and.w	r3, r3, #31
 800d104:	657b      	str	r3, [r7, #84]	@ 0x54
    if( k < biL - 1 )
 800d106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d108:	2b1e      	cmp	r3, #30
 800d10a:	d819      	bhi.n	800d140 <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 800d10c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d10e:	f1c3 031f 	rsb	r3, r3, #31
 800d112:	657b      	str	r3, [r7, #84]	@ 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800d114:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d118:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7fd fd69 	bl	800abf2 <mbedtls_mpi_shift_l>
 800d120:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d124:	2b00      	cmp	r3, #0
 800d126:	f040 81d2 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 800d12a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d12e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d130:	4618      	mov	r0, r3
 800d132:	f7fd fd5e 	bl	800abf2 <mbedtls_mpi_shift_l>
 800d136:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d138:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <mbedtls_mpi_div_mpi+0x178>
 800d13e:	e1c6      	b.n	800d4ce <mbedtls_mpi_div_mpi+0x502>
    }
    else k = 0;
 800d140:	2300      	movs	r3, #0
 800d142:	657b      	str	r3, [r7, #84]	@ 0x54

    n = X.n - 1;
 800d144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d146:	3b01      	subs	r3, #1
 800d148:	653b      	str	r3, [r7, #80]	@ 0x50
    t = Y.n - 1;
 800d14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14c:	3b01      	subs	r3, #1
 800d14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800d150:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	015a      	lsls	r2, r3, #5
 800d158:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d15c:	4611      	mov	r1, r2
 800d15e:	4618      	mov	r0, r3
 800d160:	f7fd fd47 	bl	800abf2 <mbedtls_mpi_shift_l>
 800d164:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f040 81b0 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800d16e:	e016      	b.n	800d19e <mbedtls_mpi_div_mpi+0x1d2>
    {
        Z.p[n - t]++;
 800d170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d172:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d176:	1acb      	subs	r3, r1, r3
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	4413      	add	r3, r2
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	3201      	adds	r2, #1
 800d180:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800d182:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d186:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d18a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d18e:	4618      	mov	r0, r3
 800d190:	f7fe f958 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800d194:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d196:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f040 8198 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800d19e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d1a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7fd fee1 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	dadd      	bge.n	800d170 <mbedtls_mpi_div_mpi+0x1a4>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800d1b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	015a      	lsls	r2, r3, #5
 800d1bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7fd fdb7 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d1c8:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d1ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f040 817e 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>

    for( i = n; i > t ; i-- )
 800d1d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d1d6:	e13a      	b.n	800d44e <mbedtls_mpi_div_mpi+0x482>
    {
        if( X.p[i] >= Y.p[t] )
 800d1d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	4413      	add	r3, r2
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1e6:	009b      	lsls	r3, r3, #2
 800d1e8:	440b      	add	r3, r1
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d30c      	bcc.n	800d20a <mbedtls_mpi_div_mpi+0x23e>
            Z.p[i - t - 1] = ~0;
 800d1f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d1f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1f6:	1ac9      	subs	r1, r1, r3
 800d1f8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d1fc:	440b      	add	r3, r1
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	4413      	add	r3, r2
 800d202:	f04f 32ff 	mov.w	r2, #4294967295
 800d206:	601a      	str	r2, [r3, #0]
 800d208:	e021      	b.n	800d24e <mbedtls_mpi_div_mpi+0x282>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800d20a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d20c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4413      	add	r3, r2
 800d212:	6818      	ldr	r0, [r3, #0]
 800d214:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d216:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d218:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d21c:	440b      	add	r3, r1
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4413      	add	r3, r2
 800d222:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 800d224:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800d22c:	681e      	ldr	r6, [r3, #0]
 800d22e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d230:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d234:	1ac9      	subs	r1, r1, r3
 800d236:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d23a:	440b      	add	r3, r1
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	18d4      	adds	r4, r2, r3
 800d240:	2300      	movs	r3, #0
 800d242:	4632      	mov	r2, r6
 800d244:	4629      	mov	r1, r5
 800d246:	f7ff fdf6 	bl	800ce36 <mbedtls_int_div_int>
 800d24a:	4603      	mov	r3, r0
 800d24c:	6023      	str	r3, [r4, #0]
        }

        Z.p[i - t - 1]++;
 800d24e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d250:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d254:	1ac9      	subs	r1, r1, r3
 800d256:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d25a:	440b      	add	r3, r1
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	4413      	add	r3, r2
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	3201      	adds	r2, #1
 800d264:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 800d266:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d268:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d26a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d26c:	1ac9      	subs	r1, r1, r3
 800d26e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d272:	440b      	add	r3, r1
 800d274:	009b      	lsls	r3, r3, #2
 800d276:	4413      	add	r3, r2
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	3a01      	subs	r2, #1
 800d27c:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800d27e:	f107 031c 	add.w	r3, r7, #28
 800d282:	2100      	movs	r1, #0
 800d284:	4618      	mov	r0, r3
 800d286:	f7fd f9d3 	bl	800a630 <mbedtls_mpi_lset>
 800d28a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d28c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f040 811d 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800d294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d296:	2b00      	cmp	r3, #0
 800d298:	d008      	beq.n	800d2ac <mbedtls_mpi_div_mpi+0x2e0>
 800d29a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d29c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d29e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2a2:	440b      	add	r3, r1
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4413      	add	r3, r2
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	e000      	b.n	800d2ae <mbedtls_mpi_div_mpi+0x2e2>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2b0:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 800d2b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d2b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	441a      	add	r2, r3
 800d2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2bc:	3304      	adds	r3, #4
 800d2be:	6812      	ldr	r2, [r2, #0]
 800d2c0:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800d2c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2c8:	1ac9      	subs	r1, r1, r3
 800d2ca:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2ce:	440b      	add	r3, r1
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	4413      	add	r3, r2
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	f107 011c 	add.w	r1, r7, #28
 800d2da:	f107 031c 	add.w	r3, r7, #28
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7ff fd8e 	bl	800ce00 <mbedtls_mpi_mul_int>
 800d2e4:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d2e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f040 80f0 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 800d2ee:	f107 0310 	add.w	r3, r7, #16
 800d2f2:	2100      	movs	r1, #0
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fd f99b 	bl	800a630 <mbedtls_mpi_lset>
 800d2fa:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d2fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f040 80e5 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800d304:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d306:	2b01      	cmp	r3, #1
 800d308:	d907      	bls.n	800d31a <mbedtls_mpi_div_mpi+0x34e>
 800d30a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d30c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d30e:	4b7f      	ldr	r3, [pc, #508]	@ (800d50c <mbedtls_mpi_div_mpi+0x540>)
 800d310:	440b      	add	r3, r1
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	e000      	b.n	800d31c <mbedtls_mpi_div_mpi+0x350>
 800d31a:	2300      	movs	r3, #0
 800d31c:	69ba      	ldr	r2, [r7, #24]
 800d31e:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800d320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d322:	2b00      	cmp	r3, #0
 800d324:	d008      	beq.n	800d338 <mbedtls_mpi_div_mpi+0x36c>
 800d326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d328:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d32a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d32e:	440b      	add	r3, r1
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	e000      	b.n	800d33a <mbedtls_mpi_div_mpi+0x36e>
 800d338:	2300      	movs	r3, #0
 800d33a:	69ba      	ldr	r2, [r7, #24]
 800d33c:	3204      	adds	r2, #4
 800d33e:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 800d340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	441a      	add	r2, r3
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	3308      	adds	r3, #8
 800d34c:	6812      	ldr	r2, [r2, #0]
 800d34e:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800d350:	f107 0210 	add.w	r2, r7, #16
 800d354:	f107 031c 	add.w	r3, r7, #28
 800d358:	4611      	mov	r1, r2
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fd fe08 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	f73f af7f 	bgt.w	800d266 <mbedtls_mpi_div_mpi+0x29a>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800d368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d36a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d36c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d36e:	1ac9      	subs	r1, r1, r3
 800d370:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d374:	440b      	add	r3, r1
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4413      	add	r3, r2
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800d380:	f107 031c 	add.w	r3, r7, #28
 800d384:	4618      	mov	r0, r3
 800d386:	f7ff fd3b 	bl	800ce00 <mbedtls_mpi_mul_int>
 800d38a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d38c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f040 809d 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800d394:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d398:	1ad3      	subs	r3, r2, r3
 800d39a:	3b01      	subs	r3, #1
 800d39c:	015a      	lsls	r2, r3, #5
 800d39e:	f107 031c 	add.w	r3, r7, #28
 800d3a2:	4611      	mov	r1, r2
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fd fc24 	bl	800abf2 <mbedtls_mpi_shift_l>
 800d3aa:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d3ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f040 808d 	bne.w	800d4ce <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800d3b4:	f107 021c 	add.w	r2, r7, #28
 800d3b8:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d3bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fe f83f 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800d3c6:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d3c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d17f      	bne.n	800d4ce <mbedtls_mpi_div_mpi+0x502>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800d3ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d3d2:	2100      	movs	r1, #0
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fd fe66 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	da33      	bge.n	800d448 <mbedtls_mpi_div_mpi+0x47c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 800d3e0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d3e4:	f107 031c 	add.w	r3, r7, #28
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fc ffc1 	bl	800a372 <mbedtls_mpi_copy>
 800d3f0:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d3f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d16a      	bne.n	800d4ce <mbedtls_mpi_div_mpi+0x502>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800d3f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3fc:	1ad3      	subs	r3, r2, r3
 800d3fe:	3b01      	subs	r3, #1
 800d400:	015a      	lsls	r2, r3, #5
 800d402:	f107 031c 	add.w	r3, r7, #28
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fd fbf2 	bl	800abf2 <mbedtls_mpi_shift_l>
 800d40e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d410:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d412:	2b00      	cmp	r3, #0
 800d414:	d15b      	bne.n	800d4ce <mbedtls_mpi_div_mpi+0x502>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800d416:	f107 021c 	add.w	r2, r7, #28
 800d41a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d41e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d422:	4618      	mov	r0, r3
 800d424:	f7fd ffca 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800d428:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d42a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d14e      	bne.n	800d4ce <mbedtls_mpi_div_mpi+0x502>
            Z.p[i - t - 1]--;
 800d430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d432:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d436:	1ac9      	subs	r1, r1, r3
 800d438:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d43c:	440b      	add	r3, r1
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4413      	add	r3, r2
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	3a01      	subs	r2, #1
 800d446:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 800d448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d44a:	3b01      	subs	r3, #1
 800d44c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d44e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d452:	429a      	cmp	r2, r3
 800d454:	f63f aec0 	bhi.w	800d1d8 <mbedtls_mpi_div_mpi+0x20c>
        }
    }

    if( Q != NULL )
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d011      	beq.n	800d482 <mbedtls_mpi_div_mpi+0x4b6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 800d45e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d462:	4619      	mov	r1, r3
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f7fc ff84 	bl	800a372 <mbedtls_mpi_copy>
 800d46a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d46c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d12d      	bne.n	800d4ce <mbedtls_mpi_div_mpi+0x502>
        Q->s = A->s * B->s;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	683a      	ldr	r2, [r7, #0]
 800d478:	6812      	ldr	r2, [r2, #0]
 800d47a:	fb03 f202 	mul.w	r2, r3, r2
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d021      	beq.n	800d4cc <mbedtls_mpi_div_mpi+0x500>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800d488:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d48c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fd fc51 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d494:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d118      	bne.n	800d4ce <mbedtls_mpi_div_mpi+0x502>
        X.s = A->s;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	643b      	str	r3, [r7, #64]	@ 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800d4a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	68b8      	ldr	r0, [r7, #8]
 800d4aa:	f7fc ff62 	bl	800a372 <mbedtls_mpi_copy>
 800d4ae:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d4b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d10b      	bne.n	800d4ce <mbedtls_mpi_div_mpi+0x502>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	68b8      	ldr	r0, [r7, #8]
 800d4ba:	f7fd fdf4 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d103      	bne.n	800d4cc <mbedtls_mpi_div_mpi+0x500>
            R->s = 1;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	601a      	str	r2, [r3, #0]
 800d4ca:	e000      	b.n	800d4ce <mbedtls_mpi_div_mpi+0x502>
    }

cleanup:
 800d4cc:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800d4ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fc fe7e 	bl	800a1d4 <mbedtls_mpi_free>
 800d4d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fc fe79 	bl	800a1d4 <mbedtls_mpi_free>
 800d4e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f7fc fe74 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 800d4ec:	f107 031c 	add.w	r3, r7, #28
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7fc fe6f 	bl	800a1d4 <mbedtls_mpi_free>
 800d4f6:	f107 0310 	add.w	r3, r7, #16
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fc fe6a 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800d500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800d502:	4618      	mov	r0, r3
 800d504:	3764      	adds	r7, #100	@ 0x64
 800d506:	46bd      	mov	sp, r7
 800d508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d50a:	bf00      	nop
 800d50c:	3ffffffe 	.word	0x3ffffffe

0800d510 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800d51c:	2100      	movs	r1, #0
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7fd fdc1 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	da02      	bge.n	800d530 <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800d52a:	f06f 0309 	mvn.w	r3, #9
 800d52e:	e02d      	b.n	800d58c <mbedtls_mpi_mod_mpi+0x7c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	68ba      	ldr	r2, [r7, #8]
 800d534:	68f9      	ldr	r1, [r7, #12]
 800d536:	2000      	movs	r0, #0
 800d538:	f7ff fd48 	bl	800cfcc <mbedtls_mpi_div_mpi>
 800d53c:	6178      	str	r0, [r7, #20]
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d122      	bne.n	800d58a <mbedtls_mpi_mod_mpi+0x7a>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800d544:	e008      	b.n	800d558 <mbedtls_mpi_mod_mpi+0x48>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	68f9      	ldr	r1, [r7, #12]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7fd ff36 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800d550:	6178      	str	r0, [r7, #20]
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d118      	bne.n	800d58a <mbedtls_mpi_mod_mpi+0x7a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800d558:	2100      	movs	r1, #0
 800d55a:	68f8      	ldr	r0, [r7, #12]
 800d55c:	f7fd fda3 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	dbef      	blt.n	800d546 <mbedtls_mpi_mod_mpi+0x36>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800d566:	e008      	b.n	800d57a <mbedtls_mpi_mod_mpi+0x6a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	68f9      	ldr	r1, [r7, #12]
 800d56c:	68f8      	ldr	r0, [r7, #12]
 800d56e:	f7fd ff69 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800d572:	6178      	str	r0, [r7, #20]
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d107      	bne.n	800d58a <mbedtls_mpi_mod_mpi+0x7a>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800d57a:	6879      	ldr	r1, [r7, #4]
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f7fd fcf7 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	daef      	bge.n	800d568 <mbedtls_mpi_mod_mpi+0x58>

cleanup:
 800d588:	bf00      	nop

    return( ret );
 800d58a:	697b      	ldr	r3, [r7, #20]
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b090      	sub	sp, #64	@ 0x40
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]

    MPI_VALIDATE_RET( G != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800d5a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7fc fe02 	bl	800a1ae <mbedtls_mpi_init>
 800d5aa:	f107 031c 	add.w	r3, r7, #28
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f7fc fdfd 	bl	800a1ae <mbedtls_mpi_init>
 800d5b4:	f107 0310 	add.w	r3, r7, #16
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7fc fdf8 	bl	800a1ae <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800d5be:	f107 031c 	add.w	r3, r7, #28
 800d5c2:	68b9      	ldr	r1, [r7, #8]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fc fed4 	bl	800a372 <mbedtls_mpi_copy>
 800d5ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d5cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f040 80ae 	bne.w	800d730 <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800d5d4:	f107 0310 	add.w	r3, r7, #16
 800d5d8:	6879      	ldr	r1, [r7, #4]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7fc fec9 	bl	800a372 <mbedtls_mpi_copy>
 800d5e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f040 80a3 	bne.w	800d730 <mbedtls_mpi_gcd+0x19c>

    lz = mbedtls_mpi_lsb( &TA );
 800d5ea:	f107 031c 	add.w	r3, r7, #28
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fd f8c0 	bl	800a774 <mbedtls_mpi_lsb>
 800d5f4:	63b8      	str	r0, [r7, #56]	@ 0x38
    lzt = mbedtls_mpi_lsb( &TB );
 800d5f6:	f107 0310 	add.w	r3, r7, #16
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fd f8ba 	bl	800a774 <mbedtls_mpi_lsb>
 800d600:	6378      	str	r0, [r7, #52]	@ 0x34

    if( lzt < lz )
 800d602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d606:	429a      	cmp	r2, r3
 800d608:	d201      	bcs.n	800d60e <mbedtls_mpi_gcd+0x7a>
        lz = lzt;
 800d60a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d60c:	63bb      	str	r3, [r7, #56]	@ 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800d60e:	f107 031c 	add.w	r3, r7, #28
 800d612:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d614:	4618      	mov	r0, r3
 800d616:	f7fd fb8e 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d61a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f040 8086 	bne.w	800d730 <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800d624:	f107 0310 	add.w	r3, r7, #16
 800d628:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fd fb83 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d630:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d634:	2b00      	cmp	r3, #0
 800d636:	d17b      	bne.n	800d730 <mbedtls_mpi_gcd+0x19c>

    TA.s = TB.s = 1;
 800d638:	2301      	movs	r3, #1
 800d63a:	613b      	str	r3, [r7, #16]
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	61fb      	str	r3, [r7, #28]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800d640:	e059      	b.n	800d6f6 <mbedtls_mpi_gcd+0x162>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800d642:	f107 031c 	add.w	r3, r7, #28
 800d646:	4618      	mov	r0, r3
 800d648:	f7fd f894 	bl	800a774 <mbedtls_mpi_lsb>
 800d64c:	4602      	mov	r2, r0
 800d64e:	f107 031c 	add.w	r3, r7, #28
 800d652:	4611      	mov	r1, r2
 800d654:	4618      	mov	r0, r3
 800d656:	f7fd fb6e 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d65a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d166      	bne.n	800d730 <mbedtls_mpi_gcd+0x19c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800d662:	f107 0310 	add.w	r3, r7, #16
 800d666:	4618      	mov	r0, r3
 800d668:	f7fd f884 	bl	800a774 <mbedtls_mpi_lsb>
 800d66c:	4602      	mov	r2, r0
 800d66e:	f107 0310 	add.w	r3, r7, #16
 800d672:	4611      	mov	r1, r2
 800d674:	4618      	mov	r0, r3
 800d676:	f7fd fb5e 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d67a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d67c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d156      	bne.n	800d730 <mbedtls_mpi_gcd+0x19c>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800d682:	f107 0210 	add.w	r2, r7, #16
 800d686:	f107 031c 	add.w	r3, r7, #28
 800d68a:	4611      	mov	r1, r2
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fd fc6f 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	db17      	blt.n	800d6c8 <mbedtls_mpi_gcd+0x134>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800d698:	f107 0210 	add.w	r2, r7, #16
 800d69c:	f107 011c 	add.w	r1, r7, #28
 800d6a0:	f107 031c 	add.w	r3, r7, #28
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7fd fe29 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800d6aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d13e      	bne.n	800d730 <mbedtls_mpi_gcd+0x19c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800d6b2:	f107 031c 	add.w	r3, r7, #28
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fd fb3c 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d6be:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d6c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d017      	beq.n	800d6f6 <mbedtls_mpi_gcd+0x162>
 800d6c6:	e033      	b.n	800d730 <mbedtls_mpi_gcd+0x19c>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800d6c8:	f107 021c 	add.w	r2, r7, #28
 800d6cc:	f107 0110 	add.w	r1, r7, #16
 800d6d0:	f107 0310 	add.w	r3, r7, #16
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fd fe11 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800d6da:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d6dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d126      	bne.n	800d730 <mbedtls_mpi_gcd+0x19c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800d6e2:	f107 0310 	add.w	r3, r7, #16
 800d6e6:	2101      	movs	r1, #1
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fd fb24 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d6ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d11c      	bne.n	800d730 <mbedtls_mpi_gcd+0x19c>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800d6f6:	f107 031c 	add.w	r3, r7, #28
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f7fd fcd2 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d19c      	bne.n	800d642 <mbedtls_mpi_gcd+0xae>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800d708:	f107 0310 	add.w	r3, r7, #16
 800d70c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fd fa6f 	bl	800abf2 <mbedtls_mpi_shift_l>
 800d714:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d109      	bne.n	800d730 <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800d71c:	f107 0310 	add.w	r3, r7, #16
 800d720:	4619      	mov	r1, r3
 800d722:	68f8      	ldr	r0, [r7, #12]
 800d724:	f7fc fe25 	bl	800a372 <mbedtls_mpi_copy>
 800d728:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d72a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d72c:	2b00      	cmp	r3, #0

cleanup:
 800d72e:	bf00      	nop

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800d730:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d734:	4618      	mov	r0, r3
 800d736:	f7fc fd4d 	bl	800a1d4 <mbedtls_mpi_free>
 800d73a:	f107 031c 	add.w	r3, r7, #28
 800d73e:	4618      	mov	r0, r3
 800d740:	f7fc fd48 	bl	800a1d4 <mbedtls_mpi_free>
 800d744:	f107 0310 	add.w	r3, r7, #16
 800d748:	4618      	mov	r0, r3
 800d74a:	f7fc fd43 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800d74e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d750:	4618      	mov	r0, r3
 800d752:	3740      	adds	r7, #64	@ 0x40
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b088      	sub	sp, #32
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
 800d764:	603b      	str	r3, [r7, #0]
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	089b      	lsrs	r3, r3, #2
 800d76a:	68ba      	ldr	r2, [r7, #8]
 800d76c:	f002 0203 	and.w	r2, r2, #3
 800d770:	2a00      	cmp	r2, #0
 800d772:	bf14      	ite	ne
 800d774:	2201      	movne	r2, #1
 800d776:	2200      	moveq	r2, #0
 800d778:	b2d2      	uxtb	r2, r2
 800d77a:	4413      	add	r3, r2
 800d77c:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - size;
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	009a      	lsls	r2, r3, #2
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	69ba      	ldr	r2, [r7, #24]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d00d      	beq.n	800d7ae <mbedtls_mpi_fill_random+0x56>
    {
        mbedtls_mpi_free( X );
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f7fc fd1e 	bl	800a1d4 <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f7fc fd08 	bl	800a1ae <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800d79e:	69b9      	ldr	r1, [r7, #24]
 800d7a0:	68f8      	ldr	r0, [r7, #12]
 800d7a2:	f7fc fd3d 	bl	800a220 <mbedtls_mpi_grow>
 800d7a6:	61f8      	str	r0, [r7, #28]
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d117      	bne.n	800d7de <mbedtls_mpi_fill_random+0x86>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f7fc ff3d 	bl	800a630 <mbedtls_mpi_lset>
 800d7b6:	61f8      	str	r0, [r7, #28]
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10f      	bne.n	800d7de <mbedtls_mpi_fill_random+0x86>

    Xp = (unsigned char*) X->p;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	613b      	str	r3, [r7, #16]
    f_rng( p_rng, Xp + overhead, size );
 800d7c4:	693a      	ldr	r2, [r7, #16]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	18d1      	adds	r1, r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	6838      	ldr	r0, [r7, #0]
 800d7d0:	4798      	blx	r3

    mpi_bigendian_to_host( X->p, limbs );
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	689b      	ldr	r3, [r3, #8]
 800d7d6:	69b9      	ldr	r1, [r7, #24]
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f7fd f98a 	bl	800aaf2 <mpi_bigendian_to_host>

cleanup:
    return( ret );
 800d7de:	69fb      	ldr	r3, [r7, #28]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3720      	adds	r7, #32
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}

0800d7e8 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b0a0      	sub	sp, #128	@ 0x80
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800d7f4:	2101      	movs	r1, #1
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f7fd fc55 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	dc02      	bgt.n	800d808 <mbedtls_mpi_inv_mod+0x20>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800d802:	f06f 0303 	mvn.w	r3, #3
 800d806:	e209      	b.n	800dc1c <mbedtls_mpi_inv_mod+0x434>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 800d808:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7fc fcce 	bl	800a1ae <mbedtls_mpi_init>
 800d812:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d816:	4618      	mov	r0, r3
 800d818:	f7fc fcc9 	bl	800a1ae <mbedtls_mpi_init>
 800d81c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d820:	4618      	mov	r0, r3
 800d822:	f7fc fcc4 	bl	800a1ae <mbedtls_mpi_init>
 800d826:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fc fcbf 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 800d830:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d834:	4618      	mov	r0, r3
 800d836:	f7fc fcba 	bl	800a1ae <mbedtls_mpi_init>
 800d83a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fc fcb5 	bl	800a1ae <mbedtls_mpi_init>
 800d844:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d848:	4618      	mov	r0, r3
 800d84a:	f7fc fcb0 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 800d84e:	f107 031c 	add.w	r3, r7, #28
 800d852:	4618      	mov	r0, r3
 800d854:	f7fc fcab 	bl	800a1ae <mbedtls_mpi_init>
 800d858:	f107 0310 	add.w	r3, r7, #16
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7fc fca6 	bl	800a1ae <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800d862:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	68b9      	ldr	r1, [r7, #8]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7ff fe92 	bl	800d594 <mbedtls_mpi_gcd>
 800d870:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d872:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d874:	2b00      	cmp	r3, #0
 800d876:	f040 81a3 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800d87a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d87e:	2101      	movs	r1, #1
 800d880:	4618      	mov	r0, r3
 800d882:	f7fd fc10 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d003      	beq.n	800d894 <mbedtls_mpi_inv_mod+0xac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800d88c:	f06f 030d 	mvn.w	r3, #13
 800d890:	67fb      	str	r3, [r7, #124]	@ 0x7c
        goto cleanup;
 800d892:	e195      	b.n	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800d894:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	68b9      	ldr	r1, [r7, #8]
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7ff fe37 	bl	800d510 <mbedtls_mpi_mod_mpi>
 800d8a2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d8a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	f040 818a 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800d8ac:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800d8b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7fc fd5b 	bl	800a372 <mbedtls_mpi_copy>
 800d8bc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d8be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f040 817d 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800d8c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d8ca:	6879      	ldr	r1, [r7, #4]
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f7fc fd50 	bl	800a372 <mbedtls_mpi_copy>
 800d8d2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d8d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f040 8172 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800d8dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d8e0:	6879      	ldr	r1, [r7, #4]
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fc fd45 	bl	800a372 <mbedtls_mpi_copy>
 800d8e8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d8ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	f040 8167 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800d8f2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d8f6:	2101      	movs	r1, #1
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fc fe99 	bl	800a630 <mbedtls_mpi_lset>
 800d8fe:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d900:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d902:	2b00      	cmp	r3, #0
 800d904:	f040 815c 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800d908:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d90c:	2100      	movs	r1, #0
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fc fe8e 	bl	800a630 <mbedtls_mpi_lset>
 800d914:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d916:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f040 8151 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800d91e:	f107 031c 	add.w	r3, r7, #28
 800d922:	2100      	movs	r1, #0
 800d924:	4618      	mov	r0, r3
 800d926:	f7fc fe83 	bl	800a630 <mbedtls_mpi_lset>
 800d92a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d92c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f040 8146 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800d934:	f107 0310 	add.w	r3, r7, #16
 800d938:	2101      	movs	r1, #1
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fc fe78 	bl	800a630 <mbedtls_mpi_lset>
 800d940:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d942:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d944:	2b00      	cmp	r3, #0
 800d946:	f040 813b 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 800d94a:	e048      	b.n	800d9de <mbedtls_mpi_inv_mod+0x1f6>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800d94c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d950:	2101      	movs	r1, #1
 800d952:	4618      	mov	r0, r3
 800d954:	f7fd f9ef 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d958:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d95a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f040 812f 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800d962:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d105      	bne.n	800d97a <mbedtls_mpi_inv_mod+0x192>
 800d96e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f003 0301 	and.w	r3, r3, #1
 800d976:	2b00      	cmp	r3, #0
 800d978:	d01b      	beq.n	800d9b2 <mbedtls_mpi_inv_mod+0x1ca>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800d97a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d97e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800d982:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d986:	4618      	mov	r0, r3
 800d988:	f7fd fd18 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800d98c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d98e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d990:	2b00      	cmp	r3, #0
 800d992:	f040 8115 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800d996:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800d99a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d99e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fd fd4e 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800d9a8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f040 8107 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800d9b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d9b6:	2101      	movs	r1, #1
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7fd f9bc 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d9be:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f040 80fc 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800d9c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d9cc:	2101      	movs	r1, #1
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fd f9b1 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d9d4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f040 80f1 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
        while( ( TU.p[0] & 1 ) == 0 )
 800d9de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f003 0301 	and.w	r3, r3, #1
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d0b0      	beq.n	800d94c <mbedtls_mpi_inv_mod+0x164>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 800d9ea:	e048      	b.n	800da7e <mbedtls_mpi_inv_mod+0x296>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800d9ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d9f0:	2101      	movs	r1, #1
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fd f99f 	bl	800ad36 <mbedtls_mpi_shift_r>
 800d9f8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	f040 80df 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800da02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d105      	bne.n	800da1a <mbedtls_mpi_inv_mod+0x232>
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	f003 0301 	and.w	r3, r3, #1
 800da16:	2b00      	cmp	r3, #0
 800da18:	d01b      	beq.n	800da52 <mbedtls_mpi_inv_mod+0x26a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800da1a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800da1e:	f107 011c 	add.w	r1, r7, #28
 800da22:	f107 031c 	add.w	r3, r7, #28
 800da26:	4618      	mov	r0, r3
 800da28:	f7fd fcc8 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800da2c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da30:	2b00      	cmp	r3, #0
 800da32:	f040 80c5 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800da36:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800da3a:	f107 0110 	add.w	r1, r7, #16
 800da3e:	f107 0310 	add.w	r3, r7, #16
 800da42:	4618      	mov	r0, r3
 800da44:	f7fd fcfe 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800da48:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f040 80b7 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800da52:	f107 031c 	add.w	r3, r7, #28
 800da56:	2101      	movs	r1, #1
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fd f96c 	bl	800ad36 <mbedtls_mpi_shift_r>
 800da5e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da62:	2b00      	cmp	r3, #0
 800da64:	f040 80ac 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800da68:	f107 0310 	add.w	r3, r7, #16
 800da6c:	2101      	movs	r1, #1
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fd f961 	bl	800ad36 <mbedtls_mpi_shift_r>
 800da74:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f040 80a1 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
        while( ( TV.p[0] & 1 ) == 0 )
 800da7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f003 0301 	and.w	r3, r3, #1
 800da86:	2b00      	cmp	r3, #0
 800da88:	d0b0      	beq.n	800d9ec <mbedtls_mpi_inv_mod+0x204>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800da8a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800da8e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800da92:	4611      	mov	r1, r2
 800da94:	4618      	mov	r0, r3
 800da96:	f7fd fa6b 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	db28      	blt.n	800daf2 <mbedtls_mpi_inv_mod+0x30a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800daa0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800daa4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800daa8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800daac:	4618      	mov	r0, r3
 800daae:	f7fd fcc9 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800dab2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dab4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f040 8082 	bne.w	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800dabc:	f107 021c 	add.w	r2, r7, #28
 800dac0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800dac4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fd fcbb 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800dace:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dad0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d174      	bne.n	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800dad6:	f107 0210 	add.w	r2, r7, #16
 800dada:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800dade:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fd fcae 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800dae8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800daea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800daec:	2b00      	cmp	r3, #0
 800daee:	d027      	beq.n	800db40 <mbedtls_mpi_inv_mod+0x358>
 800daf0:	e066      	b.n	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800daf2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800daf6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800dafa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fd fca0 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800db04:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d159      	bne.n	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800db0c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800db10:	f107 011c 	add.w	r1, r7, #28
 800db14:	f107 031c 	add.w	r3, r7, #28
 800db18:	4618      	mov	r0, r3
 800db1a:	f7fd fc93 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800db1e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db22:	2b00      	cmp	r3, #0
 800db24:	d14c      	bne.n	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800db26:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800db2a:	f107 0110 	add.w	r1, r7, #16
 800db2e:	f107 0310 	add.w	r3, r7, #16
 800db32:	4618      	mov	r0, r3
 800db34:	f7fd fc86 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800db38:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d13f      	bne.n	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800db40:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800db44:	2100      	movs	r1, #0
 800db46:	4618      	mov	r0, r3
 800db48:	f7fd faad 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	f47f af45 	bne.w	800d9de <mbedtls_mpi_inv_mod+0x1f6>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800db54:	e00b      	b.n	800db6e <mbedtls_mpi_inv_mod+0x386>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800db56:	f107 011c 	add.w	r1, r7, #28
 800db5a:	f107 031c 	add.w	r3, r7, #28
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	4618      	mov	r0, r3
 800db62:	f7fd fc2b 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800db66:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db68:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d128      	bne.n	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800db6e:	f107 031c 	add.w	r3, r7, #28
 800db72:	2100      	movs	r1, #0
 800db74:	4618      	mov	r0, r3
 800db76:	f7fd fa96 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	dbea      	blt.n	800db56 <mbedtls_mpi_inv_mod+0x36e>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800db80:	e00b      	b.n	800db9a <mbedtls_mpi_inv_mod+0x3b2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800db82:	f107 011c 	add.w	r1, r7, #28
 800db86:	f107 031c 	add.w	r3, r7, #28
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fd fc59 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800db92:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db96:	2b00      	cmp	r3, #0
 800db98:	d112      	bne.n	800dbc0 <mbedtls_mpi_inv_mod+0x3d8>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800db9a:	f107 031c 	add.w	r3, r7, #28
 800db9e:	6879      	ldr	r1, [r7, #4]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fd f9e5 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	daea      	bge.n	800db82 <mbedtls_mpi_inv_mod+0x39a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800dbac:	f107 031c 	add.w	r3, r7, #28
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f7fc fbdd 	bl	800a372 <mbedtls_mpi_copy>
 800dbb8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dbba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dbbc:	2b00      	cmp	r3, #0

cleanup:
 800dbbe:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800dbc0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fc fb05 	bl	800a1d4 <mbedtls_mpi_free>
 800dbca:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7fc fb00 	bl	800a1d4 <mbedtls_mpi_free>
 800dbd4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fc fafb 	bl	800a1d4 <mbedtls_mpi_free>
 800dbde:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fc faf6 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800dbe8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fc faf1 	bl	800a1d4 <mbedtls_mpi_free>
 800dbf2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fc faec 	bl	800a1d4 <mbedtls_mpi_free>
 800dbfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fc fae7 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800dc06:	f107 031c 	add.w	r3, r7, #28
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fc fae2 	bl	800a1d4 <mbedtls_mpi_free>
 800dc10:	f107 0310 	add.w	r3, r7, #16
 800dc14:	4618      	mov	r0, r3
 800dc16:	f7fc fadd 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800dc1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3780      	adds	r7, #128	@ 0x80
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b088      	sub	sp, #32
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	603b      	str	r3, [r7, #0]
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc36:	3307      	adds	r3, #7
 800dc38:	08db      	lsrs	r3, r3, #3
 800dc3a:	61bb      	str	r3, [r7, #24]
    size_t use_size = blen > n_size ? n_size : blen;
 800dc3c:	683a      	ldr	r2, [r7, #0]
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	4293      	cmp	r3, r2
 800dc42:	bf28      	it	cs
 800dc44:	4613      	movcs	r3, r2
 800dc46:	617b      	str	r3, [r7, #20]

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 800dc48:	697a      	ldr	r2, [r7, #20]
 800dc4a:	6879      	ldr	r1, [r7, #4]
 800dc4c:	68b8      	ldr	r0, [r7, #8]
 800dc4e:	f7fc ff83 	bl	800ab58 <mbedtls_mpi_read_binary>
 800dc52:	61f8      	str	r0, [r7, #28]
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d126      	bne.n	800dca8 <derive_mpi+0x84>
    if( use_size * 8 > grp->nbits )
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	00da      	lsls	r2, r3, #3
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d90c      	bls.n	800dc80 <derive_mpi+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	00da      	lsls	r2, r3, #3
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc6e:	1ad3      	subs	r3, r2, r3
 800dc70:	4619      	mov	r1, r3
 800dc72:	68b8      	ldr	r0, [r7, #8]
 800dc74:	f7fd f85f 	bl	800ad36 <mbedtls_mpi_shift_r>
 800dc78:	61f8      	str	r0, [r7, #28]
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d113      	bne.n	800dca8 <derive_mpi+0x84>

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	334c      	adds	r3, #76	@ 0x4c
 800dc84:	4619      	mov	r1, r3
 800dc86:	68b8      	ldr	r0, [r7, #8]
 800dc88:	f7fd f972 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	db09      	blt.n	800dca6 <derive_mpi+0x82>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	334c      	adds	r3, #76	@ 0x4c
 800dc96:	461a      	mov	r2, r3
 800dc98:	68b9      	ldr	r1, [r7, #8]
 800dc9a:	68b8      	ldr	r0, [r7, #8]
 800dc9c:	f7fd fbd2 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800dca0:	61f8      	str	r0, [r7, #28]
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	2b00      	cmp	r3, #0

cleanup:
 800dca6:	bf00      	nop
    return( ret );
 800dca8:	69fb      	ldr	r3, [r7, #28]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3720      	adds	r7, #32
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
	...

0800dcb4 <ecdsa_verify_restartable>:
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
                                     const unsigned char *buf, size_t blen,
                                     const mbedtls_ecp_point *Q,
                                     const mbedtls_mpi *r, const mbedtls_mpi *s,
                                     mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b0a0      	sub	sp, #128	@ 0x80
 800dcb8:	af04      	add	r7, sp, #16
 800dcba:	60f8      	str	r0, [r7, #12]
 800dcbc:	60b9      	str	r1, [r7, #8]
 800dcbe:	607a      	str	r2, [r7, #4]
 800dcc0:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;
 800dcc2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dcc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dcc8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dccc:	667b      	str	r3, [r7, #100]	@ 0x64

    mbedtls_ecp_point_init( &R );
 800dcce:	f107 0310 	add.w	r3, r7, #16
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 f927 	bl	800df26 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 800dcd8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7fc fa66 	bl	800a1ae <mbedtls_mpi_init>
 800dce2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fc fa61 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 800dcec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fc fa5c 	bl	800a1ae <mbedtls_mpi_init>
 800dcf6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fc fa57 	bl	800a1ae <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <ecdsa_verify_restartable+0x58>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800dd08:	4b60      	ldr	r3, [pc, #384]	@ (800de8c <ecdsa_verify_restartable+0x1d8>)
 800dd0a:	e0bb      	b.n	800de84 <ecdsa_verify_restartable+0x1d0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800dd0c:	2101      	movs	r1, #1
 800dd0e:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800dd10:	f7fd f9c9 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	db18      	blt.n	800dd4c <ecdsa_verify_restartable+0x98>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	334c      	adds	r3, #76	@ 0x4c
 800dd1e:	4619      	mov	r1, r3
 800dd20:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800dd22:	f7fd f925 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	da0f      	bge.n	800dd4c <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800dd2c:	2101      	movs	r1, #1
 800dd2e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800dd30:	f7fd f9b9 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800dd34:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	db08      	blt.n	800dd4c <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	334c      	adds	r3, #76	@ 0x4c
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800dd42:	f7fd f915 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	db02      	blt.n	800dd52 <ecdsa_verify_restartable+0x9e>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800dd4c:	4b50      	ldr	r3, [pc, #320]	@ (800de90 <ecdsa_verify_restartable+0x1dc>)
 800dd4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800dd50:	e07e      	b.n	800de50 <ecdsa_verify_restartable+0x19c>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 800dd52:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	68ba      	ldr	r2, [r7, #8]
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f7ff ff62 	bl	800dc24 <derive_mpi>
 800dd60:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800dd62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d173      	bne.n	800de50 <ecdsa_verify_restartable+0x19c>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800dd6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dd72:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7ff fd37 	bl	800d7e8 <mbedtls_mpi_inv_mod>
 800dd7a:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800dd7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d166      	bne.n	800de50 <ecdsa_verify_restartable+0x19c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 800dd82:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800dd86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800dd8e:	f7fe ff8e 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800dd92:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800dd94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d15a      	bne.n	800de50 <ecdsa_verify_restartable+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	334c      	adds	r3, #76	@ 0x4c
 800dd9e:	461a      	mov	r2, r3
 800dda0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800dda2:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800dda4:	f7ff fbb4 	bl	800d510 <mbedtls_mpi_mod_mpi>
 800dda8:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800ddaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d14f      	bne.n	800de50 <ecdsa_verify_restartable+0x19c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 800ddb0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ddb8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ddba:	f7fe ff78 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800ddbe:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800ddc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d144      	bne.n	800de50 <ecdsa_verify_restartable+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	334c      	adds	r3, #76	@ 0x4c
 800ddca:	461a      	mov	r2, r3
 800ddcc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800ddce:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800ddd0:	f7ff fb9e 	bl	800d510 <mbedtls_mpi_mod_mpi>
 800ddd4:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800ddd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d139      	bne.n	800de50 <ecdsa_verify_restartable+0x19c>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800dde2:	f107 0110 	add.w	r1, r7, #16
 800dde6:	2300      	movs	r3, #0
 800dde8:	9302      	str	r3, [sp, #8]
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f002 fff4 	bl	8010de4 <mbedtls_ecp_muladd_restartable>
 800ddfc:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800ddfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de00:	2b00      	cmp	r3, #0
 800de02:	d125      	bne.n	800de50 <ecdsa_verify_restartable+0x19c>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 800de04:	f107 0310 	add.w	r3, r7, #16
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 f9cb 	bl	800e1a4 <mbedtls_ecp_is_zero>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d002      	beq.n	800de1a <ecdsa_verify_restartable+0x166>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800de14:	4b1e      	ldr	r3, [pc, #120]	@ (800de90 <ecdsa_verify_restartable+0x1dc>)
 800de16:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800de18:	e01a      	b.n	800de50 <ecdsa_verify_restartable+0x19c>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800de20:	f107 0110 	add.w	r1, r7, #16
 800de24:	f107 0310 	add.w	r3, r7, #16
 800de28:	4618      	mov	r0, r3
 800de2a:	f7ff fb71 	bl	800d510 <mbedtls_mpi_mod_mpi>
 800de2e:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10c      	bne.n	800de50 <ecdsa_verify_restartable+0x19c>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 800de36:	f107 0310 	add.w	r3, r7, #16
 800de3a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fd f897 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d002      	beq.n	800de4e <ecdsa_verify_restartable+0x19a>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800de48:	4b11      	ldr	r3, [pc, #68]	@ (800de90 <ecdsa_verify_restartable+0x1dc>)
 800de4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800de4c:	e000      	b.n	800de50 <ecdsa_verify_restartable+0x19c>
    }

cleanup:
 800de4e:	bf00      	nop
    mbedtls_ecp_point_free( &R );
 800de50:	f107 0310 	add.w	r3, r7, #16
 800de54:	4618      	mov	r0, r3
 800de56:	f000 f8d1 	bl	800dffc <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 800de5a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800de5e:	4618      	mov	r0, r3
 800de60:	f7fc f9b8 	bl	800a1d4 <mbedtls_mpi_free>
 800de64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fc f9b3 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 800de6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800de72:	4618      	mov	r0, r3
 800de74:	f7fc f9ae 	bl	800a1d4 <mbedtls_mpi_free>
 800de78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fc f9a9 	bl	800a1d4 <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
 800de82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800de84:	4618      	mov	r0, r3
 800de86:	3770      	adds	r7, #112	@ 0x70
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	ffffb080 	.word	0xffffb080
 800de90:	ffffb200 	.word	0xffffb200

0800de94 <mbedtls_ecdsa_verify>:
int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
                          const unsigned char *buf, size_t blen,
                          const mbedtls_ecp_point *Q,
                          const mbedtls_mpi *r,
                          const mbedtls_mpi *s)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b088      	sub	sp, #32
 800de98:	af04      	add	r7, sp, #16
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
 800dea0:	603b      	str	r3, [r7, #0]
    ECDSA_VALIDATE_RET( Q   != NULL );
    ECDSA_VALIDATE_RET( r   != NULL );
    ECDSA_VALIDATE_RET( s   != NULL );
    ECDSA_VALIDATE_RET( buf != NULL || blen == 0 );

    return( ecdsa_verify_restartable( grp, buf, blen, Q, r, s, NULL ) );
 800dea2:	2300      	movs	r3, #0
 800dea4:	9302      	str	r3, [sp, #8]
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	9301      	str	r3, [sp, #4]
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	68b9      	ldr	r1, [r7, #8]
 800deb4:	68f8      	ldr	r0, [r7, #12]
 800deb6:	f7ff fefd 	bl	800dcb4 <ecdsa_verify_restartable>
 800deba:	4603      	mov	r3, r0
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <mbedtls_ecdsa_init>:

/*
 * Initialize context
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 f87f 	bl	800dfd0 <mbedtls_ecp_keypair_init>
}
 800ded2:	bf00      	nop
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <mbedtls_ecdsa_free>:

/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b082      	sub	sp, #8
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d003      	beq.n	800def0 <mbedtls_ecdsa_free+0x16>
        return;

    mbedtls_ecp_keypair_free( ctx );
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f8ed 	bl	800e0c8 <mbedtls_ecp_keypair_free>
 800deee:	e000      	b.n	800def2 <mbedtls_ecdsa_free+0x18>
        return;
 800def0:	bf00      	nop
}
 800def2:	3708      	adds	r7, #8
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <ecp_get_type>:

/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
    if( grp->G.X.p == NULL )
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df04:	2b00      	cmp	r3, #0
 800df06:	d101      	bne.n	800df0c <ecp_get_type+0x14>
        return( ECP_TYPE_NONE );
 800df08:	2300      	movs	r3, #0
 800df0a:	e006      	b.n	800df1a <ecp_get_type+0x22>

    if( grp->G.Y.p == NULL )
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df10:	2b00      	cmp	r3, #0
 800df12:	d101      	bne.n	800df18 <ecp_get_type+0x20>
        return( ECP_TYPE_MONTGOMERY );
 800df14:	2302      	movs	r3, #2
 800df16:	e000      	b.n	800df1a <ecp_get_type+0x22>
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 800df18:	2301      	movs	r3, #1
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	370c      	adds	r7, #12
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr

0800df26 <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
 800df26:	b580      	push	{r7, lr}
 800df28:	b082      	sub	sp, #8
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	4618      	mov	r0, r3
 800df32:	f7fc f93c 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	330c      	adds	r3, #12
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fc f937 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	3318      	adds	r3, #24
 800df44:	4618      	mov	r0, r3
 800df46:	f7fc f932 	bl	800a1ae <mbedtls_mpi_init>
}
 800df4a:	bf00      	nop
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b082      	sub	sp, #8
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2200      	movs	r2, #0
 800df5e:	701a      	strb	r2, [r3, #0]
    mbedtls_mpi_init( &grp->P );
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	3304      	adds	r3, #4
 800df64:	4618      	mov	r0, r3
 800df66:	f7fc f922 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3310      	adds	r3, #16
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fc f91d 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	331c      	adds	r3, #28
 800df78:	4618      	mov	r0, r3
 800df7a:	f7fc f918 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	3328      	adds	r3, #40	@ 0x28
 800df82:	4618      	mov	r0, r3
 800df84:	f7ff ffcf 	bl	800df26 <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	334c      	adds	r3, #76	@ 0x4c
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fc f90e 	bl	800a1ae <mbedtls_mpi_init>
    grp->pbits = 0;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	659a      	str	r2, [r3, #88]	@ 0x58
    grp->nbits = 0;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2200      	movs	r2, #0
 800df9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    grp->h = 0;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	661a      	str	r2, [r3, #96]	@ 0x60
    grp->modp = NULL;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	665a      	str	r2, [r3, #100]	@ 0x64
    grp->t_pre = NULL;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2200      	movs	r2, #0
 800dfae:	669a      	str	r2, [r3, #104]	@ 0x68
    grp->t_post = NULL;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	66da      	str	r2, [r3, #108]	@ 0x6c
    grp->t_data = NULL;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	671a      	str	r2, [r3, #112]	@ 0x70
    grp->T = NULL;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	675a      	str	r2, [r3, #116]	@ 0x74
    grp->T_size = 0;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	679a      	str	r2, [r3, #120]	@ 0x78
}
 800dfc8:	bf00      	nop
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f7ff ffb9 	bl	800df52 <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	337c      	adds	r3, #124	@ 0x7c
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fc f8e2 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	3388      	adds	r3, #136	@ 0x88
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff ff99 	bl	800df26 <mbedtls_ecp_point_init>
}
 800dff4:	bf00      	nop
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
    if( pt == NULL )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d00e      	beq.n	800e028 <mbedtls_ecp_point_free+0x2c>
        return;

    mbedtls_mpi_free( &( pt->X ) );
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fc f8e1 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	330c      	adds	r3, #12
 800e016:	4618      	mov	r0, r3
 800e018:	f7fc f8dc 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	3318      	adds	r3, #24
 800e020:	4618      	mov	r0, r3
 800e022:	f7fc f8d7 	bl	800a1d4 <mbedtls_mpi_free>
 800e026:	e000      	b.n	800e02a <mbedtls_ecp_point_free+0x2e>
        return;
 800e028:	bf00      	nop
}
 800e02a:	3708      	adds	r7, #8
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
    size_t i;

    if( grp == NULL )
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d040      	beq.n	800e0c0 <mbedtls_ecp_group_free+0x90>
        return;

    if( grp->h != 1 )
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e042:	2b01      	cmp	r3, #1
 800e044:	d018      	beq.n	800e078 <mbedtls_ecp_group_free+0x48>
    {
        mbedtls_mpi_free( &grp->P );
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	3304      	adds	r3, #4
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7fc f8c2 	bl	800a1d4 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	3310      	adds	r3, #16
 800e054:	4618      	mov	r0, r3
 800e056:	f7fc f8bd 	bl	800a1d4 <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	331c      	adds	r3, #28
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fc f8b8 	bl	800a1d4 <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	3328      	adds	r3, #40	@ 0x28
 800e068:	4618      	mov	r0, r3
 800e06a:	f7ff ffc7 	bl	800dffc <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	334c      	adds	r3, #76	@ 0x4c
 800e072:	4618      	mov	r0, r3
 800e074:	f7fc f8ae 	bl	800a1d4 <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d01a      	beq.n	800e0b6 <mbedtls_ecp_group_free+0x86>
    {
        for( i = 0; i < grp->T_size; i++ )
 800e080:	2300      	movs	r3, #0
 800e082:	60fb      	str	r3, [r7, #12]
 800e084:	e00d      	b.n	800e0a2 <mbedtls_ecp_group_free+0x72>
            mbedtls_ecp_point_free( &grp->T[i] );
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 800e08a:	68fa      	ldr	r2, [r7, #12]
 800e08c:	4613      	mov	r3, r2
 800e08e:	00db      	lsls	r3, r3, #3
 800e090:	4413      	add	r3, r2
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	440b      	add	r3, r1
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff ffb0 	bl	800dffc <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	3301      	adds	r3, #1
 800e0a0:	60fb      	str	r3, [r7, #12]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e0a6:	68fa      	ldr	r2, [r7, #12]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d3ec      	bcc.n	800e086 <mbedtls_ecp_group_free+0x56>
        mbedtls_free( grp->T );
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f007 fb5d 	bl	8015770 <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 800e0b6:	217c      	movs	r1, #124	@ 0x7c
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f005 fb33 	bl	8013724 <mbedtls_platform_zeroize>
 800e0be:	e000      	b.n	800e0c2 <mbedtls_ecp_group_free+0x92>
        return;
 800e0c0:	bf00      	nop
}
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
    if( key == NULL )
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00e      	beq.n	800e0f4 <mbedtls_ecp_keypair_free+0x2c>
        return;

    mbedtls_ecp_group_free( &key->grp );
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7ff ffa9 	bl	800e030 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	337c      	adds	r3, #124	@ 0x7c
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fc f876 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3388      	adds	r3, #136	@ 0x88
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7ff ff85 	bl	800dffc <mbedtls_ecp_point_free>
 800e0f2:	e000      	b.n	800e0f6 <mbedtls_ecp_keypair_free+0x2e>
        return;
 800e0f4:	bf00      	nop
}
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	683a      	ldr	r2, [r7, #0]
 800e10a:	4611      	mov	r1, r2
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7fc f930 	bl	800a372 <mbedtls_mpi_copy>
 800e112:	60f8      	str	r0, [r7, #12]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d119      	bne.n	800e14e <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f103 020c 	add.w	r2, r3, #12
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	330c      	adds	r3, #12
 800e124:	4619      	mov	r1, r3
 800e126:	4610      	mov	r0, r2
 800e128:	f7fc f923 	bl	800a372 <mbedtls_mpi_copy>
 800e12c:	60f8      	str	r0, [r7, #12]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10c      	bne.n	800e14e <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f103 0218 	add.w	r2, r3, #24
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	3318      	adds	r3, #24
 800e13e:	4619      	mov	r1, r3
 800e140:	4610      	mov	r0, r2
 800e142:	f7fc f916 	bl	800a372 <mbedtls_mpi_copy>
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b00      	cmp	r3, #0

cleanup:
 800e14c:	bf00      	nop
    return( ret );
 800e14e:	68fb      	ldr	r3, [r7, #12]
}
 800e150:	4618      	mov	r0, r3
 800e152:	3710      	adds	r7, #16
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}

0800e158 <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2101      	movs	r1, #1
 800e164:	4618      	mov	r0, r3
 800e166:	f7fc fa63 	bl	800a630 <mbedtls_mpi_lset>
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d113      	bne.n	800e19a <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	330c      	adds	r3, #12
 800e176:	2101      	movs	r1, #1
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fc fa59 	bl	800a630 <mbedtls_mpi_lset>
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d109      	bne.n	800e19a <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	3318      	adds	r3, #24
 800e18a:	2100      	movs	r1, #0
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7fc fa4f 	bl	800a630 <mbedtls_mpi_lset>
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0

cleanup:
 800e198:	bf00      	nop
    return( ret );
 800e19a:	68fb      	ldr	r3, [r7, #12]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	3318      	adds	r3, #24
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fc ff77 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	bf0c      	ite	eq
 800e1be:	2301      	moveq	r3, #1
 800e1c0:	2300      	movne	r3, #0
 800e1c2:	b2db      	uxtb	r3, r3
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <ecp_modp>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b084      	sub	sp, #16
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
    int ret;

    if( grp->modp == NULL )
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d108      	bne.n	800e1f0 <ecp_modp+0x24>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	6879      	ldr	r1, [r7, #4]
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7ff f992 	bl	800d510 <mbedtls_mpi_mod_mpi>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	e04b      	b.n	800e288 <ecp_modp+0xbc>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	da06      	bge.n	800e206 <ecp_modp+0x3a>
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7fc ff53 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d108      	bne.n	800e218 <ecp_modp+0x4c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7fc fb08 	bl	800a81c <mbedtls_mpi_bitlen>
 800e20c:	4602      	mov	r2, r0
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e212:	005b      	lsls	r3, r3, #1
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800e214:	429a      	cmp	r2, r3
 800e216:	d901      	bls.n	800e21c <ecp_modp+0x50>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e218:	4b1d      	ldr	r3, [pc, #116]	@ (800e290 <ecp_modp+0xc4>)
 800e21a:	e035      	b.n	800e288 <ecp_modp+0xbc>
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	4798      	blx	r3
 800e224:	60f8      	str	r0, [r7, #12]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d12c      	bne.n	800e286 <ecp_modp+0xba>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800e22c:	e00a      	b.n	800e244 <ecp_modp+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	3304      	adds	r3, #4
 800e232:	461a      	mov	r2, r3
 800e234:	6879      	ldr	r1, [r7, #4]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7fd f8c0 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800e23c:	60f8      	str	r0, [r7, #12]
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d120      	bne.n	800e286 <ecp_modp+0xba>
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	da12      	bge.n	800e272 <ecp_modp+0xa6>
 800e24c:	2100      	movs	r1, #0
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7fc ff29 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d1e9      	bne.n	800e22e <ecp_modp+0x62>

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800e25a:	e00a      	b.n	800e272 <ecp_modp+0xa6>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	3304      	adds	r3, #4
 800e260:	461a      	mov	r2, r3
 800e262:	6879      	ldr	r1, [r7, #4]
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f7fd f849 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d109      	bne.n	800e286 <ecp_modp+0xba>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	3304      	adds	r3, #4
 800e276:	4619      	mov	r1, r3
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7fc fe79 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	daeb      	bge.n	800e25c <ecp_modp+0x90>

cleanup:
 800e284:	bf00      	nop
    return( ret );
 800e286:	68fb      	ldr	r3, [r7, #12]
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}
 800e290:	ffffb080 	.word	0xffffb080

0800e294 <ecp_normalize_jac>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b08a      	sub	sp, #40	@ 0x28
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	3318      	adds	r3, #24
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fc fefe 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d101      	bne.n	800e2b4 <ecp_normalize_jac+0x20>
        return( 0 );
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	e09b      	b.n	800e3ec <ecp_normalize_jac+0x158>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800e2b4:	f107 0318 	add.w	r3, r7, #24
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fb ff78 	bl	800a1ae <mbedtls_mpi_init>
 800e2be:	f107 030c 	add.w	r3, r7, #12
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fb ff73 	bl	800a1ae <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	f103 0118 	add.w	r1, r3, #24
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	1d1a      	adds	r2, r3, #4
 800e2d2:	f107 0318 	add.w	r3, r7, #24
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7ff fa86 	bl	800d7e8 <mbedtls_mpi_inv_mod>
 800e2dc:	6278      	str	r0, [r7, #36]	@ 0x24
 800e2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d178      	bne.n	800e3d6 <ecp_normalize_jac+0x142>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 800e2e4:	f107 0218 	add.w	r2, r7, #24
 800e2e8:	f107 0118 	add.w	r1, r7, #24
 800e2ec:	f107 030c 	add.w	r3, r7, #12
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe fcdc 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e2f6:	6278      	str	r0, [r7, #36]	@ 0x24
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d16b      	bne.n	800e3d6 <ecp_normalize_jac+0x142>
 800e2fe:	f107 030c 	add.w	r3, r7, #12
 800e302:	6879      	ldr	r1, [r7, #4]
 800e304:	4618      	mov	r0, r3
 800e306:	f7ff ff61 	bl	800e1cc <ecp_modp>
 800e30a:	6278      	str	r0, [r7, #36]	@ 0x24
 800e30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d161      	bne.n	800e3d6 <ecp_normalize_jac+0x142>
 800e312:	4b38      	ldr	r3, [pc, #224]	@ (800e3f4 <ecp_normalize_jac+0x160>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	3301      	adds	r3, #1
 800e318:	4a36      	ldr	r2, [pc, #216]	@ (800e3f4 <ecp_normalize_jac+0x160>)
 800e31a:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	6839      	ldr	r1, [r7, #0]
 800e320:	f107 020c 	add.w	r2, r7, #12
 800e324:	4618      	mov	r0, r3
 800e326:	f7fe fcc2 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e32a:	6278      	str	r0, [r7, #36]	@ 0x24
 800e32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d151      	bne.n	800e3d6 <ecp_normalize_jac+0x142>
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	6879      	ldr	r1, [r7, #4]
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff ff48 	bl	800e1cc <ecp_modp>
 800e33c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e340:	2b00      	cmp	r3, #0
 800e342:	d148      	bne.n	800e3d6 <ecp_normalize_jac+0x142>
 800e344:	4b2b      	ldr	r3, [pc, #172]	@ (800e3f4 <ecp_normalize_jac+0x160>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3301      	adds	r3, #1
 800e34a:	4a2a      	ldr	r2, [pc, #168]	@ (800e3f4 <ecp_normalize_jac+0x160>)
 800e34c:	6013      	str	r3, [r2, #0]

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	f103 000c 	add.w	r0, r3, #12
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	330c      	adds	r3, #12
 800e358:	f107 020c 	add.w	r2, r7, #12
 800e35c:	4619      	mov	r1, r3
 800e35e:	f7fe fca6 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e362:	6278      	str	r0, [r7, #36]	@ 0x24
 800e364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e366:	2b00      	cmp	r3, #0
 800e368:	d135      	bne.n	800e3d6 <ecp_normalize_jac+0x142>
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	330c      	adds	r3, #12
 800e36e:	6879      	ldr	r1, [r7, #4]
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff ff2b 	bl	800e1cc <ecp_modp>
 800e376:	6278      	str	r0, [r7, #36]	@ 0x24
 800e378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d12b      	bne.n	800e3d6 <ecp_normalize_jac+0x142>
 800e37e:	4b1d      	ldr	r3, [pc, #116]	@ (800e3f4 <ecp_normalize_jac+0x160>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	3301      	adds	r3, #1
 800e384:	4a1b      	ldr	r2, [pc, #108]	@ (800e3f4 <ecp_normalize_jac+0x160>)
 800e386:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	f103 000c 	add.w	r0, r3, #12
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	330c      	adds	r3, #12
 800e392:	f107 0218 	add.w	r2, r7, #24
 800e396:	4619      	mov	r1, r3
 800e398:	f7fe fc89 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e39c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d118      	bne.n	800e3d6 <ecp_normalize_jac+0x142>
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	330c      	adds	r3, #12
 800e3a8:	6879      	ldr	r1, [r7, #4]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7ff ff0e 	bl	800e1cc <ecp_modp>
 800e3b0:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d10e      	bne.n	800e3d6 <ecp_normalize_jac+0x142>
 800e3b8:	4b0e      	ldr	r3, [pc, #56]	@ (800e3f4 <ecp_normalize_jac+0x160>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	4a0d      	ldr	r2, [pc, #52]	@ (800e3f4 <ecp_normalize_jac+0x160>)
 800e3c0:	6013      	str	r3, [r2, #0]

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	3318      	adds	r3, #24
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fc f931 	bl	800a630 <mbedtls_mpi_lset>
 800e3ce:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d2:	2b00      	cmp	r3, #0

cleanup:
 800e3d4:	bf00      	nop

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800e3d6:	f107 0318 	add.w	r3, r7, #24
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fb fefa 	bl	800a1d4 <mbedtls_mpi_free>
 800e3e0:	f107 030c 	add.w	r3, r7, #12
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fb fef5 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3728      	adds	r7, #40	@ 0x28
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	2400257c 	.word	0x2400257c

0800e3f8 <ecp_normalize_jac_many>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b090      	sub	sp, #64	@ 0x40
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b01      	cmp	r3, #1
 800e408:	d807      	bhi.n	800e41a <ecp_normalize_jac_many+0x22>
        return( ecp_normalize_jac( grp, *T ) );
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4619      	mov	r1, r3
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	f7ff ff3f 	bl	800e294 <ecp_normalize_jac>
 800e416:	4603      	mov	r3, r0
 800e418:	e1de      	b.n	800e7d8 <ecp_normalize_jac_many+0x3e0>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 800e41a:	210c      	movs	r1, #12
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f007 f98b 	bl	8015738 <calloc>
 800e422:	4603      	mov	r3, r0
 800e424:	637b      	str	r3, [r7, #52]	@ 0x34
 800e426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <ecp_normalize_jac_many+0x38>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 800e42c:	4b4b      	ldr	r3, [pc, #300]	@ (800e55c <ecp_normalize_jac_many+0x164>)
 800e42e:	e1d3      	b.n	800e7d8 <ecp_normalize_jac_many+0x3e0>

    for( i = 0; i < T_size; i++ )
 800e430:	2300      	movs	r3, #0
 800e432:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e434:	e00d      	b.n	800e452 <ecp_normalize_jac_many+0x5a>
        mbedtls_mpi_init( &c[i] );
 800e436:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e438:	4613      	mov	r3, r2
 800e43a:	005b      	lsls	r3, r3, #1
 800e43c:	4413      	add	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	461a      	mov	r2, r3
 800e442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e444:	4413      	add	r3, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f7fb feb1 	bl	800a1ae <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
 800e44c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e44e:	3301      	adds	r3, #1
 800e450:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	429a      	cmp	r2, r3
 800e458:	d3ed      	bcc.n	800e436 <ecp_normalize_jac_many+0x3e>

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800e45a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fb fea5 	bl	800a1ae <mbedtls_mpi_init>
 800e464:	f107 031c 	add.w	r3, r7, #28
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fb fea0 	bl	800a1ae <mbedtls_mpi_init>
 800e46e:	f107 0310 	add.w	r3, r7, #16
 800e472:	4618      	mov	r0, r3
 800e474:	f7fb fe9b 	bl	800a1ae <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3318      	adds	r3, #24
 800e47e:	4619      	mov	r1, r3
 800e480:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e482:	f7fb ff76 	bl	800a372 <mbedtls_mpi_copy>
 800e486:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f040 817c 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
    for( i = 1; i < T_size; i++ )
 800e490:	2301      	movs	r3, #1
 800e492:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e494:	e036      	b.n	800e504 <ecp_normalize_jac_many+0x10c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 800e496:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e498:	4613      	mov	r3, r2
 800e49a:	005b      	lsls	r3, r3, #1
 800e49c:	4413      	add	r3, r2
 800e49e:	009b      	lsls	r3, r3, #2
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4a4:	1898      	adds	r0, r3, r2
 800e4a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	4413      	add	r3, r2
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	3b0c      	subs	r3, #12
 800e4b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4b4:	18d1      	adds	r1, r2, r3
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	4413      	add	r3, r2
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	3318      	adds	r3, #24
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	f7fe fbf3 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e4c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f040 815b 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
        MOD_MUL( c[i] );
 800e4d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	4413      	add	r3, r2
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	461a      	mov	r2, r3
 800e4de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4e0:	4413      	add	r3, r2
 800e4e2:	68f9      	ldr	r1, [r7, #12]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7ff fe71 	bl	800e1cc <ecp_modp>
 800e4ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f040 814a 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
 800e4f4:	4b1a      	ldr	r3, [pc, #104]	@ (800e560 <ecp_normalize_jac_many+0x168>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	4a19      	ldr	r2, [pc, #100]	@ (800e560 <ecp_normalize_jac_many+0x168>)
 800e4fc:	6013      	str	r3, [r2, #0]
    for( i = 1; i < T_size; i++ )
 800e4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e500:	3301      	adds	r3, #1
 800e502:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e504:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	429a      	cmp	r2, r3
 800e50a:	d3c4      	bcc.n	800e496 <ecp_normalize_jac_many+0x9e>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	4613      	mov	r3, r2
 800e510:	005b      	lsls	r3, r3, #1
 800e512:	4413      	add	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	3b0c      	subs	r3, #12
 800e518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e51a:	18d1      	adds	r1, r2, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	1d1a      	adds	r2, r3, #4
 800e520:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e524:	4618      	mov	r0, r3
 800e526:	f7ff f95f 	bl	800d7e8 <mbedtls_mpi_inv_mod>
 800e52a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e52c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f040 812a 	bne.w	800e788 <ecp_normalize_jac_many+0x390>

    for( i = T_size - 1; ; i-- )
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	3b01      	subs	r3, #1
 800e538:	63bb      	str	r3, [r7, #56]	@ 0x38
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
 800e53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d111      	bne.n	800e564 <ecp_normalize_jac_many+0x16c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 800e540:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e544:	f107 031c 	add.w	r3, r7, #28
 800e548:	4611      	mov	r1, r2
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fb ff11 	bl	800a372 <mbedtls_mpi_copy>
 800e550:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e554:	2b00      	cmp	r3, #0
 800e556:	d04c      	beq.n	800e5f2 <ecp_normalize_jac_many+0x1fa>
 800e558:	e116      	b.n	800e788 <ecp_normalize_jac_many+0x390>
 800e55a:	bf00      	nop
 800e55c:	ffffb280 	.word	0xffffb280
 800e560:	2400257c 	.word	0x2400257c
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 800e564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e566:	4613      	mov	r3, r2
 800e568:	005b      	lsls	r3, r3, #1
 800e56a:	4413      	add	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	3b0c      	subs	r3, #12
 800e570:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e572:	441a      	add	r2, r3
 800e574:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e578:	f107 031c 	add.w	r3, r7, #28
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7fe fb96 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e582:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e586:	2b00      	cmp	r3, #0
 800e588:	f040 80fe 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
 800e58c:	f107 031c 	add.w	r3, r7, #28
 800e590:	68f9      	ldr	r1, [r7, #12]
 800e592:	4618      	mov	r0, r3
 800e594:	f7ff fe1a 	bl	800e1cc <ecp_modp>
 800e598:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f040 80f3 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
 800e5a2:	4b8f      	ldr	r3, [pc, #572]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	4a8d      	ldr	r2, [pc, #564]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e5aa:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ae:	009b      	lsls	r3, r3, #2
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f103 0218 	add.w	r2, r3, #24
 800e5ba:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e5be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fe fb73 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e5c8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e5ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	f040 80db 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
 800e5d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e5d6:	68f9      	ldr	r1, [r7, #12]
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7ff fdf7 	bl	800e1cc <ecp_modp>
 800e5de:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f040 80d0 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
 800e5e8:	4b7d      	ldr	r3, [pc, #500]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	4a7c      	ldr	r2, [pc, #496]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e5f0:	6013      	str	r3, [r2, #0]
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 800e5f2:	f107 021c 	add.w	r2, r7, #28
 800e5f6:	f107 011c 	add.w	r1, r7, #28
 800e5fa:	f107 0310 	add.w	r3, r7, #16
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fe fb55 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e604:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f040 80bd 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
 800e60e:	f107 0310 	add.w	r3, r7, #16
 800e612:	68f9      	ldr	r1, [r7, #12]
 800e614:	4618      	mov	r0, r3
 800e616:	f7ff fdd9 	bl	800e1cc <ecp_modp>
 800e61a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e61c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f040 80b2 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
 800e624:	4b6e      	ldr	r3, [pc, #440]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	3301      	adds	r3, #1
 800e62a:	4a6d      	ldr	r2, [pc, #436]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e62c:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 800e62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e630:	009b      	lsls	r3, r3, #2
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	4413      	add	r3, r2
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4618      	mov	r0, r3
 800e63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	4413      	add	r3, r2
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4619      	mov	r1, r3
 800e646:	f107 0310 	add.w	r3, r7, #16
 800e64a:	461a      	mov	r2, r3
 800e64c:	f7fe fb2f 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e650:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e654:	2b00      	cmp	r3, #0
 800e656:	f040 8097 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
 800e65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	4413      	add	r3, r2
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	68f9      	ldr	r1, [r7, #12]
 800e666:	4618      	mov	r0, r3
 800e668:	f7ff fdb0 	bl	800e1cc <ecp_modp>
 800e66c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e670:	2b00      	cmp	r3, #0
 800e672:	f040 8089 	bne.w	800e788 <ecp_normalize_jac_many+0x390>
 800e676:	4b5a      	ldr	r3, [pc, #360]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	3301      	adds	r3, #1
 800e67c:	4a58      	ldr	r2, [pc, #352]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e67e:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 800e680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	4413      	add	r3, r2
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f103 000c 	add.w	r0, r3, #12
 800e68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e690:	009b      	lsls	r3, r3, #2
 800e692:	68ba      	ldr	r2, [r7, #8]
 800e694:	4413      	add	r3, r2
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	330c      	adds	r3, #12
 800e69a:	f107 0210 	add.w	r2, r7, #16
 800e69e:	4619      	mov	r1, r3
 800e6a0:	f7fe fb05 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e6a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d16d      	bne.n	800e788 <ecp_normalize_jac_many+0x390>
 800e6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	68ba      	ldr	r2, [r7, #8]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	330c      	adds	r3, #12
 800e6b8:	68f9      	ldr	r1, [r7, #12]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff fd86 	bl	800e1cc <ecp_modp>
 800e6c0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e6c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d15f      	bne.n	800e788 <ecp_normalize_jac_many+0x390>
 800e6c8:	4b45      	ldr	r3, [pc, #276]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	4a44      	ldr	r2, [pc, #272]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e6d0:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 800e6d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	68ba      	ldr	r2, [r7, #8]
 800e6d8:	4413      	add	r3, r2
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f103 000c 	add.w	r0, r3, #12
 800e6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	4413      	add	r3, r2
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	330c      	adds	r3, #12
 800e6ec:	f107 021c 	add.w	r2, r7, #28
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	f7fe fadc 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e6f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d144      	bne.n	800e788 <ecp_normalize_jac_many+0x390>
 800e6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	68ba      	ldr	r2, [r7, #8]
 800e704:	4413      	add	r3, r2
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	330c      	adds	r3, #12
 800e70a:	68f9      	ldr	r1, [r7, #12]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7ff fd5d 	bl	800e1cc <ecp_modp>
 800e712:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e716:	2b00      	cmp	r3, #0
 800e718:	d136      	bne.n	800e788 <ecp_normalize_jac_many+0x390>
 800e71a:	4b31      	ldr	r3, [pc, #196]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	3301      	adds	r3, #1
 800e720:	4a2f      	ldr	r2, [pc, #188]	@ (800e7e0 <ecp_normalize_jac_many+0x3e8>)
 800e722:	6013      	str	r3, [r2, #0]
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 800e724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	4413      	add	r3, r2
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	461a      	mov	r2, r3
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	689b      	ldr	r3, [r3, #8]
 800e734:	4619      	mov	r1, r3
 800e736:	4610      	mov	r0, r2
 800e738:	f7fb fdb5 	bl	800a2a6 <mbedtls_mpi_shrink>
 800e73c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e740:	2b00      	cmp	r3, #0
 800e742:	d121      	bne.n	800e788 <ecp_normalize_jac_many+0x390>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 800e744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e746:	009b      	lsls	r3, r3, #2
 800e748:	68ba      	ldr	r2, [r7, #8]
 800e74a:	4413      	add	r3, r2
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f103 020c 	add.w	r2, r3, #12
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	689b      	ldr	r3, [r3, #8]
 800e756:	4619      	mov	r1, r3
 800e758:	4610      	mov	r0, r2
 800e75a:	f7fb fda4 	bl	800a2a6 <mbedtls_mpi_shrink>
 800e75e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e762:	2b00      	cmp	r3, #0
 800e764:	d110      	bne.n	800e788 <ecp_normalize_jac_many+0x390>
        mbedtls_mpi_free( &T[i]->Z );
 800e766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	4413      	add	r3, r2
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	3318      	adds	r3, #24
 800e772:	4618      	mov	r0, r3
 800e774:	f7fb fd2e 	bl	800a1d4 <mbedtls_mpi_free>

        if( i == 0 )
 800e778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <ecp_normalize_jac_many+0x38e>
    for( i = T_size - 1; ; i-- )
 800e77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e780:	3b01      	subs	r3, #1
 800e782:	63bb      	str	r3, [r7, #56]	@ 0x38
        if( i == 0 ) {
 800e784:	e6d9      	b.n	800e53a <ecp_normalize_jac_many+0x142>
            break;
 800e786:	bf00      	nop
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800e788:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fb fd21 	bl	800a1d4 <mbedtls_mpi_free>
 800e792:	f107 031c 	add.w	r3, r7, #28
 800e796:	4618      	mov	r0, r3
 800e798:	f7fb fd1c 	bl	800a1d4 <mbedtls_mpi_free>
 800e79c:	f107 0310 	add.w	r3, r7, #16
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fb fd17 	bl	800a1d4 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e7aa:	e00d      	b.n	800e7c8 <ecp_normalize_jac_many+0x3d0>
        mbedtls_mpi_free( &c[i] );
 800e7ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	005b      	lsls	r3, r3, #1
 800e7b2:	4413      	add	r3, r2
 800e7b4:	009b      	lsls	r3, r3, #2
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7ba:	4413      	add	r3, r2
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f7fb fd09 	bl	800a1d4 <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e7c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d3ed      	bcc.n	800e7ac <ecp_normalize_jac_many+0x3b4>
    mbedtls_free( c );
 800e7d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e7d2:	f006 ffcd 	bl	8015770 <free>

    return( ret );
 800e7d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3740      	adds	r7, #64	@ 0x40
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	2400257c 	.word	0x2400257c

0800e7e4 <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b08a      	sub	sp, #40	@ 0x28
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	71fb      	strb	r3, [r7, #7]
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
 800e7f2:	f107 0314 	add.w	r3, r7, #20
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7fb fcd9 	bl	800a1ae <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	1d19      	adds	r1, r3, #4
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	f103 020c 	add.w	r2, r3, #12
 800e806:	f107 0314 	add.w	r3, r7, #20
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fc fe1a 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800e810:	6278      	str	r0, [r7, #36]	@ 0x24
 800e812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e814:	2b00      	cmp	r3, #0
 800e816:	d11e      	bne.n	800e856 <ecp_safe_invert_jac+0x72>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	330c      	adds	r3, #12
 800e81c:	2100      	movs	r1, #0
 800e81e:	4618      	mov	r0, r3
 800e820:	f7fc fc41 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	bf14      	ite	ne
 800e82a:	2301      	movne	r3, #1
 800e82c:	2300      	moveq	r3, #0
 800e82e:	b2db      	uxtb	r3, r3
 800e830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	f103 000c 	add.w	r0, r3, #12
 800e83a:	79fa      	ldrb	r2, [r7, #7]
 800e83c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e840:	4013      	ands	r3, r2
 800e842:	b2da      	uxtb	r2, r3
 800e844:	f107 0314 	add.w	r3, r7, #20
 800e848:	4619      	mov	r1, r3
 800e84a:	f7fb fdee 	bl	800a42a <mbedtls_mpi_safe_cond_assign>
 800e84e:	6278      	str	r0, [r7, #36]	@ 0x24
 800e850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e852:	2b00      	cmp	r3, #0

cleanup:
 800e854:	bf00      	nop
    mbedtls_mpi_free( &mQY );
 800e856:	f107 0314 	add.w	r3, r7, #20
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7fb fcba 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800e860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e862:	4618      	mov	r0, r3
 800e864:	3728      	adds	r7, #40	@ 0x28
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
	...

0800e86c <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b092      	sub	sp, #72	@ 0x48
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_mpi M, S, T, U;

#if defined(MBEDTLS_SELF_TEST)
    dbl_count++;
 800e878:	4b7e      	ldr	r3, [pc, #504]	@ (800ea74 <ecp_double_jac+0x208>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	3301      	adds	r3, #1
 800e87e:	4a7d      	ldr	r2, [pc, #500]	@ (800ea74 <ecp_double_jac+0x208>)
 800e880:	6013      	str	r3, [r2, #0]
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 800e882:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800e886:	4618      	mov	r0, r3
 800e888:	f7fb fc91 	bl	800a1ae <mbedtls_mpi_init>
 800e88c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e890:	4618      	mov	r0, r3
 800e892:	f7fb fc8c 	bl	800a1ae <mbedtls_mpi_init>
 800e896:	f107 0320 	add.w	r3, r7, #32
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fb fc87 	bl	800a1ae <mbedtls_mpi_init>
 800e8a0:	f107 0314 	add.w	r3, r7, #20
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fb fc82 	bl	800a1ae <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	699b      	ldr	r3, [r3, #24]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f040 80b5 	bne.w	800ea1e <ecp_double_jac+0x1b2>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f103 0118 	add.w	r1, r3, #24
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f103 0218 	add.w	r2, r3, #24
 800e8c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f7fe f9f2 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e8ca:	6478      	str	r0, [r7, #68]	@ 0x44
 800e8cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f040 838b 	bne.w	800efea <ecp_double_jac+0x77e>
 800e8d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e8d8:	68f9      	ldr	r1, [r7, #12]
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7ff fc76 	bl	800e1cc <ecp_modp>
 800e8e0:	6478      	str	r0, [r7, #68]	@ 0x44
 800e8e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f040 8380 	bne.w	800efea <ecp_double_jac+0x77e>
 800e8ea:	4b63      	ldr	r3, [pc, #396]	@ (800ea78 <ecp_double_jac+0x20c>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	3301      	adds	r3, #1
 800e8f0:	4a61      	ldr	r2, [pc, #388]	@ (800ea78 <ecp_double_jac+0x20c>)
 800e8f2:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 800e8f4:	6879      	ldr	r1, [r7, #4]
 800e8f6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e8fa:	f107 0320 	add.w	r3, r7, #32
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fc fd5c 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800e904:	6478      	str	r0, [r7, #68]	@ 0x44
 800e906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f040 836e 	bne.w	800efea <ecp_double_jac+0x77e>
 800e90e:	e00d      	b.n	800e92c <ecp_double_jac+0xc0>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	1d1a      	adds	r2, r3, #4
 800e914:	f107 0120 	add.w	r1, r7, #32
 800e918:	f107 0320 	add.w	r3, r7, #32
 800e91c:	4618      	mov	r0, r3
 800e91e:	f7fc fced 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800e922:	6478      	str	r0, [r7, #68]	@ 0x44
 800e924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e926:	2b00      	cmp	r3, #0
 800e928:	f040 835f 	bne.w	800efea <ecp_double_jac+0x77e>
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	1d1a      	adds	r2, r3, #4
 800e930:	f107 0320 	add.w	r3, r7, #32
 800e934:	4611      	mov	r1, r2
 800e936:	4618      	mov	r0, r3
 800e938:	f7fc fb1a 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	dae6      	bge.n	800e910 <ecp_double_jac+0xa4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 800e942:	6879      	ldr	r1, [r7, #4]
 800e944:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e948:	f107 0314 	add.w	r3, r7, #20
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fc fd79 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800e952:	6478      	str	r0, [r7, #68]	@ 0x44
 800e954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e956:	2b00      	cmp	r3, #0
 800e958:	f040 8347 	bne.w	800efea <ecp_double_jac+0x77e>
 800e95c:	e00d      	b.n	800e97a <ecp_double_jac+0x10e>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	1d1a      	adds	r2, r3, #4
 800e962:	f107 0114 	add.w	r1, r7, #20
 800e966:	f107 0314 	add.w	r3, r7, #20
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fc fd26 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800e970:	6478      	str	r0, [r7, #68]	@ 0x44
 800e972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e974:	2b00      	cmp	r3, #0
 800e976:	f040 8338 	bne.w	800efea <ecp_double_jac+0x77e>
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	da08      	bge.n	800e992 <ecp_double_jac+0x126>
 800e980:	f107 0314 	add.w	r3, r7, #20
 800e984:	2100      	movs	r1, #0
 800e986:	4618      	mov	r0, r3
 800e988:	f7fc fb8d 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800e98c:	4603      	mov	r3, r0
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1e5      	bne.n	800e95e <ecp_double_jac+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 800e992:	f107 0214 	add.w	r2, r7, #20
 800e996:	f107 0120 	add.w	r1, r7, #32
 800e99a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7fe f985 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800e9a4:	6478      	str	r0, [r7, #68]	@ 0x44
 800e9a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f040 831e 	bne.w	800efea <ecp_double_jac+0x77e>
 800e9ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e9b2:	68f9      	ldr	r1, [r7, #12]
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7ff fc09 	bl	800e1cc <ecp_modp>
 800e9ba:	6478      	str	r0, [r7, #68]	@ 0x44
 800e9bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f040 8313 	bne.w	800efea <ecp_double_jac+0x77e>
 800e9c4:	4b2c      	ldr	r3, [pc, #176]	@ (800ea78 <ecp_double_jac+0x20c>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	4a2b      	ldr	r2, [pc, #172]	@ (800ea78 <ecp_double_jac+0x20c>)
 800e9cc:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800e9ce:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800e9d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800e9d6:	2203      	movs	r2, #3
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7fe fa11 	bl	800ce00 <mbedtls_mpi_mul_int>
 800e9de:	6478      	str	r0, [r7, #68]	@ 0x44
 800e9e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f040 8301 	bne.w	800efea <ecp_double_jac+0x77e>
 800e9e8:	e00d      	b.n	800ea06 <ecp_double_jac+0x19a>
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	1d1a      	adds	r2, r3, #4
 800e9ee:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800e9f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fc fc80 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800e9fc:	6478      	str	r0, [r7, #68]	@ 0x44
 800e9fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f040 82f2 	bne.w	800efea <ecp_double_jac+0x77e>
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	1d1a      	adds	r2, r3, #4
 800ea0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ea0e:	4611      	mov	r1, r2
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fc faad 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	dae6      	bge.n	800e9ea <ecp_double_jac+0x17e>
 800ea1c:	e0d6      	b.n	800ebcc <ecp_double_jac+0x360>
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 800ea1e:	6879      	ldr	r1, [r7, #4]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fe f941 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800ea2c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f040 82da 	bne.w	800efea <ecp_double_jac+0x77e>
 800ea36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ea3a:	68f9      	ldr	r1, [r7, #12]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7ff fbc5 	bl	800e1cc <ecp_modp>
 800ea42:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	f040 82cf 	bne.w	800efea <ecp_double_jac+0x77e>
 800ea4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea78 <ecp_double_jac+0x20c>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	3301      	adds	r3, #1
 800ea52:	4a09      	ldr	r2, [pc, #36]	@ (800ea78 <ecp_double_jac+0x20c>)
 800ea54:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800ea56:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ea5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ea5e:	2203      	movs	r2, #3
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7fe f9cd 	bl	800ce00 <mbedtls_mpi_mul_int>
 800ea66:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	f040 82bd 	bne.w	800efea <ecp_double_jac+0x77e>
 800ea70:	e012      	b.n	800ea98 <ecp_double_jac+0x22c>
 800ea72:	bf00      	nop
 800ea74:	24002578 	.word	0x24002578
 800ea78:	2400257c 	.word	0x2400257c
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	1d1a      	adds	r2, r3, #4
 800ea80:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ea84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ea88:	4618      	mov	r0, r3
 800ea8a:	f7fc fc37 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800ea8e:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	f040 82a9 	bne.w	800efea <ecp_double_jac+0x77e>
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	1d1a      	adds	r2, r3, #4
 800ea9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eaa0:	4611      	mov	r1, r2
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fc fa64 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	dae6      	bge.n	800ea7c <ecp_double_jac+0x210>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	3310      	adds	r3, #16
 800eab2:	2100      	movs	r1, #0
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7fc faf6 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 8085 	beq.w	800ebcc <ecp_double_jac+0x360>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f103 0118 	add.w	r1, r3, #24
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f103 0218 	add.w	r2, r3, #24
 800eace:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fe f8eb 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800ead8:	6478      	str	r0, [r7, #68]	@ 0x44
 800eada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f040 8284 	bne.w	800efea <ecp_double_jac+0x77e>
 800eae2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eae6:	68f9      	ldr	r1, [r7, #12]
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7ff fb6f 	bl	800e1cc <ecp_modp>
 800eaee:	6478      	str	r0, [r7, #68]	@ 0x44
 800eaf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f040 8279 	bne.w	800efea <ecp_double_jac+0x77e>
 800eaf8:	4bb0      	ldr	r3, [pc, #704]	@ (800edbc <ecp_double_jac+0x550>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	3301      	adds	r3, #1
 800eafe:	4aaf      	ldr	r2, [pc, #700]	@ (800edbc <ecp_double_jac+0x550>)
 800eb00:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 800eb02:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800eb06:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eb0a:	f107 0320 	add.w	r3, r7, #32
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fe f8cd 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800eb14:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	f040 8266 	bne.w	800efea <ecp_double_jac+0x77e>
 800eb1e:	f107 0320 	add.w	r3, r7, #32
 800eb22:	68f9      	ldr	r1, [r7, #12]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7ff fb51 	bl	800e1cc <ecp_modp>
 800eb2a:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f040 825b 	bne.w	800efea <ecp_double_jac+0x77e>
 800eb34:	4ba1      	ldr	r3, [pc, #644]	@ (800edbc <ecp_double_jac+0x550>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3301      	adds	r3, #1
 800eb3a:	4aa0      	ldr	r2, [pc, #640]	@ (800edbc <ecp_double_jac+0x550>)
 800eb3c:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f103 0210 	add.w	r2, r3, #16
 800eb44:	f107 0120 	add.w	r1, r7, #32
 800eb48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fe f8ae 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800eb52:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	f040 8247 	bne.w	800efea <ecp_double_jac+0x77e>
 800eb5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb60:	68f9      	ldr	r1, [r7, #12]
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7ff fb32 	bl	800e1cc <ecp_modp>
 800eb68:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f040 823c 	bne.w	800efea <ecp_double_jac+0x77e>
 800eb72:	4b92      	ldr	r3, [pc, #584]	@ (800edbc <ecp_double_jac+0x550>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	3301      	adds	r3, #1
 800eb78:	4a90      	ldr	r2, [pc, #576]	@ (800edbc <ecp_double_jac+0x550>)
 800eb7a:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 800eb7c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800eb80:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800eb84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fc fc17 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800eb8e:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	f040 8229 	bne.w	800efea <ecp_double_jac+0x77e>
 800eb98:	e00d      	b.n	800ebb6 <ecp_double_jac+0x34a>
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	1d1a      	adds	r2, r3, #4
 800eb9e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800eba2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fc fba8 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800ebac:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	f040 821a 	bne.w	800efea <ecp_double_jac+0x77e>
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	1d1a      	adds	r2, r3, #4
 800ebba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fc f9d5 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	dae6      	bge.n	800eb9a <ecp_double_jac+0x32e>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f103 010c 	add.w	r1, r3, #12
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f103 020c 	add.w	r2, r3, #12
 800ebd8:	f107 0320 	add.w	r3, r7, #32
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7fe f866 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800ebe2:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f040 81ff 	bne.w	800efea <ecp_double_jac+0x77e>
 800ebec:	f107 0320 	add.w	r3, r7, #32
 800ebf0:	68f9      	ldr	r1, [r7, #12]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7ff faea 	bl	800e1cc <ecp_modp>
 800ebf8:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f040 81f4 	bne.w	800efea <ecp_double_jac+0x77e>
 800ec02:	4b6e      	ldr	r3, [pc, #440]	@ (800edbc <ecp_double_jac+0x550>)
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	3301      	adds	r3, #1
 800ec08:	4a6c      	ldr	r2, [pc, #432]	@ (800edbc <ecp_double_jac+0x550>)
 800ec0a:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800ec0c:	f107 0320 	add.w	r3, r7, #32
 800ec10:	2101      	movs	r1, #1
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fb ffed 	bl	800abf2 <mbedtls_mpi_shift_l>
 800ec18:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f040 81e4 	bne.w	800efea <ecp_double_jac+0x77e>
 800ec22:	e00d      	b.n	800ec40 <ecp_double_jac+0x3d4>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	1d1a      	adds	r2, r3, #4
 800ec28:	f107 0120 	add.w	r1, r7, #32
 800ec2c:	f107 0320 	add.w	r3, r7, #32
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7fc fb63 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800ec36:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f040 81d5 	bne.w	800efea <ecp_double_jac+0x77e>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	1d1a      	adds	r2, r3, #4
 800ec44:	f107 0320 	add.w	r3, r7, #32
 800ec48:	4611      	mov	r1, r2
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fc f990 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	dae6      	bge.n	800ec24 <ecp_double_jac+0x3b8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 800ec56:	6879      	ldr	r1, [r7, #4]
 800ec58:	f107 0220 	add.w	r2, r7, #32
 800ec5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7fe f824 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800ec66:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	f040 81bd 	bne.w	800efea <ecp_double_jac+0x77e>
 800ec70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ec74:	68f9      	ldr	r1, [r7, #12]
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff faa8 	bl	800e1cc <ecp_modp>
 800ec7c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f040 81b2 	bne.w	800efea <ecp_double_jac+0x77e>
 800ec86:	4b4d      	ldr	r3, [pc, #308]	@ (800edbc <ecp_double_jac+0x550>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	4a4b      	ldr	r2, [pc, #300]	@ (800edbc <ecp_double_jac+0x550>)
 800ec8e:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800ec90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ec94:	2101      	movs	r1, #1
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fb ffab 	bl	800abf2 <mbedtls_mpi_shift_l>
 800ec9c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f040 81a2 	bne.w	800efea <ecp_double_jac+0x77e>
 800eca6:	e00d      	b.n	800ecc4 <ecp_double_jac+0x458>
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	1d1a      	adds	r2, r3, #4
 800ecac:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ecb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7fc fb21 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800ecba:	6478      	str	r0, [r7, #68]	@ 0x44
 800ecbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	f040 8193 	bne.w	800efea <ecp_double_jac+0x77e>
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	1d1a      	adds	r2, r3, #4
 800ecc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eccc:	4611      	mov	r1, r2
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7fc f94e 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	dae6      	bge.n	800eca8 <ecp_double_jac+0x43c>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 800ecda:	f107 0220 	add.w	r2, r7, #32
 800ecde:	f107 0120 	add.w	r1, r7, #32
 800ece2:	f107 0314 	add.w	r3, r7, #20
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7fd ffe1 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800ecec:	6478      	str	r0, [r7, #68]	@ 0x44
 800ecee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	f040 817a 	bne.w	800efea <ecp_double_jac+0x77e>
 800ecf6:	f107 0314 	add.w	r3, r7, #20
 800ecfa:	68f9      	ldr	r1, [r7, #12]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7ff fa65 	bl	800e1cc <ecp_modp>
 800ed02:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	f040 816f 	bne.w	800efea <ecp_double_jac+0x77e>
 800ed0c:	4b2b      	ldr	r3, [pc, #172]	@ (800edbc <ecp_double_jac+0x550>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	3301      	adds	r3, #1
 800ed12:	4a2a      	ldr	r2, [pc, #168]	@ (800edbc <ecp_double_jac+0x550>)
 800ed14:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800ed16:	f107 0314 	add.w	r3, r7, #20
 800ed1a:	2101      	movs	r1, #1
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fb ff68 	bl	800abf2 <mbedtls_mpi_shift_l>
 800ed22:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f040 815f 	bne.w	800efea <ecp_double_jac+0x77e>
 800ed2c:	e00d      	b.n	800ed4a <ecp_double_jac+0x4de>
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	1d1a      	adds	r2, r3, #4
 800ed32:	f107 0114 	add.w	r1, r7, #20
 800ed36:	f107 0314 	add.w	r3, r7, #20
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fc fade 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800ed40:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f040 8150 	bne.w	800efea <ecp_double_jac+0x77e>
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	1d1a      	adds	r2, r3, #4
 800ed4e:	f107 0314 	add.w	r3, r7, #20
 800ed52:	4611      	mov	r1, r2
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7fc f90b 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	dae6      	bge.n	800ed2e <ecp_double_jac+0x4c2>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 800ed60:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800ed64:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ed68:	f107 0320 	add.w	r3, r7, #32
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7fd ff9e 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800ed72:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f040 8137 	bne.w	800efea <ecp_double_jac+0x77e>
 800ed7c:	f107 0320 	add.w	r3, r7, #32
 800ed80:	68f9      	ldr	r1, [r7, #12]
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7ff fa22 	bl	800e1cc <ecp_modp>
 800ed88:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f040 812c 	bne.w	800efea <ecp_double_jac+0x77e>
 800ed92:	4b0a      	ldr	r3, [pc, #40]	@ (800edbc <ecp_double_jac+0x550>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	3301      	adds	r3, #1
 800ed98:	4a08      	ldr	r2, [pc, #32]	@ (800edbc <ecp_double_jac+0x550>)
 800ed9a:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800ed9c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800eda0:	f107 0120 	add.w	r1, r7, #32
 800eda4:	f107 0320 	add.w	r3, r7, #32
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fc fb4b 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800edae:	6478      	str	r0, [r7, #68]	@ 0x44
 800edb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	f040 8119 	bne.w	800efea <ecp_double_jac+0x77e>
 800edb8:	e010      	b.n	800eddc <ecp_double_jac+0x570>
 800edba:	bf00      	nop
 800edbc:	2400257c 	.word	0x2400257c
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	1d1a      	adds	r2, r3, #4
 800edc4:	f107 0120 	add.w	r1, r7, #32
 800edc8:	f107 0320 	add.w	r3, r7, #32
 800edcc:	4618      	mov	r0, r3
 800edce:	f7fc faf5 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800edd2:	6478      	str	r0, [r7, #68]	@ 0x44
 800edd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	f040 8107 	bne.w	800efea <ecp_double_jac+0x77e>
 800eddc:	6a3b      	ldr	r3, [r7, #32]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	da08      	bge.n	800edf4 <ecp_double_jac+0x588>
 800ede2:	f107 0320 	add.w	r3, r7, #32
 800ede6:	2100      	movs	r1, #0
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fc f95c 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d1e5      	bne.n	800edc0 <ecp_double_jac+0x554>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800edf4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800edf8:	f107 0120 	add.w	r1, r7, #32
 800edfc:	f107 0320 	add.w	r3, r7, #32
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7fc fb1f 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800ee06:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f040 80ed 	bne.w	800efea <ecp_double_jac+0x77e>
 800ee10:	e00d      	b.n	800ee2e <ecp_double_jac+0x5c2>
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	1d1a      	adds	r2, r3, #4
 800ee16:	f107 0120 	add.w	r1, r7, #32
 800ee1a:	f107 0320 	add.w	r3, r7, #32
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fc facc 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800ee24:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f040 80de 	bne.w	800efea <ecp_double_jac+0x77e>
 800ee2e:	6a3b      	ldr	r3, [r7, #32]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	da08      	bge.n	800ee46 <ecp_double_jac+0x5da>
 800ee34:	f107 0320 	add.w	r3, r7, #32
 800ee38:	2100      	movs	r1, #0
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fc f933 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1e5      	bne.n	800ee12 <ecp_double_jac+0x5a6>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800ee46:	f107 0220 	add.w	r2, r7, #32
 800ee4a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ee4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fc faf6 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800ee58:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	f040 80c4 	bne.w	800efea <ecp_double_jac+0x77e>
 800ee62:	e00d      	b.n	800ee80 <ecp_double_jac+0x614>
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	1d1a      	adds	r2, r3, #4
 800ee68:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ee6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7fc faa3 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800ee76:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	f040 80b5 	bne.w	800efea <ecp_double_jac+0x77e>
 800ee80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	da08      	bge.n	800ee98 <ecp_double_jac+0x62c>
 800ee86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fc f90a 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d1e5      	bne.n	800ee64 <ecp_double_jac+0x5f8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 800ee98:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800ee9c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eea0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7fd ff02 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800eeaa:	6478      	str	r0, [r7, #68]	@ 0x44
 800eeac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f040 809b 	bne.w	800efea <ecp_double_jac+0x77e>
 800eeb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eeb8:	68f9      	ldr	r1, [r7, #12]
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7ff f986 	bl	800e1cc <ecp_modp>
 800eec0:	6478      	str	r0, [r7, #68]	@ 0x44
 800eec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f040 8090 	bne.w	800efea <ecp_double_jac+0x77e>
 800eeca:	4b54      	ldr	r3, [pc, #336]	@ (800f01c <ecp_double_jac+0x7b0>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	3301      	adds	r3, #1
 800eed0:	4a52      	ldr	r2, [pc, #328]	@ (800f01c <ecp_double_jac+0x7b0>)
 800eed2:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800eed4:	f107 0214 	add.w	r2, r7, #20
 800eed8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eedc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fc faaf 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800eee6:	6478      	str	r0, [r7, #68]	@ 0x44
 800eee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d17d      	bne.n	800efea <ecp_double_jac+0x77e>
 800eeee:	e00c      	b.n	800ef0a <ecp_double_jac+0x69e>
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	1d1a      	adds	r2, r3, #4
 800eef4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eef8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7fc fa5d 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800ef02:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d16f      	bne.n	800efea <ecp_double_jac+0x77e>
 800ef0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	da08      	bge.n	800ef22 <ecp_double_jac+0x6b6>
 800ef10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef14:	2100      	movs	r1, #0
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fc f8c5 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d1e6      	bne.n	800eef0 <ecp_double_jac+0x684>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f103 010c 	add.w	r1, r3, #12
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f103 0218 	add.w	r2, r3, #24
 800ef2e:	f107 0314 	add.w	r3, r7, #20
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fd febb 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800ef38:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d154      	bne.n	800efea <ecp_double_jac+0x77e>
 800ef40:	f107 0314 	add.w	r3, r7, #20
 800ef44:	68f9      	ldr	r1, [r7, #12]
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7ff f940 	bl	800e1cc <ecp_modp>
 800ef4c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d14a      	bne.n	800efea <ecp_double_jac+0x77e>
 800ef54:	4b31      	ldr	r3, [pc, #196]	@ (800f01c <ecp_double_jac+0x7b0>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	4a30      	ldr	r2, [pc, #192]	@ (800f01c <ecp_double_jac+0x7b0>)
 800ef5c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800ef5e:	f107 0314 	add.w	r3, r7, #20
 800ef62:	2101      	movs	r1, #1
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fb fe44 	bl	800abf2 <mbedtls_mpi_shift_l>
 800ef6a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d13b      	bne.n	800efea <ecp_double_jac+0x77e>
 800ef72:	e00c      	b.n	800ef8e <ecp_double_jac+0x722>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	1d1a      	adds	r2, r3, #4
 800ef78:	f107 0114 	add.w	r1, r7, #20
 800ef7c:	f107 0314 	add.w	r3, r7, #20
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7fc f9bb 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800ef86:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d12d      	bne.n	800efea <ecp_double_jac+0x77e>
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	1d1a      	adds	r2, r3, #4
 800ef92:	f107 0314 	add.w	r3, r7, #20
 800ef96:	4611      	mov	r1, r2
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fb ffe9 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	dae7      	bge.n	800ef74 <ecp_double_jac+0x708>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	f107 0220 	add.w	r2, r7, #32
 800efaa:	4611      	mov	r1, r2
 800efac:	4618      	mov	r0, r3
 800efae:	f7fb f9e0 	bl	800a372 <mbedtls_mpi_copy>
 800efb2:	6478      	str	r0, [r7, #68]	@ 0x44
 800efb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d117      	bne.n	800efea <ecp_double_jac+0x77e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	330c      	adds	r3, #12
 800efbe:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800efc2:	4611      	mov	r1, r2
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fb f9d4 	bl	800a372 <mbedtls_mpi_copy>
 800efca:	6478      	str	r0, [r7, #68]	@ 0x44
 800efcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d10b      	bne.n	800efea <ecp_double_jac+0x77e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	3318      	adds	r3, #24
 800efd6:	f107 0214 	add.w	r2, r7, #20
 800efda:	4611      	mov	r1, r2
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fb f9c8 	bl	800a372 <mbedtls_mpi_copy>
 800efe2:	6478      	str	r0, [r7, #68]	@ 0x44
 800efe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efe6:	2b00      	cmp	r3, #0

cleanup:
 800efe8:	bf00      	nop
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 800efea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fb f8f0 	bl	800a1d4 <mbedtls_mpi_free>
 800eff4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eff8:	4618      	mov	r0, r3
 800effa:	f7fb f8eb 	bl	800a1d4 <mbedtls_mpi_free>
 800effe:	f107 0320 	add.w	r3, r7, #32
 800f002:	4618      	mov	r0, r3
 800f004:	f7fb f8e6 	bl	800a1d4 <mbedtls_mpi_free>
 800f008:	f107 0314 	add.w	r3, r7, #20
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fb f8e1 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800f012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800f014:	4618      	mov	r0, r3
 800f016:	3748      	adds	r7, #72	@ 0x48
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}
 800f01c:	2400257c 	.word	0x2400257c

0800f020 <ecp_add_mixed>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b09a      	sub	sp, #104	@ 0x68
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]
 800f02c:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi T1, T2, T3, T4, X, Y, Z;

#if defined(MBEDTLS_SELF_TEST)
    add_count++;
 800f02e:	4ba2      	ldr	r3, [pc, #648]	@ (800f2b8 <ecp_add_mixed+0x298>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	3301      	adds	r3, #1
 800f034:	4aa0      	ldr	r2, [pc, #640]	@ (800f2b8 <ecp_add_mixed+0x298>)
 800f036:	6013      	str	r3, [r2, #0]
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3318      	adds	r3, #24
 800f03c:	2100      	movs	r1, #0
 800f03e:	4618      	mov	r0, r3
 800f040:	f7fc f831 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d105      	bne.n	800f056 <ecp_add_mixed+0x36>
        return( mbedtls_ecp_copy( R, Q ) );
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	68b8      	ldr	r0, [r7, #8]
 800f04e:	f7ff f855 	bl	800e0fc <mbedtls_ecp_copy>
 800f052:	4603      	mov	r3, r0
 800f054:	e318      	b.n	800f688 <ecp_add_mixed+0x668>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	6a1b      	ldr	r3, [r3, #32]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00e      	beq.n	800f07c <ecp_add_mixed+0x5c>
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	3318      	adds	r3, #24
 800f062:	2100      	movs	r1, #0
 800f064:	4618      	mov	r0, r3
 800f066:	f7fc f81e 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d105      	bne.n	800f07c <ecp_add_mixed+0x5c>
        return( mbedtls_ecp_copy( R, P ) );
 800f070:	6879      	ldr	r1, [r7, #4]
 800f072:	68b8      	ldr	r0, [r7, #8]
 800f074:	f7ff f842 	bl	800e0fc <mbedtls_ecp_copy>
 800f078:	4603      	mov	r3, r0
 800f07a:	e305      	b.n	800f688 <ecp_add_mixed+0x668>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	6a1b      	ldr	r3, [r3, #32]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00a      	beq.n	800f09a <ecp_add_mixed+0x7a>
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	3318      	adds	r3, #24
 800f088:	2101      	movs	r1, #1
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fc f80b 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f090:	4603      	mov	r3, r0
 800f092:	2b00      	cmp	r3, #0
 800f094:	d001      	beq.n	800f09a <ecp_add_mixed+0x7a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800f096:	4b89      	ldr	r3, [pc, #548]	@ (800f2bc <ecp_add_mixed+0x29c>)
 800f098:	e2f6      	b.n	800f688 <ecp_add_mixed+0x668>

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 800f09a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fb f885 	bl	800a1ae <mbedtls_mpi_init>
 800f0a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fb f880 	bl	800a1ae <mbedtls_mpi_init>
 800f0ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fb f87b 	bl	800a1ae <mbedtls_mpi_init>
 800f0b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7fb f876 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800f0c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fb f871 	bl	800a1ae <mbedtls_mpi_init>
 800f0cc:	f107 031c 	add.w	r3, r7, #28
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fb f86c 	bl	800a1ae <mbedtls_mpi_init>
 800f0d6:	f107 0310 	add.w	r3, r7, #16
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7fb f867 	bl	800a1ae <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	f103 0118 	add.w	r1, r3, #24
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f103 0218 	add.w	r2, r3, #24
 800f0ec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fd fddc 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f0f6:	6678      	str	r0, [r7, #100]	@ 0x64
 800f0f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f040 82a0 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f100:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f104:	68f9      	ldr	r1, [r7, #12]
 800f106:	4618      	mov	r0, r3
 800f108:	f7ff f860 	bl	800e1cc <ecp_modp>
 800f10c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f10e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f110:	2b00      	cmp	r3, #0
 800f112:	f040 8295 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f116:	4b6a      	ldr	r3, [pc, #424]	@ (800f2c0 <ecp_add_mixed+0x2a0>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	3301      	adds	r3, #1
 800f11c:	4a68      	ldr	r2, [pc, #416]	@ (800f2c0 <ecp_add_mixed+0x2a0>)
 800f11e:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f103 0218 	add.w	r2, r3, #24
 800f126:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f12a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fd fdbd 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f134:	6678      	str	r0, [r7, #100]	@ 0x64
 800f136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f040 8281 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f13e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f142:	68f9      	ldr	r1, [r7, #12]
 800f144:	4618      	mov	r0, r3
 800f146:	f7ff f841 	bl	800e1cc <ecp_modp>
 800f14a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f14c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f14e:	2b00      	cmp	r3, #0
 800f150:	f040 8276 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f154:	4b5a      	ldr	r3, [pc, #360]	@ (800f2c0 <ecp_add_mixed+0x2a0>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	3301      	adds	r3, #1
 800f15a:	4a59      	ldr	r2, [pc, #356]	@ (800f2c0 <ecp_add_mixed+0x2a0>)
 800f15c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 800f15e:	683a      	ldr	r2, [r7, #0]
 800f160:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f164:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f168:	4618      	mov	r0, r3
 800f16a:	f7fd fda0 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f16e:	6678      	str	r0, [r7, #100]	@ 0x64
 800f170:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f172:	2b00      	cmp	r3, #0
 800f174:	f040 8264 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f178:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f17c:	68f9      	ldr	r1, [r7, #12]
 800f17e:	4618      	mov	r0, r3
 800f180:	f7ff f824 	bl	800e1cc <ecp_modp>
 800f184:	6678      	str	r0, [r7, #100]	@ 0x64
 800f186:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f040 8259 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f18e:	4b4c      	ldr	r3, [pc, #304]	@ (800f2c0 <ecp_add_mixed+0x2a0>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	3301      	adds	r3, #1
 800f194:	4a4a      	ldr	r2, [pc, #296]	@ (800f2c0 <ecp_add_mixed+0x2a0>)
 800f196:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	f103 020c 	add.w	r2, r3, #12
 800f19e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f1a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fd fd81 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f1ac:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f040 8245 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f1b6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f1ba:	68f9      	ldr	r1, [r7, #12]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7ff f805 	bl	800e1cc <ecp_modp>
 800f1c2:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f040 823a 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f1cc:	4b3c      	ldr	r3, [pc, #240]	@ (800f2c0 <ecp_add_mixed+0x2a0>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	4a3b      	ldr	r2, [pc, #236]	@ (800f2c0 <ecp_add_mixed+0x2a0>)
 800f1d4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f1dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fc f92f 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800f1e6:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	f040 8228 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f1f0:	e00d      	b.n	800f20e <ecp_add_mixed+0x1ee>
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	1d1a      	adds	r2, r3, #4
 800f1f6:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f1fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7fc f8dc 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800f204:	6678      	str	r0, [r7, #100]	@ 0x64
 800f206:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f040 8219 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f20e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f210:	2b00      	cmp	r3, #0
 800f212:	da08      	bge.n	800f226 <ecp_add_mixed+0x206>
 800f214:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f218:	2100      	movs	r1, #0
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fb ff43 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1e5      	bne.n	800f1f2 <ecp_add_mixed+0x1d2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f103 020c 	add.w	r2, r3, #12
 800f22c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f230:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f234:	4618      	mov	r0, r3
 800f236:	f7fc f905 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800f23a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f23c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f040 81fe 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f244:	e00d      	b.n	800f262 <ecp_add_mixed+0x242>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	1d1a      	adds	r2, r3, #4
 800f24a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f24e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f252:	4618      	mov	r0, r3
 800f254:	f7fc f8b2 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800f258:	6678      	str	r0, [r7, #100]	@ 0x64
 800f25a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f040 81ef 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f264:	2b00      	cmp	r3, #0
 800f266:	da08      	bge.n	800f27a <ecp_add_mixed+0x25a>
 800f268:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f26c:	2100      	movs	r1, #0
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fb ff19 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1e5      	bne.n	800f246 <ecp_add_mixed+0x226>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 800f27a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f27e:	2100      	movs	r1, #0
 800f280:	4618      	mov	r0, r3
 800f282:	f7fb ff10 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d11b      	bne.n	800f2c4 <ecp_add_mixed+0x2a4>
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 800f28c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f290:	2100      	movs	r1, #0
 800f292:	4618      	mov	r0, r3
 800f294:	f7fb ff07 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f298:	4603      	mov	r3, r0
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d106      	bne.n	800f2ac <ecp_add_mixed+0x28c>
        {
            ret = ecp_double_jac( grp, R, P );
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	68b9      	ldr	r1, [r7, #8]
 800f2a2:	68f8      	ldr	r0, [r7, #12]
 800f2a4:	f7ff fae2 	bl	800e86c <ecp_double_jac>
 800f2a8:	6678      	str	r0, [r7, #100]	@ 0x64
            goto cleanup;
 800f2aa:	e1c9      	b.n	800f640 <ecp_add_mixed+0x620>
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
 800f2ac:	68b8      	ldr	r0, [r7, #8]
 800f2ae:	f7fe ff53 	bl	800e158 <mbedtls_ecp_set_zero>
 800f2b2:	6678      	str	r0, [r7, #100]	@ 0x64
            goto cleanup;
 800f2b4:	e1c4      	b.n	800f640 <ecp_add_mixed+0x620>
 800f2b6:	bf00      	nop
 800f2b8:	24002574 	.word	0x24002574
 800f2bc:	ffffb080 	.word	0xffffb080
 800f2c0:	2400257c 	.word	0x2400257c
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f103 0118 	add.w	r1, r3, #24
 800f2ca:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f2ce:	f107 0310 	add.w	r3, r7, #16
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fd fceb 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f2d8:	6678      	str	r0, [r7, #100]	@ 0x64
 800f2da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f040 81af 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f2e2:	f107 0310 	add.w	r3, r7, #16
 800f2e6:	68f9      	ldr	r1, [r7, #12]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fe ff6f 	bl	800e1cc <ecp_modp>
 800f2ee:	6678      	str	r0, [r7, #100]	@ 0x64
 800f2f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	f040 81a4 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f2f8:	4bb2      	ldr	r3, [pc, #712]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	4ab1      	ldr	r2, [pc, #708]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f300:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 800f302:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f306:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f30a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fd fccd 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f314:	6678      	str	r0, [r7, #100]	@ 0x64
 800f316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f040 8191 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f31e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f322:	68f9      	ldr	r1, [r7, #12]
 800f324:	4618      	mov	r0, r3
 800f326:	f7fe ff51 	bl	800e1cc <ecp_modp>
 800f32a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f32c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f32e:	2b00      	cmp	r3, #0
 800f330:	f040 8186 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f334:	4ba3      	ldr	r3, [pc, #652]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	3301      	adds	r3, #1
 800f33a:	4aa2      	ldr	r2, [pc, #648]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f33c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 800f33e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f342:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f346:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f34a:	4618      	mov	r0, r3
 800f34c:	f7fd fcaf 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f350:	6678      	str	r0, [r7, #100]	@ 0x64
 800f352:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f354:	2b00      	cmp	r3, #0
 800f356:	f040 8173 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f35a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f35e:	68f9      	ldr	r1, [r7, #12]
 800f360:	4618      	mov	r0, r3
 800f362:	f7fe ff33 	bl	800e1cc <ecp_modp>
 800f366:	6678      	str	r0, [r7, #100]	@ 0x64
 800f368:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	f040 8168 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f370:	4b94      	ldr	r3, [pc, #592]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	3301      	adds	r3, #1
 800f376:	4a93      	ldr	r2, [pc, #588]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f378:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 800f37a:	687a      	ldr	r2, [r7, #4]
 800f37c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f380:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f384:	4618      	mov	r0, r3
 800f386:	f7fd fc92 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f38a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f38c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f040 8156 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f394:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f398:	68f9      	ldr	r1, [r7, #12]
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7fe ff16 	bl	800e1cc <ecp_modp>
 800f3a0:	6678      	str	r0, [r7, #100]	@ 0x64
 800f3a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	f040 814b 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f3aa:	4b86      	ldr	r3, [pc, #536]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	4a84      	ldr	r2, [pc, #528]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f3b2:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800f3b4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f3b8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f3bc:	2202      	movs	r2, #2
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fd fd1e 	bl	800ce00 <mbedtls_mpi_mul_int>
 800f3c4:	6678      	str	r0, [r7, #100]	@ 0x64
 800f3c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	f040 8139 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f3ce:	e00d      	b.n	800f3ec <ecp_add_mixed+0x3cc>
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	1d1a      	adds	r2, r3, #4
 800f3d4:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f3d8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fb ff8d 	bl	800b2fc <mbedtls_mpi_sub_abs>
 800f3e2:	6678      	str	r0, [r7, #100]	@ 0x64
 800f3e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f040 812a 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	1d1a      	adds	r2, r3, #4
 800f3f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fb fdba 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	dae6      	bge.n	800f3d0 <ecp_add_mixed+0x3b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 800f402:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f406:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f40a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f40e:	4618      	mov	r0, r3
 800f410:	f7fd fc4d 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f414:	6678      	str	r0, [r7, #100]	@ 0x64
 800f416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f040 8111 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f41e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f422:	68f9      	ldr	r1, [r7, #12]
 800f424:	4618      	mov	r0, r3
 800f426:	f7fe fed1 	bl	800e1cc <ecp_modp>
 800f42a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f42c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f040 8106 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f434:	4b63      	ldr	r3, [pc, #396]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	3301      	adds	r3, #1
 800f43a:	4a62      	ldr	r2, [pc, #392]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f43c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800f43e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f442:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f446:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fb fffa 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800f450:	6678      	str	r0, [r7, #100]	@ 0x64
 800f452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f454:	2b00      	cmp	r3, #0
 800f456:	f040 80f3 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f45a:	e00d      	b.n	800f478 <ecp_add_mixed+0x458>
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	1d1a      	adds	r2, r3, #4
 800f460:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f464:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fb ffa7 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800f46e:	6678      	str	r0, [r7, #100]	@ 0x64
 800f470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f472:	2b00      	cmp	r3, #0
 800f474:	f040 80e4 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	da08      	bge.n	800f490 <ecp_add_mixed+0x470>
 800f47e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f482:	2100      	movs	r1, #0
 800f484:	4618      	mov	r0, r3
 800f486:	f7fb fe0e 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f48a:	4603      	mov	r3, r0
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d1e5      	bne.n	800f45c <ecp_add_mixed+0x43c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800f490:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f494:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f498:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fb ffd1 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800f4a2:	6678      	str	r0, [r7, #100]	@ 0x64
 800f4a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f040 80ca 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f4ac:	e00d      	b.n	800f4ca <ecp_add_mixed+0x4aa>
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	1d1a      	adds	r2, r3, #4
 800f4b2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f4b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fb ff7e 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800f4c0:	6678      	str	r0, [r7, #100]	@ 0x64
 800f4c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f040 80bb 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	da08      	bge.n	800f4e2 <ecp_add_mixed+0x4c2>
 800f4d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f4d4:	2100      	movs	r1, #0
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fb fde5 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d1e5      	bne.n	800f4ae <ecp_add_mixed+0x48e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800f4e2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f4e6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f4ea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fb ffa8 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800f4f4:	6678      	str	r0, [r7, #100]	@ 0x64
 800f4f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f040 80a1 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f4fe:	e00d      	b.n	800f51c <ecp_add_mixed+0x4fc>
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	1d1a      	adds	r2, r3, #4
 800f504:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f508:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fb ff55 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800f512:	6678      	str	r0, [r7, #100]	@ 0x64
 800f514:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f516:	2b00      	cmp	r3, #0
 800f518:	f040 8092 	bne.w	800f640 <ecp_add_mixed+0x620>
 800f51c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f51e:	2b00      	cmp	r3, #0
 800f520:	da08      	bge.n	800f534 <ecp_add_mixed+0x514>
 800f522:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f526:	2100      	movs	r1, #0
 800f528:	4618      	mov	r0, r3
 800f52a:	f7fb fdbc 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f52e:	4603      	mov	r3, r0
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1e5      	bne.n	800f500 <ecp_add_mixed+0x4e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 800f534:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f538:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f53c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f540:	4618      	mov	r0, r3
 800f542:	f7fd fbb4 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f546:	6678      	str	r0, [r7, #100]	@ 0x64
 800f548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d178      	bne.n	800f640 <ecp_add_mixed+0x620>
 800f54e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f552:	68f9      	ldr	r1, [r7, #12]
 800f554:	4618      	mov	r0, r3
 800f556:	f7fe fe39 	bl	800e1cc <ecp_modp>
 800f55a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f55c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d16e      	bne.n	800f640 <ecp_add_mixed+0x620>
 800f562:	4b18      	ldr	r3, [pc, #96]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	3301      	adds	r3, #1
 800f568:	4a16      	ldr	r2, [pc, #88]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f56a:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f103 020c 	add.w	r2, r3, #12
 800f572:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800f576:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fd fb97 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f580:	6678      	str	r0, [r7, #100]	@ 0x64
 800f582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f584:	2b00      	cmp	r3, #0
 800f586:	d15b      	bne.n	800f640 <ecp_add_mixed+0x620>
 800f588:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f58c:	68f9      	ldr	r1, [r7, #12]
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fe fe1c 	bl	800e1cc <ecp_modp>
 800f594:	6678      	str	r0, [r7, #100]	@ 0x64
 800f596:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d151      	bne.n	800f640 <ecp_add_mixed+0x620>
 800f59c:	4b09      	ldr	r3, [pc, #36]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	4a08      	ldr	r2, [pc, #32]	@ (800f5c4 <ecp_add_mixed+0x5a4>)
 800f5a4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800f5a6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f5aa:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f5ae:	f107 031c 	add.w	r3, r7, #28
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fb ff46 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800f5b8:	6678      	str	r0, [r7, #100]	@ 0x64
 800f5ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d13f      	bne.n	800f640 <ecp_add_mixed+0x620>
 800f5c0:	e00f      	b.n	800f5e2 <ecp_add_mixed+0x5c2>
 800f5c2:	bf00      	nop
 800f5c4:	2400257c 	.word	0x2400257c
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	1d1a      	adds	r2, r3, #4
 800f5cc:	f107 011c 	add.w	r1, r7, #28
 800f5d0:	f107 031c 	add.w	r3, r7, #28
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7fb fef1 	bl	800b3bc <mbedtls_mpi_add_mpi>
 800f5da:	6678      	str	r0, [r7, #100]	@ 0x64
 800f5dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d12e      	bne.n	800f640 <ecp_add_mixed+0x620>
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	da08      	bge.n	800f5fa <ecp_add_mixed+0x5da>
 800f5e8:	f107 031c 	add.w	r3, r7, #28
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fb fd59 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d1e6      	bne.n	800f5c8 <ecp_add_mixed+0x5a8>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f600:	4611      	mov	r1, r2
 800f602:	4618      	mov	r0, r3
 800f604:	f7fa feb5 	bl	800a372 <mbedtls_mpi_copy>
 800f608:	6678      	str	r0, [r7, #100]	@ 0x64
 800f60a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d117      	bne.n	800f640 <ecp_add_mixed+0x620>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	330c      	adds	r3, #12
 800f614:	f107 021c 	add.w	r2, r7, #28
 800f618:	4611      	mov	r1, r2
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fa fea9 	bl	800a372 <mbedtls_mpi_copy>
 800f620:	6678      	str	r0, [r7, #100]	@ 0x64
 800f622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f624:	2b00      	cmp	r3, #0
 800f626:	d10b      	bne.n	800f640 <ecp_add_mixed+0x620>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	3318      	adds	r3, #24
 800f62c:	f107 0210 	add.w	r2, r7, #16
 800f630:	4611      	mov	r1, r2
 800f632:	4618      	mov	r0, r3
 800f634:	f7fa fe9d 	bl	800a372 <mbedtls_mpi_copy>
 800f638:	6678      	str	r0, [r7, #100]	@ 0x64
 800f63a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f63c:	2b00      	cmp	r3, #0

cleanup:
 800f63e:	bf00      	nop

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 800f640:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f644:	4618      	mov	r0, r3
 800f646:	f7fa fdc5 	bl	800a1d4 <mbedtls_mpi_free>
 800f64a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fa fdc0 	bl	800a1d4 <mbedtls_mpi_free>
 800f654:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fa fdbb 	bl	800a1d4 <mbedtls_mpi_free>
 800f65e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f662:	4618      	mov	r0, r3
 800f664:	f7fa fdb6 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800f668:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fa fdb1 	bl	800a1d4 <mbedtls_mpi_free>
 800f672:	f107 031c 	add.w	r3, r7, #28
 800f676:	4618      	mov	r0, r3
 800f678:	f7fa fdac 	bl	800a1d4 <mbedtls_mpi_free>
 800f67c:	f107 0310 	add.w	r3, r7, #16
 800f680:	4618      	mov	r0, r3
 800f682:	f7fa fda7 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800f686:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 800f688:	4618      	mov	r0, r3
 800f68a:	3768      	adds	r7, #104	@ 0x68
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <ecp_randomize_jac>:
 *
 * This countermeasure was first suggested in [2].
 */
static int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b08e      	sub	sp, #56	@ 0x38
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
 800f69c:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l, ll;
    size_t p_size;
    int count = 0;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6a6:	3307      	adds	r3, #7
 800f6a8:	08db      	lsrs	r3, r3, #3
 800f6aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800f6ac:	f107 0320 	add.w	r3, r7, #32
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fa fd7c 	bl	800a1ae <mbedtls_mpi_init>
 800f6b6:	f107 0314 	add.w	r3, r7, #20
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fa fd77 	bl	800a1ae <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800f6c0:	f107 0020 	add.w	r0, r7, #32
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6ca:	f7fe f845 	bl	800d758 <mbedtls_mpi_fill_random>
 800f6ce:	6378      	str	r0, [r7, #52]	@ 0x34
 800f6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	f040 80b2 	bne.w	800f83c <ecp_randomize_jac+0x1ac>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800f6d8:	e00a      	b.n	800f6f0 <ecp_randomize_jac+0x60>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800f6da:	f107 0320 	add.w	r3, r7, #32
 800f6de:	2101      	movs	r1, #1
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fb fb28 	bl	800ad36 <mbedtls_mpi_shift_r>
 800f6e6:	6378      	str	r0, [r7, #52]	@ 0x34
 800f6e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f040 80a6 	bne.w	800f83c <ecp_randomize_jac+0x1ac>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	1d1a      	adds	r2, r3, #4
 800f6f4:	f107 0320 	add.w	r3, r7, #32
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fb fc38 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800f700:	4603      	mov	r3, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	dae9      	bge.n	800f6da <ecp_randomize_jac+0x4a>

        if( count++ > 10 )
 800f706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f708:	1c5a      	adds	r2, r3, #1
 800f70a:	633a      	str	r2, [r7, #48]	@ 0x30
 800f70c:	2b0a      	cmp	r3, #10
 800f70e:	dd01      	ble.n	800f714 <ecp_randomize_jac+0x84>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800f710:	4b52      	ldr	r3, [pc, #328]	@ (800f85c <ecp_randomize_jac+0x1cc>)
 800f712:	e09e      	b.n	800f852 <ecp_randomize_jac+0x1c2>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800f714:	f107 0320 	add.w	r3, r7, #32
 800f718:	2101      	movs	r1, #1
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fb fcc3 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 800f720:	4603      	mov	r3, r0
 800f722:	2b00      	cmp	r3, #0
 800f724:	ddcc      	ble.n	800f6c0 <ecp_randomize_jac+0x30>

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	f103 0018 	add.w	r0, r3, #24
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	3318      	adds	r3, #24
 800f730:	f107 0220 	add.w	r2, r7, #32
 800f734:	4619      	mov	r1, r3
 800f736:	f7fd faba 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f73a:	6378      	str	r0, [r7, #52]	@ 0x34
 800f73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d17c      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	3318      	adds	r3, #24
 800f746:	68f9      	ldr	r1, [r7, #12]
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fe fd3f 	bl	800e1cc <ecp_modp>
 800f74e:	6378      	str	r0, [r7, #52]	@ 0x34
 800f750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f752:	2b00      	cmp	r3, #0
 800f754:	d172      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f756:	4b42      	ldr	r3, [pc, #264]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	3301      	adds	r3, #1
 800f75c:	4a40      	ldr	r2, [pc, #256]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f75e:	6013      	str	r3, [r2, #0]

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 800f760:	f107 0220 	add.w	r2, r7, #32
 800f764:	f107 0120 	add.w	r1, r7, #32
 800f768:	f107 0314 	add.w	r3, r7, #20
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fd fa9e 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f772:	6378      	str	r0, [r7, #52]	@ 0x34
 800f774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f776:	2b00      	cmp	r3, #0
 800f778:	d160      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f77a:	f107 0314 	add.w	r3, r7, #20
 800f77e:	68f9      	ldr	r1, [r7, #12]
 800f780:	4618      	mov	r0, r3
 800f782:	f7fe fd23 	bl	800e1cc <ecp_modp>
 800f786:	6378      	str	r0, [r7, #52]	@ 0x34
 800f788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d156      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f78e:	4b34      	ldr	r3, [pc, #208]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	3301      	adds	r3, #1
 800f794:	4a32      	ldr	r2, [pc, #200]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f796:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	68b9      	ldr	r1, [r7, #8]
 800f79c:	f107 0214 	add.w	r2, r7, #20
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fd fa84 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f7a6:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d146      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	68f9      	ldr	r1, [r7, #12]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7fe fd0a 	bl	800e1cc <ecp_modp>
 800f7b8:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d13d      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f7c0:	4b27      	ldr	r3, [pc, #156]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	4a26      	ldr	r2, [pc, #152]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f7c8:	6013      	str	r3, [r2, #0]

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 800f7ca:	f107 0220 	add.w	r2, r7, #32
 800f7ce:	f107 0114 	add.w	r1, r7, #20
 800f7d2:	f107 0314 	add.w	r3, r7, #20
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fd fa69 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f7dc:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d12b      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f7e4:	f107 0314 	add.w	r3, r7, #20
 800f7e8:	68f9      	ldr	r1, [r7, #12]
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7fe fcee 	bl	800e1cc <ecp_modp>
 800f7f0:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d121      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f7f8:	4b19      	ldr	r3, [pc, #100]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	3301      	adds	r3, #1
 800f7fe:	4a18      	ldr	r2, [pc, #96]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f800:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	f103 000c 	add.w	r0, r3, #12
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	330c      	adds	r3, #12
 800f80c:	f107 0214 	add.w	r2, r7, #20
 800f810:	4619      	mov	r1, r3
 800f812:	f7fd fa4c 	bl	800ccae <mbedtls_mpi_mul_mpi>
 800f816:	6378      	str	r0, [r7, #52]	@ 0x34
 800f818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d10e      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	330c      	adds	r3, #12
 800f822:	68f9      	ldr	r1, [r7, #12]
 800f824:	4618      	mov	r0, r3
 800f826:	f7fe fcd1 	bl	800e1cc <ecp_modp>
 800f82a:	6378      	str	r0, [r7, #52]	@ 0x34
 800f82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d104      	bne.n	800f83c <ecp_randomize_jac+0x1ac>
 800f832:	4b0b      	ldr	r3, [pc, #44]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	3301      	adds	r3, #1
 800f838:	4a09      	ldr	r2, [pc, #36]	@ (800f860 <ecp_randomize_jac+0x1d0>)
 800f83a:	6013      	str	r3, [r2, #0]

cleanup:
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 800f83c:	f107 0320 	add.w	r3, r7, #32
 800f840:	4618      	mov	r0, r3
 800f842:	f7fa fcc7 	bl	800a1d4 <mbedtls_mpi_free>
 800f846:	f107 0314 	add.w	r3, r7, #20
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fa fcc2 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800f850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f852:	4618      	mov	r0, r3
 800f854:	3738      	adds	r7, #56	@ 0x38
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	ffffb300 	.word	0xffffb300
 800f860:	2400257c 	.word	0x2400257c

0800f864 <ecp_comb_recode_core>:
 * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d
 *   (the result will be incorrect if these assumptions are not satisfied)
 */
static void ecp_comb_recode_core( unsigned char x[], size_t d,
                                  unsigned char w, const mbedtls_mpi *m )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b088      	sub	sp, #32
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	603b      	str	r3, [r7, #0]
 800f870:	4613      	mov	r3, r2
 800f872:	71fb      	strb	r3, [r7, #7]
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	3301      	adds	r3, #1
 800f878:	461a      	mov	r2, r3
 800f87a:	2100      	movs	r1, #0
 800f87c:	68f8      	ldr	r0, [r7, #12]
 800f87e:	f006 f879 	bl	8015974 <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 800f882:	2300      	movs	r3, #0
 800f884:	61fb      	str	r3, [r7, #28]
 800f886:	e027      	b.n	800f8d8 <ecp_comb_recode_core+0x74>
        for( j = 0; j < w; j++ )
 800f888:	2300      	movs	r3, #0
 800f88a:	61bb      	str	r3, [r7, #24]
 800f88c:	e01d      	b.n	800f8ca <ecp_comb_recode_core+0x66>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	69ba      	ldr	r2, [r7, #24]
 800f892:	fb03 f202 	mul.w	r2, r3, r2
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	4413      	add	r3, r2
 800f89a:	4619      	mov	r1, r3
 800f89c:	6838      	ldr	r0, [r7, #0]
 800f89e:	f7fa fef3 	bl	800a688 <mbedtls_mpi_get_bit>
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	fa02 f103 	lsl.w	r1, r2, r3
 800f8aa:	68fa      	ldr	r2, [r7, #12]
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	b25a      	sxtb	r2, r3
 800f8b4:	b24b      	sxtb	r3, r1
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	b259      	sxtb	r1, r3
 800f8ba:	68fa      	ldr	r2, [r7, #12]
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	4413      	add	r3, r2
 800f8c0:	b2ca      	uxtb	r2, r1
 800f8c2:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < w; j++ )
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	61bb      	str	r3, [r7, #24]
 800f8ca:	79fb      	ldrb	r3, [r7, #7]
 800f8cc:	69ba      	ldr	r2, [r7, #24]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d3dd      	bcc.n	800f88e <ecp_comb_recode_core+0x2a>
    for( i = 0; i < d; i++ )
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	3301      	adds	r3, #1
 800f8d6:	61fb      	str	r3, [r7, #28]
 800f8d8:	69fa      	ldr	r2, [r7, #28]
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d3d3      	bcc.n	800f888 <ecp_comb_recode_core+0x24>

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	75fb      	strb	r3, [r7, #23]
    for( i = 1; i <= d; i++ )
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	61fb      	str	r3, [r7, #28]
 800f8e8:	e060      	b.n	800f9ac <ecp_comb_recode_core+0x148>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	781a      	ldrb	r2, [r3, #0]
 800f8f2:	7dfb      	ldrb	r3, [r7, #23]
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	75bb      	strb	r3, [r7, #22]
        x[i] = x[i] ^ c;
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	7819      	ldrb	r1, [r3, #0]
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	4413      	add	r3, r2
 800f906:	7dfa      	ldrb	r2, [r7, #23]
 800f908:	404a      	eors	r2, r1
 800f90a:	b2d2      	uxtb	r2, r2
 800f90c:	701a      	strb	r2, [r3, #0]
        c = cc;
 800f90e:	7dbb      	ldrb	r3, [r7, #22]
 800f910:	75fb      	strb	r3, [r7, #23]

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
 800f912:	68fa      	ldr	r2, [r7, #12]
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	4413      	add	r3, r2
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	f003 0301 	and.w	r3, r3, #1
 800f91e:	2b00      	cmp	r3, #0
 800f920:	bf0c      	ite	eq
 800f922:	2301      	moveq	r3, #1
 800f924:	2300      	movne	r3, #0
 800f926:	b2db      	uxtb	r3, r3
 800f928:	757b      	strb	r3, [r7, #21]
        c   |= x[i] & ( x[i-1] * adjust );
 800f92a:	68fa      	ldr	r2, [r7, #12]
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	4413      	add	r3, r2
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	b25a      	sxtb	r2, r3
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	3b01      	subs	r3, #1
 800f938:	68f9      	ldr	r1, [r7, #12]
 800f93a:	440b      	add	r3, r1
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	7d79      	ldrb	r1, [r7, #21]
 800f940:	fb11 f303 	smulbb	r3, r1, r3
 800f944:	b2db      	uxtb	r3, r3
 800f946:	b25b      	sxtb	r3, r3
 800f948:	4013      	ands	r3, r2
 800f94a:	b25a      	sxtb	r2, r3
 800f94c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f950:	4313      	orrs	r3, r2
 800f952:	b25b      	sxtb	r3, r3
 800f954:	75fb      	strb	r3, [r7, #23]
        x[i] = x[i] ^ ( x[i-1] * adjust );
 800f956:	68fa      	ldr	r2, [r7, #12]
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	4413      	add	r3, r2
 800f95c:	781b      	ldrb	r3, [r3, #0]
 800f95e:	b25a      	sxtb	r2, r3
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	3b01      	subs	r3, #1
 800f964:	68f9      	ldr	r1, [r7, #12]
 800f966:	440b      	add	r3, r1
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	7d79      	ldrb	r1, [r7, #21]
 800f96c:	fb11 f303 	smulbb	r3, r1, r3
 800f970:	b2db      	uxtb	r3, r3
 800f972:	b25b      	sxtb	r3, r3
 800f974:	4053      	eors	r3, r2
 800f976:	b259      	sxtb	r1, r3
 800f978:	68fa      	ldr	r2, [r7, #12]
 800f97a:	69fb      	ldr	r3, [r7, #28]
 800f97c:	4413      	add	r3, r2
 800f97e:	b2ca      	uxtb	r2, r1
 800f980:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	3b01      	subs	r3, #1
 800f986:	68fa      	ldr	r2, [r7, #12]
 800f988:	4413      	add	r3, r2
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	b25a      	sxtb	r2, r3
 800f98e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800f992:	01db      	lsls	r3, r3, #7
 800f994:	b25b      	sxtb	r3, r3
 800f996:	4313      	orrs	r3, r2
 800f998:	b259      	sxtb	r1, r3
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	3b01      	subs	r3, #1
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	b2ca      	uxtb	r2, r1
 800f9a4:	701a      	strb	r2, [r3, #0]
    for( i = 1; i <= d; i++ )
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	61fb      	str	r3, [r7, #28]
 800f9ac:	69fa      	ldr	r2, [r7, #28]
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d99a      	bls.n	800f8ea <ecp_comb_recode_core+0x86>
    }
}
 800f9b4:	bf00      	nop
 800f9b6:	bf00      	nop
 800f9b8:	3720      	adds	r7, #32
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <ecp_precompute_comb>:
 */
static int ecp_precompute_comb( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,
                                unsigned char w, size_t d,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b0a8      	sub	sp, #160	@ 0xa0
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	60f8      	str	r0, [r7, #12]
 800f9c6:	60b9      	str	r1, [r7, #8]
 800f9c8:	607a      	str	r2, [r7, #4]
 800f9ca:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char i;
    size_t j = 0;
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const unsigned char T_size = 1U << ( w - 1 );
 800f9d2:	78fb      	ldrb	r3, [r7, #3]
 800f9d4:	3b01      	subs	r3, #1
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800f9dc:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800f9e0:	6879      	ldr	r1, [r7, #4]
 800f9e2:	68b8      	ldr	r0, [r7, #8]
 800f9e4:	f7fe fb8a 	bl	800e0fc <mbedtls_ecp_copy>
 800f9e8:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800f9ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f040 8102 	bne.w	800fbfa <ecp_precompute_comb+0x23c>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL && rs_ctx->rsm->i != 0 )
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for( ; j < d * ( w - 1 ); j++ )
 800f9fc:	e04d      	b.n	800fa9a <ecp_precompute_comb+0xdc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
 800f9fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fa02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fa06:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	fa02 f303 	lsl.w	r3, r2, r3
 800fa10:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
        cur = T + i;
 800fa14:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fa18:	4613      	mov	r3, r2
 800fa1a:	00db      	lsls	r3, r3, #3
 800fa1c:	4413      	add	r3, r2
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	461a      	mov	r2, r3
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	4413      	add	r3, r2
 800fa26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        if( j % d == 0 )
 800fa2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fa2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fa32:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa36:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800fa3a:	fb01 f202 	mul.w	r2, r1, r2
 800fa3e:	1a9b      	subs	r3, r3, r2
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d117      	bne.n	800fa74 <ecp_precompute_comb+0xb6>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800fa44:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fa48:	085b      	lsrs	r3, r3, #1
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	4613      	mov	r3, r2
 800fa50:	00db      	lsls	r3, r3, #3
 800fa52:	4413      	add	r3, r2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	461a      	mov	r2, r3
 800fa58:	68bb      	ldr	r3, [r7, #8]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800fa62:	f7fe fb4b 	bl	800e0fc <mbedtls_ecp_copy>
 800fa66:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fa6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	f040 80c3 	bne.w	800fbfa <ecp_precompute_comb+0x23c>

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800fa74:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fa78:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f7fe fef5 	bl	800e86c <ecp_double_jac>
 800fa82:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fa86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f040 80b5 	bne.w	800fbfa <ecp_precompute_comb+0x23c>
    for( ; j < d * ( w - 1 ); j++ )
 800fa90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fa94:	3301      	adds	r3, #1
 800fa96:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fa9a:	78fb      	ldrb	r3, [r7, #3]
 800fa9c:	3b01      	subs	r3, #1
 800fa9e:	461a      	mov	r2, r3
 800faa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800faa4:	fb02 f303 	mul.w	r3, r2, r3
 800faa8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800faac:	429a      	cmp	r2, r3
 800faae:	d3a6      	bcc.n	800f9fe <ecp_precompute_comb+0x40>
#endif
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
 800fab0:	2300      	movs	r3, #0
 800fab2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    for( i = 1; i < T_size; i <<= 1 )
 800fab6:	2301      	movs	r3, #1
 800fab8:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fabc:	e017      	b.n	800faee <ecp_precompute_comb+0x130>
        TT[j++] = T + i;
 800fabe:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fac2:	4613      	mov	r3, r2
 800fac4:	00db      	lsls	r3, r3, #3
 800fac6:	4413      	add	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	4619      	mov	r1, r3
 800facc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fad0:	1c5a      	adds	r2, r3, #1
 800fad2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fad6:	68ba      	ldr	r2, [r7, #8]
 800fad8:	440a      	add	r2, r1
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	33a0      	adds	r3, #160	@ 0xa0
 800fade:	443b      	add	r3, r7
 800fae0:	f843 2c90 	str.w	r2, [r3, #-144]
    for( i = 1; i < T_size; i <<= 1 )
 800fae4:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800faee:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800faf2:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d3e1      	bcc.n	800fabe <ecp_precompute_comb+0x100>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800fafa:	f107 0310 	add.w	r3, r7, #16
 800fafe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb02:	4619      	mov	r1, r3
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f7fe fc77 	bl	800e3f8 <ecp_normalize_jac_many>
 800fb0a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fb0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d171      	bne.n	800fbfa <ecp_precompute_comb+0x23c>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
 800fb16:	2301      	movs	r3, #1
 800fb18:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fb1c:	e038      	b.n	800fb90 <ecp_precompute_comb+0x1d2>
    {
        j = i;
 800fb1e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fb22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        while( j-- )
 800fb26:	e027      	b.n	800fb78 <ecp_precompute_comb+0x1ba>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800fb28:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fb2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fb30:	441a      	add	r2, r3
 800fb32:	4613      	mov	r3, r2
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	4413      	add	r3, r2
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	1899      	adds	r1, r3, r2
 800fb40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb44:	4613      	mov	r3, r2
 800fb46:	00db      	lsls	r3, r3, #3
 800fb48:	4413      	add	r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	1898      	adds	r0, r3, r2
 800fb52:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fb56:	4613      	mov	r3, r2
 800fb58:	00db      	lsls	r3, r3, #3
 800fb5a:	4413      	add	r3, r2
 800fb5c:	009b      	lsls	r3, r3, #2
 800fb5e:	461a      	mov	r2, r3
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	4413      	add	r3, r2
 800fb64:	4602      	mov	r2, r0
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f7ff fa5a 	bl	800f020 <ecp_add_mixed>
 800fb6c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fb70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d140      	bne.n	800fbfa <ecp_precompute_comb+0x23c>
        while( j-- )
 800fb78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fb7c:	1e5a      	subs	r2, r3, #1
 800fb7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1d0      	bne.n	800fb28 <ecp_precompute_comb+0x16a>
    for( i = 1; i < T_size; i <<= 1 )
 800fb86:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fb8a:	005b      	lsls	r3, r3, #1
 800fb8c:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fb90:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fb94:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d3c0      	bcc.n	800fb1e <ecp_precompute_comb+0x160>
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fba2:	e015      	b.n	800fbd0 <ecp_precompute_comb+0x212>
        TT[j] = T + j + 1;
 800fba4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fba8:	1c5a      	adds	r2, r3, #1
 800fbaa:	4613      	mov	r3, r2
 800fbac:	00db      	lsls	r3, r3, #3
 800fbae:	4413      	add	r3, r2
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	441a      	add	r2, r3
 800fbb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	33a0      	adds	r3, #160	@ 0xa0
 800fbc0:	443b      	add	r3, r7
 800fbc2:	f843 2c90 	str.w	r2, [r3, #-144]
    for( j = 0; j + 1 < T_size; j++ )
 800fbc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fbca:	3301      	adds	r3, #1
 800fbcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fbd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fbd4:	1c5a      	adds	r2, r3, #1
 800fbd6:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d3e2      	bcc.n	800fba4 <ecp_precompute_comb+0x1e6>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800fbde:	f107 0310 	add.w	r3, r7, #16
 800fbe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	68f8      	ldr	r0, [r7, #12]
 800fbea:	f7fe fc05 	bl	800e3f8 <ecp_normalize_jac_many>
 800fbee:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fbf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fbf6:	2b00      	cmp	r3, #0

cleanup:
 800fbf8:	bf00      	nop
        if( rs_ctx->rsm->state == ecp_rsm_pre_dbl )
            rs_ctx->rsm->i = j;
    }
#endif

    return( ret );
 800fbfa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	37a0      	adds	r7, #160	@ 0xa0
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b086      	sub	sp, #24
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	60f8      	str	r0, [r7, #12]
 800fc0e:	60b9      	str	r1, [r7, #8]
 800fc10:	607a      	str	r2, [r7, #4]
 800fc12:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 800fc14:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc18:	085b      	lsrs	r3, r3, #1
 800fc1a:	b2db      	uxtb	r3, r3
 800fc1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc20:	74bb      	strb	r3, [r7, #18]

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 800fc22:	2300      	movs	r3, #0
 800fc24:	74fb      	strb	r3, [r7, #19]
 800fc26:	e035      	b.n	800fc94 <ecp_select_comb+0x8e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800fc28:	68b8      	ldr	r0, [r7, #8]
 800fc2a:	7cfa      	ldrb	r2, [r7, #19]
 800fc2c:	4613      	mov	r3, r2
 800fc2e:	00db      	lsls	r3, r3, #3
 800fc30:	4413      	add	r3, r2
 800fc32:	009b      	lsls	r3, r3, #2
 800fc34:	461a      	mov	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4413      	add	r3, r2
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	7cfa      	ldrb	r2, [r7, #19]
 800fc3e:	7cbb      	ldrb	r3, [r7, #18]
 800fc40:	429a      	cmp	r2, r3
 800fc42:	bf0c      	ite	eq
 800fc44:	2301      	moveq	r3, #1
 800fc46:	2300      	movne	r3, #0
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	f7fa fbed 	bl	800a42a <mbedtls_mpi_safe_cond_assign>
 800fc50:	6178      	str	r0, [r7, #20]
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d12e      	bne.n	800fcb6 <ecp_select_comb+0xb0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800fc58:	68bb      	ldr	r3, [r7, #8]
 800fc5a:	f103 000c 	add.w	r0, r3, #12
 800fc5e:	7cfa      	ldrb	r2, [r7, #19]
 800fc60:	4613      	mov	r3, r2
 800fc62:	00db      	lsls	r3, r3, #3
 800fc64:	4413      	add	r3, r2
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	461a      	mov	r2, r3
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	f103 010c 	add.w	r1, r3, #12
 800fc72:	7cfa      	ldrb	r2, [r7, #19]
 800fc74:	7cbb      	ldrb	r3, [r7, #18]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	bf0c      	ite	eq
 800fc7a:	2301      	moveq	r3, #1
 800fc7c:	2300      	movne	r3, #0
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	461a      	mov	r2, r3
 800fc82:	f7fa fbd2 	bl	800a42a <mbedtls_mpi_safe_cond_assign>
 800fc86:	6178      	str	r0, [r7, #20]
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d113      	bne.n	800fcb6 <ecp_select_comb+0xb0>
    for( j = 0; j < T_size; j++ )
 800fc8e:	7cfb      	ldrb	r3, [r7, #19]
 800fc90:	3301      	adds	r3, #1
 800fc92:	74fb      	strb	r3, [r7, #19]
 800fc94:	7cfa      	ldrb	r2, [r7, #19]
 800fc96:	78fb      	ldrb	r3, [r7, #3]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d3c5      	bcc.n	800fc28 <ecp_select_comb+0x22>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 800fc9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fca0:	09db      	lsrs	r3, r3, #7
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	461a      	mov	r2, r3
 800fca6:	68b9      	ldr	r1, [r7, #8]
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	f7fe fd9b 	bl	800e7e4 <ecp_safe_invert_jac>
 800fcae:	6178      	str	r0, [r7, #20]
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	2b00      	cmp	r3, #0

cleanup:
 800fcb4:	bf00      	nop
    return( ret );
 800fcb6:	697b      	ldr	r3, [r7, #20]
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3718      	adds	r7, #24
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <ecp_mul_comb_core>:
                              const mbedtls_ecp_point T[], unsigned char T_size,
                              const unsigned char x[], size_t d,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng,
                              mbedtls_ecp_restart_ctx *rs_ctx )
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b092      	sub	sp, #72	@ 0x48
 800fcc4:	af02      	add	r7, sp, #8
 800fcc6:	60f8      	str	r0, [r7, #12]
 800fcc8:	60b9      	str	r1, [r7, #8]
 800fcca:	607a      	str	r2, [r7, #4]
 800fccc:	70fb      	strb	r3, [r7, #3]
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
 800fcce:	f107 0314 	add.w	r3, r7, #20
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fe f927 	bl	800df26 <mbedtls_ecp_point_init>
    }
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
 800fcd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcda:	63bb      	str	r3, [r7, #56]	@ 0x38
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800fcdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fce0:	4413      	add	r3, r2
 800fce2:	781b      	ldrb	r3, [r3, #0]
 800fce4:	78fa      	ldrb	r2, [r7, #3]
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	4613      	mov	r3, r2
 800fcea:	687a      	ldr	r2, [r7, #4]
 800fcec:	68b9      	ldr	r1, [r7, #8]
 800fcee:	68f8      	ldr	r0, [r7, #12]
 800fcf0:	f7ff ff89 	bl	800fc06 <ecp_select_comb>
 800fcf4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fcf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d143      	bne.n	800fd84 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	3318      	adds	r3, #24
 800fd00:	2101      	movs	r1, #1
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fa fc94 	bl	800a630 <mbedtls_mpi_lset>
 800fd08:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fd0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d139      	bne.n	800fd84 <ecp_mul_comb_core+0xc4>
        if( f_rng != 0 )
 800fd10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d032      	beq.n	800fd7c <ecp_mul_comb_core+0xbc>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800fd16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fd1a:	68b9      	ldr	r1, [r7, #8]
 800fd1c:	68f8      	ldr	r0, [r7, #12]
 800fd1e:	f7ff fcb7 	bl	800f690 <ecp_randomize_jac>
 800fd22:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fd24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d12c      	bne.n	800fd84 <ecp_mul_comb_core+0xc4>
    }

    while( i != 0 )
 800fd2a:	e027      	b.n	800fd7c <ecp_mul_comb_core+0xbc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	63bb      	str	r3, [r7, #56]	@ 0x38

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800fd32:	68ba      	ldr	r2, [r7, #8]
 800fd34:	68b9      	ldr	r1, [r7, #8]
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f7fe fd98 	bl	800e86c <ecp_double_jac>
 800fd3c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fd3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d11f      	bne.n	800fd84 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800fd44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd48:	4413      	add	r3, r2
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	78fa      	ldrb	r2, [r7, #3]
 800fd4e:	f107 0114 	add.w	r1, r7, #20
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	4613      	mov	r3, r2
 800fd56:	687a      	ldr	r2, [r7, #4]
 800fd58:	68f8      	ldr	r0, [r7, #12]
 800fd5a:	f7ff ff54 	bl	800fc06 <ecp_select_comb>
 800fd5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fd60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10e      	bne.n	800fd84 <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800fd66:	f107 0314 	add.w	r3, r7, #20
 800fd6a:	68ba      	ldr	r2, [r7, #8]
 800fd6c:	68b9      	ldr	r1, [r7, #8]
 800fd6e:	68f8      	ldr	r0, [r7, #12]
 800fd70:	f7ff f956 	bl	800f020 <ecp_add_mixed>
 800fd74:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fd76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d103      	bne.n	800fd84 <ecp_mul_comb_core+0xc4>
    while( i != 0 )
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d1d4      	bne.n	800fd2c <ecp_mul_comb_core+0x6c>
    }

cleanup:
 800fd82:	bf00      	nop

    mbedtls_ecp_point_free( &Txi );
 800fd84:	f107 0314 	add.w	r3, r7, #20
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7fe f937 	bl	800dffc <mbedtls_ecp_point_free>
        rs_ctx->rsm->i = i;
        /* no need to save R, already pointing to rs_ctx->rsm->R */
    }
#endif

    return( ret );
 800fd8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3740      	adds	r7, #64	@ 0x40
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <ecp_comb_recode_scalar>:
                                   const mbedtls_mpi *m,
                                   unsigned char k[COMB_MAX_D + 1],
                                   size_t d,
                                   unsigned char w,
                                   unsigned char *parity_trick )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b08c      	sub	sp, #48	@ 0x30
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	60f8      	str	r0, [r7, #12]
 800fda0:	60b9      	str	r1, [r7, #8]
 800fda2:	607a      	str	r2, [r7, #4]
 800fda4:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 800fda6:	f107 0320 	add.w	r3, r7, #32
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f7fa f9ff 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 800fdb0:	f107 0314 	add.w	r3, r7, #20
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fa f9fa 	bl	800a1ae <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	334c      	adds	r3, #76	@ 0x4c
 800fdbe:	2100      	movs	r1, #0
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fa fc61 	bl	800a688 <mbedtls_mpi_get_bit>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d001      	beq.n	800fdd0 <ecp_comb_recode_scalar+0x38>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800fdcc:	4b24      	ldr	r3, [pc, #144]	@ (800fe60 <ecp_comb_recode_scalar+0xc8>)
 800fdce:	e043      	b.n	800fe58 <ecp_comb_recode_scalar+0xc0>

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	68b8      	ldr	r0, [r7, #8]
 800fdd4:	f7fa fc58 	bl	800a688 <mbedtls_mpi_get_bit>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	bf0c      	ite	eq
 800fdde:	2301      	moveq	r3, #1
 800fde0:	2300      	movne	r3, #0
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	461a      	mov	r2, r3
 800fde6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fde8:	701a      	strb	r2, [r3, #0]

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800fdea:	f107 0320 	add.w	r3, r7, #32
 800fdee:	68b9      	ldr	r1, [r7, #8]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fa fabe 	bl	800a372 <mbedtls_mpi_copy>
 800fdf6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fdf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d121      	bne.n	800fe42 <ecp_comb_recode_scalar+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800fe04:	f107 0314 	add.w	r3, r7, #20
 800fe08:	68ba      	ldr	r2, [r7, #8]
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fb fb1a 	bl	800b444 <mbedtls_mpi_sub_mpi>
 800fe10:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fe12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d114      	bne.n	800fe42 <ecp_comb_recode_scalar+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800fe18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe1a:	781a      	ldrb	r2, [r3, #0]
 800fe1c:	f107 0114 	add.w	r1, r7, #20
 800fe20:	f107 0320 	add.w	r3, r7, #32
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7fa fb00 	bl	800a42a <mbedtls_mpi_safe_cond_assign>
 800fe2a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fe2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d107      	bne.n	800fe42 <ecp_comb_recode_scalar+0xaa>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );
 800fe32:	f107 0320 	add.w	r3, r7, #32
 800fe36:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fe3a:	6839      	ldr	r1, [r7, #0]
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff fd11 	bl	800f864 <ecp_comb_recode_core>

cleanup:
    mbedtls_mpi_free( &mm );
 800fe42:	f107 0314 	add.w	r3, r7, #20
 800fe46:	4618      	mov	r0, r3
 800fe48:	f7fa f9c4 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 800fe4c:	f107 0320 	add.w	r3, r7, #32
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7fa f9bf 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 800fe56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3730      	adds	r7, #48	@ 0x30
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	ffffb080 	.word	0xffffb080

0800fe64 <ecp_mul_comb_after_precomp>:
                                unsigned char w,
                                size_t d,
                                int (*f_rng)(void *, unsigned char *, size_t),
                                void *p_rng,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800fe64:	b590      	push	{r4, r7, lr}
 800fe66:	b0cf      	sub	sp, #316	@ 0x13c
 800fe68:	af06      	add	r7, sp, #24
 800fe6a:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 800fe6e:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800fe72:	6020      	str	r0, [r4, #0]
 800fe74:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800fe78:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800fe7c:	6001      	str	r1, [r0, #0]
 800fe7e:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800fe82:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800fe86:	600a      	str	r2, [r1, #0]
 800fe88:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800fe8c:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800fe90:	6013      	str	r3, [r2, #0]
    int ret;
    unsigned char parity_trick;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *RR = R;
 800fe92:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fe96:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800fea0:	f107 0210 	add.w	r2, r7, #16
 800fea4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fea8:	f5a3 718e 	sub.w	r1, r3, #284	@ 0x11c
 800feac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800feb0:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800feb4:	f207 1317 	addw	r3, r7, #279	@ 0x117
 800feb8:	9301      	str	r3, [sp, #4]
 800feba:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 800febe:	9300      	str	r3, [sp, #0]
 800fec0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800fec4:	6809      	ldr	r1, [r1, #0]
 800fec6:	6800      	ldr	r0, [r0, #0]
 800fec8:	f7ff ff66 	bl	800fd98 <ecp_comb_recode_scalar>
 800fecc:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800fed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d145      	bne.n	800ff64 <ecp_mul_comb_after_precomp+0x100>
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800fed8:	f897 1130 	ldrb.w	r1, [r7, #304]	@ 0x130
 800fedc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fee0:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800fee4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fee8:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800feec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800fef0:	9304      	str	r3, [sp, #16]
 800fef2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800fef6:	9303      	str	r3, [sp, #12]
 800fef8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800fefc:	9302      	str	r3, [sp, #8]
 800fefe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ff02:	9301      	str	r3, [sp, #4]
 800ff04:	f107 0310 	add.w	r3, r7, #16
 800ff08:	9300      	str	r3, [sp, #0]
 800ff0a:	460b      	mov	r3, r1
 800ff0c:	6812      	ldr	r2, [r2, #0]
 800ff0e:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800ff12:	6800      	ldr	r0, [r0, #0]
 800ff14:	f7ff fed4 	bl	800fcc0 <ecp_mul_comb_core>
 800ff18:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ff1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d11f      	bne.n	800ff64 <ecp_mul_comb_after_precomp+0x100>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800ff24:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800ff28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff2c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ff30:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800ff34:	6818      	ldr	r0, [r3, #0]
 800ff36:	f7fe fc55 	bl	800e7e4 <ecp_safe_invert_jac>
 800ff3a:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ff3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d10e      	bne.n	800ff64 <ecp_mul_comb_after_precomp+0x100>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 800ff46:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff4a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ff4e:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800ff52:	6818      	ldr	r0, [r3, #0]
 800ff54:	f7fe f99e 	bl	800e294 <ecp_normalize_jac>
 800ff58:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ff5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff60:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
 800ff62:	bf00      	nop
    return( ret );
 800ff64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd90      	pop	{r4, r7, pc}

0800ff72 <ecp_pick_window_size>:
/*
 * Pick window size based on curve size and whether we optimize for base point
 */
static unsigned char ecp_pick_window_size( const mbedtls_ecp_group *grp,
                                           unsigned char p_eq_g )
{
 800ff72:	b480      	push	{r7}
 800ff74:	b085      	sub	sp, #20
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
 800ff7a:	460b      	mov	r3, r1
 800ff7c:	70fb      	strb	r3, [r7, #3]
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff82:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800ff86:	d301      	bcc.n	800ff8c <ecp_pick_window_size+0x1a>
 800ff88:	2305      	movs	r3, #5
 800ff8a:	e000      	b.n	800ff8e <ecp_pick_window_size+0x1c>
 800ff8c:	2304      	movs	r3, #4
 800ff8e:	73fb      	strb	r3, [r7, #15]
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
 800ff90:	78fb      	ldrb	r3, [r7, #3]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d002      	beq.n	800ff9c <ecp_pick_window_size+0x2a>
        w++;
 800ff96:	7bfb      	ldrb	r3, [r7, #15]
 800ff98:	3301      	adds	r3, #1
 800ff9a:	73fb      	strb	r3, [r7, #15]

    /*
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
 800ff9e:	2b06      	cmp	r3, #6
 800ffa0:	d901      	bls.n	800ffa6 <ecp_pick_window_size+0x34>
        w = MBEDTLS_ECP_WINDOW_SIZE;
 800ffa2:	2306      	movs	r3, #6
 800ffa4:	73fb      	strb	r3, [r7, #15]
    if( w >= grp->nbits )
 800ffa6:	7bfa      	ldrb	r2, [r7, #15]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d301      	bcc.n	800ffb4 <ecp_pick_window_size+0x42>
        w = 2;
 800ffb0:	2302      	movs	r3, #2
 800ffb2:	73fb      	strb	r3, [r7, #15]

    return( w );
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3714      	adds	r7, #20
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
	...

0800ffc4 <ecp_mul_comb>:
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng,
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b090      	sub	sp, #64	@ 0x40
 800ffc8:	af06      	add	r7, sp, #24
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	607a      	str	r2, [r7, #4]
 800ffd0:	603b      	str	r3, [r7, #0]

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	f103 020c 	add.w	r2, r3, #12
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	3334      	adds	r3, #52	@ 0x34
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4610      	mov	r0, r2
 800ffe0:	f7fa ffc6 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d10b      	bne.n	8010002 <ecp_mul_comb+0x3e>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 800ffea:	683a      	ldr	r2, [r7, #0]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	3328      	adds	r3, #40	@ 0x28
 800fff0:	4619      	mov	r1, r3
 800fff2:	4610      	mov	r0, r2
 800fff4:	f7fa ffbc 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 800fff8:	4603      	mov	r3, r0
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d101      	bne.n	8010002 <ecp_mul_comb+0x3e>
 800fffe:	2301      	movs	r3, #1
 8010000:	e000      	b.n	8010004 <ecp_mul_comb+0x40>
 8010002:	2300      	movs	r3, #0
 8010004:	76fb      	strb	r3, [r7, #27]
#else
    p_eq_g = 0;
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
 8010006:	7efb      	ldrb	r3, [r7, #27]
 8010008:	4619      	mov	r1, r3
 801000a:	68f8      	ldr	r0, [r7, #12]
 801000c:	f7ff ffb1 	bl	800ff72 <ecp_pick_window_size>
 8010010:	4603      	mov	r3, r0
 8010012:	76bb      	strb	r3, [r7, #26]
    T_size = 1U << ( w - 1 );
 8010014:	7ebb      	ldrb	r3, [r7, #26]
 8010016:	3b01      	subs	r3, #1
 8010018:	2201      	movs	r2, #1
 801001a:	fa02 f303 	lsl.w	r3, r2, r3
 801001e:	767b      	strb	r3, [r7, #25]
    d = ( grp->nbits + w - 1 ) / w;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010024:	7ebb      	ldrb	r3, [r7, #26]
 8010026:	4413      	add	r3, r2
 8010028:	1e5a      	subs	r2, r3, #1
 801002a:	7ebb      	ldrb	r3, [r7, #26]
 801002c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010030:	617b      	str	r3, [r7, #20]

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
 8010032:	7efb      	ldrb	r3, [r7, #27]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d00a      	beq.n	801004e <ecp_mul_comb+0x8a>
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801003c:	2b00      	cmp	r3, #0
 801003e:	d006      	beq.n	801004e <ecp_mul_comb+0x8a>
    {
        /* second pointer to the same table, will be deleted on exit */
        T = grp->T;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010044:	61fb      	str	r3, [r7, #28]
        T_ok = 1;
 8010046:	2301      	movs	r3, #1
 8010048:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801004c:	e029      	b.n	80100a2 <ecp_mul_comb+0xde>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 801004e:	7e7b      	ldrb	r3, [r7, #25]
 8010050:	2124      	movs	r1, #36	@ 0x24
 8010052:	4618      	mov	r0, r3
 8010054:	f005 fb70 	bl	8015738 <calloc>
 8010058:	4603      	mov	r3, r0
 801005a:	61fb      	str	r3, [r7, #28]
        if( T == NULL )
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d102      	bne.n	8010068 <ecp_mul_comb+0xa4>
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 8010062:	4b42      	ldr	r3, [pc, #264]	@ (801016c <ecp_mul_comb+0x1a8>)
 8010064:	627b      	str	r3, [r7, #36]	@ 0x24
            goto cleanup;
 8010066:	e04e      	b.n	8010106 <ecp_mul_comb+0x142>
        }

        for( i = 0; i < T_size; i++ )
 8010068:	2300      	movs	r3, #0
 801006a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801006e:	e010      	b.n	8010092 <ecp_mul_comb+0xce>
            mbedtls_ecp_point_init( &T[i] );
 8010070:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8010074:	4613      	mov	r3, r2
 8010076:	00db      	lsls	r3, r3, #3
 8010078:	4413      	add	r3, r2
 801007a:	009b      	lsls	r3, r3, #2
 801007c:	461a      	mov	r2, r3
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	4413      	add	r3, r2
 8010082:	4618      	mov	r0, r3
 8010084:	f7fd ff4f 	bl	800df26 <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
 8010088:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801008c:	3301      	adds	r3, #1
 801008e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010092:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8010096:	7e7b      	ldrb	r3, [r7, #25]
 8010098:	429a      	cmp	r2, r3
 801009a:	d3e9      	bcc.n	8010070 <ecp_mul_comb+0xac>

        T_ok = 0;
 801009c:	2300      	movs	r3, #0
 801009e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
 80100a2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d117      	bne.n	80100da <ecp_mul_comb+0x116>
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 80100aa:	7eba      	ldrb	r2, [r7, #26]
 80100ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ae:	9301      	str	r3, [sp, #4]
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	4613      	mov	r3, r2
 80100b6:	683a      	ldr	r2, [r7, #0]
 80100b8:	69f9      	ldr	r1, [r7, #28]
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f7ff fc7f 	bl	800f9be <ecp_precompute_comb>
 80100c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80100c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d11e      	bne.n	8010106 <ecp_mul_comb+0x142>

        if( p_eq_g )
 80100c8:	7efb      	ldrb	r3, [r7, #27]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d005      	beq.n	80100da <ecp_mul_comb+0x116>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	69fa      	ldr	r2, [r7, #28]
 80100d2:	675a      	str	r2, [r3, #116]	@ 0x74
            grp->T_size = T_size;
 80100d4:	7e7a      	ldrb	r2, [r7, #25]
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	679a      	str	r2, [r3, #120]	@ 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 80100da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100dc:	9305      	str	r3, [sp, #20]
 80100de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100e0:	9304      	str	r3, [sp, #16]
 80100e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100e4:	9303      	str	r3, [sp, #12]
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	9302      	str	r3, [sp, #8]
 80100ea:	7ebb      	ldrb	r3, [r7, #26]
 80100ec:	9301      	str	r3, [sp, #4]
 80100ee:	7e7b      	ldrb	r3, [r7, #25]
 80100f0:	9300      	str	r3, [sp, #0]
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	687a      	ldr	r2, [r7, #4]
 80100f6:	68b9      	ldr	r1, [r7, #8]
 80100f8:	68f8      	ldr	r0, [r7, #12]
 80100fa:	f7ff feb3 	bl	800fe64 <ecp_mul_comb_after_precomp>
 80100fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8010100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010102:	2b00      	cmp	r3, #0
                                                 T, T_size, w, d,
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:
 8010104:	bf00      	nop

    /* does T belong to the group? */
    if( T == grp->T )
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801010a:	69fa      	ldr	r2, [r7, #28]
 801010c:	429a      	cmp	r2, r3
 801010e:	d101      	bne.n	8010114 <ecp_mul_comb+0x150>
        T = NULL;
 8010110:	2300      	movs	r3, #0
 8010112:	61fb      	str	r3, [r7, #28]
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d01c      	beq.n	8010154 <ecp_mul_comb+0x190>
    {
        for( i = 0; i < T_size; i++ )
 801011a:	2300      	movs	r3, #0
 801011c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010120:	e010      	b.n	8010144 <ecp_mul_comb+0x180>
            mbedtls_ecp_point_free( &T[i] );
 8010122:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8010126:	4613      	mov	r3, r2
 8010128:	00db      	lsls	r3, r3, #3
 801012a:	4413      	add	r3, r2
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	461a      	mov	r2, r3
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	4413      	add	r3, r2
 8010134:	4618      	mov	r0, r3
 8010136:	f7fd ff61 	bl	800dffc <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
 801013a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801013e:	3301      	adds	r3, #1
 8010140:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010144:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8010148:	7e7b      	ldrb	r3, [r7, #25]
 801014a:	429a      	cmp	r2, r3
 801014c:	d3e9      	bcc.n	8010122 <ecp_mul_comb+0x15e>
        mbedtls_free( T );
 801014e:	69f8      	ldr	r0, [r7, #28]
 8010150:	f005 fb0e 	bl	8015770 <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
 8010154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010156:	2b00      	cmp	r3, #0
 8010158:	d002      	beq.n	8010160 <ecp_mul_comb+0x19c>
        mbedtls_ecp_point_free( R );
 801015a:	68b8      	ldr	r0, [r7, #8]
 801015c:	f7fd ff4e 	bl	800dffc <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( rsm );

    return( ret );
 8010160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010162:	4618      	mov	r0, r3
 8010164:	3728      	adds	r7, #40	@ 0x28
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	ffffb280 	.word	0xffffb280

08010170 <ecp_normalize_mxz>:
/*
 * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1
 * Cost: 1M + 1I
 */
static int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	6039      	str	r1, [r7, #0]
#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_mxz( grp, P ) );
#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	f103 0018 	add.w	r0, r3, #24
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	f103 0118 	add.w	r1, r3, #24
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	3304      	adds	r3, #4
 801018a:	461a      	mov	r2, r3
 801018c:	f7fd fb2c 	bl	800d7e8 <mbedtls_mpi_inv_mod>
 8010190:	60f8      	str	r0, [r7, #12]
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d122      	bne.n	80101de <ecp_normalize_mxz+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 8010198:	6838      	ldr	r0, [r7, #0]
 801019a:	6839      	ldr	r1, [r7, #0]
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	3318      	adds	r3, #24
 80101a0:	461a      	mov	r2, r3
 80101a2:	f7fc fd84 	bl	800ccae <mbedtls_mpi_mul_mpi>
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d117      	bne.n	80101de <ecp_normalize_mxz+0x6e>
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	6879      	ldr	r1, [r7, #4]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fe f80a 	bl	800e1cc <ecp_modp>
 80101b8:	60f8      	str	r0, [r7, #12]
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d10e      	bne.n	80101de <ecp_normalize_mxz+0x6e>
 80101c0:	4b09      	ldr	r3, [pc, #36]	@ (80101e8 <ecp_normalize_mxz+0x78>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	3301      	adds	r3, #1
 80101c6:	4a08      	ldr	r2, [pc, #32]	@ (80101e8 <ecp_normalize_mxz+0x78>)
 80101c8:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	3318      	adds	r3, #24
 80101ce:	2101      	movs	r1, #1
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fa fa2d 	bl	800a630 <mbedtls_mpi_lset>
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2b00      	cmp	r3, #0

cleanup:
 80101dc:	bf00      	nop
    return( ret );
 80101de:	68fb      	ldr	r3, [r7, #12]
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	2400257c 	.word	0x2400257c

080101ec <ecp_randomize_mxz>:
 * This countermeasure was first suggested in [2].
 * Cost: 2M
 */
static int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b08a      	sub	sp, #40	@ 0x28
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l;
    size_t p_size;
    int count = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	623b      	str	r3, [r7, #32]
#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );
#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010202:	3307      	adds	r3, #7
 8010204:	08db      	lsrs	r3, r3, #3
 8010206:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi_init( &l );
 8010208:	f107 0310 	add.w	r3, r7, #16
 801020c:	4618      	mov	r0, r3
 801020e:	f7f9 ffce 	bl	800a1ae <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 8010212:	f107 0010 	add.w	r0, r7, #16
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	687a      	ldr	r2, [r7, #4]
 801021a:	69f9      	ldr	r1, [r7, #28]
 801021c:	f7fd fa9c 	bl	800d758 <mbedtls_mpi_fill_random>
 8010220:	6278      	str	r0, [r7, #36]	@ 0x24
 8010222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010224:	2b00      	cmp	r3, #0
 8010226:	d15b      	bne.n	80102e0 <ecp_randomize_mxz+0xf4>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 8010228:	e009      	b.n	801023e <ecp_randomize_mxz+0x52>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 801022a:	f107 0310 	add.w	r3, r7, #16
 801022e:	2101      	movs	r1, #1
 8010230:	4618      	mov	r0, r3
 8010232:	f7fa fd80 	bl	800ad36 <mbedtls_mpi_shift_r>
 8010236:	6278      	str	r0, [r7, #36]	@ 0x24
 8010238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801023a:	2b00      	cmp	r3, #0
 801023c:	d150      	bne.n	80102e0 <ecp_randomize_mxz+0xf4>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	1d1a      	adds	r2, r3, #4
 8010242:	f107 0310 	add.w	r3, r7, #16
 8010246:	4611      	mov	r1, r2
 8010248:	4618      	mov	r0, r3
 801024a:	f7fa fe91 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 801024e:	4603      	mov	r3, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	daea      	bge.n	801022a <ecp_randomize_mxz+0x3e>

        if( count++ > 10 )
 8010254:	6a3b      	ldr	r3, [r7, #32]
 8010256:	1c5a      	adds	r2, r3, #1
 8010258:	623a      	str	r2, [r7, #32]
 801025a:	2b0a      	cmp	r3, #10
 801025c:	dd01      	ble.n	8010262 <ecp_randomize_mxz+0x76>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 801025e:	4b25      	ldr	r3, [pc, #148]	@ (80102f4 <ecp_randomize_mxz+0x108>)
 8010260:	e044      	b.n	80102ec <ecp_randomize_mxz+0x100>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 8010262:	f107 0310 	add.w	r3, r7, #16
 8010266:	2101      	movs	r1, #1
 8010268:	4618      	mov	r0, r3
 801026a:	f7fa ff1c 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	ddce      	ble.n	8010212 <ecp_randomize_mxz+0x26>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	68b9      	ldr	r1, [r7, #8]
 8010278:	f107 0210 	add.w	r2, r7, #16
 801027c:	4618      	mov	r0, r3
 801027e:	f7fc fd16 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8010282:	6278      	str	r0, [r7, #36]	@ 0x24
 8010284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010286:	2b00      	cmp	r3, #0
 8010288:	d12a      	bne.n	80102e0 <ecp_randomize_mxz+0xf4>
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	68f9      	ldr	r1, [r7, #12]
 801028e:	4618      	mov	r0, r3
 8010290:	f7fd ff9c 	bl	800e1cc <ecp_modp>
 8010294:	6278      	str	r0, [r7, #36]	@ 0x24
 8010296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010298:	2b00      	cmp	r3, #0
 801029a:	d121      	bne.n	80102e0 <ecp_randomize_mxz+0xf4>
 801029c:	4b16      	ldr	r3, [pc, #88]	@ (80102f8 <ecp_randomize_mxz+0x10c>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	3301      	adds	r3, #1
 80102a2:	4a15      	ldr	r2, [pc, #84]	@ (80102f8 <ecp_randomize_mxz+0x10c>)
 80102a4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	f103 0018 	add.w	r0, r3, #24
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	3318      	adds	r3, #24
 80102b0:	f107 0210 	add.w	r2, r7, #16
 80102b4:	4619      	mov	r1, r3
 80102b6:	f7fc fcfa 	bl	800ccae <mbedtls_mpi_mul_mpi>
 80102ba:	6278      	str	r0, [r7, #36]	@ 0x24
 80102bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d10e      	bne.n	80102e0 <ecp_randomize_mxz+0xf4>
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	3318      	adds	r3, #24
 80102c6:	68f9      	ldr	r1, [r7, #12]
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fd ff7f 	bl	800e1cc <ecp_modp>
 80102ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80102d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d104      	bne.n	80102e0 <ecp_randomize_mxz+0xf4>
 80102d6:	4b08      	ldr	r3, [pc, #32]	@ (80102f8 <ecp_randomize_mxz+0x10c>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	3301      	adds	r3, #1
 80102dc:	4a06      	ldr	r2, [pc, #24]	@ (80102f8 <ecp_randomize_mxz+0x10c>)
 80102de:	6013      	str	r3, [r2, #0]

cleanup:
    mbedtls_mpi_free( &l );
 80102e0:	f107 0310 	add.w	r3, r7, #16
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7f9 ff75 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 80102ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3728      	adds	r7, #40	@ 0x28
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	ffffb300 	.word	0xffffb300
 80102f8:	2400257c 	.word	0x2400257c

080102fc <ecp_double_add_mxz>:
 */
static int ecp_double_add_mxz( const mbedtls_ecp_group *grp,
                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,
                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,
                               const mbedtls_mpi *d )
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b0a0      	sub	sp, #128	@ 0x80
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
 8010308:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d ) );
#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */

    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
 801030a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801030e:	4618      	mov	r0, r3
 8010310:	f7f9 ff4d 	bl	800a1ae <mbedtls_mpi_init>
 8010314:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010318:	4618      	mov	r0, r3
 801031a:	f7f9 ff48 	bl	800a1ae <mbedtls_mpi_init>
 801031e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8010322:	4618      	mov	r0, r3
 8010324:	f7f9 ff43 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
 8010328:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801032c:	4618      	mov	r0, r3
 801032e:	f7f9 ff3e 	bl	800a1ae <mbedtls_mpi_init>
 8010332:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010336:	4618      	mov	r0, r3
 8010338:	f7f9 ff39 	bl	800a1ae <mbedtls_mpi_init>
 801033c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010340:	4618      	mov	r0, r3
 8010342:	f7f9 ff34 	bl	800a1ae <mbedtls_mpi_init>
    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
 8010346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801034a:	4618      	mov	r0, r3
 801034c:	f7f9 ff2f 	bl	800a1ae <mbedtls_mpi_init>
 8010350:	f107 031c 	add.w	r3, r7, #28
 8010354:	4618      	mov	r0, r3
 8010356:	f7f9 ff2a 	bl	800a1ae <mbedtls_mpi_init>
 801035a:	f107 0310 	add.w	r3, r7, #16
 801035e:	4618      	mov	r0, r3
 8010360:	f7f9 ff25 	bl	800a1ae <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 8010364:	6839      	ldr	r1, [r7, #0]
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	f103 0218 	add.w	r2, r3, #24
 801036c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010370:	4618      	mov	r0, r3
 8010372:	f7fb f823 	bl	800b3bc <mbedtls_mpi_add_mpi>
 8010376:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010378:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801037a:	2b00      	cmp	r3, #0
 801037c:	f040 825c 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 8010380:	e00d      	b.n	801039e <ecp_double_add_mxz+0xa2>
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	1d1a      	adds	r2, r3, #4
 8010386:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801038a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801038e:	4618      	mov	r0, r3
 8010390:	f7fa ffb4 	bl	800b2fc <mbedtls_mpi_sub_abs>
 8010394:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010396:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010398:	2b00      	cmp	r3, #0
 801039a:	f040 824d 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	1d1a      	adds	r2, r3, #4
 80103a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80103a6:	4611      	mov	r1, r2
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fa fde1 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 80103ae:	4603      	mov	r3, r0
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	dae6      	bge.n	8010382 <ecp_double_add_mxz+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 80103b4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80103b8:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80103bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7fc fc74 	bl	800ccae <mbedtls_mpi_mul_mpi>
 80103c6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80103c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f040 8234 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80103d0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80103d4:	68f9      	ldr	r1, [r7, #12]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fd fef8 	bl	800e1cc <ecp_modp>
 80103dc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80103de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	f040 8229 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80103e6:	4ba5      	ldr	r3, [pc, #660]	@ (801067c <ecp_double_add_mxz+0x380>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	3301      	adds	r3, #1
 80103ec:	4aa3      	ldr	r2, [pc, #652]	@ (801067c <ecp_double_add_mxz+0x380>)
 80103ee:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 80103f0:	6839      	ldr	r1, [r7, #0]
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	f103 0218 	add.w	r2, r3, #24
 80103f8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fb f821 	bl	800b444 <mbedtls_mpi_sub_mpi>
 8010402:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010404:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010406:	2b00      	cmp	r3, #0
 8010408:	f040 8216 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 801040c:	e00d      	b.n	801042a <ecp_double_add_mxz+0x12e>
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	1d1a      	adds	r2, r3, #4
 8010412:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8010416:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801041a:	4618      	mov	r0, r3
 801041c:	f7fa ffce 	bl	800b3bc <mbedtls_mpi_add_mpi>
 8010420:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010422:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010424:	2b00      	cmp	r3, #0
 8010426:	f040 8207 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 801042a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801042c:	2b00      	cmp	r3, #0
 801042e:	da08      	bge.n	8010442 <ecp_double_add_mxz+0x146>
 8010430:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8010434:	2100      	movs	r1, #0
 8010436:	4618      	mov	r0, r3
 8010438:	f7fa fe35 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d1e5      	bne.n	801040e <ecp_double_add_mxz+0x112>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 8010442:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8010446:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801044a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801044e:	4618      	mov	r0, r3
 8010450:	f7fc fc2d 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8010454:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010456:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010458:	2b00      	cmp	r3, #0
 801045a:	f040 81ed 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 801045e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010462:	68f9      	ldr	r1, [r7, #12]
 8010464:	4618      	mov	r0, r3
 8010466:	f7fd feb1 	bl	800e1cc <ecp_modp>
 801046a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801046c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801046e:	2b00      	cmp	r3, #0
 8010470:	f040 81e2 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 8010474:	4b81      	ldr	r3, [pc, #516]	@ (801067c <ecp_double_add_mxz+0x380>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3301      	adds	r3, #1
 801047a:	4a80      	ldr	r2, [pc, #512]	@ (801067c <ecp_double_add_mxz+0x380>)
 801047c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 801047e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8010482:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8010486:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801048a:	4618      	mov	r0, r3
 801048c:	f7fa ffda 	bl	800b444 <mbedtls_mpi_sub_mpi>
 8010490:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010494:	2b00      	cmp	r3, #0
 8010496:	f040 81cf 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 801049a:	e00d      	b.n	80104b8 <ecp_double_add_mxz+0x1bc>
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	1d1a      	adds	r2, r3, #4
 80104a0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80104a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fa ff87 	bl	800b3bc <mbedtls_mpi_add_mpi>
 80104ae:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80104b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f040 81c0 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80104b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	da08      	bge.n	80104d0 <ecp_double_add_mxz+0x1d4>
 80104be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80104c2:	2100      	movs	r1, #0
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7fa fdee 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 80104ca:	4603      	mov	r3, r0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d1e5      	bne.n	801049c <ecp_double_add_mxz+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 80104d0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80104d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80104d8:	f103 0218 	add.w	r2, r3, #24
 80104dc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7fa ff6b 	bl	800b3bc <mbedtls_mpi_add_mpi>
 80104e6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80104e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	f040 81a4 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80104f0:	e00d      	b.n	801050e <ecp_double_add_mxz+0x212>
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	1d1a      	adds	r2, r3, #4
 80104f6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80104fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fa fefc 	bl	800b2fc <mbedtls_mpi_sub_abs>
 8010504:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010508:	2b00      	cmp	r3, #0
 801050a:	f040 8195 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	1d1a      	adds	r2, r3, #4
 8010512:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010516:	4611      	mov	r1, r2
 8010518:	4618      	mov	r0, r3
 801051a:	f7fa fd29 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 801051e:	4603      	mov	r3, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	dae6      	bge.n	80104f2 <ecp_double_add_mxz+0x1f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 8010524:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8010528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801052c:	f103 0218 	add.w	r2, r3, #24
 8010530:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010534:	4618      	mov	r0, r3
 8010536:	f7fa ff85 	bl	800b444 <mbedtls_mpi_sub_mpi>
 801053a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801053c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801053e:	2b00      	cmp	r3, #0
 8010540:	f040 817a 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 8010544:	e00d      	b.n	8010562 <ecp_double_add_mxz+0x266>
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	1d1a      	adds	r2, r3, #4
 801054a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801054e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010552:	4618      	mov	r0, r3
 8010554:	f7fa ff32 	bl	800b3bc <mbedtls_mpi_add_mpi>
 8010558:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801055a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801055c:	2b00      	cmp	r3, #0
 801055e:	f040 816b 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 8010562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010564:	2b00      	cmp	r3, #0
 8010566:	da08      	bge.n	801057a <ecp_double_add_mxz+0x27e>
 8010568:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801056c:	2100      	movs	r1, #0
 801056e:	4618      	mov	r0, r3
 8010570:	f7fa fd99 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 8010574:	4603      	mov	r3, r0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1e5      	bne.n	8010546 <ecp_double_add_mxz+0x24a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 801057a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801057e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010582:	f107 031c 	add.w	r3, r7, #28
 8010586:	4618      	mov	r0, r3
 8010588:	f7fc fb91 	bl	800ccae <mbedtls_mpi_mul_mpi>
 801058c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801058e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010590:	2b00      	cmp	r3, #0
 8010592:	f040 8151 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 8010596:	f107 031c 	add.w	r3, r7, #28
 801059a:	68f9      	ldr	r1, [r7, #12]
 801059c:	4618      	mov	r0, r3
 801059e:	f7fd fe15 	bl	800e1cc <ecp_modp>
 80105a2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80105a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	f040 8146 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80105ac:	4b33      	ldr	r3, [pc, #204]	@ (801067c <ecp_double_add_mxz+0x380>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	3301      	adds	r3, #1
 80105b2:	4a32      	ldr	r2, [pc, #200]	@ (801067c <ecp_double_add_mxz+0x380>)
 80105b4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 80105b6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80105ba:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80105be:	f107 0310 	add.w	r3, r7, #16
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7fc fb73 	bl	800ccae <mbedtls_mpi_mul_mpi>
 80105c8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80105ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	f040 8133 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80105d2:	f107 0310 	add.w	r3, r7, #16
 80105d6:	68f9      	ldr	r1, [r7, #12]
 80105d8:	4618      	mov	r0, r3
 80105da:	f7fd fdf7 	bl	800e1cc <ecp_modp>
 80105de:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80105e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	f040 8128 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80105e8:	4b24      	ldr	r3, [pc, #144]	@ (801067c <ecp_double_add_mxz+0x380>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	3301      	adds	r3, #1
 80105ee:	4a23      	ldr	r2, [pc, #140]	@ (801067c <ecp_double_add_mxz+0x380>)
 80105f0:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f107 0210 	add.w	r2, r7, #16
 80105f8:	f107 011c 	add.w	r1, r7, #28
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7fa fedd 	bl	800b3bc <mbedtls_mpi_add_mpi>
 8010602:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010604:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010606:	2b00      	cmp	r3, #0
 8010608:	f040 8116 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	68f9      	ldr	r1, [r7, #12]
 8010610:	4618      	mov	r0, r3
 8010612:	f7fd fddb 	bl	800e1cc <ecp_modp>
 8010616:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010618:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801061a:	2b00      	cmp	r3, #0
 801061c:	f040 810c 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 8010620:	4b16      	ldr	r3, [pc, #88]	@ (801067c <ecp_double_add_mxz+0x380>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	3301      	adds	r3, #1
 8010626:	4a15      	ldr	r2, [pc, #84]	@ (801067c <ecp_double_add_mxz+0x380>)
 8010628:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6879      	ldr	r1, [r7, #4]
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	4618      	mov	r0, r3
 8010632:	f7fc fb3c 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8010636:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010638:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801063a:	2b00      	cmp	r3, #0
 801063c:	f040 80fc 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	68f9      	ldr	r1, [r7, #12]
 8010644:	4618      	mov	r0, r3
 8010646:	f7fd fdc1 	bl	800e1cc <ecp_modp>
 801064a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801064c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801064e:	2b00      	cmp	r3, #0
 8010650:	f040 80f2 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 8010654:	4b09      	ldr	r3, [pc, #36]	@ (801067c <ecp_double_add_mxz+0x380>)
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	3301      	adds	r3, #1
 801065a:	4a08      	ldr	r2, [pc, #32]	@ (801067c <ecp_double_add_mxz+0x380>)
 801065c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	3318      	adds	r3, #24
 8010662:	f107 0210 	add.w	r2, r7, #16
 8010666:	f107 011c 	add.w	r1, r7, #28
 801066a:	4618      	mov	r0, r3
 801066c:	f7fa feea 	bl	800b444 <mbedtls_mpi_sub_mpi>
 8010670:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010672:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010674:	2b00      	cmp	r3, #0
 8010676:	f040 80df 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 801067a:	e011      	b.n	80106a0 <ecp_double_add_mxz+0x3a4>
 801067c:	2400257c 	.word	0x2400257c
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f103 0018 	add.w	r0, r3, #24
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f103 0118 	add.w	r1, r3, #24
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	3304      	adds	r3, #4
 8010690:	461a      	mov	r2, r3
 8010692:	f7fa fe93 	bl	800b3bc <mbedtls_mpi_add_mpi>
 8010696:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010698:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801069a:	2b00      	cmp	r3, #0
 801069c:	f040 80cc 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	699b      	ldr	r3, [r3, #24]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	da08      	bge.n	80106ba <ecp_double_add_mxz+0x3be>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	3318      	adds	r3, #24
 80106ac:	2100      	movs	r1, #0
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7fa fcf9 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d1e2      	bne.n	8010680 <ecp_double_add_mxz+0x384>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f103 0018 	add.w	r0, r3, #24
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f103 0118 	add.w	r1, r3, #24
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	3318      	adds	r3, #24
 80106ca:	461a      	mov	r2, r3
 80106cc:	f7fc faef 	bl	800ccae <mbedtls_mpi_mul_mpi>
 80106d0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80106d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f040 80af 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	3318      	adds	r3, #24
 80106de:	68f9      	ldr	r1, [r7, #12]
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7fd fd73 	bl	800e1cc <ecp_modp>
 80106e6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80106e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f040 80a4 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 80106f0:	4b6a      	ldr	r3, [pc, #424]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	3301      	adds	r3, #1
 80106f6:	4a69      	ldr	r2, [pc, #420]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 80106f8:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f103 0018 	add.w	r0, r3, #24
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	3318      	adds	r3, #24
 8010704:	461a      	mov	r2, r3
 8010706:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801070a:	f7fc fad0 	bl	800ccae <mbedtls_mpi_mul_mpi>
 801070e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010710:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010712:	2b00      	cmp	r3, #0
 8010714:	f040 8090 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	3318      	adds	r3, #24
 801071c:	68f9      	ldr	r1, [r7, #12]
 801071e:	4618      	mov	r0, r3
 8010720:	f7fd fd54 	bl	800e1cc <ecp_modp>
 8010724:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010726:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010728:	2b00      	cmp	r3, #0
 801072a:	f040 8085 	bne.w	8010838 <ecp_double_add_mxz+0x53c>
 801072e:	4b5b      	ldr	r3, [pc, #364]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3301      	adds	r3, #1
 8010734:	4a59      	ldr	r2, [pc, #356]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 8010736:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 8010738:	68bb      	ldr	r3, [r7, #8]
 801073a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 801073e:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8010742:	4618      	mov	r0, r3
 8010744:	f7fc fab3 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8010748:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801074a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801074c:	2b00      	cmp	r3, #0
 801074e:	d173      	bne.n	8010838 <ecp_double_add_mxz+0x53c>
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	68f9      	ldr	r1, [r7, #12]
 8010754:	4618      	mov	r0, r3
 8010756:	f7fd fd39 	bl	800e1cc <ecp_modp>
 801075a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801075c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801075e:	2b00      	cmp	r3, #0
 8010760:	d16a      	bne.n	8010838 <ecp_double_add_mxz+0x53c>
 8010762:	4b4e      	ldr	r3, [pc, #312]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3301      	adds	r3, #1
 8010768:	4a4c      	ldr	r2, [pc, #304]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 801076a:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	f103 0018 	add.w	r0, r3, #24
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	3310      	adds	r3, #16
 8010776:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801077a:	4619      	mov	r1, r3
 801077c:	f7fc fa97 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8010780:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010782:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010784:	2b00      	cmp	r3, #0
 8010786:	d157      	bne.n	8010838 <ecp_double_add_mxz+0x53c>
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	3318      	adds	r3, #24
 801078c:	68f9      	ldr	r1, [r7, #12]
 801078e:	4618      	mov	r0, r3
 8010790:	f7fd fd1c 	bl	800e1cc <ecp_modp>
 8010794:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010796:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010798:	2b00      	cmp	r3, #0
 801079a:	d14d      	bne.n	8010838 <ecp_double_add_mxz+0x53c>
 801079c:	4b3f      	ldr	r3, [pc, #252]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	3301      	adds	r3, #1
 80107a2:	4a3e      	ldr	r2, [pc, #248]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 80107a4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	f103 0018 	add.w	r0, r3, #24
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	f103 0218 	add.w	r2, r3, #24
 80107b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80107b6:	4619      	mov	r1, r3
 80107b8:	f7fa fe00 	bl	800b3bc <mbedtls_mpi_add_mpi>
 80107bc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80107be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d139      	bne.n	8010838 <ecp_double_add_mxz+0x53c>
 80107c4:	e00e      	b.n	80107e4 <ecp_double_add_mxz+0x4e8>
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	f103 0018 	add.w	r0, r3, #24
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	f103 0118 	add.w	r1, r3, #24
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	3304      	adds	r3, #4
 80107d6:	461a      	mov	r2, r3
 80107d8:	f7fa fd90 	bl	800b2fc <mbedtls_mpi_sub_abs>
 80107dc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80107de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d129      	bne.n	8010838 <ecp_double_add_mxz+0x53c>
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	f103 0218 	add.w	r2, r3, #24
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	3304      	adds	r3, #4
 80107ee:	4619      	mov	r1, r3
 80107f0:	4610      	mov	r0, r2
 80107f2:	f7fa fbbd 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	dae4      	bge.n	80107c6 <ecp_double_add_mxz+0x4ca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	f103 0018 	add.w	r0, r3, #24
 8010802:	68bb      	ldr	r3, [r7, #8]
 8010804:	f103 0218 	add.w	r2, r3, #24
 8010808:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801080c:	4619      	mov	r1, r3
 801080e:	f7fc fa4e 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8010812:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010814:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010816:	2b00      	cmp	r3, #0
 8010818:	d10e      	bne.n	8010838 <ecp_double_add_mxz+0x53c>
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	3318      	adds	r3, #24
 801081e:	68f9      	ldr	r1, [r7, #12]
 8010820:	4618      	mov	r0, r3
 8010822:	f7fd fcd3 	bl	800e1cc <ecp_modp>
 8010826:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010828:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801082a:	2b00      	cmp	r3, #0
 801082c:	d104      	bne.n	8010838 <ecp_double_add_mxz+0x53c>
 801082e:	4b1b      	ldr	r3, [pc, #108]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	3301      	adds	r3, #1
 8010834:	4a19      	ldr	r2, [pc, #100]	@ (801089c <ecp_double_add_mxz+0x5a0>)
 8010836:	6013      	str	r3, [r2, #0]

cleanup:
    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
 8010838:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801083c:	4618      	mov	r0, r3
 801083e:	f7f9 fcc9 	bl	800a1d4 <mbedtls_mpi_free>
 8010842:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010846:	4618      	mov	r0, r3
 8010848:	f7f9 fcc4 	bl	800a1d4 <mbedtls_mpi_free>
 801084c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8010850:	4618      	mov	r0, r3
 8010852:	f7f9 fcbf 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
 8010856:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801085a:	4618      	mov	r0, r3
 801085c:	f7f9 fcba 	bl	800a1d4 <mbedtls_mpi_free>
 8010860:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010864:	4618      	mov	r0, r3
 8010866:	f7f9 fcb5 	bl	800a1d4 <mbedtls_mpi_free>
 801086a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801086e:	4618      	mov	r0, r3
 8010870:	f7f9 fcb0 	bl	800a1d4 <mbedtls_mpi_free>
    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
 8010874:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010878:	4618      	mov	r0, r3
 801087a:	f7f9 fcab 	bl	800a1d4 <mbedtls_mpi_free>
 801087e:	f107 031c 	add.w	r3, r7, #28
 8010882:	4618      	mov	r0, r3
 8010884:	f7f9 fca6 	bl	800a1d4 <mbedtls_mpi_free>
 8010888:	f107 0310 	add.w	r3, r7, #16
 801088c:	4618      	mov	r0, r3
 801088e:	f7f9 fca1 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 8010892:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 8010894:	4618      	mov	r0, r3
 8010896:	3780      	adds	r7, #128	@ 0x80
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}
 801089c:	2400257c 	.word	0x2400257c

080108a0 <ecp_mul_mxz>:
 */
static int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                        int (*f_rng)(void *, unsigned char *, size_t),
                        void *p_rng )
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b096      	sub	sp, #88	@ 0x58
 80108a4:	af02      	add	r7, sp, #8
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	607a      	str	r2, [r7, #4]
 80108ac:	603b      	str	r3, [r7, #0]
    size_t i;
    unsigned char b;
    mbedtls_ecp_point RP;
    mbedtls_mpi PX;

    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
 80108ae:	f107 0320 	add.w	r3, r7, #32
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7fd fb37 	bl	800df26 <mbedtls_ecp_point_init>
 80108b8:	f107 0314 	add.w	r3, r7, #20
 80108bc:	4618      	mov	r0, r3
 80108be:	f7f9 fc76 	bl	800a1ae <mbedtls_mpi_init>

    /* Save PX and read from P before writing to R, in case P == R */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	f107 0314 	add.w	r3, r7, #20
 80108c8:	4611      	mov	r1, r2
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7f9 fd51 	bl	800a372 <mbedtls_mpi_copy>
 80108d0:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80108d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	f040 80ac 	bne.w	8010a32 <ecp_mul_mxz+0x192>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 80108da:	f107 0320 	add.w	r3, r7, #32
 80108de:	6839      	ldr	r1, [r7, #0]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fd fc0b 	bl	800e0fc <mbedtls_ecp_copy>
 80108e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80108e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	f040 80a1 	bne.w	8010a32 <ecp_mul_mxz+0x192>

    /* Set R to zero in modified x/z coordinates */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	2101      	movs	r1, #1
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7f9 fe9b 	bl	800a630 <mbedtls_mpi_lset>
 80108fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80108fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108fe:	2b00      	cmp	r3, #0
 8010900:	f040 8097 	bne.w	8010a32 <ecp_mul_mxz+0x192>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	3318      	adds	r3, #24
 8010908:	2100      	movs	r1, #0
 801090a:	4618      	mov	r0, r3
 801090c:	f7f9 fe90 	bl	800a630 <mbedtls_mpi_lset>
 8010910:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010914:	2b00      	cmp	r3, #0
 8010916:	f040 808c 	bne.w	8010a32 <ecp_mul_mxz+0x192>
    mbedtls_mpi_free( &R->Y );
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	330c      	adds	r3, #12
 801091e:	4618      	mov	r0, r3
 8010920:	f7f9 fc58 	bl	800a1d4 <mbedtls_mpi_free>

    /* RP.X might be sligtly larger than P, so reduce it */
    MOD_ADD( RP.X );
 8010924:	e00c      	b.n	8010940 <ecp_mul_mxz+0xa0>
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	1d1a      	adds	r2, r3, #4
 801092a:	f107 0120 	add.w	r1, r7, #32
 801092e:	f107 0320 	add.w	r3, r7, #32
 8010932:	4618      	mov	r0, r3
 8010934:	f7fa fce2 	bl	800b2fc <mbedtls_mpi_sub_abs>
 8010938:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801093a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801093c:	2b00      	cmp	r3, #0
 801093e:	d178      	bne.n	8010a32 <ecp_mul_mxz+0x192>
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	1d1a      	adds	r2, r3, #4
 8010944:	f107 0320 	add.w	r3, r7, #32
 8010948:	4611      	mov	r1, r2
 801094a:	4618      	mov	r0, r3
 801094c:	f7fa fb10 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	dae7      	bge.n	8010926 <ecp_mul_mxz+0x86>

    /* Randomize coordinates of the starting point */
    if( f_rng != NULL )
 8010956:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00a      	beq.n	8010972 <ecp_mul_mxz+0xd2>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 801095c:	f107 0120 	add.w	r1, r7, #32
 8010960:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010962:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7ff fc41 	bl	80101ec <ecp_randomize_mxz>
 801096a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801096c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801096e:	2b00      	cmp	r3, #0
 8010970:	d15f      	bne.n	8010a32 <ecp_mul_mxz+0x192>

    /* Loop invariant: R = result so far, RP = R + P */
    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7f9 ff52 	bl	800a81c <mbedtls_mpi_bitlen>
 8010978:	64b8      	str	r0, [r7, #72]	@ 0x48
    while( i-- > 0 )
 801097a:	e04d      	b.n	8010a18 <ecp_mul_mxz+0x178>
    {
        b = mbedtls_mpi_get_bit( m, i );
 801097c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f7f9 fe82 	bl	800a688 <mbedtls_mpi_get_bit>
 8010984:	4603      	mov	r3, r0
 8010986:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * which is:
         *  if (b) double_add( RP, R, RP, R )
         *  else   double_add( R, RP, R, RP )
         * but using safe conditional swaps to avoid leaks
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010990:	f107 0120 	add.w	r1, r7, #32
 8010994:	4618      	mov	r0, r3
 8010996:	f7f9 fdb9 	bl	800a50c <mbedtls_mpi_safe_cond_swap>
 801099a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801099c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d147      	bne.n	8010a32 <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	f103 0018 	add.w	r0, r3, #24
 80109a8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80109ac:	f107 0320 	add.w	r3, r7, #32
 80109b0:	3318      	adds	r3, #24
 80109b2:	4619      	mov	r1, r3
 80109b4:	f7f9 fdaa 	bl	800a50c <mbedtls_mpi_safe_cond_swap>
 80109b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80109ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d138      	bne.n	8010a32 <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 80109c0:	f107 0220 	add.w	r2, r7, #32
 80109c4:	f107 0314 	add.w	r3, r7, #20
 80109c8:	9301      	str	r3, [sp, #4]
 80109ca:	f107 0320 	add.w	r3, r7, #32
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	68b9      	ldr	r1, [r7, #8]
 80109d4:	68f8      	ldr	r0, [r7, #12]
 80109d6:	f7ff fc91 	bl	80102fc <ecp_double_add_mxz>
 80109da:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80109dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d127      	bne.n	8010a32 <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80109e8:	f107 0120 	add.w	r1, r7, #32
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7f9 fd8d 	bl	800a50c <mbedtls_mpi_safe_cond_swap>
 80109f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80109f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d11b      	bne.n	8010a32 <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	f103 0018 	add.w	r0, r3, #24
 8010a00:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010a04:	f107 0320 	add.w	r3, r7, #32
 8010a08:	3318      	adds	r3, #24
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	f7f9 fd7e 	bl	800a50c <mbedtls_mpi_safe_cond_swap>
 8010a10:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10c      	bne.n	8010a32 <ecp_mul_mxz+0x192>
    while( i-- > 0 )
 8010a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a1a:	1e5a      	subs	r2, r3, #1
 8010a1c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d1ac      	bne.n	801097c <ecp_mul_mxz+0xdc>
    }

    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );
 8010a22:	68b9      	ldr	r1, [r7, #8]
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f7ff fba3 	bl	8010170 <ecp_normalize_mxz>
 8010a2a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a2e:	2b00      	cmp	r3, #0

cleanup:
 8010a30:	bf00      	nop
    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
 8010a32:	f107 0320 	add.w	r3, r7, #32
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7fd fae0 	bl	800dffc <mbedtls_ecp_point_free>
 8010a3c:	f107 0314 	add.w	r3, r7, #20
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7f9 fbc7 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 8010a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3750      	adds	r7, #80	@ 0x50
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}

08010a50 <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b08a      	sub	sp, #40	@ 0x28
 8010a54:	af04      	add	r7, sp, #16
 8010a56:	60f8      	str	r0, [r7, #12]
 8010a58:	60b9      	str	r1, [r7, #8]
 8010a5a:	607a      	str	r2, [r7, #4]
 8010a5c:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010a5e:	4b21      	ldr	r3, [pc, #132]	@ (8010ae4 <mbedtls_ecp_mul_restartable+0x94>)
 8010a60:	617b      	str	r3, [r7, #20]
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 8010a62:	6879      	ldr	r1, [r7, #4]
 8010a64:	68f8      	ldr	r0, [r7, #12]
 8010a66:	f000 fa59 	bl	8010f1c <mbedtls_ecp_check_privkey>
 8010a6a:	6178      	str	r0, [r7, #20]
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d133      	bne.n	8010ada <mbedtls_ecp_mul_restartable+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 8010a72:	6839      	ldr	r1, [r7, #0]
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f000 fa1f 	bl	8010eb8 <mbedtls_ecp_check_pubkey>
 8010a7a:	6178      	str	r0, [r7, #20]
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d12b      	bne.n	8010ada <mbedtls_ecp_mul_restartable+0x8a>
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010a82:	4b18      	ldr	r3, [pc, #96]	@ (8010ae4 <mbedtls_ecp_mul_restartable+0x94>)
 8010a84:	617b      	str	r3, [r7, #20]
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 8010a86:	68f8      	ldr	r0, [r7, #12]
 8010a88:	f7fd fa36 	bl	800def8 <ecp_get_type>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b02      	cmp	r3, #2
 8010a90:	d10d      	bne.n	8010aae <mbedtls_ecp_mul_restartable+0x5e>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 8010a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a94:	9301      	str	r3, [sp, #4]
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	68b9      	ldr	r1, [r7, #8]
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f7ff fefd 	bl	80108a0 <ecp_mul_mxz>
 8010aa6:	6178      	str	r0, [r7, #20]
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d115      	bne.n	8010ada <mbedtls_ecp_mul_restartable+0x8a>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8010aae:	68f8      	ldr	r0, [r7, #12]
 8010ab0:	f7fd fa22 	bl	800def8 <ecp_get_type>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d10e      	bne.n	8010ad8 <mbedtls_ecp_mul_restartable+0x88>
        MBEDTLS_MPI_CHK( ecp_mul_comb( grp, R, m, P, f_rng, p_rng, rs_ctx ) );
 8010aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010abc:	9302      	str	r3, [sp, #8]
 8010abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ac0:	9301      	str	r3, [sp, #4]
 8010ac2:	6a3b      	ldr	r3, [r7, #32]
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	68b9      	ldr	r1, [r7, #8]
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f7ff fa79 	bl	800ffc4 <ecp_mul_comb>
 8010ad2:	6178      	str	r0, [r7, #20]
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	2b00      	cmp	r3, #0
#endif

cleanup:
 8010ad8:	bf00      	nop
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
 8010ada:	697b      	ldr	r3, [r7, #20]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3718      	adds	r7, #24
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	ffffb080 	.word	0xffffb080

08010ae8 <ecp_check_pubkey_sw>:
/*
 * Check that an affine point is valid as a public key,
 * short weierstrass curves (SEC1 3.2.3.1)
 */
static int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b08a      	sub	sp, #40	@ 0x28
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	2100      	movs	r1, #0
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fa fad5 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	db1e      	blt.n	8010b40 <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	330c      	adds	r3, #12
 8010b06:	2100      	movs	r1, #0
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7fa facc 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 8010b0e:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	db15      	blt.n	8010b40 <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	3304      	adds	r3, #4
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	4610      	mov	r0, r2
 8010b1e:	f7fa fa27 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 8010b22:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	da0b      	bge.n	8010b40 <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	f103 020c 	add.w	r2, r3, #12
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	3304      	adds	r3, #4
 8010b32:	4619      	mov	r1, r3
 8010b34:	4610      	mov	r0, r2
 8010b36:	f7fa fa1b 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 8010b3a:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	db01      	blt.n	8010b44 <ecp_check_pubkey_sw+0x5c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010b40:	4b7d      	ldr	r3, [pc, #500]	@ (8010d38 <ecp_check_pubkey_sw+0x250>)
 8010b42:	e0f5      	b.n	8010d30 <ecp_check_pubkey_sw+0x248>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 8010b44:	f107 0318 	add.w	r3, r7, #24
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7f9 fb30 	bl	800a1ae <mbedtls_mpi_init>
 8010b4e:	f107 030c 	add.w	r3, r7, #12
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7f9 fb2b 	bl	800a1ae <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	f103 010c 	add.w	r1, r3, #12
 8010b5e:	683b      	ldr	r3, [r7, #0]
 8010b60:	f103 020c 	add.w	r2, r3, #12
 8010b64:	f107 0318 	add.w	r3, r7, #24
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fc f8a0 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8010b6e:	6278      	str	r0, [r7, #36]	@ 0x24
 8010b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	f040 80d1 	bne.w	8010d1a <ecp_check_pubkey_sw+0x232>
 8010b78:	f107 0318 	add.w	r3, r7, #24
 8010b7c:	6879      	ldr	r1, [r7, #4]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fd fb24 	bl	800e1cc <ecp_modp>
 8010b84:	6278      	str	r0, [r7, #36]	@ 0x24
 8010b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	f040 80c6 	bne.w	8010d1a <ecp_check_pubkey_sw+0x232>
 8010b8e:	4b6b      	ldr	r3, [pc, #428]	@ (8010d3c <ecp_check_pubkey_sw+0x254>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	3301      	adds	r3, #1
 8010b94:	4a69      	ldr	r2, [pc, #420]	@ (8010d3c <ecp_check_pubkey_sw+0x254>)
 8010b96:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8010b98:	6839      	ldr	r1, [r7, #0]
 8010b9a:	683a      	ldr	r2, [r7, #0]
 8010b9c:	f107 030c 	add.w	r3, r7, #12
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	f7fc f884 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8010ba6:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f040 80b5 	bne.w	8010d1a <ecp_check_pubkey_sw+0x232>
 8010bb0:	f107 030c 	add.w	r3, r7, #12
 8010bb4:	6879      	ldr	r1, [r7, #4]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7fd fb08 	bl	800e1cc <ecp_modp>
 8010bbc:	6278      	str	r0, [r7, #36]	@ 0x24
 8010bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	f040 80aa 	bne.w	8010d1a <ecp_check_pubkey_sw+0x232>
 8010bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8010d3c <ecp_check_pubkey_sw+0x254>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	4a5b      	ldr	r2, [pc, #364]	@ (8010d3c <ecp_check_pubkey_sw+0x254>)
 8010bce:	6013      	str	r3, [r2, #0]

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	699b      	ldr	r3, [r3, #24]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d128      	bne.n	8010c2a <ecp_check_pubkey_sw+0x142>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8010bd8:	f107 010c 	add.w	r1, r7, #12
 8010bdc:	f107 030c 	add.w	r3, r7, #12
 8010be0:	2203      	movs	r2, #3
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fa fc96 	bl	800b514 <mbedtls_mpi_sub_int>
 8010be8:	6278      	str	r0, [r7, #36]	@ 0x24
 8010bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f040 8094 	bne.w	8010d1a <ecp_check_pubkey_sw+0x232>
 8010bf2:	e00d      	b.n	8010c10 <ecp_check_pubkey_sw+0x128>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	1d1a      	adds	r2, r3, #4
 8010bf8:	f107 010c 	add.w	r1, r7, #12
 8010bfc:	f107 030c 	add.w	r3, r7, #12
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fa fbdb 	bl	800b3bc <mbedtls_mpi_add_mpi>
 8010c06:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	f040 8085 	bne.w	8010d1a <ecp_check_pubkey_sw+0x232>
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	da30      	bge.n	8010c78 <ecp_check_pubkey_sw+0x190>
 8010c16:	f107 030c 	add.w	r3, r7, #12
 8010c1a:	2100      	movs	r1, #0
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7fa fa42 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 8010c22:	4603      	mov	r3, r0
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d1e5      	bne.n	8010bf4 <ecp_check_pubkey_sw+0x10c>
 8010c28:	e026      	b.n	8010c78 <ecp_check_pubkey_sw+0x190>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f103 0210 	add.w	r2, r3, #16
 8010c30:	f107 010c 	add.w	r1, r7, #12
 8010c34:	f107 030c 	add.w	r3, r7, #12
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7fa fbbf 	bl	800b3bc <mbedtls_mpi_add_mpi>
 8010c3e:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d169      	bne.n	8010d1a <ecp_check_pubkey_sw+0x232>
 8010c46:	e00c      	b.n	8010c62 <ecp_check_pubkey_sw+0x17a>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	1d1a      	adds	r2, r3, #4
 8010c4c:	f107 010c 	add.w	r1, r7, #12
 8010c50:	f107 030c 	add.w	r3, r7, #12
 8010c54:	4618      	mov	r0, r3
 8010c56:	f7fa fb51 	bl	800b2fc <mbedtls_mpi_sub_abs>
 8010c5a:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d15b      	bne.n	8010d1a <ecp_check_pubkey_sw+0x232>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	1d1a      	adds	r2, r3, #4
 8010c66:	f107 030c 	add.w	r3, r7, #12
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7fa f97f 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	dae7      	bge.n	8010c48 <ecp_check_pubkey_sw+0x160>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8010c78:	683a      	ldr	r2, [r7, #0]
 8010c7a:	f107 010c 	add.w	r1, r7, #12
 8010c7e:	f107 030c 	add.w	r3, r7, #12
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fc f813 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8010c88:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d144      	bne.n	8010d1a <ecp_check_pubkey_sw+0x232>
 8010c90:	f107 030c 	add.w	r3, r7, #12
 8010c94:	6879      	ldr	r1, [r7, #4]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fd fa98 	bl	800e1cc <ecp_modp>
 8010c9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d13a      	bne.n	8010d1a <ecp_check_pubkey_sw+0x232>
 8010ca4:	4b25      	ldr	r3, [pc, #148]	@ (8010d3c <ecp_check_pubkey_sw+0x254>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	4a24      	ldr	r2, [pc, #144]	@ (8010d3c <ecp_check_pubkey_sw+0x254>)
 8010cac:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	f103 021c 	add.w	r2, r3, #28
 8010cb4:	f107 010c 	add.w	r1, r7, #12
 8010cb8:	f107 030c 	add.w	r3, r7, #12
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fa fb7d 	bl	800b3bc <mbedtls_mpi_add_mpi>
 8010cc2:	6278      	str	r0, [r7, #36]	@ 0x24
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d127      	bne.n	8010d1a <ecp_check_pubkey_sw+0x232>
 8010cca:	e00c      	b.n	8010ce6 <ecp_check_pubkey_sw+0x1fe>
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	1d1a      	adds	r2, r3, #4
 8010cd0:	f107 010c 	add.w	r1, r7, #12
 8010cd4:	f107 030c 	add.w	r3, r7, #12
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7fa fb0f 	bl	800b2fc <mbedtls_mpi_sub_abs>
 8010cde:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d119      	bne.n	8010d1a <ecp_check_pubkey_sw+0x232>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	1d1a      	adds	r2, r3, #4
 8010cea:	f107 030c 	add.w	r3, r7, #12
 8010cee:	4611      	mov	r1, r2
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7fa f93d 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	dae7      	bge.n	8010ccc <ecp_check_pubkey_sw+0x1e4>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 8010cfc:	f107 020c 	add.w	r2, r7, #12
 8010d00:	f107 0318 	add.w	r3, r7, #24
 8010d04:	4611      	mov	r1, r2
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fa f932 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d002      	beq.n	8010d18 <ecp_check_pubkey_sw+0x230>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8010d12:	4b09      	ldr	r3, [pc, #36]	@ (8010d38 <ecp_check_pubkey_sw+0x250>)
 8010d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d16:	e000      	b.n	8010d1a <ecp_check_pubkey_sw+0x232>

cleanup:
 8010d18:	bf00      	nop

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 8010d1a:	f107 0318 	add.w	r3, r7, #24
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7f9 fa58 	bl	800a1d4 <mbedtls_mpi_free>
 8010d24:	f107 030c 	add.w	r3, r7, #12
 8010d28:	4618      	mov	r0, r3
 8010d2a:	f7f9 fa53 	bl	800a1d4 <mbedtls_mpi_free>

    return( ret );
 8010d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3728      	adds	r7, #40	@ 0x28
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}
 8010d38:	ffffb380 	.word	0xffffb380
 8010d3c:	2400257c 	.word	0x2400257c

08010d40 <mbedtls_ecp_mul_shortcuts>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b08a      	sub	sp, #40	@ 0x28
 8010d44:	af04      	add	r7, sp, #16
 8010d46:	60f8      	str	r0, [r7, #12]
 8010d48:	60b9      	str	r1, [r7, #8]
 8010d4a:	607a      	str	r2, [r7, #4]
 8010d4c:	603b      	str	r3, [r7, #0]
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8010d4e:	2101      	movs	r1, #1
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f7fa f9a8 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d107      	bne.n	8010d6c <mbedtls_ecp_mul_shortcuts+0x2c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8010d5c:	6839      	ldr	r1, [r7, #0]
 8010d5e:	68b8      	ldr	r0, [r7, #8]
 8010d60:	f7fd f9cc 	bl	800e0fc <mbedtls_ecp_copy>
 8010d64:	6178      	str	r0, [r7, #20]
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	e036      	b.n	8010dda <mbedtls_ecp_mul_shortcuts+0x9a>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 8010d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7fa f998 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d11e      	bne.n	8010dba <mbedtls_ecp_mul_shortcuts+0x7a>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8010d7c:	6839      	ldr	r1, [r7, #0]
 8010d7e:	68b8      	ldr	r0, [r7, #8]
 8010d80:	f7fd f9bc 	bl	800e0fc <mbedtls_ecp_copy>
 8010d84:	6178      	str	r0, [r7, #20]
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d126      	bne.n	8010dda <mbedtls_ecp_mul_shortcuts+0x9a>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	330c      	adds	r3, #12
 8010d90:	2100      	movs	r1, #0
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fa f987 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d01d      	beq.n	8010dda <mbedtls_ecp_mul_shortcuts+0x9a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	f103 000c 	add.w	r0, r3, #12
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	1d19      	adds	r1, r3, #4
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	330c      	adds	r3, #12
 8010dac:	461a      	mov	r2, r3
 8010dae:	f7fa fb49 	bl	800b444 <mbedtls_mpi_sub_mpi>
 8010db2:	6178      	str	r0, [r7, #20]
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	e00f      	b.n	8010dda <mbedtls_ecp_mul_shortcuts+0x9a>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 8010dba:	6a3b      	ldr	r3, [r7, #32]
 8010dbc:	9302      	str	r3, [sp, #8]
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	9301      	str	r3, [sp, #4]
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	9300      	str	r3, [sp, #0]
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	68b9      	ldr	r1, [r7, #8]
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	f7ff fe3f 	bl	8010a50 <mbedtls_ecp_mul_restartable>
 8010dd2:	6178      	str	r0, [r7, #20]
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	2b00      	cmp	r3, #0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
 8010dd8:	bf00      	nop
    return( ret );
 8010dda:	697b      	ldr	r3, [r7, #20]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3718      	adds	r7, #24
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}

08010de4 <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b092      	sub	sp, #72	@ 0x48
 8010de8:	af02      	add	r7, sp, #8
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	607a      	str	r2, [r7, #4]
 8010df0:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_ecp_point mP;
    mbedtls_ecp_point *pmP = &mP;
 8010df2:	f107 0310 	add.w	r3, r7, #16
 8010df6:	63bb      	str	r3, [r7, #56]	@ 0x38
    mbedtls_ecp_point *pR = R;
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f7fd f87b 	bl	800def8 <ecp_get_type>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	d001      	beq.n	8010e0c <mbedtls_ecp_muladd_restartable+0x28>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8010e08:	4b1d      	ldr	r3, [pc, #116]	@ (8010e80 <mbedtls_ecp_muladd_restartable+0x9c>)
 8010e0a:	e034      	b.n	8010e76 <mbedtls_ecp_muladd_restartable+0x92>

    mbedtls_ecp_point_init( &mP );
 8010e0c:	f107 0310 	add.w	r3, r7, #16
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fd f888 	bl	800df26 <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 8010e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e18:	9300      	str	r3, [sp, #0]
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	f7ff ff8d 	bl	8010d40 <mbedtls_ecp_mul_shortcuts>
 8010e26:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d11d      	bne.n	8010e6a <mbedtls_ecp_muladd_restartable+0x86>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 8010e2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010e38:	68f8      	ldr	r0, [r7, #12]
 8010e3a:	f7ff ff81 	bl	8010d40 <mbedtls_ecp_mul_shortcuts>
 8010e3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d111      	bne.n	8010e6a <mbedtls_ecp_muladd_restartable+0x86>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 8010e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010e4c:	68f8      	ldr	r0, [r7, #12]
 8010e4e:	f7fe f8e7 	bl	800f020 <ecp_add_mixed>
 8010e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d107      	bne.n	8010e6a <mbedtls_ecp_muladd_restartable+0x86>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 8010e5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	f7fd fa19 	bl	800e294 <ecp_normalize_jac>
 8010e62:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e66:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, pR ) );
#endif

cleanup:
 8010e68:	bf00      	nop
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
 8010e6a:	f107 0310 	add.w	r3, r7, #16
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fd f8c4 	bl	800dffc <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
 8010e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010e76:	4618      	mov	r0, r3
 8010e78:	3740      	adds	r7, #64	@ 0x40
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	ffffb180 	.word	0xffffb180

08010e84 <ecp_check_pubkey_mx>:
#if defined(ECP_MONTGOMERY)
/*
 * Check validity of a public key for Montgomery curves with x-only schemes
 */
static int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]
    /* [Curve25519 p. 5] Just check X is the correct number of bytes */
    /* Allow any public value, if it's too big then we'll just reduce it mod p
     * (RFC 7748 sec. 5 para. 3). */
    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7f9 fcf7 	bl	800a884 <mbedtls_mpi_size>
 8010e96:	4602      	mov	r2, r0
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010e9c:	3307      	adds	r3, #7
 8010e9e:	08db      	lsrs	r3, r3, #3
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d901      	bls.n	8010ea8 <ecp_check_pubkey_mx+0x24>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010ea4:	4b03      	ldr	r3, [pc, #12]	@ (8010eb4 <ecp_check_pubkey_mx+0x30>)
 8010ea6:	e000      	b.n	8010eaa <ecp_check_pubkey_mx+0x26>

    return( 0 );
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3708      	adds	r7, #8
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	ffffb380 	.word	0xffffb380

08010eb8 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	3318      	adds	r3, #24
 8010ec6:	2101      	movs	r1, #1
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7fa f8ec 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <mbedtls_ecp_check_pubkey+0x20>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8010f14 <mbedtls_ecp_check_pubkey+0x5c>)
 8010ed6:	e018      	b.n	8010f0a <mbedtls_ecp_check_pubkey+0x52>

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f7fd f80d 	bl	800def8 <ecp_get_type>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	2b02      	cmp	r3, #2
 8010ee2:	d105      	bne.n	8010ef0 <mbedtls_ecp_check_pubkey+0x38>
        return( ecp_check_pubkey_mx( grp, pt ) );
 8010ee4:	6839      	ldr	r1, [r7, #0]
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f7ff ffcc 	bl	8010e84 <ecp_check_pubkey_mx>
 8010eec:	4603      	mov	r3, r0
 8010eee:	e00c      	b.n	8010f0a <mbedtls_ecp_check_pubkey+0x52>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f7fd f801 	bl	800def8 <ecp_get_type>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	d105      	bne.n	8010f08 <mbedtls_ecp_check_pubkey+0x50>
        return( ecp_check_pubkey_sw( grp, pt ) );
 8010efc:	6839      	ldr	r1, [r7, #0]
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f7ff fdf2 	bl	8010ae8 <ecp_check_pubkey_sw>
 8010f04:	4603      	mov	r3, r0
 8010f06:	e000      	b.n	8010f0a <mbedtls_ecp_check_pubkey+0x52>
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010f08:	4b03      	ldr	r3, [pc, #12]	@ (8010f18 <mbedtls_ecp_check_pubkey+0x60>)
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	ffffb380 	.word	0xffffb380
 8010f18:	ffffb080 	.word	0xffffb080

08010f1c <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b082      	sub	sp, #8
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( d   != NULL );

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f7fc ffe6 	bl	800def8 <ecp_get_type>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b02      	cmp	r3, #2
 8010f30:	d127      	bne.n	8010f82 <mbedtls_ecp_check_privkey+0x66>
    {
        /* see RFC 7748 sec. 5 para. 5 */
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 8010f32:	2100      	movs	r1, #0
 8010f34:	6838      	ldr	r0, [r7, #0]
 8010f36:	f7f9 fba7 	bl	800a688 <mbedtls_mpi_get_bit>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d10f      	bne.n	8010f60 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 8010f40:	2101      	movs	r1, #1
 8010f42:	6838      	ldr	r0, [r7, #0]
 8010f44:	f7f9 fba0 	bl	800a688 <mbedtls_mpi_get_bit>
 8010f48:	4603      	mov	r3, r0
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d108      	bne.n	8010f60 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 8010f4e:	6838      	ldr	r0, [r7, #0]
 8010f50:	f7f9 fc64 	bl	800a81c <mbedtls_mpi_bitlen>
 8010f54:	4603      	mov	r3, r0
 8010f56:	1e5a      	subs	r2, r3, #1
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d001      	beq.n	8010f64 <mbedtls_ecp_check_privkey+0x48>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010f60:	4b17      	ldr	r3, [pc, #92]	@ (8010fc0 <mbedtls_ecp_check_privkey+0xa4>)
 8010f62:	e029      	b.n	8010fb8 <mbedtls_ecp_check_privkey+0x9c>

        /* see [Curve25519] page 5 */
        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f68:	2bfe      	cmp	r3, #254	@ 0xfe
 8010f6a:	d108      	bne.n	8010f7e <mbedtls_ecp_check_privkey+0x62>
 8010f6c:	2102      	movs	r1, #2
 8010f6e:	6838      	ldr	r0, [r7, #0]
 8010f70:	f7f9 fb8a 	bl	800a688 <mbedtls_mpi_get_bit>
 8010f74:	4603      	mov	r3, r0
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d001      	beq.n	8010f7e <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010f7a:	4b11      	ldr	r3, [pc, #68]	@ (8010fc0 <mbedtls_ecp_check_privkey+0xa4>)
 8010f7c:	e01c      	b.n	8010fb8 <mbedtls_ecp_check_privkey+0x9c>

        return( 0 );
 8010f7e:	2300      	movs	r3, #0
 8010f80:	e01a      	b.n	8010fb8 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7fc ffb8 	bl	800def8 <ecp_get_type>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d113      	bne.n	8010fb6 <mbedtls_ecp_check_privkey+0x9a>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8010f8e:	2101      	movs	r1, #1
 8010f90:	6838      	ldr	r0, [r7, #0]
 8010f92:	f7fa f888 	bl	800b0a6 <mbedtls_mpi_cmp_int>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	db08      	blt.n	8010fae <mbedtls_ecp_check_privkey+0x92>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	334c      	adds	r3, #76	@ 0x4c
 8010fa0:	4619      	mov	r1, r3
 8010fa2:	6838      	ldr	r0, [r7, #0]
 8010fa4:	f7f9 ffe4 	bl	800af70 <mbedtls_mpi_cmp_mpi>
 8010fa8:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	db01      	blt.n	8010fb2 <mbedtls_ecp_check_privkey+0x96>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010fae:	4b04      	ldr	r3, [pc, #16]	@ (8010fc0 <mbedtls_ecp_check_privkey+0xa4>)
 8010fb0:	e002      	b.n	8010fb8 <mbedtls_ecp_check_privkey+0x9c>
        else
            return( 0 );
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	e000      	b.n	8010fb8 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010fb6:	4b03      	ldr	r3, [pc, #12]	@ (8010fc4 <mbedtls_ecp_check_privkey+0xa8>)
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3708      	adds	r7, #8
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	ffffb380 	.word	0xffffb380
 8010fc4:	ffffb080 	.word	0xffffb080

08010fc8 <ecp_mpi_load>:
/*
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b085      	sub	sp, #20
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	607a      	str	r2, [r7, #4]
    X->s = 1;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	601a      	str	r2, [r3, #0]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	089a      	lsrs	r2, r3, #2
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	605a      	str	r2, [r3, #4]
    X->p = (mbedtls_mpi_uint *) p;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	68ba      	ldr	r2, [r7, #8]
 8010fe6:	609a      	str	r2, [r3, #8]
}
 8010fe8:	bf00      	nop
 8010fea:	3714      	adds	r7, #20
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr

08010ff4 <ecp_mpi_set1>:

/*
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2201      	movs	r2, #1
 8011000:	601a      	str	r2, [r3, #0]
    X->n = 1;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2201      	movs	r2, #1
 8011006:	605a      	str	r2, [r3, #4]
    X->p = one;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	4a04      	ldr	r2, [pc, #16]	@ (801101c <ecp_mpi_set1+0x28>)
 801100c:	609a      	str	r2, [r3, #8]
}
 801100e:	bf00      	nop
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	24000040 	.word	0x24000040

08011020 <ecp_group_load>:
                           const mbedtls_mpi_uint *a,  size_t alen,
                           const mbedtls_mpi_uint *b,  size_t blen,
                           const mbedtls_mpi_uint *gx, size_t gxlen,
                           const mbedtls_mpi_uint *gy, size_t gylen,
                           const mbedtls_mpi_uint *n,  size_t nlen)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	607a      	str	r2, [r7, #4]
 801102c:	603b      	str	r3, [r7, #0]
    ecp_mpi_load( &grp->P, p, plen );
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	3304      	adds	r3, #4
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	68b9      	ldr	r1, [r7, #8]
 8011036:	4618      	mov	r0, r3
 8011038:	f7ff ffc6 	bl	8010fc8 <ecp_mpi_load>
    if( a != NULL )
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d006      	beq.n	8011050 <ecp_group_load+0x30>
        ecp_mpi_load( &grp->A, a, alen );
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	3310      	adds	r3, #16
 8011046:	69ba      	ldr	r2, [r7, #24]
 8011048:	6839      	ldr	r1, [r7, #0]
 801104a:	4618      	mov	r0, r3
 801104c:	f7ff ffbc 	bl	8010fc8 <ecp_mpi_load>
    ecp_mpi_load( &grp->B, b, blen );
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	331c      	adds	r3, #28
 8011054:	6a3a      	ldr	r2, [r7, #32]
 8011056:	69f9      	ldr	r1, [r7, #28]
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff ffb5 	bl	8010fc8 <ecp_mpi_load>
    ecp_mpi_load( &grp->N, n, nlen );
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	334c      	adds	r3, #76	@ 0x4c
 8011062:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011064:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff ffae 	bl	8010fc8 <ecp_mpi_load>

    ecp_mpi_load( &grp->G.X, gx, gxlen );
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	3328      	adds	r3, #40	@ 0x28
 8011070:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011074:	4618      	mov	r0, r3
 8011076:	f7ff ffa7 	bl	8010fc8 <ecp_mpi_load>
    ecp_mpi_load( &grp->G.Y, gy, gylen );
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	3334      	adds	r3, #52	@ 0x34
 801107e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011080:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011082:	4618      	mov	r0, r3
 8011084:	f7ff ffa0 	bl	8010fc8 <ecp_mpi_load>
    ecp_mpi_set1( &grp->G.Z );
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	3340      	adds	r3, #64	@ 0x40
 801108c:	4618      	mov	r0, r3
 801108e:	f7ff ffb1 	bl	8010ff4 <ecp_mpi_set1>

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	3304      	adds	r3, #4
 8011096:	4618      	mov	r0, r3
 8011098:	f7f9 fbc0 	bl	800a81c <mbedtls_mpi_bitlen>
 801109c:	4602      	mov	r2, r0
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	659a      	str	r2, [r3, #88]	@ 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	334c      	adds	r3, #76	@ 0x4c
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7f9 fbb8 	bl	800a81c <mbedtls_mpi_bitlen>
 80110ac:	4602      	mov	r2, r0
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    grp->h = 1;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2201      	movs	r2, #1
 80110b6:	661a      	str	r2, [r3, #96]	@ 0x60

    return( 0 );
 80110b8:	2300      	movs	r3, #0
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3710      	adds	r7, #16
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
	...

080110c4 <ecp_use_curve25519>:
#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
/*
 * Specialized function for creating the Curve25519 group
 */
static int ecp_use_curve25519( mbedtls_ecp_group *grp )
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b084      	sub	sp, #16
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
    int ret;

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	3310      	adds	r3, #16
 80110d0:	4a36      	ldr	r2, [pc, #216]	@ (80111ac <ecp_use_curve25519+0xe8>)
 80110d2:	2110      	movs	r1, #16
 80110d4:	4618      	mov	r0, r3
 80110d6:	f7f9 fc1d 	bl	800a914 <mbedtls_mpi_read_string>
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d159      	bne.n	8011196 <ecp_use_curve25519+0xd2>

    /* P = 2^255 - 19 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	3304      	adds	r3, #4
 80110e6:	2101      	movs	r1, #1
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7f9 faa1 	bl	800a630 <mbedtls_mpi_lset>
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d14f      	bne.n	8011196 <ecp_use_curve25519+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	3304      	adds	r3, #4
 80110fa:	21ff      	movs	r1, #255	@ 0xff
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7f9 fd78 	bl	800abf2 <mbedtls_mpi_shift_l>
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d145      	bne.n	8011196 <ecp_use_curve25519+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	1d18      	adds	r0, r3, #4
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	3304      	adds	r3, #4
 8011112:	2213      	movs	r2, #19
 8011114:	4619      	mov	r1, r3
 8011116:	f7fa f9fd 	bl	800b514 <mbedtls_mpi_sub_int>
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d139      	bne.n	8011196 <ecp_use_curve25519+0xd2>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	3304      	adds	r3, #4
 8011126:	4618      	mov	r0, r3
 8011128:	f7f9 fb78 	bl	800a81c <mbedtls_mpi_bitlen>
 801112c:	4602      	mov	r2, r0
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	659a      	str	r2, [r3, #88]	@ 0x58

    /* N = 2^252 + 27742317777372353535851937790883648493 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->N, 16,
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	334c      	adds	r3, #76	@ 0x4c
 8011136:	4a1e      	ldr	r2, [pc, #120]	@ (80111b0 <ecp_use_curve25519+0xec>)
 8011138:	2110      	movs	r1, #16
 801113a:	4618      	mov	r0, r3
 801113c:	f7f9 fbea 	bl	800a914 <mbedtls_mpi_read_string>
 8011140:	60f8      	str	r0, [r7, #12]
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d126      	bne.n	8011196 <ecp_use_curve25519+0xd2>
                                              "14DEF9DEA2F79CD65812631A5CF5D3ED" ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 252, 1 ) );
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	334c      	adds	r3, #76	@ 0x4c
 801114c:	2201      	movs	r2, #1
 801114e:	21fc      	movs	r1, #252	@ 0xfc
 8011150:	4618      	mov	r0, r3
 8011152:	f7f9 faba 	bl	800a6ca <mbedtls_mpi_set_bit>
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d11b      	bne.n	8011196 <ecp_use_curve25519+0xd2>

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	3328      	adds	r3, #40	@ 0x28
 8011162:	2109      	movs	r1, #9
 8011164:	4618      	mov	r0, r3
 8011166:	f7f9 fa63 	bl	800a630 <mbedtls_mpi_lset>
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d111      	bne.n	8011196 <ecp_use_curve25519+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	3340      	adds	r3, #64	@ 0x40
 8011176:	2101      	movs	r1, #1
 8011178:	4618      	mov	r0, r3
 801117a:	f7f9 fa59 	bl	800a630 <mbedtls_mpi_lset>
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d107      	bne.n	8011196 <ecp_use_curve25519+0xd2>
    mbedtls_mpi_free( &grp->G.Y );
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	3334      	adds	r3, #52	@ 0x34
 801118a:	4618      	mov	r0, r3
 801118c:	f7f9 f822 	bl	800a1d4 <mbedtls_mpi_free>

    /* Actually, the required msb for private keys */
    grp->nbits = 254;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	22fe      	movs	r2, #254	@ 0xfe
 8011194:	65da      	str	r2, [r3, #92]	@ 0x5c

cleanup:
    if( ret != 0 )
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d002      	beq.n	80111a2 <ecp_use_curve25519+0xde>
        mbedtls_ecp_group_free( grp );
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7fc ff47 	bl	800e030 <mbedtls_ecp_group_free>

    return( ret );
 80111a2:	68fb      	ldr	r3, [r7, #12]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}
 80111ac:	080164d8 	.word	0x080164d8
 80111b0:	080164e0 	.word	0x080164e0

080111b4 <ecp_use_curve448>:
#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
/*
 * Specialized function for creating the Curve448 group
 */
static int ecp_use_curve448( mbedtls_ecp_group *grp )
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b086      	sub	sp, #24
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
    mbedtls_mpi Ns;
    int ret;

    mbedtls_mpi_init( &Ns );
 80111bc:	f107 0308 	add.w	r3, r7, #8
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7f8 fff4 	bl	800a1ae <mbedtls_mpi_init>

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	3310      	adds	r3, #16
 80111ca:	4a4c      	ldr	r2, [pc, #304]	@ (80112fc <ecp_use_curve448+0x148>)
 80111cc:	2110      	movs	r1, #16
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7f9 fba0 	bl	800a914 <mbedtls_mpi_read_string>
 80111d4:	6178      	str	r0, [r7, #20]
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d17f      	bne.n	80112dc <ecp_use_curve448+0x128>

    /* P = 2^448 - 2^224 - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	3304      	adds	r3, #4
 80111e0:	2101      	movs	r1, #1
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7f9 fa24 	bl	800a630 <mbedtls_mpi_lset>
 80111e8:	6178      	str	r0, [r7, #20]
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d175      	bne.n	80112dc <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	3304      	adds	r3, #4
 80111f4:	21e0      	movs	r1, #224	@ 0xe0
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7f9 fcfb 	bl	800abf2 <mbedtls_mpi_shift_l>
 80111fc:	6178      	str	r0, [r7, #20]
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d16b      	bne.n	80112dc <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	1d18      	adds	r0, r3, #4
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	3304      	adds	r3, #4
 801120c:	2201      	movs	r2, #1
 801120e:	4619      	mov	r1, r3
 8011210:	f7fa f980 	bl	800b514 <mbedtls_mpi_sub_int>
 8011214:	6178      	str	r0, [r7, #20]
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d15f      	bne.n	80112dc <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	3304      	adds	r3, #4
 8011220:	21e0      	movs	r1, #224	@ 0xe0
 8011222:	4618      	mov	r0, r3
 8011224:	f7f9 fce5 	bl	800abf2 <mbedtls_mpi_shift_l>
 8011228:	6178      	str	r0, [r7, #20]
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d155      	bne.n	80112dc <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	1d18      	adds	r0, r3, #4
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	3304      	adds	r3, #4
 8011238:	2201      	movs	r2, #1
 801123a:	4619      	mov	r1, r3
 801123c:	f7fa f96a 	bl	800b514 <mbedtls_mpi_sub_int>
 8011240:	6178      	str	r0, [r7, #20]
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d149      	bne.n	80112dc <ecp_use_curve448+0x128>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	3304      	adds	r3, #4
 801124c:	4618      	mov	r0, r3
 801124e:	f7f9 fae5 	bl	800a81c <mbedtls_mpi_bitlen>
 8011252:	4602      	mov	r2, r0
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	3328      	adds	r3, #40	@ 0x28
 801125c:	2105      	movs	r1, #5
 801125e:	4618      	mov	r0, r3
 8011260:	f7f9 f9e6 	bl	800a630 <mbedtls_mpi_lset>
 8011264:	6178      	str	r0, [r7, #20]
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d137      	bne.n	80112dc <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	3340      	adds	r3, #64	@ 0x40
 8011270:	2101      	movs	r1, #1
 8011272:	4618      	mov	r0, r3
 8011274:	f7f9 f9dc 	bl	800a630 <mbedtls_mpi_lset>
 8011278:	6178      	str	r0, [r7, #20]
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d12d      	bne.n	80112dc <ecp_use_curve448+0x128>
    mbedtls_mpi_free( &grp->G.Y );
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	3334      	adds	r3, #52	@ 0x34
 8011284:	4618      	mov	r0, r3
 8011286:	f7f8 ffa5 	bl	800a1d4 <mbedtls_mpi_free>

    /* N = 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	334c      	adds	r3, #76	@ 0x4c
 801128e:	2201      	movs	r2, #1
 8011290:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 8011294:	4618      	mov	r0, r3
 8011296:	f7f9 fa18 	bl	800a6ca <mbedtls_mpi_set_bit>
 801129a:	6178      	str	r0, [r7, #20]
 801129c:	697b      	ldr	r3, [r7, #20]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d11c      	bne.n	80112dc <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 80112a2:	f107 0308 	add.w	r3, r7, #8
 80112a6:	4a16      	ldr	r2, [pc, #88]	@ (8011300 <ecp_use_curve448+0x14c>)
 80112a8:	2110      	movs	r1, #16
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7f9 fb32 	bl	800a914 <mbedtls_mpi_read_string>
 80112b0:	6178      	str	r0, [r7, #20]
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d111      	bne.n	80112dc <ecp_use_curve448+0x128>
                                              "8335DC163BB124B65129C96FDE933D8D723A70AADC873D6D54A7BB0D" ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	334c      	adds	r3, #76	@ 0x4c
 80112c2:	f107 0208 	add.w	r2, r7, #8
 80112c6:	4619      	mov	r1, r3
 80112c8:	f7fa f8bc 	bl	800b444 <mbedtls_mpi_sub_mpi>
 80112cc:	6178      	str	r0, [r7, #20]
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d103      	bne.n	80112dc <ecp_use_curve448+0x128>

    /* Actually, the required msb for private keys */
    grp->nbits = 447;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f240 12bf 	movw	r2, #447	@ 0x1bf
 80112da:	65da      	str	r2, [r3, #92]	@ 0x5c

cleanup:
    mbedtls_mpi_free( &Ns );
 80112dc:	f107 0308 	add.w	r3, r7, #8
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7f8 ff77 	bl	800a1d4 <mbedtls_mpi_free>
    if( ret != 0 )
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d002      	beq.n	80112f2 <ecp_use_curve448+0x13e>
        mbedtls_ecp_group_free( grp );
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f7fc fe9f 	bl	800e030 <mbedtls_ecp_group_free>

    return( ret );
 80112f2:	697b      	ldr	r3, [r7, #20]
}
 80112f4:	4618      	mov	r0, r3
 80112f6:	3718      	adds	r7, #24
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	08016504 	.word	0x08016504
 8011300:	0801650c 	.word	0x0801650c

08011304 <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b08c      	sub	sp, #48	@ 0x30
 8011308:	af0a      	add	r7, sp, #40	@ 0x28
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	460b      	mov	r3, r1
 801130e:	70fb      	strb	r3, [r7, #3]
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7fc fe8d 	bl	800e030 <mbedtls_ecp_group_free>

    grp->id = id;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	78fa      	ldrb	r2, [r7, #3]
 801131a:	701a      	strb	r2, [r3, #0]

    switch( id )
 801131c:	78fb      	ldrb	r3, [r7, #3]
 801131e:	3b01      	subs	r3, #1
 8011320:	2b0c      	cmp	r3, #12
 8011322:	f200 81e1 	bhi.w	80116e8 <mbedtls_ecp_group_load+0x3e4>
 8011326:	a201      	add	r2, pc, #4	@ (adr r2, 801132c <mbedtls_ecp_group_load+0x28>)
 8011328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801132c:	08011361 	.word	0x08011361
 8011330:	0801139b 	.word	0x0801139b
 8011334:	080113d5 	.word	0x080113d5
 8011338:	0801140f 	.word	0x0801140f
 801133c:	08011449 	.word	0x08011449
 8011340:	08011531 	.word	0x08011531
 8011344:	08011565 	.word	0x08011565
 8011348:	08011695 	.word	0x08011695
 801134c:	080116c9 	.word	0x080116c9
 8011350:	08011483 	.word	0x08011483
 8011354:	080114bd 	.word	0x080114bd
 8011358:	080114f7 	.word	0x080114f7
 801135c:	080116d9 	.word	0x080116d9
    {
#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP192R1:
            NIST_MODP( p192 );
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	4a8d      	ldr	r2, [pc, #564]	@ (8011598 <mbedtls_ecp_group_load+0x294>)
 8011364:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp192r1 ) );
 8011366:	2318      	movs	r3, #24
 8011368:	9308      	str	r3, [sp, #32]
 801136a:	4b8c      	ldr	r3, [pc, #560]	@ (801159c <mbedtls_ecp_group_load+0x298>)
 801136c:	9307      	str	r3, [sp, #28]
 801136e:	2318      	movs	r3, #24
 8011370:	9306      	str	r3, [sp, #24]
 8011372:	4b8b      	ldr	r3, [pc, #556]	@ (80115a0 <mbedtls_ecp_group_load+0x29c>)
 8011374:	9305      	str	r3, [sp, #20]
 8011376:	2318      	movs	r3, #24
 8011378:	9304      	str	r3, [sp, #16]
 801137a:	4b8a      	ldr	r3, [pc, #552]	@ (80115a4 <mbedtls_ecp_group_load+0x2a0>)
 801137c:	9303      	str	r3, [sp, #12]
 801137e:	2318      	movs	r3, #24
 8011380:	9302      	str	r3, [sp, #8]
 8011382:	4b89      	ldr	r3, [pc, #548]	@ (80115a8 <mbedtls_ecp_group_load+0x2a4>)
 8011384:	9301      	str	r3, [sp, #4]
 8011386:	2300      	movs	r3, #0
 8011388:	9300      	str	r3, [sp, #0]
 801138a:	2300      	movs	r3, #0
 801138c:	2218      	movs	r2, #24
 801138e:	4987      	ldr	r1, [pc, #540]	@ (80115ac <mbedtls_ecp_group_load+0x2a8>)
 8011390:	6878      	ldr	r0, [r7, #4]
 8011392:	f7ff fe45 	bl	8011020 <ecp_group_load>
 8011396:	4603      	mov	r3, r0
 8011398:	e1aa      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP224R1:
            NIST_MODP( p224 );
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	4a84      	ldr	r2, [pc, #528]	@ (80115b0 <mbedtls_ecp_group_load+0x2ac>)
 801139e:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp224r1 ) );
 80113a0:	231c      	movs	r3, #28
 80113a2:	9308      	str	r3, [sp, #32]
 80113a4:	4b83      	ldr	r3, [pc, #524]	@ (80115b4 <mbedtls_ecp_group_load+0x2b0>)
 80113a6:	9307      	str	r3, [sp, #28]
 80113a8:	231c      	movs	r3, #28
 80113aa:	9306      	str	r3, [sp, #24]
 80113ac:	4b82      	ldr	r3, [pc, #520]	@ (80115b8 <mbedtls_ecp_group_load+0x2b4>)
 80113ae:	9305      	str	r3, [sp, #20]
 80113b0:	231c      	movs	r3, #28
 80113b2:	9304      	str	r3, [sp, #16]
 80113b4:	4b81      	ldr	r3, [pc, #516]	@ (80115bc <mbedtls_ecp_group_load+0x2b8>)
 80113b6:	9303      	str	r3, [sp, #12]
 80113b8:	231c      	movs	r3, #28
 80113ba:	9302      	str	r3, [sp, #8]
 80113bc:	4b80      	ldr	r3, [pc, #512]	@ (80115c0 <mbedtls_ecp_group_load+0x2bc>)
 80113be:	9301      	str	r3, [sp, #4]
 80113c0:	2300      	movs	r3, #0
 80113c2:	9300      	str	r3, [sp, #0]
 80113c4:	2300      	movs	r3, #0
 80113c6:	2220      	movs	r2, #32
 80113c8:	497e      	ldr	r1, [pc, #504]	@ (80115c4 <mbedtls_ecp_group_load+0x2c0>)
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f7ff fe28 	bl	8011020 <ecp_group_load>
 80113d0:	4603      	mov	r3, r0
 80113d2:	e18d      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a7c      	ldr	r2, [pc, #496]	@ (80115c8 <mbedtls_ecp_group_load+0x2c4>)
 80113d8:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp256r1 ) );
 80113da:	2320      	movs	r3, #32
 80113dc:	9308      	str	r3, [sp, #32]
 80113de:	4b7b      	ldr	r3, [pc, #492]	@ (80115cc <mbedtls_ecp_group_load+0x2c8>)
 80113e0:	9307      	str	r3, [sp, #28]
 80113e2:	2320      	movs	r3, #32
 80113e4:	9306      	str	r3, [sp, #24]
 80113e6:	4b7a      	ldr	r3, [pc, #488]	@ (80115d0 <mbedtls_ecp_group_load+0x2cc>)
 80113e8:	9305      	str	r3, [sp, #20]
 80113ea:	2320      	movs	r3, #32
 80113ec:	9304      	str	r3, [sp, #16]
 80113ee:	4b79      	ldr	r3, [pc, #484]	@ (80115d4 <mbedtls_ecp_group_load+0x2d0>)
 80113f0:	9303      	str	r3, [sp, #12]
 80113f2:	2320      	movs	r3, #32
 80113f4:	9302      	str	r3, [sp, #8]
 80113f6:	4b78      	ldr	r3, [pc, #480]	@ (80115d8 <mbedtls_ecp_group_load+0x2d4>)
 80113f8:	9301      	str	r3, [sp, #4]
 80113fa:	2300      	movs	r3, #0
 80113fc:	9300      	str	r3, [sp, #0]
 80113fe:	2300      	movs	r3, #0
 8011400:	2220      	movs	r2, #32
 8011402:	4976      	ldr	r1, [pc, #472]	@ (80115dc <mbedtls_ecp_group_load+0x2d8>)
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f7ff fe0b 	bl	8011020 <ecp_group_load>
 801140a:	4603      	mov	r3, r0
 801140c:	e170      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP384R1:
            NIST_MODP( p384 );
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	4a73      	ldr	r2, [pc, #460]	@ (80115e0 <mbedtls_ecp_group_load+0x2dc>)
 8011412:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp384r1 ) );
 8011414:	2330      	movs	r3, #48	@ 0x30
 8011416:	9308      	str	r3, [sp, #32]
 8011418:	4b72      	ldr	r3, [pc, #456]	@ (80115e4 <mbedtls_ecp_group_load+0x2e0>)
 801141a:	9307      	str	r3, [sp, #28]
 801141c:	2330      	movs	r3, #48	@ 0x30
 801141e:	9306      	str	r3, [sp, #24]
 8011420:	4b71      	ldr	r3, [pc, #452]	@ (80115e8 <mbedtls_ecp_group_load+0x2e4>)
 8011422:	9305      	str	r3, [sp, #20]
 8011424:	2330      	movs	r3, #48	@ 0x30
 8011426:	9304      	str	r3, [sp, #16]
 8011428:	4b70      	ldr	r3, [pc, #448]	@ (80115ec <mbedtls_ecp_group_load+0x2e8>)
 801142a:	9303      	str	r3, [sp, #12]
 801142c:	2330      	movs	r3, #48	@ 0x30
 801142e:	9302      	str	r3, [sp, #8]
 8011430:	4b6f      	ldr	r3, [pc, #444]	@ (80115f0 <mbedtls_ecp_group_load+0x2ec>)
 8011432:	9301      	str	r3, [sp, #4]
 8011434:	2300      	movs	r3, #0
 8011436:	9300      	str	r3, [sp, #0]
 8011438:	2300      	movs	r3, #0
 801143a:	2230      	movs	r2, #48	@ 0x30
 801143c:	496d      	ldr	r1, [pc, #436]	@ (80115f4 <mbedtls_ecp_group_load+0x2f0>)
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f7ff fdee 	bl	8011020 <ecp_group_load>
 8011444:	4603      	mov	r3, r0
 8011446:	e153      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP521R1:
            NIST_MODP( p521 );
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	4a6b      	ldr	r2, [pc, #428]	@ (80115f8 <mbedtls_ecp_group_load+0x2f4>)
 801144c:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp521r1 ) );
 801144e:	2344      	movs	r3, #68	@ 0x44
 8011450:	9308      	str	r3, [sp, #32]
 8011452:	4b6a      	ldr	r3, [pc, #424]	@ (80115fc <mbedtls_ecp_group_load+0x2f8>)
 8011454:	9307      	str	r3, [sp, #28]
 8011456:	2344      	movs	r3, #68	@ 0x44
 8011458:	9306      	str	r3, [sp, #24]
 801145a:	4b69      	ldr	r3, [pc, #420]	@ (8011600 <mbedtls_ecp_group_load+0x2fc>)
 801145c:	9305      	str	r3, [sp, #20]
 801145e:	2344      	movs	r3, #68	@ 0x44
 8011460:	9304      	str	r3, [sp, #16]
 8011462:	4b68      	ldr	r3, [pc, #416]	@ (8011604 <mbedtls_ecp_group_load+0x300>)
 8011464:	9303      	str	r3, [sp, #12]
 8011466:	2344      	movs	r3, #68	@ 0x44
 8011468:	9302      	str	r3, [sp, #8]
 801146a:	4b67      	ldr	r3, [pc, #412]	@ (8011608 <mbedtls_ecp_group_load+0x304>)
 801146c:	9301      	str	r3, [sp, #4]
 801146e:	2300      	movs	r3, #0
 8011470:	9300      	str	r3, [sp, #0]
 8011472:	2300      	movs	r3, #0
 8011474:	2244      	movs	r2, #68	@ 0x44
 8011476:	4965      	ldr	r1, [pc, #404]	@ (801160c <mbedtls_ecp_group_load+0x308>)
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f7ff fdd1 	bl	8011020 <ecp_group_load>
 801147e:	4603      	mov	r3, r0
 8011480:	e136      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP192K1:
            grp->modp = ecp_mod_p192k1;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	4a62      	ldr	r2, [pc, #392]	@ (8011610 <mbedtls_ecp_group_load+0x30c>)
 8011486:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP_A( secp192k1 ) );
 8011488:	2318      	movs	r3, #24
 801148a:	9308      	str	r3, [sp, #32]
 801148c:	4b61      	ldr	r3, [pc, #388]	@ (8011614 <mbedtls_ecp_group_load+0x310>)
 801148e:	9307      	str	r3, [sp, #28]
 8011490:	2318      	movs	r3, #24
 8011492:	9306      	str	r3, [sp, #24]
 8011494:	4b60      	ldr	r3, [pc, #384]	@ (8011618 <mbedtls_ecp_group_load+0x314>)
 8011496:	9305      	str	r3, [sp, #20]
 8011498:	2318      	movs	r3, #24
 801149a:	9304      	str	r3, [sp, #16]
 801149c:	4b5f      	ldr	r3, [pc, #380]	@ (801161c <mbedtls_ecp_group_load+0x318>)
 801149e:	9303      	str	r3, [sp, #12]
 80114a0:	2304      	movs	r3, #4
 80114a2:	9302      	str	r3, [sp, #8]
 80114a4:	4b5e      	ldr	r3, [pc, #376]	@ (8011620 <mbedtls_ecp_group_load+0x31c>)
 80114a6:	9301      	str	r3, [sp, #4]
 80114a8:	2304      	movs	r3, #4
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	4b5d      	ldr	r3, [pc, #372]	@ (8011624 <mbedtls_ecp_group_load+0x320>)
 80114ae:	2218      	movs	r2, #24
 80114b0:	495d      	ldr	r1, [pc, #372]	@ (8011628 <mbedtls_ecp_group_load+0x324>)
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7ff fdb4 	bl	8011020 <ecp_group_load>
 80114b8:	4603      	mov	r3, r0
 80114ba:	e119      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP224K1:
            grp->modp = ecp_mod_p224k1;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	4a5b      	ldr	r2, [pc, #364]	@ (801162c <mbedtls_ecp_group_load+0x328>)
 80114c0:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP_A( secp224k1 ) );
 80114c2:	2320      	movs	r3, #32
 80114c4:	9308      	str	r3, [sp, #32]
 80114c6:	4b5a      	ldr	r3, [pc, #360]	@ (8011630 <mbedtls_ecp_group_load+0x32c>)
 80114c8:	9307      	str	r3, [sp, #28]
 80114ca:	231c      	movs	r3, #28
 80114cc:	9306      	str	r3, [sp, #24]
 80114ce:	4b59      	ldr	r3, [pc, #356]	@ (8011634 <mbedtls_ecp_group_load+0x330>)
 80114d0:	9305      	str	r3, [sp, #20]
 80114d2:	231c      	movs	r3, #28
 80114d4:	9304      	str	r3, [sp, #16]
 80114d6:	4b58      	ldr	r3, [pc, #352]	@ (8011638 <mbedtls_ecp_group_load+0x334>)
 80114d8:	9303      	str	r3, [sp, #12]
 80114da:	2304      	movs	r3, #4
 80114dc:	9302      	str	r3, [sp, #8]
 80114de:	4b57      	ldr	r3, [pc, #348]	@ (801163c <mbedtls_ecp_group_load+0x338>)
 80114e0:	9301      	str	r3, [sp, #4]
 80114e2:	2304      	movs	r3, #4
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	4b56      	ldr	r3, [pc, #344]	@ (8011640 <mbedtls_ecp_group_load+0x33c>)
 80114e8:	221c      	movs	r2, #28
 80114ea:	4956      	ldr	r1, [pc, #344]	@ (8011644 <mbedtls_ecp_group_load+0x340>)
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f7ff fd97 	bl	8011020 <ecp_group_load>
 80114f2:	4603      	mov	r3, r0
 80114f4:	e0fc      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256K1:
            grp->modp = ecp_mod_p256k1;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4a53      	ldr	r2, [pc, #332]	@ (8011648 <mbedtls_ecp_group_load+0x344>)
 80114fa:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP_A( secp256k1 ) );
 80114fc:	2320      	movs	r3, #32
 80114fe:	9308      	str	r3, [sp, #32]
 8011500:	4b52      	ldr	r3, [pc, #328]	@ (801164c <mbedtls_ecp_group_load+0x348>)
 8011502:	9307      	str	r3, [sp, #28]
 8011504:	2320      	movs	r3, #32
 8011506:	9306      	str	r3, [sp, #24]
 8011508:	4b51      	ldr	r3, [pc, #324]	@ (8011650 <mbedtls_ecp_group_load+0x34c>)
 801150a:	9305      	str	r3, [sp, #20]
 801150c:	2320      	movs	r3, #32
 801150e:	9304      	str	r3, [sp, #16]
 8011510:	4b50      	ldr	r3, [pc, #320]	@ (8011654 <mbedtls_ecp_group_load+0x350>)
 8011512:	9303      	str	r3, [sp, #12]
 8011514:	2304      	movs	r3, #4
 8011516:	9302      	str	r3, [sp, #8]
 8011518:	4b4f      	ldr	r3, [pc, #316]	@ (8011658 <mbedtls_ecp_group_load+0x354>)
 801151a:	9301      	str	r3, [sp, #4]
 801151c:	2304      	movs	r3, #4
 801151e:	9300      	str	r3, [sp, #0]
 8011520:	4b4e      	ldr	r3, [pc, #312]	@ (801165c <mbedtls_ecp_group_load+0x358>)
 8011522:	2220      	movs	r2, #32
 8011524:	494e      	ldr	r1, [pc, #312]	@ (8011660 <mbedtls_ecp_group_load+0x35c>)
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7ff fd7a 	bl	8011020 <ecp_group_load>
 801152c:	4603      	mov	r3, r0
 801152e:	e0df      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
        case MBEDTLS_ECP_DP_BP256R1:
            return( LOAD_GROUP_A( brainpoolP256r1 ) );
 8011530:	2320      	movs	r3, #32
 8011532:	9308      	str	r3, [sp, #32]
 8011534:	4b4b      	ldr	r3, [pc, #300]	@ (8011664 <mbedtls_ecp_group_load+0x360>)
 8011536:	9307      	str	r3, [sp, #28]
 8011538:	2320      	movs	r3, #32
 801153a:	9306      	str	r3, [sp, #24]
 801153c:	4b4a      	ldr	r3, [pc, #296]	@ (8011668 <mbedtls_ecp_group_load+0x364>)
 801153e:	9305      	str	r3, [sp, #20]
 8011540:	2320      	movs	r3, #32
 8011542:	9304      	str	r3, [sp, #16]
 8011544:	4b49      	ldr	r3, [pc, #292]	@ (801166c <mbedtls_ecp_group_load+0x368>)
 8011546:	9303      	str	r3, [sp, #12]
 8011548:	2320      	movs	r3, #32
 801154a:	9302      	str	r3, [sp, #8]
 801154c:	4b48      	ldr	r3, [pc, #288]	@ (8011670 <mbedtls_ecp_group_load+0x36c>)
 801154e:	9301      	str	r3, [sp, #4]
 8011550:	2320      	movs	r3, #32
 8011552:	9300      	str	r3, [sp, #0]
 8011554:	4b47      	ldr	r3, [pc, #284]	@ (8011674 <mbedtls_ecp_group_load+0x370>)
 8011556:	2220      	movs	r2, #32
 8011558:	4947      	ldr	r1, [pc, #284]	@ (8011678 <mbedtls_ecp_group_load+0x374>)
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7ff fd60 	bl	8011020 <ecp_group_load>
 8011560:	4603      	mov	r3, r0
 8011562:	e0c5      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
        case MBEDTLS_ECP_DP_BP384R1:
            return( LOAD_GROUP_A( brainpoolP384r1 ) );
 8011564:	2330      	movs	r3, #48	@ 0x30
 8011566:	9308      	str	r3, [sp, #32]
 8011568:	4b44      	ldr	r3, [pc, #272]	@ (801167c <mbedtls_ecp_group_load+0x378>)
 801156a:	9307      	str	r3, [sp, #28]
 801156c:	2330      	movs	r3, #48	@ 0x30
 801156e:	9306      	str	r3, [sp, #24]
 8011570:	4b43      	ldr	r3, [pc, #268]	@ (8011680 <mbedtls_ecp_group_load+0x37c>)
 8011572:	9305      	str	r3, [sp, #20]
 8011574:	2330      	movs	r3, #48	@ 0x30
 8011576:	9304      	str	r3, [sp, #16]
 8011578:	4b42      	ldr	r3, [pc, #264]	@ (8011684 <mbedtls_ecp_group_load+0x380>)
 801157a:	9303      	str	r3, [sp, #12]
 801157c:	2330      	movs	r3, #48	@ 0x30
 801157e:	9302      	str	r3, [sp, #8]
 8011580:	4b41      	ldr	r3, [pc, #260]	@ (8011688 <mbedtls_ecp_group_load+0x384>)
 8011582:	9301      	str	r3, [sp, #4]
 8011584:	2330      	movs	r3, #48	@ 0x30
 8011586:	9300      	str	r3, [sp, #0]
 8011588:	4b40      	ldr	r3, [pc, #256]	@ (801168c <mbedtls_ecp_group_load+0x388>)
 801158a:	2230      	movs	r2, #48	@ 0x30
 801158c:	4940      	ldr	r1, [pc, #256]	@ (8011690 <mbedtls_ecp_group_load+0x38c>)
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f7ff fd46 	bl	8011020 <ecp_group_load>
 8011594:	4603      	mov	r3, r0
 8011596:	e0ab      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
 8011598:	080117ff 	.word	0x080117ff
 801159c:	08016a30 	.word	0x08016a30
 80115a0:	08016a18 	.word	0x08016a18
 80115a4:	08016a00 	.word	0x08016a00
 80115a8:	080169e8 	.word	0x080169e8
 80115ac:	080169d0 	.word	0x080169d0
 80115b0:	080119d9 	.word	0x080119d9
 80115b4:	08016abc 	.word	0x08016abc
 80115b8:	08016aa0 	.word	0x08016aa0
 80115bc:	08016a84 	.word	0x08016a84
 80115c0:	08016a68 	.word	0x08016a68
 80115c4:	08016a48 	.word	0x08016a48
 80115c8:	08011e67 	.word	0x08011e67
 80115cc:	08016b58 	.word	0x08016b58
 80115d0:	08016b38 	.word	0x08016b38
 80115d4:	08016b18 	.word	0x08016b18
 80115d8:	08016af8 	.word	0x08016af8
 80115dc:	08016ad8 	.word	0x08016ad8
 80115e0:	0801269d 	.word	0x0801269d
 80115e4:	08016c38 	.word	0x08016c38
 80115e8:	08016c08 	.word	0x08016c08
 80115ec:	08016bd8 	.word	0x08016bd8
 80115f0:	08016ba8 	.word	0x08016ba8
 80115f4:	08016b78 	.word	0x08016b78
 80115f8:	0801314d 	.word	0x0801314d
 80115fc:	08016d78 	.word	0x08016d78
 8011600:	08016d34 	.word	0x08016d34
 8011604:	08016cf0 	.word	0x08016cf0
 8011608:	08016cac 	.word	0x08016cac
 801160c:	08016c68 	.word	0x08016c68
 8011610:	080136a1 	.word	0x080136a1
 8011614:	08016e0c 	.word	0x08016e0c
 8011618:	08016df4 	.word	0x08016df4
 801161c:	08016ddc 	.word	0x08016ddc
 8011620:	08016dd8 	.word	0x08016dd8
 8011624:	08016dd4 	.word	0x08016dd4
 8011628:	08016dbc 	.word	0x08016dbc
 801162c:	080136cd 	.word	0x080136cd
 8011630:	08016e80 	.word	0x08016e80
 8011634:	08016e64 	.word	0x08016e64
 8011638:	08016e48 	.word	0x08016e48
 801163c:	08016e44 	.word	0x08016e44
 8011640:	08016e40 	.word	0x08016e40
 8011644:	08016e24 	.word	0x08016e24
 8011648:	080136f9 	.word	0x080136f9
 801164c:	08016f08 	.word	0x08016f08
 8011650:	08016ee8 	.word	0x08016ee8
 8011654:	08016ec8 	.word	0x08016ec8
 8011658:	08016ec4 	.word	0x08016ec4
 801165c:	08016ec0 	.word	0x08016ec0
 8011660:	08016ea0 	.word	0x08016ea0
 8011664:	08016fc8 	.word	0x08016fc8
 8011668:	08016fa8 	.word	0x08016fa8
 801166c:	08016f88 	.word	0x08016f88
 8011670:	08016f68 	.word	0x08016f68
 8011674:	08016f48 	.word	0x08016f48
 8011678:	08016f28 	.word	0x08016f28
 801167c:	080170d8 	.word	0x080170d8
 8011680:	080170a8 	.word	0x080170a8
 8011684:	08017078 	.word	0x08017078
 8011688:	08017048 	.word	0x08017048
 801168c:	08017018 	.word	0x08017018
 8011690:	08016fe8 	.word	0x08016fe8
#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
        case MBEDTLS_ECP_DP_BP512R1:
            return( LOAD_GROUP_A( brainpoolP512r1 ) );
 8011694:	2340      	movs	r3, #64	@ 0x40
 8011696:	9308      	str	r3, [sp, #32]
 8011698:	4b17      	ldr	r3, [pc, #92]	@ (80116f8 <mbedtls_ecp_group_load+0x3f4>)
 801169a:	9307      	str	r3, [sp, #28]
 801169c:	2340      	movs	r3, #64	@ 0x40
 801169e:	9306      	str	r3, [sp, #24]
 80116a0:	4b16      	ldr	r3, [pc, #88]	@ (80116fc <mbedtls_ecp_group_load+0x3f8>)
 80116a2:	9305      	str	r3, [sp, #20]
 80116a4:	2340      	movs	r3, #64	@ 0x40
 80116a6:	9304      	str	r3, [sp, #16]
 80116a8:	4b15      	ldr	r3, [pc, #84]	@ (8011700 <mbedtls_ecp_group_load+0x3fc>)
 80116aa:	9303      	str	r3, [sp, #12]
 80116ac:	2340      	movs	r3, #64	@ 0x40
 80116ae:	9302      	str	r3, [sp, #8]
 80116b0:	4b14      	ldr	r3, [pc, #80]	@ (8011704 <mbedtls_ecp_group_load+0x400>)
 80116b2:	9301      	str	r3, [sp, #4]
 80116b4:	2340      	movs	r3, #64	@ 0x40
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	4b13      	ldr	r3, [pc, #76]	@ (8011708 <mbedtls_ecp_group_load+0x404>)
 80116ba:	2240      	movs	r2, #64	@ 0x40
 80116bc:	4913      	ldr	r1, [pc, #76]	@ (801170c <mbedtls_ecp_group_load+0x408>)
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f7ff fcae 	bl	8011020 <ecp_group_load>
 80116c4:	4603      	mov	r3, r0
 80116c6:	e013      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
        case MBEDTLS_ECP_DP_CURVE25519:
            grp->modp = ecp_mod_p255;
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	4a11      	ldr	r2, [pc, #68]	@ (8011710 <mbedtls_ecp_group_load+0x40c>)
 80116cc:	665a      	str	r2, [r3, #100]	@ 0x64
            return( ecp_use_curve25519( grp ) );
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f7ff fcf8 	bl	80110c4 <ecp_use_curve25519>
 80116d4:	4603      	mov	r3, r0
 80116d6:	e00b      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
        case MBEDTLS_ECP_DP_CURVE448:
            grp->modp = ecp_mod_p448;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	4a0e      	ldr	r2, [pc, #56]	@ (8011714 <mbedtls_ecp_group_load+0x410>)
 80116dc:	665a      	str	r2, [r3, #100]	@ 0x64
            return( ecp_use_curve448( grp ) );
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff fd68 	bl	80111b4 <ecp_use_curve448>
 80116e4:	4603      	mov	r3, r0
 80116e6:	e003      	b.n	80116f0 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f7fc fca1 	bl	800e030 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 80116ee:	4b0a      	ldr	r3, [pc, #40]	@ (8011718 <mbedtls_ecp_group_load+0x414>)
    }
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3708      	adds	r7, #8
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	08017248 	.word	0x08017248
 80116fc:	08017208 	.word	0x08017208
 8011700:	080171c8 	.word	0x080171c8
 8011704:	08017188 	.word	0x08017188
 8011708:	08017148 	.word	0x08017148
 801170c:	08017108 	.word	0x08017108
 8011710:	08013201 	.word	0x08013201
 8011714:	080132e1 	.word	0x080132e1
 8011718:	ffffb180 	.word	0xffffb180

0801171c <add64>:
 * use a mbedtls_mpi_uint * to designate such a chunk, and small loops to handle it.
 */

/* Add 64-bit chunks (dst += src) and update carry */
static inline void add64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *src, mbedtls_mpi_uint *carry )
{
 801171c:	b480      	push	{r7}
 801171e:	b087      	sub	sp, #28
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
    unsigned char i;
    mbedtls_mpi_uint c = 0;
 8011728:	2300      	movs	r3, #0
 801172a:	613b      	str	r3, [r7, #16]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )
 801172c:	2300      	movs	r3, #0
 801172e:	75fb      	strb	r3, [r7, #23]
 8011730:	e02b      	b.n	801178a <add64+0x6e>
    {
        *dst += c;      c  = ( *dst < c );
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	441a      	add	r2, r3
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	601a      	str	r2, [r3, #0]
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	693a      	ldr	r2, [r7, #16]
 8011744:	429a      	cmp	r2, r3
 8011746:	bf8c      	ite	hi
 8011748:	2301      	movhi	r3, #1
 801174a:	2300      	movls	r3, #0
 801174c:	b2db      	uxtb	r3, r3
 801174e:	613b      	str	r3, [r7, #16]
        *dst += *src;   c += ( *dst < *src );
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	441a      	add	r2, r3
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	601a      	str	r2, [r3, #0]
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681a      	ldr	r2, [r3, #0]
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	429a      	cmp	r2, r3
 8011768:	bf34      	ite	cc
 801176a:	2301      	movcc	r3, #1
 801176c:	2300      	movcs	r3, #0
 801176e:	b2db      	uxtb	r3, r3
 8011770:	461a      	mov	r2, r3
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	4413      	add	r3, r2
 8011776:	613b      	str	r3, [r7, #16]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )
 8011778:	7dfb      	ldrb	r3, [r7, #23]
 801177a:	3301      	adds	r3, #1
 801177c:	75fb      	strb	r3, [r7, #23]
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	3304      	adds	r3, #4
 8011782:	60fb      	str	r3, [r7, #12]
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	3304      	adds	r3, #4
 8011788:	60bb      	str	r3, [r7, #8]
 801178a:	7dfb      	ldrb	r3, [r7, #23]
 801178c:	2b01      	cmp	r3, #1
 801178e:	d9d0      	bls.n	8011732 <add64+0x16>
    }
    *carry += c;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	441a      	add	r2, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	601a      	str	r2, [r3, #0]
}
 801179c:	bf00      	nop
 801179e:	371c      	adds	r7, #28
 80117a0:	46bd      	mov	sp, r7
 80117a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a6:	4770      	bx	lr

080117a8 <carry64>:

/* Add carry to a 64-bit chunk and update carry */
static inline void carry64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *carry )
{
 80117a8:	b480      	push	{r7}
 80117aa:	b085      	sub	sp, #20
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
    unsigned char i;
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )
 80117b2:	2300      	movs	r3, #0
 80117b4:	73fb      	strb	r3, [r7, #15]
 80117b6:	e018      	b.n	80117ea <carry64+0x42>
    {
        *dst += *carry;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	441a      	add	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	601a      	str	r2, [r3, #0]
        *carry  = ( *dst < *carry );
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	bf34      	ite	cc
 80117d2:	2301      	movcc	r3, #1
 80117d4:	2300      	movcs	r3, #0
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	461a      	mov	r2, r3
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )
 80117de:	7bfb      	ldrb	r3, [r7, #15]
 80117e0:	3301      	adds	r3, #1
 80117e2:	73fb      	strb	r3, [r7, #15]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	3304      	adds	r3, #4
 80117e8:	607b      	str	r3, [r7, #4]
 80117ea:	7bfb      	ldrb	r3, [r7, #15]
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d9e3      	bls.n	80117b8 <carry64+0x10>
    }
}
 80117f0:	bf00      	nop
 80117f2:	bf00      	nop
 80117f4:	3714      	adds	r7, #20
 80117f6:	46bd      	mov	sp, r7
 80117f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fc:	4770      	bx	lr

080117fe <ecp_mod_p192>:

/*
 * Fast quasi-reduction modulo p192 (FIPS 186-3 D.2.1)
 */
static int ecp_mod_p192( mbedtls_mpi *N )
{
 80117fe:	b580      	push	{r7, lr}
 8011800:	b086      	sub	sp, #24
 8011802:	af00      	add	r7, sp, #0
 8011804:	6078      	str	r0, [r7, #4]
    int ret;
    mbedtls_mpi_uint c = 0;
 8011806:	2300      	movs	r3, #0
 8011808:	60bb      	str	r3, [r7, #8]
    mbedtls_mpi_uint *p, *end;

    /* Make sure we have enough blocks so that A(5) is legal */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, 6 * WIDTH ) );
 801180a:	210c      	movs	r1, #12
 801180c:	6878      	ldr	r0, [r7, #4]
 801180e:	f7f8 fd07 	bl	800a220 <mbedtls_mpi_grow>
 8011812:	6138      	str	r0, [r7, #16]
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d16b      	bne.n	80118f2 <ecp_mod_p192+0xf4>

    p = N->p;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	689b      	ldr	r3, [r3, #8]
 801181e:	617b      	str	r3, [r7, #20]
    end = p + N->n;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	009b      	lsls	r3, r3, #2
 8011826:	697a      	ldr	r2, [r7, #20]
 8011828:	4413      	add	r3, r2
 801182a:	60fb      	str	r3, [r7, #12]

    ADD( 3 ); ADD( 5 );             NEXT; // A0 += A3 + A5
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	689b      	ldr	r3, [r3, #8]
 8011830:	3318      	adds	r3, #24
 8011832:	f107 0208 	add.w	r2, r7, #8
 8011836:	4619      	mov	r1, r3
 8011838:	6978      	ldr	r0, [r7, #20]
 801183a:	f7ff ff6f 	bl	801171c <add64>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	689b      	ldr	r3, [r3, #8]
 8011842:	3328      	adds	r3, #40	@ 0x28
 8011844:	f107 0208 	add.w	r2, r7, #8
 8011848:	4619      	mov	r1, r3
 801184a:	6978      	ldr	r0, [r7, #20]
 801184c:	f7ff ff66 	bl	801171c <add64>
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	3308      	adds	r3, #8
 8011854:	617b      	str	r3, [r7, #20]
 8011856:	f107 0308 	add.w	r3, r7, #8
 801185a:	4619      	mov	r1, r3
 801185c:	6978      	ldr	r0, [r7, #20]
 801185e:	f7ff ffa3 	bl	80117a8 <carry64>
    ADD( 3 ); ADD( 4 ); ADD( 5 );   NEXT; // A1 += A3 + A4 + A5
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	689b      	ldr	r3, [r3, #8]
 8011866:	3318      	adds	r3, #24
 8011868:	f107 0208 	add.w	r2, r7, #8
 801186c:	4619      	mov	r1, r3
 801186e:	6978      	ldr	r0, [r7, #20]
 8011870:	f7ff ff54 	bl	801171c <add64>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	689b      	ldr	r3, [r3, #8]
 8011878:	3320      	adds	r3, #32
 801187a:	f107 0208 	add.w	r2, r7, #8
 801187e:	4619      	mov	r1, r3
 8011880:	6978      	ldr	r0, [r7, #20]
 8011882:	f7ff ff4b 	bl	801171c <add64>
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	689b      	ldr	r3, [r3, #8]
 801188a:	3328      	adds	r3, #40	@ 0x28
 801188c:	f107 0208 	add.w	r2, r7, #8
 8011890:	4619      	mov	r1, r3
 8011892:	6978      	ldr	r0, [r7, #20]
 8011894:	f7ff ff42 	bl	801171c <add64>
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	3308      	adds	r3, #8
 801189c:	617b      	str	r3, [r7, #20]
 801189e:	f107 0308 	add.w	r3, r7, #8
 80118a2:	4619      	mov	r1, r3
 80118a4:	6978      	ldr	r0, [r7, #20]
 80118a6:	f7ff ff7f 	bl	80117a8 <carry64>
    ADD( 4 ); ADD( 5 );             LAST; // A2 += A4 + A5
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	689b      	ldr	r3, [r3, #8]
 80118ae:	3320      	adds	r3, #32
 80118b0:	f107 0208 	add.w	r2, r7, #8
 80118b4:	4619      	mov	r1, r3
 80118b6:	6978      	ldr	r0, [r7, #20]
 80118b8:	f7ff ff30 	bl	801171c <add64>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	689b      	ldr	r3, [r3, #8]
 80118c0:	3328      	adds	r3, #40	@ 0x28
 80118c2:	f107 0208 	add.w	r2, r7, #8
 80118c6:	4619      	mov	r1, r3
 80118c8:	6978      	ldr	r0, [r7, #20]
 80118ca:	f7ff ff27 	bl	801171c <add64>
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	3308      	adds	r3, #8
 80118d2:	617b      	str	r3, [r7, #20]
 80118d4:	68ba      	ldr	r2, [r7, #8]
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	e002      	b.n	80118e2 <ecp_mod_p192+0xe4>
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	2200      	movs	r2, #0
 80118e0:	601a      	str	r2, [r3, #0]
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	3304      	adds	r3, #4
 80118e6:	617b      	str	r3, [r7, #20]
 80118e8:	697a      	ldr	r2, [r7, #20]
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d3f5      	bcc.n	80118dc <ecp_mod_p192+0xde>

cleanup:
 80118f0:	bf00      	nop
    return( ret );
 80118f2:	693b      	ldr	r3, [r7, #16]
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3718      	adds	r7, #24
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <add32>:

/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
 80118fc:	b480      	push	{r7}
 80118fe:	b085      	sub	sp, #20
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	607a      	str	r2, [r7, #4]
    *dst += src;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	681a      	ldr	r2, [r3, #0]
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	441a      	add	r2, r3
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	601a      	str	r2, [r3, #0]
    *carry += ( *dst < src );
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f993 3000 	ldrsb.w	r3, [r3]
 801191a:	b2db      	uxtb	r3, r3
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	6812      	ldr	r2, [r2, #0]
 8011920:	68b9      	ldr	r1, [r7, #8]
 8011922:	4291      	cmp	r1, r2
 8011924:	bf8c      	ite	hi
 8011926:	2201      	movhi	r2, #1
 8011928:	2200      	movls	r2, #0
 801192a:	b2d2      	uxtb	r2, r2
 801192c:	4413      	add	r3, r2
 801192e:	b2db      	uxtb	r3, r3
 8011930:	b25a      	sxtb	r2, r3
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	701a      	strb	r2, [r3, #0]
}
 8011936:	bf00      	nop
 8011938:	3714      	adds	r7, #20
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
 8011942:	b480      	push	{r7}
 8011944:	b085      	sub	sp, #20
 8011946:	af00      	add	r7, sp, #0
 8011948:	60f8      	str	r0, [r7, #12]
 801194a:	60b9      	str	r1, [r7, #8]
 801194c:	607a      	str	r2, [r7, #4]
    *carry -= ( *dst < src );
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f993 3000 	ldrsb.w	r3, [r3]
 8011954:	b2db      	uxtb	r3, r3
 8011956:	68fa      	ldr	r2, [r7, #12]
 8011958:	6812      	ldr	r2, [r2, #0]
 801195a:	68b9      	ldr	r1, [r7, #8]
 801195c:	4291      	cmp	r1, r2
 801195e:	bf8c      	ite	hi
 8011960:	2201      	movhi	r2, #1
 8011962:	2200      	movls	r2, #0
 8011964:	b2d2      	uxtb	r2, r2
 8011966:	1a9b      	subs	r3, r3, r2
 8011968:	b2db      	uxtb	r3, r3
 801196a:	b25a      	sxtb	r2, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	701a      	strb	r2, [r3, #0]
    *dst -= src;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	1ad2      	subs	r2, r2, r3
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	601a      	str	r2, [r3, #0]
}
 801197c:	bf00      	nop
 801197e:	3714      	adds	r7, #20
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <fix_negative>:
/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b086      	sub	sp, #24
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	607a      	str	r2, [r7, #4]
 8011992:	603b      	str	r3, [r7, #0]
 8011994:	460b      	mov	r3, r1
 8011996:	72fb      	strb	r3, [r7, #11]
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 8011998:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801199c:	4258      	negs	r0, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	689a      	ldr	r2, [r3, #8]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6859      	ldr	r1, [r3, #4]
 80119a6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80119aa:	440b      	add	r3, r1
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	4413      	add	r3, r2
 80119b0:	4602      	mov	r2, r0
 80119b2:	601a      	str	r2, [r3, #0]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 80119b4:	68fa      	ldr	r2, [r7, #12]
 80119b6:	6879      	ldr	r1, [r7, #4]
 80119b8:	68f8      	ldr	r0, [r7, #12]
 80119ba:	f7f9 fc9f 	bl	800b2fc <mbedtls_mpi_sub_abs>
 80119be:	6178      	str	r0, [r7, #20]
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d103      	bne.n	80119ce <fix_negative+0x46>
    N->s = -1;
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	f04f 32ff 	mov.w	r2, #4294967295
 80119cc:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 80119ce:	697b      	ldr	r3, [r7, #20]
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3718      	adds	r7, #24
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <ecp_mod_p224>:
#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
/*
 * Fast quasi-reduction modulo p224 (FIPS 186-3 D.2.2)
 */
static int ecp_mod_p224( mbedtls_mpi *N )
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b092      	sub	sp, #72	@ 0x48
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
    INIT( 224 );
 80119e0:	2300      	movs	r3, #0
 80119e2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80119e6:	2300      	movs	r3, #0
 80119e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80119ea:	23e0      	movs	r3, #224	@ 0xe0
 80119ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80119ee:	2301      	movs	r3, #1
 80119f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80119f2:	2308      	movs	r3, #8
 80119f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80119f6:	f107 0308 	add.w	r3, r7, #8
 80119fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80119fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119fe:	009a      	lsls	r2, r3, #2
 8011a00:	f107 0308 	add.w	r3, r7, #8
 8011a04:	2100      	movs	r1, #0
 8011a06:	4618      	mov	r0, r3
 8011a08:	f003 ffb4 	bl	8015974 <memset>
 8011a0c:	210e      	movs	r1, #14
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7f8 fc06 	bl	800a220 <mbedtls_mpi_grow>
 8011a14:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	f040 821f 	bne.w	8011e5c <ecp_mod_p224+0x484>
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	689a      	ldr	r2, [r3, #8]
 8011a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	4413      	add	r3, r2
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	637b      	str	r3, [r7, #52]	@ 0x34

    SUB(  7 ); SUB( 11 );               NEXT; // A0 += -A7 - A11
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	689b      	ldr	r3, [r3, #8]
 8011a30:	331c      	adds	r3, #28
 8011a32:	6819      	ldr	r1, [r3, #0]
 8011a34:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011a38:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7ff ff80 	bl	8011942 <sub32>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	689b      	ldr	r3, [r3, #8]
 8011a46:	332c      	adds	r3, #44	@ 0x2c
 8011a48:	6819      	ldr	r1, [r3, #0]
 8011a4a:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011a4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7ff ff75 	bl	8011942 <sub32>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	689a      	ldr	r2, [r3, #8]
 8011a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	4413      	add	r3, r2
 8011a62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a64:	601a      	str	r2, [r3, #0]
 8011a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a68:	3301      	adds	r3, #1
 8011a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	689a      	ldr	r2, [r3, #8]
 8011a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	4413      	add	r3, r2
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a7a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011a7e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011a82:	2300      	movs	r3, #0
 8011a84:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011a88:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	da0b      	bge.n	8011aa8 <ecp_mod_p224+0xd0>
 8011a90:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011a94:	425b      	negs	r3, r3
 8011a96:	4619      	mov	r1, r3
 8011a98:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011a9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7ff ff4e 	bl	8011942 <sub32>
 8011aa6:	e008      	b.n	8011aba <ecp_mod_p224+0xe2>
 8011aa8:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011aac:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011ab0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7ff ff21 	bl	80118fc <add32>
    SUB(  8 ); SUB( 12 );               NEXT; // A1 += -A8 - A12
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	689b      	ldr	r3, [r3, #8]
 8011abe:	3320      	adds	r3, #32
 8011ac0:	6819      	ldr	r1, [r3, #0]
 8011ac2:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011ac6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7ff ff39 	bl	8011942 <sub32>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	689b      	ldr	r3, [r3, #8]
 8011ad4:	3330      	adds	r3, #48	@ 0x30
 8011ad6:	6819      	ldr	r1, [r3, #0]
 8011ad8:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011adc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7ff ff2e 	bl	8011942 <sub32>
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	689a      	ldr	r2, [r3, #8]
 8011aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	4413      	add	r3, r2
 8011af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011af2:	601a      	str	r2, [r3, #0]
 8011af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011af6:	3301      	adds	r3, #1
 8011af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	689a      	ldr	r2, [r3, #8]
 8011afe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	4413      	add	r3, r2
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b08:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011b0c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011b10:	2300      	movs	r3, #0
 8011b12:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011b16:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	da0b      	bge.n	8011b36 <ecp_mod_p224+0x15e>
 8011b1e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011b22:	425b      	negs	r3, r3
 8011b24:	4619      	mov	r1, r3
 8011b26:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7ff ff07 	bl	8011942 <sub32>
 8011b34:	e008      	b.n	8011b48 <ecp_mod_p224+0x170>
 8011b36:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011b3a:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b3e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7ff feda 	bl	80118fc <add32>
    SUB(  9 ); SUB( 13 );               NEXT; // A2 += -A9 - A13
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	689b      	ldr	r3, [r3, #8]
 8011b4c:	3324      	adds	r3, #36	@ 0x24
 8011b4e:	6819      	ldr	r1, [r3, #0]
 8011b50:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7ff fef2 	bl	8011942 <sub32>
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	689b      	ldr	r3, [r3, #8]
 8011b62:	3334      	adds	r3, #52	@ 0x34
 8011b64:	6819      	ldr	r1, [r3, #0]
 8011b66:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b6a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7ff fee7 	bl	8011942 <sub32>
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	689a      	ldr	r2, [r3, #8]
 8011b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b7a:	009b      	lsls	r3, r3, #2
 8011b7c:	4413      	add	r3, r2
 8011b7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b80:	601a      	str	r2, [r3, #0]
 8011b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b84:	3301      	adds	r3, #1
 8011b86:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	689a      	ldr	r2, [r3, #8]
 8011b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	4413      	add	r3, r2
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b96:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011b9a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011ba4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	da0b      	bge.n	8011bc4 <ecp_mod_p224+0x1ec>
 8011bac:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011bb0:	425b      	negs	r3, r3
 8011bb2:	4619      	mov	r1, r3
 8011bb4:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011bb8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7ff fec0 	bl	8011942 <sub32>
 8011bc2:	e008      	b.n	8011bd6 <ecp_mod_p224+0x1fe>
 8011bc4:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011bc8:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011bcc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7ff fe93 	bl	80118fc <add32>
    SUB( 10 ); ADD(  7 ); ADD( 11 );    NEXT; // A3 += -A10 + A7 + A11
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	689b      	ldr	r3, [r3, #8]
 8011bda:	3328      	adds	r3, #40	@ 0x28
 8011bdc:	6819      	ldr	r1, [r3, #0]
 8011bde:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011be2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7ff feab 	bl	8011942 <sub32>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	689b      	ldr	r3, [r3, #8]
 8011bf0:	331c      	adds	r3, #28
 8011bf2:	6819      	ldr	r1, [r3, #0]
 8011bf4:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011bf8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7ff fe7d 	bl	80118fc <add32>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	689b      	ldr	r3, [r3, #8]
 8011c06:	332c      	adds	r3, #44	@ 0x2c
 8011c08:	6819      	ldr	r1, [r3, #0]
 8011c0a:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7ff fe72 	bl	80118fc <add32>
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	689a      	ldr	r2, [r3, #8]
 8011c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	4413      	add	r3, r2
 8011c22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011c24:	601a      	str	r2, [r3, #0]
 8011c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c28:	3301      	adds	r3, #1
 8011c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	689a      	ldr	r2, [r3, #8]
 8011c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	4413      	add	r3, r2
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c3a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011c3e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011c42:	2300      	movs	r3, #0
 8011c44:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011c48:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	da0b      	bge.n	8011c68 <ecp_mod_p224+0x290>
 8011c50:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011c54:	425b      	negs	r3, r3
 8011c56:	4619      	mov	r1, r3
 8011c58:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c5c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7ff fe6e 	bl	8011942 <sub32>
 8011c66:	e008      	b.n	8011c7a <ecp_mod_p224+0x2a2>
 8011c68:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011c6c:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ff fe41 	bl	80118fc <add32>
    SUB( 11 ); ADD(  8 ); ADD( 12 );    NEXT; // A4 += -A11 + A8 + A12
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	332c      	adds	r3, #44	@ 0x2c
 8011c80:	6819      	ldr	r1, [r3, #0]
 8011c82:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c8a:	4618      	mov	r0, r3
 8011c8c:	f7ff fe59 	bl	8011942 <sub32>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	689b      	ldr	r3, [r3, #8]
 8011c94:	3320      	adds	r3, #32
 8011c96:	6819      	ldr	r1, [r3, #0]
 8011c98:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c9c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7ff fe2b 	bl	80118fc <add32>
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	3330      	adds	r3, #48	@ 0x30
 8011cac:	6819      	ldr	r1, [r3, #0]
 8011cae:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011cb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7ff fe20 	bl	80118fc <add32>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	689a      	ldr	r2, [r3, #8]
 8011cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cc2:	009b      	lsls	r3, r3, #2
 8011cc4:	4413      	add	r3, r2
 8011cc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cc8:	601a      	str	r2, [r3, #0]
 8011cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ccc:	3301      	adds	r3, #1
 8011cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	689a      	ldr	r2, [r3, #8]
 8011cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	4413      	add	r3, r2
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cde:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011ce2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011cec:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	da0b      	bge.n	8011d0c <ecp_mod_p224+0x334>
 8011cf4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011cf8:	425b      	negs	r3, r3
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7ff fe1c 	bl	8011942 <sub32>
 8011d0a:	e008      	b.n	8011d1e <ecp_mod_p224+0x346>
 8011d0c:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011d10:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7ff fdef 	bl	80118fc <add32>
    SUB( 12 ); ADD(  9 ); ADD( 13 );    NEXT; // A5 += -A12 + A9 + A13
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	689b      	ldr	r3, [r3, #8]
 8011d22:	3330      	adds	r3, #48	@ 0x30
 8011d24:	6819      	ldr	r1, [r3, #0]
 8011d26:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f7ff fe07 	bl	8011942 <sub32>
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	689b      	ldr	r3, [r3, #8]
 8011d38:	3324      	adds	r3, #36	@ 0x24
 8011d3a:	6819      	ldr	r1, [r3, #0]
 8011d3c:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d40:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7ff fdd9 	bl	80118fc <add32>
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	689b      	ldr	r3, [r3, #8]
 8011d4e:	3334      	adds	r3, #52	@ 0x34
 8011d50:	6819      	ldr	r1, [r3, #0]
 8011d52:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d56:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7ff fdce 	bl	80118fc <add32>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	689a      	ldr	r2, [r3, #8]
 8011d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d66:	009b      	lsls	r3, r3, #2
 8011d68:	4413      	add	r3, r2
 8011d6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d6c:	601a      	str	r2, [r3, #0]
 8011d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d70:	3301      	adds	r3, #1
 8011d72:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	689a      	ldr	r2, [r3, #8]
 8011d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	4413      	add	r3, r2
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d82:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011d86:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011d90:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	da0b      	bge.n	8011db0 <ecp_mod_p224+0x3d8>
 8011d98:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011d9c:	425b      	negs	r3, r3
 8011d9e:	4619      	mov	r1, r3
 8011da0:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011da4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7ff fdca 	bl	8011942 <sub32>
 8011dae:	e008      	b.n	8011dc2 <ecp_mod_p224+0x3ea>
 8011db0:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011db4:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011db8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7ff fd9d 	bl	80118fc <add32>
    SUB( 13 ); ADD( 10 );               LAST; // A6 += -A13 + A10
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	689b      	ldr	r3, [r3, #8]
 8011dc6:	3334      	adds	r3, #52	@ 0x34
 8011dc8:	6819      	ldr	r1, [r3, #0]
 8011dca:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011dce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7ff fdb5 	bl	8011942 <sub32>
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	3328      	adds	r3, #40	@ 0x28
 8011dde:	6819      	ldr	r1, [r3, #0]
 8011de0:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011de4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7ff fd87 	bl	80118fc <add32>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	689a      	ldr	r2, [r3, #8]
 8011df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	4413      	add	r3, r2
 8011df8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011dfa:	601a      	str	r2, [r3, #0]
 8011dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011dfe:	3301      	adds	r3, #1
 8011e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e02:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8011e06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011e0a:	b25b      	sxtb	r3, r3
 8011e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	689a      	ldr	r2, [r3, #8]
 8011e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e14:	009b      	lsls	r3, r3, #2
 8011e16:	4413      	add	r3, r2
 8011e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e20:	e006      	b.n	8011e30 <ecp_mod_p224+0x458>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	689a      	ldr	r2, [r3, #8]
 8011e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	4413      	add	r3, r2
 8011e2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e2e:	601a      	str	r2, [r3, #0]
 8011e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e32:	3301      	adds	r3, #1
 8011e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d3f0      	bcc.n	8011e22 <ecp_mod_p224+0x44a>
 8011e40:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	da08      	bge.n	8011e5a <ecp_mod_p224+0x482>
 8011e48:	f997 103a 	ldrsb.w	r1, [r7, #58]	@ 0x3a
 8011e4c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f7ff fd98 	bl	8011988 <fix_negative>
 8011e58:	e000      	b.n	8011e5c <ecp_mod_p224+0x484>

cleanup:
 8011e5a:	bf00      	nop
    return( ret );
 8011e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3748      	adds	r7, #72	@ 0x48
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <ecp_mod_p256>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 8011e66:	b580      	push	{r7, lr}
 8011e68:	b094      	sub	sp, #80	@ 0x50
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	6078      	str	r0, [r7, #4]
    INIT( 256 );
 8011e6e:	2300      	movs	r3, #0
 8011e70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011e74:	2300      	movs	r3, #0
 8011e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011e78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011e7e:	2301      	movs	r3, #1
 8011e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e82:	2309      	movs	r3, #9
 8011e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e86:	f107 030c 	add.w	r3, r7, #12
 8011e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e8e:	009a      	lsls	r2, r3, #2
 8011e90:	f107 030c 	add.w	r3, r7, #12
 8011e94:	2100      	movs	r1, #0
 8011e96:	4618      	mov	r0, r3
 8011e98:	f003 fd6c 	bl	8015974 <memset>
 8011e9c:	2110      	movs	r1, #16
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f7f8 f9be 	bl	800a220 <mbedtls_mpi_grow>
 8011ea4:	6478      	str	r0, [r7, #68]	@ 0x44
 8011ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	f040 83f2 	bne.w	8012692 <ecp_mod_p256+0x82c>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	689a      	ldr	r2, [r3, #8]
 8011eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011eb4:	009b      	lsls	r3, r3, #2
 8011eb6:	4413      	add	r3, r2
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ADD(  8 ); ADD(  9 );
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	689b      	ldr	r3, [r3, #8]
 8011ec0:	3320      	adds	r3, #32
 8011ec2:	6819      	ldr	r1, [r3, #0]
 8011ec4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011ec8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7ff fd15 	bl	80118fc <add32>
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	689b      	ldr	r3, [r3, #8]
 8011ed6:	3324      	adds	r3, #36	@ 0x24
 8011ed8:	6819      	ldr	r1, [r3, #0]
 8011eda:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011ede:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7ff fd0a 	bl	80118fc <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	689b      	ldr	r3, [r3, #8]
 8011eec:	332c      	adds	r3, #44	@ 0x2c
 8011eee:	6819      	ldr	r1, [r3, #0]
 8011ef0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011ef4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7ff fd22 	bl	8011942 <sub32>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	689b      	ldr	r3, [r3, #8]
 8011f02:	3330      	adds	r3, #48	@ 0x30
 8011f04:	6819      	ldr	r1, [r3, #0]
 8011f06:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f0a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f0e:	4618      	mov	r0, r3
 8011f10:	f7ff fd17 	bl	8011942 <sub32>
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	689b      	ldr	r3, [r3, #8]
 8011f18:	3334      	adds	r3, #52	@ 0x34
 8011f1a:	6819      	ldr	r1, [r3, #0]
 8011f1c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7ff fd0c 	bl	8011942 <sub32>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	689b      	ldr	r3, [r3, #8]
 8011f2e:	3338      	adds	r3, #56	@ 0x38
 8011f30:	6819      	ldr	r1, [r3, #0]
 8011f32:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f36:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7ff fd01 	bl	8011942 <sub32>
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	689a      	ldr	r2, [r3, #8]
 8011f44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f46:	009b      	lsls	r3, r3, #2
 8011f48:	4413      	add	r3, r2
 8011f4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011f4c:	601a      	str	r2, [r3, #0]
 8011f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f50:	3301      	adds	r3, #1
 8011f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	689a      	ldr	r2, [r3, #8]
 8011f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	4413      	add	r3, r2
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011f62:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8011f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011f70:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	da0b      	bge.n	8011f90 <ecp_mod_p256+0x12a>
 8011f78:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8011f7c:	425b      	negs	r3, r3
 8011f7e:	4619      	mov	r1, r3
 8011f80:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f84:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f7ff fcda 	bl	8011942 <sub32>
 8011f8e:	e008      	b.n	8011fa2 <ecp_mod_p256+0x13c>
 8011f90:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8011f94:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f98:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7ff fcad 	bl	80118fc <add32>

    ADD(  9 ); ADD( 10 );
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	689b      	ldr	r3, [r3, #8]
 8011fa6:	3324      	adds	r3, #36	@ 0x24
 8011fa8:	6819      	ldr	r1, [r3, #0]
 8011faa:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011fae:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7ff fca2 	bl	80118fc <add32>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	3328      	adds	r3, #40	@ 0x28
 8011fbe:	6819      	ldr	r1, [r3, #0]
 8011fc0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011fc4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011fc8:	4618      	mov	r0, r3
 8011fca:	f7ff fc97 	bl	80118fc <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	689b      	ldr	r3, [r3, #8]
 8011fd2:	3330      	adds	r3, #48	@ 0x30
 8011fd4:	6819      	ldr	r1, [r3, #0]
 8011fd6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011fda:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7ff fcaf 	bl	8011942 <sub32>
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	689b      	ldr	r3, [r3, #8]
 8011fe8:	3334      	adds	r3, #52	@ 0x34
 8011fea:	6819      	ldr	r1, [r3, #0]
 8011fec:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011ff0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7ff fca4 	bl	8011942 <sub32>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	689b      	ldr	r3, [r3, #8]
 8011ffe:	3338      	adds	r3, #56	@ 0x38
 8012000:	6819      	ldr	r1, [r3, #0]
 8012002:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012006:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801200a:	4618      	mov	r0, r3
 801200c:	f7ff fc99 	bl	8011942 <sub32>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	689b      	ldr	r3, [r3, #8]
 8012014:	333c      	adds	r3, #60	@ 0x3c
 8012016:	6819      	ldr	r1, [r3, #0]
 8012018:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801201c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012020:	4618      	mov	r0, r3
 8012022:	f7ff fc8e 	bl	8011942 <sub32>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	689a      	ldr	r2, [r3, #8]
 801202a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801202c:	009b      	lsls	r3, r3, #2
 801202e:	4413      	add	r3, r2
 8012030:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012032:	601a      	str	r2, [r3, #0]
 8012034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012036:	3301      	adds	r3, #1
 8012038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	689a      	ldr	r2, [r3, #8]
 801203e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012040:	009b      	lsls	r3, r3, #2
 8012042:	4413      	add	r3, r2
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012048:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 801204c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012050:	2300      	movs	r3, #0
 8012052:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012056:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 801205a:	2b00      	cmp	r3, #0
 801205c:	da0b      	bge.n	8012076 <ecp_mod_p256+0x210>
 801205e:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012062:	425b      	negs	r3, r3
 8012064:	4619      	mov	r1, r3
 8012066:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801206a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801206e:	4618      	mov	r0, r3
 8012070:	f7ff fc67 	bl	8011942 <sub32>
 8012074:	e008      	b.n	8012088 <ecp_mod_p256+0x222>
 8012076:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 801207a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801207e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012082:	4618      	mov	r0, r3
 8012084:	f7ff fc3a 	bl	80118fc <add32>

    ADD( 10 ); ADD( 11 );
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	3328      	adds	r3, #40	@ 0x28
 801208e:	6819      	ldr	r1, [r3, #0]
 8012090:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012094:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012098:	4618      	mov	r0, r3
 801209a:	f7ff fc2f 	bl	80118fc <add32>
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	689b      	ldr	r3, [r3, #8]
 80120a2:	332c      	adds	r3, #44	@ 0x2c
 80120a4:	6819      	ldr	r1, [r3, #0]
 80120a6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80120aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7ff fc24 	bl	80118fc <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	689b      	ldr	r3, [r3, #8]
 80120b8:	3334      	adds	r3, #52	@ 0x34
 80120ba:	6819      	ldr	r1, [r3, #0]
 80120bc:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80120c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7ff fc3c 	bl	8011942 <sub32>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	689b      	ldr	r3, [r3, #8]
 80120ce:	3338      	adds	r3, #56	@ 0x38
 80120d0:	6819      	ldr	r1, [r3, #0]
 80120d2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80120d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80120da:	4618      	mov	r0, r3
 80120dc:	f7ff fc31 	bl	8011942 <sub32>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	689b      	ldr	r3, [r3, #8]
 80120e4:	333c      	adds	r3, #60	@ 0x3c
 80120e6:	6819      	ldr	r1, [r3, #0]
 80120e8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80120ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80120f0:	4618      	mov	r0, r3
 80120f2:	f7ff fc26 	bl	8011942 <sub32>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	689a      	ldr	r2, [r3, #8]
 80120fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	4413      	add	r3, r2
 8012100:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012102:	601a      	str	r2, [r3, #0]
 8012104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012106:	3301      	adds	r3, #1
 8012108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	689a      	ldr	r2, [r3, #8]
 801210e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012110:	009b      	lsls	r3, r3, #2
 8012112:	4413      	add	r3, r2
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012118:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 801211c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012120:	2300      	movs	r3, #0
 8012122:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012126:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 801212a:	2b00      	cmp	r3, #0
 801212c:	da0b      	bge.n	8012146 <ecp_mod_p256+0x2e0>
 801212e:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012132:	425b      	negs	r3, r3
 8012134:	4619      	mov	r1, r3
 8012136:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801213a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801213e:	4618      	mov	r0, r3
 8012140:	f7ff fbff 	bl	8011942 <sub32>
 8012144:	e008      	b.n	8012158 <ecp_mod_p256+0x2f2>
 8012146:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 801214a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801214e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012152:	4618      	mov	r0, r3
 8012154:	f7ff fbd2 	bl	80118fc <add32>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	689b      	ldr	r3, [r3, #8]
 801215c:	332c      	adds	r3, #44	@ 0x2c
 801215e:	6819      	ldr	r1, [r3, #0]
 8012160:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012164:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012168:	4618      	mov	r0, r3
 801216a:	f7ff fbc7 	bl	80118fc <add32>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	689b      	ldr	r3, [r3, #8]
 8012172:	332c      	adds	r3, #44	@ 0x2c
 8012174:	6819      	ldr	r1, [r3, #0]
 8012176:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801217a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801217e:	4618      	mov	r0, r3
 8012180:	f7ff fbbc 	bl	80118fc <add32>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	689b      	ldr	r3, [r3, #8]
 8012188:	3330      	adds	r3, #48	@ 0x30
 801218a:	6819      	ldr	r1, [r3, #0]
 801218c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012190:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012194:	4618      	mov	r0, r3
 8012196:	f7ff fbb1 	bl	80118fc <add32>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	689b      	ldr	r3, [r3, #8]
 801219e:	3330      	adds	r3, #48	@ 0x30
 80121a0:	6819      	ldr	r1, [r3, #0]
 80121a2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7ff fba6 	bl	80118fc <add32>
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	689b      	ldr	r3, [r3, #8]
 80121b4:	3334      	adds	r3, #52	@ 0x34
 80121b6:	6819      	ldr	r1, [r3, #0]
 80121b8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7ff fb9b 	bl	80118fc <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	689b      	ldr	r3, [r3, #8]
 80121ca:	333c      	adds	r3, #60	@ 0x3c
 80121cc:	6819      	ldr	r1, [r3, #0]
 80121ce:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7ff fbb3 	bl	8011942 <sub32>
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	689b      	ldr	r3, [r3, #8]
 80121e0:	3320      	adds	r3, #32
 80121e2:	6819      	ldr	r1, [r3, #0]
 80121e4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121ec:	4618      	mov	r0, r3
 80121ee:	f7ff fba8 	bl	8011942 <sub32>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	689b      	ldr	r3, [r3, #8]
 80121f6:	3324      	adds	r3, #36	@ 0x24
 80121f8:	6819      	ldr	r1, [r3, #0]
 80121fa:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012202:	4618      	mov	r0, r3
 8012204:	f7ff fb9d 	bl	8011942 <sub32>
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	689a      	ldr	r2, [r3, #8]
 801220c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801220e:	009b      	lsls	r3, r3, #2
 8012210:	4413      	add	r3, r2
 8012212:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012214:	601a      	str	r2, [r3, #0]
 8012216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012218:	3301      	adds	r3, #1
 801221a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	689a      	ldr	r2, [r3, #8]
 8012220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	4413      	add	r3, r2
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801222a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 801222e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012232:	2300      	movs	r3, #0
 8012234:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012238:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 801223c:	2b00      	cmp	r3, #0
 801223e:	da0b      	bge.n	8012258 <ecp_mod_p256+0x3f2>
 8012240:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012244:	425b      	negs	r3, r3
 8012246:	4619      	mov	r1, r3
 8012248:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801224c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012250:	4618      	mov	r0, r3
 8012252:	f7ff fb76 	bl	8011942 <sub32>
 8012256:	e008      	b.n	801226a <ecp_mod_p256+0x404>
 8012258:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 801225c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012260:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012264:	4618      	mov	r0, r3
 8012266:	f7ff fb49 	bl	80118fc <add32>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	689b      	ldr	r3, [r3, #8]
 801226e:	3330      	adds	r3, #48	@ 0x30
 8012270:	6819      	ldr	r1, [r3, #0]
 8012272:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012276:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801227a:	4618      	mov	r0, r3
 801227c:	f7ff fb3e 	bl	80118fc <add32>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	689b      	ldr	r3, [r3, #8]
 8012284:	3330      	adds	r3, #48	@ 0x30
 8012286:	6819      	ldr	r1, [r3, #0]
 8012288:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801228c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012290:	4618      	mov	r0, r3
 8012292:	f7ff fb33 	bl	80118fc <add32>
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	689b      	ldr	r3, [r3, #8]
 801229a:	3334      	adds	r3, #52	@ 0x34
 801229c:	6819      	ldr	r1, [r3, #0]
 801229e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7ff fb28 	bl	80118fc <add32>
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	689b      	ldr	r3, [r3, #8]
 80122b0:	3334      	adds	r3, #52	@ 0x34
 80122b2:	6819      	ldr	r1, [r3, #0]
 80122b4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122bc:	4618      	mov	r0, r3
 80122be:	f7ff fb1d 	bl	80118fc <add32>
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	689b      	ldr	r3, [r3, #8]
 80122c6:	3338      	adds	r3, #56	@ 0x38
 80122c8:	6819      	ldr	r1, [r3, #0]
 80122ca:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7ff fb12 	bl	80118fc <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	689b      	ldr	r3, [r3, #8]
 80122dc:	3324      	adds	r3, #36	@ 0x24
 80122de:	6819      	ldr	r1, [r3, #0]
 80122e0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7ff fb2a 	bl	8011942 <sub32>
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	689b      	ldr	r3, [r3, #8]
 80122f2:	3328      	adds	r3, #40	@ 0x28
 80122f4:	6819      	ldr	r1, [r3, #0]
 80122f6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122fe:	4618      	mov	r0, r3
 8012300:	f7ff fb1f 	bl	8011942 <sub32>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	689a      	ldr	r2, [r3, #8]
 8012308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801230a:	009b      	lsls	r3, r3, #2
 801230c:	4413      	add	r3, r2
 801230e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012310:	601a      	str	r2, [r3, #0]
 8012312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012314:	3301      	adds	r3, #1
 8012316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	689a      	ldr	r2, [r3, #8]
 801231c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801231e:	009b      	lsls	r3, r3, #2
 8012320:	4413      	add	r3, r2
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012326:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 801232a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801232e:	2300      	movs	r3, #0
 8012330:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012334:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012338:	2b00      	cmp	r3, #0
 801233a:	da0b      	bge.n	8012354 <ecp_mod_p256+0x4ee>
 801233c:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012340:	425b      	negs	r3, r3
 8012342:	4619      	mov	r1, r3
 8012344:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012348:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801234c:	4618      	mov	r0, r3
 801234e:	f7ff faf8 	bl	8011942 <sub32>
 8012352:	e008      	b.n	8012366 <ecp_mod_p256+0x500>
 8012354:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8012358:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801235c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012360:	4618      	mov	r0, r3
 8012362:	f7ff facb 	bl	80118fc <add32>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	689b      	ldr	r3, [r3, #8]
 801236a:	3334      	adds	r3, #52	@ 0x34
 801236c:	6819      	ldr	r1, [r3, #0]
 801236e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012372:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012376:	4618      	mov	r0, r3
 8012378:	f7ff fac0 	bl	80118fc <add32>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	689b      	ldr	r3, [r3, #8]
 8012380:	3334      	adds	r3, #52	@ 0x34
 8012382:	6819      	ldr	r1, [r3, #0]
 8012384:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012388:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801238c:	4618      	mov	r0, r3
 801238e:	f7ff fab5 	bl	80118fc <add32>
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	689b      	ldr	r3, [r3, #8]
 8012396:	3338      	adds	r3, #56	@ 0x38
 8012398:	6819      	ldr	r1, [r3, #0]
 801239a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801239e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123a2:	4618      	mov	r0, r3
 80123a4:	f7ff faaa 	bl	80118fc <add32>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	689b      	ldr	r3, [r3, #8]
 80123ac:	3338      	adds	r3, #56	@ 0x38
 80123ae:	6819      	ldr	r1, [r3, #0]
 80123b0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7ff fa9f 	bl	80118fc <add32>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	689b      	ldr	r3, [r3, #8]
 80123c2:	333c      	adds	r3, #60	@ 0x3c
 80123c4:	6819      	ldr	r1, [r3, #0]
 80123c6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7ff fa94 	bl	80118fc <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	689b      	ldr	r3, [r3, #8]
 80123d8:	3328      	adds	r3, #40	@ 0x28
 80123da:	6819      	ldr	r1, [r3, #0]
 80123dc:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7ff faac 	bl	8011942 <sub32>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	689b      	ldr	r3, [r3, #8]
 80123ee:	332c      	adds	r3, #44	@ 0x2c
 80123f0:	6819      	ldr	r1, [r3, #0]
 80123f2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7ff faa1 	bl	8011942 <sub32>
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	689a      	ldr	r2, [r3, #8]
 8012404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	4413      	add	r3, r2
 801240a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801240c:	601a      	str	r2, [r3, #0]
 801240e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012410:	3301      	adds	r3, #1
 8012412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	689a      	ldr	r2, [r3, #8]
 8012418:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801241a:	009b      	lsls	r3, r3, #2
 801241c:	4413      	add	r3, r2
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012422:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8012426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801242a:	2300      	movs	r3, #0
 801242c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012430:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012434:	2b00      	cmp	r3, #0
 8012436:	da0b      	bge.n	8012450 <ecp_mod_p256+0x5ea>
 8012438:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 801243c:	425b      	negs	r3, r3
 801243e:	4619      	mov	r1, r3
 8012440:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012444:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012448:	4618      	mov	r0, r3
 801244a:	f7ff fa7a 	bl	8011942 <sub32>
 801244e:	e008      	b.n	8012462 <ecp_mod_p256+0x5fc>
 8012450:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8012454:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012458:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801245c:	4618      	mov	r0, r3
 801245e:	f7ff fa4d 	bl	80118fc <add32>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	689b      	ldr	r3, [r3, #8]
 8012466:	3338      	adds	r3, #56	@ 0x38
 8012468:	6819      	ldr	r1, [r3, #0]
 801246a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801246e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012472:	4618      	mov	r0, r3
 8012474:	f7ff fa42 	bl	80118fc <add32>
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	689b      	ldr	r3, [r3, #8]
 801247c:	3338      	adds	r3, #56	@ 0x38
 801247e:	6819      	ldr	r1, [r3, #0]
 8012480:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012484:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012488:	4618      	mov	r0, r3
 801248a:	f7ff fa37 	bl	80118fc <add32>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	689b      	ldr	r3, [r3, #8]
 8012492:	333c      	adds	r3, #60	@ 0x3c
 8012494:	6819      	ldr	r1, [r3, #0]
 8012496:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801249a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801249e:	4618      	mov	r0, r3
 80124a0:	f7ff fa2c 	bl	80118fc <add32>
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	333c      	adds	r3, #60	@ 0x3c
 80124aa:	6819      	ldr	r1, [r3, #0]
 80124ac:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7ff fa21 	bl	80118fc <add32>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	689b      	ldr	r3, [r3, #8]
 80124be:	3338      	adds	r3, #56	@ 0x38
 80124c0:	6819      	ldr	r1, [r3, #0]
 80124c2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7ff fa16 	bl	80118fc <add32>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	689b      	ldr	r3, [r3, #8]
 80124d4:	3334      	adds	r3, #52	@ 0x34
 80124d6:	6819      	ldr	r1, [r3, #0]
 80124d8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124e0:	4618      	mov	r0, r3
 80124e2:	f7ff fa0b 	bl	80118fc <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	3320      	adds	r3, #32
 80124ec:	6819      	ldr	r1, [r3, #0]
 80124ee:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7ff fa23 	bl	8011942 <sub32>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	3324      	adds	r3, #36	@ 0x24
 8012502:	6819      	ldr	r1, [r3, #0]
 8012504:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012508:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801250c:	4618      	mov	r0, r3
 801250e:	f7ff fa18 	bl	8011942 <sub32>
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	689a      	ldr	r2, [r3, #8]
 8012516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	4413      	add	r3, r2
 801251c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801251e:	601a      	str	r2, [r3, #0]
 8012520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012522:	3301      	adds	r3, #1
 8012524:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	689a      	ldr	r2, [r3, #8]
 801252a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801252c:	009b      	lsls	r3, r3, #2
 801252e:	4413      	add	r3, r2
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012534:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8012538:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801253c:	2300      	movs	r3, #0
 801253e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012542:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012546:	2b00      	cmp	r3, #0
 8012548:	da0b      	bge.n	8012562 <ecp_mod_p256+0x6fc>
 801254a:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 801254e:	425b      	negs	r3, r3
 8012550:	4619      	mov	r1, r3
 8012552:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012556:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801255a:	4618      	mov	r0, r3
 801255c:	f7ff f9f1 	bl	8011942 <sub32>
 8012560:	e008      	b.n	8012574 <ecp_mod_p256+0x70e>
 8012562:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8012566:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801256a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801256e:	4618      	mov	r0, r3
 8012570:	f7ff f9c4 	bl	80118fc <add32>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	689b      	ldr	r3, [r3, #8]
 8012578:	333c      	adds	r3, #60	@ 0x3c
 801257a:	6819      	ldr	r1, [r3, #0]
 801257c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012580:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012584:	4618      	mov	r0, r3
 8012586:	f7ff f9b9 	bl	80118fc <add32>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	689b      	ldr	r3, [r3, #8]
 801258e:	333c      	adds	r3, #60	@ 0x3c
 8012590:	6819      	ldr	r1, [r3, #0]
 8012592:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012596:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801259a:	4618      	mov	r0, r3
 801259c:	f7ff f9ae 	bl	80118fc <add32>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	689b      	ldr	r3, [r3, #8]
 80125a4:	333c      	adds	r3, #60	@ 0x3c
 80125a6:	6819      	ldr	r1, [r3, #0]
 80125a8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80125ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7ff f9a3 	bl	80118fc <add32>
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	689b      	ldr	r3, [r3, #8]
 80125ba:	3320      	adds	r3, #32
 80125bc:	6819      	ldr	r1, [r3, #0]
 80125be:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80125c2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80125c6:	4618      	mov	r0, r3
 80125c8:	f7ff f998 	bl	80118fc <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	689b      	ldr	r3, [r3, #8]
 80125d0:	3328      	adds	r3, #40	@ 0x28
 80125d2:	6819      	ldr	r1, [r3, #0]
 80125d4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80125d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80125dc:	4618      	mov	r0, r3
 80125de:	f7ff f9b0 	bl	8011942 <sub32>
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	689b      	ldr	r3, [r3, #8]
 80125e6:	332c      	adds	r3, #44	@ 0x2c
 80125e8:	6819      	ldr	r1, [r3, #0]
 80125ea:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80125ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7ff f9a5 	bl	8011942 <sub32>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	689b      	ldr	r3, [r3, #8]
 80125fc:	3330      	adds	r3, #48	@ 0x30
 80125fe:	6819      	ldr	r1, [r3, #0]
 8012600:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012604:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012608:	4618      	mov	r0, r3
 801260a:	f7ff f99a 	bl	8011942 <sub32>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	689b      	ldr	r3, [r3, #8]
 8012612:	3334      	adds	r3, #52	@ 0x34
 8012614:	6819      	ldr	r1, [r3, #0]
 8012616:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801261a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801261e:	4618      	mov	r0, r3
 8012620:	f7ff f98f 	bl	8011942 <sub32>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	689a      	ldr	r2, [r3, #8]
 8012628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801262a:	009b      	lsls	r3, r3, #2
 801262c:	4413      	add	r3, r2
 801262e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012630:	601a      	str	r2, [r3, #0]
 8012632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012634:	3301      	adds	r3, #1
 8012636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012638:	f997 3042 	ldrsb.w	r3, [r7, #66]	@ 0x42
 801263c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012640:	b25b      	sxtb	r3, r3
 8012642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	689a      	ldr	r2, [r3, #8]
 8012648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801264a:	009b      	lsls	r3, r3, #2
 801264c:	4413      	add	r3, r2
 801264e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012650:	601a      	str	r2, [r3, #0]
 8012652:	2300      	movs	r3, #0
 8012654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012656:	e006      	b.n	8012666 <ecp_mod_p256+0x800>
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	689a      	ldr	r2, [r3, #8]
 801265c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	4413      	add	r3, r2
 8012662:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012664:	601a      	str	r2, [r3, #0]
 8012666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012668:	3301      	adds	r3, #1
 801266a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012672:	429a      	cmp	r2, r3
 8012674:	d3f0      	bcc.n	8012658 <ecp_mod_p256+0x7f2>
 8012676:	f997 3042 	ldrsb.w	r3, [r7, #66]	@ 0x42
 801267a:	2b00      	cmp	r3, #0
 801267c:	da08      	bge.n	8012690 <ecp_mod_p256+0x82a>
 801267e:	f997 1042 	ldrsb.w	r1, [r7, #66]	@ 0x42
 8012682:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8012686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7ff f97d 	bl	8011988 <fix_negative>
 801268e:	e000      	b.n	8012692 <ecp_mod_p256+0x82c>

cleanup:
 8012690:	bf00      	nop
    return( ret );
 8012692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8012694:	4618      	mov	r0, r3
 8012696:	3750      	adds	r7, #80	@ 0x50
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b098      	sub	sp, #96	@ 0x60
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
    INIT( 384 );
 80126a4:	2300      	movs	r3, #0
 80126a6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80126aa:	2300      	movs	r3, #0
 80126ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80126ae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80126b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80126b4:	2301      	movs	r3, #1
 80126b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80126b8:	230d      	movs	r3, #13
 80126ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80126bc:	f107 030c 	add.w	r3, r7, #12
 80126c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80126c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126c4:	009a      	lsls	r2, r3, #2
 80126c6:	f107 030c 	add.w	r3, r7, #12
 80126ca:	2100      	movs	r1, #0
 80126cc:	4618      	mov	r0, r3
 80126ce:	f003 f951 	bl	8015974 <memset>
 80126d2:	2118      	movs	r1, #24
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f7f7 fda3 	bl	800a220 <mbedtls_mpi_grow>
 80126da:	6578      	str	r0, [r7, #84]	@ 0x54
 80126dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126de:	2b00      	cmp	r3, #0
 80126e0:	f040 852f 	bne.w	8013142 <ecp_mod_p384+0xaa6>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	689a      	ldr	r2, [r3, #8]
 80126e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	4413      	add	r3, r2
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	689b      	ldr	r3, [r3, #8]
 80126f6:	3330      	adds	r3, #48	@ 0x30
 80126f8:	6819      	ldr	r1, [r3, #0]
 80126fa:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80126fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012702:	4618      	mov	r0, r3
 8012704:	f7ff f8fa 	bl	80118fc <add32>
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	689b      	ldr	r3, [r3, #8]
 801270c:	3354      	adds	r3, #84	@ 0x54
 801270e:	6819      	ldr	r1, [r3, #0]
 8012710:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012714:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012718:	4618      	mov	r0, r3
 801271a:	f7ff f8ef 	bl	80118fc <add32>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	689b      	ldr	r3, [r3, #8]
 8012722:	3350      	adds	r3, #80	@ 0x50
 8012724:	6819      	ldr	r1, [r3, #0]
 8012726:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801272a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801272e:	4618      	mov	r0, r3
 8012730:	f7ff f8e4 	bl	80118fc <add32>
    SUB( 23 );                                              NEXT; // A0
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	689b      	ldr	r3, [r3, #8]
 8012738:	335c      	adds	r3, #92	@ 0x5c
 801273a:	6819      	ldr	r1, [r3, #0]
 801273c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012740:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012744:	4618      	mov	r0, r3
 8012746:	f7ff f8fc 	bl	8011942 <sub32>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	689a      	ldr	r2, [r3, #8]
 801274e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012750:	009b      	lsls	r3, r3, #2
 8012752:	4413      	add	r3, r2
 8012754:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012756:	601a      	str	r2, [r3, #0]
 8012758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801275a:	3301      	adds	r3, #1
 801275c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	689a      	ldr	r2, [r3, #8]
 8012762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012764:	009b      	lsls	r3, r3, #2
 8012766:	4413      	add	r3, r2
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801276c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012770:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012774:	2300      	movs	r3, #0
 8012776:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 801277a:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 801277e:	2b00      	cmp	r3, #0
 8012780:	da0b      	bge.n	801279a <ecp_mod_p384+0xfe>
 8012782:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012786:	425b      	negs	r3, r3
 8012788:	4619      	mov	r1, r3
 801278a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801278e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012792:	4618      	mov	r0, r3
 8012794:	f7ff f8d5 	bl	8011942 <sub32>
 8012798:	e008      	b.n	80127ac <ecp_mod_p384+0x110>
 801279a:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 801279e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7ff f8a8 	bl	80118fc <add32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	689b      	ldr	r3, [r3, #8]
 80127b0:	3334      	adds	r3, #52	@ 0x34
 80127b2:	6819      	ldr	r1, [r3, #0]
 80127b4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127bc:	4618      	mov	r0, r3
 80127be:	f7ff f89d 	bl	80118fc <add32>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	3358      	adds	r3, #88	@ 0x58
 80127c8:	6819      	ldr	r1, [r3, #0]
 80127ca:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7ff f892 	bl	80118fc <add32>
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	689b      	ldr	r3, [r3, #8]
 80127dc:	335c      	adds	r3, #92	@ 0x5c
 80127de:	6819      	ldr	r1, [r3, #0]
 80127e0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7ff f887 	bl	80118fc <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	689b      	ldr	r3, [r3, #8]
 80127f2:	3330      	adds	r3, #48	@ 0x30
 80127f4:	6819      	ldr	r1, [r3, #0]
 80127f6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127fe:	4618      	mov	r0, r3
 8012800:	f7ff f89f 	bl	8011942 <sub32>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	689b      	ldr	r3, [r3, #8]
 8012808:	3350      	adds	r3, #80	@ 0x50
 801280a:	6819      	ldr	r1, [r3, #0]
 801280c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012810:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012814:	4618      	mov	r0, r3
 8012816:	f7ff f894 	bl	8011942 <sub32>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	689a      	ldr	r2, [r3, #8]
 801281e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012820:	009b      	lsls	r3, r3, #2
 8012822:	4413      	add	r3, r2
 8012824:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012826:	601a      	str	r2, [r3, #0]
 8012828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801282a:	3301      	adds	r3, #1
 801282c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	689a      	ldr	r2, [r3, #8]
 8012832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012834:	009b      	lsls	r3, r3, #2
 8012836:	4413      	add	r3, r2
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801283c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012840:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012844:	2300      	movs	r3, #0
 8012846:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 801284a:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 801284e:	2b00      	cmp	r3, #0
 8012850:	da0b      	bge.n	801286a <ecp_mod_p384+0x1ce>
 8012852:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012856:	425b      	negs	r3, r3
 8012858:	4619      	mov	r1, r3
 801285a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801285e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012862:	4618      	mov	r0, r3
 8012864:	f7ff f86d 	bl	8011942 <sub32>
 8012868:	e008      	b.n	801287c <ecp_mod_p384+0x1e0>
 801286a:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 801286e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012872:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012876:	4618      	mov	r0, r3
 8012878:	f7ff f840 	bl	80118fc <add32>

    ADD( 14 ); ADD( 23 );
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	689b      	ldr	r3, [r3, #8]
 8012880:	3338      	adds	r3, #56	@ 0x38
 8012882:	6819      	ldr	r1, [r3, #0]
 8012884:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012888:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801288c:	4618      	mov	r0, r3
 801288e:	f7ff f835 	bl	80118fc <add32>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	689b      	ldr	r3, [r3, #8]
 8012896:	335c      	adds	r3, #92	@ 0x5c
 8012898:	6819      	ldr	r1, [r3, #0]
 801289a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801289e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7ff f82a 	bl	80118fc <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	689b      	ldr	r3, [r3, #8]
 80128ac:	3334      	adds	r3, #52	@ 0x34
 80128ae:	6819      	ldr	r1, [r3, #0]
 80128b0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80128b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7ff f842 	bl	8011942 <sub32>
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	689b      	ldr	r3, [r3, #8]
 80128c2:	3354      	adds	r3, #84	@ 0x54
 80128c4:	6819      	ldr	r1, [r3, #0]
 80128c6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80128ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7ff f837 	bl	8011942 <sub32>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	689a      	ldr	r2, [r3, #8]
 80128d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80128da:	009b      	lsls	r3, r3, #2
 80128dc:	4413      	add	r3, r2
 80128de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80128e0:	601a      	str	r2, [r3, #0]
 80128e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80128e4:	3301      	adds	r3, #1
 80128e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	689a      	ldr	r2, [r3, #8]
 80128ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	4413      	add	r3, r2
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128f6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80128fa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80128fe:	2300      	movs	r3, #0
 8012900:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012904:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012908:	2b00      	cmp	r3, #0
 801290a:	da0b      	bge.n	8012924 <ecp_mod_p384+0x288>
 801290c:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012910:	425b      	negs	r3, r3
 8012912:	4619      	mov	r1, r3
 8012914:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012918:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801291c:	4618      	mov	r0, r3
 801291e:	f7ff f810 	bl	8011942 <sub32>
 8012922:	e008      	b.n	8012936 <ecp_mod_p384+0x29a>
 8012924:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012928:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801292c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012930:	4618      	mov	r0, r3
 8012932:	f7fe ffe3 	bl	80118fc <add32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	689b      	ldr	r3, [r3, #8]
 801293a:	333c      	adds	r3, #60	@ 0x3c
 801293c:	6819      	ldr	r1, [r3, #0]
 801293e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012942:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012946:	4618      	mov	r0, r3
 8012948:	f7fe ffd8 	bl	80118fc <add32>
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	689b      	ldr	r3, [r3, #8]
 8012950:	3330      	adds	r3, #48	@ 0x30
 8012952:	6819      	ldr	r1, [r3, #0]
 8012954:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012958:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801295c:	4618      	mov	r0, r3
 801295e:	f7fe ffcd 	bl	80118fc <add32>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	689b      	ldr	r3, [r3, #8]
 8012966:	3350      	adds	r3, #80	@ 0x50
 8012968:	6819      	ldr	r1, [r3, #0]
 801296a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801296e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012972:	4618      	mov	r0, r3
 8012974:	f7fe ffc2 	bl	80118fc <add32>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	689b      	ldr	r3, [r3, #8]
 801297c:	3354      	adds	r3, #84	@ 0x54
 801297e:	6819      	ldr	r1, [r3, #0]
 8012980:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012984:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012988:	4618      	mov	r0, r3
 801298a:	f7fe ffb7 	bl	80118fc <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	689b      	ldr	r3, [r3, #8]
 8012992:	3338      	adds	r3, #56	@ 0x38
 8012994:	6819      	ldr	r1, [r3, #0]
 8012996:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801299a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801299e:	4618      	mov	r0, r3
 80129a0:	f7fe ffcf 	bl	8011942 <sub32>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	689b      	ldr	r3, [r3, #8]
 80129a8:	3358      	adds	r3, #88	@ 0x58
 80129aa:	6819      	ldr	r1, [r3, #0]
 80129ac:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80129b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80129b4:	4618      	mov	r0, r3
 80129b6:	f7fe ffc4 	bl	8011942 <sub32>
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	689b      	ldr	r3, [r3, #8]
 80129be:	335c      	adds	r3, #92	@ 0x5c
 80129c0:	6819      	ldr	r1, [r3, #0]
 80129c2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80129c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fe ffb9 	bl	8011942 <sub32>
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	689a      	ldr	r2, [r3, #8]
 80129d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	4413      	add	r3, r2
 80129da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80129dc:	601a      	str	r2, [r3, #0]
 80129de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80129e0:	3301      	adds	r3, #1
 80129e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	689a      	ldr	r2, [r3, #8]
 80129e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80129f2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80129f6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80129fa:	2300      	movs	r3, #0
 80129fc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012a00:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	da0b      	bge.n	8012a20 <ecp_mod_p384+0x384>
 8012a08:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012a0c:	425b      	negs	r3, r3
 8012a0e:	4619      	mov	r1, r3
 8012a10:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a18:	4618      	mov	r0, r3
 8012a1a:	f7fe ff92 	bl	8011942 <sub32>
 8012a1e:	e008      	b.n	8012a32 <ecp_mod_p384+0x396>
 8012a20:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012a24:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7fe ff65 	bl	80118fc <add32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	689b      	ldr	r3, [r3, #8]
 8012a36:	3354      	adds	r3, #84	@ 0x54
 8012a38:	6819      	ldr	r1, [r3, #0]
 8012a3a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7fe ff5a 	bl	80118fc <add32>
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	689b      	ldr	r3, [r3, #8]
 8012a4c:	3354      	adds	r3, #84	@ 0x54
 8012a4e:	6819      	ldr	r1, [r3, #0]
 8012a50:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a54:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7fe ff4f 	bl	80118fc <add32>
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	689b      	ldr	r3, [r3, #8]
 8012a62:	3340      	adds	r3, #64	@ 0x40
 8012a64:	6819      	ldr	r1, [r3, #0]
 8012a66:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7fe ff44 	bl	80118fc <add32>
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	689b      	ldr	r3, [r3, #8]
 8012a78:	3334      	adds	r3, #52	@ 0x34
 8012a7a:	6819      	ldr	r1, [r3, #0]
 8012a7c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7fe ff39 	bl	80118fc <add32>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	689b      	ldr	r3, [r3, #8]
 8012a8e:	3330      	adds	r3, #48	@ 0x30
 8012a90:	6819      	ldr	r1, [r3, #0]
 8012a92:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7fe ff2e 	bl	80118fc <add32>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	689b      	ldr	r3, [r3, #8]
 8012aa4:	3350      	adds	r3, #80	@ 0x50
 8012aa6:	6819      	ldr	r1, [r3, #0]
 8012aa8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012aac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f7fe ff23 	bl	80118fc <add32>
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	689b      	ldr	r3, [r3, #8]
 8012aba:	3358      	adds	r3, #88	@ 0x58
 8012abc:	6819      	ldr	r1, [r3, #0]
 8012abe:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ac2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	f7fe ff18 	bl	80118fc <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	689b      	ldr	r3, [r3, #8]
 8012ad0:	333c      	adds	r3, #60	@ 0x3c
 8012ad2:	6819      	ldr	r1, [r3, #0]
 8012ad4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ad8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012adc:	4618      	mov	r0, r3
 8012ade:	f7fe ff30 	bl	8011942 <sub32>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	689b      	ldr	r3, [r3, #8]
 8012ae6:	335c      	adds	r3, #92	@ 0x5c
 8012ae8:	6819      	ldr	r1, [r3, #0]
 8012aea:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012aee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7fe ff25 	bl	8011942 <sub32>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	689b      	ldr	r3, [r3, #8]
 8012afc:	335c      	adds	r3, #92	@ 0x5c
 8012afe:	6819      	ldr	r1, [r3, #0]
 8012b00:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7fe ff1a 	bl	8011942 <sub32>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	689a      	ldr	r2, [r3, #8]
 8012b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b14:	009b      	lsls	r3, r3, #2
 8012b16:	4413      	add	r3, r2
 8012b18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012b1a:	601a      	str	r2, [r3, #0]
 8012b1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b1e:	3301      	adds	r3, #1
 8012b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	689a      	ldr	r2, [r3, #8]
 8012b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	4413      	add	r3, r2
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012b30:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012b34:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012b38:	2300      	movs	r3, #0
 8012b3a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012b3e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	da0b      	bge.n	8012b5e <ecp_mod_p384+0x4c2>
 8012b46:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012b4a:	425b      	negs	r3, r3
 8012b4c:	4619      	mov	r1, r3
 8012b4e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7fe fef3 	bl	8011942 <sub32>
 8012b5c:	e008      	b.n	8012b70 <ecp_mod_p384+0x4d4>
 8012b5e:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012b62:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b66:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f7fe fec6 	bl	80118fc <add32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	689b      	ldr	r3, [r3, #8]
 8012b74:	3358      	adds	r3, #88	@ 0x58
 8012b76:	6819      	ldr	r1, [r3, #0]
 8012b78:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fe febb 	bl	80118fc <add32>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	689b      	ldr	r3, [r3, #8]
 8012b8a:	3358      	adds	r3, #88	@ 0x58
 8012b8c:	6819      	ldr	r1, [r3, #0]
 8012b8e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7fe feb0 	bl	80118fc <add32>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	689b      	ldr	r3, [r3, #8]
 8012ba0:	3344      	adds	r3, #68	@ 0x44
 8012ba2:	6819      	ldr	r1, [r3, #0]
 8012ba4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ba8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7fe fea5 	bl	80118fc <add32>
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	689b      	ldr	r3, [r3, #8]
 8012bb6:	3338      	adds	r3, #56	@ 0x38
 8012bb8:	6819      	ldr	r1, [r3, #0]
 8012bba:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012bbe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fe fe9a 	bl	80118fc <add32>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	689b      	ldr	r3, [r3, #8]
 8012bcc:	3334      	adds	r3, #52	@ 0x34
 8012bce:	6819      	ldr	r1, [r3, #0]
 8012bd0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012bd4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7fe fe8f 	bl	80118fc <add32>
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	689b      	ldr	r3, [r3, #8]
 8012be2:	3354      	adds	r3, #84	@ 0x54
 8012be4:	6819      	ldr	r1, [r3, #0]
 8012be6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012bea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fe fe84 	bl	80118fc <add32>
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	335c      	adds	r3, #92	@ 0x5c
 8012bfa:	6819      	ldr	r1, [r3, #0]
 8012bfc:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7fe fe79 	bl	80118fc <add32>
    SUB( 16 );                                              NEXT; // A5
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	689b      	ldr	r3, [r3, #8]
 8012c0e:	3340      	adds	r3, #64	@ 0x40
 8012c10:	6819      	ldr	r1, [r3, #0]
 8012c12:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7fe fe91 	bl	8011942 <sub32>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	689a      	ldr	r2, [r3, #8]
 8012c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c26:	009b      	lsls	r3, r3, #2
 8012c28:	4413      	add	r3, r2
 8012c2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012c2c:	601a      	str	r2, [r3, #0]
 8012c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c30:	3301      	adds	r3, #1
 8012c32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	689a      	ldr	r2, [r3, #8]
 8012c38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	4413      	add	r3, r2
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012c42:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012c46:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012c50:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	da0b      	bge.n	8012c70 <ecp_mod_p384+0x5d4>
 8012c58:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012c5c:	425b      	negs	r3, r3
 8012c5e:	4619      	mov	r1, r3
 8012c60:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f7fe fe6a 	bl	8011942 <sub32>
 8012c6e:	e008      	b.n	8012c82 <ecp_mod_p384+0x5e6>
 8012c70:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012c74:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7fe fe3d 	bl	80118fc <add32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	689b      	ldr	r3, [r3, #8]
 8012c86:	335c      	adds	r3, #92	@ 0x5c
 8012c88:	6819      	ldr	r1, [r3, #0]
 8012c8a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fe fe32 	bl	80118fc <add32>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	689b      	ldr	r3, [r3, #8]
 8012c9c:	335c      	adds	r3, #92	@ 0x5c
 8012c9e:	6819      	ldr	r1, [r3, #0]
 8012ca0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ca4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f7fe fe27 	bl	80118fc <add32>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	689b      	ldr	r3, [r3, #8]
 8012cb2:	3348      	adds	r3, #72	@ 0x48
 8012cb4:	6819      	ldr	r1, [r3, #0]
 8012cb6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012cba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7fe fe1c 	bl	80118fc <add32>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	689b      	ldr	r3, [r3, #8]
 8012cc8:	333c      	adds	r3, #60	@ 0x3c
 8012cca:	6819      	ldr	r1, [r3, #0]
 8012ccc:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012cd0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7fe fe11 	bl	80118fc <add32>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	3338      	adds	r3, #56	@ 0x38
 8012ce0:	6819      	ldr	r1, [r3, #0]
 8012ce2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ce6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fe fe06 	bl	80118fc <add32>
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	689b      	ldr	r3, [r3, #8]
 8012cf4:	3358      	adds	r3, #88	@ 0x58
 8012cf6:	6819      	ldr	r1, [r3, #0]
 8012cf8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012cfc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7fe fdfb 	bl	80118fc <add32>
    SUB( 17 );                                              NEXT; // A6
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	689b      	ldr	r3, [r3, #8]
 8012d0a:	3344      	adds	r3, #68	@ 0x44
 8012d0c:	6819      	ldr	r1, [r3, #0]
 8012d0e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d12:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fe fe13 	bl	8011942 <sub32>
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	689a      	ldr	r2, [r3, #8]
 8012d20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d22:	009b      	lsls	r3, r3, #2
 8012d24:	4413      	add	r3, r2
 8012d26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012d28:	601a      	str	r2, [r3, #0]
 8012d2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d2c:	3301      	adds	r3, #1
 8012d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	689a      	ldr	r2, [r3, #8]
 8012d34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d36:	009b      	lsls	r3, r3, #2
 8012d38:	4413      	add	r3, r2
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012d3e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012d42:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012d46:	2300      	movs	r3, #0
 8012d48:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012d4c:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	da0b      	bge.n	8012d6c <ecp_mod_p384+0x6d0>
 8012d54:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012d58:	425b      	negs	r3, r3
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7fe fdec 	bl	8011942 <sub32>
 8012d6a:	e008      	b.n	8012d7e <ecp_mod_p384+0x6e2>
 8012d6c:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012d70:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d74:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7fe fdbf 	bl	80118fc <add32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	689b      	ldr	r3, [r3, #8]
 8012d82:	334c      	adds	r3, #76	@ 0x4c
 8012d84:	6819      	ldr	r1, [r3, #0]
 8012d86:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d8a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7fe fdb4 	bl	80118fc <add32>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	689b      	ldr	r3, [r3, #8]
 8012d98:	3340      	adds	r3, #64	@ 0x40
 8012d9a:	6819      	ldr	r1, [r3, #0]
 8012d9c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012da0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012da4:	4618      	mov	r0, r3
 8012da6:	f7fe fda9 	bl	80118fc <add32>
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	689b      	ldr	r3, [r3, #8]
 8012dae:	333c      	adds	r3, #60	@ 0x3c
 8012db0:	6819      	ldr	r1, [r3, #0]
 8012db2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012db6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7fe fd9e 	bl	80118fc <add32>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	689b      	ldr	r3, [r3, #8]
 8012dc4:	335c      	adds	r3, #92	@ 0x5c
 8012dc6:	6819      	ldr	r1, [r3, #0]
 8012dc8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012dcc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fe fd93 	bl	80118fc <add32>
    SUB( 18 );                                              NEXT; // A7
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	689b      	ldr	r3, [r3, #8]
 8012dda:	3348      	adds	r3, #72	@ 0x48
 8012ddc:	6819      	ldr	r1, [r3, #0]
 8012dde:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012de2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7fe fdab 	bl	8011942 <sub32>
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	689a      	ldr	r2, [r3, #8]
 8012df0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012df2:	009b      	lsls	r3, r3, #2
 8012df4:	4413      	add	r3, r2
 8012df6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012df8:	601a      	str	r2, [r3, #0]
 8012dfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012dfc:	3301      	adds	r3, #1
 8012dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	689a      	ldr	r2, [r3, #8]
 8012e04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e06:	009b      	lsls	r3, r3, #2
 8012e08:	4413      	add	r3, r2
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012e0e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012e12:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012e16:	2300      	movs	r3, #0
 8012e18:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012e1c:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	da0b      	bge.n	8012e3c <ecp_mod_p384+0x7a0>
 8012e24:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012e28:	425b      	negs	r3, r3
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e30:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7fe fd84 	bl	8011942 <sub32>
 8012e3a:	e008      	b.n	8012e4e <ecp_mod_p384+0x7b2>
 8012e3c:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012e40:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e44:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7fe fd57 	bl	80118fc <add32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	689b      	ldr	r3, [r3, #8]
 8012e52:	3350      	adds	r3, #80	@ 0x50
 8012e54:	6819      	ldr	r1, [r3, #0]
 8012e56:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7fe fd4c 	bl	80118fc <add32>
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	689b      	ldr	r3, [r3, #8]
 8012e68:	3344      	adds	r3, #68	@ 0x44
 8012e6a:	6819      	ldr	r1, [r3, #0]
 8012e6c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7fe fd41 	bl	80118fc <add32>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	689b      	ldr	r3, [r3, #8]
 8012e7e:	3340      	adds	r3, #64	@ 0x40
 8012e80:	6819      	ldr	r1, [r3, #0]
 8012e82:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fe fd36 	bl	80118fc <add32>
    SUB( 19 );                                              NEXT; // A8
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	689b      	ldr	r3, [r3, #8]
 8012e94:	334c      	adds	r3, #76	@ 0x4c
 8012e96:	6819      	ldr	r1, [r3, #0]
 8012e98:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e9c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7fe fd4e 	bl	8011942 <sub32>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	689a      	ldr	r2, [r3, #8]
 8012eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012eac:	009b      	lsls	r3, r3, #2
 8012eae:	4413      	add	r3, r2
 8012eb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012eb2:	601a      	str	r2, [r3, #0]
 8012eb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	689a      	ldr	r2, [r3, #8]
 8012ebe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	4413      	add	r3, r2
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012ec8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012ecc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012ed6:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	da0b      	bge.n	8012ef6 <ecp_mod_p384+0x85a>
 8012ede:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012ee2:	425b      	negs	r3, r3
 8012ee4:	4619      	mov	r1, r3
 8012ee6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012eea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7fe fd27 	bl	8011942 <sub32>
 8012ef4:	e008      	b.n	8012f08 <ecp_mod_p384+0x86c>
 8012ef6:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012efa:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012efe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7fe fcfa 	bl	80118fc <add32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	689b      	ldr	r3, [r3, #8]
 8012f0c:	3354      	adds	r3, #84	@ 0x54
 8012f0e:	6819      	ldr	r1, [r3, #0]
 8012f10:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7fe fcef 	bl	80118fc <add32>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	689b      	ldr	r3, [r3, #8]
 8012f22:	3348      	adds	r3, #72	@ 0x48
 8012f24:	6819      	ldr	r1, [r3, #0]
 8012f26:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fe fce4 	bl	80118fc <add32>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	689b      	ldr	r3, [r3, #8]
 8012f38:	3344      	adds	r3, #68	@ 0x44
 8012f3a:	6819      	ldr	r1, [r3, #0]
 8012f3c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7fe fcd9 	bl	80118fc <add32>
    SUB( 20 );                                              NEXT; // A9
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	689b      	ldr	r3, [r3, #8]
 8012f4e:	3350      	adds	r3, #80	@ 0x50
 8012f50:	6819      	ldr	r1, [r3, #0]
 8012f52:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f56:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f7fe fcf1 	bl	8011942 <sub32>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	689a      	ldr	r2, [r3, #8]
 8012f64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f66:	009b      	lsls	r3, r3, #2
 8012f68:	4413      	add	r3, r2
 8012f6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f6c:	601a      	str	r2, [r3, #0]
 8012f6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f70:	3301      	adds	r3, #1
 8012f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	689a      	ldr	r2, [r3, #8]
 8012f78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f7a:	009b      	lsls	r3, r3, #2
 8012f7c:	4413      	add	r3, r2
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012f82:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012f86:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012f90:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	da0b      	bge.n	8012fb0 <ecp_mod_p384+0x914>
 8012f98:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012f9c:	425b      	negs	r3, r3
 8012f9e:	4619      	mov	r1, r3
 8012fa0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012fa4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7fe fcca 	bl	8011942 <sub32>
 8012fae:	e008      	b.n	8012fc2 <ecp_mod_p384+0x926>
 8012fb0:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012fb4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012fb8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7fe fc9d 	bl	80118fc <add32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	689b      	ldr	r3, [r3, #8]
 8012fc6:	3358      	adds	r3, #88	@ 0x58
 8012fc8:	6819      	ldr	r1, [r3, #0]
 8012fca:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012fce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7fe fc92 	bl	80118fc <add32>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	334c      	adds	r3, #76	@ 0x4c
 8012fde:	6819      	ldr	r1, [r3, #0]
 8012fe0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012fe4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7fe fc87 	bl	80118fc <add32>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	689b      	ldr	r3, [r3, #8]
 8012ff2:	3348      	adds	r3, #72	@ 0x48
 8012ff4:	6819      	ldr	r1, [r3, #0]
 8012ff6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ffa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fe fc7c 	bl	80118fc <add32>
    SUB( 21 );                                              NEXT; // A10
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	689b      	ldr	r3, [r3, #8]
 8013008:	3354      	adds	r3, #84	@ 0x54
 801300a:	6819      	ldr	r1, [r3, #0]
 801300c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013010:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013014:	4618      	mov	r0, r3
 8013016:	f7fe fc94 	bl	8011942 <sub32>
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	689a      	ldr	r2, [r3, #8]
 801301e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013020:	009b      	lsls	r3, r3, #2
 8013022:	4413      	add	r3, r2
 8013024:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013026:	601a      	str	r2, [r3, #0]
 8013028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801302a:	3301      	adds	r3, #1
 801302c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	689a      	ldr	r2, [r3, #8]
 8013032:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013034:	009b      	lsls	r3, r3, #2
 8013036:	4413      	add	r3, r2
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801303c:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8013040:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8013044:	2300      	movs	r3, #0
 8013046:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 801304a:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 801304e:	2b00      	cmp	r3, #0
 8013050:	da0b      	bge.n	801306a <ecp_mod_p384+0x9ce>
 8013052:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8013056:	425b      	negs	r3, r3
 8013058:	4619      	mov	r1, r3
 801305a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801305e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013062:	4618      	mov	r0, r3
 8013064:	f7fe fc6d 	bl	8011942 <sub32>
 8013068:	e008      	b.n	801307c <ecp_mod_p384+0x9e0>
 801306a:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 801306e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013072:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013076:	4618      	mov	r0, r3
 8013078:	f7fe fc40 	bl	80118fc <add32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	689b      	ldr	r3, [r3, #8]
 8013080:	335c      	adds	r3, #92	@ 0x5c
 8013082:	6819      	ldr	r1, [r3, #0]
 8013084:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013088:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801308c:	4618      	mov	r0, r3
 801308e:	f7fe fc35 	bl	80118fc <add32>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	689b      	ldr	r3, [r3, #8]
 8013096:	3350      	adds	r3, #80	@ 0x50
 8013098:	6819      	ldr	r1, [r3, #0]
 801309a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801309e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7fe fc2a 	bl	80118fc <add32>
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	689b      	ldr	r3, [r3, #8]
 80130ac:	334c      	adds	r3, #76	@ 0x4c
 80130ae:	6819      	ldr	r1, [r3, #0]
 80130b0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80130b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fe fc1f 	bl	80118fc <add32>
    SUB( 22 );                                              LAST; // A11
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	689b      	ldr	r3, [r3, #8]
 80130c2:	3358      	adds	r3, #88	@ 0x58
 80130c4:	6819      	ldr	r1, [r3, #0]
 80130c6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80130ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fe fc37 	bl	8011942 <sub32>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	689a      	ldr	r2, [r3, #8]
 80130d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	4413      	add	r3, r2
 80130de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80130e0:	601a      	str	r2, [r3, #0]
 80130e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130e4:	3301      	adds	r3, #1
 80130e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80130e8:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 80130ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80130f0:	b25b      	sxtb	r3, r3
 80130f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	689a      	ldr	r2, [r3, #8]
 80130f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130fa:	009b      	lsls	r3, r3, #2
 80130fc:	4413      	add	r3, r2
 80130fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013100:	601a      	str	r2, [r3, #0]
 8013102:	2300      	movs	r3, #0
 8013104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013106:	e006      	b.n	8013116 <ecp_mod_p384+0xa7a>
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	689a      	ldr	r2, [r3, #8]
 801310c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	4413      	add	r3, r2
 8013112:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013114:	601a      	str	r2, [r3, #0]
 8013116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013118:	3301      	adds	r3, #1
 801311a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013122:	429a      	cmp	r2, r3
 8013124:	d3f0      	bcc.n	8013108 <ecp_mod_p384+0xa6c>
 8013126:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 801312a:	2b00      	cmp	r3, #0
 801312c:	da08      	bge.n	8013140 <ecp_mod_p384+0xaa4>
 801312e:	f997 1052 	ldrsb.w	r1, [r7, #82]	@ 0x52
 8013132:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8013136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7fe fc25 	bl	8011988 <fix_negative>
 801313e:	e000      	b.n	8013142 <ecp_mod_p384+0xaa6>

cleanup:
 8013140:	bf00      	nop
    return( ret );
 8013142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8013144:	4618      	mov	r0, r3
 8013146:	3760      	adds	r7, #96	@ 0x60
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}

0801314c <ecp_mod_p521>:
/*
 * Fast quasi-reduction modulo p521 (FIPS 186-3 D.2.5)
 * Write N as A1 + 2^521 A0, return A0 + A1
 */
static int ecp_mod_p521( mbedtls_mpi *N )
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b09a      	sub	sp, #104	@ 0x68
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
    mbedtls_mpi_uint Mp[P521_WIDTH + 1];
    /* Worst case for the size of M is when mbedtls_mpi_uint is 16 bits:
     * we need to hold bits 513 to 1056, which is 34 limbs, that is
     * P521_WIDTH + 1. Otherwise P521_WIDTH is enough. */

    if( N->n < P521_WIDTH )
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	685b      	ldr	r3, [r3, #4]
 8013158:	2b10      	cmp	r3, #16
 801315a:	d801      	bhi.n	8013160 <ecp_mod_p521+0x14>
        return( 0 );
 801315c:	2300      	movs	r3, #0
 801315e:	e04a      	b.n	80131f6 <ecp_mod_p521+0xaa>

    /* M = A1 */
    M.s = 1;
 8013160:	2301      	movs	r3, #1
 8013162:	657b      	str	r3, [r7, #84]	@ 0x54
    M.n = N->n - ( P521_WIDTH - 1 );
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	3b10      	subs	r3, #16
 801316a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if( M.n > P521_WIDTH + 1 )
 801316c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801316e:	2b12      	cmp	r3, #18
 8013170:	d901      	bls.n	8013176 <ecp_mod_p521+0x2a>
        M.n = P521_WIDTH + 1;
 8013172:	2312      	movs	r3, #18
 8013174:	65bb      	str	r3, [r7, #88]	@ 0x58
    M.p = Mp;
 8013176:	f107 030c 	add.w	r3, r7, #12
 801317a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    memcpy( Mp, N->p + P521_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	689b      	ldr	r3, [r3, #8]
 8013180:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8013184:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013186:	009a      	lsls	r2, r3, #2
 8013188:	f107 030c 	add.w	r3, r7, #12
 801318c:	4618      	mov	r0, r3
 801318e:	f002 fc35 	bl	80159fc <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 521 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 8013192:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8013196:	2109      	movs	r1, #9
 8013198:	4618      	mov	r0, r3
 801319a:	f7f7 fdcc 	bl	800ad36 <mbedtls_mpi_shift_r>
 801319e:	6678      	str	r0, [r7, #100]	@ 0x64
 80131a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d126      	bne.n	80131f4 <ecp_mod_p521+0xa8>

    /* N = A0 */
    N->p[P521_WIDTH - 1] &= P521_MASK;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	689b      	ldr	r3, [r3, #8]
 80131aa:	3340      	adds	r3, #64	@ 0x40
 80131ac:	681a      	ldr	r2, [r3, #0]
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	689b      	ldr	r3, [r3, #8]
 80131b2:	3340      	adds	r3, #64	@ 0x40
 80131b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80131b8:	601a      	str	r2, [r3, #0]
    for( i = P521_WIDTH; i < N->n; i++ )
 80131ba:	2311      	movs	r3, #17
 80131bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80131be:	e009      	b.n	80131d4 <ecp_mod_p521+0x88>
        N->p[i] = 0;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	689a      	ldr	r2, [r3, #8]
 80131c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	4413      	add	r3, r2
 80131ca:	2200      	movs	r2, #0
 80131cc:	601a      	str	r2, [r3, #0]
    for( i = P521_WIDTH; i < N->n; i++ )
 80131ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80131d0:	3301      	adds	r3, #1
 80131d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80131da:	429a      	cmp	r2, r3
 80131dc:	d3f0      	bcc.n	80131c0 <ecp_mod_p521+0x74>

    /* N = A0 + A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 80131de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80131e2:	461a      	mov	r2, r3
 80131e4:	6879      	ldr	r1, [r7, #4]
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f7f7 ff7f 	bl	800b0ea <mbedtls_mpi_add_abs>
 80131ec:	6678      	str	r0, [r7, #100]	@ 0x64
 80131ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80131f0:	2b00      	cmp	r3, #0

cleanup:
 80131f2:	bf00      	nop
    return( ret );
 80131f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 80131f6:	4618      	mov	r0, r3
 80131f8:	3768      	adds	r7, #104	@ 0x68
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
	...

08013200 <ecp_mod_p255>:
/*
 * Fast quasi-reduction modulo p255 = 2^255 - 19
 * Write N as A0 + 2^255 A1, return A0 + 19 * A1
 */
static int ecp_mod_p255( mbedtls_mpi *N )
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b092      	sub	sp, #72	@ 0x48
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi M;
    mbedtls_mpi_uint Mp[P255_WIDTH + 2];

    if( N->n < P255_WIDTH )
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	685b      	ldr	r3, [r3, #4]
 801320c:	2b07      	cmp	r3, #7
 801320e:	d801      	bhi.n	8013214 <ecp_mod_p255+0x14>
        return( 0 );
 8013210:	2300      	movs	r3, #0
 8013212:	e05f      	b.n	80132d4 <ecp_mod_p255+0xd4>

    /* M = A1 */
    M.s = 1;
 8013214:	2301      	movs	r3, #1
 8013216:	637b      	str	r3, [r7, #52]	@ 0x34
    M.n = N->n - ( P255_WIDTH - 1 );
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	685b      	ldr	r3, [r3, #4]
 801321c:	3b07      	subs	r3, #7
 801321e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if( M.n > P255_WIDTH + 1 )
 8013220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013222:	2b09      	cmp	r3, #9
 8013224:	d901      	bls.n	801322a <ecp_mod_p255+0x2a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8013226:	4b2d      	ldr	r3, [pc, #180]	@ (80132dc <ecp_mod_p255+0xdc>)
 8013228:	e054      	b.n	80132d4 <ecp_mod_p255+0xd4>
    M.p = Mp;
 801322a:	f107 030c 	add.w	r3, r7, #12
 801322e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memset( Mp, 0, sizeof Mp );
 8013230:	f107 030c 	add.w	r3, r7, #12
 8013234:	2228      	movs	r2, #40	@ 0x28
 8013236:	2100      	movs	r1, #0
 8013238:	4618      	mov	r0, r3
 801323a:	f002 fb9b 	bl	8015974 <memset>
    memcpy( Mp, N->p + P255_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	689b      	ldr	r3, [r3, #8]
 8013242:	f103 011c 	add.w	r1, r3, #28
 8013246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013248:	009a      	lsls	r2, r3, #2
 801324a:	f107 030c 	add.w	r3, r7, #12
 801324e:	4618      	mov	r0, r3
 8013250:	f002 fbd4 	bl	80159fc <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 8013254:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013258:	211f      	movs	r1, #31
 801325a:	4618      	mov	r0, r3
 801325c:	f7f7 fd6b 	bl	800ad36 <mbedtls_mpi_shift_r>
 8013260:	6478      	str	r0, [r7, #68]	@ 0x44
 8013262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013264:	2b00      	cmp	r3, #0
 8013266:	d134      	bne.n	80132d2 <ecp_mod_p255+0xd2>
    M.n++; /* Make room for multiplication by 19 */
 8013268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801326a:	3301      	adds	r3, #1
 801326c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* N = A0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 801326e:	2200      	movs	r2, #0
 8013270:	21ff      	movs	r1, #255	@ 0xff
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f7f7 fa29 	bl	800a6ca <mbedtls_mpi_set_bit>
 8013278:	6478      	str	r0, [r7, #68]	@ 0x44
 801327a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801327c:	2b00      	cmp	r3, #0
 801327e:	d128      	bne.n	80132d2 <ecp_mod_p255+0xd2>
    for( i = P255_WIDTH; i < N->n; i++ )
 8013280:	2308      	movs	r3, #8
 8013282:	643b      	str	r3, [r7, #64]	@ 0x40
 8013284:	e009      	b.n	801329a <ecp_mod_p255+0x9a>
        N->p[i] = 0;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	689a      	ldr	r2, [r3, #8]
 801328a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801328c:	009b      	lsls	r3, r3, #2
 801328e:	4413      	add	r3, r2
 8013290:	2200      	movs	r2, #0
 8013292:	601a      	str	r2, [r3, #0]
    for( i = P255_WIDTH; i < N->n; i++ )
 8013294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013296:	3301      	adds	r3, #1
 8013298:	643b      	str	r3, [r7, #64]	@ 0x40
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	685b      	ldr	r3, [r3, #4]
 801329e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d3f0      	bcc.n	8013286 <ecp_mod_p255+0x86>

    /* N = A0 + 19 * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );
 80132a4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80132a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80132ac:	2213      	movs	r2, #19
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7f9 fda6 	bl	800ce00 <mbedtls_mpi_mul_int>
 80132b4:	6478      	str	r0, [r7, #68]	@ 0x44
 80132b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d10a      	bne.n	80132d2 <ecp_mod_p255+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 80132bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80132c0:	461a      	mov	r2, r3
 80132c2:	6879      	ldr	r1, [r7, #4]
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f7f7 ff10 	bl	800b0ea <mbedtls_mpi_add_abs>
 80132ca:	6478      	str	r0, [r7, #68]	@ 0x44
 80132cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132ce:	2b00      	cmp	r3, #0

cleanup:
 80132d0:	bf00      	nop
    return( ret );
 80132d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3748      	adds	r7, #72	@ 0x48
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	ffffb080 	.word	0xffffb080

080132e0 <ecp_mod_p448>:
 * arithmetic using the limbs directly as we do for the NIST primes above,
 * but for 64-bit targets it should use half the number of operations if we do
 * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.
 */
static int ecp_mod_p448( mbedtls_mpi *N )
{
 80132e0:	b5b0      	push	{r4, r5, r7, lr}
 80132e2:	b0a8      	sub	sp, #160	@ 0xa0
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi M, Q;
    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];

    if( N->n <= P448_WIDTH )
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	2b0e      	cmp	r3, #14
 80132ee:	d801      	bhi.n	80132f4 <ecp_mod_p448+0x14>
        return( 0 );
 80132f0:	2300      	movs	r3, #0
 80132f2:	e0be      	b.n	8013472 <ecp_mod_p448+0x192>

    /* M = A1 */
    M.s = 1;
 80132f4:	2301      	movs	r3, #1
 80132f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    M.n = N->n - ( P448_WIDTH );
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	3b0e      	subs	r3, #14
 8013300:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if( M.n > P448_WIDTH )
 8013304:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013308:	2b0e      	cmp	r3, #14
 801330a:	d901      	bls.n	8013310 <ecp_mod_p448+0x30>
        /* Shouldn't be called with N larger than 2^896! */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801330c:	4b5b      	ldr	r3, [pc, #364]	@ (801347c <ecp_mod_p448+0x19c>)
 801330e:	e0b0      	b.n	8013472 <ecp_mod_p448+0x192>
    M.p = Mp;
 8013310:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013314:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    memset( Mp, 0, sizeof( Mp ) );
 8013318:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801331c:	223c      	movs	r2, #60	@ 0x3c
 801331e:	2100      	movs	r1, #0
 8013320:	4618      	mov	r0, r3
 8013322:	f002 fb27 	bl	8015974 <memset>
    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	689b      	ldr	r3, [r3, #8]
 801332a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801332e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013332:	009a      	lsls	r2, r3, #2
 8013334:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013338:	4618      	mov	r0, r3
 801333a:	f002 fb5f 	bl	80159fc <memcpy>

    /* N = A0 */
    for( i = P448_WIDTH; i < N->n; i++ )
 801333e:	230e      	movs	r3, #14
 8013340:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013344:	e00c      	b.n	8013360 <ecp_mod_p448+0x80>
        N->p[i] = 0;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	689a      	ldr	r2, [r3, #8]
 801334a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801334e:	009b      	lsls	r3, r3, #2
 8013350:	4413      	add	r3, r2
 8013352:	2200      	movs	r2, #0
 8013354:	601a      	str	r2, [r3, #0]
    for( i = P448_WIDTH; i < N->n; i++ )
 8013356:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801335a:	3301      	adds	r3, #1
 801335c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013368:	429a      	cmp	r2, r3
 801336a:	d3ec      	bcc.n	8013346 <ecp_mod_p448+0x66>

    /* N += A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 801336c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013370:	461a      	mov	r2, r3
 8013372:	6879      	ldr	r1, [r7, #4]
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f7f8 f821 	bl	800b3bc <mbedtls_mpi_add_mpi>
 801337a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 801337e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013382:	2b00      	cmp	r3, #0
 8013384:	d173      	bne.n	801346e <ecp_mod_p448+0x18e>

    /* Q = B1, N += B1 */
    Q = M;
 8013386:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801338a:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 801338e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013390:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Q.p = Qp;
 8013394:	f107 030c 	add.w	r3, r7, #12
 8013398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    memcpy( Qp, Mp, sizeof( Qp ) );
 801339c:	f107 040c 	add.w	r4, r7, #12
 80133a0:	f107 0544 	add.w	r5, r7, #68	@ 0x44
 80133a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80133b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80133b4:	e884 0003 	stmia.w	r4, {r0, r1}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 80133b8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80133bc:	21e0      	movs	r1, #224	@ 0xe0
 80133be:	4618      	mov	r0, r3
 80133c0:	f7f7 fcb9 	bl	800ad36 <mbedtls_mpi_shift_r>
 80133c4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 80133c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d14e      	bne.n	801346e <ecp_mod_p448+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 80133d0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80133d4:	461a      	mov	r2, r3
 80133d6:	6879      	ldr	r1, [r7, #4]
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f7f7 ffef 	bl	800b3bc <mbedtls_mpi_add_mpi>
 80133de:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 80133e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d141      	bne.n	801346e <ecp_mod_p448+0x18e>

    /* M = (B0 + B1) * 2^224, N += M */
    if( sizeof( mbedtls_mpi_uint ) > 4 )
        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 80133ea:	2307      	movs	r3, #7
 80133ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80133f0:	e00c      	b.n	801340c <ecp_mod_p448+0x12c>
        Mp[i] = 0;
 80133f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80133f6:	009b      	lsls	r3, r3, #2
 80133f8:	33a0      	adds	r3, #160	@ 0xa0
 80133fa:	443b      	add	r3, r7
 80133fc:	2200      	movs	r2, #0
 80133fe:	f843 2c5c 	str.w	r2, [r3, #-92]
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 8013402:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013406:	3301      	adds	r3, #1
 8013408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801340c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013410:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8013414:	429a      	cmp	r2, r3
 8013416:	d3ec      	bcc.n	80133f2 <ecp_mod_p448+0x112>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 8013418:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 801341c:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8013420:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013424:	4618      	mov	r0, r3
 8013426:	f7f7 ffc9 	bl	800b3bc <mbedtls_mpi_add_mpi>
 801342a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 801342e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013432:	2b00      	cmp	r3, #0
 8013434:	d11b      	bne.n	801346e <ecp_mod_p448+0x18e>
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 8013436:	230f      	movs	r3, #15
 8013438:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 801343c:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013440:	21e0      	movs	r1, #224	@ 0xe0
 8013442:	4618      	mov	r0, r3
 8013444:	f7f7 fbd5 	bl	800abf2 <mbedtls_mpi_shift_l>
 8013448:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 801344c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013450:	2b00      	cmp	r3, #0
 8013452:	d10c      	bne.n	801346e <ecp_mod_p448+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 8013454:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8013458:	461a      	mov	r2, r3
 801345a:	6879      	ldr	r1, [r7, #4]
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f7f7 ffad 	bl	800b3bc <mbedtls_mpi_add_mpi>
 8013462:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 8013466:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801346a:	2b00      	cmp	r3, #0

cleanup:
 801346c:	bf00      	nop
    return( ret );
 801346e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 8013472:	4618      	mov	r0, r3
 8013474:	37a0      	adds	r7, #160	@ 0xa0
 8013476:	46bd      	mov	sp, r7
 8013478:	bdb0      	pop	{r4, r5, r7, pc}
 801347a:	bf00      	nop
 801347c:	ffffb080 	.word	0xffffb080

08013480 <ecp_mod_koblitz>:
 */
#define P_KOBLITZ_MAX   ( 256 / 8 / sizeof( mbedtls_mpi_uint ) )  // Max limbs in P
#define P_KOBLITZ_R     ( 8 / sizeof( mbedtls_mpi_uint ) )        // Limbs in R
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
                                   size_t adjust, size_t shift, mbedtls_mpi_uint mask )
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b098      	sub	sp, #96	@ 0x60
 8013484:	af00      	add	r7, sp, #0
 8013486:	60f8      	str	r0, [r7, #12]
 8013488:	60b9      	str	r1, [r7, #8]
 801348a:	607a      	str	r2, [r7, #4]
 801348c:	603b      	str	r3, [r7, #0]
    int ret;
    size_t i;
    mbedtls_mpi M, R;
    mbedtls_mpi_uint Mp[P_KOBLITZ_MAX + P_KOBLITZ_R + 1];

    if( N->n < p_limbs )
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	687a      	ldr	r2, [r7, #4]
 8013494:	429a      	cmp	r2, r3
 8013496:	d901      	bls.n	801349c <ecp_mod_koblitz+0x1c>
        return( 0 );
 8013498:	2300      	movs	r3, #0
 801349a:	e0fd      	b.n	8013698 <ecp_mod_koblitz+0x218>

    /* Init R */
    R.s = 1;
 801349c:	2301      	movs	r3, #1
 801349e:	643b      	str	r3, [r7, #64]	@ 0x40
    R.p = Rp;
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    R.n = P_KOBLITZ_R;
 80134a4:	2302      	movs	r3, #2
 80134a6:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Common setup for M */
    M.s = 1;
 80134a8:	2301      	movs	r3, #1
 80134aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    M.p = Mp;
 80134ac:	f107 0314 	add.w	r3, r7, #20
 80134b0:	657b      	str	r3, [r7, #84]	@ 0x54

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	685a      	ldr	r2, [r3, #4]
 80134b6:	6839      	ldr	r1, [r7, #0]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	1acb      	subs	r3, r1, r3
 80134bc:	4413      	add	r3, r2
 80134be:	653b      	str	r3, [r7, #80]	@ 0x50
    if( M.n > p_limbs + adjust )
 80134c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80134c2:	6879      	ldr	r1, [r7, #4]
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	440b      	add	r3, r1
 80134c8:	429a      	cmp	r2, r3
 80134ca:	d903      	bls.n	80134d4 <ecp_mod_koblitz+0x54>
        M.n = p_limbs + adjust;
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	4413      	add	r3, r2
 80134d2:	653b      	str	r3, [r7, #80]	@ 0x50
    memset( Mp, 0, sizeof Mp );
 80134d4:	f107 0314 	add.w	r3, r7, #20
 80134d8:	222c      	movs	r2, #44	@ 0x2c
 80134da:	2100      	movs	r1, #0
 80134dc:	4618      	mov	r0, r3
 80134de:	f002 fa49 	bl	8015974 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	689a      	ldr	r2, [r3, #8]
 80134e6:	6879      	ldr	r1, [r7, #4]
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	1acb      	subs	r3, r1, r3
 80134ec:	009b      	lsls	r3, r3, #2
 80134ee:	18d1      	adds	r1, r2, r3
 80134f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80134f2:	009a      	lsls	r2, r3, #2
 80134f4:	f107 0314 	add.w	r3, r7, #20
 80134f8:	4618      	mov	r0, r3
 80134fa:	f002 fa7f 	bl	80159fc <memcpy>
    if( shift != 0 )
 80134fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013500:	2b00      	cmp	r3, #0
 8013502:	d00a      	beq.n	801351a <ecp_mod_koblitz+0x9a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 8013504:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013508:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801350a:	4618      	mov	r0, r3
 801350c:	f7f7 fc13 	bl	800ad36 <mbedtls_mpi_shift_r>
 8013510:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8013512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013514:	2b00      	cmp	r3, #0
 8013516:	f040 80be 	bne.w	8013696 <ecp_mod_koblitz+0x216>
    M.n += R.n; /* Make room for multiplication by R */
 801351a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801351c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801351e:	4413      	add	r3, r2
 8013520:	653b      	str	r3, [r7, #80]	@ 0x50

    /* N = A0 */
    if( mask != 0 )
 8013522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013524:	2b00      	cmp	r3, #0
 8013526:	d013      	beq.n	8013550 <ecp_mod_koblitz+0xd0>
        N->p[p_limbs - 1] &= mask;
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	689a      	ldr	r2, [r3, #8]
 801352c:	6879      	ldr	r1, [r7, #4]
 801352e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013532:	440b      	add	r3, r1
 8013534:	009b      	lsls	r3, r3, #2
 8013536:	4413      	add	r3, r2
 8013538:	6819      	ldr	r1, [r3, #0]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	689a      	ldr	r2, [r3, #8]
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013544:	4403      	add	r3, r0
 8013546:	009b      	lsls	r3, r3, #2
 8013548:	4413      	add	r3, r2
 801354a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801354c:	400a      	ands	r2, r1
 801354e:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013554:	e009      	b.n	801356a <ecp_mod_koblitz+0xea>
        N->p[i] = 0;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	689a      	ldr	r2, [r3, #8]
 801355a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801355c:	009b      	lsls	r3, r3, #2
 801355e:	4413      	add	r3, r2
 8013560:	2200      	movs	r2, #0
 8013562:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 8013564:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013566:	3301      	adds	r3, #1
 8013568:	65bb      	str	r3, [r7, #88]	@ 0x58
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	685b      	ldr	r3, [r3, #4]
 801356e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013570:	429a      	cmp	r2, r3
 8013572:	d3f0      	bcc.n	8013556 <ecp_mod_koblitz+0xd6>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013574:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8013578:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801357c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013580:	4618      	mov	r0, r3
 8013582:	f7f9 fb94 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8013586:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8013588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801358a:	2b00      	cmp	r3, #0
 801358c:	f040 8083 	bne.w	8013696 <ecp_mod_koblitz+0x216>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013590:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013594:	461a      	mov	r2, r3
 8013596:	68f9      	ldr	r1, [r7, #12]
 8013598:	68f8      	ldr	r0, [r7, #12]
 801359a:	f7f7 fda6 	bl	800b0ea <mbedtls_mpi_add_abs>
 801359e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80135a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d177      	bne.n	8013696 <ecp_mod_koblitz+0x216>

    /* Second pass */

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	685a      	ldr	r2, [r3, #4]
 80135aa:	6839      	ldr	r1, [r7, #0]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	1acb      	subs	r3, r1, r3
 80135b0:	4413      	add	r3, r2
 80135b2:	653b      	str	r3, [r7, #80]	@ 0x50
    if( M.n > p_limbs + adjust )
 80135b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80135b6:	6879      	ldr	r1, [r7, #4]
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	440b      	add	r3, r1
 80135bc:	429a      	cmp	r2, r3
 80135be:	d903      	bls.n	80135c8 <ecp_mod_koblitz+0x148>
        M.n = p_limbs + adjust;
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	4413      	add	r3, r2
 80135c6:	653b      	str	r3, [r7, #80]	@ 0x50
    memset( Mp, 0, sizeof Mp );
 80135c8:	f107 0314 	add.w	r3, r7, #20
 80135cc:	222c      	movs	r2, #44	@ 0x2c
 80135ce:	2100      	movs	r1, #0
 80135d0:	4618      	mov	r0, r3
 80135d2:	f002 f9cf 	bl	8015974 <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	689a      	ldr	r2, [r3, #8]
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	1acb      	subs	r3, r1, r3
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	18d1      	adds	r1, r2, r3
 80135e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80135e6:	009a      	lsls	r2, r3, #2
 80135e8:	f107 0314 	add.w	r3, r7, #20
 80135ec:	4618      	mov	r0, r3
 80135ee:	f002 fa05 	bl	80159fc <memcpy>
    if( shift != 0 )
 80135f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d009      	beq.n	801360c <ecp_mod_koblitz+0x18c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 80135f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80135fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80135fe:	4618      	mov	r0, r3
 8013600:	f7f7 fb99 	bl	800ad36 <mbedtls_mpi_shift_r>
 8013604:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8013606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013608:	2b00      	cmp	r3, #0
 801360a:	d144      	bne.n	8013696 <ecp_mod_koblitz+0x216>
    M.n += R.n; /* Make room for multiplication by R */
 801360c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801360e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013610:	4413      	add	r3, r2
 8013612:	653b      	str	r3, [r7, #80]	@ 0x50

    /* N = A0 */
    if( mask != 0 )
 8013614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013616:	2b00      	cmp	r3, #0
 8013618:	d013      	beq.n	8013642 <ecp_mod_koblitz+0x1c2>
        N->p[p_limbs - 1] &= mask;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	689a      	ldr	r2, [r3, #8]
 801361e:	6879      	ldr	r1, [r7, #4]
 8013620:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013624:	440b      	add	r3, r1
 8013626:	009b      	lsls	r3, r3, #2
 8013628:	4413      	add	r3, r2
 801362a:	6819      	ldr	r1, [r3, #0]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	689a      	ldr	r2, [r3, #8]
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013636:	4403      	add	r3, r0
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	4413      	add	r3, r2
 801363c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801363e:	400a      	ands	r2, r1
 8013640:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013646:	e009      	b.n	801365c <ecp_mod_koblitz+0x1dc>
        N->p[i] = 0;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	689a      	ldr	r2, [r3, #8]
 801364c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801364e:	009b      	lsls	r3, r3, #2
 8013650:	4413      	add	r3, r2
 8013652:	2200      	movs	r2, #0
 8013654:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 8013656:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013658:	3301      	adds	r3, #1
 801365a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	685b      	ldr	r3, [r3, #4]
 8013660:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013662:	429a      	cmp	r2, r3
 8013664:	d3f0      	bcc.n	8013648 <ecp_mod_koblitz+0x1c8>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 8013666:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801366a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801366e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013672:	4618      	mov	r0, r3
 8013674:	f7f9 fb1b 	bl	800ccae <mbedtls_mpi_mul_mpi>
 8013678:	65f8      	str	r0, [r7, #92]	@ 0x5c
 801367a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801367c:	2b00      	cmp	r3, #0
 801367e:	d10a      	bne.n	8013696 <ecp_mod_koblitz+0x216>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013680:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013684:	461a      	mov	r2, r3
 8013686:	68f9      	ldr	r1, [r7, #12]
 8013688:	68f8      	ldr	r0, [r7, #12]
 801368a:	f7f7 fd2e 	bl	800b0ea <mbedtls_mpi_add_abs>
 801368e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8013690:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013692:	2b00      	cmp	r3, #0

cleanup:
 8013694:	bf00      	nop
    return( ret );
 8013696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8013698:	4618      	mov	r0, r3
 801369a:	3760      	adds	r7, #96	@ 0x60
 801369c:	46bd      	mov	sp, r7
 801369e:	bd80      	pop	{r7, pc}

080136a0 <ecp_mod_p192k1>:
/*
 * Fast quasi-reduction modulo p192k1 = 2^192 - R,
 * with R = 2^32 + 2^12 + 2^8 + 2^7 + 2^6 + 2^3 + 1 = 0x0100001119
 */
static int ecp_mod_p192k1( mbedtls_mpi *N )
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b084      	sub	sp, #16
 80136a4:	af02      	add	r7, sp, #8
 80136a6:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xC9, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

    return( ecp_mod_koblitz( N, Rp, 192 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 80136a8:	2300      	movs	r3, #0
 80136aa:	9301      	str	r3, [sp, #4]
 80136ac:	2300      	movs	r3, #0
 80136ae:	9300      	str	r3, [sp, #0]
 80136b0:	2300      	movs	r3, #0
 80136b2:	2206      	movs	r2, #6
 80136b4:	4904      	ldr	r1, [pc, #16]	@ (80136c8 <ecp_mod_p192k1+0x28>)
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f7ff fee2 	bl	8013480 <ecp_mod_koblitz>
 80136bc:	4603      	mov	r3, r0
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3708      	adds	r7, #8
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	bf00      	nop
 80136c8:	24000044 	.word	0x24000044

080136cc <ecp_mod_p224k1>:
/*
 * Fast quasi-reduction modulo p224k1 = 2^224 - R,
 * with R = 2^32 + 2^12 + 2^11 + 2^9 + 2^7 + 2^4 + 2 + 1 = 0x0100001A93
 */
static int ecp_mod_p224k1( mbedtls_mpi *N )
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b084      	sub	sp, #16
 80136d0:	af02      	add	r7, sp, #8
 80136d2:	6078      	str	r0, [r7, #4]
        BYTES_TO_T_UINT_8( 0x93, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

#if defined(MBEDTLS_HAVE_INT64)
    return( ecp_mod_koblitz( N, Rp, 4, 1, 32, 0xFFFFFFFF ) );
#else
    return( ecp_mod_koblitz( N, Rp, 224 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 80136d4:	2300      	movs	r3, #0
 80136d6:	9301      	str	r3, [sp, #4]
 80136d8:	2300      	movs	r3, #0
 80136da:	9300      	str	r3, [sp, #0]
 80136dc:	2300      	movs	r3, #0
 80136de:	2207      	movs	r2, #7
 80136e0:	4904      	ldr	r1, [pc, #16]	@ (80136f4 <ecp_mod_p224k1+0x28>)
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7ff fecc 	bl	8013480 <ecp_mod_koblitz>
 80136e8:	4603      	mov	r3, r0
#endif
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3708      	adds	r7, #8
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	2400004c 	.word	0x2400004c

080136f8 <ecp_mod_p256k1>:
/*
 * Fast quasi-reduction modulo p256k1 = 2^256 - R,
 * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af02      	add	r7, sp, #8
 80136fe:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 8013700:	2300      	movs	r3, #0
 8013702:	9301      	str	r3, [sp, #4]
 8013704:	2300      	movs	r3, #0
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	2300      	movs	r3, #0
 801370a:	2208      	movs	r2, #8
 801370c:	4904      	ldr	r1, [pc, #16]	@ (8013720 <ecp_mod_p256k1+0x28>)
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f7ff feb6 	bl	8013480 <ecp_mod_koblitz>
 8013714:	4603      	mov	r3, r0
}
 8013716:	4618      	mov	r0, r3
 8013718:	3708      	adds	r7, #8
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}
 801371e:	bf00      	nop
 8013720:	24000054 	.word	0x24000054

08013724 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b082      	sub	sp, #8
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
 801372c:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 801372e:	4b05      	ldr	r3, [pc, #20]	@ (8013744 <mbedtls_platform_zeroize+0x20>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	683a      	ldr	r2, [r7, #0]
 8013734:	2100      	movs	r1, #0
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	4798      	blx	r3
}
 801373a:	bf00      	nop
 801373c:	3708      	adds	r7, #8
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}
 8013742:	bf00      	nop
 8013744:	08017288 	.word	0x08017288

08013748 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b082      	sub	sp, #8
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 8013750:	226c      	movs	r2, #108	@ 0x6c
 8013752:	2100      	movs	r1, #0
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f002 f90d 	bl	8015974 <memset>
}
 801375a:	bf00      	nop
 801375c:	3708      	adds	r7, #8
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8013762:	b580      	push	{r7, lr}
 8013764:	b082      	sub	sp, #8
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d004      	beq.n	801377a <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 8013770:	216c      	movs	r1, #108	@ 0x6c
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f7ff ffd6 	bl	8013724 <mbedtls_platform_zeroize>
 8013778:	e000      	b.n	801377c <mbedtls_sha256_free+0x1a>
        return;
 801377a:	bf00      	nop
}
 801377c:	3708      	adds	r7, #8
 801377e:	46bd      	mov	sp, r7
 8013780:	bd80      	pop	{r7, pc}
	...

08013784 <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8013784:	b480      	push	{r7}
 8013786:	b083      	sub	sp, #12
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	2200      	movs	r2, #0
 8013792:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2200      	movs	r2, #0
 8013798:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d118      	bne.n	80137d2 <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	4a1d      	ldr	r2, [pc, #116]	@ (8013818 <mbedtls_sha256_starts_ret+0x94>)
 80137a4:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	4a1c      	ldr	r2, [pc, #112]	@ (801381c <mbedtls_sha256_starts_ret+0x98>)
 80137aa:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	4a1c      	ldr	r2, [pc, #112]	@ (8013820 <mbedtls_sha256_starts_ret+0x9c>)
 80137b0:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4a1b      	ldr	r2, [pc, #108]	@ (8013824 <mbedtls_sha256_starts_ret+0xa0>)
 80137b6:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	4a1b      	ldr	r2, [pc, #108]	@ (8013828 <mbedtls_sha256_starts_ret+0xa4>)
 80137bc:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	4a1a      	ldr	r2, [pc, #104]	@ (801382c <mbedtls_sha256_starts_ret+0xa8>)
 80137c2:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	4a1a      	ldr	r2, [pc, #104]	@ (8013830 <mbedtls_sha256_starts_ret+0xac>)
 80137c8:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4a19      	ldr	r2, [pc, #100]	@ (8013834 <mbedtls_sha256_starts_ret+0xb0>)
 80137ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80137d0:	e017      	b.n	8013802 <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4a18      	ldr	r2, [pc, #96]	@ (8013838 <mbedtls_sha256_starts_ret+0xb4>)
 80137d6:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	4a18      	ldr	r2, [pc, #96]	@ (801383c <mbedtls_sha256_starts_ret+0xb8>)
 80137dc:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	4a17      	ldr	r2, [pc, #92]	@ (8013840 <mbedtls_sha256_starts_ret+0xbc>)
 80137e2:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	4a17      	ldr	r2, [pc, #92]	@ (8013844 <mbedtls_sha256_starts_ret+0xc0>)
 80137e8:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4a16      	ldr	r2, [pc, #88]	@ (8013848 <mbedtls_sha256_starts_ret+0xc4>)
 80137ee:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	4a16      	ldr	r2, [pc, #88]	@ (801384c <mbedtls_sha256_starts_ret+0xc8>)
 80137f4:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4a15      	ldr	r2, [pc, #84]	@ (8013850 <mbedtls_sha256_starts_ret+0xcc>)
 80137fa:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	4a15      	ldr	r2, [pc, #84]	@ (8013854 <mbedtls_sha256_starts_ret+0xd0>)
 8013800:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	683a      	ldr	r2, [r7, #0]
 8013806:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 8013808:	2300      	movs	r3, #0
}
 801380a:	4618      	mov	r0, r3
 801380c:	370c      	adds	r7, #12
 801380e:	46bd      	mov	sp, r7
 8013810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013814:	4770      	bx	lr
 8013816:	bf00      	nop
 8013818:	6a09e667 	.word	0x6a09e667
 801381c:	bb67ae85 	.word	0xbb67ae85
 8013820:	3c6ef372 	.word	0x3c6ef372
 8013824:	a54ff53a 	.word	0xa54ff53a
 8013828:	510e527f 	.word	0x510e527f
 801382c:	9b05688c 	.word	0x9b05688c
 8013830:	1f83d9ab 	.word	0x1f83d9ab
 8013834:	5be0cd19 	.word	0x5be0cd19
 8013838:	c1059ed8 	.word	0xc1059ed8
 801383c:	367cd507 	.word	0x367cd507
 8013840:	3070dd17 	.word	0x3070dd17
 8013844:	f70e5939 	.word	0xf70e5939
 8013848:	ffc00b31 	.word	0xffc00b31
 801384c:	68581511 	.word	0x68581511
 8013850:	64f98fa7 	.word	0x64f98fa7
 8013854:	befa4fa4 	.word	0xbefa4fa4

08013858 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 8013858:	b490      	push	{r4, r7}
 801385a:	b0ce      	sub	sp, #312	@ 0x138
 801385c:	af00      	add	r7, sp, #0
 801385e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013862:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013866:	6018      	str	r0, [r3, #0]
 8013868:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801386c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8013870:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 8013872:	2300      	movs	r3, #0
 8013874:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013878:	e016      	b.n	80138a8 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 801387a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801387e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013888:	3202      	adds	r2, #2
 801388a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801388e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013892:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013896:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801389a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 801389e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80138a2:	3301      	adds	r3, #1
 80138a4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80138a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80138ac:	2b07      	cmp	r3, #7
 80138ae:	d9e4      	bls.n	801387a <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 80138b0:	2300      	movs	r3, #0
 80138b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80138b6:	e03e      	b.n	8013936 <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 80138b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80138bc:	009b      	lsls	r3, r3, #2
 80138be:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80138c2:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80138c6:	6812      	ldr	r2, [r2, #0]
 80138c8:	4413      	add	r3, r2
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	061a      	lsls	r2, r3, #24
 80138ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80138d2:	009b      	lsls	r3, r3, #2
 80138d4:	3301      	adds	r3, #1
 80138d6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80138da:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80138de:	6809      	ldr	r1, [r1, #0]
 80138e0:	440b      	add	r3, r1
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	041b      	lsls	r3, r3, #16
 80138e6:	431a      	orrs	r2, r3
 80138e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80138ec:	009b      	lsls	r3, r3, #2
 80138ee:	3302      	adds	r3, #2
 80138f0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80138f4:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80138f8:	6809      	ldr	r1, [r1, #0]
 80138fa:	440b      	add	r3, r1
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	021b      	lsls	r3, r3, #8
 8013900:	4313      	orrs	r3, r2
 8013902:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013906:	0092      	lsls	r2, r2, #2
 8013908:	3203      	adds	r2, #3
 801390a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801390e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8013912:	6809      	ldr	r1, [r1, #0]
 8013914:	440a      	add	r2, r1
 8013916:	7812      	ldrb	r2, [r2, #0]
 8013918:	ea43 0102 	orr.w	r1, r3, r2
 801391c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013920:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013924:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 801392c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013930:	3301      	adds	r3, #1
 8013932:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013936:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801393a:	2b0f      	cmp	r3, #15
 801393c:	d9bc      	bls.n	80138b8 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 801393e:	2300      	movs	r3, #0
 8013940:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013944:	f000 bcba 	b.w	80142bc <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 8013948:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801394c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013950:	69da      	ldr	r2, [r3, #28]
 8013952:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013956:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801395a:	691b      	ldr	r3, [r3, #16]
 801395c:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013960:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013964:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013968:	691b      	ldr	r3, [r3, #16]
 801396a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801396e:	4059      	eors	r1, r3
 8013970:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013974:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013978:	691b      	ldr	r3, [r3, #16]
 801397a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801397e:	404b      	eors	r3, r1
 8013980:	441a      	add	r2, r3
 8013982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013986:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801398a:	6999      	ldr	r1, [r3, #24]
 801398c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013990:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013994:	6918      	ldr	r0, [r3, #16]
 8013996:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801399a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801399e:	695c      	ldr	r4, [r3, #20]
 80139a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139a8:	699b      	ldr	r3, [r3, #24]
 80139aa:	4063      	eors	r3, r4
 80139ac:	4003      	ands	r3, r0
 80139ae:	404b      	eors	r3, r1
 80139b0:	441a      	add	r2, r3
 80139b2:	49e0      	ldr	r1, [pc, #896]	@ (8013d34 <mbedtls_internal_sha256_process+0x4dc>)
 80139b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80139b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80139bc:	441a      	add	r2, r3
 80139be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80139c6:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80139ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80139ce:	4413      	add	r3, r2
 80139d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80139d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80139e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	ea4f 3373 	mov.w	r3, r3, ror #13
 80139f0:	405a      	eors	r2, r3
 80139f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013a00:	405a      	eors	r2, r3
 8013a02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a0a:	6819      	ldr	r1, [r3, #0]
 8013a0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	4019      	ands	r1, r3
 8013a18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a20:	6898      	ldr	r0, [r3, #8]
 8013a22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a2a:	681c      	ldr	r4, [r3, #0]
 8013a2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a34:	685b      	ldr	r3, [r3, #4]
 8013a36:	4323      	orrs	r3, r4
 8013a38:	4003      	ands	r3, r0
 8013a3a:	430b      	orrs	r3, r1
 8013a3c:	4413      	add	r3, r2
 8013a3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013a42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a4a:	68da      	ldr	r2, [r3, #12]
 8013a4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013a50:	441a      	add	r2, r3
 8013a52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a5a:	60da      	str	r2, [r3, #12]
 8013a5c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013a64:	441a      	add	r2, r3
 8013a66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a6e:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8013a70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a78:	699a      	ldr	r2, [r3, #24]
 8013a7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a82:	68db      	ldr	r3, [r3, #12]
 8013a84:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013a88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a90:	68db      	ldr	r3, [r3, #12]
 8013a92:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013a96:	4059      	eors	r1, r3
 8013a98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013aa0:	68db      	ldr	r3, [r3, #12]
 8013aa2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013aa6:	404b      	eors	r3, r1
 8013aa8:	441a      	add	r2, r3
 8013aaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013aae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ab2:	6959      	ldr	r1, [r3, #20]
 8013ab4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ab8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013abc:	68d8      	ldr	r0, [r3, #12]
 8013abe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ac2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ac6:	691c      	ldr	r4, [r3, #16]
 8013ac8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013acc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ad0:	695b      	ldr	r3, [r3, #20]
 8013ad2:	4063      	eors	r3, r4
 8013ad4:	4003      	ands	r3, r0
 8013ad6:	404b      	eors	r3, r1
 8013ad8:	441a      	add	r2, r3
 8013ada:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013ade:	3301      	adds	r3, #1
 8013ae0:	4994      	ldr	r1, [pc, #592]	@ (8013d34 <mbedtls_internal_sha256_process+0x4dc>)
 8013ae2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013ae6:	441a      	add	r2, r3
 8013ae8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013aec:	1c59      	adds	r1, r3, #1
 8013aee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013af2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013af6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013afa:	4413      	add	r3, r2
 8013afc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013b00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b08:	69db      	ldr	r3, [r3, #28]
 8013b0a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013b0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b16:	69db      	ldr	r3, [r3, #28]
 8013b18:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013b1c:	405a      	eors	r2, r3
 8013b1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b26:	69db      	ldr	r3, [r3, #28]
 8013b28:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013b2c:	405a      	eors	r2, r3
 8013b2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b36:	69d9      	ldr	r1, [r3, #28]
 8013b38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	4019      	ands	r1, r3
 8013b44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b4c:	6858      	ldr	r0, [r3, #4]
 8013b4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b56:	69dc      	ldr	r4, [r3, #28]
 8013b58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	4323      	orrs	r3, r4
 8013b64:	4003      	ands	r3, r0
 8013b66:	430b      	orrs	r3, r1
 8013b68:	4413      	add	r3, r2
 8013b6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013b6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b76:	689a      	ldr	r2, [r3, #8]
 8013b78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013b7c:	441a      	add	r2, r3
 8013b7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b86:	609a      	str	r2, [r3, #8]
 8013b88:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013b90:	441a      	add	r2, r3
 8013b92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b9a:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8013b9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ba0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ba4:	695a      	ldr	r2, [r3, #20]
 8013ba6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013baa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bae:	689b      	ldr	r3, [r3, #8]
 8013bb0:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013bb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bbc:	689b      	ldr	r3, [r3, #8]
 8013bbe:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013bc2:	4059      	eors	r1, r3
 8013bc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bcc:	689b      	ldr	r3, [r3, #8]
 8013bce:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013bd2:	404b      	eors	r3, r1
 8013bd4:	441a      	add	r2, r3
 8013bd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bde:	6919      	ldr	r1, [r3, #16]
 8013be0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013be4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013be8:	6898      	ldr	r0, [r3, #8]
 8013bea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bf2:	68dc      	ldr	r4, [r3, #12]
 8013bf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bf8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bfc:	691b      	ldr	r3, [r3, #16]
 8013bfe:	4063      	eors	r3, r4
 8013c00:	4003      	ands	r3, r0
 8013c02:	404b      	eors	r3, r1
 8013c04:	441a      	add	r2, r3
 8013c06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013c0a:	3302      	adds	r3, #2
 8013c0c:	4949      	ldr	r1, [pc, #292]	@ (8013d34 <mbedtls_internal_sha256_process+0x4dc>)
 8013c0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013c12:	441a      	add	r2, r3
 8013c14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013c18:	1c99      	adds	r1, r3, #2
 8013c1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013c22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c26:	4413      	add	r3, r2
 8013c28:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013c2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c34:	699b      	ldr	r3, [r3, #24]
 8013c36:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013c3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c42:	699b      	ldr	r3, [r3, #24]
 8013c44:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013c48:	405a      	eors	r2, r3
 8013c4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c52:	699b      	ldr	r3, [r3, #24]
 8013c54:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013c58:	405a      	eors	r2, r3
 8013c5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c62:	6999      	ldr	r1, [r3, #24]
 8013c64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c6c:	69db      	ldr	r3, [r3, #28]
 8013c6e:	4019      	ands	r1, r3
 8013c70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c78:	6818      	ldr	r0, [r3, #0]
 8013c7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c82:	699c      	ldr	r4, [r3, #24]
 8013c84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c8c:	69db      	ldr	r3, [r3, #28]
 8013c8e:	4323      	orrs	r3, r4
 8013c90:	4003      	ands	r3, r0
 8013c92:	430b      	orrs	r3, r1
 8013c94:	4413      	add	r3, r2
 8013c96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013c9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ca2:	685a      	ldr	r2, [r3, #4]
 8013ca4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013ca8:	441a      	add	r2, r3
 8013caa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cb2:	605a      	str	r2, [r3, #4]
 8013cb4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013cbc:	441a      	add	r2, r3
 8013cbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cc6:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8013cc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ccc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cd0:	691a      	ldr	r2, [r3, #16]
 8013cd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013ce0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ce4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ce8:	685b      	ldr	r3, [r3, #4]
 8013cea:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013cee:	4059      	eors	r1, r3
 8013cf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cf4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cf8:	685b      	ldr	r3, [r3, #4]
 8013cfa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013cfe:	404b      	eors	r3, r1
 8013d00:	441a      	add	r2, r3
 8013d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d0a:	68d9      	ldr	r1, [r3, #12]
 8013d0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d10:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d14:	6858      	ldr	r0, [r3, #4]
 8013d16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d1e:	689c      	ldr	r4, [r3, #8]
 8013d20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d28:	68db      	ldr	r3, [r3, #12]
 8013d2a:	4063      	eors	r3, r4
 8013d2c:	4003      	ands	r3, r0
 8013d2e:	404b      	eors	r3, r1
 8013d30:	441a      	add	r2, r3
 8013d32:	e001      	b.n	8013d38 <mbedtls_internal_sha256_process+0x4e0>
 8013d34:	0801728c 	.word	0x0801728c
 8013d38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013d3c:	3303      	adds	r3, #3
 8013d3e:	49e0      	ldr	r1, [pc, #896]	@ (80140c0 <mbedtls_internal_sha256_process+0x868>)
 8013d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013d44:	441a      	add	r2, r3
 8013d46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013d4a:	1cd9      	adds	r1, r3, #3
 8013d4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013d54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013d58:	4413      	add	r3, r2
 8013d5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013d5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d62:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d66:	695b      	ldr	r3, [r3, #20]
 8013d68:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013d6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d74:	695b      	ldr	r3, [r3, #20]
 8013d76:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013d7a:	405a      	eors	r2, r3
 8013d7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d84:	695b      	ldr	r3, [r3, #20]
 8013d86:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013d8a:	405a      	eors	r2, r3
 8013d8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d90:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d94:	6959      	ldr	r1, [r3, #20]
 8013d96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d9e:	699b      	ldr	r3, [r3, #24]
 8013da0:	4019      	ands	r1, r3
 8013da2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013da6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013daa:	69d8      	ldr	r0, [r3, #28]
 8013dac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013db0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013db4:	695c      	ldr	r4, [r3, #20]
 8013db6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013dbe:	699b      	ldr	r3, [r3, #24]
 8013dc0:	4323      	orrs	r3, r4
 8013dc2:	4003      	ands	r3, r0
 8013dc4:	430b      	orrs	r3, r1
 8013dc6:	4413      	add	r3, r2
 8013dc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013dcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013dda:	441a      	add	r2, r3
 8013ddc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013de0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013de4:	601a      	str	r2, [r3, #0]
 8013de6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013dee:	441a      	add	r2, r3
 8013df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013df4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013df8:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8013dfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e02:	68da      	ldr	r2, [r3, #12]
 8013e04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013e12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013e20:	4059      	eors	r1, r3
 8013e22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013e30:	404b      	eors	r3, r1
 8013e32:	441a      	add	r2, r3
 8013e34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e3c:	6899      	ldr	r1, [r3, #8]
 8013e3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e46:	6818      	ldr	r0, [r3, #0]
 8013e48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e50:	685c      	ldr	r4, [r3, #4]
 8013e52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e5a:	689b      	ldr	r3, [r3, #8]
 8013e5c:	4063      	eors	r3, r4
 8013e5e:	4003      	ands	r3, r0
 8013e60:	404b      	eors	r3, r1
 8013e62:	441a      	add	r2, r3
 8013e64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e68:	3304      	adds	r3, #4
 8013e6a:	4995      	ldr	r1, [pc, #596]	@ (80140c0 <mbedtls_internal_sha256_process+0x868>)
 8013e6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013e70:	441a      	add	r2, r3
 8013e72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013e76:	1d19      	adds	r1, r3, #4
 8013e78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e7c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013e80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013e84:	4413      	add	r3, r2
 8013e86:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013e8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e92:	691b      	ldr	r3, [r3, #16]
 8013e94:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013e98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ea0:	691b      	ldr	r3, [r3, #16]
 8013ea2:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013ea6:	405a      	eors	r2, r3
 8013ea8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013eac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013eb0:	691b      	ldr	r3, [r3, #16]
 8013eb2:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013eb6:	405a      	eors	r2, r3
 8013eb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ebc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ec0:	6919      	ldr	r1, [r3, #16]
 8013ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ec6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013eca:	695b      	ldr	r3, [r3, #20]
 8013ecc:	4019      	ands	r1, r3
 8013ece:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ed2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ed6:	6998      	ldr	r0, [r3, #24]
 8013ed8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013edc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ee0:	691c      	ldr	r4, [r3, #16]
 8013ee2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ee6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013eea:	695b      	ldr	r3, [r3, #20]
 8013eec:	4323      	orrs	r3, r4
 8013eee:	4003      	ands	r3, r0
 8013ef0:	430b      	orrs	r3, r1
 8013ef2:	4413      	add	r3, r2
 8013ef4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013ef8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013efc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f00:	69da      	ldr	r2, [r3, #28]
 8013f02:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013f06:	441a      	add	r2, r3
 8013f08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f10:	61da      	str	r2, [r3, #28]
 8013f12:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013f1a:	441a      	add	r2, r3
 8013f1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f24:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8013f26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f2e:	689a      	ldr	r2, [r3, #8]
 8013f30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f38:	69db      	ldr	r3, [r3, #28]
 8013f3a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013f3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f46:	69db      	ldr	r3, [r3, #28]
 8013f48:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013f4c:	4059      	eors	r1, r3
 8013f4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f56:	69db      	ldr	r3, [r3, #28]
 8013f58:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013f5c:	404b      	eors	r3, r1
 8013f5e:	441a      	add	r2, r3
 8013f60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f68:	6859      	ldr	r1, [r3, #4]
 8013f6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f72:	69d8      	ldr	r0, [r3, #28]
 8013f74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f7c:	681c      	ldr	r4, [r3, #0]
 8013f7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	4063      	eors	r3, r4
 8013f8a:	4003      	ands	r3, r0
 8013f8c:	404b      	eors	r3, r1
 8013f8e:	441a      	add	r2, r3
 8013f90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013f94:	3305      	adds	r3, #5
 8013f96:	494a      	ldr	r1, [pc, #296]	@ (80140c0 <mbedtls_internal_sha256_process+0x868>)
 8013f98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013f9c:	441a      	add	r2, r3
 8013f9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013fa2:	1d59      	adds	r1, r3, #5
 8013fa4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fa8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013fac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013fb0:	4413      	add	r3, r2
 8013fb2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013fb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fbe:	68db      	ldr	r3, [r3, #12]
 8013fc0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013fc4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fc8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fcc:	68db      	ldr	r3, [r3, #12]
 8013fce:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013fd2:	405a      	eors	r2, r3
 8013fd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fdc:	68db      	ldr	r3, [r3, #12]
 8013fde:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013fe2:	405a      	eors	r2, r3
 8013fe4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fe8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fec:	68d9      	ldr	r1, [r3, #12]
 8013fee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ff2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ff6:	691b      	ldr	r3, [r3, #16]
 8013ff8:	4019      	ands	r1, r3
 8013ffa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ffe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014002:	6958      	ldr	r0, [r3, #20]
 8014004:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014008:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801400c:	68dc      	ldr	r4, [r3, #12]
 801400e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014012:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014016:	691b      	ldr	r3, [r3, #16]
 8014018:	4323      	orrs	r3, r4
 801401a:	4003      	ands	r3, r0
 801401c:	430b      	orrs	r3, r1
 801401e:	4413      	add	r3, r2
 8014020:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014024:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014028:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801402c:	699a      	ldr	r2, [r3, #24]
 801402e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014032:	441a      	add	r2, r3
 8014034:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014038:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801403c:	619a      	str	r2, [r3, #24]
 801403e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014042:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014046:	441a      	add	r2, r3
 8014048:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801404c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014050:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 8014052:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014056:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801405a:	685a      	ldr	r2, [r3, #4]
 801405c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014060:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014064:	699b      	ldr	r3, [r3, #24]
 8014066:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801406a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801406e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014072:	699b      	ldr	r3, [r3, #24]
 8014074:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014078:	4059      	eors	r1, r3
 801407a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801407e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014082:	699b      	ldr	r3, [r3, #24]
 8014084:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014088:	404b      	eors	r3, r1
 801408a:	441a      	add	r2, r3
 801408c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014090:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014094:	6819      	ldr	r1, [r3, #0]
 8014096:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801409a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801409e:	6998      	ldr	r0, [r3, #24]
 80140a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140a8:	69dc      	ldr	r4, [r3, #28]
 80140aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	4063      	eors	r3, r4
 80140b6:	4003      	ands	r3, r0
 80140b8:	404b      	eors	r3, r1
 80140ba:	441a      	add	r2, r3
 80140bc:	e002      	b.n	80140c4 <mbedtls_internal_sha256_process+0x86c>
 80140be:	bf00      	nop
 80140c0:	0801728c 	.word	0x0801728c
 80140c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80140c8:	3306      	adds	r3, #6
 80140ca:	4981      	ldr	r1, [pc, #516]	@ (80142d0 <mbedtls_internal_sha256_process+0xa78>)
 80140cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80140d0:	441a      	add	r2, r3
 80140d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80140d6:	1d99      	adds	r1, r3, #6
 80140d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80140e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80140e4:	4413      	add	r3, r2
 80140e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80140ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140f2:	689b      	ldr	r3, [r3, #8]
 80140f4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80140f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014100:	689b      	ldr	r3, [r3, #8]
 8014102:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014106:	405a      	eors	r2, r3
 8014108:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801410c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014110:	689b      	ldr	r3, [r3, #8]
 8014112:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014116:	405a      	eors	r2, r3
 8014118:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801411c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014120:	6899      	ldr	r1, [r3, #8]
 8014122:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014126:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801412a:	68db      	ldr	r3, [r3, #12]
 801412c:	4019      	ands	r1, r3
 801412e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014132:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014136:	6918      	ldr	r0, [r3, #16]
 8014138:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801413c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014140:	689c      	ldr	r4, [r3, #8]
 8014142:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014146:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801414a:	68db      	ldr	r3, [r3, #12]
 801414c:	4323      	orrs	r3, r4
 801414e:	4003      	ands	r3, r0
 8014150:	430b      	orrs	r3, r1
 8014152:	4413      	add	r3, r2
 8014154:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014158:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801415c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014160:	695a      	ldr	r2, [r3, #20]
 8014162:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014166:	441a      	add	r2, r3
 8014168:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801416c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014170:	615a      	str	r2, [r3, #20]
 8014172:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014176:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801417a:	441a      	add	r2, r3
 801417c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014180:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014184:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 8014186:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801418a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801418e:	681a      	ldr	r2, [r3, #0]
 8014190:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014194:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014198:	695b      	ldr	r3, [r3, #20]
 801419a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801419e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141a6:	695b      	ldr	r3, [r3, #20]
 80141a8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80141ac:	4059      	eors	r1, r3
 80141ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141b6:	695b      	ldr	r3, [r3, #20]
 80141b8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80141bc:	404b      	eors	r3, r1
 80141be:	441a      	add	r2, r3
 80141c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141c8:	69d9      	ldr	r1, [r3, #28]
 80141ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141d2:	6958      	ldr	r0, [r3, #20]
 80141d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141dc:	699c      	ldr	r4, [r3, #24]
 80141de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141e6:	69db      	ldr	r3, [r3, #28]
 80141e8:	4063      	eors	r3, r4
 80141ea:	4003      	ands	r3, r0
 80141ec:	404b      	eors	r3, r1
 80141ee:	441a      	add	r2, r3
 80141f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80141f4:	3307      	adds	r3, #7
 80141f6:	4936      	ldr	r1, [pc, #216]	@ (80142d0 <mbedtls_internal_sha256_process+0xa78>)
 80141f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80141fc:	441a      	add	r2, r3
 80141fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014202:	1dd9      	adds	r1, r3, #7
 8014204:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014208:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801420c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014210:	4413      	add	r3, r2
 8014212:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014216:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801421a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014224:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014228:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014232:	405a      	eors	r2, r3
 8014234:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014238:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014242:	405a      	eors	r2, r3
 8014244:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014248:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801424c:	6859      	ldr	r1, [r3, #4]
 801424e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014252:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014256:	689b      	ldr	r3, [r3, #8]
 8014258:	4019      	ands	r1, r3
 801425a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801425e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014262:	68d8      	ldr	r0, [r3, #12]
 8014264:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014268:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801426c:	685c      	ldr	r4, [r3, #4]
 801426e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014272:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014276:	689b      	ldr	r3, [r3, #8]
 8014278:	4323      	orrs	r3, r4
 801427a:	4003      	ands	r3, r0
 801427c:	430b      	orrs	r3, r1
 801427e:	4413      	add	r3, r2
 8014280:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014284:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014288:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801428c:	691a      	ldr	r2, [r3, #16]
 801428e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014292:	441a      	add	r2, r3
 8014294:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014298:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801429c:	611a      	str	r2, [r3, #16]
 801429e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80142a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80142a6:	441a      	add	r2, r3
 80142a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142b0:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 80142b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80142b6:	3308      	adds	r3, #8
 80142b8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80142bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80142c0:	2b0f      	cmp	r3, #15
 80142c2:	f67f ab41 	bls.w	8013948 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 80142c6:	2310      	movs	r3, #16
 80142c8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80142cc:	f000 bfd5 	b.w	801527a <mbedtls_internal_sha256_process+0x1a22>
 80142d0:	0801728c 	.word	0x0801728c
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 80142d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142dc:	69da      	ldr	r2, [r3, #28]
 80142de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142e6:	691b      	ldr	r3, [r3, #16]
 80142e8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80142ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142f4:	691b      	ldr	r3, [r3, #16]
 80142f6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80142fa:	4059      	eors	r1, r3
 80142fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014300:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014304:	691b      	ldr	r3, [r3, #16]
 8014306:	ea4f 6373 	mov.w	r3, r3, ror #25
 801430a:	404b      	eors	r3, r1
 801430c:	441a      	add	r2, r3
 801430e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014312:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014316:	6999      	ldr	r1, [r3, #24]
 8014318:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801431c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014320:	6918      	ldr	r0, [r3, #16]
 8014322:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014326:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801432a:	695c      	ldr	r4, [r3, #20]
 801432c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014330:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014334:	699b      	ldr	r3, [r3, #24]
 8014336:	4063      	eors	r3, r4
 8014338:	4003      	ands	r3, r0
 801433a:	404b      	eors	r3, r1
 801433c:	441a      	add	r2, r3
 801433e:	49ec      	ldr	r1, [pc, #944]	@ (80146f0 <mbedtls_internal_sha256_process+0xe98>)
 8014340:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014344:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014348:	441a      	add	r2, r3
 801434a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801434e:	1e99      	subs	r1, r3, #2
 8014350:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014354:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014358:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801435c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014360:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014364:	1e98      	subs	r0, r3, #2
 8014366:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801436a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801436e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014372:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014376:	4059      	eors	r1, r3
 8014378:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801437c:	1e98      	subs	r0, r3, #2
 801437e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014382:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014386:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801438a:	0a9b      	lsrs	r3, r3, #10
 801438c:	4059      	eors	r1, r3
 801438e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014392:	1fd8      	subs	r0, r3, #7
 8014394:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014398:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801439c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80143a0:	4419      	add	r1, r3
 80143a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143a6:	f1a3 000f 	sub.w	r0, r3, #15
 80143aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80143b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80143b6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80143ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143be:	f1a3 040f 	sub.w	r4, r3, #15
 80143c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80143ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80143ce:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80143d2:	4058      	eors	r0, r3
 80143d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143d8:	f1a3 040f 	sub.w	r4, r3, #15
 80143dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80143e4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80143e8:	08db      	lsrs	r3, r3, #3
 80143ea:	4043      	eors	r3, r0
 80143ec:	4419      	add	r1, r3
 80143ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143f2:	f1a3 0010 	sub.w	r0, r3, #16
 80143f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80143fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014402:	18c8      	adds	r0, r1, r3
 8014404:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014408:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801440c:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014410:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 8014414:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014418:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801441c:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014420:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014424:	4413      	add	r3, r2
 8014426:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801442a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801442e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014438:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801443c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014446:	405a      	eors	r2, r3
 8014448:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801444c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014456:	405a      	eors	r2, r3
 8014458:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801445c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014460:	6819      	ldr	r1, [r3, #0]
 8014462:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014466:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801446a:	685b      	ldr	r3, [r3, #4]
 801446c:	4019      	ands	r1, r3
 801446e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014472:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014476:	6898      	ldr	r0, [r3, #8]
 8014478:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801447c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014480:	681c      	ldr	r4, [r3, #0]
 8014482:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014486:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801448a:	685b      	ldr	r3, [r3, #4]
 801448c:	4323      	orrs	r3, r4
 801448e:	4003      	ands	r3, r0
 8014490:	430b      	orrs	r3, r1
 8014492:	4413      	add	r3, r2
 8014494:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014498:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801449c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144a0:	68da      	ldr	r2, [r3, #12]
 80144a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80144a6:	441a      	add	r2, r3
 80144a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144b0:	60da      	str	r2, [r3, #12]
 80144b2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80144b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80144ba:	441a      	add	r2, r3
 80144bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144c4:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 80144c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144ce:	699a      	ldr	r2, [r3, #24]
 80144d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144d8:	68db      	ldr	r3, [r3, #12]
 80144da:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80144de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144e6:	68db      	ldr	r3, [r3, #12]
 80144e8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80144ec:	4059      	eors	r1, r3
 80144ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144f6:	68db      	ldr	r3, [r3, #12]
 80144f8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80144fc:	404b      	eors	r3, r1
 80144fe:	441a      	add	r2, r3
 8014500:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014504:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014508:	6959      	ldr	r1, [r3, #20]
 801450a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801450e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014512:	68d8      	ldr	r0, [r3, #12]
 8014514:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014518:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801451c:	691c      	ldr	r4, [r3, #16]
 801451e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014522:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014526:	695b      	ldr	r3, [r3, #20]
 8014528:	4063      	eors	r3, r4
 801452a:	4003      	ands	r3, r0
 801452c:	404b      	eors	r3, r1
 801452e:	441a      	add	r2, r3
 8014530:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014534:	3301      	adds	r3, #1
 8014536:	496e      	ldr	r1, [pc, #440]	@ (80146f0 <mbedtls_internal_sha256_process+0xe98>)
 8014538:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801453c:	441a      	add	r2, r3
 801453e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014542:	1e59      	subs	r1, r3, #1
 8014544:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014548:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801454c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014550:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014554:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014558:	1e58      	subs	r0, r3, #1
 801455a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801455e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014562:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014566:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801456a:	4059      	eors	r1, r3
 801456c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014570:	1e58      	subs	r0, r3, #1
 8014572:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014576:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801457a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801457e:	0a9b      	lsrs	r3, r3, #10
 8014580:	4059      	eors	r1, r3
 8014582:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014586:	1f98      	subs	r0, r3, #6
 8014588:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801458c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014590:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014594:	4419      	add	r1, r3
 8014596:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801459a:	f1a3 000e 	sub.w	r0, r3, #14
 801459e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80145a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80145aa:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80145ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145b2:	f1a3 040e 	sub.w	r4, r3, #14
 80145b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80145be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80145c2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80145c6:	4058      	eors	r0, r3
 80145c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145cc:	f1a3 040e 	sub.w	r4, r3, #14
 80145d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80145d8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80145dc:	08db      	lsrs	r3, r3, #3
 80145de:	4043      	eors	r3, r0
 80145e0:	18c8      	adds	r0, r1, r3
 80145e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145e6:	f1a3 010f 	sub.w	r1, r3, #15
 80145ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80145f2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80145f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145fa:	3301      	adds	r3, #1
 80145fc:	4408      	add	r0, r1
 80145fe:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014602:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014606:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801460a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801460e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014612:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014616:	4413      	add	r3, r2
 8014618:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801461c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014620:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014624:	69db      	ldr	r3, [r3, #28]
 8014626:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801462a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801462e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014632:	69db      	ldr	r3, [r3, #28]
 8014634:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014638:	405a      	eors	r2, r3
 801463a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801463e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014642:	69db      	ldr	r3, [r3, #28]
 8014644:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014648:	405a      	eors	r2, r3
 801464a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801464e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014652:	69d9      	ldr	r1, [r3, #28]
 8014654:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014658:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	4019      	ands	r1, r3
 8014660:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014664:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014668:	6858      	ldr	r0, [r3, #4]
 801466a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801466e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014672:	69dc      	ldr	r4, [r3, #28]
 8014674:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014678:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	4323      	orrs	r3, r4
 8014680:	4003      	ands	r3, r0
 8014682:	430b      	orrs	r3, r1
 8014684:	4413      	add	r3, r2
 8014686:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 801468a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801468e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014692:	689a      	ldr	r2, [r3, #8]
 8014694:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014698:	441a      	add	r2, r3
 801469a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801469e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146a2:	609a      	str	r2, [r3, #8]
 80146a4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80146a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80146ac:	441a      	add	r2, r3
 80146ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146b6:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 80146b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146c0:	695a      	ldr	r2, [r3, #20]
 80146c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146ca:	689b      	ldr	r3, [r3, #8]
 80146cc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80146d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146d8:	689b      	ldr	r3, [r3, #8]
 80146da:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80146de:	4059      	eors	r1, r3
 80146e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146e8:	689b      	ldr	r3, [r3, #8]
 80146ea:	ea4f 6373 	mov.w	r3, r3, ror #25
 80146ee:	e001      	b.n	80146f4 <mbedtls_internal_sha256_process+0xe9c>
 80146f0:	0801728c 	.word	0x0801728c
 80146f4:	404b      	eors	r3, r1
 80146f6:	441a      	add	r2, r3
 80146f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014700:	6919      	ldr	r1, [r3, #16]
 8014702:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014706:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801470a:	6898      	ldr	r0, [r3, #8]
 801470c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014710:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014714:	68dc      	ldr	r4, [r3, #12]
 8014716:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801471a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801471e:	691b      	ldr	r3, [r3, #16]
 8014720:	4063      	eors	r3, r4
 8014722:	4003      	ands	r3, r0
 8014724:	404b      	eors	r3, r1
 8014726:	441a      	add	r2, r3
 8014728:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801472c:	3302      	adds	r3, #2
 801472e:	49ec      	ldr	r1, [pc, #944]	@ (8014ae0 <mbedtls_internal_sha256_process+0x1288>)
 8014730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014734:	441a      	add	r2, r3
 8014736:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801473a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801473e:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014742:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014746:	ea4f 4173 	mov.w	r1, r3, ror #17
 801474a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801474e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014752:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8014756:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801475a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801475e:	4059      	eors	r1, r3
 8014760:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014764:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014768:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 801476c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014770:	0a9b      	lsrs	r3, r3, #10
 8014772:	4059      	eors	r1, r3
 8014774:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014778:	1f58      	subs	r0, r3, #5
 801477a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801477e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014782:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014786:	4419      	add	r1, r3
 8014788:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801478c:	f1a3 000d 	sub.w	r0, r3, #13
 8014790:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014794:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014798:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801479c:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80147a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80147a4:	f1a3 040d 	sub.w	r4, r3, #13
 80147a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147b0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80147b4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80147b8:	4058      	eors	r0, r3
 80147ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80147be:	f1a3 040d 	sub.w	r4, r3, #13
 80147c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147ca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80147ce:	08db      	lsrs	r3, r3, #3
 80147d0:	4043      	eors	r3, r0
 80147d2:	18c8      	adds	r0, r1, r3
 80147d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80147d8:	f1a3 010e 	sub.w	r1, r3, #14
 80147dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147e0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147e4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80147e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80147ec:	3302      	adds	r3, #2
 80147ee:	4408      	add	r0, r1
 80147f0:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80147f4:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80147f8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80147fc:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014800:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014808:	4413      	add	r3, r2
 801480a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801480e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014812:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014816:	699b      	ldr	r3, [r3, #24]
 8014818:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801481c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014820:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014824:	699b      	ldr	r3, [r3, #24]
 8014826:	ea4f 3373 	mov.w	r3, r3, ror #13
 801482a:	405a      	eors	r2, r3
 801482c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014830:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014834:	699b      	ldr	r3, [r3, #24]
 8014836:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801483a:	405a      	eors	r2, r3
 801483c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014840:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014844:	6999      	ldr	r1, [r3, #24]
 8014846:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801484a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801484e:	69db      	ldr	r3, [r3, #28]
 8014850:	4019      	ands	r1, r3
 8014852:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014856:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801485a:	6818      	ldr	r0, [r3, #0]
 801485c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014860:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014864:	699c      	ldr	r4, [r3, #24]
 8014866:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801486a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801486e:	69db      	ldr	r3, [r3, #28]
 8014870:	4323      	orrs	r3, r4
 8014872:	4003      	ands	r3, r0
 8014874:	430b      	orrs	r3, r1
 8014876:	4413      	add	r3, r2
 8014878:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 801487c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014880:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014884:	685a      	ldr	r2, [r3, #4]
 8014886:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801488a:	441a      	add	r2, r3
 801488c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014890:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014894:	605a      	str	r2, [r3, #4]
 8014896:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801489a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801489e:	441a      	add	r2, r3
 80148a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148a8:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 80148aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148b2:	691a      	ldr	r2, [r3, #16]
 80148b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148bc:	685b      	ldr	r3, [r3, #4]
 80148be:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80148c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80148d0:	4059      	eors	r1, r3
 80148d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	ea4f 6373 	mov.w	r3, r3, ror #25
 80148e0:	404b      	eors	r3, r1
 80148e2:	441a      	add	r2, r3
 80148e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148ec:	68d9      	ldr	r1, [r3, #12]
 80148ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148f6:	6858      	ldr	r0, [r3, #4]
 80148f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014900:	689c      	ldr	r4, [r3, #8]
 8014902:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014906:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801490a:	68db      	ldr	r3, [r3, #12]
 801490c:	4063      	eors	r3, r4
 801490e:	4003      	ands	r3, r0
 8014910:	404b      	eors	r3, r1
 8014912:	441a      	add	r2, r3
 8014914:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014918:	3303      	adds	r3, #3
 801491a:	4971      	ldr	r1, [pc, #452]	@ (8014ae0 <mbedtls_internal_sha256_process+0x1288>)
 801491c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014920:	441a      	add	r2, r3
 8014922:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014926:	1c59      	adds	r1, r3, #1
 8014928:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801492c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014930:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014934:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014938:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801493c:	1c58      	adds	r0, r3, #1
 801493e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014942:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014946:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801494a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801494e:	4059      	eors	r1, r3
 8014950:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014954:	1c58      	adds	r0, r3, #1
 8014956:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801495a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801495e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014962:	0a9b      	lsrs	r3, r3, #10
 8014964:	4059      	eors	r1, r3
 8014966:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801496a:	1f18      	subs	r0, r3, #4
 801496c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014970:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014974:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014978:	4419      	add	r1, r3
 801497a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801497e:	f1a3 000c 	sub.w	r0, r3, #12
 8014982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014986:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801498a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801498e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014992:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014996:	f1a3 040c 	sub.w	r4, r3, #12
 801499a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801499e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80149a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80149a6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80149aa:	4058      	eors	r0, r3
 80149ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149b0:	f1a3 040c 	sub.w	r4, r3, #12
 80149b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149b8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80149bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80149c0:	08db      	lsrs	r3, r3, #3
 80149c2:	4043      	eors	r3, r0
 80149c4:	18c8      	adds	r0, r1, r3
 80149c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149ca:	f1a3 010d 	sub.w	r1, r3, #13
 80149ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80149d6:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80149da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149de:	3303      	adds	r3, #3
 80149e0:	4408      	add	r0, r1
 80149e2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80149e6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80149ea:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80149ee:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80149f2:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80149f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80149fa:	4413      	add	r3, r2
 80149fc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014a00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a08:	695b      	ldr	r3, [r3, #20]
 8014a0a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014a0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a16:	695b      	ldr	r3, [r3, #20]
 8014a18:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014a1c:	405a      	eors	r2, r3
 8014a1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a26:	695b      	ldr	r3, [r3, #20]
 8014a28:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014a2c:	405a      	eors	r2, r3
 8014a2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a36:	6959      	ldr	r1, [r3, #20]
 8014a38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a40:	699b      	ldr	r3, [r3, #24]
 8014a42:	4019      	ands	r1, r3
 8014a44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a4c:	69d8      	ldr	r0, [r3, #28]
 8014a4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a56:	695c      	ldr	r4, [r3, #20]
 8014a58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a60:	699b      	ldr	r3, [r3, #24]
 8014a62:	4323      	orrs	r3, r4
 8014a64:	4003      	ands	r3, r0
 8014a66:	430b      	orrs	r3, r1
 8014a68:	4413      	add	r3, r2
 8014a6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014a6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a76:	681a      	ldr	r2, [r3, #0]
 8014a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014a7c:	441a      	add	r2, r3
 8014a7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a86:	601a      	str	r2, [r3, #0]
 8014a88:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014a90:	441a      	add	r2, r3
 8014a92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a9a:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8014a9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014aa0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014aa4:	68da      	ldr	r2, [r3, #12]
 8014aa6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014aaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014ab4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ab8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014ac2:	4059      	eors	r1, r3
 8014ac4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ac8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014ad2:	404b      	eors	r3, r1
 8014ad4:	441a      	add	r2, r3
 8014ad6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ada:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ade:	e001      	b.n	8014ae4 <mbedtls_internal_sha256_process+0x128c>
 8014ae0:	0801728c 	.word	0x0801728c
 8014ae4:	6899      	ldr	r1, [r3, #8]
 8014ae6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014aea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014aee:	6818      	ldr	r0, [r3, #0]
 8014af0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014af4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014af8:	685c      	ldr	r4, [r3, #4]
 8014afa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014afe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b02:	689b      	ldr	r3, [r3, #8]
 8014b04:	4063      	eors	r3, r4
 8014b06:	4003      	ands	r3, r0
 8014b08:	404b      	eors	r3, r1
 8014b0a:	441a      	add	r2, r3
 8014b0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b10:	3304      	adds	r3, #4
 8014b12:	49ec      	ldr	r1, [pc, #944]	@ (8014ec4 <mbedtls_internal_sha256_process+0x166c>)
 8014b14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014b18:	441a      	add	r2, r3
 8014b1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b1e:	1c99      	adds	r1, r3, #2
 8014b20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014b28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014b2c:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014b30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b34:	1c98      	adds	r0, r3, #2
 8014b36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014b3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014b42:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014b46:	4059      	eors	r1, r3
 8014b48:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b4c:	1c98      	adds	r0, r3, #2
 8014b4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b52:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014b56:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014b5a:	0a9b      	lsrs	r3, r3, #10
 8014b5c:	4059      	eors	r1, r3
 8014b5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b62:	1ed8      	subs	r0, r3, #3
 8014b64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b68:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014b6c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014b70:	4419      	add	r1, r3
 8014b72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b76:	f1a3 000b 	sub.w	r0, r3, #11
 8014b7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014b82:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014b86:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014b8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b8e:	f1a3 040b 	sub.w	r4, r3, #11
 8014b92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b96:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014b9a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014b9e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014ba2:	4058      	eors	r0, r3
 8014ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ba8:	f1a3 040b 	sub.w	r4, r3, #11
 8014bac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bb0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014bb8:	08db      	lsrs	r3, r3, #3
 8014bba:	4043      	eors	r3, r0
 8014bbc:	18c8      	adds	r0, r1, r3
 8014bbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bc2:	f1a3 010c 	sub.w	r1, r3, #12
 8014bc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bca:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bce:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014bd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	4408      	add	r0, r1
 8014bda:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014bde:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014be2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014be6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014bea:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014bee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014bf2:	4413      	add	r3, r2
 8014bf4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014bf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c00:	691b      	ldr	r3, [r3, #16]
 8014c02:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014c06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c0e:	691b      	ldr	r3, [r3, #16]
 8014c10:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014c14:	405a      	eors	r2, r3
 8014c16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c1e:	691b      	ldr	r3, [r3, #16]
 8014c20:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014c24:	405a      	eors	r2, r3
 8014c26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c2e:	6919      	ldr	r1, [r3, #16]
 8014c30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c38:	695b      	ldr	r3, [r3, #20]
 8014c3a:	4019      	ands	r1, r3
 8014c3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c44:	6998      	ldr	r0, [r3, #24]
 8014c46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c4e:	691c      	ldr	r4, [r3, #16]
 8014c50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c58:	695b      	ldr	r3, [r3, #20]
 8014c5a:	4323      	orrs	r3, r4
 8014c5c:	4003      	ands	r3, r0
 8014c5e:	430b      	orrs	r3, r1
 8014c60:	4413      	add	r3, r2
 8014c62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014c66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c6e:	69da      	ldr	r2, [r3, #28]
 8014c70:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014c74:	441a      	add	r2, r3
 8014c76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c7e:	61da      	str	r2, [r3, #28]
 8014c80:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014c88:	441a      	add	r2, r3
 8014c8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c92:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8014c94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c9c:	689a      	ldr	r2, [r3, #8]
 8014c9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ca2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ca6:	69db      	ldr	r3, [r3, #28]
 8014ca8:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014cac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cb4:	69db      	ldr	r3, [r3, #28]
 8014cb6:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014cba:	4059      	eors	r1, r3
 8014cbc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cc4:	69db      	ldr	r3, [r3, #28]
 8014cc6:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014cca:	404b      	eors	r3, r1
 8014ccc:	441a      	add	r2, r3
 8014cce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cd6:	6859      	ldr	r1, [r3, #4]
 8014cd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ce0:	69d8      	ldr	r0, [r3, #28]
 8014ce2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ce6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cea:	681c      	ldr	r4, [r3, #0]
 8014cec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	4063      	eors	r3, r4
 8014cf8:	4003      	ands	r3, r0
 8014cfa:	404b      	eors	r3, r1
 8014cfc:	441a      	add	r2, r3
 8014cfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d02:	3305      	adds	r3, #5
 8014d04:	496f      	ldr	r1, [pc, #444]	@ (8014ec4 <mbedtls_internal_sha256_process+0x166c>)
 8014d06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014d0a:	441a      	add	r2, r3
 8014d0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d10:	1cd9      	adds	r1, r3, #3
 8014d12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d16:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014d1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014d1e:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014d22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d26:	1cd8      	adds	r0, r3, #3
 8014d28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014d30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014d34:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014d38:	4059      	eors	r1, r3
 8014d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d3e:	1cd8      	adds	r0, r3, #3
 8014d40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014d48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014d4c:	0a9b      	lsrs	r3, r3, #10
 8014d4e:	4059      	eors	r1, r3
 8014d50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d54:	1e98      	subs	r0, r3, #2
 8014d56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014d5e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014d62:	4419      	add	r1, r3
 8014d64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d68:	f1a3 000a 	sub.w	r0, r3, #10
 8014d6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d70:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014d74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014d78:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014d7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d80:	f1a3 040a 	sub.w	r4, r3, #10
 8014d84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d88:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014d8c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014d90:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014d94:	4058      	eors	r0, r3
 8014d96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d9a:	f1a3 040a 	sub.w	r4, r3, #10
 8014d9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014da2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014da6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014daa:	08db      	lsrs	r3, r3, #3
 8014dac:	4043      	eors	r3, r0
 8014dae:	18c8      	adds	r0, r1, r3
 8014db0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014db4:	f1a3 010b 	sub.w	r1, r3, #11
 8014db8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014dc0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014dc4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014dc8:	3305      	adds	r3, #5
 8014dca:	4408      	add	r0, r1
 8014dcc:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014dd0:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014dd4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014dd8:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014ddc:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014de0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014de4:	4413      	add	r3, r2
 8014de6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014dea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014df2:	68db      	ldr	r3, [r3, #12]
 8014df4:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014df8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dfc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e00:	68db      	ldr	r3, [r3, #12]
 8014e02:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014e06:	405a      	eors	r2, r3
 8014e08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e10:	68db      	ldr	r3, [r3, #12]
 8014e12:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014e16:	405a      	eors	r2, r3
 8014e18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e1c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e20:	68d9      	ldr	r1, [r3, #12]
 8014e22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e26:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e2a:	691b      	ldr	r3, [r3, #16]
 8014e2c:	4019      	ands	r1, r3
 8014e2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e36:	6958      	ldr	r0, [r3, #20]
 8014e38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e40:	68dc      	ldr	r4, [r3, #12]
 8014e42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e4a:	691b      	ldr	r3, [r3, #16]
 8014e4c:	4323      	orrs	r3, r4
 8014e4e:	4003      	ands	r3, r0
 8014e50:	430b      	orrs	r3, r1
 8014e52:	4413      	add	r3, r2
 8014e54:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014e58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e60:	699a      	ldr	r2, [r3, #24]
 8014e62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014e66:	441a      	add	r2, r3
 8014e68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e70:	619a      	str	r2, [r3, #24]
 8014e72:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e7a:	441a      	add	r2, r3
 8014e7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e84:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8014e86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e8e:	685a      	ldr	r2, [r3, #4]
 8014e90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e94:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e98:	699b      	ldr	r3, [r3, #24]
 8014e9a:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014e9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ea2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ea6:	699b      	ldr	r3, [r3, #24]
 8014ea8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014eac:	4059      	eors	r1, r3
 8014eae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014eb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014eb6:	699b      	ldr	r3, [r3, #24]
 8014eb8:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014ebc:	404b      	eors	r3, r1
 8014ebe:	441a      	add	r2, r3
 8014ec0:	e002      	b.n	8014ec8 <mbedtls_internal_sha256_process+0x1670>
 8014ec2:	bf00      	nop
 8014ec4:	0801728c 	.word	0x0801728c
 8014ec8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ecc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ed0:	6819      	ldr	r1, [r3, #0]
 8014ed2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ed6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014eda:	6998      	ldr	r0, [r3, #24]
 8014edc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ee0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ee4:	69dc      	ldr	r4, [r3, #28]
 8014ee6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014eea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	4063      	eors	r3, r4
 8014ef2:	4003      	ands	r3, r0
 8014ef4:	404b      	eors	r3, r1
 8014ef6:	441a      	add	r2, r3
 8014ef8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014efc:	3306      	adds	r3, #6
 8014efe:	49e3      	ldr	r1, [pc, #908]	@ (801528c <mbedtls_internal_sha256_process+0x1a34>)
 8014f00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014f04:	441a      	add	r2, r3
 8014f06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f0a:	1d19      	adds	r1, r3, #4
 8014f0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014f14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f18:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014f1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f20:	1d18      	adds	r0, r3, #4
 8014f22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014f2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f2e:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014f32:	4059      	eors	r1, r3
 8014f34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f38:	1d18      	adds	r0, r3, #4
 8014f3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014f42:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f46:	0a9b      	lsrs	r3, r3, #10
 8014f48:	4059      	eors	r1, r3
 8014f4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f4e:	1e58      	subs	r0, r3, #1
 8014f50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f54:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014f58:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f5c:	4419      	add	r1, r3
 8014f5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f62:	f1a3 0009 	sub.w	r0, r3, #9
 8014f66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f6a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014f6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f72:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014f76:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f7a:	f1a3 0409 	sub.w	r4, r3, #9
 8014f7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014f86:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014f8a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014f8e:	4058      	eors	r0, r3
 8014f90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f94:	f1a3 0409 	sub.w	r4, r3, #9
 8014f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f9c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014fa0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014fa4:	08db      	lsrs	r3, r3, #3
 8014fa6:	4043      	eors	r3, r0
 8014fa8:	18c8      	adds	r0, r1, r3
 8014faa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fae:	f1a3 010a 	sub.w	r1, r3, #10
 8014fb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014fba:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014fbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fc2:	3306      	adds	r3, #6
 8014fc4:	4408      	add	r0, r1
 8014fc6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014fca:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014fce:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014fd2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014fd6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014fde:	4413      	add	r3, r2
 8014fe0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014fe4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fe8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014fec:	689b      	ldr	r3, [r3, #8]
 8014fee:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014ff2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ff6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ffa:	689b      	ldr	r3, [r3, #8]
 8014ffc:	ea4f 3373 	mov.w	r3, r3, ror #13
 8015000:	405a      	eors	r2, r3
 8015002:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015006:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801500a:	689b      	ldr	r3, [r3, #8]
 801500c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8015010:	405a      	eors	r2, r3
 8015012:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015016:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801501a:	6899      	ldr	r1, [r3, #8]
 801501c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015020:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015024:	68db      	ldr	r3, [r3, #12]
 8015026:	4019      	ands	r1, r3
 8015028:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801502c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015030:	6918      	ldr	r0, [r3, #16]
 8015032:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015036:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801503a:	689c      	ldr	r4, [r3, #8]
 801503c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015040:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015044:	68db      	ldr	r3, [r3, #12]
 8015046:	4323      	orrs	r3, r4
 8015048:	4003      	ands	r3, r0
 801504a:	430b      	orrs	r3, r1
 801504c:	4413      	add	r3, r2
 801504e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8015052:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015056:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801505a:	695a      	ldr	r2, [r3, #20]
 801505c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015060:	441a      	add	r2, r3
 8015062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015066:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801506a:	615a      	str	r2, [r3, #20]
 801506c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8015070:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015074:	441a      	add	r2, r3
 8015076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801507a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801507e:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 8015080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015084:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015088:	681a      	ldr	r2, [r3, #0]
 801508a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801508e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015092:	695b      	ldr	r3, [r3, #20]
 8015094:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8015098:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801509c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150a0:	695b      	ldr	r3, [r3, #20]
 80150a2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80150a6:	4059      	eors	r1, r3
 80150a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150b0:	695b      	ldr	r3, [r3, #20]
 80150b2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80150b6:	404b      	eors	r3, r1
 80150b8:	441a      	add	r2, r3
 80150ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150c2:	69d9      	ldr	r1, [r3, #28]
 80150c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150cc:	6958      	ldr	r0, [r3, #20]
 80150ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150d6:	699c      	ldr	r4, [r3, #24]
 80150d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150e0:	69db      	ldr	r3, [r3, #28]
 80150e2:	4063      	eors	r3, r4
 80150e4:	4003      	ands	r3, r0
 80150e6:	404b      	eors	r3, r1
 80150e8:	441a      	add	r2, r3
 80150ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150ee:	3307      	adds	r3, #7
 80150f0:	4966      	ldr	r1, [pc, #408]	@ (801528c <mbedtls_internal_sha256_process+0x1a34>)
 80150f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80150f6:	441a      	add	r2, r3
 80150f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150fc:	1d59      	adds	r1, r3, #5
 80150fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015102:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015106:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801510a:	ea4f 4173 	mov.w	r1, r3, ror #17
 801510e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015112:	1d58      	adds	r0, r3, #5
 8015114:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015118:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801511c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015120:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8015124:	4059      	eors	r1, r3
 8015126:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801512a:	1d58      	adds	r0, r3, #5
 801512c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015130:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015134:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015138:	0a9b      	lsrs	r3, r3, #10
 801513a:	4059      	eors	r1, r3
 801513c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015140:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015144:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8015148:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801514c:	4419      	add	r1, r3
 801514e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015152:	f1a3 0008 	sub.w	r0, r3, #8
 8015156:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801515a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801515e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015162:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8015166:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801516a:	f1a3 0408 	sub.w	r4, r3, #8
 801516e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015172:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015176:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801517a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801517e:	4058      	eors	r0, r3
 8015180:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015184:	f1a3 0408 	sub.w	r4, r3, #8
 8015188:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801518c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015190:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8015194:	08db      	lsrs	r3, r3, #3
 8015196:	4043      	eors	r3, r0
 8015198:	18c8      	adds	r0, r1, r3
 801519a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801519e:	f1a3 0109 	sub.w	r1, r3, #9
 80151a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80151aa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80151ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151b2:	3307      	adds	r3, #7
 80151b4:	4408      	add	r0, r1
 80151b6:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80151ba:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80151be:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80151c2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80151c6:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80151ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80151ce:	4413      	add	r3, r2
 80151d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80151d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80151e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80151ea:	685b      	ldr	r3, [r3, #4]
 80151ec:	ea4f 3373 	mov.w	r3, r3, ror #13
 80151f0:	405a      	eors	r2, r3
 80151f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8015200:	405a      	eors	r2, r3
 8015202:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015206:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801520a:	6859      	ldr	r1, [r3, #4]
 801520c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015210:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015214:	689b      	ldr	r3, [r3, #8]
 8015216:	4019      	ands	r1, r3
 8015218:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801521c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015220:	68d8      	ldr	r0, [r3, #12]
 8015222:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015226:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801522a:	685c      	ldr	r4, [r3, #4]
 801522c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015230:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015234:	689b      	ldr	r3, [r3, #8]
 8015236:	4323      	orrs	r3, r4
 8015238:	4003      	ands	r3, r0
 801523a:	430b      	orrs	r3, r1
 801523c:	4413      	add	r3, r2
 801523e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8015242:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015246:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801524a:	691a      	ldr	r2, [r3, #16]
 801524c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015250:	441a      	add	r2, r3
 8015252:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015256:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801525a:	611a      	str	r2, [r3, #16]
 801525c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8015260:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015264:	441a      	add	r2, r3
 8015266:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801526a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801526e:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 8015270:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015274:	3308      	adds	r3, #8
 8015276:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801527a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801527e:	2b3f      	cmp	r3, #63	@ 0x3f
 8015280:	f67f a828 	bls.w	80142d4 <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 8015284:	2300      	movs	r3, #0
 8015286:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801528a:	e023      	b.n	80152d4 <mbedtls_internal_sha256_process+0x1a7c>
 801528c:	0801728c 	.word	0x0801728c
        ctx->state[i] += A[i];
 8015290:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015294:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801529e:	3202      	adds	r2, #2
 80152a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80152a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152ac:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80152b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80152b4:	18d1      	adds	r1, r2, r3
 80152b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80152c4:	3202      	adds	r2, #2
 80152c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 80152ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80152ce:	3301      	adds	r3, #1
 80152d0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80152d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80152d8:	2b07      	cmp	r3, #7
 80152da:	d9d9      	bls.n	8015290 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 80152dc:	2300      	movs	r3, #0
}
 80152de:	4618      	mov	r0, r3
 80152e0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bc90      	pop	{r4, r7}
 80152e8:	4770      	bx	lr
 80152ea:	bf00      	nop

080152ec <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b088      	sub	sp, #32
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	60f8      	str	r0, [r7, #12]
 80152f4:	60b9      	str	r1, [r7, #8]
 80152f6:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d101      	bne.n	8015302 <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 80152fe:	2300      	movs	r3, #0
 8015300:	e065      	b.n	80153ce <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801530a:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8015312:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	681a      	ldr	r2, [r3, #0]
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	441a      	add	r2, r3
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	681a      	ldr	r2, [r3, #0]
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	687a      	ldr	r2, [r7, #4]
 801532e:	429a      	cmp	r2, r3
 8015330:	d904      	bls.n	801533c <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	685b      	ldr	r3, [r3, #4]
 8015336:	1c5a      	adds	r2, r3, #1
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d034      	beq.n	80153ac <mbedtls_sha256_update_ret+0xc0>
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	69bb      	ldr	r3, [r7, #24]
 8015346:	429a      	cmp	r2, r3
 8015348:	d330      	bcc.n	80153ac <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	4413      	add	r3, r2
 8015354:	69ba      	ldr	r2, [r7, #24]
 8015356:	68b9      	ldr	r1, [r7, #8]
 8015358:	4618      	mov	r0, r3
 801535a:	f000 fb4f 	bl	80159fc <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	3328      	adds	r3, #40	@ 0x28
 8015362:	4619      	mov	r1, r3
 8015364:	68f8      	ldr	r0, [r7, #12]
 8015366:	f7fe fa77 	bl	8013858 <mbedtls_internal_sha256_process>
 801536a:	6178      	str	r0, [r7, #20]
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d001      	beq.n	8015376 <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	e02b      	b.n	80153ce <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 8015376:	68ba      	ldr	r2, [r7, #8]
 8015378:	69bb      	ldr	r3, [r7, #24]
 801537a:	4413      	add	r3, r2
 801537c:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 801537e:	687a      	ldr	r2, [r7, #4]
 8015380:	69bb      	ldr	r3, [r7, #24]
 8015382:	1ad3      	subs	r3, r2, r3
 8015384:	607b      	str	r3, [r7, #4]
        left = 0;
 8015386:	2300      	movs	r3, #0
 8015388:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 801538a:	e00f      	b.n	80153ac <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 801538c:	68b9      	ldr	r1, [r7, #8]
 801538e:	68f8      	ldr	r0, [r7, #12]
 8015390:	f7fe fa62 	bl	8013858 <mbedtls_internal_sha256_process>
 8015394:	6178      	str	r0, [r7, #20]
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d001      	beq.n	80153a0 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	e016      	b.n	80153ce <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 80153a0:	68bb      	ldr	r3, [r7, #8]
 80153a2:	3340      	adds	r3, #64	@ 0x40
 80153a4:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	3b40      	subs	r3, #64	@ 0x40
 80153aa:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80153b0:	d8ec      	bhi.n	801538c <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d009      	beq.n	80153cc <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80153be:	69fb      	ldr	r3, [r7, #28]
 80153c0:	4413      	add	r3, r2
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	68b9      	ldr	r1, [r7, #8]
 80153c6:	4618      	mov	r0, r3
 80153c8:	f000 fb18 	bl	80159fc <memcpy>

    return( 0 );
 80153cc:	2300      	movs	r3, #0
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3720      	adds	r7, #32
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 80153d6:	b580      	push	{r7, lr}
 80153d8:	b086      	sub	sp, #24
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
 80153de:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80153e8:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	1c5a      	adds	r2, r3, #1
 80153ee:	617a      	str	r2, [r7, #20]
 80153f0:	687a      	ldr	r2, [r7, #4]
 80153f2:	4413      	add	r3, r2
 80153f4:	2280      	movs	r2, #128	@ 0x80
 80153f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 80153fa:	697b      	ldr	r3, [r7, #20]
 80153fc:	2b38      	cmp	r3, #56	@ 0x38
 80153fe:	d80c      	bhi.n	801541a <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	18d0      	adds	r0, r2, r3
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8015410:	461a      	mov	r2, r3
 8015412:	2100      	movs	r1, #0
 8015414:	f000 faae 	bl	8015974 <memset>
 8015418:	e01e      	b.n	8015458 <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	18d0      	adds	r0, r2, r3
 8015424:	697b      	ldr	r3, [r7, #20]
 8015426:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 801542a:	461a      	mov	r2, r3
 801542c:	2100      	movs	r1, #0
 801542e:	f000 faa1 	bl	8015974 <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	3328      	adds	r3, #40	@ 0x28
 8015436:	4619      	mov	r1, r3
 8015438:	6878      	ldr	r0, [r7, #4]
 801543a:	f7fe fa0d 	bl	8013858 <mbedtls_internal_sha256_process>
 801543e:	6138      	str	r0, [r7, #16]
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d001      	beq.n	801544a <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	e128      	b.n	801569c <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	3328      	adds	r3, #40	@ 0x28
 801544e:	2238      	movs	r2, #56	@ 0x38
 8015450:	2100      	movs	r1, #0
 8015452:	4618      	mov	r0, r3
 8015454:	f000 fa8e 	bl	8015974 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	685b      	ldr	r3, [r3, #4]
 8015462:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 8015464:	4313      	orrs	r3, r2
 8015466:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	00db      	lsls	r3, r3, #3
 801546e:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	0e1b      	lsrs	r3, r3, #24
 8015474:	b2da      	uxtb	r2, r3
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	0c1b      	lsrs	r3, r3, #16
 8015480:	b2da      	uxtb	r2, r3
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	0a1b      	lsrs	r3, r3, #8
 801548c:	b2da      	uxtb	r2, r3
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	b2da      	uxtb	r2, r3
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 801549e:	68bb      	ldr	r3, [r7, #8]
 80154a0:	0e1b      	lsrs	r3, r3, #24
 80154a2:	b2da      	uxtb	r2, r3
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 80154aa:	68bb      	ldr	r3, [r7, #8]
 80154ac:	0c1b      	lsrs	r3, r3, #16
 80154ae:	b2da      	uxtb	r2, r3
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	0a1b      	lsrs	r3, r3, #8
 80154ba:	b2da      	uxtb	r2, r3
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 80154c2:	68bb      	ldr	r3, [r7, #8]
 80154c4:	b2da      	uxtb	r2, r3
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	3328      	adds	r3, #40	@ 0x28
 80154d0:	4619      	mov	r1, r3
 80154d2:	6878      	ldr	r0, [r7, #4]
 80154d4:	f7fe f9c0 	bl	8013858 <mbedtls_internal_sha256_process>
 80154d8:	6138      	str	r0, [r7, #16]
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d001      	beq.n	80154e4 <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	e0db      	b.n	801569c <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	689b      	ldr	r3, [r3, #8]
 80154e8:	0e1b      	lsrs	r3, r3, #24
 80154ea:	b2da      	uxtb	r2, r3
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	701a      	strb	r2, [r3, #0]
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	689b      	ldr	r3, [r3, #8]
 80154f4:	0c1a      	lsrs	r2, r3, #16
 80154f6:	683b      	ldr	r3, [r7, #0]
 80154f8:	3301      	adds	r3, #1
 80154fa:	b2d2      	uxtb	r2, r2
 80154fc:	701a      	strb	r2, [r3, #0]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	689b      	ldr	r3, [r3, #8]
 8015502:	0a1a      	lsrs	r2, r3, #8
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	3302      	adds	r3, #2
 8015508:	b2d2      	uxtb	r2, r2
 801550a:	701a      	strb	r2, [r3, #0]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	689a      	ldr	r2, [r3, #8]
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	3303      	adds	r3, #3
 8015514:	b2d2      	uxtb	r2, r2
 8015516:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	0e1a      	lsrs	r2, r3, #24
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	3304      	adds	r3, #4
 8015522:	b2d2      	uxtb	r2, r2
 8015524:	701a      	strb	r2, [r3, #0]
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	68db      	ldr	r3, [r3, #12]
 801552a:	0c1a      	lsrs	r2, r3, #16
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	3305      	adds	r3, #5
 8015530:	b2d2      	uxtb	r2, r2
 8015532:	701a      	strb	r2, [r3, #0]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	68db      	ldr	r3, [r3, #12]
 8015538:	0a1a      	lsrs	r2, r3, #8
 801553a:	683b      	ldr	r3, [r7, #0]
 801553c:	3306      	adds	r3, #6
 801553e:	b2d2      	uxtb	r2, r2
 8015540:	701a      	strb	r2, [r3, #0]
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	68da      	ldr	r2, [r3, #12]
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	3307      	adds	r3, #7
 801554a:	b2d2      	uxtb	r2, r2
 801554c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	691b      	ldr	r3, [r3, #16]
 8015552:	0e1a      	lsrs	r2, r3, #24
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	3308      	adds	r3, #8
 8015558:	b2d2      	uxtb	r2, r2
 801555a:	701a      	strb	r2, [r3, #0]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	691b      	ldr	r3, [r3, #16]
 8015560:	0c1a      	lsrs	r2, r3, #16
 8015562:	683b      	ldr	r3, [r7, #0]
 8015564:	3309      	adds	r3, #9
 8015566:	b2d2      	uxtb	r2, r2
 8015568:	701a      	strb	r2, [r3, #0]
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	691b      	ldr	r3, [r3, #16]
 801556e:	0a1a      	lsrs	r2, r3, #8
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	330a      	adds	r3, #10
 8015574:	b2d2      	uxtb	r2, r2
 8015576:	701a      	strb	r2, [r3, #0]
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	691a      	ldr	r2, [r3, #16]
 801557c:	683b      	ldr	r3, [r7, #0]
 801557e:	330b      	adds	r3, #11
 8015580:	b2d2      	uxtb	r2, r2
 8015582:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	695b      	ldr	r3, [r3, #20]
 8015588:	0e1a      	lsrs	r2, r3, #24
 801558a:	683b      	ldr	r3, [r7, #0]
 801558c:	330c      	adds	r3, #12
 801558e:	b2d2      	uxtb	r2, r2
 8015590:	701a      	strb	r2, [r3, #0]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	695b      	ldr	r3, [r3, #20]
 8015596:	0c1a      	lsrs	r2, r3, #16
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	330d      	adds	r3, #13
 801559c:	b2d2      	uxtb	r2, r2
 801559e:	701a      	strb	r2, [r3, #0]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	695b      	ldr	r3, [r3, #20]
 80155a4:	0a1a      	lsrs	r2, r3, #8
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	330e      	adds	r3, #14
 80155aa:	b2d2      	uxtb	r2, r2
 80155ac:	701a      	strb	r2, [r3, #0]
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	695a      	ldr	r2, [r3, #20]
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	330f      	adds	r3, #15
 80155b6:	b2d2      	uxtb	r2, r2
 80155b8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	699b      	ldr	r3, [r3, #24]
 80155be:	0e1a      	lsrs	r2, r3, #24
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	3310      	adds	r3, #16
 80155c4:	b2d2      	uxtb	r2, r2
 80155c6:	701a      	strb	r2, [r3, #0]
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	699b      	ldr	r3, [r3, #24]
 80155cc:	0c1a      	lsrs	r2, r3, #16
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	3311      	adds	r3, #17
 80155d2:	b2d2      	uxtb	r2, r2
 80155d4:	701a      	strb	r2, [r3, #0]
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	699b      	ldr	r3, [r3, #24]
 80155da:	0a1a      	lsrs	r2, r3, #8
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	3312      	adds	r3, #18
 80155e0:	b2d2      	uxtb	r2, r2
 80155e2:	701a      	strb	r2, [r3, #0]
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	699a      	ldr	r2, [r3, #24]
 80155e8:	683b      	ldr	r3, [r7, #0]
 80155ea:	3313      	adds	r3, #19
 80155ec:	b2d2      	uxtb	r2, r2
 80155ee:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	69db      	ldr	r3, [r3, #28]
 80155f4:	0e1a      	lsrs	r2, r3, #24
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	3314      	adds	r3, #20
 80155fa:	b2d2      	uxtb	r2, r2
 80155fc:	701a      	strb	r2, [r3, #0]
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	69db      	ldr	r3, [r3, #28]
 8015602:	0c1a      	lsrs	r2, r3, #16
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	3315      	adds	r3, #21
 8015608:	b2d2      	uxtb	r2, r2
 801560a:	701a      	strb	r2, [r3, #0]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	69db      	ldr	r3, [r3, #28]
 8015610:	0a1a      	lsrs	r2, r3, #8
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	3316      	adds	r3, #22
 8015616:	b2d2      	uxtb	r2, r2
 8015618:	701a      	strb	r2, [r3, #0]
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	69da      	ldr	r2, [r3, #28]
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	3317      	adds	r3, #23
 8015622:	b2d2      	uxtb	r2, r2
 8015624:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6a1b      	ldr	r3, [r3, #32]
 801562a:	0e1a      	lsrs	r2, r3, #24
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	3318      	adds	r3, #24
 8015630:	b2d2      	uxtb	r2, r2
 8015632:	701a      	strb	r2, [r3, #0]
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6a1b      	ldr	r3, [r3, #32]
 8015638:	0c1a      	lsrs	r2, r3, #16
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	3319      	adds	r3, #25
 801563e:	b2d2      	uxtb	r2, r2
 8015640:	701a      	strb	r2, [r3, #0]
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	6a1b      	ldr	r3, [r3, #32]
 8015646:	0a1a      	lsrs	r2, r3, #8
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	331a      	adds	r3, #26
 801564c:	b2d2      	uxtb	r2, r2
 801564e:	701a      	strb	r2, [r3, #0]
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	6a1a      	ldr	r2, [r3, #32]
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	331b      	adds	r3, #27
 8015658:	b2d2      	uxtb	r2, r2
 801565a:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015660:	2b00      	cmp	r3, #0
 8015662:	d11a      	bne.n	801569a <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015668:	0e1a      	lsrs	r2, r3, #24
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	331c      	adds	r3, #28
 801566e:	b2d2      	uxtb	r2, r2
 8015670:	701a      	strb	r2, [r3, #0]
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015676:	0c1a      	lsrs	r2, r3, #16
 8015678:	683b      	ldr	r3, [r7, #0]
 801567a:	331d      	adds	r3, #29
 801567c:	b2d2      	uxtb	r2, r2
 801567e:	701a      	strb	r2, [r3, #0]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015684:	0a1a      	lsrs	r2, r3, #8
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	331e      	adds	r3, #30
 801568a:	b2d2      	uxtb	r2, r2
 801568c:	701a      	strb	r2, [r3, #0]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015692:	683b      	ldr	r3, [r7, #0]
 8015694:	331f      	adds	r3, #31
 8015696:	b2d2      	uxtb	r2, r2
 8015698:	701a      	strb	r2, [r3, #0]

    return( 0 );
 801569a:	2300      	movs	r3, #0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3718      	adds	r7, #24
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}

080156a4 <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b0a0      	sub	sp, #128	@ 0x80
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	60f8      	str	r0, [r7, #12]
 80156ac:	60b9      	str	r1, [r7, #8]
 80156ae:	607a      	str	r2, [r7, #4]
 80156b0:	603b      	str	r3, [r7, #0]

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 80156b2:	f107 0310 	add.w	r3, r7, #16
 80156b6:	4618      	mov	r0, r3
 80156b8:	f7fe f846 	bl	8013748 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 80156bc:	f107 0310 	add.w	r3, r7, #16
 80156c0:	6839      	ldr	r1, [r7, #0]
 80156c2:	4618      	mov	r0, r3
 80156c4:	f7fe f85e 	bl	8013784 <mbedtls_sha256_starts_ret>
 80156c8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80156ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d114      	bne.n	80156fa <mbedtls_sha256_ret+0x56>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 80156d0:	f107 0310 	add.w	r3, r7, #16
 80156d4:	68ba      	ldr	r2, [r7, #8]
 80156d6:	68f9      	ldr	r1, [r7, #12]
 80156d8:	4618      	mov	r0, r3
 80156da:	f7ff fe07 	bl	80152ec <mbedtls_sha256_update_ret>
 80156de:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80156e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d10b      	bne.n	80156fe <mbedtls_sha256_ret+0x5a>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 80156e6:	f107 0310 	add.w	r3, r7, #16
 80156ea:	6879      	ldr	r1, [r7, #4]
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7ff fe72 	bl	80153d6 <mbedtls_sha256_finish_ret>
 80156f2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80156f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80156f6:	2b00      	cmp	r3, #0
        goto exit;

exit:
 80156f8:	e002      	b.n	8015700 <mbedtls_sha256_ret+0x5c>
        goto exit;
 80156fa:	bf00      	nop
 80156fc:	e000      	b.n	8015700 <mbedtls_sha256_ret+0x5c>
        goto exit;
 80156fe:	bf00      	nop
    mbedtls_sha256_free( &ctx );
 8015700:	f107 0310 	add.w	r3, r7, #16
 8015704:	4618      	mov	r0, r3
 8015706:	f7fe f82c 	bl	8013762 <mbedtls_sha256_free>

    return( ret );
 801570a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 801570c:	4618      	mov	r0, r3
 801570e:	3780      	adds	r7, #128	@ 0x80
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}

08015714 <mbedtls_sha256>:
#if !defined(MBEDTLS_DEPRECATED_REMOVED)
void mbedtls_sha256( const unsigned char *input,
                     size_t ilen,
                     unsigned char output[32],
                     int is224 )
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b084      	sub	sp, #16
 8015718:	af00      	add	r7, sp, #0
 801571a:	60f8      	str	r0, [r7, #12]
 801571c:	60b9      	str	r1, [r7, #8]
 801571e:	607a      	str	r2, [r7, #4]
 8015720:	603b      	str	r3, [r7, #0]
    mbedtls_sha256_ret( input, ilen, output, is224 );
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	68b9      	ldr	r1, [r7, #8]
 8015728:	68f8      	ldr	r0, [r7, #12]
 801572a:	f7ff ffbb 	bl	80156a4 <mbedtls_sha256_ret>
}
 801572e:	bf00      	nop
 8015730:	3710      	adds	r7, #16
 8015732:	46bd      	mov	sp, r7
 8015734:	bd80      	pop	{r7, pc}
	...

08015738 <calloc>:
 8015738:	4b02      	ldr	r3, [pc, #8]	@ (8015744 <calloc+0xc>)
 801573a:	460a      	mov	r2, r1
 801573c:	4601      	mov	r1, r0
 801573e:	6818      	ldr	r0, [r3, #0]
 8015740:	f000 b802 	b.w	8015748 <_calloc_r>
 8015744:	2400005c 	.word	0x2400005c

08015748 <_calloc_r>:
 8015748:	b570      	push	{r4, r5, r6, lr}
 801574a:	fba1 5402 	umull	r5, r4, r1, r2
 801574e:	b934      	cbnz	r4, 801575e <_calloc_r+0x16>
 8015750:	4629      	mov	r1, r5
 8015752:	f000 f837 	bl	80157c4 <_malloc_r>
 8015756:	4606      	mov	r6, r0
 8015758:	b928      	cbnz	r0, 8015766 <_calloc_r+0x1e>
 801575a:	4630      	mov	r0, r6
 801575c:	bd70      	pop	{r4, r5, r6, pc}
 801575e:	220c      	movs	r2, #12
 8015760:	6002      	str	r2, [r0, #0]
 8015762:	2600      	movs	r6, #0
 8015764:	e7f9      	b.n	801575a <_calloc_r+0x12>
 8015766:	462a      	mov	r2, r5
 8015768:	4621      	mov	r1, r4
 801576a:	f000 f903 	bl	8015974 <memset>
 801576e:	e7f4      	b.n	801575a <_calloc_r+0x12>

08015770 <free>:
 8015770:	4b02      	ldr	r3, [pc, #8]	@ (801577c <free+0xc>)
 8015772:	4601      	mov	r1, r0
 8015774:	6818      	ldr	r0, [r3, #0]
 8015776:	f000 b94f 	b.w	8015a18 <_free_r>
 801577a:	bf00      	nop
 801577c:	2400005c 	.word	0x2400005c

08015780 <sbrk_aligned>:
 8015780:	b570      	push	{r4, r5, r6, lr}
 8015782:	4e0f      	ldr	r6, [pc, #60]	@ (80157c0 <sbrk_aligned+0x40>)
 8015784:	460c      	mov	r4, r1
 8015786:	6831      	ldr	r1, [r6, #0]
 8015788:	4605      	mov	r5, r0
 801578a:	b911      	cbnz	r1, 8015792 <sbrk_aligned+0x12>
 801578c:	f000 f8fa 	bl	8015984 <_sbrk_r>
 8015790:	6030      	str	r0, [r6, #0]
 8015792:	4621      	mov	r1, r4
 8015794:	4628      	mov	r0, r5
 8015796:	f000 f8f5 	bl	8015984 <_sbrk_r>
 801579a:	1c43      	adds	r3, r0, #1
 801579c:	d103      	bne.n	80157a6 <sbrk_aligned+0x26>
 801579e:	f04f 34ff 	mov.w	r4, #4294967295
 80157a2:	4620      	mov	r0, r4
 80157a4:	bd70      	pop	{r4, r5, r6, pc}
 80157a6:	1cc4      	adds	r4, r0, #3
 80157a8:	f024 0403 	bic.w	r4, r4, #3
 80157ac:	42a0      	cmp	r0, r4
 80157ae:	d0f8      	beq.n	80157a2 <sbrk_aligned+0x22>
 80157b0:	1a21      	subs	r1, r4, r0
 80157b2:	4628      	mov	r0, r5
 80157b4:	f000 f8e6 	bl	8015984 <_sbrk_r>
 80157b8:	3001      	adds	r0, #1
 80157ba:	d1f2      	bne.n	80157a2 <sbrk_aligned+0x22>
 80157bc:	e7ef      	b.n	801579e <sbrk_aligned+0x1e>
 80157be:	bf00      	nop
 80157c0:	24002580 	.word	0x24002580

080157c4 <_malloc_r>:
 80157c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157c8:	1ccd      	adds	r5, r1, #3
 80157ca:	f025 0503 	bic.w	r5, r5, #3
 80157ce:	3508      	adds	r5, #8
 80157d0:	2d0c      	cmp	r5, #12
 80157d2:	bf38      	it	cc
 80157d4:	250c      	movcc	r5, #12
 80157d6:	2d00      	cmp	r5, #0
 80157d8:	4606      	mov	r6, r0
 80157da:	db01      	blt.n	80157e0 <_malloc_r+0x1c>
 80157dc:	42a9      	cmp	r1, r5
 80157de:	d904      	bls.n	80157ea <_malloc_r+0x26>
 80157e0:	230c      	movs	r3, #12
 80157e2:	6033      	str	r3, [r6, #0]
 80157e4:	2000      	movs	r0, #0
 80157e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80157ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80158c0 <_malloc_r+0xfc>
 80157ee:	f000 f869 	bl	80158c4 <__malloc_lock>
 80157f2:	f8d8 3000 	ldr.w	r3, [r8]
 80157f6:	461c      	mov	r4, r3
 80157f8:	bb44      	cbnz	r4, 801584c <_malloc_r+0x88>
 80157fa:	4629      	mov	r1, r5
 80157fc:	4630      	mov	r0, r6
 80157fe:	f7ff ffbf 	bl	8015780 <sbrk_aligned>
 8015802:	1c43      	adds	r3, r0, #1
 8015804:	4604      	mov	r4, r0
 8015806:	d158      	bne.n	80158ba <_malloc_r+0xf6>
 8015808:	f8d8 4000 	ldr.w	r4, [r8]
 801580c:	4627      	mov	r7, r4
 801580e:	2f00      	cmp	r7, #0
 8015810:	d143      	bne.n	801589a <_malloc_r+0xd6>
 8015812:	2c00      	cmp	r4, #0
 8015814:	d04b      	beq.n	80158ae <_malloc_r+0xea>
 8015816:	6823      	ldr	r3, [r4, #0]
 8015818:	4639      	mov	r1, r7
 801581a:	4630      	mov	r0, r6
 801581c:	eb04 0903 	add.w	r9, r4, r3
 8015820:	f000 f8b0 	bl	8015984 <_sbrk_r>
 8015824:	4581      	cmp	r9, r0
 8015826:	d142      	bne.n	80158ae <_malloc_r+0xea>
 8015828:	6821      	ldr	r1, [r4, #0]
 801582a:	1a6d      	subs	r5, r5, r1
 801582c:	4629      	mov	r1, r5
 801582e:	4630      	mov	r0, r6
 8015830:	f7ff ffa6 	bl	8015780 <sbrk_aligned>
 8015834:	3001      	adds	r0, #1
 8015836:	d03a      	beq.n	80158ae <_malloc_r+0xea>
 8015838:	6823      	ldr	r3, [r4, #0]
 801583a:	442b      	add	r3, r5
 801583c:	6023      	str	r3, [r4, #0]
 801583e:	f8d8 3000 	ldr.w	r3, [r8]
 8015842:	685a      	ldr	r2, [r3, #4]
 8015844:	bb62      	cbnz	r2, 80158a0 <_malloc_r+0xdc>
 8015846:	f8c8 7000 	str.w	r7, [r8]
 801584a:	e00f      	b.n	801586c <_malloc_r+0xa8>
 801584c:	6822      	ldr	r2, [r4, #0]
 801584e:	1b52      	subs	r2, r2, r5
 8015850:	d420      	bmi.n	8015894 <_malloc_r+0xd0>
 8015852:	2a0b      	cmp	r2, #11
 8015854:	d917      	bls.n	8015886 <_malloc_r+0xc2>
 8015856:	1961      	adds	r1, r4, r5
 8015858:	42a3      	cmp	r3, r4
 801585a:	6025      	str	r5, [r4, #0]
 801585c:	bf18      	it	ne
 801585e:	6059      	strne	r1, [r3, #4]
 8015860:	6863      	ldr	r3, [r4, #4]
 8015862:	bf08      	it	eq
 8015864:	f8c8 1000 	streq.w	r1, [r8]
 8015868:	5162      	str	r2, [r4, r5]
 801586a:	604b      	str	r3, [r1, #4]
 801586c:	4630      	mov	r0, r6
 801586e:	f000 f82f 	bl	80158d0 <__malloc_unlock>
 8015872:	f104 000b 	add.w	r0, r4, #11
 8015876:	1d23      	adds	r3, r4, #4
 8015878:	f020 0007 	bic.w	r0, r0, #7
 801587c:	1ac2      	subs	r2, r0, r3
 801587e:	bf1c      	itt	ne
 8015880:	1a1b      	subne	r3, r3, r0
 8015882:	50a3      	strne	r3, [r4, r2]
 8015884:	e7af      	b.n	80157e6 <_malloc_r+0x22>
 8015886:	6862      	ldr	r2, [r4, #4]
 8015888:	42a3      	cmp	r3, r4
 801588a:	bf0c      	ite	eq
 801588c:	f8c8 2000 	streq.w	r2, [r8]
 8015890:	605a      	strne	r2, [r3, #4]
 8015892:	e7eb      	b.n	801586c <_malloc_r+0xa8>
 8015894:	4623      	mov	r3, r4
 8015896:	6864      	ldr	r4, [r4, #4]
 8015898:	e7ae      	b.n	80157f8 <_malloc_r+0x34>
 801589a:	463c      	mov	r4, r7
 801589c:	687f      	ldr	r7, [r7, #4]
 801589e:	e7b6      	b.n	801580e <_malloc_r+0x4a>
 80158a0:	461a      	mov	r2, r3
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	42a3      	cmp	r3, r4
 80158a6:	d1fb      	bne.n	80158a0 <_malloc_r+0xdc>
 80158a8:	2300      	movs	r3, #0
 80158aa:	6053      	str	r3, [r2, #4]
 80158ac:	e7de      	b.n	801586c <_malloc_r+0xa8>
 80158ae:	230c      	movs	r3, #12
 80158b0:	6033      	str	r3, [r6, #0]
 80158b2:	4630      	mov	r0, r6
 80158b4:	f000 f80c 	bl	80158d0 <__malloc_unlock>
 80158b8:	e794      	b.n	80157e4 <_malloc_r+0x20>
 80158ba:	6005      	str	r5, [r0, #0]
 80158bc:	e7d6      	b.n	801586c <_malloc_r+0xa8>
 80158be:	bf00      	nop
 80158c0:	24002584 	.word	0x24002584

080158c4 <__malloc_lock>:
 80158c4:	4801      	ldr	r0, [pc, #4]	@ (80158cc <__malloc_lock+0x8>)
 80158c6:	f000 b897 	b.w	80159f8 <__retarget_lock_acquire_recursive>
 80158ca:	bf00      	nop
 80158cc:	240026c4 	.word	0x240026c4

080158d0 <__malloc_unlock>:
 80158d0:	4801      	ldr	r0, [pc, #4]	@ (80158d8 <__malloc_unlock+0x8>)
 80158d2:	f000 b892 	b.w	80159fa <__retarget_lock_release_recursive>
 80158d6:	bf00      	nop
 80158d8:	240026c4 	.word	0x240026c4

080158dc <siprintf>:
 80158dc:	b40e      	push	{r1, r2, r3}
 80158de:	b510      	push	{r4, lr}
 80158e0:	b09d      	sub	sp, #116	@ 0x74
 80158e2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80158e4:	9002      	str	r0, [sp, #8]
 80158e6:	9006      	str	r0, [sp, #24]
 80158e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80158ec:	480a      	ldr	r0, [pc, #40]	@ (8015918 <siprintf+0x3c>)
 80158ee:	9107      	str	r1, [sp, #28]
 80158f0:	9104      	str	r1, [sp, #16]
 80158f2:	490a      	ldr	r1, [pc, #40]	@ (801591c <siprintf+0x40>)
 80158f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80158f8:	9105      	str	r1, [sp, #20]
 80158fa:	2400      	movs	r4, #0
 80158fc:	a902      	add	r1, sp, #8
 80158fe:	6800      	ldr	r0, [r0, #0]
 8015900:	9301      	str	r3, [sp, #4]
 8015902:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015904:	f000 f92e 	bl	8015b64 <_svfiprintf_r>
 8015908:	9b02      	ldr	r3, [sp, #8]
 801590a:	701c      	strb	r4, [r3, #0]
 801590c:	b01d      	add	sp, #116	@ 0x74
 801590e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015912:	b003      	add	sp, #12
 8015914:	4770      	bx	lr
 8015916:	bf00      	nop
 8015918:	2400005c 	.word	0x2400005c
 801591c:	ffff0208 	.word	0xffff0208

08015920 <memcmp>:
 8015920:	b510      	push	{r4, lr}
 8015922:	3901      	subs	r1, #1
 8015924:	4402      	add	r2, r0
 8015926:	4290      	cmp	r0, r2
 8015928:	d101      	bne.n	801592e <memcmp+0xe>
 801592a:	2000      	movs	r0, #0
 801592c:	e005      	b.n	801593a <memcmp+0x1a>
 801592e:	7803      	ldrb	r3, [r0, #0]
 8015930:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015934:	42a3      	cmp	r3, r4
 8015936:	d001      	beq.n	801593c <memcmp+0x1c>
 8015938:	1b18      	subs	r0, r3, r4
 801593a:	bd10      	pop	{r4, pc}
 801593c:	3001      	adds	r0, #1
 801593e:	e7f2      	b.n	8015926 <memcmp+0x6>

08015940 <memmove>:
 8015940:	4288      	cmp	r0, r1
 8015942:	b510      	push	{r4, lr}
 8015944:	eb01 0402 	add.w	r4, r1, r2
 8015948:	d902      	bls.n	8015950 <memmove+0x10>
 801594a:	4284      	cmp	r4, r0
 801594c:	4623      	mov	r3, r4
 801594e:	d807      	bhi.n	8015960 <memmove+0x20>
 8015950:	1e43      	subs	r3, r0, #1
 8015952:	42a1      	cmp	r1, r4
 8015954:	d008      	beq.n	8015968 <memmove+0x28>
 8015956:	f811 2b01 	ldrb.w	r2, [r1], #1
 801595a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801595e:	e7f8      	b.n	8015952 <memmove+0x12>
 8015960:	4402      	add	r2, r0
 8015962:	4601      	mov	r1, r0
 8015964:	428a      	cmp	r2, r1
 8015966:	d100      	bne.n	801596a <memmove+0x2a>
 8015968:	bd10      	pop	{r4, pc}
 801596a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801596e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015972:	e7f7      	b.n	8015964 <memmove+0x24>

08015974 <memset>:
 8015974:	4402      	add	r2, r0
 8015976:	4603      	mov	r3, r0
 8015978:	4293      	cmp	r3, r2
 801597a:	d100      	bne.n	801597e <memset+0xa>
 801597c:	4770      	bx	lr
 801597e:	f803 1b01 	strb.w	r1, [r3], #1
 8015982:	e7f9      	b.n	8015978 <memset+0x4>

08015984 <_sbrk_r>:
 8015984:	b538      	push	{r3, r4, r5, lr}
 8015986:	4d06      	ldr	r5, [pc, #24]	@ (80159a0 <_sbrk_r+0x1c>)
 8015988:	2300      	movs	r3, #0
 801598a:	4604      	mov	r4, r0
 801598c:	4608      	mov	r0, r1
 801598e:	602b      	str	r3, [r5, #0]
 8015990:	f7ec fabe 	bl	8001f10 <_sbrk>
 8015994:	1c43      	adds	r3, r0, #1
 8015996:	d102      	bne.n	801599e <_sbrk_r+0x1a>
 8015998:	682b      	ldr	r3, [r5, #0]
 801599a:	b103      	cbz	r3, 801599e <_sbrk_r+0x1a>
 801599c:	6023      	str	r3, [r4, #0]
 801599e:	bd38      	pop	{r3, r4, r5, pc}
 80159a0:	240026c0 	.word	0x240026c0

080159a4 <__errno>:
 80159a4:	4b01      	ldr	r3, [pc, #4]	@ (80159ac <__errno+0x8>)
 80159a6:	6818      	ldr	r0, [r3, #0]
 80159a8:	4770      	bx	lr
 80159aa:	bf00      	nop
 80159ac:	2400005c 	.word	0x2400005c

080159b0 <__libc_init_array>:
 80159b0:	b570      	push	{r4, r5, r6, lr}
 80159b2:	4d0d      	ldr	r5, [pc, #52]	@ (80159e8 <__libc_init_array+0x38>)
 80159b4:	4c0d      	ldr	r4, [pc, #52]	@ (80159ec <__libc_init_array+0x3c>)
 80159b6:	1b64      	subs	r4, r4, r5
 80159b8:	10a4      	asrs	r4, r4, #2
 80159ba:	2600      	movs	r6, #0
 80159bc:	42a6      	cmp	r6, r4
 80159be:	d109      	bne.n	80159d4 <__libc_init_array+0x24>
 80159c0:	4d0b      	ldr	r5, [pc, #44]	@ (80159f0 <__libc_init_array+0x40>)
 80159c2:	4c0c      	ldr	r4, [pc, #48]	@ (80159f4 <__libc_init_array+0x44>)
 80159c4:	f000 fb8c 	bl	80160e0 <_init>
 80159c8:	1b64      	subs	r4, r4, r5
 80159ca:	10a4      	asrs	r4, r4, #2
 80159cc:	2600      	movs	r6, #0
 80159ce:	42a6      	cmp	r6, r4
 80159d0:	d105      	bne.n	80159de <__libc_init_array+0x2e>
 80159d2:	bd70      	pop	{r4, r5, r6, pc}
 80159d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80159d8:	4798      	blx	r3
 80159da:	3601      	adds	r6, #1
 80159dc:	e7ee      	b.n	80159bc <__libc_init_array+0xc>
 80159de:	f855 3b04 	ldr.w	r3, [r5], #4
 80159e2:	4798      	blx	r3
 80159e4:	3601      	adds	r6, #1
 80159e6:	e7f2      	b.n	80159ce <__libc_init_array+0x1e>
 80159e8:	080173c8 	.word	0x080173c8
 80159ec:	080173c8 	.word	0x080173c8
 80159f0:	080173c8 	.word	0x080173c8
 80159f4:	080173cc 	.word	0x080173cc

080159f8 <__retarget_lock_acquire_recursive>:
 80159f8:	4770      	bx	lr

080159fa <__retarget_lock_release_recursive>:
 80159fa:	4770      	bx	lr

080159fc <memcpy>:
 80159fc:	440a      	add	r2, r1
 80159fe:	4291      	cmp	r1, r2
 8015a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8015a04:	d100      	bne.n	8015a08 <memcpy+0xc>
 8015a06:	4770      	bx	lr
 8015a08:	b510      	push	{r4, lr}
 8015a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a12:	4291      	cmp	r1, r2
 8015a14:	d1f9      	bne.n	8015a0a <memcpy+0xe>
 8015a16:	bd10      	pop	{r4, pc}

08015a18 <_free_r>:
 8015a18:	b538      	push	{r3, r4, r5, lr}
 8015a1a:	4605      	mov	r5, r0
 8015a1c:	2900      	cmp	r1, #0
 8015a1e:	d041      	beq.n	8015aa4 <_free_r+0x8c>
 8015a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a24:	1f0c      	subs	r4, r1, #4
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	bfb8      	it	lt
 8015a2a:	18e4      	addlt	r4, r4, r3
 8015a2c:	f7ff ff4a 	bl	80158c4 <__malloc_lock>
 8015a30:	4a1d      	ldr	r2, [pc, #116]	@ (8015aa8 <_free_r+0x90>)
 8015a32:	6813      	ldr	r3, [r2, #0]
 8015a34:	b933      	cbnz	r3, 8015a44 <_free_r+0x2c>
 8015a36:	6063      	str	r3, [r4, #4]
 8015a38:	6014      	str	r4, [r2, #0]
 8015a3a:	4628      	mov	r0, r5
 8015a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015a40:	f7ff bf46 	b.w	80158d0 <__malloc_unlock>
 8015a44:	42a3      	cmp	r3, r4
 8015a46:	d908      	bls.n	8015a5a <_free_r+0x42>
 8015a48:	6820      	ldr	r0, [r4, #0]
 8015a4a:	1821      	adds	r1, r4, r0
 8015a4c:	428b      	cmp	r3, r1
 8015a4e:	bf01      	itttt	eq
 8015a50:	6819      	ldreq	r1, [r3, #0]
 8015a52:	685b      	ldreq	r3, [r3, #4]
 8015a54:	1809      	addeq	r1, r1, r0
 8015a56:	6021      	streq	r1, [r4, #0]
 8015a58:	e7ed      	b.n	8015a36 <_free_r+0x1e>
 8015a5a:	461a      	mov	r2, r3
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	b10b      	cbz	r3, 8015a64 <_free_r+0x4c>
 8015a60:	42a3      	cmp	r3, r4
 8015a62:	d9fa      	bls.n	8015a5a <_free_r+0x42>
 8015a64:	6811      	ldr	r1, [r2, #0]
 8015a66:	1850      	adds	r0, r2, r1
 8015a68:	42a0      	cmp	r0, r4
 8015a6a:	d10b      	bne.n	8015a84 <_free_r+0x6c>
 8015a6c:	6820      	ldr	r0, [r4, #0]
 8015a6e:	4401      	add	r1, r0
 8015a70:	1850      	adds	r0, r2, r1
 8015a72:	4283      	cmp	r3, r0
 8015a74:	6011      	str	r1, [r2, #0]
 8015a76:	d1e0      	bne.n	8015a3a <_free_r+0x22>
 8015a78:	6818      	ldr	r0, [r3, #0]
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	6053      	str	r3, [r2, #4]
 8015a7e:	4408      	add	r0, r1
 8015a80:	6010      	str	r0, [r2, #0]
 8015a82:	e7da      	b.n	8015a3a <_free_r+0x22>
 8015a84:	d902      	bls.n	8015a8c <_free_r+0x74>
 8015a86:	230c      	movs	r3, #12
 8015a88:	602b      	str	r3, [r5, #0]
 8015a8a:	e7d6      	b.n	8015a3a <_free_r+0x22>
 8015a8c:	6820      	ldr	r0, [r4, #0]
 8015a8e:	1821      	adds	r1, r4, r0
 8015a90:	428b      	cmp	r3, r1
 8015a92:	bf04      	itt	eq
 8015a94:	6819      	ldreq	r1, [r3, #0]
 8015a96:	685b      	ldreq	r3, [r3, #4]
 8015a98:	6063      	str	r3, [r4, #4]
 8015a9a:	bf04      	itt	eq
 8015a9c:	1809      	addeq	r1, r1, r0
 8015a9e:	6021      	streq	r1, [r4, #0]
 8015aa0:	6054      	str	r4, [r2, #4]
 8015aa2:	e7ca      	b.n	8015a3a <_free_r+0x22>
 8015aa4:	bd38      	pop	{r3, r4, r5, pc}
 8015aa6:	bf00      	nop
 8015aa8:	24002584 	.word	0x24002584

08015aac <__ssputs_r>:
 8015aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ab0:	688e      	ldr	r6, [r1, #8]
 8015ab2:	461f      	mov	r7, r3
 8015ab4:	42be      	cmp	r6, r7
 8015ab6:	680b      	ldr	r3, [r1, #0]
 8015ab8:	4682      	mov	sl, r0
 8015aba:	460c      	mov	r4, r1
 8015abc:	4690      	mov	r8, r2
 8015abe:	d82d      	bhi.n	8015b1c <__ssputs_r+0x70>
 8015ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ac4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015ac8:	d026      	beq.n	8015b18 <__ssputs_r+0x6c>
 8015aca:	6965      	ldr	r5, [r4, #20]
 8015acc:	6909      	ldr	r1, [r1, #16]
 8015ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015ad2:	eba3 0901 	sub.w	r9, r3, r1
 8015ad6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015ada:	1c7b      	adds	r3, r7, #1
 8015adc:	444b      	add	r3, r9
 8015ade:	106d      	asrs	r5, r5, #1
 8015ae0:	429d      	cmp	r5, r3
 8015ae2:	bf38      	it	cc
 8015ae4:	461d      	movcc	r5, r3
 8015ae6:	0553      	lsls	r3, r2, #21
 8015ae8:	d527      	bpl.n	8015b3a <__ssputs_r+0x8e>
 8015aea:	4629      	mov	r1, r5
 8015aec:	f7ff fe6a 	bl	80157c4 <_malloc_r>
 8015af0:	4606      	mov	r6, r0
 8015af2:	b360      	cbz	r0, 8015b4e <__ssputs_r+0xa2>
 8015af4:	6921      	ldr	r1, [r4, #16]
 8015af6:	464a      	mov	r2, r9
 8015af8:	f7ff ff80 	bl	80159fc <memcpy>
 8015afc:	89a3      	ldrh	r3, [r4, #12]
 8015afe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b06:	81a3      	strh	r3, [r4, #12]
 8015b08:	6126      	str	r6, [r4, #16]
 8015b0a:	6165      	str	r5, [r4, #20]
 8015b0c:	444e      	add	r6, r9
 8015b0e:	eba5 0509 	sub.w	r5, r5, r9
 8015b12:	6026      	str	r6, [r4, #0]
 8015b14:	60a5      	str	r5, [r4, #8]
 8015b16:	463e      	mov	r6, r7
 8015b18:	42be      	cmp	r6, r7
 8015b1a:	d900      	bls.n	8015b1e <__ssputs_r+0x72>
 8015b1c:	463e      	mov	r6, r7
 8015b1e:	6820      	ldr	r0, [r4, #0]
 8015b20:	4632      	mov	r2, r6
 8015b22:	4641      	mov	r1, r8
 8015b24:	f7ff ff0c 	bl	8015940 <memmove>
 8015b28:	68a3      	ldr	r3, [r4, #8]
 8015b2a:	1b9b      	subs	r3, r3, r6
 8015b2c:	60a3      	str	r3, [r4, #8]
 8015b2e:	6823      	ldr	r3, [r4, #0]
 8015b30:	4433      	add	r3, r6
 8015b32:	6023      	str	r3, [r4, #0]
 8015b34:	2000      	movs	r0, #0
 8015b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b3a:	462a      	mov	r2, r5
 8015b3c:	f000 fa9a 	bl	8016074 <_realloc_r>
 8015b40:	4606      	mov	r6, r0
 8015b42:	2800      	cmp	r0, #0
 8015b44:	d1e0      	bne.n	8015b08 <__ssputs_r+0x5c>
 8015b46:	6921      	ldr	r1, [r4, #16]
 8015b48:	4650      	mov	r0, sl
 8015b4a:	f7ff ff65 	bl	8015a18 <_free_r>
 8015b4e:	230c      	movs	r3, #12
 8015b50:	f8ca 3000 	str.w	r3, [sl]
 8015b54:	89a3      	ldrh	r3, [r4, #12]
 8015b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015b5a:	81a3      	strh	r3, [r4, #12]
 8015b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b60:	e7e9      	b.n	8015b36 <__ssputs_r+0x8a>
	...

08015b64 <_svfiprintf_r>:
 8015b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b68:	4698      	mov	r8, r3
 8015b6a:	898b      	ldrh	r3, [r1, #12]
 8015b6c:	061b      	lsls	r3, r3, #24
 8015b6e:	b09d      	sub	sp, #116	@ 0x74
 8015b70:	4607      	mov	r7, r0
 8015b72:	460d      	mov	r5, r1
 8015b74:	4614      	mov	r4, r2
 8015b76:	d510      	bpl.n	8015b9a <_svfiprintf_r+0x36>
 8015b78:	690b      	ldr	r3, [r1, #16]
 8015b7a:	b973      	cbnz	r3, 8015b9a <_svfiprintf_r+0x36>
 8015b7c:	2140      	movs	r1, #64	@ 0x40
 8015b7e:	f7ff fe21 	bl	80157c4 <_malloc_r>
 8015b82:	6028      	str	r0, [r5, #0]
 8015b84:	6128      	str	r0, [r5, #16]
 8015b86:	b930      	cbnz	r0, 8015b96 <_svfiprintf_r+0x32>
 8015b88:	230c      	movs	r3, #12
 8015b8a:	603b      	str	r3, [r7, #0]
 8015b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8015b90:	b01d      	add	sp, #116	@ 0x74
 8015b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b96:	2340      	movs	r3, #64	@ 0x40
 8015b98:	616b      	str	r3, [r5, #20]
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b9e:	2320      	movs	r3, #32
 8015ba0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ba8:	2330      	movs	r3, #48	@ 0x30
 8015baa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015d48 <_svfiprintf_r+0x1e4>
 8015bae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015bb2:	f04f 0901 	mov.w	r9, #1
 8015bb6:	4623      	mov	r3, r4
 8015bb8:	469a      	mov	sl, r3
 8015bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bbe:	b10a      	cbz	r2, 8015bc4 <_svfiprintf_r+0x60>
 8015bc0:	2a25      	cmp	r2, #37	@ 0x25
 8015bc2:	d1f9      	bne.n	8015bb8 <_svfiprintf_r+0x54>
 8015bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8015bc8:	d00b      	beq.n	8015be2 <_svfiprintf_r+0x7e>
 8015bca:	465b      	mov	r3, fp
 8015bcc:	4622      	mov	r2, r4
 8015bce:	4629      	mov	r1, r5
 8015bd0:	4638      	mov	r0, r7
 8015bd2:	f7ff ff6b 	bl	8015aac <__ssputs_r>
 8015bd6:	3001      	adds	r0, #1
 8015bd8:	f000 80a7 	beq.w	8015d2a <_svfiprintf_r+0x1c6>
 8015bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015bde:	445a      	add	r2, fp
 8015be0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015be2:	f89a 3000 	ldrb.w	r3, [sl]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	f000 809f 	beq.w	8015d2a <_svfiprintf_r+0x1c6>
 8015bec:	2300      	movs	r3, #0
 8015bee:	f04f 32ff 	mov.w	r2, #4294967295
 8015bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015bf6:	f10a 0a01 	add.w	sl, sl, #1
 8015bfa:	9304      	str	r3, [sp, #16]
 8015bfc:	9307      	str	r3, [sp, #28]
 8015bfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015c02:	931a      	str	r3, [sp, #104]	@ 0x68
 8015c04:	4654      	mov	r4, sl
 8015c06:	2205      	movs	r2, #5
 8015c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c0c:	484e      	ldr	r0, [pc, #312]	@ (8015d48 <_svfiprintf_r+0x1e4>)
 8015c0e:	f7ea fb87 	bl	8000320 <memchr>
 8015c12:	9a04      	ldr	r2, [sp, #16]
 8015c14:	b9d8      	cbnz	r0, 8015c4e <_svfiprintf_r+0xea>
 8015c16:	06d0      	lsls	r0, r2, #27
 8015c18:	bf44      	itt	mi
 8015c1a:	2320      	movmi	r3, #32
 8015c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c20:	0711      	lsls	r1, r2, #28
 8015c22:	bf44      	itt	mi
 8015c24:	232b      	movmi	r3, #43	@ 0x2b
 8015c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8015c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c30:	d015      	beq.n	8015c5e <_svfiprintf_r+0xfa>
 8015c32:	9a07      	ldr	r2, [sp, #28]
 8015c34:	4654      	mov	r4, sl
 8015c36:	2000      	movs	r0, #0
 8015c38:	f04f 0c0a 	mov.w	ip, #10
 8015c3c:	4621      	mov	r1, r4
 8015c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c42:	3b30      	subs	r3, #48	@ 0x30
 8015c44:	2b09      	cmp	r3, #9
 8015c46:	d94b      	bls.n	8015ce0 <_svfiprintf_r+0x17c>
 8015c48:	b1b0      	cbz	r0, 8015c78 <_svfiprintf_r+0x114>
 8015c4a:	9207      	str	r2, [sp, #28]
 8015c4c:	e014      	b.n	8015c78 <_svfiprintf_r+0x114>
 8015c4e:	eba0 0308 	sub.w	r3, r0, r8
 8015c52:	fa09 f303 	lsl.w	r3, r9, r3
 8015c56:	4313      	orrs	r3, r2
 8015c58:	9304      	str	r3, [sp, #16]
 8015c5a:	46a2      	mov	sl, r4
 8015c5c:	e7d2      	b.n	8015c04 <_svfiprintf_r+0xa0>
 8015c5e:	9b03      	ldr	r3, [sp, #12]
 8015c60:	1d19      	adds	r1, r3, #4
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	9103      	str	r1, [sp, #12]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	bfbb      	ittet	lt
 8015c6a:	425b      	neglt	r3, r3
 8015c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8015c70:	9307      	strge	r3, [sp, #28]
 8015c72:	9307      	strlt	r3, [sp, #28]
 8015c74:	bfb8      	it	lt
 8015c76:	9204      	strlt	r2, [sp, #16]
 8015c78:	7823      	ldrb	r3, [r4, #0]
 8015c7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8015c7c:	d10a      	bne.n	8015c94 <_svfiprintf_r+0x130>
 8015c7e:	7863      	ldrb	r3, [r4, #1]
 8015c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c82:	d132      	bne.n	8015cea <_svfiprintf_r+0x186>
 8015c84:	9b03      	ldr	r3, [sp, #12]
 8015c86:	1d1a      	adds	r2, r3, #4
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	9203      	str	r2, [sp, #12]
 8015c8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015c90:	3402      	adds	r4, #2
 8015c92:	9305      	str	r3, [sp, #20]
 8015c94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015d58 <_svfiprintf_r+0x1f4>
 8015c98:	7821      	ldrb	r1, [r4, #0]
 8015c9a:	2203      	movs	r2, #3
 8015c9c:	4650      	mov	r0, sl
 8015c9e:	f7ea fb3f 	bl	8000320 <memchr>
 8015ca2:	b138      	cbz	r0, 8015cb4 <_svfiprintf_r+0x150>
 8015ca4:	9b04      	ldr	r3, [sp, #16]
 8015ca6:	eba0 000a 	sub.w	r0, r0, sl
 8015caa:	2240      	movs	r2, #64	@ 0x40
 8015cac:	4082      	lsls	r2, r0
 8015cae:	4313      	orrs	r3, r2
 8015cb0:	3401      	adds	r4, #1
 8015cb2:	9304      	str	r3, [sp, #16]
 8015cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015cb8:	4824      	ldr	r0, [pc, #144]	@ (8015d4c <_svfiprintf_r+0x1e8>)
 8015cba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015cbe:	2206      	movs	r2, #6
 8015cc0:	f7ea fb2e 	bl	8000320 <memchr>
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	d036      	beq.n	8015d36 <_svfiprintf_r+0x1d2>
 8015cc8:	4b21      	ldr	r3, [pc, #132]	@ (8015d50 <_svfiprintf_r+0x1ec>)
 8015cca:	bb1b      	cbnz	r3, 8015d14 <_svfiprintf_r+0x1b0>
 8015ccc:	9b03      	ldr	r3, [sp, #12]
 8015cce:	3307      	adds	r3, #7
 8015cd0:	f023 0307 	bic.w	r3, r3, #7
 8015cd4:	3308      	adds	r3, #8
 8015cd6:	9303      	str	r3, [sp, #12]
 8015cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cda:	4433      	add	r3, r6
 8015cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cde:	e76a      	b.n	8015bb6 <_svfiprintf_r+0x52>
 8015ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ce4:	460c      	mov	r4, r1
 8015ce6:	2001      	movs	r0, #1
 8015ce8:	e7a8      	b.n	8015c3c <_svfiprintf_r+0xd8>
 8015cea:	2300      	movs	r3, #0
 8015cec:	3401      	adds	r4, #1
 8015cee:	9305      	str	r3, [sp, #20]
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	f04f 0c0a 	mov.w	ip, #10
 8015cf6:	4620      	mov	r0, r4
 8015cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cfc:	3a30      	subs	r2, #48	@ 0x30
 8015cfe:	2a09      	cmp	r2, #9
 8015d00:	d903      	bls.n	8015d0a <_svfiprintf_r+0x1a6>
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d0c6      	beq.n	8015c94 <_svfiprintf_r+0x130>
 8015d06:	9105      	str	r1, [sp, #20]
 8015d08:	e7c4      	b.n	8015c94 <_svfiprintf_r+0x130>
 8015d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d0e:	4604      	mov	r4, r0
 8015d10:	2301      	movs	r3, #1
 8015d12:	e7f0      	b.n	8015cf6 <_svfiprintf_r+0x192>
 8015d14:	ab03      	add	r3, sp, #12
 8015d16:	9300      	str	r3, [sp, #0]
 8015d18:	462a      	mov	r2, r5
 8015d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8015d54 <_svfiprintf_r+0x1f0>)
 8015d1c:	a904      	add	r1, sp, #16
 8015d1e:	4638      	mov	r0, r7
 8015d20:	f3af 8000 	nop.w
 8015d24:	1c42      	adds	r2, r0, #1
 8015d26:	4606      	mov	r6, r0
 8015d28:	d1d6      	bne.n	8015cd8 <_svfiprintf_r+0x174>
 8015d2a:	89ab      	ldrh	r3, [r5, #12]
 8015d2c:	065b      	lsls	r3, r3, #25
 8015d2e:	f53f af2d 	bmi.w	8015b8c <_svfiprintf_r+0x28>
 8015d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d34:	e72c      	b.n	8015b90 <_svfiprintf_r+0x2c>
 8015d36:	ab03      	add	r3, sp, #12
 8015d38:	9300      	str	r3, [sp, #0]
 8015d3a:	462a      	mov	r2, r5
 8015d3c:	4b05      	ldr	r3, [pc, #20]	@ (8015d54 <_svfiprintf_r+0x1f0>)
 8015d3e:	a904      	add	r1, sp, #16
 8015d40:	4638      	mov	r0, r7
 8015d42:	f000 f879 	bl	8015e38 <_printf_i>
 8015d46:	e7ed      	b.n	8015d24 <_svfiprintf_r+0x1c0>
 8015d48:	0801738c 	.word	0x0801738c
 8015d4c:	08017396 	.word	0x08017396
 8015d50:	00000000 	.word	0x00000000
 8015d54:	08015aad 	.word	0x08015aad
 8015d58:	08017392 	.word	0x08017392

08015d5c <_printf_common>:
 8015d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d60:	4616      	mov	r6, r2
 8015d62:	4698      	mov	r8, r3
 8015d64:	688a      	ldr	r2, [r1, #8]
 8015d66:	690b      	ldr	r3, [r1, #16]
 8015d68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015d6c:	4293      	cmp	r3, r2
 8015d6e:	bfb8      	it	lt
 8015d70:	4613      	movlt	r3, r2
 8015d72:	6033      	str	r3, [r6, #0]
 8015d74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015d78:	4607      	mov	r7, r0
 8015d7a:	460c      	mov	r4, r1
 8015d7c:	b10a      	cbz	r2, 8015d82 <_printf_common+0x26>
 8015d7e:	3301      	adds	r3, #1
 8015d80:	6033      	str	r3, [r6, #0]
 8015d82:	6823      	ldr	r3, [r4, #0]
 8015d84:	0699      	lsls	r1, r3, #26
 8015d86:	bf42      	ittt	mi
 8015d88:	6833      	ldrmi	r3, [r6, #0]
 8015d8a:	3302      	addmi	r3, #2
 8015d8c:	6033      	strmi	r3, [r6, #0]
 8015d8e:	6825      	ldr	r5, [r4, #0]
 8015d90:	f015 0506 	ands.w	r5, r5, #6
 8015d94:	d106      	bne.n	8015da4 <_printf_common+0x48>
 8015d96:	f104 0a19 	add.w	sl, r4, #25
 8015d9a:	68e3      	ldr	r3, [r4, #12]
 8015d9c:	6832      	ldr	r2, [r6, #0]
 8015d9e:	1a9b      	subs	r3, r3, r2
 8015da0:	42ab      	cmp	r3, r5
 8015da2:	dc26      	bgt.n	8015df2 <_printf_common+0x96>
 8015da4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015da8:	6822      	ldr	r2, [r4, #0]
 8015daa:	3b00      	subs	r3, #0
 8015dac:	bf18      	it	ne
 8015dae:	2301      	movne	r3, #1
 8015db0:	0692      	lsls	r2, r2, #26
 8015db2:	d42b      	bmi.n	8015e0c <_printf_common+0xb0>
 8015db4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015db8:	4641      	mov	r1, r8
 8015dba:	4638      	mov	r0, r7
 8015dbc:	47c8      	blx	r9
 8015dbe:	3001      	adds	r0, #1
 8015dc0:	d01e      	beq.n	8015e00 <_printf_common+0xa4>
 8015dc2:	6823      	ldr	r3, [r4, #0]
 8015dc4:	6922      	ldr	r2, [r4, #16]
 8015dc6:	f003 0306 	and.w	r3, r3, #6
 8015dca:	2b04      	cmp	r3, #4
 8015dcc:	bf02      	ittt	eq
 8015dce:	68e5      	ldreq	r5, [r4, #12]
 8015dd0:	6833      	ldreq	r3, [r6, #0]
 8015dd2:	1aed      	subeq	r5, r5, r3
 8015dd4:	68a3      	ldr	r3, [r4, #8]
 8015dd6:	bf0c      	ite	eq
 8015dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ddc:	2500      	movne	r5, #0
 8015dde:	4293      	cmp	r3, r2
 8015de0:	bfc4      	itt	gt
 8015de2:	1a9b      	subgt	r3, r3, r2
 8015de4:	18ed      	addgt	r5, r5, r3
 8015de6:	2600      	movs	r6, #0
 8015de8:	341a      	adds	r4, #26
 8015dea:	42b5      	cmp	r5, r6
 8015dec:	d11a      	bne.n	8015e24 <_printf_common+0xc8>
 8015dee:	2000      	movs	r0, #0
 8015df0:	e008      	b.n	8015e04 <_printf_common+0xa8>
 8015df2:	2301      	movs	r3, #1
 8015df4:	4652      	mov	r2, sl
 8015df6:	4641      	mov	r1, r8
 8015df8:	4638      	mov	r0, r7
 8015dfa:	47c8      	blx	r9
 8015dfc:	3001      	adds	r0, #1
 8015dfe:	d103      	bne.n	8015e08 <_printf_common+0xac>
 8015e00:	f04f 30ff 	mov.w	r0, #4294967295
 8015e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e08:	3501      	adds	r5, #1
 8015e0a:	e7c6      	b.n	8015d9a <_printf_common+0x3e>
 8015e0c:	18e1      	adds	r1, r4, r3
 8015e0e:	1c5a      	adds	r2, r3, #1
 8015e10:	2030      	movs	r0, #48	@ 0x30
 8015e12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015e16:	4422      	add	r2, r4
 8015e18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015e1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015e20:	3302      	adds	r3, #2
 8015e22:	e7c7      	b.n	8015db4 <_printf_common+0x58>
 8015e24:	2301      	movs	r3, #1
 8015e26:	4622      	mov	r2, r4
 8015e28:	4641      	mov	r1, r8
 8015e2a:	4638      	mov	r0, r7
 8015e2c:	47c8      	blx	r9
 8015e2e:	3001      	adds	r0, #1
 8015e30:	d0e6      	beq.n	8015e00 <_printf_common+0xa4>
 8015e32:	3601      	adds	r6, #1
 8015e34:	e7d9      	b.n	8015dea <_printf_common+0x8e>
	...

08015e38 <_printf_i>:
 8015e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015e3c:	7e0f      	ldrb	r7, [r1, #24]
 8015e3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015e40:	2f78      	cmp	r7, #120	@ 0x78
 8015e42:	4691      	mov	r9, r2
 8015e44:	4680      	mov	r8, r0
 8015e46:	460c      	mov	r4, r1
 8015e48:	469a      	mov	sl, r3
 8015e4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015e4e:	d807      	bhi.n	8015e60 <_printf_i+0x28>
 8015e50:	2f62      	cmp	r7, #98	@ 0x62
 8015e52:	d80a      	bhi.n	8015e6a <_printf_i+0x32>
 8015e54:	2f00      	cmp	r7, #0
 8015e56:	f000 80d1 	beq.w	8015ffc <_printf_i+0x1c4>
 8015e5a:	2f58      	cmp	r7, #88	@ 0x58
 8015e5c:	f000 80b8 	beq.w	8015fd0 <_printf_i+0x198>
 8015e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015e64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015e68:	e03a      	b.n	8015ee0 <_printf_i+0xa8>
 8015e6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015e6e:	2b15      	cmp	r3, #21
 8015e70:	d8f6      	bhi.n	8015e60 <_printf_i+0x28>
 8015e72:	a101      	add	r1, pc, #4	@ (adr r1, 8015e78 <_printf_i+0x40>)
 8015e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e78:	08015ed1 	.word	0x08015ed1
 8015e7c:	08015ee5 	.word	0x08015ee5
 8015e80:	08015e61 	.word	0x08015e61
 8015e84:	08015e61 	.word	0x08015e61
 8015e88:	08015e61 	.word	0x08015e61
 8015e8c:	08015e61 	.word	0x08015e61
 8015e90:	08015ee5 	.word	0x08015ee5
 8015e94:	08015e61 	.word	0x08015e61
 8015e98:	08015e61 	.word	0x08015e61
 8015e9c:	08015e61 	.word	0x08015e61
 8015ea0:	08015e61 	.word	0x08015e61
 8015ea4:	08015fe3 	.word	0x08015fe3
 8015ea8:	08015f0f 	.word	0x08015f0f
 8015eac:	08015f9d 	.word	0x08015f9d
 8015eb0:	08015e61 	.word	0x08015e61
 8015eb4:	08015e61 	.word	0x08015e61
 8015eb8:	08016005 	.word	0x08016005
 8015ebc:	08015e61 	.word	0x08015e61
 8015ec0:	08015f0f 	.word	0x08015f0f
 8015ec4:	08015e61 	.word	0x08015e61
 8015ec8:	08015e61 	.word	0x08015e61
 8015ecc:	08015fa5 	.word	0x08015fa5
 8015ed0:	6833      	ldr	r3, [r6, #0]
 8015ed2:	1d1a      	adds	r2, r3, #4
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	6032      	str	r2, [r6, #0]
 8015ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015edc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	e09c      	b.n	801601e <_printf_i+0x1e6>
 8015ee4:	6833      	ldr	r3, [r6, #0]
 8015ee6:	6820      	ldr	r0, [r4, #0]
 8015ee8:	1d19      	adds	r1, r3, #4
 8015eea:	6031      	str	r1, [r6, #0]
 8015eec:	0606      	lsls	r6, r0, #24
 8015eee:	d501      	bpl.n	8015ef4 <_printf_i+0xbc>
 8015ef0:	681d      	ldr	r5, [r3, #0]
 8015ef2:	e003      	b.n	8015efc <_printf_i+0xc4>
 8015ef4:	0645      	lsls	r5, r0, #25
 8015ef6:	d5fb      	bpl.n	8015ef0 <_printf_i+0xb8>
 8015ef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015efc:	2d00      	cmp	r5, #0
 8015efe:	da03      	bge.n	8015f08 <_printf_i+0xd0>
 8015f00:	232d      	movs	r3, #45	@ 0x2d
 8015f02:	426d      	negs	r5, r5
 8015f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015f08:	4858      	ldr	r0, [pc, #352]	@ (801606c <_printf_i+0x234>)
 8015f0a:	230a      	movs	r3, #10
 8015f0c:	e011      	b.n	8015f32 <_printf_i+0xfa>
 8015f0e:	6821      	ldr	r1, [r4, #0]
 8015f10:	6833      	ldr	r3, [r6, #0]
 8015f12:	0608      	lsls	r0, r1, #24
 8015f14:	f853 5b04 	ldr.w	r5, [r3], #4
 8015f18:	d402      	bmi.n	8015f20 <_printf_i+0xe8>
 8015f1a:	0649      	lsls	r1, r1, #25
 8015f1c:	bf48      	it	mi
 8015f1e:	b2ad      	uxthmi	r5, r5
 8015f20:	2f6f      	cmp	r7, #111	@ 0x6f
 8015f22:	4852      	ldr	r0, [pc, #328]	@ (801606c <_printf_i+0x234>)
 8015f24:	6033      	str	r3, [r6, #0]
 8015f26:	bf14      	ite	ne
 8015f28:	230a      	movne	r3, #10
 8015f2a:	2308      	moveq	r3, #8
 8015f2c:	2100      	movs	r1, #0
 8015f2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015f32:	6866      	ldr	r6, [r4, #4]
 8015f34:	60a6      	str	r6, [r4, #8]
 8015f36:	2e00      	cmp	r6, #0
 8015f38:	db05      	blt.n	8015f46 <_printf_i+0x10e>
 8015f3a:	6821      	ldr	r1, [r4, #0]
 8015f3c:	432e      	orrs	r6, r5
 8015f3e:	f021 0104 	bic.w	r1, r1, #4
 8015f42:	6021      	str	r1, [r4, #0]
 8015f44:	d04b      	beq.n	8015fde <_printf_i+0x1a6>
 8015f46:	4616      	mov	r6, r2
 8015f48:	fbb5 f1f3 	udiv	r1, r5, r3
 8015f4c:	fb03 5711 	mls	r7, r3, r1, r5
 8015f50:	5dc7      	ldrb	r7, [r0, r7]
 8015f52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015f56:	462f      	mov	r7, r5
 8015f58:	42bb      	cmp	r3, r7
 8015f5a:	460d      	mov	r5, r1
 8015f5c:	d9f4      	bls.n	8015f48 <_printf_i+0x110>
 8015f5e:	2b08      	cmp	r3, #8
 8015f60:	d10b      	bne.n	8015f7a <_printf_i+0x142>
 8015f62:	6823      	ldr	r3, [r4, #0]
 8015f64:	07df      	lsls	r7, r3, #31
 8015f66:	d508      	bpl.n	8015f7a <_printf_i+0x142>
 8015f68:	6923      	ldr	r3, [r4, #16]
 8015f6a:	6861      	ldr	r1, [r4, #4]
 8015f6c:	4299      	cmp	r1, r3
 8015f6e:	bfde      	ittt	le
 8015f70:	2330      	movle	r3, #48	@ 0x30
 8015f72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015f76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015f7a:	1b92      	subs	r2, r2, r6
 8015f7c:	6122      	str	r2, [r4, #16]
 8015f7e:	f8cd a000 	str.w	sl, [sp]
 8015f82:	464b      	mov	r3, r9
 8015f84:	aa03      	add	r2, sp, #12
 8015f86:	4621      	mov	r1, r4
 8015f88:	4640      	mov	r0, r8
 8015f8a:	f7ff fee7 	bl	8015d5c <_printf_common>
 8015f8e:	3001      	adds	r0, #1
 8015f90:	d14a      	bne.n	8016028 <_printf_i+0x1f0>
 8015f92:	f04f 30ff 	mov.w	r0, #4294967295
 8015f96:	b004      	add	sp, #16
 8015f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f9c:	6823      	ldr	r3, [r4, #0]
 8015f9e:	f043 0320 	orr.w	r3, r3, #32
 8015fa2:	6023      	str	r3, [r4, #0]
 8015fa4:	4832      	ldr	r0, [pc, #200]	@ (8016070 <_printf_i+0x238>)
 8015fa6:	2778      	movs	r7, #120	@ 0x78
 8015fa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015fac:	6823      	ldr	r3, [r4, #0]
 8015fae:	6831      	ldr	r1, [r6, #0]
 8015fb0:	061f      	lsls	r7, r3, #24
 8015fb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8015fb6:	d402      	bmi.n	8015fbe <_printf_i+0x186>
 8015fb8:	065f      	lsls	r7, r3, #25
 8015fba:	bf48      	it	mi
 8015fbc:	b2ad      	uxthmi	r5, r5
 8015fbe:	6031      	str	r1, [r6, #0]
 8015fc0:	07d9      	lsls	r1, r3, #31
 8015fc2:	bf44      	itt	mi
 8015fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8015fc8:	6023      	strmi	r3, [r4, #0]
 8015fca:	b11d      	cbz	r5, 8015fd4 <_printf_i+0x19c>
 8015fcc:	2310      	movs	r3, #16
 8015fce:	e7ad      	b.n	8015f2c <_printf_i+0xf4>
 8015fd0:	4826      	ldr	r0, [pc, #152]	@ (801606c <_printf_i+0x234>)
 8015fd2:	e7e9      	b.n	8015fa8 <_printf_i+0x170>
 8015fd4:	6823      	ldr	r3, [r4, #0]
 8015fd6:	f023 0320 	bic.w	r3, r3, #32
 8015fda:	6023      	str	r3, [r4, #0]
 8015fdc:	e7f6      	b.n	8015fcc <_printf_i+0x194>
 8015fde:	4616      	mov	r6, r2
 8015fe0:	e7bd      	b.n	8015f5e <_printf_i+0x126>
 8015fe2:	6833      	ldr	r3, [r6, #0]
 8015fe4:	6825      	ldr	r5, [r4, #0]
 8015fe6:	6961      	ldr	r1, [r4, #20]
 8015fe8:	1d18      	adds	r0, r3, #4
 8015fea:	6030      	str	r0, [r6, #0]
 8015fec:	062e      	lsls	r6, r5, #24
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	d501      	bpl.n	8015ff6 <_printf_i+0x1be>
 8015ff2:	6019      	str	r1, [r3, #0]
 8015ff4:	e002      	b.n	8015ffc <_printf_i+0x1c4>
 8015ff6:	0668      	lsls	r0, r5, #25
 8015ff8:	d5fb      	bpl.n	8015ff2 <_printf_i+0x1ba>
 8015ffa:	8019      	strh	r1, [r3, #0]
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	6123      	str	r3, [r4, #16]
 8016000:	4616      	mov	r6, r2
 8016002:	e7bc      	b.n	8015f7e <_printf_i+0x146>
 8016004:	6833      	ldr	r3, [r6, #0]
 8016006:	1d1a      	adds	r2, r3, #4
 8016008:	6032      	str	r2, [r6, #0]
 801600a:	681e      	ldr	r6, [r3, #0]
 801600c:	6862      	ldr	r2, [r4, #4]
 801600e:	2100      	movs	r1, #0
 8016010:	4630      	mov	r0, r6
 8016012:	f7ea f985 	bl	8000320 <memchr>
 8016016:	b108      	cbz	r0, 801601c <_printf_i+0x1e4>
 8016018:	1b80      	subs	r0, r0, r6
 801601a:	6060      	str	r0, [r4, #4]
 801601c:	6863      	ldr	r3, [r4, #4]
 801601e:	6123      	str	r3, [r4, #16]
 8016020:	2300      	movs	r3, #0
 8016022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016026:	e7aa      	b.n	8015f7e <_printf_i+0x146>
 8016028:	6923      	ldr	r3, [r4, #16]
 801602a:	4632      	mov	r2, r6
 801602c:	4649      	mov	r1, r9
 801602e:	4640      	mov	r0, r8
 8016030:	47d0      	blx	sl
 8016032:	3001      	adds	r0, #1
 8016034:	d0ad      	beq.n	8015f92 <_printf_i+0x15a>
 8016036:	6823      	ldr	r3, [r4, #0]
 8016038:	079b      	lsls	r3, r3, #30
 801603a:	d413      	bmi.n	8016064 <_printf_i+0x22c>
 801603c:	68e0      	ldr	r0, [r4, #12]
 801603e:	9b03      	ldr	r3, [sp, #12]
 8016040:	4298      	cmp	r0, r3
 8016042:	bfb8      	it	lt
 8016044:	4618      	movlt	r0, r3
 8016046:	e7a6      	b.n	8015f96 <_printf_i+0x15e>
 8016048:	2301      	movs	r3, #1
 801604a:	4632      	mov	r2, r6
 801604c:	4649      	mov	r1, r9
 801604e:	4640      	mov	r0, r8
 8016050:	47d0      	blx	sl
 8016052:	3001      	adds	r0, #1
 8016054:	d09d      	beq.n	8015f92 <_printf_i+0x15a>
 8016056:	3501      	adds	r5, #1
 8016058:	68e3      	ldr	r3, [r4, #12]
 801605a:	9903      	ldr	r1, [sp, #12]
 801605c:	1a5b      	subs	r3, r3, r1
 801605e:	42ab      	cmp	r3, r5
 8016060:	dcf2      	bgt.n	8016048 <_printf_i+0x210>
 8016062:	e7eb      	b.n	801603c <_printf_i+0x204>
 8016064:	2500      	movs	r5, #0
 8016066:	f104 0619 	add.w	r6, r4, #25
 801606a:	e7f5      	b.n	8016058 <_printf_i+0x220>
 801606c:	0801739d 	.word	0x0801739d
 8016070:	080173ae 	.word	0x080173ae

08016074 <_realloc_r>:
 8016074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016078:	4607      	mov	r7, r0
 801607a:	4614      	mov	r4, r2
 801607c:	460d      	mov	r5, r1
 801607e:	b921      	cbnz	r1, 801608a <_realloc_r+0x16>
 8016080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016084:	4611      	mov	r1, r2
 8016086:	f7ff bb9d 	b.w	80157c4 <_malloc_r>
 801608a:	b92a      	cbnz	r2, 8016098 <_realloc_r+0x24>
 801608c:	f7ff fcc4 	bl	8015a18 <_free_r>
 8016090:	4625      	mov	r5, r4
 8016092:	4628      	mov	r0, r5
 8016094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016098:	f000 f81a 	bl	80160d0 <_malloc_usable_size_r>
 801609c:	4284      	cmp	r4, r0
 801609e:	4606      	mov	r6, r0
 80160a0:	d802      	bhi.n	80160a8 <_realloc_r+0x34>
 80160a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80160a6:	d8f4      	bhi.n	8016092 <_realloc_r+0x1e>
 80160a8:	4621      	mov	r1, r4
 80160aa:	4638      	mov	r0, r7
 80160ac:	f7ff fb8a 	bl	80157c4 <_malloc_r>
 80160b0:	4680      	mov	r8, r0
 80160b2:	b908      	cbnz	r0, 80160b8 <_realloc_r+0x44>
 80160b4:	4645      	mov	r5, r8
 80160b6:	e7ec      	b.n	8016092 <_realloc_r+0x1e>
 80160b8:	42b4      	cmp	r4, r6
 80160ba:	4622      	mov	r2, r4
 80160bc:	4629      	mov	r1, r5
 80160be:	bf28      	it	cs
 80160c0:	4632      	movcs	r2, r6
 80160c2:	f7ff fc9b 	bl	80159fc <memcpy>
 80160c6:	4629      	mov	r1, r5
 80160c8:	4638      	mov	r0, r7
 80160ca:	f7ff fca5 	bl	8015a18 <_free_r>
 80160ce:	e7f1      	b.n	80160b4 <_realloc_r+0x40>

080160d0 <_malloc_usable_size_r>:
 80160d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160d4:	1f18      	subs	r0, r3, #4
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	bfbc      	itt	lt
 80160da:	580b      	ldrlt	r3, [r1, r0]
 80160dc:	18c0      	addlt	r0, r0, r3
 80160de:	4770      	bx	lr

080160e0 <_init>:
 80160e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160e2:	bf00      	nop
 80160e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160e6:	bc08      	pop	{r3}
 80160e8:	469e      	mov	lr, r3
 80160ea:	4770      	bx	lr

080160ec <_fini>:
 80160ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160ee:	bf00      	nop
 80160f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80160f2:	bc08      	pop	{r3}
 80160f4:	469e      	mov	lr, r3
 80160f6:	4770      	bx	lr
