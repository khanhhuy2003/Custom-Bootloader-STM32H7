
Firmware1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e90  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001268  08016160  08016160  00017160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080173c8  080173c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080173d0  080173d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080173d4  080173d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000009c  24000000  080173d8  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002644  2400009c  08017474  0001909c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240026e0  08017474  000196e0  2**0
                  ALLOC
  9 .lwip_sec     00000400  30000000  30000000  0001a000  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001909c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022d38  00000000  00000000  000190ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000044c8  00000000  00000000  0003be02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001a98  00000000  00000000  000402d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000014ee  00000000  00000000  00041d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00037306  00000000  00000000  00043256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000267ac  00000000  00000000  0007a55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00156dd2  00000000  00000000  000a0d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001f7ada  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000075e8  00000000  00000000  001f7b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000066  00000000  00000000  001ff108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400009c 	.word	0x2400009c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08016148 	.word	0x08016148

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a0 	.word	0x240000a0
 800030c:	08016148 	.word	0x08016148

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <crc32_custom>:
    0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};

uint32_t crc32_custom(uint32_t crc, const uint8_t *buf, size_t len)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b087      	sub	sp, #28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
    if (buf == NULL) return 0;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <crc32_custom+0x16>
 80006fe:	2300      	movs	r3, #0
 8000700:	e01d      	b.n	800073e <crc32_custom+0x52>

    crc = crc ^ 0xFFFFFFFF;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	43db      	mvns	r3, r3
 8000706:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; i < len; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e011      	b.n	8000732 <crc32_custom+0x46>
        crc = crc32_table[(crc ^ buf[i]) & 0xFF] ^ (crc >> 8);
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4053      	eors	r3, r2
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <crc32_custom+0x60>)
 8000720:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	0a1b      	lsrs	r3, r3, #8
 8000728:	4053      	eors	r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < len; i++) {
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	3301      	adds	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	429a      	cmp	r2, r3
 8000738:	d3e9      	bcc.n	800070e <crc32_custom+0x22>
    }

    return crc ^ 0xFFFFFFFF;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	43db      	mvns	r3, r3
}
 800073e:	4618      	mov	r0, r3
 8000740:	371c      	adds	r7, #28
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	08016540 	.word	0x08016540

08000750 <crc32>:

uint32_t crc32(const void *data, size_t size)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
    return crc32_custom(0, (const uint8_t*)data, size);
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff ffc4 	bl	80006ec <crc32_custom>
 8000764:	4603      	mov	r3, r0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b23      	ldr	r3, [pc, #140]	@ (8000814 <MX_GPIO_Init+0xa4>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	4a21      	ldr	r2, [pc, #132]	@ (8000814 <MX_GPIO_Init+0xa4>)
 800078e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_GPIO_Init+0xa4>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	4a1a      	ldr	r2, [pc, #104]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b4:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <MX_GPIO_Init+0xa4>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007e6:	480c      	ldr	r0, [pc, #48]	@ (8000818 <MX_GPIO_Init+0xa8>)
 80007e8:	f003 f882 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4619      	mov	r1, r3
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0xa8>)
 8000806:	f002 fecb 	bl	80035a0 <HAL_GPIO_Init>

}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58024400 	.word	0x58024400
 8000818:	58020000 	.word	0x58020000

0800081c <check_signature_magic_number_app_1>:
    		return false;
    	}
    }
    return true;
}// User app want to jump to bootloader
bool check_signature_magic_number_app_1(){
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; i++){
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e014      	b.n	8000852 <check_signature_magic_number_app_1+0x36>
    	if(SIGNATURE_FLAG_APP1_P[i] != expected_magic_number[i]){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	00da      	lsls	r2, r3, #3
 800082c:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <check_signature_magic_number_app_1+0x4c>)
 800082e:	4413      	add	r3, r2
 8000830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000834:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <check_signature_magic_number_app_1+0x50>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	4413      	add	r3, r2
 800083c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000840:	4299      	cmp	r1, r3
 8000842:	bf08      	it	eq
 8000844:	4290      	cmpeq	r0, r2
 8000846:	d001      	beq.n	800084c <check_signature_magic_number_app_1+0x30>
    		return false;
 8000848:	2300      	movs	r3, #0
 800084a:	e006      	b.n	800085a <check_signature_magic_number_app_1+0x3e>
    for(int i = 0; i < 4; i++){
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3301      	adds	r3, #1
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b03      	cmp	r3, #3
 8000856:	dde7      	ble.n	8000828 <check_signature_magic_number_app_1+0xc>
    	}
    }
    return true;
 8000858:	2301      	movs	r3, #1
}// Check signature
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	080e0000 	.word	0x080e0000
 800086c:	24000000 	.word	0x24000000

08000870 <check_signature_magic_number_app_2>:
bool check_signature_magic_number_app_2(){
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; i++){
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	e014      	b.n	80008a6 <check_signature_magic_number_app_2+0x36>
    	if(SIGNATURE_FLAG_APP2_P[i] != expected_magic_number[i]){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	00da      	lsls	r2, r3, #3
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <check_signature_magic_number_app_2+0x4c>)
 8000882:	4413      	add	r3, r2
 8000884:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <check_signature_magic_number_app_2+0x50>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4413      	add	r3, r2
 8000890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000894:	4299      	cmp	r1, r3
 8000896:	bf08      	it	eq
 8000898:	4290      	cmpeq	r0, r2
 800089a:	d001      	beq.n	80008a0 <check_signature_magic_number_app_2+0x30>
    		return false;
 800089c:	2300      	movs	r3, #0
 800089e:	e006      	b.n	80008ae <check_signature_magic_number_app_2+0x3e>
    for(int i = 0; i < 4; i++){
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3301      	adds	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b03      	cmp	r3, #3
 80008aa:	dde7      	ble.n	800087c <check_signature_magic_number_app_2+0xc>
    	}
    }
    return true;
 80008ac:	2301      	movs	r3, #1
}//
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	080e0020 	.word	0x080e0020
 80008c0:	24000000 	.word	0x24000000

080008c4 <cal_flash_used_app_1>:
uint32_t cal_flash_used_app_1(void) {
 80008c4:	b4f0      	push	{r4, r5, r6, r7}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
    uint32_t count;
    __asm__ volatile (
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	4912      	ldr	r1, [pc, #72]	@ (8000918 <done+0x12>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <done+0x16>)

080008d2 <loop_start>:
 80008d2:	4291      	cmp	r1, r2
 80008d4:	da17      	bge.n	8000906 <done>
 80008d6:	f851 3b04 	ldr.w	r3, [r1], #4
 80008da:	f851 4b04 	ldr.w	r4, [r1], #4
 80008de:	f851 5b04 	ldr.w	r5, [r1], #4
 80008e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80008e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008ea:	d109      	bne.n	8000900 <inc>
 80008ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008f0:	d106      	bne.n	8000900 <inc>
 80008f2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80008f6:	d103      	bne.n	8000900 <inc>
 80008f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80008fc:	d100      	bne.n	8000900 <inc>
 80008fe:	e7e8      	b.n	80008d2 <loop_start>

08000900 <inc>:
 8000900:	f100 0001 	add.w	r0, r0, #1
 8000904:	e7e5      	b.n	80008d2 <loop_start>

08000906 <done>:
 8000906:	4684      	mov	ip, r0
 8000908:	4663      	mov	r3, ip
 800090a:	607b      	str	r3, [r7, #4]
        "mov %[out], r0\n"
        : [out] "=r" (count)
        :
        : "r0", "r1", "r2", "r3", "r4", "r5", "r6"
    );
    return count;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bcf0      	pop	{r4, r5, r6, r7}
 8000916:	4770      	bx	lr
 8000918:	08020000 	.word	0x08020000
 800091c:	0805ffff 	.word	0x0805ffff

08000920 <cal_flash_used_app_2>:

uint32_t cal_flash_used_app_2(void) {
 8000920:	b4f0      	push	{r4, r5, r6, r7}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
    uint32_t count;
    __asm__ volatile (
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4912      	ldr	r1, [pc, #72]	@ (8000974 <flash1_done+0x12>)
 800092c:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <flash1_done+0x16>)

0800092e <flash1_loop_start>:
 800092e:	4291      	cmp	r1, r2
 8000930:	da17      	bge.n	8000962 <flash1_done>
 8000932:	f851 3b04 	ldr.w	r3, [r1], #4
 8000936:	f851 4b04 	ldr.w	r4, [r1], #4
 800093a:	f851 5b04 	ldr.w	r5, [r1], #4
 800093e:	f851 6b04 	ldr.w	r6, [r1], #4
 8000942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000946:	d109      	bne.n	800095c <flash1_inc>
 8000948:	f1b4 3fff 	cmp.w	r4, #4294967295
 800094c:	d106      	bne.n	800095c <flash1_inc>
 800094e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8000952:	d103      	bne.n	800095c <flash1_inc>
 8000954:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000958:	d100      	bne.n	800095c <flash1_inc>
 800095a:	e7e8      	b.n	800092e <flash1_loop_start>

0800095c <flash1_inc>:
 800095c:	f100 0001 	add.w	r0, r0, #1
 8000960:	e7e5      	b.n	800092e <flash1_loop_start>

08000962 <flash1_done>:
 8000962:	4684      	mov	ip, r0
 8000964:	4663      	mov	r3, ip
 8000966:	607b      	str	r3, [r7, #4]
        : [out] "=r" (count)
        :
        : "r0", "r1", "r2", "r3", "r4", "r5", "r6"
    );

    return count;
 8000968:	687b      	ldr	r3, [r7, #4]
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bcf0      	pop	{r4, r5, r6, r7}
 8000972:	4770      	bx	lr
 8000974:	08060000 	.word	0x08060000
 8000978:	0809ffff 	.word	0x0809ffff

0800097c <del_mem>:
int del_mem(uint8_t start, uint8_t number_of_sector){
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	460a      	mov	r2, r1
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	71bb      	strb	r3, [r7, #6]
	HAL_FLASH_Unlock();
 800098c:	f002 fca4 	bl	80032d8 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000998:	2320      	movs	r3, #32
 800099a:	61fb      	str	r3, [r7, #28]
    EraseInitStruct.Banks = FLASH_BANK_1;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
    EraseInitStruct.Sector = start;
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = number_of_sector;
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) == HAL_OK)
 80009a8:	f107 0208 	add.w	r2, r7, #8
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f002 fd20 	bl	80033f8 <HAL_FLASHEx_Erase>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <del_mem+0x4a>
    {
        // Erase failed
    	HAL_FLASH_Lock();
 80009be:	f002 fcad 	bl	800331c <HAL_FLASH_Lock>
    	return 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e002      	b.n	80009cc <del_mem+0x50>
    }
    else
    {
    	HAL_FLASH_Lock();
 80009c6:	f002 fca9 	bl	800331c <HAL_FLASH_Lock>
        return 0;
 80009ca:	2300      	movs	r3, #0
    }
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <clear_flag>:
void clear_flag(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	del_mem(FLASH_SECTOR_6, 1);
 80009d8:	2101      	movs	r1, #1
 80009da:	2006      	movs	r0, #6
 80009dc:	f7ff ffce 	bl	800097c <del_mem>
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <bl_jump_to_code_uart>:
void bl_jump_to_code_uart(uint8_t *buffer){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	uint32_t len = buffer[0] + 1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
	uint32_t crc_host = crc32(buffer, len - 4);
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3b04      	subs	r3, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fea8 	bl	8000750 <crc32>
 8000a00:	6138      	str	r0, [r7, #16]
	uint32_t crc_recv = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
	memcpy(&crc_recv, &buffer[len - 4], 4);
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	3b04      	subs	r3, #4
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60bb      	str	r3, [r7, #8]

	if (crc_host == crc_recv) {
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d00c      	beq.n	8000a34 <bl_jump_to_code_uart+0x50>
//			const char *msg = "Signature failed \r\n";
//			HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
//			return;
//		}
	} else {
		const char *msg = "CRC failed\r\n";
 8000a1a:	4b08      	ldr	r3, [pc, #32]	@ (8000a3c <bl_jump_to_code_uart+0x58>)
 8000a1c:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff fc76 	bl	8000310 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2c:	68f9      	ldr	r1, [r7, #12]
 8000a2e:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <bl_jump_to_code_uart+0x5c>)
 8000a30:	f006 f8e0 	bl	8006bf4 <HAL_UART_Transmit>
	}

}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08016160 	.word	0x08016160
 8000a40:	24000294 	.word	0x24000294

08000a44 <bl_check_connect_uart>:

void bl_check_connect_uart(uint8_t *buffer) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	uint32_t len = buffer[0] + 1;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	3301      	adds	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
	uint32_t crc_host = crc32(buffer, len - 4);
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	3b04      	subs	r3, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff fe78 	bl	8000750 <crc32>
 8000a60:	61b8      	str	r0, [r7, #24]
	uint32_t crc_recv = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
	memcpy(&crc_recv, &buffer[len - 4], 4);
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b04      	subs	r3, #4
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]

	if (crc_host == crc_recv) {
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d10d      	bne.n	8000a96 <bl_check_connect_uart+0x52>
		const char *msg = "CONNECTED\r\n";
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <bl_check_connect_uart+0x74>)
 8000a7c:	613b      	str	r3, [r7, #16]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a7e:	6938      	ldr	r0, [r7, #16]
 8000a80:	f7ff fc46 	bl	8000310 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8c:	6939      	ldr	r1, [r7, #16]
 8000a8e:	480b      	ldr	r0, [pc, #44]	@ (8000abc <bl_check_connect_uart+0x78>)
 8000a90:	f006 f8b0 	bl	8006bf4 <HAL_UART_Transmit>
	} else {
		const char *msg = "CRC failed\r\n";
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
	}
}
 8000a94:	e00c      	b.n	8000ab0 <bl_check_connect_uart+0x6c>
		const char *msg = "CRC failed\r\n";
 8000a96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <bl_check_connect_uart+0x7c>)
 8000a98:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000a9a:	6978      	ldr	r0, [r7, #20]
 8000a9c:	f7ff fc38 	bl	8000310 <strlen>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	6979      	ldr	r1, [r7, #20]
 8000aaa:	4804      	ldr	r0, [pc, #16]	@ (8000abc <bl_check_connect_uart+0x78>)
 8000aac:	f006 f8a2 	bl	8006bf4 <HAL_UART_Transmit>
}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	08016170 	.word	0x08016170
 8000abc:	24000294 	.word	0x24000294
 8000ac0:	08016160 	.word	0x08016160

08000ac4 <bl_reset_metadata_state>:
static uint32_t current_verified_app_base = 0;
void bl_reset_metadata_state(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
    current_verified_app_base = 0;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	@ (8000ad8 <bl_reset_metadata_state+0x14>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	240001f4 	.word	0x240001f4

08000adc <bl_write_mem_uart>:
}__attribute__((packed, aligned(32))) FirmwareMetadata;
typedef struct{
	uint32_t run_ok_flag;
	uint32_t retry_counter;
}__attribute__((packed, aligned(32))) FirmwareUserStatus;
void bl_write_mem_uart(uint8_t *buffer) {
 8000adc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ae0:	f5ad 6da7 	sub.w	sp, sp, #1336	@ 0x538
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000aea:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000aee:	6018      	str	r0, [r3, #0]
 8000af0:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000af4:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8000af8:	331f      	adds	r3, #31
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	015c      	lsls	r4, r3, #5
	FirmwareMetadata F;
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
 8000afe:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 8000b02:	4618      	mov	r0, r3
 8000b04:	f008 f9e8 	bl	8008ed8 <mbedtls_aes_init>
    mbedtls_aes_setkey_dec(&aes, aes_key, 128);
 8000b08:	f507 737d 	add.w	r3, r7, #1012	@ 0x3f4
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	49d2      	ldr	r1, [pc, #840]	@ (8000e58 <bl_write_mem_uart+0x37c>)
 8000b10:	4618      	mov	r0, r3
 8000b12:	f008 fbe1 	bl	80092d8 <mbedtls_aes_setkey_dec>

    uint32_t command_len = buffer[0] + 1;
 8000b16:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b1a:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    uint32_t crc_host = crc32(buffer, command_len - 4);
 8000b28:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8000b2c:	1f1a      	subs	r2, r3, #4
 8000b2e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b32:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b36:	4611      	mov	r1, r2
 8000b38:	6818      	ldr	r0, [r3, #0]
 8000b3a:	f7ff fe09 	bl	8000750 <crc32>
 8000b3e:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
    uint32_t crc_recv;
    memcpy(&crc_recv, &buffer[command_len - 4], 4);
 8000b42:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8000b46:	3b04      	subs	r3, #4
 8000b48:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8000b4c:	f2a2 522c 	subw	r2, r2, #1324	@ 0x52c
 8000b50:	6812      	ldr	r2, [r2, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	461a      	mov	r2, r3
 8000b58:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000b60:	601a      	str	r2, [r3, #0]

    if (crc_host != crc_recv) {
 8000b62:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b66:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d007      	beq.n	8000b84 <bl_write_mem_uart+0xa8>
        HAL_UART_Transmit(&huart1, (uint8_t *)"CRC failed\r\n", 12, HAL_MAX_DELAY);
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
 8000b78:	220c      	movs	r2, #12
 8000b7a:	49b8      	ldr	r1, [pc, #736]	@ (8000e5c <bl_write_mem_uart+0x380>)
 8000b7c:	48b8      	ldr	r0, [pc, #736]	@ (8000e60 <bl_write_mem_uart+0x384>)
 8000b7e:	f006 f839 	bl	8006bf4 <HAL_UART_Transmit>
        return;
 8000b82:	e27f      	b.n	8001084 <bl_write_mem_uart+0x5a8>
    }

    uint32_t address;
    uint8_t size_firmware;
    memcpy(&address, &buffer[2], 4);
 8000b84:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b88:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3302      	adds	r3, #2
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000b98:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000b9c:	601a      	str	r2, [r3, #0]
    memcpy(&size_firmware, &buffer[6], 1);
 8000b9e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ba2:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3306      	adds	r3, #6
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bb0:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000bb4:	701a      	strb	r2, [r3, #0]

    uint8_t *firmware = &buffer[7];
 8000bb6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bba:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3307      	adds	r3, #7
 8000bc2:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518

    if (address == APP1_ADDR_START || address == APP2_ADDR_START) {//First chunk, check metedata
 8000bc6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4aa4      	ldr	r2, [pc, #656]	@ (8000e64 <bl_write_mem_uart+0x388>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d008      	beq.n	8000be8 <bl_write_mem_uart+0x10c>
 8000bd6:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4aa1      	ldr	r2, [pc, #644]	@ (8000e68 <bl_write_mem_uart+0x38c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	f040 815f 	bne.w	8000ea6 <bl_write_mem_uart+0x3ca>
        uint32_t version;
        uint32_t total_firmware_length;
        memcpy(&version, &firmware[0], 4);
 8000be8:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000bf4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8000bf8:	601a      	str	r2, [r3, #0]
        memcpy(&total_firmware_length, &firmware[4], 4);
 8000bfa:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000bfe:	3304      	adds	r3, #4
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c08:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000c0c:	601a      	str	r2, [r3, #0]

        if (total_firmware_length > 256000) {
 8000c0e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c12:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f5b3 3f7a 	cmp.w	r3, #256000	@ 0x3e800
 8000c1c:	d909      	bls.n	8000c32 <bl_write_mem_uart+0x156>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ FIRMWARE TOO LARGE\r\n", 24, HAL_MAX_DELAY);
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c22:	2218      	movs	r2, #24
 8000c24:	4991      	ldr	r1, [pc, #580]	@ (8000e6c <bl_write_mem_uart+0x390>)
 8000c26:	488e      	ldr	r0, [pc, #568]	@ (8000e60 <bl_write_mem_uart+0x384>)
 8000c28:	f005 ffe4 	bl	8006bf4 <HAL_UART_Transmit>
            bl_reset_metadata_state();
 8000c2c:	f7ff ff4a 	bl	8000ac4 <bl_reset_metadata_state>
            return;
 8000c30:	e228      	b.n	8001084 <bl_write_mem_uart+0x5a8>
        }

        // 👉 Lấy ECC signature
        uint8_t *sig = &firmware[8];  // 64 bytes //ECC
 8000c32:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000c36:	3308      	adds	r3, #8
 8000c38:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
        uint8_t version_data[8];
        memcpy(version_data, &firmware[0], 8);
 8000c3c:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c40:	f5a3 7346 	sub.w	r3, r3, #792	@ 0x318
 8000c44:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 8000c48:	6810      	ldr	r0, [r2, #0]
 8000c4a:	6851      	ldr	r1, [r2, #4]
 8000c4c:	c303      	stmia	r3!, {r0, r1}
        uint32_t version_ex;
        memcpy(&version_ex, &firmware[0], 4);
 8000c4e:	f8d7 3518 	ldr.w	r3, [r7, #1304]	@ 0x518
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c5a:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c5e:	601a      	str	r2, [r3, #0]

        F.address = address + 224;
 8000c60:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c64:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	33e0      	adds	r3, #224	@ 0xe0
 8000c6c:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
        F.version = version_ex;
 8000c70:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c74:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0

        uint64_t *flag_ptr = (uint64_t *)VERSION_OK_FLAG;
 8000c7e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e70 <bl_write_mem_uart+0x394>)
 8000c80:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
        while (*flag_ptr != 0xFFFFFFFFFFFFFFFFULL) {
 8000c84:	e01c      	b.n	8000cc0 <bl_write_mem_uart+0x1e4>
            uint32_t stored_version = *(uint32_t *)flag_ptr;
 8000c86:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
            if (version_ex <= stored_version) {
 8000c90:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000c94:	f5a3 7347 	sub.w	r3, r3, #796	@ 0x31c
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f8d7 250c 	ldr.w	r2, [r7, #1292]	@ 0x50c
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d309      	bcc.n	8000cb6 <bl_write_mem_uart+0x1da>
                HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Version is too old\r\n", 24, HAL_MAX_DELAY);
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	2218      	movs	r2, #24
 8000ca8:	4972      	ldr	r1, [pc, #456]	@ (8000e74 <bl_write_mem_uart+0x398>)
 8000caa:	486d      	ldr	r0, [pc, #436]	@ (8000e60 <bl_write_mem_uart+0x384>)
 8000cac:	f005 ffa2 	bl	8006bf4 <HAL_UART_Transmit>
                bl_reset_metadata_state();
 8000cb0:	f7ff ff08 	bl	8000ac4 <bl_reset_metadata_state>
                return;
 8000cb4:	e1e6      	b.n	8001084 <bl_write_mem_uart+0x5a8>
            }
            flag_ptr += 4;
 8000cb6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8000cba:	3320      	adds	r3, #32
 8000cbc:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
        while (*flag_ptr != 0xFFFFFFFFFFFFFFFFULL) {
 8000cc0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ccc:	bf08      	it	eq
 8000cce:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000cd2:	d1d8      	bne.n	8000c86 <bl_write_mem_uart+0x1aa>
        }
        uint8_t hash[32];
        mbedtls_sha256(version_data, 8, hash, 0); // 0 = SHA256
 8000cd4:	f107 020c 	add.w	r2, r7, #12
 8000cd8:	f507 7006 	add.w	r0, r7, #536	@ 0x218
 8000cdc:	2300      	movs	r3, #0
 8000cde:	2108      	movs	r1, #8
 8000ce0:	f014 fd4c 	bl	801577c <mbedtls_sha256>

        mbedtls_ecdsa_context ctx;
        mbedtls_ecdsa_init(&ctx);
 8000ce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f00d f91f 	bl	800df2c <mbedtls_ecdsa_init>
        mbedtls_ecp_group_load(&ctx.grp, MBEDTLS_ECP_DP_SECP256R1);
 8000cee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f010 fb39 	bl	801136c <mbedtls_ecp_group_load>
        mbedtls_mpi_read_binary(&ctx.Q.X, public_key, 32);
 8000cfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cfe:	3388      	adds	r3, #136	@ 0x88
 8000d00:	2220      	movs	r2, #32
 8000d02:	495d      	ldr	r1, [pc, #372]	@ (8000e78 <bl_write_mem_uart+0x39c>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f009 ff5b 	bl	800abc0 <mbedtls_mpi_read_binary>
        mbedtls_mpi_read_binary(&ctx.Q.Y, public_key + 32, 32);
 8000d0a:	495c      	ldr	r1, [pc, #368]	@ (8000e7c <bl_write_mem_uart+0x3a0>)
 8000d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d10:	3394      	adds	r3, #148	@ 0x94
 8000d12:	2220      	movs	r2, #32
 8000d14:	4618      	mov	r0, r3
 8000d16:	f009 ff53 	bl	800abc0 <mbedtls_mpi_read_binary>
        mbedtls_mpi_lset(&ctx.Q.Z, 1);
 8000d1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d1e:	33a0      	adds	r3, #160	@ 0xa0
 8000d20:	2101      	movs	r1, #1
 8000d22:	4618      	mov	r0, r3
 8000d24:	f009 fcb8 	bl	800a698 <mbedtls_mpi_lset>

        mbedtls_mpi r, s;
        mbedtls_mpi_init(&r); mbedtls_mpi_init(&s);
 8000d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 fa72 	bl	800a216 <mbedtls_mpi_init>
 8000d32:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d36:	4618      	mov	r0, r3
 8000d38:	f009 fa6d 	bl	800a216 <mbedtls_mpi_init>
        mbedtls_mpi_read_binary(&r, sig, 32);
 8000d3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d40:	2220      	movs	r2, #32
 8000d42:	f8d7 1514 	ldr.w	r1, [r7, #1300]	@ 0x514
 8000d46:	4618      	mov	r0, r3
 8000d48:	f009 ff3a 	bl	800abc0 <mbedtls_mpi_read_binary>
        mbedtls_mpi_read_binary(&s, sig + 32, 32);
 8000d4c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 8000d50:	f103 0120 	add.w	r1, r3, #32
 8000d54:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d58:	2220      	movs	r2, #32
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f009 ff30 	bl	800abc0 <mbedtls_mpi_read_binary>

        int ret = mbedtls_ecdsa_verify(&ctx.grp, hash, 32, &ctx.Q, &r, &s);
 8000d60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d64:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 8000d68:	f107 010c 	add.w	r1, r7, #12
 8000d6c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000d70:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	2220      	movs	r2, #32
 8000d80:	f00d f8bc 	bl	800defc <mbedtls_ecdsa_verify>
 8000d84:	f8c7 0510 	str.w	r0, [r7, #1296]	@ 0x510

        mbedtls_mpi_free(&r); mbedtls_mpi_free(&s);
 8000d88:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f009 fa55 	bl	800a23c <mbedtls_mpi_free>
 8000d92:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 8000d96:	4618      	mov	r0, r3
 8000d98:	f009 fa50 	bl	800a23c <mbedtls_mpi_free>
        mbedtls_ecdsa_free(&ctx);
 8000d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da0:	4618      	mov	r0, r3
 8000da2:	f00d f8ce 	bl	800df42 <mbedtls_ecdsa_free>

        if (ret != 0) {
 8000da6:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d009      	beq.n	8000dc2 <bl_write_mem_uart+0x2e6>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Metadata Signature FAIL\r\n", 28, HAL_MAX_DELAY);
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	221c      	movs	r2, #28
 8000db4:	4932      	ldr	r1, [pc, #200]	@ (8000e80 <bl_write_mem_uart+0x3a4>)
 8000db6:	482a      	ldr	r0, [pc, #168]	@ (8000e60 <bl_write_mem_uart+0x384>)
 8000db8:	f005 ff1c 	bl	8006bf4 <HAL_UART_Transmit>
            bl_reset_metadata_state();
 8000dbc:	f7ff fe82 	bl	8000ac4 <bl_reset_metadata_state>
            return;
 8000dc0:	e160      	b.n	8001084 <bl_write_mem_uart+0x5a8>
        }
        uint64_t version_block[8] __attribute__((aligned(32))); // 64 bytes
        memset(version_block, 0xFF, sizeof(version_block));
 8000dc2:	2240      	movs	r2, #64	@ 0x40
 8000dc4:	21ff      	movs	r1, #255	@ 0xff
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f014 fe08 	bl	80159dc <memset>
        memcpy(version_block, &F, 8); // chỉ lưu version
 8000dcc:	e9d4 2338 	ldrd	r2, r3, [r4, #224]	@ 0xe0
 8000dd0:	e9c4 2300 	strd	r2, r3, [r4]

        HAL_FLASH_Unlock();
 8000dd4:	f002 fa80 	bl	80032d8 <HAL_FLASH_Unlock>
        uint32_t dummy_flag = VERSION_OK_FLAG; //0x08020000
 8000dd8:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <bl_write_mem_uart+0x394>)
 8000dda:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
        uint64_t temp;
        while (1) {
            memcpy(&temp, dummy_flag, sizeof(temp));
 8000dde:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8000de2:	f8d3 8000 	ldr.w	r8, [r3]
 8000de6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8000dea:	4642      	mov	r2, r8
 8000dec:	464b      	mov	r3, r9
 8000dee:	e9c7 237c 	strd	r2, r3, [r7, #496]	@ 0x1f0
            if (temp == 0xFFFFFFFFFFFFFFFFULL) break;
 8000df2:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8000df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfa:	bf08      	it	eq
 8000dfc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000e00:	d005      	beq.n	8000e0e <bl_write_mem_uart+0x332>
            dummy_flag += 32;
 8000e02:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8000e06:	3320      	adds	r3, #32
 8000e08:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
            memcpy(&temp, dummy_flag, sizeof(temp));
 8000e0c:	e7e7      	b.n	8000dde <bl_write_mem_uart+0x302>
            if (temp == 0xFFFFFFFFFFFFFFFFULL) break;
 8000e0e:	bf00      	nop
        }
        if (((uint32_t)dummy_flag % 32) != 0) {
 8000e10:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8000e14:	f003 031f 	and.w	r3, r3, #31
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d007      	beq.n	8000e2c <bl_write_mem_uart+0x350>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Addr not aligned\r\n", 22, HAL_MAX_DELAY);
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	2216      	movs	r2, #22
 8000e22:	4918      	ldr	r1, [pc, #96]	@ (8000e84 <bl_write_mem_uart+0x3a8>)
 8000e24:	480e      	ldr	r0, [pc, #56]	@ (8000e60 <bl_write_mem_uart+0x384>)
 8000e26:	f005 fee5 	bl	8006bf4 <HAL_UART_Transmit>
            return;
 8000e2a:	e12b      	b.n	8001084 <bl_write_mem_uart+0x5a8>
        }

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD , dummy_flag , (uint32_t)&version_block) != HAL_OK) {
 8000e2c:	4623      	mov	r3, r4
 8000e2e:	461a      	mov	r2, r3
 8000e30:	f8d7 1528 	ldr.w	r1, [r7, #1320]	@ 0x528
 8000e34:	2001      	movs	r0, #1
 8000e36:	f002 f9df 	bl	80031f8 <HAL_FLASH_Program>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d025      	beq.n	8000e8c <bl_write_mem_uart+0x3b0>
			HAL_FLASH_Lock();
 8000e40:	f002 fa6c 	bl	800331c <HAL_FLASH_Lock>
			HAL_UART_Transmit(&huart1, (uint8_t *)"WRITE ERROR\r\n", 14, HAL_MAX_DELAY);
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295
 8000e48:	220e      	movs	r2, #14
 8000e4a:	490f      	ldr	r1, [pc, #60]	@ (8000e88 <bl_write_mem_uart+0x3ac>)
 8000e4c:	4804      	ldr	r0, [pc, #16]	@ (8000e60 <bl_write_mem_uart+0x384>)
 8000e4e:	f005 fed1 	bl	8006bf4 <HAL_UART_Transmit>
			bl_reset_metadata_state();
 8000e52:	f7ff fe37 	bl	8000ac4 <bl_reset_metadata_state>
			return;
 8000e56:	e115      	b.n	8001084 <bl_write_mem_uart+0x5a8>
 8000e58:	08016980 	.word	0x08016980
 8000e5c:	08016160 	.word	0x08016160
 8000e60:	24000294 	.word	0x24000294
 8000e64:	08020000 	.word	0x08020000
 8000e68:	08060000 	.word	0x08060000
 8000e6c:	0801617c 	.word	0x0801617c
 8000e70:	080a0000 	.word	0x080a0000
 8000e74:	08016198 	.word	0x08016198
 8000e78:	08016940 	.word	0x08016940
 8000e7c:	08016960 	.word	0x08016960
 8000e80:	080161b4 	.word	0x080161b4
 8000e84:	080161d4 	.word	0x080161d4
 8000e88:	080161ec 	.word	0x080161ec
		}
	    HAL_FLASH_Lock();
 8000e8c:	f002 fa46 	bl	800331c <HAL_FLASH_Lock>
	    current_verified_app_base = 1;
 8000e90:	4b7f      	ldr	r3, [pc, #508]	@ (8001090 <bl_write_mem_uart+0x5b4>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t *)"✅ Metadata Signature OK\r\n", 26, HAL_MAX_DELAY);
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	221a      	movs	r2, #26
 8000e9c:	497d      	ldr	r1, [pc, #500]	@ (8001094 <bl_write_mem_uart+0x5b8>)
 8000e9e:	487e      	ldr	r0, [pc, #504]	@ (8001098 <bl_write_mem_uart+0x5bc>)
 8000ea0:	f005 fea8 	bl	8006bf4 <HAL_UART_Transmit>

        return;
 8000ea4:	e0ee      	b.n	8001084 <bl_write_mem_uart+0x5a8>
    }

    if(current_verified_app_base != 1){
 8000ea6:	4b7a      	ldr	r3, [pc, #488]	@ (8001090 <bl_write_mem_uart+0x5b4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d007      	beq.n	8000ebe <bl_write_mem_uart+0x3e2>
    	HAL_UART_Transmit(&huart1, (uint8_t *)"ECC of version is FAILED\r\n", 30, HAL_MAX_DELAY);
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	221e      	movs	r2, #30
 8000eb4:	4979      	ldr	r1, [pc, #484]	@ (800109c <bl_write_mem_uart+0x5c0>)
 8000eb6:	4878      	ldr	r0, [pc, #480]	@ (8001098 <bl_write_mem_uart+0x5bc>)
 8000eb8:	f005 fe9c 	bl	8006bf4 <HAL_UART_Transmit>
    	return;
 8000ebc:	e0e2      	b.n	8001084 <bl_write_mem_uart+0x5a8>
    }
	if (address < 0x08000000 || address + size_firmware > 0x08200000 || address % 32 != 0) {
 8000ebe:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ec2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000ecc:	d317      	bcc.n	8000efe <bl_write_mem_uart+0x422>
 8000ece:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ed2:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ede:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f1b3 6f02 	cmp.w	r3, #136314880	@ 0x8200000
 8000eea:	d808      	bhi.n	8000efe <bl_write_mem_uart+0x422>
 8000eec:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ef0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 031f 	and.w	r3, r3, #31
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <bl_write_mem_uart+0x432>
		HAL_UART_Transmit(&huart1, (uint8_t *)"INVALID ADDRESS\r\n", 17, HAL_MAX_DELAY);
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	2211      	movs	r2, #17
 8000f04:	4966      	ldr	r1, [pc, #408]	@ (80010a0 <bl_write_mem_uart+0x5c4>)
 8000f06:	4864      	ldr	r0, [pc, #400]	@ (8001098 <bl_write_mem_uart+0x5bc>)
 8000f08:	f005 fe74 	bl	8006bf4 <HAL_UART_Transmit>
		return;
 8000f0c:	e0ba      	b.n	8001084 <bl_write_mem_uart+0x5a8>
	}
	if (address == APP1_ADDR_START + 224 || address == APP2_ADDR_START + 224) {
 8000f0e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000f12:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a62      	ldr	r2, [pc, #392]	@ (80010a4 <bl_write_mem_uart+0x5c8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d007      	beq.n	8000f2e <bl_write_mem_uart+0x452>
 8000f1e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000f22:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a5f      	ldr	r2, [pc, #380]	@ (80010a8 <bl_write_mem_uart+0x5cc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d105      	bne.n	8000f3a <bl_write_mem_uart+0x45e>
	    memcpy(iv, AES_IV, 16);  // reset IV ở chunk đầu tiên, bởi vì khi ghi liên tiếp app có thể app 2 sẽ lấy giá trị IV còn tổn lại ở lần ghi app 1
 8000f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80010ac <bl_write_mem_uart+0x5d0>)
 8000f30:	4b5f      	ldr	r3, [pc, #380]	@ (80010b0 <bl_write_mem_uart+0x5d4>)
 8000f32:	4615      	mov	r5, r2
 8000f34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f36:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	}//AES-CBC là chế độ mã hóa có trạng thái, mỗi chunk phụ thuộc vào IV trước đó.

	uint8_t padded_input[224];
	uint8_t decrypted_firmware[224];
	memset(padded_input, 0xFF, sizeof(padded_input));
 8000f3a:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000f3e:	22e0      	movs	r2, #224	@ 0xe0
 8000f40:	21ff      	movs	r1, #255	@ 0xff
 8000f42:	4618      	mov	r0, r3
 8000f44:	f014 fd4a 	bl	80159dc <memset>
	memcpy(padded_input, firmware, size_firmware);
 8000f48:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000f4c:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000f58:	f8d7 1518 	ldr.w	r1, [r7, #1304]	@ 0x518
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f014 fd81 	bl	8015a64 <memcpy>


	if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, 224, iv, padded_input, decrypted_firmware)) {
 8000f62:	f507 707d 	add.w	r0, r7, #1012	@ 0x3f4
 8000f66:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	4b4e      	ldr	r3, [pc, #312]	@ (80010ac <bl_write_mem_uart+0x5d0>)
 8000f74:	22e0      	movs	r2, #224	@ 0xe0
 8000f76:	2100      	movs	r1, #0
 8000f78:	f009 f8bd 	bl	800a0f6 <mbedtls_aes_crypt_cbc>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <bl_write_mem_uart+0x4b6>
		HAL_UART_Transmit(&huart1, (uint8_t *)"DECRYPT FAILED\r\n", 17, HAL_MAX_DELAY);
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	2211      	movs	r2, #17
 8000f88:	494a      	ldr	r1, [pc, #296]	@ (80010b4 <bl_write_mem_uart+0x5d8>)
 8000f8a:	4843      	ldr	r0, [pc, #268]	@ (8001098 <bl_write_mem_uart+0x5bc>)
 8000f8c:	f005 fe32 	bl	8006bf4 <HAL_UART_Transmit>
		return;
 8000f90:	e078      	b.n	8001084 <bl_write_mem_uart+0x5a8>
	}
	memcpy(iv, &padded_input[224 - 16], 16);
 8000f92:	4a46      	ldr	r2, [pc, #280]	@ (80010ac <bl_write_mem_uart+0x5d0>)
 8000f94:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000f98:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8000f9c:	4615      	mov	r5, r2
 8000f9e:	33d0      	adds	r3, #208	@ 0xd0
 8000fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fa2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa6:	f3bf 8f4f 	dsb	sy
}
 8000faa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fac:	f3bf 8f6f 	isb	sy
}
 8000fb0:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000fb2:	4b41      	ldr	r3, [pc, #260]	@ (80010b8 <bl_write_mem_uart+0x5dc>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	4a40      	ldr	r2, [pc, #256]	@ (80010b8 <bl_write_mem_uart+0x5dc>)
 8000fb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000fbc:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80010b8 <bl_write_mem_uart+0x5dc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc6:	f3bf 8f4f 	dsb	sy
}
 8000fca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fcc:	f3bf 8f6f 	isb	sy
}
 8000fd0:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000fd2:	bf00      	nop
	 * decrypt
	 */
	SCB_DisableICache();
	// SCB_DisableDCache();

	if (HAL_FLASH_Unlock() != HAL_OK) {
 8000fd4:	f002 f980 	bl	80032d8 <HAL_FLASH_Unlock>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d007      	beq.n	8000fee <bl_write_mem_uart+0x512>
		HAL_UART_Transmit(&huart1, (uint8_t *)"UNLOCK ERROR\r\n", 15, HAL_MAX_DELAY);
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	4935      	ldr	r1, [pc, #212]	@ (80010bc <bl_write_mem_uart+0x5e0>)
 8000fe6:	482c      	ldr	r0, [pc, #176]	@ (8001098 <bl_write_mem_uart+0x5bc>)
 8000fe8:	f005 fe04 	bl	8006bf4 <HAL_UART_Transmit>
		return;
 8000fec:	e04a      	b.n	8001084 <bl_write_mem_uart+0x5a8>
	}

	uint64_t val[28] __attribute__((aligned(32)));
	memset(val, 0xFF, sizeof(val));
 8000fee:	22e0      	movs	r2, #224	@ 0xe0
 8000ff0:	21ff      	movs	r1, #255	@ 0xff
 8000ff2:	4620      	mov	r0, r4
 8000ff4:	f014 fcf2 	bl	80159dc <memset>
	memcpy(val, decrypted_firmware, size_firmware);
 8000ff8:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ffc:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8001008:	4619      	mov	r1, r3
 800100a:	4620      	mov	r0, r4
 800100c:	f014 fd2a 	bl	8015a64 <memcpy>

	for (uint32_t offset = 0; offset < size_firmware; offset += 32) {
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8001016:	e022      	b.n	800105e <bl_write_mem_uart+0x582>
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, address + offset, (uint32_t)&val[offset / 8]) != HAL_OK) {
 8001018:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800101c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001026:	18d1      	adds	r1, r2, r3
 8001028:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800102c:	08db      	lsrs	r3, r3, #3
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4423      	add	r3, r4
 8001032:	461a      	mov	r2, r3
 8001034:	2001      	movs	r0, #1
 8001036:	f002 f8df 	bl	80031f8 <HAL_FLASH_Program>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d009      	beq.n	8001054 <bl_write_mem_uart+0x578>
			HAL_FLASH_Lock();
 8001040:	f002 f96c 	bl	800331c <HAL_FLASH_Lock>
			HAL_UART_Transmit(&huart1, (uint8_t *)"WRITE ERROR\r\n", 14, HAL_MAX_DELAY);
 8001044:	f04f 33ff 	mov.w	r3, #4294967295
 8001048:	220e      	movs	r2, #14
 800104a:	491d      	ldr	r1, [pc, #116]	@ (80010c0 <bl_write_mem_uart+0x5e4>)
 800104c:	4812      	ldr	r0, [pc, #72]	@ (8001098 <bl_write_mem_uart+0x5bc>)
 800104e:	f005 fdd1 	bl	8006bf4 <HAL_UART_Transmit>
			return;
 8001052:	e017      	b.n	8001084 <bl_write_mem_uart+0x5a8>
	for (uint32_t offset = 0; offset < size_firmware; offset += 32) {
 8001054:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8001058:	3320      	adds	r3, #32
 800105a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 800105e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8001062:	f2a3 1345 	subw	r3, r3, #325	@ 0x145
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800106e:	4293      	cmp	r3, r2
 8001070:	d3d2      	bcc.n	8001018 <bl_write_mem_uart+0x53c>
		}
	}

	HAL_FLASH_Lock();
 8001072:	f002 f953 	bl	800331c <HAL_FLASH_Lock>

	HAL_UART_Transmit(&huart1, (uint8_t *)"WRITE OK\r\n", 10, HAL_MAX_DELAY);
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	220a      	movs	r2, #10
 800107c:	4911      	ldr	r1, [pc, #68]	@ (80010c4 <bl_write_mem_uart+0x5e8>)
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <bl_write_mem_uart+0x5bc>)
 8001080:	f005 fdb8 	bl	8006bf4 <HAL_UART_Transmit>

}
 8001084:	f507 67a6 	add.w	r7, r7, #1328	@ 0x530
 8001088:	46bd      	mov	sp, r7
 800108a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800108e:	bf00      	nop
 8001090:	240001f4 	.word	0x240001f4
 8001094:	080161fc 	.word	0x080161fc
 8001098:	24000294 	.word	0x24000294
 800109c:	08016218 	.word	0x08016218
 80010a0:	08016234 	.word	0x08016234
 80010a4:	080200e0 	.word	0x080200e0
 80010a8:	080600e0 	.word	0x080600e0
 80010ac:	240001e4 	.word	0x240001e4
 80010b0:	08016990 	.word	0x08016990
 80010b4:	08016248 	.word	0x08016248
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	0801625c 	.word	0x0801625c
 80010c0:	080161ec 	.word	0x080161ec
 80010c4:	0801626c 	.word	0x0801626c

080010c8 <bl_del_mem>:
void bl_del_mem(uint8_t* buffer){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	@ 0x30
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    uint32_t command_len = buffer[0] + 1;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t host_crc = crc32(buffer, command_len - 4);
 80010d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010da:	3b04      	subs	r3, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fb36 	bl	8000750 <crc32>
 80010e4:	62b8      	str	r0, [r7, #40]	@ 0x28
    uint32_t crc_recv = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
    memcpy(&crc_recv, &buffer[command_len - 4], 4);
 80010ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ec:	3b04      	subs	r3, #4
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	613b      	str	r3, [r7, #16]
    if(host_crc == crc_recv){
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d171      	bne.n	80011e2 <bl_del_mem+0x11a>
    	uint32_t addr = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
    	memcpy(&addr, &buffer[2], 4);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3302      	adds	r3, #2
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]

        if (addr != APP1_ADDR_START && addr != APP2_ADDR_START) {
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4a3d      	ldr	r2, [pc, #244]	@ (8001204 <bl_del_mem+0x13c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00b      	beq.n	800112a <bl_del_mem+0x62>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4a3c      	ldr	r2, [pc, #240]	@ (8001208 <bl_del_mem+0x140>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <bl_del_mem+0x62>
            HAL_UART_Transmit(&huart1, (uint8_t *)"INVALID ERASE ADDR\r\n", 21, HAL_MAX_DELAY);
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	2215      	movs	r2, #21
 8001120:	493a      	ldr	r1, [pc, #232]	@ (800120c <bl_del_mem+0x144>)
 8001122:	483b      	ldr	r0, [pc, #236]	@ (8001210 <bl_del_mem+0x148>)
 8001124:	f005 fd66 	bl	8006bf4 <HAL_UART_Transmit>
            return;
 8001128:	e069      	b.n	80011fe <bl_del_mem+0x136>
        }
        else if(addr == APP1_ADDR_START){
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4a35      	ldr	r2, [pc, #212]	@ (8001204 <bl_del_mem+0x13c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d129      	bne.n	8001186 <bl_del_mem+0xbe>
        	if(del_mem(FLASH_SECTOR_1, 2) == 1 && del_mem(FLASH_SECTOR_7, 1) == 1 ){
 8001132:	2102      	movs	r1, #2
 8001134:	2001      	movs	r0, #1
 8001136:	f7ff fc21 	bl	800097c <del_mem>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d114      	bne.n	800116a <bl_del_mem+0xa2>
 8001140:	2101      	movs	r1, #1
 8001142:	2007      	movs	r0, #7
 8001144:	f7ff fc1a 	bl	800097c <del_mem>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d10d      	bne.n	800116a <bl_del_mem+0xa2>
            	const char *msg = "DELETE APP 1 SUCCESSFULLY\r\n";
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <bl_del_mem+0x14c>)
 8001150:	61bb      	str	r3, [r7, #24]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001152:	69b8      	ldr	r0, [r7, #24]
 8001154:	f7ff f8dc 	bl	8000310 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	69b9      	ldr	r1, [r7, #24]
 8001162:	482b      	ldr	r0, [pc, #172]	@ (8001210 <bl_del_mem+0x148>)
 8001164:	f005 fd46 	bl	8006bf4 <HAL_UART_Transmit>
            	return;
 8001168:	e049      	b.n	80011fe <bl_del_mem+0x136>
        	}
        	else{
            	const char *msg = "DELETE APP 1 FAILED\r\n";
 800116a:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <bl_del_mem+0x150>)
 800116c:	617b      	str	r3, [r7, #20]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800116e:	6978      	ldr	r0, [r7, #20]
 8001170:	f7ff f8ce 	bl	8000310 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	b29a      	uxth	r2, r3
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	6979      	ldr	r1, [r7, #20]
 800117e:	4824      	ldr	r0, [pc, #144]	@ (8001210 <bl_del_mem+0x148>)
 8001180:	f005 fd38 	bl	8006bf4 <HAL_UART_Transmit>
            	return;
 8001184:	e03b      	b.n	80011fe <bl_del_mem+0x136>
        	}
        }
        else if(addr == APP2_ADDR_START){
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4a1f      	ldr	r2, [pc, #124]	@ (8001208 <bl_del_mem+0x140>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d137      	bne.n	80011fe <bl_del_mem+0x136>
        	if(del_mem(FLASH_SECTOR_3, 2) == 1 && del_mem(FLASH_SECTOR_7, 1) == 1){
 800118e:	2102      	movs	r1, #2
 8001190:	2003      	movs	r0, #3
 8001192:	f7ff fbf3 	bl	800097c <del_mem>
 8001196:	4603      	mov	r3, r0
 8001198:	2b01      	cmp	r3, #1
 800119a:	d114      	bne.n	80011c6 <bl_del_mem+0xfe>
 800119c:	2101      	movs	r1, #1
 800119e:	2007      	movs	r0, #7
 80011a0:	f7ff fbec 	bl	800097c <del_mem>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10d      	bne.n	80011c6 <bl_del_mem+0xfe>
            	const char *msg = "DELETE APP 2 SUCCESSFULLY\r\n";
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <bl_del_mem+0x154>)
 80011ac:	623b      	str	r3, [r7, #32]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80011ae:	6a38      	ldr	r0, [r7, #32]
 80011b0:	f7ff f8ae 	bl	8000310 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	6a39      	ldr	r1, [r7, #32]
 80011be:	4814      	ldr	r0, [pc, #80]	@ (8001210 <bl_del_mem+0x148>)
 80011c0:	f005 fd18 	bl	8006bf4 <HAL_UART_Transmit>
            	return;
 80011c4:	e01b      	b.n	80011fe <bl_del_mem+0x136>
        	}
        	else{
            	const char *msg = "DELETE DELETE APP2 FAILED\r\n";
 80011c6:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <bl_del_mem+0x158>)
 80011c8:	61fb      	str	r3, [r7, #28]
            	HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80011ca:	69f8      	ldr	r0, [r7, #28]
 80011cc:	f7ff f8a0 	bl	8000310 <strlen>
 80011d0:	4603      	mov	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	69f9      	ldr	r1, [r7, #28]
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <bl_del_mem+0x148>)
 80011dc:	f005 fd0a 	bl	8006bf4 <HAL_UART_Transmit>
            	return;
 80011e0:	e00d      	b.n	80011fe <bl_del_mem+0x136>
        	}

        }
    }
    else{
		const char *msg = "CRC failed\r\n";
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <bl_del_mem+0x15c>)
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80011e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80011e8:	f7ff f892 	bl	8000310 <strlen>
 80011ec:	4603      	mov	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011f6:	4806      	ldr	r0, [pc, #24]	@ (8001210 <bl_del_mem+0x148>)
 80011f8:	f005 fcfc 	bl	8006bf4 <HAL_UART_Transmit>
		return;
 80011fc:	bf00      	nop
    }
}
 80011fe:	3730      	adds	r7, #48	@ 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	08020000 	.word	0x08020000
 8001208:	08060000 	.word	0x08060000
 800120c:	08016278 	.word	0x08016278
 8001210:	24000294 	.word	0x24000294
 8001214:	08016290 	.word	0x08016290
 8001218:	080162ac 	.word	0x080162ac
 800121c:	080162c4 	.word	0x080162c4
 8001220:	080162e0 	.word	0x080162e0
 8001224:	08016160 	.word	0x08016160

08001228 <bl_check_mem_uart>:
void bl_check_mem_uart(uint8_t *buffer) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b0ae      	sub	sp, #184	@ 0xb8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	uint32_t command_len = buffer[0] + 1;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	uint32_t crc_host = crc32(buffer, command_len - 4);
 800123a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800123e:	3b04      	subs	r3, #4
 8001240:	4619      	mov	r1, r3
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fa84 	bl	8000750 <crc32>
 8001248:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
	uint32_t crc_recv;
	memcpy(&crc_recv, &buffer[command_len - 4], 4);
 800124c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001250:	3b04      	subs	r3, #4
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	if (crc_host != crc_recv) {
 800125c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001260:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001264:	429a      	cmp	r2, r3
 8001266:	d010      	beq.n	800128a <bl_check_mem_uart+0x62>
		const char *msg = "CRC failed\r\n";
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <bl_check_mem_uart+0xac>)
 800126a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800126e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8001272:	f7ff f84d 	bl	8000310 <strlen>
 8001276:	4603      	mov	r3, r0
 8001278:	b29a      	uxth	r2, r3
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001282:	4815      	ldr	r0, [pc, #84]	@ (80012d8 <bl_check_mem_uart+0xb0>)
 8001284:	f005 fcb6 	bl	8006bf4 <HAL_UART_Transmit>
 8001288:	e020      	b.n	80012cc <bl_check_mem_uart+0xa4>
		return ;
	}
	char dummy[150];
	uint32_t result1 = cal_flash_used_app_1();
 800128a:	f7ff fb1b 	bl	80008c4 <cal_flash_used_app_1>
 800128e:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
	uint32_t result2 = cal_flash_used_app_2();
 8001292:	f7ff fb45 	bl	8000920 <cal_flash_used_app_2>
 8001296:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
	sprintf(dummy, "Segment 1 of flash use %d / 256000 bytes and Segment 2 of flash use %d /256000 bytes. \n", result1 * 16, result2 * 16);
 800129a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800129e:	011a      	lsls	r2, r3, #4
 80012a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012a4:	011b      	lsls	r3, r3, #4
 80012a6:	f107 0008 	add.w	r0, r7, #8
 80012aa:	490c      	ldr	r1, [pc, #48]	@ (80012dc <bl_check_mem_uart+0xb4>)
 80012ac:	f014 fb4a 	bl	8015944 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)dummy, strlen(dummy), HAL_MAX_DELAY);
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f82b 	bl	8000310 <strlen>
 80012ba:	4603      	mov	r3, r0
 80012bc:	b29a      	uxth	r2, r3
 80012be:	f107 0108 	add.w	r1, r7, #8
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <bl_check_mem_uart+0xb0>)
 80012c8:	f005 fc94 	bl	8006bf4 <HAL_UART_Transmit>
}
 80012cc:	37b8      	adds	r7, #184	@ 0xb8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	08016160 	.word	0x08016160
 80012d8:	24000294 	.word	0x24000294
 80012dc:	080162fc 	.word	0x080162fc

080012e0 <bl_verify_signature>:

void bl_verify_signature(uint8_t *buffer) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0e6      	sub	sp, #408	@ 0x198
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80012ea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80012ee:	6018      	str	r0, [r3, #0]
    uint32_t command_len = buffer[0] + 1;
 80012f0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80012f4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	3301      	adds	r3, #1
 80012fe:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    uint32_t crc_recv = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    memcpy(&crc_recv, &buffer[command_len - 4], 4);
 8001308:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800130c:	3b04      	subs	r3, #4
 800130e:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8001312:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	4413      	add	r3, r2
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    uint32_t host_crc = crc32(buffer, command_len - 4);
 8001320:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001324:	1f1a      	subs	r2, r3, #4
 8001326:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800132a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800132e:	4611      	mov	r1, r2
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f7ff fa0d 	bl	8000750 <crc32>
 8001336:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180

    if (crc_recv != host_crc) {
 800133a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800133e:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8001342:	429a      	cmp	r2, r3
 8001344:	d007      	beq.n	8001356 <bl_verify_signature+0x76>
        HAL_UART_Transmit(&huart1, (uint8_t *)"CRC mismatch\r\n", 14, HAL_MAX_DELAY);
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	220e      	movs	r2, #14
 800134c:	4998      	ldr	r1, [pc, #608]	@ (80015b0 <bl_verify_signature+0x2d0>)
 800134e:	4899      	ldr	r0, [pc, #612]	@ (80015b4 <bl_verify_signature+0x2d4>)
 8001350:	f005 fc50 	bl	8006bf4 <HAL_UART_Transmit>
        return;
 8001354:	e128      	b.n	80015a8 <bl_verify_signature+0x2c8>
    }

    uint8_t *payload = &buffer[2];  // Skip LTF
 8001356:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 800135a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3302      	adds	r3, #2
 8001362:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
    uint32_t user_app_address = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    memcpy(&user_app_address, &payload[0], 4);
 800136c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    uint32_t firmware_len = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    memcpy(&firmware_len, &payload[4], 4);
 800137c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001380:	3304      	adds	r3, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160

    uint8_t *host_hash = &payload[8];          // SHA256 (32 bytes)
 8001388:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800138c:	3308      	adds	r3, #8
 800138e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
    uint8_t *sig = &payload[8 + 32];           // ECC Signature (64 bytes)
 8001392:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001396:	3328      	adds	r3, #40	@ 0x28
 8001398:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
    uint8_t calc_hash[32];
    mbedtls_sha256_context sha_ctx;
    mbedtls_sha256_init(&sha_ctx);
 800139c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013a0:	4618      	mov	r0, r3
 80013a2:	f012 fa05 	bl	80137b0 <mbedtls_sha256_init>
    mbedtls_sha256_starts_ret(&sha_ctx, 0); // 0 = SHA256
 80013a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f012 fa1d 	bl	80137ec <mbedtls_sha256_starts_ret>
    user_app_address += 224;
 80013b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80013b6:	33e0      	adds	r3, #224	@ 0xe0
 80013b8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164

    for (uint32_t i = 0; i < firmware_len; i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80013c2:	e017      	b.n	80013f4 <bl_verify_signature+0x114>
        uint8_t byte = *(uint8_t *)(user_app_address + i);
 80013c4:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80013c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80013cc:	4413      	add	r3, r2
 80013ce:	781a      	ldrb	r2, [r3, #0]
 80013d0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80013d4:	f2a3 1381 	subw	r3, r3, #385	@ 0x181
 80013d8:	701a      	strb	r2, [r3, #0]
        mbedtls_sha256_update_ret(&sha_ctx, &byte, 1);
 80013da:	f107 010f 	add.w	r1, r7, #15
 80013de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013e2:	2201      	movs	r2, #1
 80013e4:	4618      	mov	r0, r3
 80013e6:	f013 ffb5 	bl	8015354 <mbedtls_sha256_update_ret>
    for (uint32_t i = 0; i < firmware_len; i++) {
 80013ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80013ee:	3301      	adds	r3, #1
 80013f0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80013f4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80013f8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d3e1      	bcc.n	80013c4 <bl_verify_signature+0xe4>
    }
    mbedtls_sha256_finish_ret(&sha_ctx, calc_hash);
 8001400:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001404:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f014 f817 	bl	801543e <mbedtls_sha256_finish_ret>
    mbedtls_sha256_free(&sha_ctx);
 8001410:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001414:	4618      	mov	r0, r3
 8001416:	f012 f9d8 	bl	80137ca <mbedtls_sha256_free>

    if (memcmp(host_hash, calc_hash, 32) != 0) {
 800141a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800141e:	2220      	movs	r2, #32
 8001420:	4619      	mov	r1, r3
 8001422:	f8d7 0178 	ldr.w	r0, [r7, #376]	@ 0x178
 8001426:	f014 faaf 	bl	8015988 <memcmp>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <bl_verify_signature+0x160>
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ SHA256 mismatch\r\n", 21, HAL_MAX_DELAY);
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	2215      	movs	r2, #21
 8001436:	4960      	ldr	r1, [pc, #384]	@ (80015b8 <bl_verify_signature+0x2d8>)
 8001438:	485e      	ldr	r0, [pc, #376]	@ (80015b4 <bl_verify_signature+0x2d4>)
 800143a:	f005 fbdb 	bl	8006bf4 <HAL_UART_Transmit>
        return;
 800143e:	e0b3      	b.n	80015a8 <bl_verify_signature+0x2c8>
    }
    mbedtls_ecdsa_context ctx;
    mbedtls_ecdsa_init(&ctx);
 8001440:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001444:	4618      	mov	r0, r3
 8001446:	f00c fd71 	bl	800df2c <mbedtls_ecdsa_init>
    mbedtls_ecp_group_load(&ctx.grp, MBEDTLS_ECP_DP_SECP256R1);
 800144a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800144e:	2103      	movs	r1, #3
 8001450:	4618      	mov	r0, r3
 8001452:	f00f ff8b 	bl	801136c <mbedtls_ecp_group_load>
    mbedtls_mpi_read_binary(&ctx.Q.X, public_key, 32);
 8001456:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800145a:	3388      	adds	r3, #136	@ 0x88
 800145c:	2220      	movs	r2, #32
 800145e:	4957      	ldr	r1, [pc, #348]	@ (80015bc <bl_verify_signature+0x2dc>)
 8001460:	4618      	mov	r0, r3
 8001462:	f009 fbad 	bl	800abc0 <mbedtls_mpi_read_binary>
    mbedtls_mpi_read_binary(&ctx.Q.Y, public_key + 32, 32);
 8001466:	4956      	ldr	r1, [pc, #344]	@ (80015c0 <bl_verify_signature+0x2e0>)
 8001468:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146c:	3394      	adds	r3, #148	@ 0x94
 800146e:	2220      	movs	r2, #32
 8001470:	4618      	mov	r0, r3
 8001472:	f009 fba5 	bl	800abc0 <mbedtls_mpi_read_binary>
    mbedtls_mpi_lset(&ctx.Q.Z, 1);
 8001476:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147a:	33a0      	adds	r3, #160	@ 0xa0
 800147c:	2101      	movs	r1, #1
 800147e:	4618      	mov	r0, r3
 8001480:	f009 f90a 	bl	800a698 <mbedtls_mpi_lset>

    mbedtls_mpi r, s;
    mbedtls_mpi_init(&r); mbedtls_mpi_init(&s);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4618      	mov	r0, r3
 800148a:	f008 fec4 	bl	800a216 <mbedtls_mpi_init>
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4618      	mov	r0, r3
 8001494:	f008 febf 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_read_binary(&r, sig, 32);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2220      	movs	r2, #32
 800149e:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80014a2:	4618      	mov	r0, r3
 80014a4:	f009 fb8c 	bl	800abc0 <mbedtls_mpi_read_binary>
    mbedtls_mpi_read_binary(&s, sig + 32, 32);
 80014a8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80014ac:	f103 0120 	add.w	r1, r3, #32
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	2220      	movs	r2, #32
 80014b6:	4618      	mov	r0, r3
 80014b8:	f009 fb82 	bl	800abc0 <mbedtls_mpi_read_binary>

    int ret = mbedtls_ecdsa_verify(&ctx.grp, calc_hash, 32, &ctx.Q, &r, &s);
 80014bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c0:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 80014c4:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80014c8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f107 031c 	add.w	r3, r7, #28
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	4613      	mov	r3, r2
 80014da:	2220      	movs	r2, #32
 80014dc:	f00c fd0e 	bl	800defc <mbedtls_ecdsa_verify>
 80014e0:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170

    mbedtls_mpi_free(&r); mbedtls_mpi_free(&s);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4618      	mov	r0, r3
 80014ea:	f008 fea7 	bl	800a23c <mbedtls_mpi_free>
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4618      	mov	r0, r3
 80014f4:	f008 fea2 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_ecdsa_free(&ctx);
 80014f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00c fd20 	bl	800df42 <mbedtls_ecdsa_free>

    if (ret != 0) {
 8001502:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <bl_verify_signature+0x23a>
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Signature and Integrity FAIL\r\n", 33, HAL_MAX_DELAY);
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	2221      	movs	r2, #33	@ 0x21
 8001510:	492c      	ldr	r1, [pc, #176]	@ (80015c4 <bl_verify_signature+0x2e4>)
 8001512:	4828      	ldr	r0, [pc, #160]	@ (80015b4 <bl_verify_signature+0x2d4>)
 8001514:	f005 fb6e 	bl	8006bf4 <HAL_UART_Transmit>
        return;
 8001518:	e046      	b.n	80015a8 <bl_verify_signature+0x2c8>
    }

    HAL_FLASH_Unlock();
 800151a:	f001 fedd 	bl	80032d8 <HAL_FLASH_Unlock>

    uint32_t sig_flag_addr = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    uint32_t status_flag_addr = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c

    if (user_app_address == APP1_ADDR_START + 224) {
 800152a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800152e:	4a26      	ldr	r2, [pc, #152]	@ (80015c8 <bl_verify_signature+0x2e8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d106      	bne.n	8001542 <bl_verify_signature+0x262>
        sig_flag_addr = SIGNATURE_FLAG_APP1;
 8001534:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <bl_verify_signature+0x2ec>)
 8001536:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
        status_flag_addr = STATUS_FLAG_APP1;
 800153a:	4b25      	ldr	r3, [pc, #148]	@ (80015d0 <bl_verify_signature+0x2f0>)
 800153c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001540:	e015      	b.n	800156e <bl_verify_signature+0x28e>
    } else if (user_app_address == APP2_ADDR_START + 224) {
 8001542:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001546:	4a23      	ldr	r2, [pc, #140]	@ (80015d4 <bl_verify_signature+0x2f4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d106      	bne.n	800155a <bl_verify_signature+0x27a>
        sig_flag_addr = SIGNATURE_FLAG_APP2;
 800154c:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <bl_verify_signature+0x2f8>)
 800154e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
        status_flag_addr = STATUS_FLAG_APP2;
 8001552:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <bl_verify_signature+0x2fc>)
 8001554:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001558:	e009      	b.n	800156e <bl_verify_signature+0x28e>
    } else {
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Unknown APP address\r\n", 24, HAL_MAX_DELAY);
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	2218      	movs	r2, #24
 8001560:	491f      	ldr	r1, [pc, #124]	@ (80015e0 <bl_verify_signature+0x300>)
 8001562:	4814      	ldr	r0, [pc, #80]	@ (80015b4 <bl_verify_signature+0x2d4>)
 8001564:	f005 fb46 	bl	8006bf4 <HAL_UART_Transmit>
        HAL_FLASH_Lock();
 8001568:	f001 fed8 	bl	800331c <HAL_FLASH_Lock>
        return;
 800156c:	e01c      	b.n	80015a8 <bl_verify_signature+0x2c8>
    }

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, sig_flag_addr, (uint32_t)expected_magic_number) != HAL_OK) {
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <bl_verify_signature+0x304>)
 8001570:	461a      	mov	r2, r3
 8001572:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8001576:	2001      	movs	r0, #1
 8001578:	f001 fe3e 	bl	80031f8 <HAL_FLASH_Program>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d009      	beq.n	8001596 <bl_verify_signature+0x2b6>
        HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Failed to write flags\r\n", 26, HAL_MAX_DELAY);
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	221a      	movs	r2, #26
 8001588:	4917      	ldr	r1, [pc, #92]	@ (80015e8 <bl_verify_signature+0x308>)
 800158a:	480a      	ldr	r0, [pc, #40]	@ (80015b4 <bl_verify_signature+0x2d4>)
 800158c:	f005 fb32 	bl	8006bf4 <HAL_UART_Transmit>
        HAL_FLASH_Lock();
 8001590:	f001 fec4 	bl	800331c <HAL_FLASH_Lock>
        return;
 8001594:	e008      	b.n	80015a8 <bl_verify_signature+0x2c8>
    }

    HAL_FLASH_Lock();
 8001596:	f001 fec1 	bl	800331c <HAL_FLASH_Lock>

    HAL_UART_Transmit(&huart1, (uint8_t *)"✅ Signature and Integrity OK\r\n", 31, HAL_MAX_DELAY);
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	221f      	movs	r2, #31
 80015a0:	4912      	ldr	r1, [pc, #72]	@ (80015ec <bl_verify_signature+0x30c>)
 80015a2:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <bl_verify_signature+0x2d4>)
 80015a4:	f005 fb26 	bl	8006bf4 <HAL_UART_Transmit>
}
 80015a8:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08016354 	.word	0x08016354
 80015b4:	24000294 	.word	0x24000294
 80015b8:	08016364 	.word	0x08016364
 80015bc:	08016940 	.word	0x08016940
 80015c0:	08016960 	.word	0x08016960
 80015c4:	0801637c 	.word	0x0801637c
 80015c8:	080200e0 	.word	0x080200e0
 80015cc:	080e0000 	.word	0x080e0000
 80015d0:	080c0000 	.word	0x080c0000
 80015d4:	080600e0 	.word	0x080600e0
 80015d8:	080e0020 	.word	0x080e0020
 80015dc:	080c0020 	.word	0x080c0020
 80015e0:	080163a0 	.word	0x080163a0
 80015e4:	24000000 	.word	0x24000000
 80015e8:	080163bc 	.word	0x080163bc
 80015ec:	080163d8 	.word	0x080163d8

080015f0 <bl_check_version>:
void bl_check_version(uint8_t* buffer){
 80015f0:	b5b0      	push	{r4, r5, r7, lr}
 80015f2:	b0ac      	sub	sp, #176	@ 0xb0
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    uint32_t len = buffer[0] + 1;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    uint32_t crc_host = crc32(buffer, len - 4);
 8001602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001606:	3b04      	subs	r3, #4
 8001608:	4619      	mov	r1, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff f8a0 	bl	8000750 <crc32>
 8001610:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    uint32_t crc_recv = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    memcpy(&crc_recv, &buffer[len - 4], 4);
 800161a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800161e:	3b04      	subs	r3, #4
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    if (crc_host == crc_recv) {
 800162a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800162e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001632:	429a      	cmp	r2, r3
 8001634:	d152      	bne.n	80016dc <bl_check_version+0xec>
        uint32_t dummy_flag = VERSION_OK_FLAG;
 8001636:	4b33      	ldr	r3, [pc, #204]	@ (8001704 <bl_check_version+0x114>)
 8001638:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        uint64_t temp;
        char msg[128];
        uint8_t first = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab

        HAL_UART_Transmit(&huart1, (uint8_t *)"{ \"versions\": [", 15, HAL_MAX_DELAY);
 8001642:	f04f 33ff 	mov.w	r3, #4294967295
 8001646:	220f      	movs	r2, #15
 8001648:	492f      	ldr	r1, [pc, #188]	@ (8001708 <bl_check_version+0x118>)
 800164a:	4830      	ldr	r0, [pc, #192]	@ (800170c <bl_check_version+0x11c>)
 800164c:	f005 fad2 	bl	8006bf4 <HAL_UART_Transmit>

        while (1) {
            memcpy(&temp, (void*)dummy_flag, sizeof(temp));
 8001650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001654:	681c      	ldr	r4, [r3, #0]
 8001656:	685d      	ldr	r5, [r3, #4]
 8001658:	4622      	mov	r2, r4
 800165a:	462b      	mov	r3, r5
 800165c:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
            if (temp == 0xFFFFFFFFFFFFFFFFULL) break;
 8001660:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	bf08      	it	eq
 800166a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800166e:	d107      	bne.n	8001680 <bl_check_version+0x90>

            first = 0;
            dummy_flag += 32;
        }

        HAL_UART_Transmit(&huart1, (uint8_t *)"] }\r\n", 5, HAL_MAX_DELAY);
 8001670:	f04f 33ff 	mov.w	r3, #4294967295
 8001674:	2205      	movs	r2, #5
 8001676:	4926      	ldr	r1, [pc, #152]	@ (8001710 <bl_check_version+0x120>)
 8001678:	4824      	ldr	r0, [pc, #144]	@ (800170c <bl_check_version+0x11c>)
 800167a:	f005 fabb 	bl	8006bf4 <HAL_UART_Transmit>

    } else {
        const char *msg = "❌ CRC failed\r\n";
        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 800167e:	e03d      	b.n	80016fc <bl_check_version+0x10c>
            memcpy(&version, &temp, 4);
 8001680:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001684:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            if (!first) HAL_UART_Transmit(&huart1, (uint8_t *)", ", 2, HAL_MAX_DELAY);
 8001688:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 800168c:	2b00      	cmp	r3, #0
 800168e:	d106      	bne.n	800169e <bl_check_version+0xae>
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
 8001694:	2202      	movs	r2, #2
 8001696:	491f      	ldr	r1, [pc, #124]	@ (8001714 <bl_check_version+0x124>)
 8001698:	481c      	ldr	r0, [pc, #112]	@ (800170c <bl_check_version+0x11c>)
 800169a:	f005 faab 	bl	8006bf4 <HAL_UART_Transmit>
            sprintf(msg, "\"0x%08lX\"", version);
 800169e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	491c      	ldr	r1, [pc, #112]	@ (8001718 <bl_check_version+0x128>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f014 f94b 	bl	8015944 <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fe2c 	bl	8000310 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f107 010c 	add.w	r1, r7, #12
 80016c0:	f04f 33ff 	mov.w	r3, #4294967295
 80016c4:	4811      	ldr	r0, [pc, #68]	@ (800170c <bl_check_version+0x11c>)
 80016c6:	f005 fa95 	bl	8006bf4 <HAL_UART_Transmit>
            first = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
            dummy_flag += 32;
 80016d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016d4:	3320      	adds	r3, #32
 80016d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        while (1) {
 80016da:	e7b9      	b.n	8001650 <bl_check_version+0x60>
        const char *msg = "❌ CRC failed\r\n";
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <bl_check_version+0x12c>)
 80016de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80016e2:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80016e6:	f7fe fe13 	bl	8000310 <strlen>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <bl_check_version+0x11c>)
 80016f8:	f005 fa7c 	bl	8006bf4 <HAL_UART_Transmit>
}
 80016fc:	bf00      	nop
 80016fe:	37b0      	adds	r7, #176	@ 0xb0
 8001700:	46bd      	mov	sp, r7
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	080a0000 	.word	0x080a0000
 8001708:	080163fc 	.word	0x080163fc
 800170c:	24000294 	.word	0x24000294
 8001710:	0801640c 	.word	0x0801640c
 8001714:	08016414 	.word	0x08016414
 8001718:	08016418 	.word	0x08016418
 800171c:	08016424 	.word	0x08016424

08001720 <jump_to_user_code_uart>:
void jump_to_user_code_uart(uint32_t addr){
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
	__disable_irq();
	uint32_t app_msp = *(volatile uint32_t* )addr;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	617b      	str	r3, [r7, #20]
	uint32_t app_reset_handler = *(volatile uint32_t* )(addr + 4);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3304      	adds	r3, #4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	f383 8808 	msr	MSP, r3
}
 8001744:	bf00      	nop
   __set_MSP(app_msp);
   SCB->VTOR = addr;
 8001746:	4a05      	ldr	r2, [pc, #20]	@ (800175c <jump_to_user_code_uart+0x3c>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6093      	str	r3, [r2, #8]
   void (*Jump_To_APP)(void) = (void (*)(void))app_reset_handler;
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	60fb      	str	r3, [r7, #12]

   Jump_To_APP();
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4798      	blx	r3

}
 8001754:	bf00      	nop
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <check_ECC_Flag>:
int check_ECC_Flag(uint32_t addr){
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if(addr == 0x080200E0){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a0f      	ldr	r2, [pc, #60]	@ (80017a8 <check_ECC_Flag+0x48>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d108      	bne.n	8001782 <check_ECC_Flag+0x22>
		if(check_signature_magic_number_app_1()){
 8001770:	f7ff f854 	bl	800081c <check_signature_magic_number_app_1>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <check_ECC_Flag+0x1e>
			return 1;
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <check_ECC_Flag+0x3e>
		}
		else{
			return 0;
 800177e:	2300      	movs	r3, #0
 8001780:	e00d      	b.n	800179e <check_ECC_Flag+0x3e>
		}
	}
	else if(addr == 0x080600E0){
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <check_ECC_Flag+0x4c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d108      	bne.n	800179c <check_ECC_Flag+0x3c>
		if(check_signature_magic_number_app_2()){
 800178a:	f7ff f871 	bl	8000870 <check_signature_magic_number_app_2>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <check_ECC_Flag+0x38>
			return 1;
 8001794:	2301      	movs	r3, #1
 8001796:	e002      	b.n	800179e <check_ECC_Flag+0x3e>
		}
		else{
			return 0;
 8001798:	2300      	movs	r3, #0
 800179a:	e000      	b.n	800179e <check_ECC_Flag+0x3e>
		}
	}
	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	080200e0 	.word	0x080200e0
 80017ac:	080600e0 	.word	0x080600e0

080017b0 <is_run_ok_flag_set>:
int is_fail_counter_exceeded(uint32_t status_addr) {
	FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
    return (status->retry_counter > MAX_FAILED_ALLOWED);
}
int is_run_ok_flag_set(uint32_t status_addr) {
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	60fb      	str	r3, [r7, #12]
    return (status->run_ok_flag == RUN_OK_VALUE);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <is_run_ok_flag_set+0x28>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	bf0c      	ite	eq
 80017c6:	2301      	moveq	r3, #1
 80017c8:	2300      	movne	r3, #0
 80017ca:	b2db      	uxtb	r3, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	deadbeef 	.word	0xdeadbeef

080017dc <get_fail_counter>:
uint8_t get_fail_counter(uint32_t status_addr) {
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b0a3      	sub	sp, #140	@ 0x8c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80017e8:	3b80      	subs	r3, #128	@ 0x80
 80017ea:	331f      	adds	r3, #31
 80017ec:	095b      	lsrs	r3, r3, #5
 80017ee:	015c      	lsls	r4, r3, #5
    FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (status->retry_counter == 0xFFFFFFFF){
 80017f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d121      	bne.n	8001846 <get_fail_counter+0x6a>
        FirmwareUserStatus new_status;
        new_status.run_ok_flag = 0xFFFFFFFF;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	6423      	str	r3, [r4, #64]	@ 0x40
        new_status.retry_counter = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	6463      	str	r3, [r4, #68]	@ 0x44
        uint64_t status_block[8] __attribute__((aligned(32))); // 64 bytes
        memset(status_block, 0xFF, sizeof(status_block));
 800180c:	2240      	movs	r2, #64	@ 0x40
 800180e:	21ff      	movs	r1, #255	@ 0xff
 8001810:	4620      	mov	r0, r4
 8001812:	f014 f8e3 	bl	80159dc <memset>
        memcpy(status_block, &new_status, 8); // chỉ lưu version
 8001816:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	@ 0x40
 800181a:	e9c4 2300 	strd	r2, r3, [r4]
        HAL_FLASH_Unlock();
 800181e:	f001 fd5b 	bl	80032d8 <HAL_FLASH_Unlock>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, status_addr, (uint32_t)&status_block) != HAL_OK) {
 8001822:	4623      	mov	r3, r4
 8001824:	461a      	mov	r2, r3
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	2001      	movs	r0, #1
 800182a:	f001 fce5 	bl	80031f8 <HAL_FLASH_Program>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <get_fail_counter+0x66>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Failed to write status flags\r\n", 26, HAL_MAX_DELAY);
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	221a      	movs	r2, #26
 800183a:	4907      	ldr	r1, [pc, #28]	@ (8001858 <get_fail_counter+0x7c>)
 800183c:	4807      	ldr	r0, [pc, #28]	@ (800185c <get_fail_counter+0x80>)
 800183e:	f005 f9d9 	bl	8006bf4 <HAL_UART_Transmit>

        }
        HAL_FLASH_Lock();
 8001842:	f001 fd6b 	bl	800331c <HAL_FLASH_Lock>
    }
    return status->retry_counter;
 8001846:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	b2db      	uxtb	r3, r3
}
 800184e:	4618      	mov	r0, r3
 8001850:	378c      	adds	r7, #140	@ 0x8c
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}
 8001856:	bf00      	nop
 8001858:	08016438 	.word	0x08016438
 800185c:	24000294 	.word	0x24000294

08001860 <increase_fail_counter>:
void increase_fail_counter(uint32_t status_addr){
 8001860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001862:	b0a3      	sub	sp, #140	@ 0x8c
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800186c:	3b80      	subs	r3, #128	@ 0x80
 800186e:	331f      	adds	r3, #31
 8001870:	095b      	lsrs	r3, r3, #5
 8001872:	015e      	lsls	r6, r3, #5

	FirmwareUserStatus *status = (FirmwareUserStatus *)status_addr;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	del_mem(FLASH_SECTOR_6, 1); //delete before change retry_counter = 1
 800187a:	2101      	movs	r1, #1
 800187c:	2006      	movs	r0, #6
 800187e:	f7ff f87d 	bl	800097c <del_mem>
    if (status->retry_counter == 0xFFFFFFFF){
 8001882:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188c:	d126      	bne.n	80018dc <increase_fail_counter+0x7c>
        FirmwareUserStatus new_status;
        new_status.run_ok_flag = 0xFFFFFFFF;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
 8001892:	6433      	str	r3, [r6, #64]	@ 0x40
        new_status.retry_counter = 1;
 8001894:	2301      	movs	r3, #1
 8001896:	6473      	str	r3, [r6, #68]	@ 0x44
        uint64_t status_block[8] __attribute__((aligned(32))); // 64 bytes
        memset(status_block, 0xFF, sizeof(status_block));
 8001898:	2240      	movs	r2, #64	@ 0x40
 800189a:	21ff      	movs	r1, #255	@ 0xff
 800189c:	4630      	mov	r0, r6
 800189e:	f014 f89d 	bl	80159dc <memset>
        memcpy(status_block, &new_status, sizeof(FirmwareUserStatus)); // chỉ lưu version
 80018a2:	4635      	mov	r5, r6
 80018a4:	f106 0440 	add.w	r4, r6, #64	@ 0x40
 80018a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80018b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        HAL_FLASH_Unlock();
 80018b4:	f001 fd10 	bl	80032d8 <HAL_FLASH_Unlock>
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, status_addr, (uint32_t)&status_block) != HAL_OK) {
 80018b8:	4633      	mov	r3, r6
 80018ba:	461a      	mov	r2, r3
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	2001      	movs	r0, #1
 80018c0:	f001 fc9a 	bl	80031f8 <HAL_FLASH_Program>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <increase_fail_counter+0x78>
            HAL_UART_Transmit(&huart1, (uint8_t *)"❌ Failed to write status flags\r\n", 26, HAL_MAX_DELAY);
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	221a      	movs	r2, #26
 80018d0:	4904      	ldr	r1, [pc, #16]	@ (80018e4 <increase_fail_counter+0x84>)
 80018d2:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <increase_fail_counter+0x88>)
 80018d4:	f005 f98e 	bl	8006bf4 <HAL_UART_Transmit>

        }
        HAL_FLASH_Lock();
 80018d8:	f001 fd20 	bl	800331c <HAL_FLASH_Lock>
    }

}
 80018dc:	bf00      	nop
 80018de:	378c      	adds	r7, #140	@ 0x8c
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e4:	08016438 	.word	0x08016438
 80018e8:	24000294 	.word	0x24000294

080018ec <count_version_in_flash>:
int count_version_in_flash(){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
    int count = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
    uint32_t *temp_addr_flash = (uint32_t *)0x080A0000;
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <count_version_in_flash+0x34>)
 80018f8:	603b      	str	r3, [r7, #0]

    while (*temp_addr_flash != 0xFFFFFFFF) {
 80018fa:	e005      	b.n	8001908 <count_version_in_flash+0x1c>
        count++;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3301      	adds	r3, #1
 8001900:	607b      	str	r3, [r7, #4]
        temp_addr_flash++;  // Tăng theo đơn vị 4 bytes
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	3304      	adds	r3, #4
 8001906:	603b      	str	r3, [r7, #0]
    while (*temp_addr_flash != 0xFFFFFFFF) {
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d1f4      	bne.n	80018fc <count_version_in_flash+0x10>
    }
    return count;
 8001912:	687b      	ldr	r3, [r7, #4]
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	080a0000 	.word	0x080a0000

08001924 <check_condition_jump_to_code_uart>:
void check_condition_jump_to_code_uart() {
 8001924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001928:	b08b      	sub	sp, #44	@ 0x2c
 800192a:	af00      	add	r7, sp, #0
 800192c:	466b      	mov	r3, sp
 800192e:	461e      	mov	r6, r3
    FirmwareMetadata *F = (FirmwareMetadata*)VERSION_OK_FLAG;
 8001930:	4b57      	ldr	r3, [pc, #348]	@ (8001a90 <check_condition_jump_to_code_uart+0x16c>)
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
    int count_max = count_version_in_flash();
 8001934:	f7ff ffda 	bl	80018ec <count_version_in_flash>
 8001938:	61b8      	str	r0, [r7, #24]
    FirmwareMetadata valid_firmware[count_max];
 800193a:	69b9      	ldr	r1, [r7, #24]
 800193c:	1e4b      	subs	r3, r1, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	460a      	mov	r2, r1
 8001942:	2300      	movs	r3, #0
 8001944:	4690      	mov	r8, r2
 8001946:	4699      	mov	r9, r3
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8001954:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8001958:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800195c:	460a      	mov	r2, r1
 800195e:	2300      	movs	r3, #0
 8001960:	4614      	mov	r4, r2
 8001962:	461d      	mov	r5, r3
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	022b      	lsls	r3, r5, #8
 800196e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001972:	0222      	lsls	r2, r4, #8
 8001974:	460b      	mov	r3, r1
 8001976:	015b      	lsls	r3, r3, #5
 8001978:	3318      	adds	r3, #24
 800197a:	3307      	adds	r3, #7
 800197c:	08db      	lsrs	r3, r3, #3
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	ebad 0d03 	sub.w	sp, sp, r3
 8001984:	466b      	mov	r3, sp
 8001986:	331f      	adds	r3, #31
 8001988:	095b      	lsrs	r3, r3, #5
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	613b      	str	r3, [r7, #16]
    int count  = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
    // Collect valid firmware
    while (F->version != 0xFFFFFFFF && F->address != 0xFFFFFFFF && count < count_max) {
 8001992:	e011      	b.n	80019b8 <check_condition_jump_to_code_uart+0x94>
        valid_firmware[count++] = *F++;
 8001994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001996:	f102 0320 	add.w	r3, r2, #32
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	1c59      	adds	r1, r3, #1
 80019a0:	6239      	str	r1, [r7, #32]
 80019a2:	6939      	ldr	r1, [r7, #16]
 80019a4:	015b      	lsls	r3, r3, #5
 80019a6:	440b      	add	r3, r1
 80019a8:	461c      	mov	r4, r3
 80019aa:	4615      	mov	r5, r2
 80019ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (F->version != 0xFFFFFFFF && F->address != 0xFFFFFFFF && count < count_max) {
 80019b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d008      	beq.n	80019d4 <check_condition_jump_to_code_uart+0xb0>
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ca:	d003      	beq.n	80019d4 <check_condition_jump_to_code_uart+0xb0>
 80019cc:	6a3a      	ldr	r2, [r7, #32]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbdf      	blt.n	8001994 <check_condition_jump_to_code_uart+0x70>
    }
    if (count == 0) {
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d107      	bne.n	80019ea <check_condition_jump_to_code_uart+0xc6>
        HAL_UART_Transmit(&huart1, (uint8_t *)"No valid firmware found\r\n", 28, HAL_MAX_DELAY);
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
 80019de:	221c      	movs	r2, #28
 80019e0:	492c      	ldr	r1, [pc, #176]	@ (8001a94 <check_condition_jump_to_code_uart+0x170>)
 80019e2:	482d      	ldr	r0, [pc, #180]	@ (8001a98 <check_condition_jump_to_code_uart+0x174>)
 80019e4:	f005 f906 	bl	8006bf4 <HAL_UART_Transmit>
        return;
 80019e8:	e04c      	b.n	8001a84 <check_condition_jump_to_code_uart+0x160>
    }
    uint32_t stay_in_bl_app =  *(uint32_t *)0x080C0000;
 80019ea:	4b2c      	ldr	r3, [pc, #176]	@ (8001a9c <check_condition_jump_to_code_uart+0x178>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
	if(stay_in_bl_app == 0xDEADBEEF){
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa0 <check_condition_jump_to_code_uart+0x17c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d044      	beq.n	8001a82 <check_condition_jump_to_code_uart+0x15e>
		return;
	}
    for (int i = count - 1; i >= 0; i--) {
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	61fb      	str	r3, [r7, #28]
 80019fe:	e034      	b.n	8001a6a <check_condition_jump_to_code_uart+0x146>
        uint32_t addr = valid_firmware[i].address;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	015b      	lsls	r3, r3, #5
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60bb      	str	r3, [r7, #8]
        uint32_t status_addr =  STATUS_ADDR_APP1_FLAG ;
 8001a0e:	4b23      	ldr	r3, [pc, #140]	@ (8001a9c <check_condition_jump_to_code_uart+0x178>)
 8001a10:	607b      	str	r3, [r7, #4]
        if (!check_ECC_Flag(addr)) {
 8001a12:	68b8      	ldr	r0, [r7, #8]
 8001a14:	f7ff fea4 	bl	8001760 <check_ECC_Flag>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d01f      	beq.n	8001a5e <check_condition_jump_to_code_uart+0x13a>
            continue; // Bỏ qua nếu ECC sai
        }
        uint8_t fail_counter = get_fail_counter(status_addr);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fedc 	bl	80017dc <get_fail_counter>
 8001a24:	4603      	mov	r3, r0
 8001a26:	70fb      	strb	r3, [r7, #3]
        if (fail_counter == 0) {
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10d      	bne.n	8001a4a <check_condition_jump_to_code_uart+0x126>
            // Lần chạy đầu tiên
            HAL_UART_Transmit(&huart1, (uint8_t *)"First run - increasing fail counter\r\n", 41, HAL_MAX_DELAY);
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	2229      	movs	r2, #41	@ 0x29
 8001a34:	491b      	ldr	r1, [pc, #108]	@ (8001aa4 <check_condition_jump_to_code_uart+0x180>)
 8001a36:	4818      	ldr	r0, [pc, #96]	@ (8001a98 <check_condition_jump_to_code_uart+0x174>)
 8001a38:	f005 f8dc 	bl	8006bf4 <HAL_UART_Transmit>
            increase_fail_counter(status_addr);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ff0f 	bl	8001860 <increase_fail_counter>
            jump_to_user_code_uart(addr);
 8001a42:	68b8      	ldr	r0, [r7, #8]
 8001a44:	f7ff fe6c 	bl	8001720 <jump_to_user_code_uart>
            return;
 8001a48:	e01c      	b.n	8001a84 <check_condition_jump_to_code_uart+0x160>
        } else if (is_run_ok_flag_set(status_addr)) {
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff feb0 	bl	80017b0 <is_run_ok_flag_set>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <check_condition_jump_to_code_uart+0x13e>
            jump_to_user_code_uart(addr);
 8001a56:	68b8      	ldr	r0, [r7, #8]
 8001a58:	f7ff fe62 	bl	8001720 <jump_to_user_code_uart>
            return;
 8001a5c:	e012      	b.n	8001a84 <check_condition_jump_to_code_uart+0x160>
            continue; // Bỏ qua nếu ECC sai
 8001a5e:	bf00      	nop
 8001a60:	e000      	b.n	8001a64 <check_condition_jump_to_code_uart+0x140>
        } else {
            continue;
 8001a62:	bf00      	nop
    for (int i = count - 1; i >= 0; i--) {
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dac7      	bge.n	8001a00 <check_condition_jump_to_code_uart+0xdc>
        }
    }

    HAL_UART_Transmit(&huart1, (uint8_t *)"All firmwares failed, staying in bootloader\r\n", 48, HAL_MAX_DELAY);
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	2230      	movs	r2, #48	@ 0x30
 8001a76:	490c      	ldr	r1, [pc, #48]	@ (8001aa8 <check_condition_jump_to_code_uart+0x184>)
 8001a78:	4807      	ldr	r0, [pc, #28]	@ (8001a98 <check_condition_jump_to_code_uart+0x174>)
 8001a7a:	f005 f8bb 	bl	8006bf4 <HAL_UART_Transmit>
 8001a7e:	46b5      	mov	sp, r6
 8001a80:	e001      	b.n	8001a86 <check_condition_jump_to_code_uart+0x162>
		return;
 8001a82:	bf00      	nop
        return;
 8001a84:	46b5      	mov	sp, r6
}
 8001a86:	372c      	adds	r7, #44	@ 0x2c
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a8e:	bf00      	nop
 8001a90:	080a0000 	.word	0x080a0000
 8001a94:	0801645c 	.word	0x0801645c
 8001a98:	24000294 	.word	0x24000294
 8001a9c:	080c0000 	.word	0x080c0000
 8001aa0:	deadbeef 	.word	0xdeadbeef
 8001aa4:	08016478 	.word	0x08016478
 8001aa8:	080164a0 	.word	0x080164a0

08001aac <process_uart_command>:

void process_uart_command() {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
	uint8_t rcv_len = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	while(1){
	memset(rx_buffer, 0, 300);
 8001ab6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aba:	2100      	movs	r1, #0
 8001abc:	482e      	ldr	r0, [pc, #184]	@ (8001b78 <process_uart_command+0xcc>)
 8001abe:	f013 ff8d 	bl	80159dc <memset>
	HAL_UART_Receive(&huart1, rx_buffer, 1, HAL_MAX_DELAY);
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	492b      	ldr	r1, [pc, #172]	@ (8001b78 <process_uart_command+0xcc>)
 8001aca:	482c      	ldr	r0, [pc, #176]	@ (8001b7c <process_uart_command+0xd0>)
 8001acc:	f005 f920 	bl	8006d10 <HAL_UART_Receive>
	rcv_len = rx_buffer[0];
 8001ad0:	4b29      	ldr	r3, [pc, #164]	@ (8001b78 <process_uart_command+0xcc>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(&huart1, &rx_buffer[1], rcv_len, HAL_MAX_DELAY);
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	4928      	ldr	r1, [pc, #160]	@ (8001b80 <process_uart_command+0xd4>)
 8001ae0:	4826      	ldr	r0, [pc, #152]	@ (8001b7c <process_uart_command+0xd0>)
 8001ae2:	f005 f915 	bl	8006d10 <HAL_UART_Receive>
	switch(rx_buffer[1]){
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <process_uart_command+0xcc>)
 8001ae8:	785b      	ldrb	r3, [r3, #1]
 8001aea:	3b50      	subs	r3, #80	@ 0x50
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d8e2      	bhi.n	8001ab6 <process_uart_command+0xa>
 8001af0:	a201      	add	r2, pc, #4	@ (adr r2, 8001af8 <process_uart_command+0x4c>)
 8001af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af6:	bf00      	nop
 8001af8:	08001b3d 	.word	0x08001b3d
 8001afc:	08001b45 	.word	0x08001b45
 8001b00:	08001ab7 	.word	0x08001ab7
 8001b04:	08001b4d 	.word	0x08001b4d
 8001b08:	08001b55 	.word	0x08001b55
 8001b0c:	08001b5d 	.word	0x08001b5d
 8001b10:	08001ab7 	.word	0x08001ab7
 8001b14:	08001ab7 	.word	0x08001ab7
 8001b18:	08001b65 	.word	0x08001b65
 8001b1c:	08001ab7 	.word	0x08001ab7
 8001b20:	08001ab7 	.word	0x08001ab7
 8001b24:	08001ab7 	.word	0x08001ab7
 8001b28:	08001ab7 	.word	0x08001ab7
 8001b2c:	08001ab7 	.word	0x08001ab7
 8001b30:	08001ab7 	.word	0x08001ab7
 8001b34:	08001ab7 	.word	0x08001ab7
 8001b38:	08001b6d 	.word	0x08001b6d
	case BL_CHECK_CONNECTION:
		bl_check_connect_uart(rx_buffer);
 8001b3c:	480e      	ldr	r0, [pc, #56]	@ (8001b78 <process_uart_command+0xcc>)
 8001b3e:	f7fe ff81 	bl	8000a44 <bl_check_connect_uart>
		break;
 8001b42:	e018      	b.n	8001b76 <process_uart_command+0xca>
	case BL_WRITE_MEM:
		bl_write_mem_uart(rx_buffer);
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <process_uart_command+0xcc>)
 8001b46:	f7fe ffc9 	bl	8000adc <bl_write_mem_uart>
		break;
 8001b4a:	e014      	b.n	8001b76 <process_uart_command+0xca>
	case BL_CHECK_MEM:
		bl_check_mem_uart(rx_buffer);
 8001b4c:	480a      	ldr	r0, [pc, #40]	@ (8001b78 <process_uart_command+0xcc>)
 8001b4e:	f7ff fb6b 	bl	8001228 <bl_check_mem_uart>
		break;
 8001b52:	e010      	b.n	8001b76 <process_uart_command+0xca>
	case BL_DEL_MEM:
		bl_del_mem(rx_buffer);
 8001b54:	4808      	ldr	r0, [pc, #32]	@ (8001b78 <process_uart_command+0xcc>)
 8001b56:	f7ff fab7 	bl	80010c8 <bl_del_mem>
		break;
 8001b5a:	e00c      	b.n	8001b76 <process_uart_command+0xca>
	case BL_JUMP_TO_USER_CODE:
		bl_jump_to_code_uart(rx_buffer);
 8001b5c:	4806      	ldr	r0, [pc, #24]	@ (8001b78 <process_uart_command+0xcc>)
 8001b5e:	f7fe ff41 	bl	80009e4 <bl_jump_to_code_uart>
		break;
 8001b62:	e008      	b.n	8001b76 <process_uart_command+0xca>
	case BL_VERIFY_SIGNATURE:
		bl_verify_signature(rx_buffer);
 8001b64:	4804      	ldr	r0, [pc, #16]	@ (8001b78 <process_uart_command+0xcc>)
 8001b66:	f7ff fbbb 	bl	80012e0 <bl_verify_signature>
		break;
 8001b6a:	e004      	b.n	8001b76 <process_uart_command+0xca>
	case BL_CHECK_PREVIOUS_VERSION:
		bl_check_version(rx_buffer);
 8001b6c:	4802      	ldr	r0, [pc, #8]	@ (8001b78 <process_uart_command+0xcc>)
 8001b6e:	f7ff fd3f 	bl	80015f0 <bl_check_version>
		break;
 8001b72:	bf00      	nop
 8001b74:	e79f      	b.n	8001ab6 <process_uart_command+0xa>
	memset(rx_buffer, 0, 300);
 8001b76:	e79e      	b.n	8001ab6 <process_uart_command+0xa>
 8001b78:	240000b8 	.word	0x240000b8
 8001b7c:	24000294 	.word	0x24000294
 8001b80:	240000b9 	.word	0x240000b9

08001b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001b88:	f000 f8aa 	bl	8001ce0 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <main+0x78>)
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d11b      	bne.n	8001bd0 <main+0x4c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b98:	f3bf 8f4f 	dsb	sy
}
 8001b9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b9e:	f3bf 8f6f 	isb	sy
}
 8001ba2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ba4:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <main+0x78>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bac:	f3bf 8f4f 	dsb	sy
}
 8001bb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bb2:	f3bf 8f6f 	isb	sy
}
 8001bb6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bb8:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <main+0x78>)
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001bfc <main+0x78>)
 8001bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc4:	f3bf 8f4f 	dsb	sy
}
 8001bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bca:	f3bf 8f6f 	isb	sy
}
 8001bce:	e000      	b.n	8001bd2 <main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd0:	bf00      	nop
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd2:	f000 fbf9 	bl	80023c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd6:	f000 f813 	bl	8001c00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bda:	f7fe fdc9 	bl	8000770 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001bde:	f000 faa9 	bl	8002134 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001be2:	f000 fb07 	bl	80021f4 <MX_USART1_UART_Init>
  //MX_RNG_Init();
  MX_MBEDTLS_Init();
 8001be6:	f006 ff3b 	bl	8008a60 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */

  check_condition_jump_to_code_uart();
 8001bea:	f7ff fe9b 	bl	8001924 <check_condition_jump_to_code_uart>
  clear_flag();
 8001bee:	f7fe fef1 	bl	80009d4 <clear_flag>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  process_uart_command();
 8001bf2:	f7ff ff5b 	bl	8001aac <process_uart_command>
  while (1)
 8001bf6:	bf00      	nop
 8001bf8:	e7fd      	b.n	8001bf6 <main+0x72>
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b09c      	sub	sp, #112	@ 0x70
 8001c04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0a:	224c      	movs	r2, #76	@ 0x4c
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f013 fee4 	bl	80159dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2220      	movs	r2, #32
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f013 fede 	bl	80159dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c20:	2002      	movs	r0, #2
 8001c22:	f001 fe7f 	bl	8003924 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cdc <SystemClock_Config+0xdc>)
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8001cdc <SystemClock_Config+0xdc>)
 8001c30:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c34:	6193      	str	r3, [r2, #24]
 8001c36:	4b29      	ldr	r3, [pc, #164]	@ (8001cdc <SystemClock_Config+0xdc>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c42:	bf00      	nop
 8001c44:	4b25      	ldr	r3, [pc, #148]	@ (8001cdc <SystemClock_Config+0xdc>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c50:	d1f8      	bne.n	8001c44 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001c52:	2321      	movs	r3, #33	@ 0x21
 8001c54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c60:	2302      	movs	r3, #2
 8001c62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c64:	2302      	movs	r3, #2
 8001c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 8001c6c:	2344      	movs	r3, #68	@ 0x44
 8001c6e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 11;
 8001c74:	230b      	movs	r3, #11
 8001c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001c84:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001c88:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f001 fe82 	bl	8003998 <HAL_RCC_OscConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c9a:	f000 f887 	bl	8001dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c9e:	233f      	movs	r3, #63	@ 0x3f
 8001ca0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001caa:	2308      	movs	r3, #8
 8001cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001cae:	2340      	movs	r3, #64	@ 0x40
 8001cb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001cbc:	2340      	movs	r3, #64	@ 0x40
 8001cbe:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f002 fa41 	bl	800414c <HAL_RCC_ClockConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001cd0:	f000 f86c 	bl	8001dac <Error_Handler>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3770      	adds	r7, #112	@ 0x70
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	58024800 	.word	0x58024800

08001ce0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001cf2:	f000 fca5 	bl	8002640 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001d02:	231f      	movs	r3, #31
 8001d04:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001d06:	2387      	movs	r3, #135	@ 0x87
 8001d08:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d16:	2301      	movs	r3, #1
 8001d18:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d22:	463b      	mov	r3, r7
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fcc3 	bl	80026b0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001d2e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001d32:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001d34:	2309      	movs	r3, #9
 8001d36:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f000 fcae 	bl	80026b0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001d54:	2302      	movs	r3, #2
 8001d56:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30004000;
 8001d58:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <MPU_Config+0xa4>)
 8001d5a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001d5c:	230d      	movs	r3, #13
 8001d5e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001d60:	2301      	movs	r3, #1
 8001d62:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fc9e 	bl	80026b0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d74:	2004      	movs	r0, #4
 8001d76:	f000 fc7b 	bl	8002670 <HAL_MPU_Enable>

}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	30004000 	.word	0x30004000

08001d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
////
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a04      	ldr	r2, [pc, #16]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d101      	bne.n	8001d9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001d9a:	f000 fb51 	bl	8002440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
////
  /* USER CODE END Callback 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40010000 	.word	0x40010000

08001dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001db0:	b672      	cpsid	i
}
 8001db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <Error_Handler+0x8>

08001db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_MspInit+0x30>)
 8001dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dc4:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <HAL_MspInit+0x30>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_MspInit+0x30>)
 8001dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	58024400 	.word	0x58024400

08001dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08e      	sub	sp, #56	@ 0x38
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	d844      	bhi.n	8001e84 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	2019      	movs	r0, #25
 8001e00:	f000 fbf6 	bl	80025f0 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e04:	2019      	movs	r0, #25
 8001e06:	f000 fc0d 	bl	8002624 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001e0a:	4a24      	ldr	r2, [pc, #144]	@ (8001e9c <HAL_InitTick+0xb0>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e10:	4b23      	ldr	r3, [pc, #140]	@ (8001ea0 <HAL_InitTick+0xb4>)
 8001e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e16:	4a22      	ldr	r2, [pc, #136]	@ (8001ea0 <HAL_InitTick+0xb4>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_InitTick+0xb4>)
 8001e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e2e:	f107 020c 	add.w	r2, r7, #12
 8001e32:	f107 0310 	add.w	r3, r7, #16
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f002 fd13 	bl	8004864 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001e3e:	f002 fcfb 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 8001e42:	4603      	mov	r3, r0
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e4a:	4a16      	ldr	r2, [pc, #88]	@ (8001ea4 <HAL_InitTick+0xb8>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	0c9b      	lsrs	r3, r3, #18
 8001e52:	3b01      	subs	r3, #1
 8001e54:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e56:	4b14      	ldr	r3, [pc, #80]	@ (8001ea8 <HAL_InitTick+0xbc>)
 8001e58:	4a14      	ldr	r2, [pc, #80]	@ (8001eac <HAL_InitTick+0xc0>)
 8001e5a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_InitTick+0xbc>)
 8001e5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e62:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e64:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <HAL_InitTick+0xbc>)
 8001e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e68:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea8 <HAL_InitTick+0xbc>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea8 <HAL_InitTick+0xbc>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e76:	480c      	ldr	r0, [pc, #48]	@ (8001ea8 <HAL_InitTick+0xbc>)
 8001e78:	f004 faf8 	bl	800646c <HAL_TIM_Base_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d107      	bne.n	8001e92 <HAL_InitTick+0xa6>
 8001e82:	e001      	b.n	8001e88 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e005      	b.n	8001e94 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e88:	4807      	ldr	r0, [pc, #28]	@ (8001ea8 <HAL_InitTick+0xbc>)
 8001e8a:	f004 fb47 	bl	800651c <HAL_TIM_Base_Start_IT>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3738      	adds	r7, #56	@ 0x38
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	24000028 	.word	0x24000028
 8001ea0:	58024400 	.word	0x58024400
 8001ea4:	431bde83 	.word	0x431bde83
 8001ea8:	240001f8 	.word	0x240001f8
 8001eac:	40010000 	.word	0x40010000

08001eb0 <__NVIC_SystemReset>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb4:	f3bf 8f4f 	dsb	sy
}
 8001eb8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <__NVIC_SystemReset+0x24>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ec2:	4904      	ldr	r1, [pc, #16]	@ (8001ed4 <__NVIC_SystemReset+0x24>)
 8001ec4:	4b04      	ldr	r3, [pc, #16]	@ (8001ed8 <__NVIC_SystemReset+0x28>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eca:	f3bf 8f4f 	dsb	sy
}
 8001ece:	bf00      	nop
    __NOP();
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <__NVIC_SystemReset+0x20>
 8001ed4:	e000ed00 	.word	0xe000ed00
 8001ed8:	05fa0004 	.word	0x05fa0004

08001edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <NMI_Handler+0x4>

08001ee4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8001ee8:	f7ff ffe2 	bl	8001eb0 <__NVIC_SystemReset>

08001eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <MemManage_Handler+0x4>

08001ef4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <BusFault_Handler+0x4>

08001efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f00:	bf00      	nop
 8001f02:	e7fd      	b.n	8001f00 <UsageFault_Handler+0x4>

08001f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f40:	4802      	ldr	r0, [pc, #8]	@ (8001f4c <TIM1_UP_IRQHandler+0x10>)
 8001f42:	f004 fb71 	bl	8006628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	240001f8 	.word	0x240001f8

08001f50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <USART1_IRQHandler+0x10>)
 8001f56:	f004 ffa3 	bl	8006ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	24000294 	.word	0x24000294

08001f64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f68:	4802      	ldr	r0, [pc, #8]	@ (8001f74 <TIM6_DAC_IRQHandler+0x10>)
 8001f6a:	f004 fb5d 	bl	8006628 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	24000248 	.word	0x24000248

08001f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f80:	4a14      	ldr	r2, [pc, #80]	@ (8001fd4 <_sbrk+0x5c>)
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <_sbrk+0x60>)
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f8c:	4b13      	ldr	r3, [pc, #76]	@ (8001fdc <_sbrk+0x64>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f94:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <_sbrk+0x64>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <_sbrk+0x68>)
 8001f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f9a:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <_sbrk+0x64>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d207      	bcs.n	8001fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa8:	f013 fd30 	bl	8015a0c <__errno>
 8001fac:	4603      	mov	r3, r0
 8001fae:	220c      	movs	r2, #12
 8001fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	e009      	b.n	8001fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4a05      	ldr	r2, [pc, #20]	@ (8001fdc <_sbrk+0x64>)
 8001fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fca:	68fb      	ldr	r3, [r7, #12]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	24050000 	.word	0x24050000
 8001fd8:	00000400 	.word	0x00000400
 8001fdc:	24000244 	.word	0x24000244
 8001fe0:	240026e0 	.word	0x240026e0

08001fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80020e4 <SystemInit+0x100>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fee:	4a3d      	ldr	r2, [pc, #244]	@ (80020e4 <SystemInit+0x100>)
 8001ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80020e8 <SystemInit+0x104>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	2b06      	cmp	r3, #6
 8002002:	d807      	bhi.n	8002014 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002004:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <SystemInit+0x104>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 030f 	bic.w	r3, r3, #15
 800200c:	4a36      	ldr	r2, [pc, #216]	@ (80020e8 <SystemInit+0x104>)
 800200e:	f043 0307 	orr.w	r3, r3, #7
 8002012:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002014:	4b35      	ldr	r3, [pc, #212]	@ (80020ec <SystemInit+0x108>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a34      	ldr	r2, [pc, #208]	@ (80020ec <SystemInit+0x108>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002020:	4b32      	ldr	r3, [pc, #200]	@ (80020ec <SystemInit+0x108>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002026:	4b31      	ldr	r3, [pc, #196]	@ (80020ec <SystemInit+0x108>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4930      	ldr	r1, [pc, #192]	@ (80020ec <SystemInit+0x108>)
 800202c:	4b30      	ldr	r3, [pc, #192]	@ (80020f0 <SystemInit+0x10c>)
 800202e:	4013      	ands	r3, r2
 8002030:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002032:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <SystemInit+0x104>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800203e:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <SystemInit+0x104>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 030f 	bic.w	r3, r3, #15
 8002046:	4a28      	ldr	r2, [pc, #160]	@ (80020e8 <SystemInit+0x104>)
 8002048:	f043 0307 	orr.w	r3, r3, #7
 800204c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800204e:	4b27      	ldr	r3, [pc, #156]	@ (80020ec <SystemInit+0x108>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002054:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <SystemInit+0x108>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800205a:	4b24      	ldr	r3, [pc, #144]	@ (80020ec <SystemInit+0x108>)
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002060:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <SystemInit+0x108>)
 8002062:	4a24      	ldr	r2, [pc, #144]	@ (80020f4 <SystemInit+0x110>)
 8002064:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002066:	4b21      	ldr	r3, [pc, #132]	@ (80020ec <SystemInit+0x108>)
 8002068:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <SystemInit+0x114>)
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800206c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ec <SystemInit+0x108>)
 800206e:	4a23      	ldr	r2, [pc, #140]	@ (80020fc <SystemInit+0x118>)
 8002070:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <SystemInit+0x108>)
 8002074:	2200      	movs	r2, #0
 8002076:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002078:	4b1c      	ldr	r3, [pc, #112]	@ (80020ec <SystemInit+0x108>)
 800207a:	4a20      	ldr	r2, [pc, #128]	@ (80020fc <SystemInit+0x118>)
 800207c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800207e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <SystemInit+0x108>)
 8002080:	2200      	movs	r2, #0
 8002082:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002084:	4b19      	ldr	r3, [pc, #100]	@ (80020ec <SystemInit+0x108>)
 8002086:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <SystemInit+0x118>)
 8002088:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800208a:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <SystemInit+0x108>)
 800208c:	2200      	movs	r2, #0
 800208e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002090:	4b16      	ldr	r3, [pc, #88]	@ (80020ec <SystemInit+0x108>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a15      	ldr	r2, [pc, #84]	@ (80020ec <SystemInit+0x108>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <SystemInit+0x108>)
 800209e:	2200      	movs	r2, #0
 80020a0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80020a2:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <SystemInit+0x108>)
 80020a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d113      	bne.n	80020d8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80020b0:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <SystemInit+0x108>)
 80020b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020b6:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <SystemInit+0x108>)
 80020b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020bc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <SystemInit+0x11c>)
 80020c2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80020c6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <SystemInit+0x108>)
 80020ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80020ce:	4a07      	ldr	r2, [pc, #28]	@ (80020ec <SystemInit+0x108>)
 80020d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00
 80020e8:	52002000 	.word	0x52002000
 80020ec:	58024400 	.word	0x58024400
 80020f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80020f4:	02020200 	.word	0x02020200
 80020f8:	01ff0000 	.word	0x01ff0000
 80020fc:	01010280 	.word	0x01010280
 8002100:	52004000 	.word	0x52004000

08002104 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <ExitRun0Mode+0x2c>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a08      	ldr	r2, [pc, #32]	@ (8002130 <ExitRun0Mode+0x2c>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002114:	bf00      	nop
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <ExitRun0Mode+0x2c>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f9      	beq.n	8002116 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	58024800 	.word	0x58024800

08002134 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002144:	4b15      	ldr	r3, [pc, #84]	@ (800219c <MX_TIM6_Init+0x68>)
 8002146:	4a16      	ldr	r2, [pc, #88]	@ (80021a0 <MX_TIM6_Init+0x6c>)
 8002148:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 800214a:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_TIM6_Init+0x68>)
 800214c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8002150:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002152:	4b12      	ldr	r3, [pc, #72]	@ (800219c <MX_TIM6_Init+0x68>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002158:	4b10      	ldr	r3, [pc, #64]	@ (800219c <MX_TIM6_Init+0x68>)
 800215a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800215e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002160:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <MX_TIM6_Init+0x68>)
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002166:	480d      	ldr	r0, [pc, #52]	@ (800219c <MX_TIM6_Init+0x68>)
 8002168:	f004 f980 	bl	800646c <HAL_TIM_Base_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002172:	f7ff fe1b 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	4619      	mov	r1, r3
 8002182:	4806      	ldr	r0, [pc, #24]	@ (800219c <MX_TIM6_Init+0x68>)
 8002184:	f004 fc2c 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800218e:	f7ff fe0d 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	24000248 	.word	0x24000248
 80021a0:	40001000 	.word	0x40001000

080021a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0e      	ldr	r2, [pc, #56]	@ (80021ec <HAL_TIM_Base_MspInit+0x48>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d116      	bne.n	80021e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80021b6:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <HAL_TIM_Base_MspInit+0x4c>)
 80021b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021bc:	4a0c      	ldr	r2, [pc, #48]	@ (80021f0 <HAL_TIM_Base_MspInit+0x4c>)
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021c6:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_TIM_Base_MspInit+0x4c>)
 80021c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	210f      	movs	r1, #15
 80021d8:	2036      	movs	r0, #54	@ 0x36
 80021da:	f000 fa09 	bl	80025f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021de:	2036      	movs	r0, #54	@ 0x36
 80021e0:	f000 fa20 	bl	8002624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40001000 	.word	0x40001000
 80021f0:	58024400 	.word	0x58024400

080021f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021f8:	4b22      	ldr	r3, [pc, #136]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 80021fa:	4a23      	ldr	r2, [pc, #140]	@ (8002288 <MX_USART1_UART_Init+0x94>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021fe:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002212:	4b1c      	ldr	r3, [pc, #112]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222a:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002236:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002238:	2200      	movs	r2, #0
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800223c:	4811      	ldr	r0, [pc, #68]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 800223e:	f004 fc89 	bl	8006b54 <HAL_UART_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002248:	f7ff fdb0 	bl	8001dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800224c:	2100      	movs	r1, #0
 800224e:	480d      	ldr	r0, [pc, #52]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002250:	f006 fb3c 	bl	80088cc <HAL_UARTEx_SetTxFifoThreshold>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800225a:	f7ff fda7 	bl	8001dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800225e:	2100      	movs	r1, #0
 8002260:	4808      	ldr	r0, [pc, #32]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002262:	f006 fb71 	bl	8008948 <HAL_UARTEx_SetRxFifoThreshold>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800226c:	f7ff fd9e 	bl	8001dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	@ (8002284 <MX_USART1_UART_Init+0x90>)
 8002272:	f006 faf2 	bl	800885a <HAL_UARTEx_DisableFifoMode>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800227c:	f7ff fd96 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	24000294 	.word	0x24000294
 8002288:	40011000 	.word	0x40011000

0800228c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b0b8      	sub	sp, #224	@ 0xe0
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022a4:	f107 0310 	add.w	r3, r7, #16
 80022a8:	22b8      	movs	r2, #184	@ 0xb8
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f013 fb95 	bl	80159dc <memset>
  if(uartHandle->Instance==USART1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002364 <HAL_UART_MspInit+0xd8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d14e      	bne.n	800235a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022bc:	f04f 0201 	mov.w	r2, #1
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ce:	f107 0310 	add.w	r3, r7, #16
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fb08 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022de:	f7ff fd65 	bl	8001dac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e2:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <HAL_UART_MspInit+0xdc>)
 80022e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002368 <HAL_UART_MspInit+0xdc>)
 80022ea:	f043 0310 	orr.w	r3, r3, #16
 80022ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002368 <HAL_UART_MspInit+0xdc>)
 80022f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <HAL_UART_MspInit+0xdc>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002306:	4a18      	ldr	r2, [pc, #96]	@ (8002368 <HAL_UART_MspInit+0xdc>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002310:	4b15      	ldr	r3, [pc, #84]	@ (8002368 <HAL_UART_MspInit+0xdc>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800231e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002322:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002326:	2302      	movs	r3, #2
 8002328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002338:	2304      	movs	r3, #4
 800233a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002342:	4619      	mov	r1, r3
 8002344:	4809      	ldr	r0, [pc, #36]	@ (800236c <HAL_UART_MspInit+0xe0>)
 8002346:	f001 f92b 	bl	80035a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2025      	movs	r0, #37	@ 0x25
 8002350:	f000 f94e 	bl	80025f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002354:	2025      	movs	r0, #37	@ 0x25
 8002356:	f000 f965 	bl	8002624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800235a:	bf00      	nop
 800235c:	37e0      	adds	r7, #224	@ 0xe0
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40011000 	.word	0x40011000
 8002368:	58024400 	.word	0x58024400
 800236c:	58020400 	.word	0x58020400

08002370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002370:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80023ac <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002374:	f7ff fec6 	bl	8002104 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002378:	f7ff fe34 	bl	8001fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800237c:	480c      	ldr	r0, [pc, #48]	@ (80023b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800237e:	490d      	ldr	r1, [pc, #52]	@ (80023b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002380:	4a0d      	ldr	r2, [pc, #52]	@ (80023b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002384:	e002      	b.n	800238c <LoopCopyDataInit>

08002386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238a:	3304      	adds	r3, #4

0800238c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800238c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002390:	d3f9      	bcc.n	8002386 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002392:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002394:	4c0a      	ldr	r4, [pc, #40]	@ (80023c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002398:	e001      	b.n	800239e <LoopFillZerobss>

0800239a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800239c:	3204      	adds	r2, #4

0800239e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a0:	d3fb      	bcc.n	800239a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023a2:	f013 fb39 	bl	8015a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023a6:	f7ff fbed 	bl	8001b84 <main>
  bx  lr
 80023aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023ac:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80023b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023b4:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 80023b8:	080173d8 	.word	0x080173d8
  ldr r2, =_sbss
 80023bc:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 80023c0:	240026e0 	.word	0x240026e0

080023c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c4:	e7fe      	b.n	80023c4 <ADC3_IRQHandler>
	...

080023c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023ce:	2003      	movs	r0, #3
 80023d0:	f000 f903 	bl	80025da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023d4:	f002 f870 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <HAL_Init+0x68>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	4913      	ldr	r1, [pc, #76]	@ (8002434 <HAL_Init+0x6c>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	f003 031f 	and.w	r3, r3, #31
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <HAL_Init+0x68>)
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002434 <HAL_Init+0x6c>)
 80023fc:	5cd3      	ldrb	r3, [r2, r3]
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	4a0b      	ldr	r2, [pc, #44]	@ (8002438 <HAL_Init+0x70>)
 800240a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800240c:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <HAL_Init+0x74>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002412:	200f      	movs	r0, #15
 8002414:	f7ff fcea 	bl	8001dec <HAL_InitTick>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e002      	b.n	8002428 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002422:	f7ff fcc9 	bl	8001db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	58024400 	.word	0x58024400
 8002434:	080169a0 	.word	0x080169a0
 8002438:	24000024 	.word	0x24000024
 800243c:	24000020 	.word	0x24000020

08002440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_IncTick+0x20>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	4b06      	ldr	r3, [pc, #24]	@ (8002464 <HAL_IncTick+0x24>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4413      	add	r3, r2
 8002450:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <HAL_IncTick+0x24>)
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	2400002c 	.word	0x2400002c
 8002464:	24000328 	.word	0x24000328

08002468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return uwTick;
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_GetTick+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	24000328 	.word	0x24000328

08002480 <__NVIC_SetPriorityGrouping>:
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800249c:	4013      	ands	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <__NVIC_SetPriorityGrouping+0x44>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ae:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <__NVIC_SetPriorityGrouping+0x40>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	60d3      	str	r3, [r2, #12]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00
 80024c4:	05fa0000 	.word	0x05fa0000

080024c8 <__NVIC_GetPriorityGrouping>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024cc:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	f003 0307 	and.w	r3, r3, #7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_EnableIRQ>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db0b      	blt.n	800250e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	4907      	ldr	r1, [pc, #28]	@ (800251c <__NVIC_EnableIRQ+0x38>)
 80024fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002502:	095b      	lsrs	r3, r3, #5
 8002504:	2001      	movs	r0, #1
 8002506:	fa00 f202 	lsl.w	r2, r0, r2
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100

08002520 <__NVIC_SetPriority>:
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800252c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002530:	2b00      	cmp	r3, #0
 8002532:	db0a      	blt.n	800254a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	b2da      	uxtb	r2, r3
 8002538:	490c      	ldr	r1, [pc, #48]	@ (800256c <__NVIC_SetPriority+0x4c>)
 800253a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800253e:	0112      	lsls	r2, r2, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	440b      	add	r3, r1
 8002544:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002548:	e00a      	b.n	8002560 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4908      	ldr	r1, [pc, #32]	@ (8002570 <__NVIC_SetPriority+0x50>)
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	3b04      	subs	r3, #4
 8002558:	0112      	lsls	r2, r2, #4
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	440b      	add	r3, r1
 800255e:	761a      	strb	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	e000e100 	.word	0xe000e100
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <NVIC_EncodePriority>:
{
 8002574:	b480      	push	{r7}
 8002576:	b089      	sub	sp, #36	@ 0x24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f1c3 0307 	rsb	r3, r3, #7
 800258e:	2b04      	cmp	r3, #4
 8002590:	bf28      	it	cs
 8002592:	2304      	movcs	r3, #4
 8002594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3304      	adds	r3, #4
 800259a:	2b06      	cmp	r3, #6
 800259c:	d902      	bls.n	80025a4 <NVIC_EncodePriority+0x30>
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	3b03      	subs	r3, #3
 80025a2:	e000      	b.n	80025a6 <NVIC_EncodePriority+0x32>
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	401a      	ands	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa01 f303 	lsl.w	r3, r1, r3
 80025c6:	43d9      	mvns	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	4313      	orrs	r3, r2
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3724      	adds	r7, #36	@ 0x24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ff4c 	bl	8002480 <__NVIC_SetPriorityGrouping>
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fe:	f7ff ff63 	bl	80024c8 <__NVIC_GetPriorityGrouping>
 8002602:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	f7ff ffb3 	bl	8002574 <NVIC_EncodePriority>
 800260e:	4602      	mov	r2, r0
 8002610:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff82 	bl	8002520 <__NVIC_SetPriority>
}
 800261c:	bf00      	nop
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff56 	bl	80024e4 <__NVIC_EnableIRQ>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002644:	f3bf 8f5f 	dmb	sy
}
 8002648:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800264a:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <HAL_MPU_Disable+0x28>)
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	4a06      	ldr	r2, [pc, #24]	@ (8002668 <HAL_MPU_Disable+0x28>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002654:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_MPU_Disable+0x2c>)
 8002658:	2200      	movs	r2, #0
 800265a:	605a      	str	r2, [r3, #4]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00
 800266c:	e000ed90 	.word	0xe000ed90

08002670 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002678:	4a0b      	ldr	r2, [pc, #44]	@ (80026a8 <HAL_MPU_Enable+0x38>)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <HAL_MPU_Enable+0x3c>)
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	4a09      	ldr	r2, [pc, #36]	@ (80026ac <HAL_MPU_Enable+0x3c>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800268e:	f3bf 8f4f 	dsb	sy
}
 8002692:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002694:	f3bf 8f6f 	isb	sy
}
 8002698:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed90 	.word	0xe000ed90
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	785a      	ldrb	r2, [r3, #1]
 80026bc:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
 80026be:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80026c0:	4b1a      	ldr	r3, [pc, #104]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	4a19      	ldr	r2, [pc, #100]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80026cc:	4a17      	ldr	r2, [pc, #92]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	7b1b      	ldrb	r3, [r3, #12]
 80026d8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7adb      	ldrb	r3, [r3, #11]
 80026de:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80026e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	7a9b      	ldrb	r3, [r3, #10]
 80026e6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80026e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7b5b      	ldrb	r3, [r3, #13]
 80026ee:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80026f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7b9b      	ldrb	r3, [r3, #14]
 80026f6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80026f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7bdb      	ldrb	r3, [r3, #15]
 80026fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002700:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7a5b      	ldrb	r3, [r3, #9]
 8002706:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7a1b      	ldrb	r3, [r3, #8]
 800270e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002710:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	7812      	ldrb	r2, [r2, #0]
 8002716:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002718:	4a04      	ldr	r2, [pc, #16]	@ (800272c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800271a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800271c:	6113      	str	r3, [r2, #16]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	e000ed90 	.word	0xe000ed90

08002730 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff fe96 	bl	8002468 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e2dc      	b.n	8002d02 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d008      	beq.n	8002766 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2280      	movs	r2, #128	@ 0x80
 8002758:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e2cd      	b.n	8002d02 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a76      	ldr	r2, [pc, #472]	@ (8002944 <HAL_DMA_Abort+0x214>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d04a      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a74      	ldr	r2, [pc, #464]	@ (8002948 <HAL_DMA_Abort+0x218>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d045      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a73      	ldr	r2, [pc, #460]	@ (800294c <HAL_DMA_Abort+0x21c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d040      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a71      	ldr	r2, [pc, #452]	@ (8002950 <HAL_DMA_Abort+0x220>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d03b      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a70      	ldr	r2, [pc, #448]	@ (8002954 <HAL_DMA_Abort+0x224>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d036      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a6e      	ldr	r2, [pc, #440]	@ (8002958 <HAL_DMA_Abort+0x228>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d031      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6d      	ldr	r2, [pc, #436]	@ (800295c <HAL_DMA_Abort+0x22c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d02c      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002960 <HAL_DMA_Abort+0x230>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d027      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002964 <HAL_DMA_Abort+0x234>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d022      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a68      	ldr	r2, [pc, #416]	@ (8002968 <HAL_DMA_Abort+0x238>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d01d      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a67      	ldr	r2, [pc, #412]	@ (800296c <HAL_DMA_Abort+0x23c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d018      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a65      	ldr	r2, [pc, #404]	@ (8002970 <HAL_DMA_Abort+0x240>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a64      	ldr	r2, [pc, #400]	@ (8002974 <HAL_DMA_Abort+0x244>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d00e      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a62      	ldr	r2, [pc, #392]	@ (8002978 <HAL_DMA_Abort+0x248>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a61      	ldr	r2, [pc, #388]	@ (800297c <HAL_DMA_Abort+0x24c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d004      	beq.n	8002806 <HAL_DMA_Abort+0xd6>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a5f      	ldr	r2, [pc, #380]	@ (8002980 <HAL_DMA_Abort+0x250>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_DMA_Abort+0xda>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_DMA_Abort+0xdc>
 800280a:	2300      	movs	r3, #0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d013      	beq.n	8002838 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 021e 	bic.w	r2, r2, #30
 800281e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800282e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e00a      	b.n	800284e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 020e 	bic.w	r2, r2, #14
 8002846:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a3c      	ldr	r2, [pc, #240]	@ (8002944 <HAL_DMA_Abort+0x214>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d072      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a3a      	ldr	r2, [pc, #232]	@ (8002948 <HAL_DMA_Abort+0x218>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d06d      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a39      	ldr	r2, [pc, #228]	@ (800294c <HAL_DMA_Abort+0x21c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d068      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a37      	ldr	r2, [pc, #220]	@ (8002950 <HAL_DMA_Abort+0x220>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d063      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a36      	ldr	r2, [pc, #216]	@ (8002954 <HAL_DMA_Abort+0x224>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d05e      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a34      	ldr	r2, [pc, #208]	@ (8002958 <HAL_DMA_Abort+0x228>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d059      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a33      	ldr	r2, [pc, #204]	@ (800295c <HAL_DMA_Abort+0x22c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d054      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a31      	ldr	r2, [pc, #196]	@ (8002960 <HAL_DMA_Abort+0x230>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d04f      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a30      	ldr	r2, [pc, #192]	@ (8002964 <HAL_DMA_Abort+0x234>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d04a      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2e      	ldr	r2, [pc, #184]	@ (8002968 <HAL_DMA_Abort+0x238>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d045      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2d      	ldr	r2, [pc, #180]	@ (800296c <HAL_DMA_Abort+0x23c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d040      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002970 <HAL_DMA_Abort+0x240>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d03b      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002974 <HAL_DMA_Abort+0x244>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d036      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a28      	ldr	r2, [pc, #160]	@ (8002978 <HAL_DMA_Abort+0x248>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d031      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a27      	ldr	r2, [pc, #156]	@ (800297c <HAL_DMA_Abort+0x24c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d02c      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a25      	ldr	r2, [pc, #148]	@ (8002980 <HAL_DMA_Abort+0x250>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d027      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a24      	ldr	r2, [pc, #144]	@ (8002984 <HAL_DMA_Abort+0x254>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a22      	ldr	r2, [pc, #136]	@ (8002988 <HAL_DMA_Abort+0x258>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01d      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a21      	ldr	r2, [pc, #132]	@ (800298c <HAL_DMA_Abort+0x25c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d018      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1f      	ldr	r2, [pc, #124]	@ (8002990 <HAL_DMA_Abort+0x260>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1e      	ldr	r2, [pc, #120]	@ (8002994 <HAL_DMA_Abort+0x264>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d00e      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1c      	ldr	r2, [pc, #112]	@ (8002998 <HAL_DMA_Abort+0x268>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1b      	ldr	r2, [pc, #108]	@ (800299c <HAL_DMA_Abort+0x26c>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d004      	beq.n	800293e <HAL_DMA_Abort+0x20e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_DMA_Abort+0x270>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d132      	bne.n	80029a4 <HAL_DMA_Abort+0x274>
 800293e:	2301      	movs	r3, #1
 8002940:	e031      	b.n	80029a6 <HAL_DMA_Abort+0x276>
 8002942:	bf00      	nop
 8002944:	40020010 	.word	0x40020010
 8002948:	40020028 	.word	0x40020028
 800294c:	40020040 	.word	0x40020040
 8002950:	40020058 	.word	0x40020058
 8002954:	40020070 	.word	0x40020070
 8002958:	40020088 	.word	0x40020088
 800295c:	400200a0 	.word	0x400200a0
 8002960:	400200b8 	.word	0x400200b8
 8002964:	40020410 	.word	0x40020410
 8002968:	40020428 	.word	0x40020428
 800296c:	40020440 	.word	0x40020440
 8002970:	40020458 	.word	0x40020458
 8002974:	40020470 	.word	0x40020470
 8002978:	40020488 	.word	0x40020488
 800297c:	400204a0 	.word	0x400204a0
 8002980:	400204b8 	.word	0x400204b8
 8002984:	58025408 	.word	0x58025408
 8002988:	5802541c 	.word	0x5802541c
 800298c:	58025430 	.word	0x58025430
 8002990:	58025444 	.word	0x58025444
 8002994:	58025458 	.word	0x58025458
 8002998:	5802546c 	.word	0x5802546c
 800299c:	58025480 	.word	0x58025480
 80029a0:	58025494 	.word	0x58025494
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6d      	ldr	r2, [pc, #436]	@ (8002b74 <HAL_DMA_Abort+0x444>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d04a      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6b      	ldr	r2, [pc, #428]	@ (8002b78 <HAL_DMA_Abort+0x448>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d045      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6a      	ldr	r2, [pc, #424]	@ (8002b7c <HAL_DMA_Abort+0x44c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d040      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a68      	ldr	r2, [pc, #416]	@ (8002b80 <HAL_DMA_Abort+0x450>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d03b      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a67      	ldr	r2, [pc, #412]	@ (8002b84 <HAL_DMA_Abort+0x454>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d036      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a65      	ldr	r2, [pc, #404]	@ (8002b88 <HAL_DMA_Abort+0x458>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d031      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a64      	ldr	r2, [pc, #400]	@ (8002b8c <HAL_DMA_Abort+0x45c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d02c      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a62      	ldr	r2, [pc, #392]	@ (8002b90 <HAL_DMA_Abort+0x460>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d027      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a61      	ldr	r2, [pc, #388]	@ (8002b94 <HAL_DMA_Abort+0x464>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d022      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a5f      	ldr	r2, [pc, #380]	@ (8002b98 <HAL_DMA_Abort+0x468>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d01d      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5e      	ldr	r2, [pc, #376]	@ (8002b9c <HAL_DMA_Abort+0x46c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d018      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a5c      	ldr	r2, [pc, #368]	@ (8002ba0 <HAL_DMA_Abort+0x470>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d013      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ba4 <HAL_DMA_Abort+0x474>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a59      	ldr	r2, [pc, #356]	@ (8002ba8 <HAL_DMA_Abort+0x478>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d009      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a58      	ldr	r2, [pc, #352]	@ (8002bac <HAL_DMA_Abort+0x47c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_DMA_Abort+0x32a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a56      	ldr	r2, [pc, #344]	@ (8002bb0 <HAL_DMA_Abort+0x480>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d108      	bne.n	8002a6c <HAL_DMA_Abort+0x33c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e007      	b.n	8002a7c <HAL_DMA_Abort+0x34c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a7c:	e013      	b.n	8002aa6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7e:	f7ff fcf3 	bl	8002468 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d90c      	bls.n	8002aa6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2203      	movs	r2, #3
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e12d      	b.n	8002d02 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1e5      	bne.n	8002a7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8002b74 <HAL_DMA_Abort+0x444>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d04a      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8002b78 <HAL_DMA_Abort+0x448>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d045      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2c      	ldr	r2, [pc, #176]	@ (8002b7c <HAL_DMA_Abort+0x44c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d040      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	@ (8002b80 <HAL_DMA_Abort+0x450>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d03b      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a29      	ldr	r2, [pc, #164]	@ (8002b84 <HAL_DMA_Abort+0x454>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d036      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a27      	ldr	r2, [pc, #156]	@ (8002b88 <HAL_DMA_Abort+0x458>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d031      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a26      	ldr	r2, [pc, #152]	@ (8002b8c <HAL_DMA_Abort+0x45c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d02c      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a24      	ldr	r2, [pc, #144]	@ (8002b90 <HAL_DMA_Abort+0x460>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d027      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a23      	ldr	r2, [pc, #140]	@ (8002b94 <HAL_DMA_Abort+0x464>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a21      	ldr	r2, [pc, #132]	@ (8002b98 <HAL_DMA_Abort+0x468>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01d      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a20      	ldr	r2, [pc, #128]	@ (8002b9c <HAL_DMA_Abort+0x46c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba0 <HAL_DMA_Abort+0x470>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba4 <HAL_DMA_Abort+0x474>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba8 <HAL_DMA_Abort+0x478>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1a      	ldr	r2, [pc, #104]	@ (8002bac <HAL_DMA_Abort+0x47c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_DMA_Abort+0x422>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a18      	ldr	r2, [pc, #96]	@ (8002bb0 <HAL_DMA_Abort+0x480>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_DMA_Abort+0x426>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_DMA_Abort+0x428>
 8002b56:	2300      	movs	r3, #0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d02b      	beq.n	8002bb4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	223f      	movs	r2, #63	@ 0x3f
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	e02a      	b.n	8002bca <HAL_DMA_Abort+0x49a>
 8002b74:	40020010 	.word	0x40020010
 8002b78:	40020028 	.word	0x40020028
 8002b7c:	40020040 	.word	0x40020040
 8002b80:	40020058 	.word	0x40020058
 8002b84:	40020070 	.word	0x40020070
 8002b88:	40020088 	.word	0x40020088
 8002b8c:	400200a0 	.word	0x400200a0
 8002b90:	400200b8 	.word	0x400200b8
 8002b94:	40020410 	.word	0x40020410
 8002b98:	40020428 	.word	0x40020428
 8002b9c:	40020440 	.word	0x40020440
 8002ba0:	40020458 	.word	0x40020458
 8002ba4:	40020470 	.word	0x40020470
 8002ba8:	40020488 	.word	0x40020488
 8002bac:	400204a0 	.word	0x400204a0
 8002bb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4f      	ldr	r2, [pc, #316]	@ (8002d0c <HAL_DMA_Abort+0x5dc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d072      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d10 <HAL_DMA_Abort+0x5e0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d06d      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a4c      	ldr	r2, [pc, #304]	@ (8002d14 <HAL_DMA_Abort+0x5e4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d068      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a4a      	ldr	r2, [pc, #296]	@ (8002d18 <HAL_DMA_Abort+0x5e8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d063      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a49      	ldr	r2, [pc, #292]	@ (8002d1c <HAL_DMA_Abort+0x5ec>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d05e      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a47      	ldr	r2, [pc, #284]	@ (8002d20 <HAL_DMA_Abort+0x5f0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d059      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a46      	ldr	r2, [pc, #280]	@ (8002d24 <HAL_DMA_Abort+0x5f4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d054      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a44      	ldr	r2, [pc, #272]	@ (8002d28 <HAL_DMA_Abort+0x5f8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d04f      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a43      	ldr	r2, [pc, #268]	@ (8002d2c <HAL_DMA_Abort+0x5fc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d04a      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a41      	ldr	r2, [pc, #260]	@ (8002d30 <HAL_DMA_Abort+0x600>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d045      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a40      	ldr	r2, [pc, #256]	@ (8002d34 <HAL_DMA_Abort+0x604>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d040      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d38 <HAL_DMA_Abort+0x608>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d03b      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a3d      	ldr	r2, [pc, #244]	@ (8002d3c <HAL_DMA_Abort+0x60c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d036      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3b      	ldr	r2, [pc, #236]	@ (8002d40 <HAL_DMA_Abort+0x610>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d031      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d44 <HAL_DMA_Abort+0x614>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d02c      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a38      	ldr	r2, [pc, #224]	@ (8002d48 <HAL_DMA_Abort+0x618>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d027      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a37      	ldr	r2, [pc, #220]	@ (8002d4c <HAL_DMA_Abort+0x61c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d022      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a35      	ldr	r2, [pc, #212]	@ (8002d50 <HAL_DMA_Abort+0x620>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01d      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a34      	ldr	r2, [pc, #208]	@ (8002d54 <HAL_DMA_Abort+0x624>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d018      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a32      	ldr	r2, [pc, #200]	@ (8002d58 <HAL_DMA_Abort+0x628>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a31      	ldr	r2, [pc, #196]	@ (8002d5c <HAL_DMA_Abort+0x62c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00e      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d60 <HAL_DMA_Abort+0x630>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d009      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2e      	ldr	r2, [pc, #184]	@ (8002d64 <HAL_DMA_Abort+0x634>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d004      	beq.n	8002cba <HAL_DMA_Abort+0x58a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002d68 <HAL_DMA_Abort+0x638>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_DMA_Abort+0x58e>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_DMA_Abort+0x590>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d015      	beq.n	8002cf0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ccc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002cee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40020010 	.word	0x40020010
 8002d10:	40020028 	.word	0x40020028
 8002d14:	40020040 	.word	0x40020040
 8002d18:	40020058 	.word	0x40020058
 8002d1c:	40020070 	.word	0x40020070
 8002d20:	40020088 	.word	0x40020088
 8002d24:	400200a0 	.word	0x400200a0
 8002d28:	400200b8 	.word	0x400200b8
 8002d2c:	40020410 	.word	0x40020410
 8002d30:	40020428 	.word	0x40020428
 8002d34:	40020440 	.word	0x40020440
 8002d38:	40020458 	.word	0x40020458
 8002d3c:	40020470 	.word	0x40020470
 8002d40:	40020488 	.word	0x40020488
 8002d44:	400204a0 	.word	0x400204a0
 8002d48:	400204b8 	.word	0x400204b8
 8002d4c:	58025408 	.word	0x58025408
 8002d50:	5802541c 	.word	0x5802541c
 8002d54:	58025430 	.word	0x58025430
 8002d58:	58025444 	.word	0x58025444
 8002d5c:	58025458 	.word	0x58025458
 8002d60:	5802546c 	.word	0x5802546c
 8002d64:	58025480 	.word	0x58025480
 8002d68:	58025494 	.word	0x58025494

08002d6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e237      	b.n	80031ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d004      	beq.n	8002d94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2280      	movs	r2, #128	@ 0x80
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e22c      	b.n	80031ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a5c      	ldr	r2, [pc, #368]	@ (8002f0c <HAL_DMA_Abort_IT+0x1a0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d04a      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f10 <HAL_DMA_Abort_IT+0x1a4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d045      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a59      	ldr	r2, [pc, #356]	@ (8002f14 <HAL_DMA_Abort_IT+0x1a8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d040      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a58      	ldr	r2, [pc, #352]	@ (8002f18 <HAL_DMA_Abort_IT+0x1ac>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d03b      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a56      	ldr	r2, [pc, #344]	@ (8002f1c <HAL_DMA_Abort_IT+0x1b0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d036      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a55      	ldr	r2, [pc, #340]	@ (8002f20 <HAL_DMA_Abort_IT+0x1b4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d031      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a53      	ldr	r2, [pc, #332]	@ (8002f24 <HAL_DMA_Abort_IT+0x1b8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d02c      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a52      	ldr	r2, [pc, #328]	@ (8002f28 <HAL_DMA_Abort_IT+0x1bc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d027      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a50      	ldr	r2, [pc, #320]	@ (8002f2c <HAL_DMA_Abort_IT+0x1c0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d022      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a4f      	ldr	r2, [pc, #316]	@ (8002f30 <HAL_DMA_Abort_IT+0x1c4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d01d      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a4d      	ldr	r2, [pc, #308]	@ (8002f34 <HAL_DMA_Abort_IT+0x1c8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d018      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a4c      	ldr	r2, [pc, #304]	@ (8002f38 <HAL_DMA_Abort_IT+0x1cc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a4a      	ldr	r2, [pc, #296]	@ (8002f3c <HAL_DMA_Abort_IT+0x1d0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00e      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a49      	ldr	r2, [pc, #292]	@ (8002f40 <HAL_DMA_Abort_IT+0x1d4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d009      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a47      	ldr	r2, [pc, #284]	@ (8002f44 <HAL_DMA_Abort_IT+0x1d8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_DMA_Abort_IT+0xc8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a46      	ldr	r2, [pc, #280]	@ (8002f48 <HAL_DMA_Abort_IT+0x1dc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_DMA_Abort_IT+0xcc>
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_DMA_Abort_IT+0xce>
 8002e38:	2300      	movs	r3, #0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8086 	beq.w	8002f4c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2204      	movs	r2, #4
 8002e44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f0c <HAL_DMA_Abort_IT+0x1a0>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d04a      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2e      	ldr	r2, [pc, #184]	@ (8002f10 <HAL_DMA_Abort_IT+0x1a4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d045      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2c      	ldr	r2, [pc, #176]	@ (8002f14 <HAL_DMA_Abort_IT+0x1a8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d040      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8002f18 <HAL_DMA_Abort_IT+0x1ac>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d03b      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a29      	ldr	r2, [pc, #164]	@ (8002f1c <HAL_DMA_Abort_IT+0x1b0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d036      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a28      	ldr	r2, [pc, #160]	@ (8002f20 <HAL_DMA_Abort_IT+0x1b4>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d031      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a26      	ldr	r2, [pc, #152]	@ (8002f24 <HAL_DMA_Abort_IT+0x1b8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d02c      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a25      	ldr	r2, [pc, #148]	@ (8002f28 <HAL_DMA_Abort_IT+0x1bc>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d027      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <HAL_DMA_Abort_IT+0x1c0>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d022      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <HAL_DMA_Abort_IT+0x1c4>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d01d      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	@ (8002f34 <HAL_DMA_Abort_IT+0x1c8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d018      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a1f      	ldr	r2, [pc, #124]	@ (8002f38 <HAL_DMA_Abort_IT+0x1cc>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d013      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8002f3c <HAL_DMA_Abort_IT+0x1d0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1c      	ldr	r2, [pc, #112]	@ (8002f40 <HAL_DMA_Abort_IT+0x1d4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d009      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f44 <HAL_DMA_Abort_IT+0x1d8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_DMA_Abort_IT+0x17c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a19      	ldr	r2, [pc, #100]	@ (8002f48 <HAL_DMA_Abort_IT+0x1dc>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d108      	bne.n	8002efa <HAL_DMA_Abort_IT+0x18e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e178      	b.n	80031ec <HAL_DMA_Abort_IT+0x480>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e16f      	b.n	80031ec <HAL_DMA_Abort_IT+0x480>
 8002f0c:	40020010 	.word	0x40020010
 8002f10:	40020028 	.word	0x40020028
 8002f14:	40020040 	.word	0x40020040
 8002f18:	40020058 	.word	0x40020058
 8002f1c:	40020070 	.word	0x40020070
 8002f20:	40020088 	.word	0x40020088
 8002f24:	400200a0 	.word	0x400200a0
 8002f28:	400200b8 	.word	0x400200b8
 8002f2c:	40020410 	.word	0x40020410
 8002f30:	40020428 	.word	0x40020428
 8002f34:	40020440 	.word	0x40020440
 8002f38:	40020458 	.word	0x40020458
 8002f3c:	40020470 	.word	0x40020470
 8002f40:	40020488 	.word	0x40020488
 8002f44:	400204a0 	.word	0x400204a0
 8002f48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 020e 	bic.w	r2, r2, #14
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a6c      	ldr	r2, [pc, #432]	@ (8003114 <HAL_DMA_Abort_IT+0x3a8>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d04a      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a6b      	ldr	r2, [pc, #428]	@ (8003118 <HAL_DMA_Abort_IT+0x3ac>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d045      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a69      	ldr	r2, [pc, #420]	@ (800311c <HAL_DMA_Abort_IT+0x3b0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d040      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a68      	ldr	r2, [pc, #416]	@ (8003120 <HAL_DMA_Abort_IT+0x3b4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d03b      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a66      	ldr	r2, [pc, #408]	@ (8003124 <HAL_DMA_Abort_IT+0x3b8>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d036      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a65      	ldr	r2, [pc, #404]	@ (8003128 <HAL_DMA_Abort_IT+0x3bc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d031      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a63      	ldr	r2, [pc, #396]	@ (800312c <HAL_DMA_Abort_IT+0x3c0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02c      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a62      	ldr	r2, [pc, #392]	@ (8003130 <HAL_DMA_Abort_IT+0x3c4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d027      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a60      	ldr	r2, [pc, #384]	@ (8003134 <HAL_DMA_Abort_IT+0x3c8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d022      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5f      	ldr	r2, [pc, #380]	@ (8003138 <HAL_DMA_Abort_IT+0x3cc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01d      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5d      	ldr	r2, [pc, #372]	@ (800313c <HAL_DMA_Abort_IT+0x3d0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d018      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a5c      	ldr	r2, [pc, #368]	@ (8003140 <HAL_DMA_Abort_IT+0x3d4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003144 <HAL_DMA_Abort_IT+0x3d8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00e      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a59      	ldr	r2, [pc, #356]	@ (8003148 <HAL_DMA_Abort_IT+0x3dc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a57      	ldr	r2, [pc, #348]	@ (800314c <HAL_DMA_Abort_IT+0x3e0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_DMA_Abort_IT+0x290>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a56      	ldr	r2, [pc, #344]	@ (8003150 <HAL_DMA_Abort_IT+0x3e4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d108      	bne.n	800300e <HAL_DMA_Abort_IT+0x2a2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	e007      	b.n	800301e <HAL_DMA_Abort_IT+0x2b2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0201 	bic.w	r2, r2, #1
 800301c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a3c      	ldr	r2, [pc, #240]	@ (8003114 <HAL_DMA_Abort_IT+0x3a8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d072      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a3a      	ldr	r2, [pc, #232]	@ (8003118 <HAL_DMA_Abort_IT+0x3ac>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d06d      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a39      	ldr	r2, [pc, #228]	@ (800311c <HAL_DMA_Abort_IT+0x3b0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d068      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a37      	ldr	r2, [pc, #220]	@ (8003120 <HAL_DMA_Abort_IT+0x3b4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d063      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a36      	ldr	r2, [pc, #216]	@ (8003124 <HAL_DMA_Abort_IT+0x3b8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d05e      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a34      	ldr	r2, [pc, #208]	@ (8003128 <HAL_DMA_Abort_IT+0x3bc>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d059      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a33      	ldr	r2, [pc, #204]	@ (800312c <HAL_DMA_Abort_IT+0x3c0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d054      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a31      	ldr	r2, [pc, #196]	@ (8003130 <HAL_DMA_Abort_IT+0x3c4>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d04f      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a30      	ldr	r2, [pc, #192]	@ (8003134 <HAL_DMA_Abort_IT+0x3c8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d04a      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2e      	ldr	r2, [pc, #184]	@ (8003138 <HAL_DMA_Abort_IT+0x3cc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d045      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2d      	ldr	r2, [pc, #180]	@ (800313c <HAL_DMA_Abort_IT+0x3d0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d040      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2b      	ldr	r2, [pc, #172]	@ (8003140 <HAL_DMA_Abort_IT+0x3d4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d03b      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2a      	ldr	r2, [pc, #168]	@ (8003144 <HAL_DMA_Abort_IT+0x3d8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d036      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a28      	ldr	r2, [pc, #160]	@ (8003148 <HAL_DMA_Abort_IT+0x3dc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d031      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a27      	ldr	r2, [pc, #156]	@ (800314c <HAL_DMA_Abort_IT+0x3e0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d02c      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a25      	ldr	r2, [pc, #148]	@ (8003150 <HAL_DMA_Abort_IT+0x3e4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d027      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a24      	ldr	r2, [pc, #144]	@ (8003154 <HAL_DMA_Abort_IT+0x3e8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d022      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <HAL_DMA_Abort_IT+0x3ec>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01d      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a21      	ldr	r2, [pc, #132]	@ (800315c <HAL_DMA_Abort_IT+0x3f0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d018      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003160 <HAL_DMA_Abort_IT+0x3f4>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d013      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003164 <HAL_DMA_Abort_IT+0x3f8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00e      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003168 <HAL_DMA_Abort_IT+0x3fc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a1b      	ldr	r2, [pc, #108]	@ (800316c <HAL_DMA_Abort_IT+0x400>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d004      	beq.n	800310e <HAL_DMA_Abort_IT+0x3a2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a19      	ldr	r2, [pc, #100]	@ (8003170 <HAL_DMA_Abort_IT+0x404>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d132      	bne.n	8003174 <HAL_DMA_Abort_IT+0x408>
 800310e:	2301      	movs	r3, #1
 8003110:	e031      	b.n	8003176 <HAL_DMA_Abort_IT+0x40a>
 8003112:	bf00      	nop
 8003114:	40020010 	.word	0x40020010
 8003118:	40020028 	.word	0x40020028
 800311c:	40020040 	.word	0x40020040
 8003120:	40020058 	.word	0x40020058
 8003124:	40020070 	.word	0x40020070
 8003128:	40020088 	.word	0x40020088
 800312c:	400200a0 	.word	0x400200a0
 8003130:	400200b8 	.word	0x400200b8
 8003134:	40020410 	.word	0x40020410
 8003138:	40020428 	.word	0x40020428
 800313c:	40020440 	.word	0x40020440
 8003140:	40020458 	.word	0x40020458
 8003144:	40020470 	.word	0x40020470
 8003148:	40020488 	.word	0x40020488
 800314c:	400204a0 	.word	0x400204a0
 8003150:	400204b8 	.word	0x400204b8
 8003154:	58025408 	.word	0x58025408
 8003158:	5802541c 	.word	0x5802541c
 800315c:	58025430 	.word	0x58025430
 8003160:	58025444 	.word	0x58025444
 8003164:	58025458 	.word	0x58025458
 8003168:	5802546c 	.word	0x5802546c
 800316c:	58025480 	.word	0x58025480
 8003170:	58025494 	.word	0x58025494
 8003174:	2300      	movs	r3, #0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d028      	beq.n	80031cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003188:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2201      	movs	r2, #1
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80031a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80031ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop

080031f8 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	@ 0x28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800320c:	2308      	movs	r3, #8
 800320e:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003210:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <HAL_FLASH_Program+0xd8>)
 8003212:	7d1b      	ldrb	r3, [r3, #20]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_FLASH_Program+0x24>
 8003218:	2302      	movs	r3, #2
 800321a:	e054      	b.n	80032c6 <HAL_FLASH_Program+0xce>
 800321c:	4b2c      	ldr	r3, [pc, #176]	@ (80032d0 <HAL_FLASH_Program+0xd8>)
 800321e:	2201      	movs	r2, #1
 8003220:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003228:	d316      	bcc.n	8003258 <HAL_FLASH_Program+0x60>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8003230:	d212      	bcs.n	8003258 <HAL_FLASH_Program+0x60>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8003232:	2301      	movs	r3, #1
 8003234:	617b      	str	r3, [r7, #20]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 8003236:	bf00      	nop
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <HAL_FLASH_Program+0xd8>)
 800323a:	2200      	movs	r2, #0
 800323c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800323e:	6979      	ldr	r1, [r7, #20]
 8003240:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003244:	f000 f882 	bl	800334c <FLASH_WaitForLastOperation>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800324e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003252:	2b00      	cmp	r3, #0
 8003254:	d132      	bne.n	80032bc <HAL_FLASH_Program+0xc4>
 8003256:	e001      	b.n	800325c <HAL_FLASH_Program+0x64>
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e034      	b.n	80032c6 <HAL_FLASH_Program+0xce>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800325c:	4b1d      	ldr	r3, [pc, #116]	@ (80032d4 <HAL_FLASH_Program+0xdc>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a1c      	ldr	r2, [pc, #112]	@ (80032d4 <HAL_FLASH_Program+0xdc>)
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8003268:	f3bf 8f6f 	isb	sy
}
 800326c:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800326e:	f3bf 8f4f 	dsb	sy
}
 8003272:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	3304      	adds	r3, #4
 8003280:	623b      	str	r3, [r7, #32]
        src_addr++;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	3304      	adds	r3, #4
 8003286:	61fb      	str	r3, [r7, #28]
        row_index--;
 8003288:	7efb      	ldrb	r3, [r7, #27]
 800328a:	3b01      	subs	r3, #1
 800328c:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800328e:	7efb      	ldrb	r3, [r7, #27]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1ef      	bne.n	8003274 <HAL_FLASH_Program+0x7c>
  __ASM volatile ("isb 0xF":::"memory");
 8003294:	f3bf 8f6f 	isb	sy
}
 8003298:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800329a:	f3bf 8f4f 	dsb	sy
}
 800329e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80032a0:	6979      	ldr	r1, [r7, #20]
 80032a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80032a6:	f000 f851 	bl	800334c <FLASH_WaitForLastOperation>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <HAL_FLASH_Program+0xdc>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <HAL_FLASH_Program+0xdc>)
 80032b6:	f023 0302 	bic.w	r3, r3, #2
 80032ba:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80032bc:	4b04      	ldr	r3, [pc, #16]	@ (80032d0 <HAL_FLASH_Program+0xd8>)
 80032be:	2200      	movs	r2, #0
 80032c0:	751a      	strb	r2, [r3, #20]

  return status;
 80032c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3728      	adds	r7, #40	@ 0x28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2400032c 	.word	0x2400032c
 80032d4:	52002000 	.word	0x52002000

080032d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80032dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003310 <HAL_FLASH_Unlock+0x38>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00d      	beq.n	8003304 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 80032e8:	4b09      	ldr	r3, [pc, #36]	@ (8003310 <HAL_FLASH_Unlock+0x38>)
 80032ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <HAL_FLASH_Unlock+0x3c>)
 80032ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 80032ee:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <HAL_FLASH_Unlock+0x38>)
 80032f0:	4a09      	ldr	r2, [pc, #36]	@ (8003318 <HAL_FLASH_Unlock+0x40>)
 80032f2:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_FLASH_Unlock+0x38>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr
 8003310:	52002000 	.word	0x52002000
 8003314:	45670123 	.word	0x45670123
 8003318:	cdef89ab 	.word	0xcdef89ab

0800331c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8003320:	4b09      	ldr	r3, [pc, #36]	@ (8003348 <HAL_FLASH_Lock+0x2c>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a08      	ldr	r2, [pc, #32]	@ (8003348 <HAL_FLASH_Lock+0x2c>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_FLASH_Lock+0x2c>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	52002000 	.word	0x52002000

0800334c <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8003356:	2304      	movs	r3, #4
 8003358:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800335e:	f7ff f883 	bl	8002468 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003364:	e010      	b.n	8003388 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d00c      	beq.n	8003388 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7ff f87b 	bl	8002468 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <FLASH_WaitForLastOperation+0x38>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e02d      	b.n	80033e4 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8003388:	4b18      	ldr	r3, [pc, #96]	@ (80033ec <FLASH_WaitForLastOperation+0xa0>)
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4013      	ands	r3, r2
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	429a      	cmp	r2, r3
 8003394:	d0e7      	beq.n	8003366 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d104      	bne.n	80033a6 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800339c:	4b13      	ldr	r3, [pc, #76]	@ (80033ec <FLASH_WaitForLastOperation+0xa0>)
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <FLASH_WaitForLastOperation+0xa4>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80033b0:	4b10      	ldr	r3, [pc, #64]	@ (80033f4 <FLASH_WaitForLastOperation+0xa8>)
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	4a0e      	ldr	r2, [pc, #56]	@ (80033f4 <FLASH_WaitForLastOperation+0xa8>)
 80033ba:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80033bc:	4a0b      	ldr	r2, [pc, #44]	@ (80033ec <FLASH_WaitForLastOperation+0xa0>)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e00e      	b.n	80033e4 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10a      	bne.n	80033e2 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80033cc:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <FLASH_WaitForLastOperation+0xa0>)
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d8:	d103      	bne.n	80033e2 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 80033da:	4b04      	ldr	r3, [pc, #16]	@ (80033ec <FLASH_WaitForLastOperation+0xa0>)
 80033dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033e0:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	52002000 	.word	0x52002000
 80033f0:	17ee0000 	.word	0x17ee0000
 80033f4:	2400032c 	.word	0x2400032c

080033f8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003406:	4b3f      	ldr	r3, [pc, #252]	@ (8003504 <HAL_FLASHEx_Erase+0x10c>)
 8003408:	7d1b      	ldrb	r3, [r3, #20]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_FLASHEx_Erase+0x1a>
 800340e:	2302      	movs	r3, #2
 8003410:	e074      	b.n	80034fc <HAL_FLASHEx_Erase+0x104>
 8003412:	4b3c      	ldr	r3, [pc, #240]	@ (8003504 <HAL_FLASHEx_Erase+0x10c>)
 8003414:	2201      	movs	r2, #1
 8003416:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003418:	4b3a      	ldr	r3, [pc, #232]	@ (8003504 <HAL_FLASHEx_Erase+0x10c>)
 800341a:	2200      	movs	r2, #0
 800341c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800342a:	2101      	movs	r1, #1
 800342c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003430:	f7ff ff8c 	bl	800334c <FLASH_WaitForLastOperation>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d157      	bne.n	80034f4 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d11e      	bne.n	800348a <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 f85a 	bl	8003510 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d045      	beq.n	80034f4 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8003468:	2101      	movs	r1, #1
 800346a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800346e:	f7ff ff6d 	bl	800334c <FLASH_WaitForLastOperation>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800347c:	4b22      	ldr	r3, [pc, #136]	@ (8003508 <HAL_FLASHEx_Erase+0x110>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a21      	ldr	r2, [pc, #132]	@ (8003508 <HAL_FLASHEx_Erase+0x110>)
 8003482:	f023 0308 	bic.w	r3, r3, #8
 8003486:	60d3      	str	r3, [r2, #12]
 8003488:	e034      	b.n	80034f4 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f04f 32ff 	mov.w	r2, #4294967295
 8003490:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	e024      	b.n	80034e4 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68b8      	ldr	r0, [r7, #8]
 80034a6:	f000 f857 	bl	8003558 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 80034b6:	2101      	movs	r1, #1
 80034b8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80034bc:	f7ff ff46 	bl	800334c <FLASH_WaitForLastOperation>
 80034c0:	4603      	mov	r3, r0
 80034c2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 80034c4:	4b10      	ldr	r3, [pc, #64]	@ (8003508 <HAL_FLASHEx_Erase+0x110>)
 80034c6:	68da      	ldr	r2, [r3, #12]
 80034c8:	490f      	ldr	r1, [pc, #60]	@ (8003508 <HAL_FLASHEx_Erase+0x110>)
 80034ca:	4b10      	ldr	r3, [pc, #64]	@ (800350c <HAL_FLASHEx_Erase+0x114>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	601a      	str	r2, [r3, #0]
          break;
 80034dc:	e00a      	b.n	80034f4 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	60bb      	str	r3, [r7, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4413      	add	r3, r2
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d3d2      	bcc.n	800349a <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034f4:	4b03      	ldr	r3, [pc, #12]	@ (8003504 <HAL_FLASHEx_Erase+0x10c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	751a      	strb	r2, [r3, #20]

  return status;
 80034fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	2400032c 	.word	0x2400032c
 8003508:	52002000 	.word	0x52002000
 800350c:	fffff8fb 	.word	0xfffff8fb

08003510 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d011      	beq.n	8003548 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8003524:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <FLASH_MassErase+0x44>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a0a      	ldr	r2, [pc, #40]	@ (8003554 <FLASH_MassErase+0x44>)
 800352a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800352e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8003530:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <FLASH_MassErase+0x44>)
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	4907      	ldr	r1, [pc, #28]	@ (8003554 <FLASH_MassErase+0x44>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4313      	orrs	r3, r2
 800353a:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <FLASH_MassErase+0x44>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <FLASH_MassErase+0x44>)
 8003542:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 8003546:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	52002000 	.word	0x52002000

08003558 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800356e:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <FLASH_Erase_Sector+0x44>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	4a0a      	ldr	r2, [pc, #40]	@ (800359c <FLASH_Erase_Sector+0x44>)
 8003574:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 8003578:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800357a:	4b08      	ldr	r3, [pc, #32]	@ (800359c <FLASH_Erase_Sector+0x44>)
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	0219      	lsls	r1, r3, #8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	430b      	orrs	r3, r1
 8003586:	4313      	orrs	r3, r2
 8003588:	4a04      	ldr	r2, [pc, #16]	@ (800359c <FLASH_Erase_Sector+0x44>)
 800358a:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800358e:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	52002000 	.word	0x52002000

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	@ 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80035ae:	4b86      	ldr	r3, [pc, #536]	@ (80037c8 <HAL_GPIO_Init+0x228>)
 80035b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035b2:	e18c      	b.n	80038ce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	2101      	movs	r1, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa01 f303 	lsl.w	r3, r1, r3
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f000 817e 	beq.w	80038c8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d005      	beq.n	80035e4 <HAL_GPIO_Init+0x44>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d130      	bne.n	8003646 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2203      	movs	r2, #3
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800361a:	2201      	movs	r2, #1
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	091b      	lsrs	r3, r3, #4
 8003630:	f003 0201 	and.w	r2, r3, #1
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	2b03      	cmp	r3, #3
 8003650:	d017      	beq.n	8003682 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	2203      	movs	r2, #3
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4313      	orrs	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d123      	bne.n	80036d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	08da      	lsrs	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3208      	adds	r2, #8
 8003696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	220f      	movs	r2, #15
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	08da      	lsrs	r2, r3, #3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	3208      	adds	r2, #8
 80036d0:	69b9      	ldr	r1, [r7, #24]
 80036d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	2203      	movs	r2, #3
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43db      	mvns	r3, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4013      	ands	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 0203 	and.w	r2, r3, #3
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80d8 	beq.w	80038c8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003718:	4b2c      	ldr	r3, [pc, #176]	@ (80037cc <HAL_GPIO_Init+0x22c>)
 800371a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800371e:	4a2b      	ldr	r2, [pc, #172]	@ (80037cc <HAL_GPIO_Init+0x22c>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003728:	4b28      	ldr	r3, [pc, #160]	@ (80037cc <HAL_GPIO_Init+0x22c>)
 800372a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003736:	4a26      	ldr	r2, [pc, #152]	@ (80037d0 <HAL_GPIO_Init+0x230>)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1d      	ldr	r2, [pc, #116]	@ (80037d4 <HAL_GPIO_Init+0x234>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d04a      	beq.n	80037f8 <HAL_GPIO_Init+0x258>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1c      	ldr	r2, [pc, #112]	@ (80037d8 <HAL_GPIO_Init+0x238>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d02b      	beq.n	80037c2 <HAL_GPIO_Init+0x222>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1b      	ldr	r2, [pc, #108]	@ (80037dc <HAL_GPIO_Init+0x23c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d025      	beq.n	80037be <HAL_GPIO_Init+0x21e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1a      	ldr	r2, [pc, #104]	@ (80037e0 <HAL_GPIO_Init+0x240>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01f      	beq.n	80037ba <HAL_GPIO_Init+0x21a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a19      	ldr	r2, [pc, #100]	@ (80037e4 <HAL_GPIO_Init+0x244>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d019      	beq.n	80037b6 <HAL_GPIO_Init+0x216>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a18      	ldr	r2, [pc, #96]	@ (80037e8 <HAL_GPIO_Init+0x248>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d013      	beq.n	80037b2 <HAL_GPIO_Init+0x212>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a17      	ldr	r2, [pc, #92]	@ (80037ec <HAL_GPIO_Init+0x24c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00d      	beq.n	80037ae <HAL_GPIO_Init+0x20e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a16      	ldr	r2, [pc, #88]	@ (80037f0 <HAL_GPIO_Init+0x250>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d007      	beq.n	80037aa <HAL_GPIO_Init+0x20a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a15      	ldr	r2, [pc, #84]	@ (80037f4 <HAL_GPIO_Init+0x254>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_GPIO_Init+0x206>
 80037a2:	2309      	movs	r3, #9
 80037a4:	e029      	b.n	80037fa <HAL_GPIO_Init+0x25a>
 80037a6:	230a      	movs	r3, #10
 80037a8:	e027      	b.n	80037fa <HAL_GPIO_Init+0x25a>
 80037aa:	2307      	movs	r3, #7
 80037ac:	e025      	b.n	80037fa <HAL_GPIO_Init+0x25a>
 80037ae:	2306      	movs	r3, #6
 80037b0:	e023      	b.n	80037fa <HAL_GPIO_Init+0x25a>
 80037b2:	2305      	movs	r3, #5
 80037b4:	e021      	b.n	80037fa <HAL_GPIO_Init+0x25a>
 80037b6:	2304      	movs	r3, #4
 80037b8:	e01f      	b.n	80037fa <HAL_GPIO_Init+0x25a>
 80037ba:	2303      	movs	r3, #3
 80037bc:	e01d      	b.n	80037fa <HAL_GPIO_Init+0x25a>
 80037be:	2302      	movs	r3, #2
 80037c0:	e01b      	b.n	80037fa <HAL_GPIO_Init+0x25a>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e019      	b.n	80037fa <HAL_GPIO_Init+0x25a>
 80037c6:	bf00      	nop
 80037c8:	58000080 	.word	0x58000080
 80037cc:	58024400 	.word	0x58024400
 80037d0:	58000400 	.word	0x58000400
 80037d4:	58020000 	.word	0x58020000
 80037d8:	58020400 	.word	0x58020400
 80037dc:	58020800 	.word	0x58020800
 80037e0:	58020c00 	.word	0x58020c00
 80037e4:	58021000 	.word	0x58021000
 80037e8:	58021400 	.word	0x58021400
 80037ec:	58021800 	.word	0x58021800
 80037f0:	58021c00 	.word	0x58021c00
 80037f4:	58022400 	.word	0x58022400
 80037f8:	2300      	movs	r3, #0
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	f002 0203 	and.w	r2, r2, #3
 8003800:	0092      	lsls	r2, r2, #2
 8003802:	4093      	lsls	r3, r2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800380a:	4938      	ldr	r1, [pc, #224]	@ (80038ec <HAL_GPIO_Init+0x34c>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3302      	adds	r3, #2
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800383e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800386c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	3301      	adds	r3, #1
 80038cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa22 f303 	lsr.w	r3, r2, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f47f ae6b 	bne.w	80035b4 <HAL_GPIO_Init+0x14>
  }
}
 80038de:	bf00      	nop
 80038e0:	bf00      	nop
 80038e2:	3724      	adds	r7, #36	@ 0x24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	58000400 	.word	0x58000400

080038f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800390c:	e003      	b.n	8003916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	041a      	lsls	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800392c:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b04      	cmp	r3, #4
 8003936:	d00a      	beq.n	800394e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003938:	4b16      	ldr	r3, [pc, #88]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	429a      	cmp	r2, r3
 8003944:	d001      	beq.n	800394a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e01f      	b.n	800398a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e01d      	b.n	800398a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800394e:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f023 0207 	bic.w	r2, r3, #7
 8003956:	490f      	ldr	r1, [pc, #60]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4313      	orrs	r3, r2
 800395c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800395e:	f7fe fd83 	bl	8002468 <HAL_GetTick>
 8003962:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003964:	e009      	b.n	800397a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003966:	f7fe fd7f 	bl	8002468 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003974:	d901      	bls.n	800397a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e007      	b.n	800398a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_PWREx_ConfigSupply+0x70>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003986:	d1ee      	bne.n	8003966 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	58024800 	.word	0x58024800

08003998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	@ 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e3c8      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8087 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b8:	4b88      	ldr	r3, [pc, #544]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039c2:	4b86      	ldr	r3, [pc, #536]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d007      	beq.n	80039de <HAL_RCC_OscConfig+0x46>
 80039ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d0:	2b18      	cmp	r3, #24
 80039d2:	d110      	bne.n	80039f6 <HAL_RCC_OscConfig+0x5e>
 80039d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d10b      	bne.n	80039f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039de:	4b7f      	ldr	r3, [pc, #508]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d06c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x12c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d168      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e3a2      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039fe:	d106      	bne.n	8003a0e <HAL_RCC_OscConfig+0x76>
 8003a00:	4b76      	ldr	r3, [pc, #472]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a75      	ldr	r2, [pc, #468]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e02e      	b.n	8003a6c <HAL_RCC_OscConfig+0xd4>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x98>
 8003a16:	4b71      	ldr	r3, [pc, #452]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a70      	ldr	r2, [pc, #448]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b6e      	ldr	r3, [pc, #440]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6d      	ldr	r2, [pc, #436]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e01d      	b.n	8003a6c <HAL_RCC_OscConfig+0xd4>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0xbc>
 8003a3a:	4b68      	ldr	r3, [pc, #416]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a67      	ldr	r2, [pc, #412]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b65      	ldr	r3, [pc, #404]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a64      	ldr	r2, [pc, #400]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e00b      	b.n	8003a6c <HAL_RCC_OscConfig+0xd4>
 8003a54:	4b61      	ldr	r3, [pc, #388]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a60      	ldr	r2, [pc, #384]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	4b5e      	ldr	r3, [pc, #376]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a5d      	ldr	r2, [pc, #372]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a74:	f7fe fcf8 	bl	8002468 <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a7c:	f7fe fcf4 	bl	8002468 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	@ 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e356      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a8e:	4b53      	ldr	r3, [pc, #332]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0xe4>
 8003a9a:	e014      	b.n	8003ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fce4 	bl	8002468 <HAL_GetTick>
 8003aa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fe fce0 	bl	8002468 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b64      	cmp	r3, #100	@ 0x64
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e342      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ab6:	4b49      	ldr	r3, [pc, #292]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x10c>
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 808c 	beq.w	8003bec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad4:	4b41      	ldr	r3, [pc, #260]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003adc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ade:	4b3f      	ldr	r3, [pc, #252]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <HAL_RCC_OscConfig+0x162>
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	2b18      	cmp	r3, #24
 8003aee:	d137      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1c8>
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d132      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003afa:	4b38      	ldr	r3, [pc, #224]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_RCC_OscConfig+0x17a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e314      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b12:	4b32      	ldr	r3, [pc, #200]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f023 0219 	bic.w	r2, r3, #25
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	492f      	ldr	r1, [pc, #188]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe fca0 	bl	8002468 <HAL_GetTick>
 8003b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2c:	f7fe fc9c 	bl	8002468 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e2fe      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b3e:	4b27      	ldr	r3, [pc, #156]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4a:	4b24      	ldr	r3, [pc, #144]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	4920      	ldr	r1, [pc, #128]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b5e:	e045      	b.n	8003bec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d026      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b68:	4b1c      	ldr	r3, [pc, #112]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 0219 	bic.w	r2, r3, #25
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4919      	ldr	r1, [pc, #100]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7a:	f7fe fc75 	bl	8002468 <HAL_GetTick>
 8003b7e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b82:	f7fe fc71 	bl	8002468 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e2d3      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b94:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d0f0      	beq.n	8003b82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	061b      	lsls	r3, r3, #24
 8003bae:	490b      	ldr	r1, [pc, #44]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
 8003bb4:	e01a      	b.n	8003bec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <HAL_RCC_OscConfig+0x244>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc2:	f7fe fc51 	bl	8002468 <HAL_GetTick>
 8003bc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bc8:	e00a      	b.n	8003be0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fe fc4d 	bl	8002468 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d903      	bls.n	8003be0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e2af      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
 8003bdc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003be0:	4b96      	ldr	r3, [pc, #600]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ee      	bne.n	8003bca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d06a      	beq.n	8003cce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf8:	4b90      	ldr	r3, [pc, #576]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c00:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c02:	4b8e      	ldr	r3, [pc, #568]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d007      	beq.n	8003c1e <HAL_RCC_OscConfig+0x286>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b18      	cmp	r3, #24
 8003c12:	d11b      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2b4>
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d116      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c1e:	4b87      	ldr	r3, [pc, #540]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_RCC_OscConfig+0x29e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	2b80      	cmp	r3, #128	@ 0x80
 8003c30:	d001      	beq.n	8003c36 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e282      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c36:	4b81      	ldr	r3, [pc, #516]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	497d      	ldr	r1, [pc, #500]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c4a:	e040      	b.n	8003cce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d023      	beq.n	8003c9c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c54:	4b79      	ldr	r3, [pc, #484]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a78      	ldr	r2, [pc, #480]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fe fc02 	bl	8002468 <HAL_GetTick>
 8003c64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c68:	f7fe fbfe 	bl	8002468 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e260      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c7a:	4b70      	ldr	r3, [pc, #448]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c86:	4b6d      	ldr	r3, [pc, #436]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	061b      	lsls	r3, r3, #24
 8003c94:	4969      	ldr	r1, [pc, #420]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60cb      	str	r3, [r1, #12]
 8003c9a:	e018      	b.n	8003cce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c9c:	4b67      	ldr	r3, [pc, #412]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a66      	ldr	r2, [pc, #408]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fe fbde 	bl	8002468 <HAL_GetTick>
 8003cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003cb0:	f7fe fbda 	bl	8002468 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e23c      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d036      	beq.n	8003d48 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d019      	beq.n	8003d16 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce2:	4b56      	ldr	r3, [pc, #344]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce6:	4a55      	ldr	r2, [pc, #340]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003ce8:	f043 0301 	orr.w	r3, r3, #1
 8003cec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe fbbb 	bl	8002468 <HAL_GetTick>
 8003cf2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf6:	f7fe fbb7 	bl	8002468 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e219      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d08:	4b4c      	ldr	r3, [pc, #304]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x35e>
 8003d14:	e018      	b.n	8003d48 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d16:	4b49      	ldr	r3, [pc, #292]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1a:	4a48      	ldr	r2, [pc, #288]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d22:	f7fe fba1 	bl	8002468 <HAL_GetTick>
 8003d26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2a:	f7fe fb9d 	bl	8002468 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e1ff      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d036      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d019      	beq.n	8003d90 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d5c:	4b37      	ldr	r3, [pc, #220]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a36      	ldr	r2, [pc, #216]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003d62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d68:	f7fe fb7e 	bl	8002468 <HAL_GetTick>
 8003d6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d70:	f7fe fb7a 	bl	8002468 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1dc      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d82:	4b2e      	ldr	r3, [pc, #184]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x3d8>
 8003d8e:	e018      	b.n	8003dc2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d90:	4b2a      	ldr	r3, [pc, #168]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a29      	ldr	r2, [pc, #164]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003d96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d9c:	f7fe fb64 	bl	8002468 <HAL_GetTick>
 8003da0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003da4:	f7fe fb60 	bl	8002468 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e1c2      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003db6:	4b21      	ldr	r3, [pc, #132]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8086 	beq.w	8003edc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e40 <HAL_RCC_OscConfig+0x4a8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e40 <HAL_RCC_OscConfig+0x4a8>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ddc:	f7fe fb44 	bl	8002468 <HAL_GetTick>
 8003de0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de4:	f7fe fb40 	bl	8002468 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1a2      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003df6:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <HAL_RCC_OscConfig+0x4a8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d106      	bne.n	8003e18 <HAL_RCC_OscConfig+0x480>
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e6>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d111      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4ac>
 8003e20:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e24:	4a05      	ldr	r2, [pc, #20]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003e26:	f023 0301 	bic.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e2c:	4b03      	ldr	r3, [pc, #12]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e30:	4a02      	ldr	r2, [pc, #8]	@ (8003e3c <HAL_RCC_OscConfig+0x4a4>)
 8003e32:	f023 0304 	bic.w	r3, r3, #4
 8003e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e38:	e021      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e6>
 8003e3a:	bf00      	nop
 8003e3c:	58024400 	.word	0x58024400
 8003e40:	58024800 	.word	0x58024800
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d10c      	bne.n	8003e66 <HAL_RCC_OscConfig+0x4ce>
 8003e4c:	4b83      	ldr	r3, [pc, #524]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e50:	4a82      	ldr	r2, [pc, #520]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003e52:	f043 0304 	orr.w	r3, r3, #4
 8003e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e58:	4b80      	ldr	r3, [pc, #512]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5c:	4a7f      	ldr	r2, [pc, #508]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e64:	e00b      	b.n	8003e7e <HAL_RCC_OscConfig+0x4e6>
 8003e66:	4b7d      	ldr	r3, [pc, #500]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a7c      	ldr	r2, [pc, #496]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e72:	4b7a      	ldr	r3, [pc, #488]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	4a79      	ldr	r2, [pc, #484]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003e78:	f023 0304 	bic.w	r3, r3, #4
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d015      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e86:	f7fe faef 	bl	8002468 <HAL_GetTick>
 8003e8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fe faeb 	bl	8002468 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e14b      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea4:	4b6d      	ldr	r3, [pc, #436]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0ee      	beq.n	8003e8e <HAL_RCC_OscConfig+0x4f6>
 8003eb0:	e014      	b.n	8003edc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fe fad9 	bl	8002468 <HAL_GetTick>
 8003eb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eba:	f7fe fad5 	bl	8002468 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e135      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ed0:	4b62      	ldr	r3, [pc, #392]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ee      	bne.n	8003eba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 812a 	beq.w	800413a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003eee:	2b18      	cmp	r3, #24
 8003ef0:	f000 80ba 	beq.w	8004068 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	f040 8095 	bne.w	8004028 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efe:	4b57      	ldr	r3, [pc, #348]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a56      	ldr	r2, [pc, #344]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7fe faad 	bl	8002468 <HAL_GetTick>
 8003f0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f12:	f7fe faa9 	bl	8002468 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e10b      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f24:	4b4d      	ldr	r3, [pc, #308]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f30:	4b4a      	ldr	r3, [pc, #296]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f34:	4b4a      	ldr	r3, [pc, #296]	@ (8004060 <HAL_RCC_OscConfig+0x6c8>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	430a      	orrs	r2, r1
 8003f44:	4945      	ldr	r1, [pc, #276]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	025b      	lsls	r3, r3, #9
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	3b01      	subs	r3, #1
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	3b01      	subs	r3, #1
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f7a:	4938      	ldr	r1, [pc, #224]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f80:	4b36      	ldr	r3, [pc, #216]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	4a35      	ldr	r2, [pc, #212]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f8c:	4b33      	ldr	r3, [pc, #204]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f90:	4b34      	ldr	r3, [pc, #208]	@ (8004064 <HAL_RCC_OscConfig+0x6cc>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f98:	00d2      	lsls	r2, r2, #3
 8003f9a:	4930      	ldr	r1, [pc, #192]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	f023 020c 	bic.w	r2, r3, #12
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	492b      	ldr	r1, [pc, #172]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	f023 0202 	bic.w	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	4927      	ldr	r1, [pc, #156]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fc4:	4b25      	ldr	r3, [pc, #148]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc8:	4a24      	ldr	r2, [pc, #144]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4b22      	ldr	r3, [pc, #136]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	4a21      	ldr	r2, [pc, #132]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4a1e      	ldr	r2, [pc, #120]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fe2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	4a1b      	ldr	r2, [pc, #108]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b19      	ldr	r3, [pc, #100]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a18      	ldr	r2, [pc, #96]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fe fa32 	bl	8002468 <HAL_GetTick>
 8004004:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004008:	f7fe fa2e 	bl	8002468 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e090      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800401a:	4b10      	ldr	r3, [pc, #64]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x670>
 8004026:	e088      	b.n	800413a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a0b      	ldr	r2, [pc, #44]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 800402e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fe fa18 	bl	8002468 <HAL_GetTick>
 8004038:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fe fa14 	bl	8002468 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e076      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800404e:	4b03      	ldr	r3, [pc, #12]	@ (800405c <HAL_RCC_OscConfig+0x6c4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x6a4>
 800405a:	e06e      	b.n	800413a <HAL_RCC_OscConfig+0x7a2>
 800405c:	58024400 	.word	0x58024400
 8004060:	fffffc0c 	.word	0xfffffc0c
 8004064:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004068:	4b36      	ldr	r3, [pc, #216]	@ (8004144 <HAL_RCC_OscConfig+0x7ac>)
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800406e:	4b35      	ldr	r3, [pc, #212]	@ (8004144 <HAL_RCC_OscConfig+0x7ac>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004072:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	2b01      	cmp	r3, #1
 800407a:	d031      	beq.n	80040e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f003 0203 	and.w	r2, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d12a      	bne.n	80040e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d122      	bne.n	80040e0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d11a      	bne.n	80040e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	0a5b      	lsrs	r3, r3, #9
 80040ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d111      	bne.n	80040e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d108      	bne.n	80040e0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0e1b      	lsrs	r3, r3, #24
 80040d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e02b      	b.n	800413c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80040e4:	4b17      	ldr	r3, [pc, #92]	@ (8004144 <HAL_RCC_OscConfig+0x7ac>)
 80040e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e8:	08db      	lsrs	r3, r3, #3
 80040ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d01f      	beq.n	800413a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040fa:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <HAL_RCC_OscConfig+0x7ac>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	4a11      	ldr	r2, [pc, #68]	@ (8004144 <HAL_RCC_OscConfig+0x7ac>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004106:	f7fe f9af 	bl	8002468 <HAL_GetTick>
 800410a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800410c:	bf00      	nop
 800410e:	f7fe f9ab 	bl	8002468 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	4293      	cmp	r3, r2
 8004118:	d0f9      	beq.n	800410e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_RCC_OscConfig+0x7ac>)
 800411c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800411e:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_RCC_OscConfig+0x7b0>)
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004126:	00d2      	lsls	r2, r2, #3
 8004128:	4906      	ldr	r1, [pc, #24]	@ (8004144 <HAL_RCC_OscConfig+0x7ac>)
 800412a:	4313      	orrs	r3, r2
 800412c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800412e:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_RCC_OscConfig+0x7ac>)
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	4a04      	ldr	r2, [pc, #16]	@ (8004144 <HAL_RCC_OscConfig+0x7ac>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3730      	adds	r7, #48	@ 0x30
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	58024400 	.word	0x58024400
 8004148:	ffff0007 	.word	0xffff0007

0800414c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e19c      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004160:	4b8a      	ldr	r3, [pc, #552]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d910      	bls.n	8004190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b87      	ldr	r3, [pc, #540]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 020f 	bic.w	r2, r3, #15
 8004176:	4985      	ldr	r1, [pc, #532]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417e:	4b83      	ldr	r3, [pc, #524]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e184      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d010      	beq.n	80041be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d908      	bls.n	80041be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041ac:	4b78      	ldr	r3, [pc, #480]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	4975      	ldr	r1, [pc, #468]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d010      	beq.n	80041ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695a      	ldr	r2, [r3, #20]
 80041ce:	4b70      	ldr	r3, [pc, #448]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d908      	bls.n	80041ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041da:	4b6d      	ldr	r3, [pc, #436]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	496a      	ldr	r1, [pc, #424]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d010      	beq.n	800421a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699a      	ldr	r2, [r3, #24]
 80041fc:	4b64      	ldr	r3, [pc, #400]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004204:	429a      	cmp	r2, r3
 8004206:	d908      	bls.n	800421a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004208:	4b61      	ldr	r3, [pc, #388]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	495e      	ldr	r1, [pc, #376]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004216:	4313      	orrs	r3, r2
 8004218:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b00      	cmp	r3, #0
 8004224:	d010      	beq.n	8004248 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	4b59      	ldr	r3, [pc, #356]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004232:	429a      	cmp	r2, r3
 8004234:	d908      	bls.n	8004248 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004236:	4b56      	ldr	r3, [pc, #344]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4953      	ldr	r1, [pc, #332]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004244:	4313      	orrs	r3, r2
 8004246:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d010      	beq.n	8004276 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	4b4d      	ldr	r3, [pc, #308]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 030f 	and.w	r3, r3, #15
 8004260:	429a      	cmp	r2, r3
 8004262:	d908      	bls.n	8004276 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004264:	4b4a      	ldr	r3, [pc, #296]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	f023 020f 	bic.w	r2, r3, #15
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4947      	ldr	r1, [pc, #284]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004272:	4313      	orrs	r3, r2
 8004274:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d055      	beq.n	800432e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004282:	4b43      	ldr	r3, [pc, #268]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	4940      	ldr	r1, [pc, #256]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004290:	4313      	orrs	r3, r2
 8004292:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b02      	cmp	r3, #2
 800429a:	d107      	bne.n	80042ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800429c:	4b3c      	ldr	r3, [pc, #240]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d121      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0f6      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80042b4:	4b36      	ldr	r3, [pc, #216]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d115      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0ea      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042cc:	4b30      	ldr	r3, [pc, #192]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0de      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042dc:	4b2c      	ldr	r3, [pc, #176]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0d6      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ec:	4b28      	ldr	r3, [pc, #160]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f023 0207 	bic.w	r2, r3, #7
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4925      	ldr	r1, [pc, #148]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042fe:	f7fe f8b3 	bl	8002468 <HAL_GetTick>
 8004302:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004304:	e00a      	b.n	800431c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004306:	f7fe f8af 	bl	8002468 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0be      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431c:	4b1c      	ldr	r3, [pc, #112]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	429a      	cmp	r2, r3
 800432c:	d1eb      	bne.n	8004306 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d010      	beq.n	800435c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68da      	ldr	r2, [r3, #12]
 800433e:	4b14      	ldr	r3, [pc, #80]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	429a      	cmp	r2, r3
 8004348:	d208      	bcs.n	800435c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800434a:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f023 020f 	bic.w	r2, r3, #15
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	490e      	ldr	r1, [pc, #56]	@ (8004390 <HAL_RCC_ClockConfig+0x244>)
 8004358:	4313      	orrs	r3, r2
 800435a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d214      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b08      	ldr	r3, [pc, #32]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 020f 	bic.w	r2, r3, #15
 8004372:	4906      	ldr	r1, [pc, #24]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b04      	ldr	r3, [pc, #16]	@ (800438c <HAL_RCC_ClockConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e086      	b.n	800449a <HAL_RCC_ClockConfig+0x34e>
 800438c:	52002000 	.word	0x52002000
 8004390:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d010      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	4b3f      	ldr	r3, [pc, #252]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d208      	bcs.n	80043c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043b0:	4b3c      	ldr	r3, [pc, #240]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	4939      	ldr	r1, [pc, #228]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d010      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	4b34      	ldr	r3, [pc, #208]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043da:	429a      	cmp	r2, r3
 80043dc:	d208      	bcs.n	80043f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043de:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	492e      	ldr	r1, [pc, #184]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d010      	beq.n	800441e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	4b28      	ldr	r3, [pc, #160]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004408:	429a      	cmp	r2, r3
 800440a:	d208      	bcs.n	800441e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800440c:	4b25      	ldr	r3, [pc, #148]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	4922      	ldr	r1, [pc, #136]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 800441a:	4313      	orrs	r3, r2
 800441c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d010      	beq.n	800444c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004436:	429a      	cmp	r2, r3
 8004438:	d208      	bcs.n	800444c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800443a:	4b1a      	ldr	r3, [pc, #104]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	4917      	ldr	r1, [pc, #92]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 8004448:	4313      	orrs	r3, r2
 800444a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800444c:	f000 f834 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	4912      	ldr	r1, [pc, #72]	@ (80044a8 <HAL_RCC_ClockConfig+0x35c>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800446a:	4b0e      	ldr	r3, [pc, #56]	@ (80044a4 <HAL_RCC_ClockConfig+0x358>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	4a0d      	ldr	r2, [pc, #52]	@ (80044a8 <HAL_RCC_ClockConfig+0x35c>)
 8004474:	5cd3      	ldrb	r3, [r2, r3]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
 8004480:	4a0a      	ldr	r2, [pc, #40]	@ (80044ac <HAL_RCC_ClockConfig+0x360>)
 8004482:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004484:	4a0a      	ldr	r2, [pc, #40]	@ (80044b0 <HAL_RCC_ClockConfig+0x364>)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800448a:	4b0a      	ldr	r3, [pc, #40]	@ (80044b4 <HAL_RCC_ClockConfig+0x368>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd fcac 	bl	8001dec <HAL_InitTick>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	58024400 	.word	0x58024400
 80044a8:	080169a0 	.word	0x080169a0
 80044ac:	24000024 	.word	0x24000024
 80044b0:	24000020 	.word	0x24000020
 80044b4:	24000028 	.word	0x24000028

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	@ 0x24
 80044bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044be:	4bb3      	ldr	r3, [pc, #716]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044c6:	2b18      	cmp	r3, #24
 80044c8:	f200 8155 	bhi.w	8004776 <HAL_RCC_GetSysClockFreq+0x2be>
 80044cc:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	08004539 	.word	0x08004539
 80044d8:	08004777 	.word	0x08004777
 80044dc:	08004777 	.word	0x08004777
 80044e0:	08004777 	.word	0x08004777
 80044e4:	08004777 	.word	0x08004777
 80044e8:	08004777 	.word	0x08004777
 80044ec:	08004777 	.word	0x08004777
 80044f0:	08004777 	.word	0x08004777
 80044f4:	0800455f 	.word	0x0800455f
 80044f8:	08004777 	.word	0x08004777
 80044fc:	08004777 	.word	0x08004777
 8004500:	08004777 	.word	0x08004777
 8004504:	08004777 	.word	0x08004777
 8004508:	08004777 	.word	0x08004777
 800450c:	08004777 	.word	0x08004777
 8004510:	08004777 	.word	0x08004777
 8004514:	08004565 	.word	0x08004565
 8004518:	08004777 	.word	0x08004777
 800451c:	08004777 	.word	0x08004777
 8004520:	08004777 	.word	0x08004777
 8004524:	08004777 	.word	0x08004777
 8004528:	08004777 	.word	0x08004777
 800452c:	08004777 	.word	0x08004777
 8004530:	08004777 	.word	0x08004777
 8004534:	0800456b 	.word	0x0800456b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004538:	4b94      	ldr	r3, [pc, #592]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d009      	beq.n	8004558 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004544:	4b91      	ldr	r3, [pc, #580]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	4a90      	ldr	r2, [pc, #576]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
 8004554:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004556:	e111      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004558:	4b8d      	ldr	r3, [pc, #564]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800455a:	61bb      	str	r3, [r7, #24]
      break;
 800455c:	e10e      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800455e:	4b8d      	ldr	r3, [pc, #564]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004560:	61bb      	str	r3, [r7, #24]
      break;
 8004562:	e10b      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004564:	4b8c      	ldr	r3, [pc, #560]	@ (8004798 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004566:	61bb      	str	r3, [r7, #24]
      break;
 8004568:	e108      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800456a:	4b88      	ldr	r3, [pc, #544]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004574:	4b85      	ldr	r3, [pc, #532]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800457e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004580:	4b82      	ldr	r3, [pc, #520]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800458a:	4b80      	ldr	r3, [pc, #512]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458e:	08db      	lsrs	r3, r3, #3
 8004590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 80e1 	beq.w	8004770 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	f000 8083 	beq.w	80046bc <HAL_RCC_GetSysClockFreq+0x204>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f200 80a1 	bhi.w	8004700 <HAL_RCC_GetSysClockFreq+0x248>
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x114>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d056      	beq.n	8004678 <HAL_RCC_GetSysClockFreq+0x1c0>
 80045ca:	e099      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045cc:	4b6f      	ldr	r3, [pc, #444]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02d      	beq.n	8004634 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045d8:	4b6c      	ldr	r3, [pc, #432]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	08db      	lsrs	r3, r3, #3
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	4a6b      	ldr	r2, [pc, #428]	@ (8004790 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045e4:	fa22 f303 	lsr.w	r3, r2, r3
 80045e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004602:	4b62      	ldr	r3, [pc, #392]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460a:	ee07 3a90 	vmov	s15, r3
 800460e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004612:	ed97 6a02 	vldr	s12, [r7, #8]
 8004616:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 800461a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004632:	e087      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	ee07 3a90 	vmov	s15, r3
 800463a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80047a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004646:	4b51      	ldr	r3, [pc, #324]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004656:	ed97 6a02 	vldr	s12, [r7, #8]
 800465a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 800465e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800466a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004676:	e065      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800468a:	4b40      	ldr	r3, [pc, #256]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	ee07 3a90 	vmov	s15, r3
 8004696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800469a:	ed97 6a02 	vldr	s12, [r7, #8]
 800469e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ba:	e043      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80047a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80046ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ce:	4b2f      	ldr	r3, [pc, #188]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046de:	ed97 6a02 	vldr	s12, [r7, #8]
 80046e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046fe:	e021      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	ee07 3a90 	vmov	s15, r3
 8004706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800470a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80047a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800470e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004712:	4b1e      	ldr	r3, [pc, #120]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004722:	ed97 6a02 	vldr	s12, [r7, #8]
 8004726:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800479c <HAL_RCC_GetSysClockFreq+0x2e4>
 800472a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004742:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004744:	4b11      	ldr	r3, [pc, #68]	@ (800478c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	0a5b      	lsrs	r3, r3, #9
 800474a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800474e:	3301      	adds	r3, #1
 8004750:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	ee07 3a90 	vmov	s15, r3
 8004758:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800475c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004768:	ee17 3a90 	vmov	r3, s15
 800476c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800476e:	e005      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
      break;
 8004774:	e002      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004776:	4b07      	ldr	r3, [pc, #28]	@ (8004794 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004778:	61bb      	str	r3, [r7, #24]
      break;
 800477a:	bf00      	nop
  }

  return sysclockfreq;
 800477c:	69bb      	ldr	r3, [r7, #24]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3724      	adds	r7, #36	@ 0x24
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	58024400 	.word	0x58024400
 8004790:	03d09000 	.word	0x03d09000
 8004794:	003d0900 	.word	0x003d0900
 8004798:	007a1200 	.word	0x007a1200
 800479c:	46000000 	.word	0x46000000
 80047a0:	4c742400 	.word	0x4c742400
 80047a4:	4a742400 	.word	0x4a742400
 80047a8:	4af42400 	.word	0x4af42400

080047ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80047b2:	f7ff fe81 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80047b6:	4602      	mov	r2, r0
 80047b8:	4b10      	ldr	r3, [pc, #64]	@ (80047fc <HAL_RCC_GetHCLKFreq+0x50>)
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	490f      	ldr	r1, [pc, #60]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x54>)
 80047c4:	5ccb      	ldrb	r3, [r1, r3]
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <HAL_RCC_GetHCLKFreq+0x50>)
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	4a09      	ldr	r2, [pc, #36]	@ (8004800 <HAL_RCC_GetHCLKFreq+0x54>)
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	fa22 f303 	lsr.w	r3, r2, r3
 80047e6:	4a07      	ldr	r2, [pc, #28]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x58>)
 80047e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047ea:	4a07      	ldr	r2, [pc, #28]	@ (8004808 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047f0:	4b04      	ldr	r3, [pc, #16]	@ (8004804 <HAL_RCC_GetHCLKFreq+0x58>)
 80047f2:	681b      	ldr	r3, [r3, #0]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	58024400 	.word	0x58024400
 8004800:	080169a0 	.word	0x080169a0
 8004804:	24000024 	.word	0x24000024
 8004808:	24000020 	.word	0x24000020

0800480c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004810:	f7ff ffcc 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	091b      	lsrs	r3, r3, #4
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4904      	ldr	r1, [pc, #16]	@ (8004834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	58024400 	.word	0x58024400
 8004834:	080169a0 	.word	0x080169a0

08004838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800483c:	f7ff ffb6 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8004840:	4602      	mov	r2, r0
 8004842:	4b06      	ldr	r3, [pc, #24]	@ (800485c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	f003 0307 	and.w	r3, r3, #7
 800484c:	4904      	ldr	r1, [pc, #16]	@ (8004860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800484e:	5ccb      	ldrb	r3, [r1, r3]
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	58024400 	.word	0x58024400
 8004860:	080169a0 	.word	0x080169a0

08004864 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	223f      	movs	r2, #63	@ 0x3f
 8004872:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004874:	4b1a      	ldr	r3, [pc, #104]	@ (80048e0 <HAL_RCC_GetClockConfig+0x7c>)
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f003 0207 	and.w	r2, r3, #7
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004880:	4b17      	ldr	r3, [pc, #92]	@ (80048e0 <HAL_RCC_GetClockConfig+0x7c>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800488c:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <HAL_RCC_GetClockConfig+0x7c>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 020f 	and.w	r2, r3, #15
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004898:	4b11      	ldr	r3, [pc, #68]	@ (80048e0 <HAL_RCC_GetClockConfig+0x7c>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80048a4:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <HAL_RCC_GetClockConfig+0x7c>)
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_RCC_GetClockConfig+0x7c>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80048bc:	4b08      	ldr	r3, [pc, #32]	@ (80048e0 <HAL_RCC_GetClockConfig+0x7c>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048c8:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <HAL_RCC_GetClockConfig+0x80>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 020f 	and.w	r2, r3, #15
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	58024400 	.word	0x58024400
 80048e4:	52002000 	.word	0x52002000

080048e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ec:	b0c6      	sub	sp, #280	@ 0x118
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048fa:	2300      	movs	r3, #0
 80048fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800490c:	2500      	movs	r5, #0
 800490e:	ea54 0305 	orrs.w	r3, r4, r5
 8004912:	d049      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004918:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800491a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800491e:	d02f      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004920:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004924:	d828      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800492a:	d01a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800492c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004930:	d822      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800493a:	d007      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800493c:	e01c      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493e:	4bab      	ldr	r3, [pc, #684]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	4aaa      	ldr	r2, [pc, #680]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800494a:	e01a      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800494c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004950:	3308      	adds	r3, #8
 8004952:	2102      	movs	r1, #2
 8004954:	4618      	mov	r0, r3
 8004956:	f001 fc25 	bl	80061a4 <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004960:	e00f      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004966:	3328      	adds	r3, #40	@ 0x28
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fccc 	bl	8006308 <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800498a:	4b98      	ldr	r3, [pc, #608]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800498c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004998:	4a94      	ldr	r2, [pc, #592]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800499a:	430b      	orrs	r3, r1
 800499c:	6513      	str	r3, [r2, #80]	@ 0x50
 800499e:	e003      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80049b4:	f04f 0900 	mov.w	r9, #0
 80049b8:	ea58 0309 	orrs.w	r3, r8, r9
 80049bc:	d047      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80049be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d82a      	bhi.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80049c8:	a201      	add	r2, pc, #4	@ (adr r2, 80049d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80049ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ce:	bf00      	nop
 80049d0:	080049e5 	.word	0x080049e5
 80049d4:	080049f3 	.word	0x080049f3
 80049d8:	08004a09 	.word	0x08004a09
 80049dc:	08004a27 	.word	0x08004a27
 80049e0:	08004a27 	.word	0x08004a27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049e4:	4b81      	ldr	r3, [pc, #516]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	4a80      	ldr	r2, [pc, #512]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80049ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049f0:	e01a      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049f6:	3308      	adds	r3, #8
 80049f8:	2100      	movs	r1, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 fbd2 	bl	80061a4 <RCCEx_PLL2_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a06:	e00f      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a0c:	3328      	adds	r3, #40	@ 0x28
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f001 fc79 	bl	8006308 <RCCEx_PLL3_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a1c:	e004      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a24:	e000      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a30:	4b6e      	ldr	r3, [pc, #440]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a34:	f023 0107 	bic.w	r1, r3, #7
 8004a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3e:	4a6b      	ldr	r2, [pc, #428]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a44:	e003      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004a5a:	f04f 0b00 	mov.w	fp, #0
 8004a5e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004a62:	d05b      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a6c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004a70:	d03b      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004a72:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004a76:	d834      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a7c:	d037      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a82:	d82e      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a88:	d033      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004a8a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004a8e:	d828      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a94:	d01a      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004a96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a9a:	d822      	bhi.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004aa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004aa4:	d007      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004aa6:	e01c      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa8:	4b50      	ldr	r3, [pc, #320]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	4a4f      	ldr	r2, [pc, #316]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ab4:	e01e      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004aba:	3308      	adds	r3, #8
 8004abc:	2100      	movs	r1, #0
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f001 fb70 	bl	80061a4 <RCCEx_PLL2_Config>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004aca:	e013      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad0:	3328      	adds	r3, #40	@ 0x28
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f001 fc17 	bl	8006308 <RCCEx_PLL3_Config>
 8004ada:	4603      	mov	r3, r0
 8004adc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ae0:	e008      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ae8:	e004      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004aea:	bf00      	nop
 8004aec:	e002      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004afc:	4b3b      	ldr	r3, [pc, #236]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b0c:	4a37      	ldr	r2, [pc, #220]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b12:	e003      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b36:	460b      	mov	r3, r1
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	d05d      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b44:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b48:	d03b      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004b4a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004b4e:	d834      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b50:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b54:	d037      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004b56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b5a:	d82e      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b60:	d033      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004b62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b66:	d828      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b6c:	d01a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004b6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b72:	d822      	bhi.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b7c:	d007      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b7e:	e01c      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b80:	4b1a      	ldr	r3, [pc, #104]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	4a19      	ldr	r2, [pc, #100]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b8c:	e01e      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b92:	3308      	adds	r3, #8
 8004b94:	2100      	movs	r1, #0
 8004b96:	4618      	mov	r0, r3
 8004b98:	f001 fb04 	bl	80061a4 <RCCEx_PLL2_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004ba2:	e013      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba8:	3328      	adds	r3, #40	@ 0x28
 8004baa:	2100      	movs	r1, #0
 8004bac:	4618      	mov	r0, r3
 8004bae:	f001 fbab 	bl	8006308 <RCCEx_PLL3_Config>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bb8:	e008      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bc0:	e004      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004be4:	4a01      	ldr	r2, [pc, #4]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004be6:	430b      	orrs	r3, r1
 8004be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bea:	e005      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004c0e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d03a      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1e:	2b30      	cmp	r3, #48	@ 0x30
 8004c20:	d01f      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004c22:	2b30      	cmp	r3, #48	@ 0x30
 8004c24:	d819      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d00c      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004c2a:	2b20      	cmp	r3, #32
 8004c2c:	d815      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d019      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004c32:	2b10      	cmp	r3, #16
 8004c34:	d111      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c36:	4baa      	ldr	r3, [pc, #680]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	4aa9      	ldr	r2, [pc, #676]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c42:	e011      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c48:	3308      	adds	r3, #8
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f001 faa9 	bl	80061a4 <RCCEx_PLL2_Config>
 8004c52:	4603      	mov	r3, r0
 8004c54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004c58:	e006      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c60:	e002      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004c62:	bf00      	nop
 8004c64:	e000      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c70:	4b9b      	ldr	r3, [pc, #620]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7e:	4a98      	ldr	r2, [pc, #608]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004c80:	430b      	orrs	r3, r1
 8004c82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c84:	e003      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004ca4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4313      	orrs	r3, r2
 8004cac:	d051      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cb8:	d035      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004cba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cbe:	d82e      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004cc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cc4:	d031      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004cc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cca:	d828      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd0:	d01a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cd6:	d822      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ce0:	d007      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004ce2:	e01c      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce8:	4a7d      	ldr	r2, [pc, #500]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004cf0:	e01c      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fa52 	bl	80061a4 <RCCEx_PLL2_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d06:	e011      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0c:	3328      	adds	r3, #40	@ 0x28
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 faf9 	bl	8006308 <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d1c:	e006      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d24:	e002      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d34:	4b6a      	ldr	r3, [pc, #424]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d42:	4a67      	ldr	r2, [pc, #412]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d48:	e003      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d62:	2300      	movs	r3, #0
 8004d64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d68:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	d053      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d7c:	d033      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004d7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d82:	d82c      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d88:	d02f      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004d8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d8e:	d826      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d94:	d02b      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004d96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d9a:	d820      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004d9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004da0:	d012      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8004da2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004da6:	d81a      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d022      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db0:	d115      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db6:	3308      	adds	r3, #8
 8004db8:	2101      	movs	r1, #1
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f001 f9f2 	bl	80061a4 <RCCEx_PLL2_Config>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dc6:	e015      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dcc:	3328      	adds	r3, #40	@ 0x28
 8004dce:	2101      	movs	r1, #1
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 fa99 	bl	8006308 <RCCEx_PLL3_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004de4:	e006      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004de6:	bf00      	nop
 8004de8:	e004      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004dea:	bf00      	nop
 8004dec:	e002      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004dee:	bf00      	nop
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10a      	bne.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004dfc:	4b38      	ldr	r3, [pc, #224]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e0a:	4a35      	ldr	r2, [pc, #212]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004e0c:	430b      	orrs	r3, r1
 8004e0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e10:	e003      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e30:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e34:	460b      	mov	r3, r1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	d058      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e46:	d033      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e4c:	d82c      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e52:	d02f      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e58:	d826      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e5e:	d02b      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004e60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e64:	d820      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e6a:	d012      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e70:	d81a      	bhi.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d022      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e7a:	d115      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e80:	3308      	adds	r3, #8
 8004e82:	2101      	movs	r1, #1
 8004e84:	4618      	mov	r0, r3
 8004e86:	f001 f98d 	bl	80061a4 <RCCEx_PLL2_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e90:	e015      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e96:	3328      	adds	r3, #40	@ 0x28
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f001 fa34 	bl	8006308 <RCCEx_PLL3_Config>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004eae:	e006      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004eb0:	bf00      	nop
 8004eb2:	e004      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ec6:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004ed6:	4a02      	ldr	r2, [pc, #8]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004ed8:	430b      	orrs	r3, r1
 8004eda:	6593      	str	r3, [r2, #88]	@ 0x58
 8004edc:	e006      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004ede:	bf00      	nop
 8004ee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ee8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004efc:	2300      	movs	r3, #0
 8004efe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004f02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	d037      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f16:	d00e      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f1c:	d816      	bhi.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d018      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004f22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f26:	d111      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f28:	4bc4      	ldr	r3, [pc, #784]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	4ac3      	ldr	r2, [pc, #780]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f34:	e00f      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f001 f930 	bl	80061a4 <RCCEx_PLL2_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f4a:	e004      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f52:	e000      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10a      	bne.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f5e:	4bb7      	ldr	r3, [pc, #732]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f6c:	4ab3      	ldr	r2, [pc, #716]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f72:	e003      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f96:	460b      	mov	r3, r1
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	d039      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d81c      	bhi.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fac:	08004fe9 	.word	0x08004fe9
 8004fb0:	08004fbd 	.word	0x08004fbd
 8004fb4:	08004fcb 	.word	0x08004fcb
 8004fb8:	08004fe9 	.word	0x08004fe9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fbc:	4b9f      	ldr	r3, [pc, #636]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	4a9e      	ldr	r2, [pc, #632]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fc8:	e00f      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fce:	3308      	adds	r3, #8
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f001 f8e6 	bl	80061a4 <RCCEx_PLL2_Config>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fde:	e004      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ff2:	4b92      	ldr	r3, [pc, #584]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff6:	f023 0103 	bic.w	r1, r3, #3
 8004ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005000:	4a8e      	ldr	r2, [pc, #568]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005002:	430b      	orrs	r3, r1
 8005004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005006:	e003      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800500c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800501c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005020:	2300      	movs	r3, #0
 8005022:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005026:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800502a:	460b      	mov	r3, r1
 800502c:	4313      	orrs	r3, r2
 800502e:	f000 8099 	beq.w	8005164 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005032:	4b83      	ldr	r3, [pc, #524]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a82      	ldr	r2, [pc, #520]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800503c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800503e:	f7fd fa13 	bl	8002468 <HAL_GetTick>
 8005042:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005046:	e00b      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005048:	f7fd fa0e 	bl	8002468 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b64      	cmp	r3, #100	@ 0x64
 8005056:	d903      	bls.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800505e:	e005      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005060:	4b77      	ldr	r3, [pc, #476]	@ (8005240 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ed      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800506c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005070:	2b00      	cmp	r3, #0
 8005072:	d173      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005074:	4b71      	ldr	r3, [pc, #452]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005076:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800507c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005080:	4053      	eors	r3, r2
 8005082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005086:	2b00      	cmp	r3, #0
 8005088:	d015      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800508a:	4b6c      	ldr	r3, [pc, #432]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800508c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005092:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005096:	4b69      	ldr	r3, [pc, #420]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	4a68      	ldr	r2, [pc, #416]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050a2:	4b66      	ldr	r3, [pc, #408]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a6:	4a65      	ldr	r2, [pc, #404]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050ae:	4a63      	ldr	r2, [pc, #396]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80050b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c2:	d118      	bne.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c4:	f7fd f9d0 	bl	8002468 <HAL_GetTick>
 80050c8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050cc:	e00d      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ce:	f7fd f9cb 	bl	8002468 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80050d8:	1ad2      	subs	r2, r2, r3
 80050da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80050de:	429a      	cmp	r2, r3
 80050e0:	d903      	bls.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80050e8:	e005      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ea:	4b54      	ldr	r3, [pc, #336]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0eb      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80050f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d129      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005102:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800510a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800510e:	d10e      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005110:	4b4a      	ldr	r3, [pc, #296]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800511c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005120:	091a      	lsrs	r2, r3, #4
 8005122:	4b48      	ldr	r3, [pc, #288]	@ (8005244 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005124:	4013      	ands	r3, r2
 8005126:	4a45      	ldr	r2, [pc, #276]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005128:	430b      	orrs	r3, r1
 800512a:	6113      	str	r3, [r2, #16]
 800512c:	e005      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800512e:	4b43      	ldr	r3, [pc, #268]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	4a42      	ldr	r2, [pc, #264]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005134:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005138:	6113      	str	r3, [r2, #16]
 800513a:	4b40      	ldr	r3, [pc, #256]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800513c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800513e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514a:	4a3c      	ldr	r2, [pc, #240]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800514c:	430b      	orrs	r3, r1
 800514e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005150:	e008      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005156:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800515a:	e003      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005160:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f002 0301 	and.w	r3, r2, #1
 8005170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005174:	2300      	movs	r3, #0
 8005176:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800517a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800517e:	460b      	mov	r3, r1
 8005180:	4313      	orrs	r3, r2
 8005182:	f000 808f 	beq.w	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800518c:	2b28      	cmp	r3, #40	@ 0x28
 800518e:	d871      	bhi.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005190:	a201      	add	r2, pc, #4	@ (adr r2, 8005198 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	0800527d 	.word	0x0800527d
 800519c:	08005275 	.word	0x08005275
 80051a0:	08005275 	.word	0x08005275
 80051a4:	08005275 	.word	0x08005275
 80051a8:	08005275 	.word	0x08005275
 80051ac:	08005275 	.word	0x08005275
 80051b0:	08005275 	.word	0x08005275
 80051b4:	08005275 	.word	0x08005275
 80051b8:	08005249 	.word	0x08005249
 80051bc:	08005275 	.word	0x08005275
 80051c0:	08005275 	.word	0x08005275
 80051c4:	08005275 	.word	0x08005275
 80051c8:	08005275 	.word	0x08005275
 80051cc:	08005275 	.word	0x08005275
 80051d0:	08005275 	.word	0x08005275
 80051d4:	08005275 	.word	0x08005275
 80051d8:	0800525f 	.word	0x0800525f
 80051dc:	08005275 	.word	0x08005275
 80051e0:	08005275 	.word	0x08005275
 80051e4:	08005275 	.word	0x08005275
 80051e8:	08005275 	.word	0x08005275
 80051ec:	08005275 	.word	0x08005275
 80051f0:	08005275 	.word	0x08005275
 80051f4:	08005275 	.word	0x08005275
 80051f8:	0800527d 	.word	0x0800527d
 80051fc:	08005275 	.word	0x08005275
 8005200:	08005275 	.word	0x08005275
 8005204:	08005275 	.word	0x08005275
 8005208:	08005275 	.word	0x08005275
 800520c:	08005275 	.word	0x08005275
 8005210:	08005275 	.word	0x08005275
 8005214:	08005275 	.word	0x08005275
 8005218:	0800527d 	.word	0x0800527d
 800521c:	08005275 	.word	0x08005275
 8005220:	08005275 	.word	0x08005275
 8005224:	08005275 	.word	0x08005275
 8005228:	08005275 	.word	0x08005275
 800522c:	08005275 	.word	0x08005275
 8005230:	08005275 	.word	0x08005275
 8005234:	08005275 	.word	0x08005275
 8005238:	0800527d 	.word	0x0800527d
 800523c:	58024400 	.word	0x58024400
 8005240:	58024800 	.word	0x58024800
 8005244:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524c:	3308      	adds	r3, #8
 800524e:	2101      	movs	r1, #1
 8005250:	4618      	mov	r0, r3
 8005252:	f000 ffa7 	bl	80061a4 <RCCEx_PLL2_Config>
 8005256:	4603      	mov	r3, r0
 8005258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800525c:	e00f      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005262:	3328      	adds	r3, #40	@ 0x28
 8005264:	2101      	movs	r1, #1
 8005266:	4618      	mov	r0, r3
 8005268:	f001 f84e 	bl	8006308 <RCCEx_PLL3_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005272:	e004      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800527a:	e000      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800527c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005286:	4bbf      	ldr	r3, [pc, #764]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800528a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800528e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005292:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005294:	4abb      	ldr	r2, [pc, #748]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005296:	430b      	orrs	r3, r1
 8005298:	6553      	str	r3, [r2, #84]	@ 0x54
 800529a:	e003      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800529c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f002 0302 	and.w	r3, r2, #2
 80052b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80052be:	460b      	mov	r3, r1
 80052c0:	4313      	orrs	r3, r2
 80052c2:	d041      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ca:	2b05      	cmp	r3, #5
 80052cc:	d824      	bhi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80052ce:	a201      	add	r2, pc, #4	@ (adr r2, 80052d4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80052d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d4:	08005321 	.word	0x08005321
 80052d8:	080052ed 	.word	0x080052ed
 80052dc:	08005303 	.word	0x08005303
 80052e0:	08005321 	.word	0x08005321
 80052e4:	08005321 	.word	0x08005321
 80052e8:	08005321 	.word	0x08005321
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80052ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f0:	3308      	adds	r3, #8
 80052f2:	2101      	movs	r1, #1
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 ff55 	bl	80061a4 <RCCEx_PLL2_Config>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005300:	e00f      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005306:	3328      	adds	r3, #40	@ 0x28
 8005308:	2101      	movs	r1, #1
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fffc 	bl	8006308 <RCCEx_PLL3_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005316:	e004      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800531e:	e000      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005322:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800532a:	4b96      	ldr	r3, [pc, #600]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800532c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800532e:	f023 0107 	bic.w	r1, r3, #7
 8005332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005338:	4a92      	ldr	r2, [pc, #584]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800533a:	430b      	orrs	r3, r1
 800533c:	6553      	str	r3, [r2, #84]	@ 0x54
 800533e:	e003      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005344:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f002 0304 	and.w	r3, r2, #4
 8005354:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005358:	2300      	movs	r3, #0
 800535a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800535e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005362:	460b      	mov	r3, r1
 8005364:	4313      	orrs	r3, r2
 8005366:	d044      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005370:	2b05      	cmp	r3, #5
 8005372:	d825      	bhi.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8005374:	a201      	add	r2, pc, #4	@ (adr r2, 800537c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	080053c9 	.word	0x080053c9
 8005380:	08005395 	.word	0x08005395
 8005384:	080053ab 	.word	0x080053ab
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053c9 	.word	0x080053c9
 8005390:	080053c9 	.word	0x080053c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005398:	3308      	adds	r3, #8
 800539a:	2101      	movs	r1, #1
 800539c:	4618      	mov	r0, r3
 800539e:	f000 ff01 	bl	80061a4 <RCCEx_PLL2_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053a8:	e00f      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ae:	3328      	adds	r3, #40	@ 0x28
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 ffa8 	bl	8006308 <RCCEx_PLL3_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053be:	e004      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80053c6:	e000      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80053c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10b      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053d2:	4b6c      	ldr	r3, [pc, #432]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d6:	f023 0107 	bic.w	r1, r3, #7
 80053da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e2:	4a68      	ldr	r2, [pc, #416]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80053e8:	e003      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f002 0320 	and.w	r3, r2, #32
 80053fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005402:	2300      	movs	r3, #0
 8005404:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005408:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800540c:	460b      	mov	r3, r1
 800540e:	4313      	orrs	r3, r2
 8005410:	d055      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800541a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800541e:	d033      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8005420:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005424:	d82c      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542a:	d02f      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800542c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005430:	d826      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8005432:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005436:	d02b      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8005438:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800543c:	d820      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800543e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005442:	d012      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8005444:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005448:	d81a      	bhi.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d022      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800544e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005452:	d115      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005458:	3308      	adds	r3, #8
 800545a:	2100      	movs	r1, #0
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fea1 	bl	80061a4 <RCCEx_PLL2_Config>
 8005462:	4603      	mov	r3, r0
 8005464:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005468:	e015      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800546a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546e:	3328      	adds	r3, #40	@ 0x28
 8005470:	2102      	movs	r1, #2
 8005472:	4618      	mov	r0, r3
 8005474:	f000 ff48 	bl	8006308 <RCCEx_PLL3_Config>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800547e:	e00a      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005486:	e006      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005488:	bf00      	nop
 800548a:	e004      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800548c:	bf00      	nop
 800548e:	e002      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8005494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005496:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10b      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800549e:	4b39      	ldr	r3, [pc, #228]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054ae:	4a35      	ldr	r2, [pc, #212]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80054b4:	e003      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80054d8:	460b      	mov	r3, r1
 80054da:	4313      	orrs	r3, r2
 80054dc:	d058      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80054e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054ea:	d033      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80054ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80054f0:	d82c      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80054f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054f6:	d02f      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fc:	d826      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80054fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005502:	d02b      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8005504:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005508:	d820      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800550a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800550e:	d012      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005514:	d81a      	bhi.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d022      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800551a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800551e:	d115      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005524:	3308      	adds	r3, #8
 8005526:	2100      	movs	r1, #0
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fe3b 	bl	80061a4 <RCCEx_PLL2_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005534:	e015      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800553a:	3328      	adds	r3, #40	@ 0x28
 800553c:	2102      	movs	r1, #2
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fee2 	bl	8006308 <RCCEx_PLL3_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800554a:	e00a      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005552:	e006      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005554:	bf00      	nop
 8005556:	e004      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005558:	bf00      	nop
 800555a:	e002      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800555c:	bf00      	nop
 800555e:	e000      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005560:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005562:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10e      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800556a:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005576:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800557a:	4a02      	ldr	r2, [pc, #8]	@ (8005584 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800557c:	430b      	orrs	r3, r1
 800557e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005580:	e006      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8005582:	bf00      	nop
 8005584:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800558c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800559c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80055aa:	460b      	mov	r3, r1
 80055ac:	4313      	orrs	r3, r2
 80055ae:	d055      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055bc:	d033      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80055be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055c2:	d82c      	bhi.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c8:	d02f      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80055ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ce:	d826      	bhi.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80055d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055d4:	d02b      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80055d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055da:	d820      	bhi.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80055dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055e0:	d012      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80055e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055e6:	d81a      	bhi.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d022      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80055ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055f0:	d115      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f6:	3308      	adds	r3, #8
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fdd2 	bl	80061a4 <RCCEx_PLL2_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005606:	e015      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800560c:	3328      	adds	r3, #40	@ 0x28
 800560e:	2102      	movs	r1, #2
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fe79 	bl	8006308 <RCCEx_PLL3_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800561c:	e00a      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005624:	e006      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005626:	bf00      	nop
 8005628:	e004      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800562a:	bf00      	nop
 800562c:	e002      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005634:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10b      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800563c:	4ba0      	ldr	r3, [pc, #640]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800563e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005640:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005648:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800564c:	4a9c      	ldr	r2, [pc, #624]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800564e:	430b      	orrs	r3, r1
 8005650:	6593      	str	r3, [r2, #88]	@ 0x58
 8005652:	e003      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005658:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f002 0308 	and.w	r3, r2, #8
 8005668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800566c:	2300      	movs	r3, #0
 800566e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005672:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005676:	460b      	mov	r3, r1
 8005678:	4313      	orrs	r3, r2
 800567a:	d01e      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800567c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005688:	d10c      	bne.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800568a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568e:	3328      	adds	r3, #40	@ 0x28
 8005690:	2102      	movs	r1, #2
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fe38 	bl	8006308 <RCCEx_PLL3_Config>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80056a4:	4b86      	ldr	r3, [pc, #536]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056b4:	4a82      	ldr	r2, [pc, #520]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80056b6:	430b      	orrs	r3, r1
 80056b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f002 0310 	and.w	r3, r2, #16
 80056c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80056d4:	460b      	mov	r3, r1
 80056d6:	4313      	orrs	r3, r2
 80056d8:	d01e      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056e6:	d10c      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ec:	3328      	adds	r3, #40	@ 0x28
 80056ee:	2102      	movs	r1, #2
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fe09 	bl	8006308 <RCCEx_PLL3_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005702:	4b6f      	ldr	r3, [pc, #444]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005706:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800570a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005712:	4a6b      	ldr	r2, [pc, #428]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005714:	430b      	orrs	r3, r1
 8005716:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005724:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005726:	2300      	movs	r3, #0
 8005728:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800572a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d03e      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800573c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005740:	d022      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005746:	d81b      	bhi.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005750:	d00b      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005752:	e015      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005758:	3308      	adds	r3, #8
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fd21 	bl	80061a4 <RCCEx_PLL2_Config>
 8005762:	4603      	mov	r3, r0
 8005764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005768:	e00f      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800576a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576e:	3328      	adds	r3, #40	@ 0x28
 8005770:	2102      	movs	r1, #2
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fdc8 	bl	8006308 <RCCEx_PLL3_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800577e:	e004      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005786:	e000      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800578a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10b      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005792:	4b4b      	ldr	r3, [pc, #300]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005796:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80057a2:	4a47      	ldr	r2, [pc, #284]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80057a8:	e003      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80057be:	673b      	str	r3, [r7, #112]	@ 0x70
 80057c0:	2300      	movs	r3, #0
 80057c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80057c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057c8:	460b      	mov	r3, r1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	d03b      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057da:	d01f      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80057dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057e0:	d818      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80057e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e6:	d003      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80057e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057ec:	d007      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80057ee:	e011      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f0:	4b33      	ldr	r3, [pc, #204]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f4:	4a32      	ldr	r2, [pc, #200]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80057fc:	e00f      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005802:	3328      	adds	r3, #40	@ 0x28
 8005804:	2101      	movs	r1, #1
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fd7e 	bl	8006308 <RCCEx_PLL3_Config>
 800580c:	4603      	mov	r3, r0
 800580e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005812:	e004      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800581a:	e000      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800581c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800581e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10b      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005826:	4b26      	ldr	r3, [pc, #152]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005836:	4a22      	ldr	r2, [pc, #136]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005838:	430b      	orrs	r3, r1
 800583a:	6553      	str	r3, [r2, #84]	@ 0x54
 800583c:	e003      	b.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005842:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005852:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005854:	2300      	movs	r3, #0
 8005856:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005858:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800585c:	460b      	mov	r3, r1
 800585e:	4313      	orrs	r3, r2
 8005860:	d034      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800586c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005870:	d007      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005872:	e011      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005874:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800587a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800587e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005880:	e00e      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005886:	3308      	adds	r3, #8
 8005888:	2102      	movs	r1, #2
 800588a:	4618      	mov	r0, r3
 800588c:	f000 fc8a 	bl	80061a4 <RCCEx_PLL2_Config>
 8005890:	4603      	mov	r3, r0
 8005892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005896:	e003      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800589e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10d      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b6:	4a02      	ldr	r2, [pc, #8]	@ (80058c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80058b8:	430b      	orrs	r3, r1
 80058ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058bc:	e006      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80058be:	bf00      	nop
 80058c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80058d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058da:	2300      	movs	r3, #0
 80058dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80058de:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80058e2:	460b      	mov	r3, r1
 80058e4:	4313      	orrs	r3, r2
 80058e6:	d00c      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80058e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ec:	3328      	adds	r3, #40	@ 0x28
 80058ee:	2102      	movs	r1, #2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 fd09 	bl	8006308 <RCCEx_PLL3_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800590e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005910:	2300      	movs	r3, #0
 8005912:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005914:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005918:	460b      	mov	r3, r1
 800591a:	4313      	orrs	r3, r2
 800591c:	d036      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800591e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005922:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005924:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005928:	d018      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800592a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800592e:	d811      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005934:	d014      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8005936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800593a:	d80b      	bhi.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d011      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005944:	d106      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005946:	4bb7      	ldr	r3, [pc, #732]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	4ab6      	ldr	r2, [pc, #728]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800594c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005950:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800595a:	e004      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800595c:	bf00      	nop
 800595e:	e002      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005960:	bf00      	nop
 8005962:	e000      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005966:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800596e:	4bad      	ldr	r3, [pc, #692]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005972:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800597c:	4aa9      	ldr	r2, [pc, #676]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800597e:	430b      	orrs	r3, r1
 8005980:	6553      	str	r3, [r2, #84]	@ 0x54
 8005982:	e003      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005984:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005988:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005998:	653b      	str	r3, [r7, #80]	@ 0x50
 800599a:	2300      	movs	r3, #0
 800599c:	657b      	str	r3, [r7, #84]	@ 0x54
 800599e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80059a2:	460b      	mov	r3, r1
 80059a4:	4313      	orrs	r3, r2
 80059a6:	d009      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059a8:	4b9e      	ldr	r3, [pc, #632]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b6:	4a9b      	ldr	r2, [pc, #620]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80059c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ca:	2300      	movs	r3, #0
 80059cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80059d2:	460b      	mov	r3, r1
 80059d4:	4313      	orrs	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059d8:	4b92      	ldr	r3, [pc, #584]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059dc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80059e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80059e6:	4a8f      	ldr	r2, [pc, #572]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80059e8:	430b      	orrs	r3, r1
 80059ea:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80059f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059fa:	2300      	movs	r3, #0
 80059fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80059fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a08:	4b86      	ldr	r3, [pc, #536]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	4a85      	ldr	r2, [pc, #532]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a12:	6113      	str	r3, [r2, #16]
 8005a14:	4b83      	ldr	r3, [pc, #524]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a16:	6919      	ldr	r1, [r3, #16]
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a20:	4a80      	ldr	r2, [pc, #512]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a34:	2300      	movs	r3, #0
 8005a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	d009      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a42:	4b78      	ldr	r3, [pc, #480]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a46:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a50:	4a74      	ldr	r2, [pc, #464]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a52:	430b      	orrs	r3, r1
 8005a54:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005a62:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a64:	2300      	movs	r3, #0
 8005a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a68:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005a72:	4b6c      	ldr	r3, [pc, #432]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a76:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a82:	4a68      	ldr	r2, [pc, #416]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005a84:	430b      	orrs	r3, r1
 8005a86:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005a88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	2100      	movs	r1, #0
 8005a92:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a9a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	d011      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa8:	3308      	adds	r3, #8
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fb79 	bl	80061a4 <RCCEx_PLL2_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	6239      	str	r1, [r7, #32]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ada:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	d011      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae8:	3308      	adds	r3, #8
 8005aea:	2101      	movs	r1, #1
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fb59 	bl	80061a4 <RCCEx_PLL2_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005af8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b10:	2100      	movs	r1, #0
 8005b12:	61b9      	str	r1, [r7, #24]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	61fb      	str	r3, [r7, #28]
 8005b1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4313      	orrs	r3, r2
 8005b22:	d011      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b28:	3308      	adds	r3, #8
 8005b2a:	2102      	movs	r1, #2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 fb39 	bl	80061a4 <RCCEx_PLL2_Config>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005b38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	2100      	movs	r1, #0
 8005b52:	6139      	str	r1, [r7, #16]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4313      	orrs	r3, r2
 8005b62:	d011      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b68:	3328      	adds	r3, #40	@ 0x28
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fbcb 	bl	8006308 <RCCEx_PLL3_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005b78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	2100      	movs	r1, #0
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	d011      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba8:	3328      	adds	r3, #40	@ 0x28
 8005baa:	2101      	movs	r1, #1
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fbab 	bl	8006308 <RCCEx_PLL3_Config>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	6039      	str	r1, [r7, #0]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005bde:	460b      	mov	r3, r1
 8005be0:	4313      	orrs	r3, r2
 8005be2:	d011      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be8:	3328      	adds	r3, #40	@ 0x28
 8005bea:	2102      	movs	r1, #2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fb8b 	bl	8006308 <RCCEx_PLL3_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005bf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005c08:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e000      	b.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c22:	bf00      	nop
 8005c24:	58024400 	.word	0x58024400

08005c28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c2c:	f7fe fdbe 	bl	80047ac <HAL_RCC_GetHCLKFreq>
 8005c30:	4602      	mov	r2, r0
 8005c32:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	091b      	lsrs	r3, r3, #4
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	4904      	ldr	r1, [pc, #16]	@ (8005c50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c3e:	5ccb      	ldrb	r3, [r1, r3]
 8005c40:	f003 031f 	and.w	r3, r3, #31
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	080169a0 	.word	0x080169a0

08005c54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b089      	sub	sp, #36	@ 0x24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c5c:	4ba1      	ldr	r3, [pc, #644]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c66:	4b9f      	ldr	r3, [pc, #636]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c6a:	0b1b      	lsrs	r3, r3, #12
 8005c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c72:	4b9c      	ldr	r3, [pc, #624]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	091b      	lsrs	r3, r3, #4
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c7e:	4b99      	ldr	r3, [pc, #612]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c82:	08db      	lsrs	r3, r3, #3
 8005c84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f000 8111 	beq.w	8005ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	f000 8083 	beq.w	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	f200 80a1 	bhi.w	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d056      	beq.n	8005d6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cbe:	e099      	b.n	8005df4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cc0:	4b88      	ldr	r3, [pc, #544]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d02d      	beq.n	8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ccc:	4b85      	ldr	r3, [pc, #532]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	08db      	lsrs	r3, r3, #3
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	4a84      	ldr	r2, [pc, #528]	@ (8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cdc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d26:	e087      	b.n	8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d6a:	e065      	b.n	8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d7e:	4b59      	ldr	r3, [pc, #356]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005daa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dae:	e043      	b.n	8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc2:	4b48      	ldr	r3, [pc, #288]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005df2:	e021      	b.n	8005e38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e06:	4b37      	ldr	r3, [pc, #220]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e38:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3c:	0a5b      	lsrs	r3, r3, #9
 8005e3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e52:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e5e:	ee17 2a90 	vmov	r2, s15
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e66:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e8c:	ee17 2a90 	vmov	r2, s15
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e94:	4b13      	ldr	r3, [pc, #76]	@ (8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	0e1b      	lsrs	r3, r3, #24
 8005e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eba:	ee17 2a90 	vmov	r2, s15
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	609a      	str	r2, [r3, #8]
}
 8005ed6:	bf00      	nop
 8005ed8:	3724      	adds	r7, #36	@ 0x24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	03d09000 	.word	0x03d09000
 8005eec:	46000000 	.word	0x46000000
 8005ef0:	4c742400 	.word	0x4c742400
 8005ef4:	4a742400 	.word	0x4a742400
 8005ef8:	4af42400 	.word	0x4af42400

08005efc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b089      	sub	sp, #36	@ 0x24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f04:	4ba1      	ldr	r3, [pc, #644]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	f003 0303 	and.w	r3, r3, #3
 8005f0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f0e:	4b9f      	ldr	r3, [pc, #636]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f12:	0d1b      	lsrs	r3, r3, #20
 8005f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f1a:	4b9c      	ldr	r3, [pc, #624]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f26:	4b99      	ldr	r3, [pc, #612]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2a:	08db      	lsrs	r3, r3, #3
 8005f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	fb02 f303 	mul.w	r3, r2, r3
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 8111 	beq.w	800616c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	f000 8083 	beq.w	8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	f200 80a1 	bhi.w	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d056      	beq.n	8006014 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f66:	e099      	b.n	800609c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f68:	4b88      	ldr	r3, [pc, #544]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d02d      	beq.n	8005fd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f74:	4b85      	ldr	r3, [pc, #532]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	08db      	lsrs	r3, r3, #3
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	4a84      	ldr	r2, [pc, #528]	@ (8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
 8005f84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	ee07 3a90 	vmov	s15, r3
 8005f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fce:	e087      	b.n	80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006198 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006012:	e065      	b.n	80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800619c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b59      	ldr	r3, [pc, #356]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a03 	vldr	s12, [r7, #12]
 800603a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006056:	e043      	b.n	80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b48      	ldr	r3, [pc, #288]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a03 	vldr	s12, [r7, #12]
 800607e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609a:	e021      	b.n	80060e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800619c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b37      	ldr	r3, [pc, #220]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80060e0:	4b2a      	ldr	r3, [pc, #168]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e4:	0a5b      	lsrs	r3, r3, #9
 80060e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80060f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80060fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006106:	ee17 2a90 	vmov	r2, s15
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800610e:	4b1f      	ldr	r3, [pc, #124]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	0c1b      	lsrs	r3, r3, #16
 8006114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006118:	ee07 3a90 	vmov	s15, r3
 800611c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006120:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006124:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006128:	edd7 6a07 	vldr	s13, [r7, #28]
 800612c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006134:	ee17 2a90 	vmov	r2, s15
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800613c:	4b13      	ldr	r3, [pc, #76]	@ (800618c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800613e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006140:	0e1b      	lsrs	r3, r3, #24
 8006142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006156:	edd7 6a07 	vldr	s13, [r7, #28]
 800615a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006162:	ee17 2a90 	vmov	r2, s15
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800616a:	e008      	b.n	800617e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	609a      	str	r2, [r3, #8]
}
 800617e:	bf00      	nop
 8006180:	3724      	adds	r7, #36	@ 0x24
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	58024400 	.word	0x58024400
 8006190:	03d09000 	.word	0x03d09000
 8006194:	46000000 	.word	0x46000000
 8006198:	4c742400 	.word	0x4c742400
 800619c:	4a742400 	.word	0x4a742400
 80061a0:	4af42400 	.word	0x4af42400

080061a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061b2:	4b53      	ldr	r3, [pc, #332]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80061b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d101      	bne.n	80061c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e099      	b.n	80062f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80061c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a4e      	ldr	r2, [pc, #312]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80061c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80061cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061ce:	f7fc f94b 	bl	8002468 <HAL_GetTick>
 80061d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061d4:	e008      	b.n	80061e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061d6:	f7fc f947 	bl	8002468 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e086      	b.n	80062f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061e8:	4b45      	ldr	r3, [pc, #276]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f0      	bne.n	80061d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061f4:	4b42      	ldr	r3, [pc, #264]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	031b      	lsls	r3, r3, #12
 8006202:	493f      	ldr	r1, [pc, #252]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 8006204:	4313      	orrs	r3, r2
 8006206:	628b      	str	r3, [r1, #40]	@ 0x28
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	3b01      	subs	r3, #1
 800620e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	3b01      	subs	r3, #1
 8006218:	025b      	lsls	r3, r3, #9
 800621a:	b29b      	uxth	r3, r3
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	3b01      	subs	r3, #1
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	3b01      	subs	r3, #1
 8006232:	061b      	lsls	r3, r3, #24
 8006234:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006238:	4931      	ldr	r1, [pc, #196]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 800623a:	4313      	orrs	r3, r2
 800623c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800623e:	4b30      	ldr	r3, [pc, #192]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 8006240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006242:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	492d      	ldr	r1, [pc, #180]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 800624c:	4313      	orrs	r3, r2
 800624e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006250:	4b2b      	ldr	r3, [pc, #172]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 8006252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006254:	f023 0220 	bic.w	r2, r3, #32
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	4928      	ldr	r1, [pc, #160]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 800625e:	4313      	orrs	r3, r2
 8006260:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006262:	4b27      	ldr	r3, [pc, #156]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 8006264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006266:	4a26      	ldr	r2, [pc, #152]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 8006268:	f023 0310 	bic.w	r3, r3, #16
 800626c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800626e:	4b24      	ldr	r3, [pc, #144]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 8006270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006272:	4b24      	ldr	r3, [pc, #144]	@ (8006304 <RCCEx_PLL2_Config+0x160>)
 8006274:	4013      	ands	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	69d2      	ldr	r2, [r2, #28]
 800627a:	00d2      	lsls	r2, r2, #3
 800627c:	4920      	ldr	r1, [pc, #128]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006282:	4b1f      	ldr	r3, [pc, #124]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 8006284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006286:	4a1e      	ldr	r2, [pc, #120]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 8006288:	f043 0310 	orr.w	r3, r3, #16
 800628c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006294:	4b1a      	ldr	r3, [pc, #104]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	4a19      	ldr	r2, [pc, #100]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 800629a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800629e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062a0:	e00f      	b.n	80062c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d106      	bne.n	80062b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80062a8:	4b15      	ldr	r3, [pc, #84]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	4a14      	ldr	r2, [pc, #80]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80062ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062b4:	e005      	b.n	80062c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80062b6:	4b12      	ldr	r3, [pc, #72]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	4a11      	ldr	r2, [pc, #68]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80062c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80062c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ce:	f7fc f8cb 	bl	8002468 <HAL_GetTick>
 80062d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062d4:	e008      	b.n	80062e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062d6:	f7fc f8c7 	bl	8002468 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e006      	b.n	80062f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80062e8:	4b05      	ldr	r3, [pc, #20]	@ (8006300 <RCCEx_PLL2_Config+0x15c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	58024400 	.word	0x58024400
 8006304:	ffff0007 	.word	0xffff0007

08006308 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006316:	4b53      	ldr	r3, [pc, #332]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 8006318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	2b03      	cmp	r3, #3
 8006320:	d101      	bne.n	8006326 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e099      	b.n	800645a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006326:	4b4f      	ldr	r3, [pc, #316]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a4e      	ldr	r2, [pc, #312]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 800632c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006332:	f7fc f899 	bl	8002468 <HAL_GetTick>
 8006336:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006338:	e008      	b.n	800634c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800633a:	f7fc f895 	bl	8002468 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d901      	bls.n	800634c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e086      	b.n	800645a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800634c:	4b45      	ldr	r3, [pc, #276]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1f0      	bne.n	800633a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006358:	4b42      	ldr	r3, [pc, #264]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 800635a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	051b      	lsls	r3, r3, #20
 8006366:	493f      	ldr	r1, [pc, #252]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 8006368:	4313      	orrs	r3, r2
 800636a:	628b      	str	r3, [r1, #40]	@ 0x28
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	3b01      	subs	r3, #1
 8006372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	3b01      	subs	r3, #1
 800637c:	025b      	lsls	r3, r3, #9
 800637e:	b29b      	uxth	r3, r3
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	3b01      	subs	r3, #1
 8006388:	041b      	lsls	r3, r3, #16
 800638a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	3b01      	subs	r3, #1
 8006396:	061b      	lsls	r3, r3, #24
 8006398:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800639c:	4931      	ldr	r1, [pc, #196]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063a2:	4b30      	ldr	r3, [pc, #192]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	492d      	ldr	r1, [pc, #180]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80063b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	4928      	ldr	r1, [pc, #160]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80063c6:	4b27      	ldr	r3, [pc, #156]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ca:	4a26      	ldr	r2, [pc, #152]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80063d2:	4b24      	ldr	r3, [pc, #144]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063d6:	4b24      	ldr	r3, [pc, #144]	@ (8006468 <RCCEx_PLL3_Config+0x160>)
 80063d8:	4013      	ands	r3, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	69d2      	ldr	r2, [r2, #28]
 80063de:	00d2      	lsls	r2, r2, #3
 80063e0:	4920      	ldr	r1, [pc, #128]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80063e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	4a1e      	ldr	r2, [pc, #120]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d106      	bne.n	8006406 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fc:	4a19      	ldr	r2, [pc, #100]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 80063fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006402:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006404:	e00f      	b.n	8006426 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d106      	bne.n	800641a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800640c:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	4a14      	ldr	r2, [pc, #80]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 8006412:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006416:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006418:	e005      	b.n	8006426 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800641a:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	4a11      	ldr	r2, [pc, #68]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 8006420:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006424:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006426:	4b0f      	ldr	r3, [pc, #60]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a0e      	ldr	r2, [pc, #56]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 800642c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006432:	f7fc f819 	bl	8002468 <HAL_GetTick>
 8006436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006438:	e008      	b.n	800644c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800643a:	f7fc f815 	bl	8002468 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b02      	cmp	r3, #2
 8006446:	d901      	bls.n	800644c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e006      	b.n	800645a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800644c:	4b05      	ldr	r3, [pc, #20]	@ (8006464 <RCCEx_PLL3_Config+0x15c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0f0      	beq.n	800643a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	58024400 	.word	0x58024400
 8006468:	ffff0007 	.word	0xffff0007

0800646c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e049      	b.n	8006512 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fb fe86 	bl	80021a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3304      	adds	r3, #4
 80064a8:	4619      	mov	r1, r3
 80064aa:	4610      	mov	r0, r2
 80064ac:	f000 f9ec 	bl	8006888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d001      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e05e      	b.n	80065f2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a2b      	ldr	r2, [pc, #172]	@ (8006600 <HAL_TIM_Base_Start_IT+0xe4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d02c      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x94>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800655e:	d027      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x94>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a27      	ldr	r2, [pc, #156]	@ (8006604 <HAL_TIM_Base_Start_IT+0xe8>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d022      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x94>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a26      	ldr	r2, [pc, #152]	@ (8006608 <HAL_TIM_Base_Start_IT+0xec>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d01d      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x94>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a24      	ldr	r2, [pc, #144]	@ (800660c <HAL_TIM_Base_Start_IT+0xf0>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d018      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x94>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a23      	ldr	r2, [pc, #140]	@ (8006610 <HAL_TIM_Base_Start_IT+0xf4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d013      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x94>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a21      	ldr	r2, [pc, #132]	@ (8006614 <HAL_TIM_Base_Start_IT+0xf8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00e      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x94>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a20      	ldr	r2, [pc, #128]	@ (8006618 <HAL_TIM_Base_Start_IT+0xfc>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d009      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x94>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1e      	ldr	r2, [pc, #120]	@ (800661c <HAL_TIM_Base_Start_IT+0x100>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d004      	beq.n	80065b0 <HAL_TIM_Base_Start_IT+0x94>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006620 <HAL_TIM_Base_Start_IT+0x104>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d115      	bne.n	80065dc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006624 <HAL_TIM_Base_Start_IT+0x108>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b06      	cmp	r3, #6
 80065c0:	d015      	beq.n	80065ee <HAL_TIM_Base_Start_IT+0xd2>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c8:	d011      	beq.n	80065ee <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065da:	e008      	b.n	80065ee <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	e000      	b.n	80065f0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40010000 	.word	0x40010000
 8006604:	40000400 	.word	0x40000400
 8006608:	40000800 	.word	0x40000800
 800660c:	40000c00 	.word	0x40000c00
 8006610:	40010400 	.word	0x40010400
 8006614:	40001800 	.word	0x40001800
 8006618:	40014000 	.word	0x40014000
 800661c:	4000e000 	.word	0x4000e000
 8006620:	4000e400 	.word	0x4000e400
 8006624:	00010007 	.word	0x00010007

08006628 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d020      	beq.n	800668c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01b      	beq.n	800668c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0202 	mvn.w	r2, #2
 800665c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f8e9 	bl	800684a <HAL_TIM_IC_CaptureCallback>
 8006678:	e005      	b.n	8006686 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f8db 	bl	8006836 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f8ec 	bl	800685e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f003 0304 	and.w	r3, r3, #4
 8006692:	2b00      	cmp	r3, #0
 8006694:	d020      	beq.n	80066d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0204 	mvn.w	r2, #4
 80066a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f8c3 	bl	800684a <HAL_TIM_IC_CaptureCallback>
 80066c4:	e005      	b.n	80066d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f8b5 	bl	8006836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f8c6 	bl	800685e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d020      	beq.n	8006724 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01b      	beq.n	8006724 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0208 	mvn.w	r2, #8
 80066f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2204      	movs	r2, #4
 80066fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f89d 	bl	800684a <HAL_TIM_IC_CaptureCallback>
 8006710:	e005      	b.n	800671e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f88f 	bl	8006836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f8a0 	bl	800685e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b00      	cmp	r3, #0
 800672c:	d020      	beq.n	8006770 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01b      	beq.n	8006770 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0210 	mvn.w	r2, #16
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2208      	movs	r2, #8
 8006746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f877 	bl	800684a <HAL_TIM_IC_CaptureCallback>
 800675c:	e005      	b.n	800676a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f869 	bl	8006836 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f87a 	bl	800685e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00c      	beq.n	8006794 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	2b00      	cmp	r3, #0
 8006782:	d007      	beq.n	8006794 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0201 	mvn.w	r2, #1
 800678c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fb fafa 	bl	8001d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00c      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d007      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80067ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f9b5 	bl	8006b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00c      	beq.n	80067e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d007      	beq.n	80067e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80067de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f9ad 	bl	8006b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00c      	beq.n	800680a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f834 	bl	8006872 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	f003 0320 	and.w	r3, r3, #32
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00c      	beq.n	800682e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f06f 0220 	mvn.w	r2, #32
 8006826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f975 	bl	8006b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800682e:	bf00      	nop
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800687a:	bf00      	nop
 800687c:	370c      	adds	r7, #12
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
	...

08006888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a47      	ldr	r2, [pc, #284]	@ (80069b8 <TIM_Base_SetConfig+0x130>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d013      	beq.n	80068c8 <TIM_Base_SetConfig+0x40>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a6:	d00f      	beq.n	80068c8 <TIM_Base_SetConfig+0x40>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a44      	ldr	r2, [pc, #272]	@ (80069bc <TIM_Base_SetConfig+0x134>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00b      	beq.n	80068c8 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a43      	ldr	r2, [pc, #268]	@ (80069c0 <TIM_Base_SetConfig+0x138>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d007      	beq.n	80068c8 <TIM_Base_SetConfig+0x40>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a42      	ldr	r2, [pc, #264]	@ (80069c4 <TIM_Base_SetConfig+0x13c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_Base_SetConfig+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a41      	ldr	r2, [pc, #260]	@ (80069c8 <TIM_Base_SetConfig+0x140>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d108      	bne.n	80068da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a36      	ldr	r2, [pc, #216]	@ (80069b8 <TIM_Base_SetConfig+0x130>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d027      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e8:	d023      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a33      	ldr	r2, [pc, #204]	@ (80069bc <TIM_Base_SetConfig+0x134>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01f      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a32      	ldr	r2, [pc, #200]	@ (80069c0 <TIM_Base_SetConfig+0x138>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d01b      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a31      	ldr	r2, [pc, #196]	@ (80069c4 <TIM_Base_SetConfig+0x13c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d017      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a30      	ldr	r2, [pc, #192]	@ (80069c8 <TIM_Base_SetConfig+0x140>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2f      	ldr	r2, [pc, #188]	@ (80069cc <TIM_Base_SetConfig+0x144>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00f      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a2e      	ldr	r2, [pc, #184]	@ (80069d0 <TIM_Base_SetConfig+0x148>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d00b      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2d      	ldr	r2, [pc, #180]	@ (80069d4 <TIM_Base_SetConfig+0x14c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d007      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2c      	ldr	r2, [pc, #176]	@ (80069d8 <TIM_Base_SetConfig+0x150>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d003      	beq.n	8006932 <TIM_Base_SetConfig+0xaa>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2b      	ldr	r2, [pc, #172]	@ (80069dc <TIM_Base_SetConfig+0x154>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d108      	bne.n	8006944 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a14      	ldr	r2, [pc, #80]	@ (80069b8 <TIM_Base_SetConfig+0x130>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00f      	beq.n	800698a <TIM_Base_SetConfig+0x102>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a16      	ldr	r2, [pc, #88]	@ (80069c8 <TIM_Base_SetConfig+0x140>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00b      	beq.n	800698a <TIM_Base_SetConfig+0x102>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a15      	ldr	r2, [pc, #84]	@ (80069cc <TIM_Base_SetConfig+0x144>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d007      	beq.n	800698a <TIM_Base_SetConfig+0x102>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a14      	ldr	r2, [pc, #80]	@ (80069d0 <TIM_Base_SetConfig+0x148>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_Base_SetConfig+0x102>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a13      	ldr	r2, [pc, #76]	@ (80069d4 <TIM_Base_SetConfig+0x14c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d103      	bne.n	8006992 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f043 0204 	orr.w	r2, r3, #4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	601a      	str	r2, [r3, #0]
}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40014400 	.word	0x40014400
 80069d4:	40014800 	.word	0x40014800
 80069d8:	4000e000 	.word	0x4000e000
 80069dc:	4000e400 	.word	0x4000e400

080069e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e077      	b.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a35      	ldr	r2, [pc, #212]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a34      	ldr	r2, [pc, #208]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d108      	bne.n	8006a3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a25      	ldr	r2, [pc, #148]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d02c      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a6a:	d027      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a22      	ldr	r2, [pc, #136]	@ (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d022      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a21      	ldr	r2, [pc, #132]	@ (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d01d      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1f      	ldr	r2, [pc, #124]	@ (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d018      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d013      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1b      	ldr	r2, [pc, #108]	@ (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00e      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d009      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a18      	ldr	r2, [pc, #96]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d004      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d10c      	bne.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ac2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40001800 	.word	0x40001800
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	4000e000 	.word	0x4000e000
 8006b14:	4000e400 	.word	0x4000e400

08006b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e042      	b.n	8006bec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d106      	bne.n	8006b7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7fb fb87 	bl	800228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2224      	movs	r2, #36	@ 0x24
 8006b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0201 	bic.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f001 fbe0 	bl	8008364 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fd71 	bl	800768c <UART_SetConfig>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e01b      	b.n	8006bec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689a      	ldr	r2, [r3, #8]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0201 	orr.w	r2, r2, #1
 8006be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fc5f 	bl	80084a8 <UART_CheckIdleState>
 8006bea:	4603      	mov	r3, r0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3708      	adds	r7, #8
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08a      	sub	sp, #40	@ 0x28
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4613      	mov	r3, r2
 8006c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c0a:	2b20      	cmp	r3, #32
 8006c0c:	d17b      	bne.n	8006d06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_UART_Transmit+0x26>
 8006c14:	88fb      	ldrh	r3, [r7, #6]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e074      	b.n	8006d08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2221      	movs	r2, #33	@ 0x21
 8006c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c2e:	f7fb fc1b 	bl	8002468 <HAL_GetTick>
 8006c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	88fa      	ldrh	r2, [r7, #6]
 8006c38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	88fa      	ldrh	r2, [r7, #6]
 8006c40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c4c:	d108      	bne.n	8006c60 <HAL_UART_Transmit+0x6c>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	61bb      	str	r3, [r7, #24]
 8006c5e:	e003      	b.n	8006c68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c68:	e030      	b.n	8006ccc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2200      	movs	r2, #0
 8006c72:	2180      	movs	r1, #128	@ 0x80
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f001 fcc1 	bl	80085fc <UART_WaitOnFlagUntilTimeout>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d005      	beq.n	8006c8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e03d      	b.n	8006d08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10b      	bne.n	8006caa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ca0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	3302      	adds	r3, #2
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	e007      	b.n	8006cba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	781a      	ldrb	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1c8      	bne.n	8006c6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2140      	movs	r1, #64	@ 0x40
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f001 fc8a 	bl	80085fc <UART_WaitOnFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e006      	b.n	8006d08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	e000      	b.n	8006d08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d06:	2302      	movs	r3, #2
  }
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3720      	adds	r7, #32
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08a      	sub	sp, #40	@ 0x28
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	f040 80b5 	bne.w	8006e96 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <HAL_UART_Receive+0x28>
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0ad      	b.n	8006e98 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2222      	movs	r2, #34	@ 0x22
 8006d48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d52:	f7fb fb89 	bl	8002468 <HAL_GetTick>
 8006d56:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	88fa      	ldrh	r2, [r7, #6]
 8006d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	88fa      	ldrh	r2, [r7, #6]
 8006d64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d70:	d10e      	bne.n	8006d90 <HAL_UART_Receive+0x80>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d105      	bne.n	8006d86 <HAL_UART_Receive+0x76>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006d80:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d84:	e02d      	b.n	8006de2 <HAL_UART_Receive+0xd2>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	22ff      	movs	r2, #255	@ 0xff
 8006d8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006d8e:	e028      	b.n	8006de2 <HAL_UART_Receive+0xd2>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10d      	bne.n	8006db4 <HAL_UART_Receive+0xa4>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <HAL_UART_Receive+0x9a>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	22ff      	movs	r2, #255	@ 0xff
 8006da4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006da8:	e01b      	b.n	8006de2 <HAL_UART_Receive+0xd2>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	227f      	movs	r2, #127	@ 0x7f
 8006dae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006db2:	e016      	b.n	8006de2 <HAL_UART_Receive+0xd2>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dbc:	d10d      	bne.n	8006dda <HAL_UART_Receive+0xca>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <HAL_UART_Receive+0xc0>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	227f      	movs	r2, #127	@ 0x7f
 8006dca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dce:	e008      	b.n	8006de2 <HAL_UART_Receive+0xd2>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	223f      	movs	r2, #63	@ 0x3f
 8006dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006dd8:	e003      	b.n	8006de2 <HAL_UART_Receive+0xd2>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006de8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df2:	d108      	bne.n	8006e06 <HAL_UART_Receive+0xf6>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	e003      	b.n	8006e0e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006e0e:	e036      	b.n	8006e7e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	2200      	movs	r2, #0
 8006e18:	2120      	movs	r1, #32
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f001 fbee 	bl	80085fc <UART_WaitOnFlagUntilTimeout>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d005      	beq.n	8006e32 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e032      	b.n	8006e98 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10c      	bne.n	8006e52 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	8a7b      	ldrh	r3, [r7, #18]
 8006e42:	4013      	ands	r3, r2
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	3302      	adds	r3, #2
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	e00c      	b.n	8006e6c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	8a7b      	ldrh	r3, [r7, #18]
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	4013      	ands	r3, r2
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1c2      	bne.n	8006e10 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e000      	b.n	8006e98 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006e96:	2302      	movs	r3, #2
  }
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b0ba      	sub	sp, #232	@ 0xe8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ec6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006eca:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006ece:	4013      	ands	r3, r2
 8006ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d11b      	bne.n	8006f14 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d015      	beq.n	8006f14 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d105      	bne.n	8006f00 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8393 	beq.w	8007630 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
      }
      return;
 8006f12:	e38d      	b.n	8007630 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006f14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8123 	beq.w	8007164 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f1e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f22:	4b8d      	ldr	r3, [pc, #564]	@ (8007158 <HAL_UART_IRQHandler+0x2b8>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006f2e:	4b8b      	ldr	r3, [pc, #556]	@ (800715c <HAL_UART_IRQHandler+0x2bc>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 8116 	beq.w	8007164 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d011      	beq.n	8006f68 <HAL_UART_IRQHandler+0xc8>
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00b      	beq.n	8006f68 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2201      	movs	r2, #1
 8006f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5e:	f043 0201 	orr.w	r2, r3, #1
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d011      	beq.n	8006f98 <HAL_UART_IRQHandler+0xf8>
 8006f74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2202      	movs	r2, #2
 8006f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f8e:	f043 0204 	orr.w	r2, r3, #4
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d011      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x128>
 8006fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00b      	beq.n	8006fc8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fbe:	f043 0202 	orr.w	r2, r3, #2
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d017      	beq.n	8007004 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fe0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006fe4:	4b5c      	ldr	r3, [pc, #368]	@ (8007158 <HAL_UART_IRQHandler+0x2b8>)
 8006fe6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2208      	movs	r2, #8
 8006ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ffa:	f043 0208 	orr.w	r2, r3, #8
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800700c:	2b00      	cmp	r3, #0
 800700e:	d012      	beq.n	8007036 <HAL_UART_IRQHandler+0x196>
 8007010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007014:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00c      	beq.n	8007036 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007024:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702c:	f043 0220 	orr.w	r2, r3, #32
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 82f9 	beq.w	8007634 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d013      	beq.n	8007076 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800704e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d105      	bne.n	8007066 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800705a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800705e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800707c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708a:	2b40      	cmp	r3, #64	@ 0x40
 800708c:	d005      	beq.n	800709a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800708e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007092:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007096:	2b00      	cmp	r3, #0
 8007098:	d054      	beq.n	8007144 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f001 fb1c 	bl	80086d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070aa:	2b40      	cmp	r3, #64	@ 0x40
 80070ac:	d146      	bne.n	800713c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3308      	adds	r3, #8
 80070b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80070c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80070da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80070de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80070e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80070f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1d9      	bne.n	80070ae <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007100:	2b00      	cmp	r3, #0
 8007102:	d017      	beq.n	8007134 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800710a:	4a15      	ldr	r2, [pc, #84]	@ (8007160 <HAL_UART_IRQHandler+0x2c0>)
 800710c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007114:	4618      	mov	r0, r3
 8007116:	f7fb fe29 	bl	8002d6c <HAL_DMA_Abort_IT>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d019      	beq.n	8007154 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800712e:	4610      	mov	r0, r2
 8007130:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007132:	e00f      	b.n	8007154 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fa93 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800713a:	e00b      	b.n	8007154 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fa8f 	bl	8007660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007142:	e007      	b.n	8007154 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa8b 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007152:	e26f      	b.n	8007634 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007154:	bf00      	nop
    return;
 8007156:	e26d      	b.n	8007634 <HAL_UART_IRQHandler+0x794>
 8007158:	10000001 	.word	0x10000001
 800715c:	04000120 	.word	0x04000120
 8007160:	080087a5 	.word	0x080087a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007168:	2b01      	cmp	r3, #1
 800716a:	f040 8203 	bne.w	8007574 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007172:	f003 0310 	and.w	r3, r3, #16
 8007176:	2b00      	cmp	r3, #0
 8007178:	f000 81fc 	beq.w	8007574 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007180:	f003 0310 	and.w	r3, r3, #16
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 81f5 	beq.w	8007574 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2210      	movs	r2, #16
 8007190:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800719c:	2b40      	cmp	r3, #64	@ 0x40
 800719e:	f040 816d 	bne.w	800747c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4aa4      	ldr	r2, [pc, #656]	@ (800743c <HAL_UART_IRQHandler+0x59c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d068      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4aa1      	ldr	r2, [pc, #644]	@ (8007440 <HAL_UART_IRQHandler+0x5a0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d061      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a9f      	ldr	r2, [pc, #636]	@ (8007444 <HAL_UART_IRQHandler+0x5a4>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d05a      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a9c      	ldr	r2, [pc, #624]	@ (8007448 <HAL_UART_IRQHandler+0x5a8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d053      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a9a      	ldr	r2, [pc, #616]	@ (800744c <HAL_UART_IRQHandler+0x5ac>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d04c      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a97      	ldr	r2, [pc, #604]	@ (8007450 <HAL_UART_IRQHandler+0x5b0>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d045      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a95      	ldr	r2, [pc, #596]	@ (8007454 <HAL_UART_IRQHandler+0x5b4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d03e      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a92      	ldr	r2, [pc, #584]	@ (8007458 <HAL_UART_IRQHandler+0x5b8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d037      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a90      	ldr	r2, [pc, #576]	@ (800745c <HAL_UART_IRQHandler+0x5bc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d030      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a8d      	ldr	r2, [pc, #564]	@ (8007460 <HAL_UART_IRQHandler+0x5c0>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d029      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a8b      	ldr	r2, [pc, #556]	@ (8007464 <HAL_UART_IRQHandler+0x5c4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d022      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a88      	ldr	r2, [pc, #544]	@ (8007468 <HAL_UART_IRQHandler+0x5c8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01b      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a86      	ldr	r2, [pc, #536]	@ (800746c <HAL_UART_IRQHandler+0x5cc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d014      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a83      	ldr	r2, [pc, #524]	@ (8007470 <HAL_UART_IRQHandler+0x5d0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d00d      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a81      	ldr	r2, [pc, #516]	@ (8007474 <HAL_UART_IRQHandler+0x5d4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d006      	beq.n	8007282 <HAL_UART_IRQHandler+0x3e2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a7e      	ldr	r2, [pc, #504]	@ (8007478 <HAL_UART_IRQHandler+0x5d8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d106      	bne.n	8007290 <HAL_UART_IRQHandler+0x3f0>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	b29b      	uxth	r3, r3
 800728e:	e005      	b.n	800729c <HAL_UART_IRQHandler+0x3fc>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	b29b      	uxth	r3, r3
 800729c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 80ad 	beq.w	8007404 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072b4:	429a      	cmp	r2, r3
 80072b6:	f080 80a5 	bcs.w	8007404 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80072c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d0:	f000 8087 	beq.w	80073e2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80072e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80072fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007302:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800730a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007316:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1da      	bne.n	80072d4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800732e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007330:	f023 0301 	bic.w	r3, r3, #1
 8007334:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007342:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007346:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800734a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007354:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e1      	bne.n	800731e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3308      	adds	r3, #8
 8007360:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800736a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800736c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007370:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800737e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007380:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007384:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800738c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e3      	bne.n	800735a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073b0:	f023 0310 	bic.w	r3, r3, #16
 80073b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80073c4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80073c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80073d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e4      	bne.n	80073a0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073dc:	4618      	mov	r0, r3
 80073de:	f7fb f9a7 	bl	8002730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2202      	movs	r2, #2
 80073e6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f939 	bl	8007674 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007402:	e119      	b.n	8007638 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800740a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800740e:	429a      	cmp	r2, r3
 8007410:	f040 8112 	bne.w	8007638 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007420:	f040 810a 	bne.w	8007638 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f91e 	bl	8007674 <HAL_UARTEx_RxEventCallback>
      return;
 8007438:	e0fe      	b.n	8007638 <HAL_UART_IRQHandler+0x798>
 800743a:	bf00      	nop
 800743c:	40020010 	.word	0x40020010
 8007440:	40020028 	.word	0x40020028
 8007444:	40020040 	.word	0x40020040
 8007448:	40020058 	.word	0x40020058
 800744c:	40020070 	.word	0x40020070
 8007450:	40020088 	.word	0x40020088
 8007454:	400200a0 	.word	0x400200a0
 8007458:	400200b8 	.word	0x400200b8
 800745c:	40020410 	.word	0x40020410
 8007460:	40020428 	.word	0x40020428
 8007464:	40020440 	.word	0x40020440
 8007468:	40020458 	.word	0x40020458
 800746c:	40020470 	.word	0x40020470
 8007470:	40020488 	.word	0x40020488
 8007474:	400204a0 	.word	0x400204a0
 8007478:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007488:	b29b      	uxth	r3, r3
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 80cf 	beq.w	800763c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800749e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80ca 	beq.w	800763c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	461a      	mov	r2, r3
 80074c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80074ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80074cc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e4      	bne.n	80074a8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3308      	adds	r3, #8
 80074e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	623b      	str	r3, [r7, #32]
   return(result);
 80074ee:	6a3a      	ldr	r2, [r7, #32]
 80074f0:	4b55      	ldr	r3, [pc, #340]	@ (8007648 <HAL_UART_IRQHandler+0x7a8>)
 80074f2:	4013      	ands	r3, r2
 80074f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3308      	adds	r3, #8
 80074fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007502:	633a      	str	r2, [r7, #48]	@ 0x30
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e3      	bne.n	80074de <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	60fb      	str	r3, [r7, #12]
   return(result);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0310 	bic.w	r3, r3, #16
 800753e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	69b9      	ldr	r1, [r7, #24]
 8007552:	69fa      	ldr	r2, [r7, #28]
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	617b      	str	r3, [r7, #20]
   return(result);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e4      	bne.n	800752a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007566:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f881 	bl	8007674 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007572:	e063      	b.n	800763c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007578:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00e      	beq.n	800759e <HAL_UART_IRQHandler+0x6fe>
 8007580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d008      	beq.n	800759e <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 f941 	bl	800881e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800759c:	e051      	b.n	8007642 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d014      	beq.n	80075d4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80075aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d105      	bne.n	80075c2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80075b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d008      	beq.n	80075d4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d03a      	beq.n	8007640 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
    }
    return;
 80075d2:	e035      	b.n	8007640 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d009      	beq.n	80075f4 <HAL_UART_IRQHandler+0x754>
 80075e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 f8eb 	bl	80087c8 <UART_EndTransmit_IT>
    return;
 80075f2:	e026      	b.n	8007642 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d009      	beq.n	8007614 <HAL_UART_IRQHandler+0x774>
 8007600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007604:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f001 f91a 	bl	8008846 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007612:	e016      	b.n	8007642 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d010      	beq.n	8007642 <HAL_UART_IRQHandler+0x7a2>
 8007620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007624:	2b00      	cmp	r3, #0
 8007626:	da0c      	bge.n	8007642 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f001 f902 	bl	8008832 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800762e:	e008      	b.n	8007642 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007630:	bf00      	nop
 8007632:	e006      	b.n	8007642 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007634:	bf00      	nop
 8007636:	e004      	b.n	8007642 <HAL_UART_IRQHandler+0x7a2>
      return;
 8007638:	bf00      	nop
 800763a:	e002      	b.n	8007642 <HAL_UART_IRQHandler+0x7a2>
      return;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <HAL_UART_IRQHandler+0x7a2>
    return;
 8007640:	bf00      	nop
  }
}
 8007642:	37e8      	adds	r7, #232	@ 0xe8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	effffffe 	.word	0xeffffffe

0800764c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007680:	bf00      	nop
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800768c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007690:	b092      	sub	sp, #72	@ 0x48
 8007692:	af00      	add	r7, sp, #0
 8007694:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4bbe      	ldr	r3, [pc, #760]	@ (80079b4 <UART_SetConfig+0x328>)
 80076bc:	4013      	ands	r3, r2
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80076c4:	430b      	orrs	r3, r1
 80076c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4ab3      	ldr	r2, [pc, #716]	@ (80079b8 <UART_SetConfig+0x32c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076f4:	4313      	orrs	r3, r2
 80076f6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	4baf      	ldr	r3, [pc, #700]	@ (80079bc <UART_SetConfig+0x330>)
 8007700:	4013      	ands	r3, r2
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007708:	430b      	orrs	r3, r1
 800770a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007712:	f023 010f 	bic.w	r1, r3, #15
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4aa6      	ldr	r2, [pc, #664]	@ (80079c0 <UART_SetConfig+0x334>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d177      	bne.n	800781c <UART_SetConfig+0x190>
 800772c:	4ba5      	ldr	r3, [pc, #660]	@ (80079c4 <UART_SetConfig+0x338>)
 800772e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007730:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007734:	2b28      	cmp	r3, #40	@ 0x28
 8007736:	d86d      	bhi.n	8007814 <UART_SetConfig+0x188>
 8007738:	a201      	add	r2, pc, #4	@ (adr r2, 8007740 <UART_SetConfig+0xb4>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	080077e5 	.word	0x080077e5
 8007744:	08007815 	.word	0x08007815
 8007748:	08007815 	.word	0x08007815
 800774c:	08007815 	.word	0x08007815
 8007750:	08007815 	.word	0x08007815
 8007754:	08007815 	.word	0x08007815
 8007758:	08007815 	.word	0x08007815
 800775c:	08007815 	.word	0x08007815
 8007760:	080077ed 	.word	0x080077ed
 8007764:	08007815 	.word	0x08007815
 8007768:	08007815 	.word	0x08007815
 800776c:	08007815 	.word	0x08007815
 8007770:	08007815 	.word	0x08007815
 8007774:	08007815 	.word	0x08007815
 8007778:	08007815 	.word	0x08007815
 800777c:	08007815 	.word	0x08007815
 8007780:	080077f5 	.word	0x080077f5
 8007784:	08007815 	.word	0x08007815
 8007788:	08007815 	.word	0x08007815
 800778c:	08007815 	.word	0x08007815
 8007790:	08007815 	.word	0x08007815
 8007794:	08007815 	.word	0x08007815
 8007798:	08007815 	.word	0x08007815
 800779c:	08007815 	.word	0x08007815
 80077a0:	080077fd 	.word	0x080077fd
 80077a4:	08007815 	.word	0x08007815
 80077a8:	08007815 	.word	0x08007815
 80077ac:	08007815 	.word	0x08007815
 80077b0:	08007815 	.word	0x08007815
 80077b4:	08007815 	.word	0x08007815
 80077b8:	08007815 	.word	0x08007815
 80077bc:	08007815 	.word	0x08007815
 80077c0:	08007805 	.word	0x08007805
 80077c4:	08007815 	.word	0x08007815
 80077c8:	08007815 	.word	0x08007815
 80077cc:	08007815 	.word	0x08007815
 80077d0:	08007815 	.word	0x08007815
 80077d4:	08007815 	.word	0x08007815
 80077d8:	08007815 	.word	0x08007815
 80077dc:	08007815 	.word	0x08007815
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	2301      	movs	r3, #1
 80077e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ea:	e326      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80077ec:	2304      	movs	r3, #4
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f2:	e322      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80077f4:	2308      	movs	r3, #8
 80077f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fa:	e31e      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80077fc:	2310      	movs	r3, #16
 80077fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007802:	e31a      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007804:	2320      	movs	r3, #32
 8007806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780a:	e316      	b.n	8007e3a <UART_SetConfig+0x7ae>
 800780c:	2340      	movs	r3, #64	@ 0x40
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007812:	e312      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007814:	2380      	movs	r3, #128	@ 0x80
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781a:	e30e      	b.n	8007e3a <UART_SetConfig+0x7ae>
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a69      	ldr	r2, [pc, #420]	@ (80079c8 <UART_SetConfig+0x33c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d130      	bne.n	8007888 <UART_SetConfig+0x1fc>
 8007826:	4b67      	ldr	r3, [pc, #412]	@ (80079c4 <UART_SetConfig+0x338>)
 8007828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	2b05      	cmp	r3, #5
 8007830:	d826      	bhi.n	8007880 <UART_SetConfig+0x1f4>
 8007832:	a201      	add	r2, pc, #4	@ (adr r2, 8007838 <UART_SetConfig+0x1ac>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	08007851 	.word	0x08007851
 800783c:	08007859 	.word	0x08007859
 8007840:	08007861 	.word	0x08007861
 8007844:	08007869 	.word	0x08007869
 8007848:	08007871 	.word	0x08007871
 800784c:	08007879 	.word	0x08007879
 8007850:	2300      	movs	r3, #0
 8007852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007856:	e2f0      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007858:	2304      	movs	r3, #4
 800785a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785e:	e2ec      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007860:	2308      	movs	r3, #8
 8007862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007866:	e2e8      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007868:	2310      	movs	r3, #16
 800786a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786e:	e2e4      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007870:	2320      	movs	r3, #32
 8007872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007876:	e2e0      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007878:	2340      	movs	r3, #64	@ 0x40
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787e:	e2dc      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007880:	2380      	movs	r3, #128	@ 0x80
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007886:	e2d8      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a4f      	ldr	r2, [pc, #316]	@ (80079cc <UART_SetConfig+0x340>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d130      	bne.n	80078f4 <UART_SetConfig+0x268>
 8007892:	4b4c      	ldr	r3, [pc, #304]	@ (80079c4 <UART_SetConfig+0x338>)
 8007894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	2b05      	cmp	r3, #5
 800789c:	d826      	bhi.n	80078ec <UART_SetConfig+0x260>
 800789e:	a201      	add	r2, pc, #4	@ (adr r2, 80078a4 <UART_SetConfig+0x218>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078bd 	.word	0x080078bd
 80078a8:	080078c5 	.word	0x080078c5
 80078ac:	080078cd 	.word	0x080078cd
 80078b0:	080078d5 	.word	0x080078d5
 80078b4:	080078dd 	.word	0x080078dd
 80078b8:	080078e5 	.word	0x080078e5
 80078bc:	2300      	movs	r3, #0
 80078be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c2:	e2ba      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80078c4:	2304      	movs	r3, #4
 80078c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ca:	e2b6      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80078cc:	2308      	movs	r3, #8
 80078ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078d2:	e2b2      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80078d4:	2310      	movs	r3, #16
 80078d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078da:	e2ae      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80078dc:	2320      	movs	r3, #32
 80078de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e2:	e2aa      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80078e4:	2340      	movs	r3, #64	@ 0x40
 80078e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ea:	e2a6      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80078ec:	2380      	movs	r3, #128	@ 0x80
 80078ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f2:	e2a2      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a35      	ldr	r2, [pc, #212]	@ (80079d0 <UART_SetConfig+0x344>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d130      	bne.n	8007960 <UART_SetConfig+0x2d4>
 80078fe:	4b31      	ldr	r3, [pc, #196]	@ (80079c4 <UART_SetConfig+0x338>)
 8007900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	2b05      	cmp	r3, #5
 8007908:	d826      	bhi.n	8007958 <UART_SetConfig+0x2cc>
 800790a:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <UART_SetConfig+0x284>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007929 	.word	0x08007929
 8007914:	08007931 	.word	0x08007931
 8007918:	08007939 	.word	0x08007939
 800791c:	08007941 	.word	0x08007941
 8007920:	08007949 	.word	0x08007949
 8007924:	08007951 	.word	0x08007951
 8007928:	2300      	movs	r3, #0
 800792a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792e:	e284      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e280      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e27c      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e278      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007948:	2320      	movs	r3, #32
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e274      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007950:	2340      	movs	r3, #64	@ 0x40
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e270      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007958:	2380      	movs	r3, #128	@ 0x80
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e26c      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1b      	ldr	r2, [pc, #108]	@ (80079d4 <UART_SetConfig+0x348>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d142      	bne.n	80079f0 <UART_SetConfig+0x364>
 800796a:	4b16      	ldr	r3, [pc, #88]	@ (80079c4 <UART_SetConfig+0x338>)
 800796c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	2b05      	cmp	r3, #5
 8007974:	d838      	bhi.n	80079e8 <UART_SetConfig+0x35c>
 8007976:	a201      	add	r2, pc, #4	@ (adr r2, 800797c <UART_SetConfig+0x2f0>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	08007995 	.word	0x08007995
 8007980:	0800799d 	.word	0x0800799d
 8007984:	080079a5 	.word	0x080079a5
 8007988:	080079ad 	.word	0x080079ad
 800798c:	080079d9 	.word	0x080079d9
 8007990:	080079e1 	.word	0x080079e1
 8007994:	2300      	movs	r3, #0
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800799a:	e24e      	b.n	8007e3a <UART_SetConfig+0x7ae>
 800799c:	2304      	movs	r3, #4
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e24a      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80079a4:	2308      	movs	r3, #8
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e246      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80079ac:	2310      	movs	r3, #16
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e242      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80079b4:	cfff69f3 	.word	0xcfff69f3
 80079b8:	58000c00 	.word	0x58000c00
 80079bc:	11fff4ff 	.word	0x11fff4ff
 80079c0:	40011000 	.word	0x40011000
 80079c4:	58024400 	.word	0x58024400
 80079c8:	40004400 	.word	0x40004400
 80079cc:	40004800 	.word	0x40004800
 80079d0:	40004c00 	.word	0x40004c00
 80079d4:	40005000 	.word	0x40005000
 80079d8:	2320      	movs	r3, #32
 80079da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079de:	e22c      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80079e0:	2340      	movs	r3, #64	@ 0x40
 80079e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e6:	e228      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80079e8:	2380      	movs	r3, #128	@ 0x80
 80079ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ee:	e224      	b.n	8007e3a <UART_SetConfig+0x7ae>
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4ab1      	ldr	r2, [pc, #708]	@ (8007cbc <UART_SetConfig+0x630>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d176      	bne.n	8007ae8 <UART_SetConfig+0x45c>
 80079fa:	4bb1      	ldr	r3, [pc, #708]	@ (8007cc0 <UART_SetConfig+0x634>)
 80079fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a02:	2b28      	cmp	r3, #40	@ 0x28
 8007a04:	d86c      	bhi.n	8007ae0 <UART_SetConfig+0x454>
 8007a06:	a201      	add	r2, pc, #4	@ (adr r2, 8007a0c <UART_SetConfig+0x380>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007ab1 	.word	0x08007ab1
 8007a10:	08007ae1 	.word	0x08007ae1
 8007a14:	08007ae1 	.word	0x08007ae1
 8007a18:	08007ae1 	.word	0x08007ae1
 8007a1c:	08007ae1 	.word	0x08007ae1
 8007a20:	08007ae1 	.word	0x08007ae1
 8007a24:	08007ae1 	.word	0x08007ae1
 8007a28:	08007ae1 	.word	0x08007ae1
 8007a2c:	08007ab9 	.word	0x08007ab9
 8007a30:	08007ae1 	.word	0x08007ae1
 8007a34:	08007ae1 	.word	0x08007ae1
 8007a38:	08007ae1 	.word	0x08007ae1
 8007a3c:	08007ae1 	.word	0x08007ae1
 8007a40:	08007ae1 	.word	0x08007ae1
 8007a44:	08007ae1 	.word	0x08007ae1
 8007a48:	08007ae1 	.word	0x08007ae1
 8007a4c:	08007ac1 	.word	0x08007ac1
 8007a50:	08007ae1 	.word	0x08007ae1
 8007a54:	08007ae1 	.word	0x08007ae1
 8007a58:	08007ae1 	.word	0x08007ae1
 8007a5c:	08007ae1 	.word	0x08007ae1
 8007a60:	08007ae1 	.word	0x08007ae1
 8007a64:	08007ae1 	.word	0x08007ae1
 8007a68:	08007ae1 	.word	0x08007ae1
 8007a6c:	08007ac9 	.word	0x08007ac9
 8007a70:	08007ae1 	.word	0x08007ae1
 8007a74:	08007ae1 	.word	0x08007ae1
 8007a78:	08007ae1 	.word	0x08007ae1
 8007a7c:	08007ae1 	.word	0x08007ae1
 8007a80:	08007ae1 	.word	0x08007ae1
 8007a84:	08007ae1 	.word	0x08007ae1
 8007a88:	08007ae1 	.word	0x08007ae1
 8007a8c:	08007ad1 	.word	0x08007ad1
 8007a90:	08007ae1 	.word	0x08007ae1
 8007a94:	08007ae1 	.word	0x08007ae1
 8007a98:	08007ae1 	.word	0x08007ae1
 8007a9c:	08007ae1 	.word	0x08007ae1
 8007aa0:	08007ae1 	.word	0x08007ae1
 8007aa4:	08007ae1 	.word	0x08007ae1
 8007aa8:	08007ae1 	.word	0x08007ae1
 8007aac:	08007ad9 	.word	0x08007ad9
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab6:	e1c0      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ab8:	2304      	movs	r3, #4
 8007aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007abe:	e1bc      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ac0:	2308      	movs	r3, #8
 8007ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac6:	e1b8      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ac8:	2310      	movs	r3, #16
 8007aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ace:	e1b4      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ad0:	2320      	movs	r3, #32
 8007ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ad6:	e1b0      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ad8:	2340      	movs	r3, #64	@ 0x40
 8007ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ade:	e1ac      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ae0:	2380      	movs	r3, #128	@ 0x80
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e1a8      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a75      	ldr	r2, [pc, #468]	@ (8007cc4 <UART_SetConfig+0x638>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d130      	bne.n	8007b54 <UART_SetConfig+0x4c8>
 8007af2:	4b73      	ldr	r3, [pc, #460]	@ (8007cc0 <UART_SetConfig+0x634>)
 8007af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	2b05      	cmp	r3, #5
 8007afc:	d826      	bhi.n	8007b4c <UART_SetConfig+0x4c0>
 8007afe:	a201      	add	r2, pc, #4	@ (adr r2, 8007b04 <UART_SetConfig+0x478>)
 8007b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b04:	08007b1d 	.word	0x08007b1d
 8007b08:	08007b25 	.word	0x08007b25
 8007b0c:	08007b2d 	.word	0x08007b2d
 8007b10:	08007b35 	.word	0x08007b35
 8007b14:	08007b3d 	.word	0x08007b3d
 8007b18:	08007b45 	.word	0x08007b45
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b22:	e18a      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007b24:	2304      	movs	r3, #4
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e186      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007b2c:	2308      	movs	r3, #8
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e182      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007b34:	2310      	movs	r3, #16
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e17e      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007b3c:	2320      	movs	r3, #32
 8007b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b42:	e17a      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007b44:	2340      	movs	r3, #64	@ 0x40
 8007b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b4a:	e176      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007b4c:	2380      	movs	r3, #128	@ 0x80
 8007b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b52:	e172      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a5b      	ldr	r2, [pc, #364]	@ (8007cc8 <UART_SetConfig+0x63c>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d130      	bne.n	8007bc0 <UART_SetConfig+0x534>
 8007b5e:	4b58      	ldr	r3, [pc, #352]	@ (8007cc0 <UART_SetConfig+0x634>)
 8007b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	2b05      	cmp	r3, #5
 8007b68:	d826      	bhi.n	8007bb8 <UART_SetConfig+0x52c>
 8007b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b70 <UART_SetConfig+0x4e4>)
 8007b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b70:	08007b89 	.word	0x08007b89
 8007b74:	08007b91 	.word	0x08007b91
 8007b78:	08007b99 	.word	0x08007b99
 8007b7c:	08007ba1 	.word	0x08007ba1
 8007b80:	08007ba9 	.word	0x08007ba9
 8007b84:	08007bb1 	.word	0x08007bb1
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8e:	e154      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007b90:	2304      	movs	r3, #4
 8007b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b96:	e150      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007b98:	2308      	movs	r3, #8
 8007b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9e:	e14c      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e148      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ba8:	2320      	movs	r3, #32
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e144      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007bb0:	2340      	movs	r3, #64	@ 0x40
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e140      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007bb8:	2380      	movs	r3, #128	@ 0x80
 8007bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bbe:	e13c      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a41      	ldr	r2, [pc, #260]	@ (8007ccc <UART_SetConfig+0x640>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	f040 8082 	bne.w	8007cd0 <UART_SetConfig+0x644>
 8007bcc:	4b3c      	ldr	r3, [pc, #240]	@ (8007cc0 <UART_SetConfig+0x634>)
 8007bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bd4:	2b28      	cmp	r3, #40	@ 0x28
 8007bd6:	d86d      	bhi.n	8007cb4 <UART_SetConfig+0x628>
 8007bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007be0 <UART_SetConfig+0x554>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007c85 	.word	0x08007c85
 8007be4:	08007cb5 	.word	0x08007cb5
 8007be8:	08007cb5 	.word	0x08007cb5
 8007bec:	08007cb5 	.word	0x08007cb5
 8007bf0:	08007cb5 	.word	0x08007cb5
 8007bf4:	08007cb5 	.word	0x08007cb5
 8007bf8:	08007cb5 	.word	0x08007cb5
 8007bfc:	08007cb5 	.word	0x08007cb5
 8007c00:	08007c8d 	.word	0x08007c8d
 8007c04:	08007cb5 	.word	0x08007cb5
 8007c08:	08007cb5 	.word	0x08007cb5
 8007c0c:	08007cb5 	.word	0x08007cb5
 8007c10:	08007cb5 	.word	0x08007cb5
 8007c14:	08007cb5 	.word	0x08007cb5
 8007c18:	08007cb5 	.word	0x08007cb5
 8007c1c:	08007cb5 	.word	0x08007cb5
 8007c20:	08007c95 	.word	0x08007c95
 8007c24:	08007cb5 	.word	0x08007cb5
 8007c28:	08007cb5 	.word	0x08007cb5
 8007c2c:	08007cb5 	.word	0x08007cb5
 8007c30:	08007cb5 	.word	0x08007cb5
 8007c34:	08007cb5 	.word	0x08007cb5
 8007c38:	08007cb5 	.word	0x08007cb5
 8007c3c:	08007cb5 	.word	0x08007cb5
 8007c40:	08007c9d 	.word	0x08007c9d
 8007c44:	08007cb5 	.word	0x08007cb5
 8007c48:	08007cb5 	.word	0x08007cb5
 8007c4c:	08007cb5 	.word	0x08007cb5
 8007c50:	08007cb5 	.word	0x08007cb5
 8007c54:	08007cb5 	.word	0x08007cb5
 8007c58:	08007cb5 	.word	0x08007cb5
 8007c5c:	08007cb5 	.word	0x08007cb5
 8007c60:	08007ca5 	.word	0x08007ca5
 8007c64:	08007cb5 	.word	0x08007cb5
 8007c68:	08007cb5 	.word	0x08007cb5
 8007c6c:	08007cb5 	.word	0x08007cb5
 8007c70:	08007cb5 	.word	0x08007cb5
 8007c74:	08007cb5 	.word	0x08007cb5
 8007c78:	08007cb5 	.word	0x08007cb5
 8007c7c:	08007cb5 	.word	0x08007cb5
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8a:	e0d6      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c92:	e0d2      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007c94:	2308      	movs	r3, #8
 8007c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9a:	e0ce      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca2:	e0ca      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007ca4:	2320      	movs	r3, #32
 8007ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007caa:	e0c6      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007cac:	2340      	movs	r3, #64	@ 0x40
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e0c2      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007cb4:	2380      	movs	r3, #128	@ 0x80
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e0be      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007cbc:	40011400 	.word	0x40011400
 8007cc0:	58024400 	.word	0x58024400
 8007cc4:	40007800 	.word	0x40007800
 8007cc8:	40007c00 	.word	0x40007c00
 8007ccc:	40011800 	.word	0x40011800
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4aad      	ldr	r2, [pc, #692]	@ (8007f8c <UART_SetConfig+0x900>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d176      	bne.n	8007dc8 <UART_SetConfig+0x73c>
 8007cda:	4bad      	ldr	r3, [pc, #692]	@ (8007f90 <UART_SetConfig+0x904>)
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ce2:	2b28      	cmp	r3, #40	@ 0x28
 8007ce4:	d86c      	bhi.n	8007dc0 <UART_SetConfig+0x734>
 8007ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cec <UART_SetConfig+0x660>)
 8007ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cec:	08007d91 	.word	0x08007d91
 8007cf0:	08007dc1 	.word	0x08007dc1
 8007cf4:	08007dc1 	.word	0x08007dc1
 8007cf8:	08007dc1 	.word	0x08007dc1
 8007cfc:	08007dc1 	.word	0x08007dc1
 8007d00:	08007dc1 	.word	0x08007dc1
 8007d04:	08007dc1 	.word	0x08007dc1
 8007d08:	08007dc1 	.word	0x08007dc1
 8007d0c:	08007d99 	.word	0x08007d99
 8007d10:	08007dc1 	.word	0x08007dc1
 8007d14:	08007dc1 	.word	0x08007dc1
 8007d18:	08007dc1 	.word	0x08007dc1
 8007d1c:	08007dc1 	.word	0x08007dc1
 8007d20:	08007dc1 	.word	0x08007dc1
 8007d24:	08007dc1 	.word	0x08007dc1
 8007d28:	08007dc1 	.word	0x08007dc1
 8007d2c:	08007da1 	.word	0x08007da1
 8007d30:	08007dc1 	.word	0x08007dc1
 8007d34:	08007dc1 	.word	0x08007dc1
 8007d38:	08007dc1 	.word	0x08007dc1
 8007d3c:	08007dc1 	.word	0x08007dc1
 8007d40:	08007dc1 	.word	0x08007dc1
 8007d44:	08007dc1 	.word	0x08007dc1
 8007d48:	08007dc1 	.word	0x08007dc1
 8007d4c:	08007da9 	.word	0x08007da9
 8007d50:	08007dc1 	.word	0x08007dc1
 8007d54:	08007dc1 	.word	0x08007dc1
 8007d58:	08007dc1 	.word	0x08007dc1
 8007d5c:	08007dc1 	.word	0x08007dc1
 8007d60:	08007dc1 	.word	0x08007dc1
 8007d64:	08007dc1 	.word	0x08007dc1
 8007d68:	08007dc1 	.word	0x08007dc1
 8007d6c:	08007db1 	.word	0x08007db1
 8007d70:	08007dc1 	.word	0x08007dc1
 8007d74:	08007dc1 	.word	0x08007dc1
 8007d78:	08007dc1 	.word	0x08007dc1
 8007d7c:	08007dc1 	.word	0x08007dc1
 8007d80:	08007dc1 	.word	0x08007dc1
 8007d84:	08007dc1 	.word	0x08007dc1
 8007d88:	08007dc1 	.word	0x08007dc1
 8007d8c:	08007db9 	.word	0x08007db9
 8007d90:	2301      	movs	r3, #1
 8007d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d96:	e050      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007d98:	2304      	movs	r3, #4
 8007d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9e:	e04c      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007da0:	2308      	movs	r3, #8
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da6:	e048      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007da8:	2310      	movs	r3, #16
 8007daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dae:	e044      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007db0:	2320      	movs	r3, #32
 8007db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db6:	e040      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007db8:	2340      	movs	r3, #64	@ 0x40
 8007dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dbe:	e03c      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007dc0:	2380      	movs	r3, #128	@ 0x80
 8007dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dc6:	e038      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a71      	ldr	r2, [pc, #452]	@ (8007f94 <UART_SetConfig+0x908>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d130      	bne.n	8007e34 <UART_SetConfig+0x7a8>
 8007dd2:	4b6f      	ldr	r3, [pc, #444]	@ (8007f90 <UART_SetConfig+0x904>)
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd6:	f003 0307 	and.w	r3, r3, #7
 8007dda:	2b05      	cmp	r3, #5
 8007ddc:	d826      	bhi.n	8007e2c <UART_SetConfig+0x7a0>
 8007dde:	a201      	add	r2, pc, #4	@ (adr r2, 8007de4 <UART_SetConfig+0x758>)
 8007de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de4:	08007dfd 	.word	0x08007dfd
 8007de8:	08007e05 	.word	0x08007e05
 8007dec:	08007e0d 	.word	0x08007e0d
 8007df0:	08007e15 	.word	0x08007e15
 8007df4:	08007e1d 	.word	0x08007e1d
 8007df8:	08007e25 	.word	0x08007e25
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e02:	e01a      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007e04:	2304      	movs	r3, #4
 8007e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0a:	e016      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007e0c:	2308      	movs	r3, #8
 8007e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e12:	e012      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007e14:	2310      	movs	r3, #16
 8007e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e1a:	e00e      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007e1c:	2320      	movs	r3, #32
 8007e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e22:	e00a      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007e24:	2340      	movs	r3, #64	@ 0x40
 8007e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e2a:	e006      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007e2c:	2380      	movs	r3, #128	@ 0x80
 8007e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e32:	e002      	b.n	8007e3a <UART_SetConfig+0x7ae>
 8007e34:	2380      	movs	r3, #128	@ 0x80
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a55      	ldr	r2, [pc, #340]	@ (8007f94 <UART_SetConfig+0x908>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	f040 80f8 	bne.w	8008036 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e46:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007e4a:	2b20      	cmp	r3, #32
 8007e4c:	dc46      	bgt.n	8007edc <UART_SetConfig+0x850>
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	db75      	blt.n	8007f3e <UART_SetConfig+0x8b2>
 8007e52:	3b02      	subs	r3, #2
 8007e54:	2b1e      	cmp	r3, #30
 8007e56:	d872      	bhi.n	8007f3e <UART_SetConfig+0x8b2>
 8007e58:	a201      	add	r2, pc, #4	@ (adr r2, 8007e60 <UART_SetConfig+0x7d4>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007ee3 	.word	0x08007ee3
 8007e64:	08007f3f 	.word	0x08007f3f
 8007e68:	08007eeb 	.word	0x08007eeb
 8007e6c:	08007f3f 	.word	0x08007f3f
 8007e70:	08007f3f 	.word	0x08007f3f
 8007e74:	08007f3f 	.word	0x08007f3f
 8007e78:	08007efb 	.word	0x08007efb
 8007e7c:	08007f3f 	.word	0x08007f3f
 8007e80:	08007f3f 	.word	0x08007f3f
 8007e84:	08007f3f 	.word	0x08007f3f
 8007e88:	08007f3f 	.word	0x08007f3f
 8007e8c:	08007f3f 	.word	0x08007f3f
 8007e90:	08007f3f 	.word	0x08007f3f
 8007e94:	08007f3f 	.word	0x08007f3f
 8007e98:	08007f0b 	.word	0x08007f0b
 8007e9c:	08007f3f 	.word	0x08007f3f
 8007ea0:	08007f3f 	.word	0x08007f3f
 8007ea4:	08007f3f 	.word	0x08007f3f
 8007ea8:	08007f3f 	.word	0x08007f3f
 8007eac:	08007f3f 	.word	0x08007f3f
 8007eb0:	08007f3f 	.word	0x08007f3f
 8007eb4:	08007f3f 	.word	0x08007f3f
 8007eb8:	08007f3f 	.word	0x08007f3f
 8007ebc:	08007f3f 	.word	0x08007f3f
 8007ec0:	08007f3f 	.word	0x08007f3f
 8007ec4:	08007f3f 	.word	0x08007f3f
 8007ec8:	08007f3f 	.word	0x08007f3f
 8007ecc:	08007f3f 	.word	0x08007f3f
 8007ed0:	08007f3f 	.word	0x08007f3f
 8007ed4:	08007f3f 	.word	0x08007f3f
 8007ed8:	08007f31 	.word	0x08007f31
 8007edc:	2b40      	cmp	r3, #64	@ 0x40
 8007ede:	d02a      	beq.n	8007f36 <UART_SetConfig+0x8aa>
 8007ee0:	e02d      	b.n	8007f3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ee2:	f7fd fea1 	bl	8005c28 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ee6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ee8:	e02f      	b.n	8007f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7fd feb0 	bl	8005c54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef8:	e027      	b.n	8007f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007efa:	f107 0318 	add.w	r3, r7, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fd fffc 	bl	8005efc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f08:	e01f      	b.n	8007f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f0a:	4b21      	ldr	r3, [pc, #132]	@ (8007f90 <UART_SetConfig+0x904>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0320 	and.w	r3, r3, #32
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d009      	beq.n	8007f2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007f16:	4b1e      	ldr	r3, [pc, #120]	@ (8007f90 <UART_SetConfig+0x904>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	08db      	lsrs	r3, r3, #3
 8007f1c:	f003 0303 	and.w	r3, r3, #3
 8007f20:	4a1d      	ldr	r2, [pc, #116]	@ (8007f98 <UART_SetConfig+0x90c>)
 8007f22:	fa22 f303 	lsr.w	r3, r2, r3
 8007f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007f28:	e00f      	b.n	8007f4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f98 <UART_SetConfig+0x90c>)
 8007f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f2e:	e00c      	b.n	8007f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007f30:	4b1a      	ldr	r3, [pc, #104]	@ (8007f9c <UART_SetConfig+0x910>)
 8007f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f34:	e009      	b.n	8007f4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f3c:	e005      	b.n	8007f4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007f48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 81ee 	beq.w	800832e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f56:	4a12      	ldr	r2, [pc, #72]	@ (8007fa0 <UART_SetConfig+0x914>)
 8007f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f64:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	4413      	add	r3, r2
 8007f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d305      	bcc.n	8007f82 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d910      	bls.n	8007fa4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f88:	e1d1      	b.n	800832e <UART_SetConfig+0xca2>
 8007f8a:	bf00      	nop
 8007f8c:	40011c00 	.word	0x40011c00
 8007f90:	58024400 	.word	0x58024400
 8007f94:	58000c00 	.word	0x58000c00
 8007f98:	03d09000 	.word	0x03d09000
 8007f9c:	003d0900 	.word	0x003d0900
 8007fa0:	080169b0 	.word	0x080169b0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	60bb      	str	r3, [r7, #8]
 8007faa:	60fa      	str	r2, [r7, #12]
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb0:	4ac0      	ldr	r2, [pc, #768]	@ (80082b4 <UART_SetConfig+0xc28>)
 8007fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	2200      	movs	r2, #0
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	607a      	str	r2, [r7, #4]
 8007fbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fc2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fc6:	f7f8 f9fb 	bl	80003c0 <__aeabi_uldivmod>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4610      	mov	r0, r2
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f04f 0200 	mov.w	r2, #0
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	020b      	lsls	r3, r1, #8
 8007fdc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fe0:	0202      	lsls	r2, r0, #8
 8007fe2:	6979      	ldr	r1, [r7, #20]
 8007fe4:	6849      	ldr	r1, [r1, #4]
 8007fe6:	0849      	lsrs	r1, r1, #1
 8007fe8:	2000      	movs	r0, #0
 8007fea:	460c      	mov	r4, r1
 8007fec:	4605      	mov	r5, r0
 8007fee:	eb12 0804 	adds.w	r8, r2, r4
 8007ff2:	eb43 0905 	adc.w	r9, r3, r5
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	469a      	mov	sl, r3
 8007ffe:	4693      	mov	fp, r2
 8008000:	4652      	mov	r2, sl
 8008002:	465b      	mov	r3, fp
 8008004:	4640      	mov	r0, r8
 8008006:	4649      	mov	r1, r9
 8008008:	f7f8 f9da 	bl	80003c0 <__aeabi_uldivmod>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4613      	mov	r3, r2
 8008012:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800801a:	d308      	bcc.n	800802e <UART_SetConfig+0x9a2>
 800801c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008022:	d204      	bcs.n	800802e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800802a:	60da      	str	r2, [r3, #12]
 800802c:	e17f      	b.n	800832e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008034:	e17b      	b.n	800832e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800803e:	f040 80bd 	bne.w	80081bc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008042:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008046:	2b20      	cmp	r3, #32
 8008048:	dc48      	bgt.n	80080dc <UART_SetConfig+0xa50>
 800804a:	2b00      	cmp	r3, #0
 800804c:	db7b      	blt.n	8008146 <UART_SetConfig+0xaba>
 800804e:	2b20      	cmp	r3, #32
 8008050:	d879      	bhi.n	8008146 <UART_SetConfig+0xaba>
 8008052:	a201      	add	r2, pc, #4	@ (adr r2, 8008058 <UART_SetConfig+0x9cc>)
 8008054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008058:	080080e3 	.word	0x080080e3
 800805c:	080080eb 	.word	0x080080eb
 8008060:	08008147 	.word	0x08008147
 8008064:	08008147 	.word	0x08008147
 8008068:	080080f3 	.word	0x080080f3
 800806c:	08008147 	.word	0x08008147
 8008070:	08008147 	.word	0x08008147
 8008074:	08008147 	.word	0x08008147
 8008078:	08008103 	.word	0x08008103
 800807c:	08008147 	.word	0x08008147
 8008080:	08008147 	.word	0x08008147
 8008084:	08008147 	.word	0x08008147
 8008088:	08008147 	.word	0x08008147
 800808c:	08008147 	.word	0x08008147
 8008090:	08008147 	.word	0x08008147
 8008094:	08008147 	.word	0x08008147
 8008098:	08008113 	.word	0x08008113
 800809c:	08008147 	.word	0x08008147
 80080a0:	08008147 	.word	0x08008147
 80080a4:	08008147 	.word	0x08008147
 80080a8:	08008147 	.word	0x08008147
 80080ac:	08008147 	.word	0x08008147
 80080b0:	08008147 	.word	0x08008147
 80080b4:	08008147 	.word	0x08008147
 80080b8:	08008147 	.word	0x08008147
 80080bc:	08008147 	.word	0x08008147
 80080c0:	08008147 	.word	0x08008147
 80080c4:	08008147 	.word	0x08008147
 80080c8:	08008147 	.word	0x08008147
 80080cc:	08008147 	.word	0x08008147
 80080d0:	08008147 	.word	0x08008147
 80080d4:	08008147 	.word	0x08008147
 80080d8:	08008139 	.word	0x08008139
 80080dc:	2b40      	cmp	r3, #64	@ 0x40
 80080de:	d02e      	beq.n	800813e <UART_SetConfig+0xab2>
 80080e0:	e031      	b.n	8008146 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080e2:	f7fc fb93 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 80080e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080e8:	e033      	b.n	8008152 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080ea:	f7fc fba5 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 80080ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080f0:	e02f      	b.n	8008152 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fd fdac 	bl	8005c54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008100:	e027      	b.n	8008152 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008102:	f107 0318 	add.w	r3, r7, #24
 8008106:	4618      	mov	r0, r3
 8008108:	f7fd fef8 	bl	8005efc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008110:	e01f      	b.n	8008152 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008112:	4b69      	ldr	r3, [pc, #420]	@ (80082b8 <UART_SetConfig+0xc2c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b00      	cmp	r3, #0
 800811c:	d009      	beq.n	8008132 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800811e:	4b66      	ldr	r3, [pc, #408]	@ (80082b8 <UART_SetConfig+0xc2c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	08db      	lsrs	r3, r3, #3
 8008124:	f003 0303 	and.w	r3, r3, #3
 8008128:	4a64      	ldr	r2, [pc, #400]	@ (80082bc <UART_SetConfig+0xc30>)
 800812a:	fa22 f303 	lsr.w	r3, r2, r3
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008130:	e00f      	b.n	8008152 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8008132:	4b62      	ldr	r3, [pc, #392]	@ (80082bc <UART_SetConfig+0xc30>)
 8008134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008136:	e00c      	b.n	8008152 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008138:	4b61      	ldr	r3, [pc, #388]	@ (80082c0 <UART_SetConfig+0xc34>)
 800813a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800813c:	e009      	b.n	8008152 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800813e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008144:	e005      	b.n	8008152 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008150:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 80ea 	beq.w	800832e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815e:	4a55      	ldr	r2, [pc, #340]	@ (80082b4 <UART_SetConfig+0xc28>)
 8008160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008164:	461a      	mov	r2, r3
 8008166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008168:	fbb3 f3f2 	udiv	r3, r3, r2
 800816c:	005a      	lsls	r2, r3, #1
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	441a      	add	r2, r3
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	fbb2 f3f3 	udiv	r3, r2, r3
 800817e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008182:	2b0f      	cmp	r3, #15
 8008184:	d916      	bls.n	80081b4 <UART_SetConfig+0xb28>
 8008186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800818c:	d212      	bcs.n	80081b4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800818e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008190:	b29b      	uxth	r3, r3
 8008192:	f023 030f 	bic.w	r3, r3, #15
 8008196:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800819a:	085b      	lsrs	r3, r3, #1
 800819c:	b29b      	uxth	r3, r3
 800819e:	f003 0307 	and.w	r3, r3, #7
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081a6:	4313      	orrs	r3, r2
 80081a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80081b0:	60da      	str	r2, [r3, #12]
 80081b2:	e0bc      	b.n	800832e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081ba:	e0b8      	b.n	800832e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	dc4b      	bgt.n	800825c <UART_SetConfig+0xbd0>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f2c0 8087 	blt.w	80082d8 <UART_SetConfig+0xc4c>
 80081ca:	2b20      	cmp	r3, #32
 80081cc:	f200 8084 	bhi.w	80082d8 <UART_SetConfig+0xc4c>
 80081d0:	a201      	add	r2, pc, #4	@ (adr r2, 80081d8 <UART_SetConfig+0xb4c>)
 80081d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d6:	bf00      	nop
 80081d8:	08008263 	.word	0x08008263
 80081dc:	0800826b 	.word	0x0800826b
 80081e0:	080082d9 	.word	0x080082d9
 80081e4:	080082d9 	.word	0x080082d9
 80081e8:	08008273 	.word	0x08008273
 80081ec:	080082d9 	.word	0x080082d9
 80081f0:	080082d9 	.word	0x080082d9
 80081f4:	080082d9 	.word	0x080082d9
 80081f8:	08008283 	.word	0x08008283
 80081fc:	080082d9 	.word	0x080082d9
 8008200:	080082d9 	.word	0x080082d9
 8008204:	080082d9 	.word	0x080082d9
 8008208:	080082d9 	.word	0x080082d9
 800820c:	080082d9 	.word	0x080082d9
 8008210:	080082d9 	.word	0x080082d9
 8008214:	080082d9 	.word	0x080082d9
 8008218:	08008293 	.word	0x08008293
 800821c:	080082d9 	.word	0x080082d9
 8008220:	080082d9 	.word	0x080082d9
 8008224:	080082d9 	.word	0x080082d9
 8008228:	080082d9 	.word	0x080082d9
 800822c:	080082d9 	.word	0x080082d9
 8008230:	080082d9 	.word	0x080082d9
 8008234:	080082d9 	.word	0x080082d9
 8008238:	080082d9 	.word	0x080082d9
 800823c:	080082d9 	.word	0x080082d9
 8008240:	080082d9 	.word	0x080082d9
 8008244:	080082d9 	.word	0x080082d9
 8008248:	080082d9 	.word	0x080082d9
 800824c:	080082d9 	.word	0x080082d9
 8008250:	080082d9 	.word	0x080082d9
 8008254:	080082d9 	.word	0x080082d9
 8008258:	080082cb 	.word	0x080082cb
 800825c:	2b40      	cmp	r3, #64	@ 0x40
 800825e:	d037      	beq.n	80082d0 <UART_SetConfig+0xc44>
 8008260:	e03a      	b.n	80082d8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008262:	f7fc fad3 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8008266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008268:	e03c      	b.n	80082e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800826a:	f7fc fae5 	bl	8004838 <HAL_RCC_GetPCLK2Freq>
 800826e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008270:	e038      	b.n	80082e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008276:	4618      	mov	r0, r3
 8008278:	f7fd fcec 	bl	8005c54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008280:	e030      	b.n	80082e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008282:	f107 0318 	add.w	r3, r7, #24
 8008286:	4618      	mov	r0, r3
 8008288:	f7fd fe38 	bl	8005efc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008290:	e028      	b.n	80082e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008292:	4b09      	ldr	r3, [pc, #36]	@ (80082b8 <UART_SetConfig+0xc2c>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d012      	beq.n	80082c4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800829e:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <UART_SetConfig+0xc2c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	08db      	lsrs	r3, r3, #3
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	4a04      	ldr	r2, [pc, #16]	@ (80082bc <UART_SetConfig+0xc30>)
 80082aa:	fa22 f303 	lsr.w	r3, r2, r3
 80082ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082b0:	e018      	b.n	80082e4 <UART_SetConfig+0xc58>
 80082b2:	bf00      	nop
 80082b4:	080169b0 	.word	0x080169b0
 80082b8:	58024400 	.word	0x58024400
 80082bc:	03d09000 	.word	0x03d09000
 80082c0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80082c4:	4b24      	ldr	r3, [pc, #144]	@ (8008358 <UART_SetConfig+0xccc>)
 80082c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c8:	e00c      	b.n	80082e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082ca:	4b24      	ldr	r3, [pc, #144]	@ (800835c <UART_SetConfig+0xcd0>)
 80082cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082ce:	e009      	b.n	80082e4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d6:	e005      	b.n	80082e4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80082e2:	bf00      	nop
    }

    if (pclk != 0U)
 80082e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d021      	beq.n	800832e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008360 <UART_SetConfig+0xcd4>)
 80082f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f4:	461a      	mov	r2, r3
 80082f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	085b      	lsrs	r3, r3, #1
 8008302:	441a      	add	r2, r3
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	fbb2 f3f3 	udiv	r3, r2, r3
 800830c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800830e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008310:	2b0f      	cmp	r3, #15
 8008312:	d909      	bls.n	8008328 <UART_SetConfig+0xc9c>
 8008314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008316:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800831a:	d205      	bcs.n	8008328 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800831c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831e:	b29a      	uxth	r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	e002      	b.n	800832e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2201      	movs	r2, #1
 8008332:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2201      	movs	r2, #1
 800833a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2200      	movs	r2, #0
 8008342:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2200      	movs	r2, #0
 8008348:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800834a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800834e:	4618      	mov	r0, r3
 8008350:	3748      	adds	r7, #72	@ 0x48
 8008352:	46bd      	mov	sp, r7
 8008354:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008358:	03d09000 	.word	0x03d09000
 800835c:	003d0900 	.word	0x003d0900
 8008360:	080169b0 	.word	0x080169b0

08008364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00a      	beq.n	80083b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01a      	beq.n	800847a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008462:	d10a      	bne.n	800847a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	605a      	str	r2, [r3, #4]
  }
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b098      	sub	sp, #96	@ 0x60
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084b8:	f7f9 ffd6 	bl	8002468 <HAL_GetTick>
 80084bc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d12f      	bne.n	800852c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084d4:	2200      	movs	r2, #0
 80084d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f88e 	bl	80085fc <UART_WaitOnFlagUntilTimeout>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d022      	beq.n	800852c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	461a      	mov	r2, r3
 8008502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008504:	647b      	str	r3, [r7, #68]	@ 0x44
 8008506:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800850a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800850c:	e841 2300 	strex	r3, r2, [r1]
 8008510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1e6      	bne.n	80084e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e063      	b.n	80085f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b04      	cmp	r3, #4
 8008538:	d149      	bne.n	80085ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800853a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008542:	2200      	movs	r2, #0
 8008544:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f857 	bl	80085fc <UART_WaitOnFlagUntilTimeout>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d03c      	beq.n	80085ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	e853 3f00 	ldrex	r3, [r3]
 8008560:	623b      	str	r3, [r7, #32]
   return(result);
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008568:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008572:	633b      	str	r3, [r7, #48]	@ 0x30
 8008574:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e6      	bne.n	8008554 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3308      	adds	r3, #8
 800858c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	60fb      	str	r3, [r7, #12]
   return(result);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	3308      	adds	r3, #8
 80085a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085a6:	61fa      	str	r2, [r7, #28]
 80085a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	69b9      	ldr	r1, [r7, #24]
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	617b      	str	r3, [r7, #20]
   return(result);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e5      	bne.n	8008586 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2220      	movs	r2, #32
 80085be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e012      	b.n	80085f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3758      	adds	r7, #88	@ 0x58
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	4613      	mov	r3, r2
 800860a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800860c:	e04f      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d04b      	beq.n	80086ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008616:	f7f9 ff27 	bl	8002468 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	429a      	cmp	r2, r3
 8008624:	d302      	bcc.n	800862c <UART_WaitOnFlagUntilTimeout+0x30>
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e04e      	b.n	80086ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	d037      	beq.n	80086ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	2b80      	cmp	r3, #128	@ 0x80
 8008642:	d034      	beq.n	80086ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b40      	cmp	r3, #64	@ 0x40
 8008648:	d031      	beq.n	80086ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	f003 0308 	and.w	r3, r3, #8
 8008654:	2b08      	cmp	r3, #8
 8008656:	d110      	bne.n	800867a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2208      	movs	r2, #8
 800865e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f839 	bl	80086d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2208      	movs	r2, #8
 800866a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	e029      	b.n	80086ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008688:	d111      	bne.n	80086ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f81f 	bl	80086d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2220      	movs	r2, #32
 800869e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e00f      	b.n	80086ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	69da      	ldr	r2, [r3, #28]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4013      	ands	r3, r2
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	bf0c      	ite	eq
 80086be:	2301      	moveq	r3, #1
 80086c0:	2300      	movne	r3, #0
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	461a      	mov	r2, r3
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d0a0      	beq.n	800860e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b095      	sub	sp, #84	@ 0x54
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e8:	e853 3f00 	ldrex	r3, [r3]
 80086ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008700:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008702:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008704:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008706:	e841 2300 	strex	r3, r2, [r1]
 800870a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800870c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1e6      	bne.n	80086e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3308      	adds	r3, #8
 8008718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871a:	6a3b      	ldr	r3, [r7, #32]
 800871c:	e853 3f00 	ldrex	r3, [r3]
 8008720:	61fb      	str	r3, [r7, #28]
   return(result);
 8008722:	69fa      	ldr	r2, [r7, #28]
 8008724:	4b1e      	ldr	r3, [pc, #120]	@ (80087a0 <UART_EndRxTransfer+0xc8>)
 8008726:	4013      	ands	r3, r2
 8008728:	64bb      	str	r3, [r7, #72]	@ 0x48
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	3308      	adds	r3, #8
 8008730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008734:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008738:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e5      	bne.n	8008712 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800874a:	2b01      	cmp	r3, #1
 800874c:	d118      	bne.n	8008780 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	e853 3f00 	ldrex	r3, [r3]
 800875a:	60bb      	str	r3, [r7, #8]
   return(result);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	f023 0310 	bic.w	r3, r3, #16
 8008762:	647b      	str	r3, [r7, #68]	@ 0x44
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	6979      	ldr	r1, [r7, #20]
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	613b      	str	r3, [r7, #16]
   return(result);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e6      	bne.n	800874e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008794:	bf00      	nop
 8008796:	3754      	adds	r7, #84	@ 0x54
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	effffffe 	.word	0xeffffffe

080087a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f7fe ff50 	bl	8007660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c0:	bf00      	nop
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	461a      	mov	r2, r3
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	61bb      	str	r3, [r7, #24]
 80087f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6979      	ldr	r1, [r7, #20]
 80087f4:	69ba      	ldr	r2, [r7, #24]
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	613b      	str	r3, [r7, #16]
   return(result);
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e6      	bne.n	80087d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7fe ff1b 	bl	800764c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008816:	bf00      	nop
 8008818:	3720      	adds	r7, #32
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800885a:	b480      	push	{r7}
 800885c:	b085      	sub	sp, #20
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <HAL_UARTEx_DisableFifoMode+0x16>
 800886c:	2302      	movs	r3, #2
 800886e:	e027      	b.n	80088c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2224      	movs	r2, #36	@ 0x24
 800887c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0201 	bic.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800889e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b084      	sub	sp, #16
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d101      	bne.n	80088e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088e0:	2302      	movs	r3, #2
 80088e2:	e02d      	b.n	8008940 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2224      	movs	r2, #36	@ 0x24
 80088f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 0201 	bic.w	r2, r2, #1
 800890a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	430a      	orrs	r2, r1
 800891e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f84f 	bl	80089c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008958:	2b01      	cmp	r3, #1
 800895a:	d101      	bne.n	8008960 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800895c:	2302      	movs	r3, #2
 800895e:	e02d      	b.n	80089bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2224      	movs	r2, #36	@ 0x24
 800896c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0201 	bic.w	r2, r2, #1
 8008986:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f811 	bl	80089c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d108      	bne.n	80089e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089e4:	e031      	b.n	8008a4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089e6:	2310      	movs	r3, #16
 80089e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089ea:	2310      	movs	r3, #16
 80089ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	0e5b      	lsrs	r3, r3, #25
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	0f5b      	lsrs	r3, r3, #29
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 0307 	and.w	r3, r3, #7
 8008a0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	7b3a      	ldrb	r2, [r7, #12]
 8008a12:	4911      	ldr	r1, [pc, #68]	@ (8008a58 <UARTEx_SetNbDataToProcess+0x94>)
 8008a14:	5c8a      	ldrb	r2, [r1, r2]
 8008a16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a1a:	7b3a      	ldrb	r2, [r7, #12]
 8008a1c:	490f      	ldr	r1, [pc, #60]	@ (8008a5c <UARTEx_SetNbDataToProcess+0x98>)
 8008a1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	7b7a      	ldrb	r2, [r7, #13]
 8008a30:	4909      	ldr	r1, [pc, #36]	@ (8008a58 <UARTEx_SetNbDataToProcess+0x94>)
 8008a32:	5c8a      	ldrb	r2, [r1, r2]
 8008a34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a38:	7b7a      	ldrb	r2, [r7, #13]
 8008a3a:	4908      	ldr	r1, [pc, #32]	@ (8008a5c <UARTEx_SetNbDataToProcess+0x98>)
 8008a3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a4a:	bf00      	nop
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	080169c8 	.word	0x080169c8
 8008a5c:	080169d0 	.word	0x080169d0

08008a60 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8008a60:	b480      	push	{r7}
 8008a62:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8008a64:	bf00      	nop
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
	...

08008a70 <aes_gen_tables>:
#define MUL(x,y) ( ( (x) && (y) ) ? pow[(log[(x)]+log[(y)]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8008a70:	b480      	push	{r7}
 8008a72:	f6ad 0d14 	subw	sp, sp, #2068	@ 0x814
 8008a76:	af00      	add	r7, sp, #0
    int log[256];

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008a84:	e02b      	b.n	8008ade <aes_gen_tables+0x6e>
    {
        pow[i] = x;
 8008a86:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008a8a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008a8e:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8008a92:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        log[x] = i;
 8008a9a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008a9e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008aa2:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008aa6:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8008aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 8008aae:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008ab8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d001      	beq.n	8008ac4 <aes_gen_tables+0x54>
 8008ac0:	221b      	movs	r2, #27
 8008ac2:	e000      	b.n	8008ac6 <aes_gen_tables+0x56>
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	405a      	eors	r2, r3
 8008ac8:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008acc:	4053      	eors	r3, r2
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 256; i++ )
 8008ad4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ad8:	3301      	adds	r3, #1
 8008ada:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008ade:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ae2:	2bff      	cmp	r3, #255	@ 0xff
 8008ae4:	ddcf      	ble.n	8008a86 <aes_gen_tables+0x16>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008aec:	2301      	movs	r3, #1
 8008aee:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008af2:	e01b      	b.n	8008b2c <aes_gen_tables+0xbc>
    {
        RCON[i] = (uint32_t) x;
 8008af4:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008af8:	49cc      	ldr	r1, [pc, #816]	@ (8008e2c <aes_gen_tables+0x3bc>)
 8008afa:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME( x ) & 0xFF;
 8008b02:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008b0c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008b10:	2a00      	cmp	r2, #0
 8008b12:	d001      	beq.n	8008b18 <aes_gen_tables+0xa8>
 8008b14:	221b      	movs	r2, #27
 8008b16:	e000      	b.n	8008b1a <aes_gen_tables+0xaa>
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4053      	eors	r3, r2
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
    for( i = 0, x = 1; i < 10; i++ )
 8008b22:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008b26:	3301      	adds	r3, #1
 8008b28:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008b2c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008b30:	2b09      	cmp	r3, #9
 8008b32:	dddf      	ble.n	8008af4 <aes_gen_tables+0x84>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 8008b34:	4bbe      	ldr	r3, [pc, #760]	@ (8008e30 <aes_gen_tables+0x3c0>)
 8008b36:	2263      	movs	r2, #99	@ 0x63
 8008b38:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8008b3a:	4bbe      	ldr	r3, [pc, #760]	@ (8008e34 <aes_gen_tables+0x3c4>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63

    for( i = 1; i < 256; i++ )
 8008b42:	2301      	movs	r3, #1
 8008b44:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008b48:	e072      	b.n	8008c30 <aes_gen_tables+0x1c0>
    {
        x = pow[255 - log[i]];
 8008b4a:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008b4e:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008b52:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8008b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5a:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8008b5e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008b62:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6a:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008b6e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008b72:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8008b76:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b7a:	005a      	lsls	r2, r3, #1
 8008b7c:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b80:	11db      	asrs	r3, r3, #7
 8008b82:	4313      	orrs	r3, r2
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008b8a:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008b8e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b92:	4053      	eors	r3, r2
 8008b94:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008b98:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008b9c:	005a      	lsls	r2, r3, #1
 8008b9e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008ba2:	11db      	asrs	r3, r3, #7
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008bac:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008bb0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008bb4:	4053      	eors	r3, r2
 8008bb6:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008bba:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008bbe:	005a      	lsls	r2, r3, #1
 8008bc0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008bc4:	11db      	asrs	r3, r3, #7
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8008bce:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008bd2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008bd6:	4053      	eors	r3, r2
 8008bd8:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 8008bdc:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008be0:	005a      	lsls	r2, r3, #1
 8008be2:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008be6:	11db      	asrs	r3, r3, #7
 8008be8:	4313      	orrs	r3, r2
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        x ^= y ^ 0x63;
 8008bf0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008bf4:	f083 0363 	eor.w	r3, r3, #99	@ 0x63
 8008bf8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008bfc:	4053      	eors	r3, r2
 8008bfe:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        FSb[i] = (unsigned char) x;
 8008c02:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c06:	b2d9      	uxtb	r1, r3
 8008c08:	4a89      	ldr	r2, [pc, #548]	@ (8008e30 <aes_gen_tables+0x3c0>)
 8008c0a:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c0e:	4413      	add	r3, r2
 8008c10:	460a      	mov	r2, r1
 8008c12:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 8008c14:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c18:	b2d9      	uxtb	r1, r3
 8008c1a:	4a86      	ldr	r2, [pc, #536]	@ (8008e34 <aes_gen_tables+0x3c4>)
 8008c1c:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c20:	4413      	add	r3, r2
 8008c22:	460a      	mov	r2, r1
 8008c24:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 8008c26:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008c30:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c34:	2bff      	cmp	r3, #255	@ 0xff
 8008c36:	dd88      	ble.n	8008b4a <aes_gen_tables+0xda>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008c3e:	e136      	b.n	8008eae <aes_gen_tables+0x43e>
    {
        x = FSb[i];
 8008c40:	4a7b      	ldr	r2, [pc, #492]	@ (8008e30 <aes_gen_tables+0x3c0>)
 8008c42:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008c46:	4413      	add	r3, r2
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
        y = XTIME( x ) & 0xFF;
 8008c4e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8008c58:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8008c5c:	2a00      	cmp	r2, #0
 8008c5e:	d001      	beq.n	8008c64 <aes_gen_tables+0x1f4>
 8008c60:	221b      	movs	r2, #27
 8008c62:	e000      	b.n	8008c66 <aes_gen_tables+0x1f6>
 8008c64:	2200      	movs	r2, #0
 8008c66:	4053      	eors	r3, r2
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
        z =  ( y ^ x ) & 0xFF;
 8008c6e:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8008c72:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c76:	4053      	eors	r3, r2
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8008c7e:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c82:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 8008c84:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8008c88:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 8008c8a:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008c8e:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8008c90:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 8008c92:	f8d7 3800 	ldr.w	r3, [r7, #2048]	@ 0x800
 8008c96:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 8008c98:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 8008c9a:	4967      	ldr	r1, [pc, #412]	@ (8008e38 <aes_gen_tables+0x3c8>)
 8008c9c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        FT1[i] = ROTL8( FT0[i] );
 8008ca4:	4a64      	ldr	r2, [pc, #400]	@ (8008e38 <aes_gen_tables+0x3c8>)
 8008ca6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cae:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008cb2:	4962      	ldr	r1, [pc, #392]	@ (8008e3c <aes_gen_tables+0x3cc>)
 8008cb4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8008cbc:	4a5f      	ldr	r2, [pc, #380]	@ (8008e3c <aes_gen_tables+0x3cc>)
 8008cbe:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cc6:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008cca:	495d      	ldr	r1, [pc, #372]	@ (8008e40 <aes_gen_tables+0x3d0>)
 8008ccc:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 8008cd4:	4a5a      	ldr	r2, [pc, #360]	@ (8008e40 <aes_gen_tables+0x3d0>)
 8008cd6:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cde:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008ce2:	4958      	ldr	r1, [pc, #352]	@ (8008e44 <aes_gen_tables+0x3d4>)
 8008ce4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif /* !MBEDTLS_AES_FEWER_TABLES */

        x = RSb[i];
 8008cec:	4a51      	ldr	r2, [pc, #324]	@ (8008e34 <aes_gen_tables+0x3c4>)
 8008cee:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008cf2:	4413      	add	r3, r2
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8008cfa:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d020      	beq.n	8008d44 <aes_gen_tables+0x2d4>
 8008d02:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d06:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d0c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d10:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d14:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d1c:	441a      	add	r2, r3
 8008d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8008e48 <aes_gen_tables+0x3d8>)
 8008d20:	fb83 1302 	smull	r1, r3, r3, r2
 8008d24:	4413      	add	r3, r2
 8008d26:	11d9      	asrs	r1, r3, #7
 8008d28:	17d3      	asrs	r3, r2, #31
 8008d2a:	1ac9      	subs	r1, r1, r3
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	021b      	lsls	r3, r3, #8
 8008d30:	1a5b      	subs	r3, r3, r1
 8008d32:	1ad1      	subs	r1, r2, r3
 8008d34:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d38:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008d3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d40:	4618      	mov	r0, r3
 8008d42:	e000      	b.n	8008d46 <aes_gen_tables+0x2d6>
 8008d44:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8008d46:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d020      	beq.n	8008d90 <aes_gen_tables+0x320>
 8008d4e:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d52:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d58:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d5c:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008d60:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008d64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d68:	441a      	add	r2, r3
 8008d6a:	4b37      	ldr	r3, [pc, #220]	@ (8008e48 <aes_gen_tables+0x3d8>)
 8008d6c:	fb83 1302 	smull	r1, r3, r3, r2
 8008d70:	4413      	add	r3, r2
 8008d72:	11d9      	asrs	r1, r3, #7
 8008d74:	17d3      	asrs	r3, r2, #31
 8008d76:	1ac9      	subs	r1, r1, r3
 8008d78:	460b      	mov	r3, r1
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	1a5b      	subs	r3, r3, r1
 8008d7e:	1ad1      	subs	r1, r2, r3
 8008d80:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008d84:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008d88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	e000      	b.n	8008d92 <aes_gen_tables+0x322>
 8008d90:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8008d92:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8008d94:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d020      	beq.n	8008dde <aes_gen_tables+0x36e>
 8008d9c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008da0:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008da4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008da6:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008daa:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008dae:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008db2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008db6:	441a      	add	r2, r3
 8008db8:	4b23      	ldr	r3, [pc, #140]	@ (8008e48 <aes_gen_tables+0x3d8>)
 8008dba:	fb83 1302 	smull	r1, r3, r3, r2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	11d9      	asrs	r1, r3, #7
 8008dc2:	17d3      	asrs	r3, r2, #31
 8008dc4:	1ac9      	subs	r1, r1, r3
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	021b      	lsls	r3, r3, #8
 8008dca:	1a5b      	subs	r3, r3, r1
 8008dcc:	1ad1      	subs	r1, r2, r3
 8008dce:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008dd2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008dd6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dda:	041b      	lsls	r3, r3, #16
 8008ddc:	e000      	b.n	8008de0 <aes_gen_tables+0x370>
 8008dde:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 8008de0:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 8008de2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d030      	beq.n	8008e4c <aes_gen_tables+0x3dc>
 8008dea:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008dee:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008df8:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8008dfc:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8008e00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e04:	441a      	add	r2, r3
 8008e06:	4b10      	ldr	r3, [pc, #64]	@ (8008e48 <aes_gen_tables+0x3d8>)
 8008e08:	fb83 1302 	smull	r1, r3, r3, r2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	11d9      	asrs	r1, r3, #7
 8008e10:	17d3      	asrs	r3, r2, #31
 8008e12:	1ac9      	subs	r1, r1, r3
 8008e14:	460b      	mov	r3, r1
 8008e16:	021b      	lsls	r3, r3, #8
 8008e18:	1a5b      	subs	r3, r3, r1
 8008e1a:	1ad1      	subs	r1, r2, r3
 8008e1c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8008e20:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8008e24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e28:	061b      	lsls	r3, r3, #24
 8008e2a:	e010      	b.n	8008e4e <aes_gen_tables+0x3de>
 8008e2c:	24002548 	.word	0x24002548
 8008e30:	24000348 	.word	0x24000348
 8008e34:	24001448 	.word	0x24001448
 8008e38:	24000448 	.word	0x24000448
 8008e3c:	24000848 	.word	0x24000848
 8008e40:	24000c48 	.word	0x24000c48
 8008e44:	24001048 	.word	0x24001048
 8008e48:	80808081 	.word	0x80808081
 8008e4c:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 8008e4e:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8008e52:	491d      	ldr	r1, [pc, #116]	@ (8008ec8 <aes_gen_tables+0x458>)
 8008e54:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

#if !defined(MBEDTLS_AES_FEWER_TABLES)
        RT1[i] = ROTL8( RT0[i] );
 8008e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ec8 <aes_gen_tables+0x458>)
 8008e5e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e66:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008e6a:	4918      	ldr	r1, [pc, #96]	@ (8008ecc <aes_gen_tables+0x45c>)
 8008e6c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 8008e74:	4a15      	ldr	r2, [pc, #84]	@ (8008ecc <aes_gen_tables+0x45c>)
 8008e76:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e7e:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008e82:	4913      	ldr	r1, [pc, #76]	@ (8008ed0 <aes_gen_tables+0x460>)
 8008e84:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 8008e8c:	4a10      	ldr	r2, [pc, #64]	@ (8008ed0 <aes_gen_tables+0x460>)
 8008e8e:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e96:	ea4f 6233 	mov.w	r2, r3, ror #24
 8008e9a:	490e      	ldr	r1, [pc, #56]	@ (8008ed4 <aes_gen_tables+0x464>)
 8008e9c:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 8008ea4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8008eae:	f8d7 380c 	ldr.w	r3, [r7, #2060]	@ 0x80c
 8008eb2:	2bff      	cmp	r3, #255	@ 0xff
 8008eb4:	f77f aec4 	ble.w	8008c40 <aes_gen_tables+0x1d0>
#endif /* !MBEDTLS_AES_FEWER_TABLES */
    }
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	f607 0714 	addw	r7, r7, #2068	@ 0x814
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	24001548 	.word	0x24001548
 8008ecc:	24001948 	.word	0x24001948
 8008ed0:	24001d48 	.word	0x24001d48
 8008ed4:	24002148 	.word	0x24002148

08008ed8 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8008ee0:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f00c fd78 	bl	80159dc <memset>
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d005      	beq.n	8008f0e <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8008f02:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f00a fc40 	bl	801378c <mbedtls_platform_zeroize>
 8008f0c:	e000      	b.n	8008f10 <mbedtls_aes_free+0x1c>
        return;
 8008f0e:	bf00      	nop
}
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f2a:	d012      	beq.n	8008f52 <mbedtls_aes_setkey_enc+0x3a>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f32:	d812      	bhi.n	8008f5a <mbedtls_aes_setkey_enc+0x42>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b80      	cmp	r3, #128	@ 0x80
 8008f38:	d003      	beq.n	8008f42 <mbedtls_aes_setkey_enc+0x2a>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f3e:	d004      	beq.n	8008f4a <mbedtls_aes_setkey_enc+0x32>
 8008f40:	e00b      	b.n	8008f5a <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	220a      	movs	r2, #10
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	e00a      	b.n	8008f60 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	220c      	movs	r2, #12
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	e006      	b.n	8008f60 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	220e      	movs	r2, #14
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	e002      	b.n	8008f60 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8008f5a:	f06f 031f 	mvn.w	r3, #31
 8008f5e:	e1b3      	b.n	80092c8 <mbedtls_aes_setkey_enc+0x3b0>
    }

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8008f60:	4b88      	ldr	r3, [pc, #544]	@ (8009184 <mbedtls_aes_setkey_enc+0x26c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <mbedtls_aes_setkey_enc+0x5a>
    {
        aes_gen_tables();
 8008f68:	f7ff fd82 	bl	8008a70 <aes_gen_tables>
        aes_init_done = 1;
 8008f6c:	4b85      	ldr	r3, [pc, #532]	@ (8009184 <mbedtls_aes_setkey_enc+0x26c>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	601a      	str	r2, [r3, #0]

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	3308      	adds	r3, #8
 8008f76:	613b      	str	r3, [r7, #16]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8008f7e:	2300      	movs	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]
 8008f82:	e027      	b.n	8008fd4 <mbedtls_aes_setkey_enc+0xbc>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	3301      	adds	r3, #1
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	4413      	add	r3, r2
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	ea41 0203 	orr.w	r2, r1, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	3302      	adds	r3, #2
 8008fa8:	68b9      	ldr	r1, [r7, #8]
 8008faa:	440b      	add	r3, r1
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	041b      	lsls	r3, r3, #16
 8008fb0:	ea42 0103 	orr.w	r1, r2, r3
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	3303      	adds	r3, #3
 8008fba:	68ba      	ldr	r2, [r7, #8]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	061a      	lsls	r2, r3, #24
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	6938      	ldr	r0, [r7, #16]
 8008fc8:	4403      	add	r3, r0
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	617b      	str	r3, [r7, #20]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	095b      	lsrs	r3, r3, #5
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d3d2      	bcc.n	8008f84 <mbedtls_aes_setkey_enc+0x6c>
    }

    switch( ctx->nr )
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b0e      	cmp	r3, #14
 8008fe4:	f000 80ca 	beq.w	800917c <mbedtls_aes_setkey_enc+0x264>
 8008fe8:	2b0e      	cmp	r3, #14
 8008fea:	f300 816c 	bgt.w	80092c6 <mbedtls_aes_setkey_enc+0x3ae>
 8008fee:	2b0a      	cmp	r3, #10
 8008ff0:	d002      	beq.n	8008ff8 <mbedtls_aes_setkey_enc+0xe0>
 8008ff2:	2b0c      	cmp	r3, #12
 8008ff4:	d057      	beq.n	80090a6 <mbedtls_aes_setkey_enc+0x18e>
 8008ff6:	e166      	b.n	80092c6 <mbedtls_aes_setkey_enc+0x3ae>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]
 8008ffc:	e04f      	b.n	800909e <mbedtls_aes_setkey_enc+0x186>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	4961      	ldr	r1, [pc, #388]	@ (8009188 <mbedtls_aes_setkey_enc+0x270>)
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800900a:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	320c      	adds	r2, #12
 8009010:	6812      	ldr	r2, [r2, #0]
 8009012:	0a12      	lsrs	r2, r2, #8
 8009014:	b2d2      	uxtb	r2, r2
 8009016:	495d      	ldr	r1, [pc, #372]	@ (800918c <mbedtls_aes_setkey_enc+0x274>)
 8009018:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 800901a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	330c      	adds	r3, #12
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	0c1b      	lsrs	r3, r3, #16
 8009024:	b2db      	uxtb	r3, r3
 8009026:	4959      	ldr	r1, [pc, #356]	@ (800918c <mbedtls_aes_setkey_enc+0x274>)
 8009028:	5ccb      	ldrb	r3, [r1, r3]
 800902a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800902c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	330c      	adds	r3, #12
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	0e1b      	lsrs	r3, r3, #24
 8009036:	4955      	ldr	r1, [pc, #340]	@ (800918c <mbedtls_aes_setkey_enc+0x274>)
 8009038:	5ccb      	ldrb	r3, [r1, r3]
 800903a:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800903c:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	330c      	adds	r3, #12
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	4a50      	ldr	r2, [pc, #320]	@ (800918c <mbedtls_aes_setkey_enc+0x274>)
 800904a:	5cd3      	ldrb	r3, [r2, r3]
 800904c:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8009052:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8009054:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	3304      	adds	r3, #4
 800905a:	6819      	ldr	r1, [r3, #0]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	3310      	adds	r3, #16
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	3314      	adds	r3, #20
 8009066:	404a      	eors	r2, r1
 8009068:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	3308      	adds	r3, #8
 800906e:	6819      	ldr	r1, [r3, #0]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	3314      	adds	r3, #20
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	3318      	adds	r3, #24
 800907a:	404a      	eors	r2, r1
 800907c:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	330c      	adds	r3, #12
 8009082:	6819      	ldr	r1, [r3, #0]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	3318      	adds	r3, #24
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	331c      	adds	r3, #28
 800908e:	404a      	eors	r2, r1
 8009090:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	3301      	adds	r3, #1
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	3310      	adds	r3, #16
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b09      	cmp	r3, #9
 80090a2:	d9ac      	bls.n	8008ffe <mbedtls_aes_setkey_enc+0xe6>
            }
            break;
 80090a4:	e10f      	b.n	80092c6 <mbedtls_aes_setkey_enc+0x3ae>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]
 80090aa:	e063      	b.n	8009174 <mbedtls_aes_setkey_enc+0x25c>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	4935      	ldr	r1, [pc, #212]	@ (8009188 <mbedtls_aes_setkey_enc+0x270>)
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80090b8:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	3214      	adds	r2, #20
 80090be:	6812      	ldr	r2, [r2, #0]
 80090c0:	0a12      	lsrs	r2, r2, #8
 80090c2:	b2d2      	uxtb	r2, r2
 80090c4:	4931      	ldr	r1, [pc, #196]	@ (800918c <mbedtls_aes_setkey_enc+0x274>)
 80090c6:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 80090c8:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	3314      	adds	r3, #20
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	0c1b      	lsrs	r3, r3, #16
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	492d      	ldr	r1, [pc, #180]	@ (800918c <mbedtls_aes_setkey_enc+0x274>)
 80090d6:	5ccb      	ldrb	r3, [r1, r3]
 80090d8:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80090da:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	3314      	adds	r3, #20
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	0e1b      	lsrs	r3, r3, #24
 80090e4:	4929      	ldr	r1, [pc, #164]	@ (800918c <mbedtls_aes_setkey_enc+0x274>)
 80090e6:	5ccb      	ldrb	r3, [r1, r3]
 80090e8:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 80090ea:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	3314      	adds	r3, #20
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	4a25      	ldr	r2, [pc, #148]	@ (800918c <mbedtls_aes_setkey_enc+0x274>)
 80090f8:	5cd3      	ldrb	r3, [r2, r3]
 80090fa:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8009100:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8009102:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	3304      	adds	r3, #4
 8009108:	6819      	ldr	r1, [r3, #0]
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3318      	adds	r3, #24
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	331c      	adds	r3, #28
 8009114:	404a      	eors	r2, r1
 8009116:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	3308      	adds	r3, #8
 800911c:	6819      	ldr	r1, [r3, #0]
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	331c      	adds	r3, #28
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	3320      	adds	r3, #32
 8009128:	404a      	eors	r2, r1
 800912a:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	330c      	adds	r3, #12
 8009130:	6819      	ldr	r1, [r3, #0]
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	3320      	adds	r3, #32
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	3324      	adds	r3, #36	@ 0x24
 800913c:	404a      	eors	r2, r1
 800913e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	3310      	adds	r3, #16
 8009144:	6819      	ldr	r1, [r3, #0]
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	3324      	adds	r3, #36	@ 0x24
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	3328      	adds	r3, #40	@ 0x28
 8009150:	404a      	eors	r2, r1
 8009152:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	3314      	adds	r3, #20
 8009158:	6819      	ldr	r1, [r3, #0]
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	3328      	adds	r3, #40	@ 0x28
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	332c      	adds	r3, #44	@ 0x2c
 8009164:	404a      	eors	r2, r1
 8009166:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	3301      	adds	r3, #1
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	3318      	adds	r3, #24
 8009172:	613b      	str	r3, [r7, #16]
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2b07      	cmp	r3, #7
 8009178:	d998      	bls.n	80090ac <mbedtls_aes_setkey_enc+0x194>
            }
            break;
 800917a:	e0a4      	b.n	80092c6 <mbedtls_aes_setkey_enc+0x3ae>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 800917c:	2300      	movs	r3, #0
 800917e:	617b      	str	r3, [r7, #20]
 8009180:	e09c      	b.n	80092bc <mbedtls_aes_setkey_enc+0x3a4>
 8009182:	bf00      	nop
 8009184:	24002570 	.word	0x24002570
 8009188:	24002548 	.word	0x24002548
 800918c:	24000348 	.word	0x24000348
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	494e      	ldr	r1, [pc, #312]	@ (80092d0 <mbedtls_aes_setkey_enc+0x3b8>)
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800919c:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	321c      	adds	r2, #28
 80091a2:	6812      	ldr	r2, [r2, #0]
 80091a4:	0a12      	lsrs	r2, r2, #8
 80091a6:	b2d2      	uxtb	r2, r2
 80091a8:	494a      	ldr	r1, [pc, #296]	@ (80092d4 <mbedtls_aes_setkey_enc+0x3bc>)
 80091aa:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 80091ac:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	331c      	adds	r3, #28
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	0c1b      	lsrs	r3, r3, #16
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	4946      	ldr	r1, [pc, #280]	@ (80092d4 <mbedtls_aes_setkey_enc+0x3bc>)
 80091ba:	5ccb      	ldrb	r3, [r1, r3]
 80091bc:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80091be:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	331c      	adds	r3, #28
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	0e1b      	lsrs	r3, r3, #24
 80091c8:	4942      	ldr	r1, [pc, #264]	@ (80092d4 <mbedtls_aes_setkey_enc+0x3bc>)
 80091ca:	5ccb      	ldrb	r3, [r1, r3]
 80091cc:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80091ce:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	331c      	adds	r3, #28
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	4a3e      	ldr	r2, [pc, #248]	@ (80092d4 <mbedtls_aes_setkey_enc+0x3bc>)
 80091dc:	5cd3      	ldrb	r3, [r2, r3]
 80091de:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80091e4:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 80091e6:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	3304      	adds	r3, #4
 80091ec:	6819      	ldr	r1, [r3, #0]
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	3320      	adds	r3, #32
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	3324      	adds	r3, #36	@ 0x24
 80091f8:	404a      	eors	r2, r1
 80091fa:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	3308      	adds	r3, #8
 8009200:	6819      	ldr	r1, [r3, #0]
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	3324      	adds	r3, #36	@ 0x24
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	3328      	adds	r3, #40	@ 0x28
 800920c:	404a      	eors	r2, r1
 800920e:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	330c      	adds	r3, #12
 8009214:	6819      	ldr	r1, [r3, #0]
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	3328      	adds	r3, #40	@ 0x28
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	332c      	adds	r3, #44	@ 0x2c
 8009220:	404a      	eors	r2, r1
 8009222:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	3310      	adds	r3, #16
 8009228:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800922a:	693a      	ldr	r2, [r7, #16]
 800922c:	322c      	adds	r2, #44	@ 0x2c
 800922e:	6812      	ldr	r2, [r2, #0]
 8009230:	b2d2      	uxtb	r2, r2
 8009232:	4928      	ldr	r1, [pc, #160]	@ (80092d4 <mbedtls_aes_setkey_enc+0x3bc>)
 8009234:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 8009236:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	332c      	adds	r3, #44	@ 0x2c
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	b2db      	uxtb	r3, r3
 8009242:	4924      	ldr	r1, [pc, #144]	@ (80092d4 <mbedtls_aes_setkey_enc+0x3bc>)
 8009244:	5ccb      	ldrb	r3, [r1, r3]
 8009246:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8009248:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	332c      	adds	r3, #44	@ 0x2c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	0c1b      	lsrs	r3, r3, #16
 8009252:	b2db      	uxtb	r3, r3
 8009254:	491f      	ldr	r1, [pc, #124]	@ (80092d4 <mbedtls_aes_setkey_enc+0x3bc>)
 8009256:	5ccb      	ldrb	r3, [r1, r3]
 8009258:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800925a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	332c      	adds	r3, #44	@ 0x2c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	0e1b      	lsrs	r3, r3, #24
 8009266:	4a1b      	ldr	r2, [pc, #108]	@ (80092d4 <mbedtls_aes_setkey_enc+0x3bc>)
 8009268:	5cd3      	ldrb	r3, [r2, r3]
 800926a:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8009270:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8009272:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	3314      	adds	r3, #20
 8009278:	6819      	ldr	r1, [r3, #0]
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	3330      	adds	r3, #48	@ 0x30
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	3334      	adds	r3, #52	@ 0x34
 8009284:	404a      	eors	r2, r1
 8009286:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	3318      	adds	r3, #24
 800928c:	6819      	ldr	r1, [r3, #0]
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	3334      	adds	r3, #52	@ 0x34
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3338      	adds	r3, #56	@ 0x38
 8009298:	404a      	eors	r2, r1
 800929a:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	331c      	adds	r3, #28
 80092a0:	6819      	ldr	r1, [r3, #0]
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	3338      	adds	r3, #56	@ 0x38
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	333c      	adds	r3, #60	@ 0x3c
 80092ac:	404a      	eors	r2, r1
 80092ae:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	3301      	adds	r3, #1
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	3320      	adds	r3, #32
 80092ba:	613b      	str	r3, [r7, #16]
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	2b06      	cmp	r3, #6
 80092c0:	f67f af66 	bls.w	8009190 <mbedtls_aes_setkey_enc+0x278>
            }
            break;
 80092c4:	bf00      	nop
    }

    return( 0 );
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3718      	adds	r7, #24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	24002548 	.word	0x24002548
 80092d4:	24000348 	.word	0x24000348

080092d8 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b0d0      	sub	sp, #320	@ 0x140
 80092dc:	af00      	add	r7, sp, #0
 80092de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80092e6:	6018      	str	r0, [r3, #0]
 80092e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092ec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80092f0:	6019      	str	r1, [r3, #0]
 80092f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80092f6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80092fa:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 80092fc:	f107 0314 	add.w	r3, r7, #20
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff fde9 	bl	8008ed8 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8009306:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800930a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3308      	adds	r3, #8
 8009312:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8009316:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800931a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8009324:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8009326:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800932a:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800932e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009332:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8009336:	f107 0014 	add.w	r0, r7, #20
 800933a:	6812      	ldr	r2, [r2, #0]
 800933c:	6819      	ldr	r1, [r3, #0]
 800933e:	f7ff fdeb 	bl	8008f18 <mbedtls_aes_setkey_enc>
 8009342:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8009346:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800934a:	2b00      	cmp	r3, #0
 800934c:	f040 80dd 	bne.w	800950a <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 8009350:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009354:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800935e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8009366:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800936a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8009374:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	4413      	add	r3, r2
 800937e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 8009382:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8009386:	1d13      	adds	r3, r2, #4
 8009388:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800938c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009390:	1d19      	adds	r1, r3, #4
 8009392:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009396:	6812      	ldr	r2, [r2, #0]
 8009398:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800939a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800939e:	1d13      	adds	r3, r2, #4
 80093a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80093a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80093a8:	1d19      	adds	r1, r3, #4
 80093aa:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80093ae:	6812      	ldr	r2, [r2, #0]
 80093b0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80093b2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80093b6:	1d13      	adds	r3, r2, #4
 80093b8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80093bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80093c0:	1d19      	adds	r1, r3, #4
 80093c2:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80093c6:	6812      	ldr	r2, [r2, #0]
 80093c8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80093ca:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80093ce:	1d13      	adds	r3, r2, #4
 80093d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80093d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80093d8:	1d19      	adds	r1, r3, #4
 80093da:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80093de:	6812      	ldr	r2, [r2, #0]
 80093e0:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80093e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80093e6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80093f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80093f8:	3b20      	subs	r3, #32
 80093fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80093fe:	e04f      	b.n	80094a0 <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 8009400:	2300      	movs	r3, #0
 8009402:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8009406:	e03d      	b.n	8009484 <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009408:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	4a44      	ldr	r2, [pc, #272]	@ (8009524 <mbedtls_aes_setkey_dec+0x24c>)
 8009412:	5cd3      	ldrb	r3, [r2, r3]
 8009414:	461a      	mov	r2, r3
 8009416:	4b44      	ldr	r3, [pc, #272]	@ (8009528 <mbedtls_aes_setkey_dec+0x250>)
 8009418:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800941c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	0a1b      	lsrs	r3, r3, #8
 8009424:	b2db      	uxtb	r3, r3
 8009426:	493f      	ldr	r1, [pc, #252]	@ (8009524 <mbedtls_aes_setkey_dec+0x24c>)
 8009428:	5ccb      	ldrb	r3, [r1, r3]
 800942a:	4619      	mov	r1, r3
 800942c:	4b3f      	ldr	r3, [pc, #252]	@ (800952c <mbedtls_aes_setkey_dec+0x254>)
 800942e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009432:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8009434:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	0c1b      	lsrs	r3, r3, #16
 800943c:	b2db      	uxtb	r3, r3
 800943e:	4939      	ldr	r1, [pc, #228]	@ (8009524 <mbedtls_aes_setkey_dec+0x24c>)
 8009440:	5ccb      	ldrb	r3, [r1, r3]
 8009442:	4619      	mov	r1, r3
 8009444:	4b3a      	ldr	r3, [pc, #232]	@ (8009530 <mbedtls_aes_setkey_dec+0x258>)
 8009446:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 800944a:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 800944e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	0e1b      	lsrs	r3, r3, #24
 8009456:	4a33      	ldr	r2, [pc, #204]	@ (8009524 <mbedtls_aes_setkey_dec+0x24c>)
 8009458:	5cd3      	ldrb	r3, [r2, r3]
 800945a:	461a      	mov	r2, r3
 800945c:	4b35      	ldr	r3, [pc, #212]	@ (8009534 <mbedtls_aes_setkey_dec+0x25c>)
 800945e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8009462:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009466:	1d18      	adds	r0, r3, #4
 8009468:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800946c:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800946e:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 8009470:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009474:	3301      	adds	r3, #1
 8009476:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800947a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800947e:	3304      	adds	r3, #4
 8009480:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009484:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8009488:	2b03      	cmp	r3, #3
 800948a:	ddbd      	ble.n	8009408 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800948c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8009490:	3b01      	subs	r3, #1
 8009492:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8009496:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800949a:	3b20      	subs	r3, #32
 800949c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80094a0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dcab      	bgt.n	8009400 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 80094a8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80094ac:	1d13      	adds	r3, r2, #4
 80094ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80094b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094b6:	1d19      	adds	r1, r3, #4
 80094b8:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80094bc:	6812      	ldr	r2, [r2, #0]
 80094be:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80094c0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80094c4:	1d13      	adds	r3, r2, #4
 80094c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80094ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094ce:	1d19      	adds	r1, r3, #4
 80094d0:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80094d4:	6812      	ldr	r2, [r2, #0]
 80094d6:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80094d8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80094dc:	1d13      	adds	r3, r2, #4
 80094de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80094e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094e6:	1d19      	adds	r1, r3, #4
 80094e8:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80094ec:	6812      	ldr	r2, [r2, #0]
 80094ee:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80094f0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80094f4:	1d13      	adds	r3, r2, #4
 80094f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80094fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80094fe:	1d19      	adds	r1, r3, #4
 8009500:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	601a      	str	r2, [r3, #0]
 8009508:	e000      	b.n	800950c <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 800950a:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 800950c:	f107 0314 	add.w	r3, r7, #20
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff fcef 	bl	8008ef4 <mbedtls_aes_free>

    return( ret );
 8009516:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 800951a:	4618      	mov	r0, r3
 800951c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	24000348 	.word	0x24000348
 8009528:	24001548 	.word	0x24001548
 800952c:	24001948 	.word	0x24001948
 8009530:	24001d48 	.word	0x24001d48
 8009534:	24002148 	.word	0x24002148

08009538 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8009538:	b480      	push	{r7}
 800953a:	b08f      	sub	sp, #60	@ 0x3c
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	3301      	adds	r3, #1
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	021b      	lsls	r3, r3, #8
 8009558:	431a      	orrs	r2, r3
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	3302      	adds	r3, #2
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	041b      	lsls	r3, r3, #16
 8009562:	431a      	orrs	r2, r3
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	3303      	adds	r3, #3
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	061b      	lsls	r3, r3, #24
 800956c:	4313      	orrs	r3, r2
 800956e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	1d1a      	adds	r2, r3, #4
 8009574:	633a      	str	r2, [r7, #48]	@ 0x30
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800957a:	4053      	eors	r3, r2
 800957c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	3304      	adds	r3, #4
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	3305      	adds	r3, #5
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	021b      	lsls	r3, r3, #8
 800958e:	431a      	orrs	r2, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	3306      	adds	r3, #6
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	041b      	lsls	r3, r3, #16
 8009598:	431a      	orrs	r2, r3
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	3307      	adds	r3, #7
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	061b      	lsls	r3, r3, #24
 80095a2:	4313      	orrs	r3, r2
 80095a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	1d1a      	adds	r2, r3, #4
 80095aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095b0:	4053      	eors	r3, r2
 80095b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	3308      	adds	r3, #8
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	3309      	adds	r3, #9
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	021b      	lsls	r3, r3, #8
 80095c4:	431a      	orrs	r2, r3
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	330a      	adds	r3, #10
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	041b      	lsls	r3, r3, #16
 80095ce:	431a      	orrs	r2, r3
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	330b      	adds	r3, #11
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	061b      	lsls	r3, r3, #24
 80095d8:	4313      	orrs	r3, r2
 80095da:	627b      	str	r3, [r7, #36]	@ 0x24
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	1d1a      	adds	r2, r3, #4
 80095e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095e6:	4053      	eors	r3, r2
 80095e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	330c      	adds	r3, #12
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	330d      	adds	r3, #13
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	021b      	lsls	r3, r3, #8
 80095fa:	431a      	orrs	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	330e      	adds	r3, #14
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	431a      	orrs	r2, r3
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	330f      	adds	r3, #15
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	061b      	lsls	r3, r3, #24
 800960e:	4313      	orrs	r3, r2
 8009610:	623b      	str	r3, [r7, #32]
 8009612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009614:	1d1a      	adds	r2, r3, #4
 8009616:	633a      	str	r2, [r7, #48]	@ 0x30
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6a3a      	ldr	r2, [r7, #32]
 800961c:	4053      	eors	r3, r2
 800961e:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	105b      	asrs	r3, r3, #1
 8009626:	3b01      	subs	r3, #1
 8009628:	637b      	str	r3, [r7, #52]	@ 0x34
 800962a:	e0fa      	b.n	8009822 <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800962c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962e:	1d1a      	adds	r2, r3, #4
 8009630:	633a      	str	r2, [r7, #48]	@ 0x30
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009636:	b2db      	uxtb	r3, r3
 8009638:	49ab      	ldr	r1, [pc, #684]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 800963a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800963e:	405a      	eors	r2, r3
 8009640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009642:	0a1b      	lsrs	r3, r3, #8
 8009644:	b2db      	uxtb	r3, r3
 8009646:	49a9      	ldr	r1, [pc, #676]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 8009648:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800964c:	405a      	eors	r2, r3
 800964e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009650:	0c1b      	lsrs	r3, r3, #16
 8009652:	b2db      	uxtb	r3, r3
 8009654:	49a6      	ldr	r1, [pc, #664]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009656:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800965a:	405a      	eors	r2, r3
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	0e1b      	lsrs	r3, r3, #24
 8009660:	49a4      	ldr	r1, [pc, #656]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 8009662:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009666:	4053      	eors	r3, r2
 8009668:	61fb      	str	r3, [r7, #28]
 800966a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966c:	1d1a      	adds	r2, r3, #4
 800966e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009674:	b2db      	uxtb	r3, r3
 8009676:	499c      	ldr	r1, [pc, #624]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 8009678:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800967c:	405a      	eors	r2, r3
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	0a1b      	lsrs	r3, r3, #8
 8009682:	b2db      	uxtb	r3, r3
 8009684:	4999      	ldr	r1, [pc, #612]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 8009686:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800968a:	405a      	eors	r2, r3
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	0c1b      	lsrs	r3, r3, #16
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4997      	ldr	r1, [pc, #604]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009694:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009698:	405a      	eors	r2, r3
 800969a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969c:	0e1b      	lsrs	r3, r3, #24
 800969e:	4995      	ldr	r1, [pc, #596]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 80096a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096a4:	4053      	eors	r3, r2
 80096a6:	61bb      	str	r3, [r7, #24]
 80096a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096aa:	1d1a      	adds	r2, r3, #4
 80096ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	498c      	ldr	r1, [pc, #560]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 80096b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096ba:	405a      	eors	r2, r3
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	0a1b      	lsrs	r3, r3, #8
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	498a      	ldr	r1, [pc, #552]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 80096c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096c8:	405a      	eors	r2, r3
 80096ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096cc:	0c1b      	lsrs	r3, r3, #16
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	4987      	ldr	r1, [pc, #540]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 80096d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096d6:	405a      	eors	r2, r3
 80096d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096da:	0e1b      	lsrs	r3, r3, #24
 80096dc:	4985      	ldr	r1, [pc, #532]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 80096de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096e2:	4053      	eors	r3, r2
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e8:	1d1a      	adds	r2, r3, #4
 80096ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	497d      	ldr	r1, [pc, #500]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 80096f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096f8:	405a      	eors	r2, r3
 80096fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fc:	0a1b      	lsrs	r3, r3, #8
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	497a      	ldr	r1, [pc, #488]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 8009702:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009706:	405a      	eors	r2, r3
 8009708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800970a:	0c1b      	lsrs	r3, r3, #16
 800970c:	b2db      	uxtb	r3, r3
 800970e:	4978      	ldr	r1, [pc, #480]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009710:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009714:	405a      	eors	r2, r3
 8009716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009718:	0e1b      	lsrs	r3, r3, #24
 800971a:	4976      	ldr	r1, [pc, #472]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 800971c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009720:	4053      	eors	r3, r2
 8009722:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009726:	1d1a      	adds	r2, r3, #4
 8009728:	633a      	str	r2, [r7, #48]	@ 0x30
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	b2db      	uxtb	r3, r3
 8009730:	496d      	ldr	r1, [pc, #436]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 8009732:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009736:	405a      	eors	r2, r3
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	0a1b      	lsrs	r3, r3, #8
 800973c:	b2db      	uxtb	r3, r3
 800973e:	496b      	ldr	r1, [pc, #428]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 8009740:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009744:	405a      	eors	r2, r3
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	0c1b      	lsrs	r3, r3, #16
 800974a:	b2db      	uxtb	r3, r3
 800974c:	4968      	ldr	r1, [pc, #416]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 800974e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009752:	405a      	eors	r2, r3
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	0e1b      	lsrs	r3, r3, #24
 8009758:	4966      	ldr	r1, [pc, #408]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 800975a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800975e:	4053      	eors	r3, r2
 8009760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009764:	1d1a      	adds	r2, r3, #4
 8009766:	633a      	str	r2, [r7, #48]	@ 0x30
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	495e      	ldr	r1, [pc, #376]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 8009770:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009774:	405a      	eors	r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	0a1b      	lsrs	r3, r3, #8
 800977a:	b2db      	uxtb	r3, r3
 800977c:	495b      	ldr	r1, [pc, #364]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 800977e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009782:	405a      	eors	r2, r3
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	0c1b      	lsrs	r3, r3, #16
 8009788:	b2db      	uxtb	r3, r3
 800978a:	4959      	ldr	r1, [pc, #356]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 800978c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009790:	405a      	eors	r2, r3
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	0e1b      	lsrs	r3, r3, #24
 8009796:	4957      	ldr	r1, [pc, #348]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 8009798:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800979c:	4053      	eors	r3, r2
 800979e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	1d1a      	adds	r2, r3, #4
 80097a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	494e      	ldr	r1, [pc, #312]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 80097ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097b2:	405a      	eors	r2, r3
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	494c      	ldr	r1, [pc, #304]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 80097bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097c0:	405a      	eors	r2, r3
 80097c2:	69fb      	ldr	r3, [r7, #28]
 80097c4:	0c1b      	lsrs	r3, r3, #16
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	4949      	ldr	r1, [pc, #292]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 80097ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097ce:	405a      	eors	r2, r3
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	0e1b      	lsrs	r3, r3, #24
 80097d4:	4947      	ldr	r1, [pc, #284]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 80097d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097da:	4053      	eors	r3, r2
 80097dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80097de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e0:	1d1a      	adds	r2, r3, #4
 80097e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	493f      	ldr	r1, [pc, #252]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 80097ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097f0:	405a      	eors	r2, r3
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	0a1b      	lsrs	r3, r3, #8
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	493c      	ldr	r1, [pc, #240]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 80097fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80097fe:	405a      	eors	r2, r3
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	0c1b      	lsrs	r3, r3, #16
 8009804:	b2db      	uxtb	r3, r3
 8009806:	493a      	ldr	r1, [pc, #232]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009808:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800980c:	405a      	eors	r2, r3
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	0e1b      	lsrs	r3, r3, #24
 8009812:	4938      	ldr	r1, [pc, #224]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 8009814:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009818:	4053      	eors	r3, r2
 800981a:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800981c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981e:	3b01      	subs	r3, #1
 8009820:	637b      	str	r3, [r7, #52]	@ 0x34
 8009822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009824:	2b00      	cmp	r3, #0
 8009826:	f73f af01 	bgt.w	800962c <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800982a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982c:	1d1a      	adds	r2, r3, #4
 800982e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009834:	b2db      	uxtb	r3, r3
 8009836:	492c      	ldr	r1, [pc, #176]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 8009838:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800983c:	405a      	eors	r2, r3
 800983e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009840:	0a1b      	lsrs	r3, r3, #8
 8009842:	b2db      	uxtb	r3, r3
 8009844:	4929      	ldr	r1, [pc, #164]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 8009846:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800984a:	405a      	eors	r2, r3
 800984c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984e:	0c1b      	lsrs	r3, r3, #16
 8009850:	b2db      	uxtb	r3, r3
 8009852:	4927      	ldr	r1, [pc, #156]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009854:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009858:	405a      	eors	r2, r3
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	0e1b      	lsrs	r3, r3, #24
 800985e:	4925      	ldr	r1, [pc, #148]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 8009860:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009864:	4053      	eors	r3, r2
 8009866:	61fb      	str	r3, [r7, #28]
 8009868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986a:	1d1a      	adds	r2, r3, #4
 800986c:	633a      	str	r2, [r7, #48]	@ 0x30
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009872:	b2db      	uxtb	r3, r3
 8009874:	491c      	ldr	r1, [pc, #112]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 8009876:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800987a:	405a      	eors	r2, r3
 800987c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800987e:	0a1b      	lsrs	r3, r3, #8
 8009880:	b2db      	uxtb	r3, r3
 8009882:	491a      	ldr	r1, [pc, #104]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 8009884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009888:	405a      	eors	r2, r3
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	0c1b      	lsrs	r3, r3, #16
 800988e:	b2db      	uxtb	r3, r3
 8009890:	4917      	ldr	r1, [pc, #92]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 8009892:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009896:	405a      	eors	r2, r3
 8009898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989a:	0e1b      	lsrs	r3, r3, #24
 800989c:	4915      	ldr	r1, [pc, #84]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 800989e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098a2:	4053      	eors	r3, r2
 80098a4:	61bb      	str	r3, [r7, #24]
 80098a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a8:	1d1a      	adds	r2, r3, #4
 80098aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	490d      	ldr	r1, [pc, #52]	@ (80098e8 <mbedtls_internal_aes_encrypt+0x3b0>)
 80098b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098b8:	405a      	eors	r2, r3
 80098ba:	6a3b      	ldr	r3, [r7, #32]
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	490a      	ldr	r1, [pc, #40]	@ (80098ec <mbedtls_internal_aes_encrypt+0x3b4>)
 80098c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098c6:	405a      	eors	r2, r3
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	0c1b      	lsrs	r3, r3, #16
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	4908      	ldr	r1, [pc, #32]	@ (80098f0 <mbedtls_internal_aes_encrypt+0x3b8>)
 80098d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098d4:	405a      	eors	r2, r3
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	0e1b      	lsrs	r3, r3, #24
 80098da:	4906      	ldr	r1, [pc, #24]	@ (80098f4 <mbedtls_internal_aes_encrypt+0x3bc>)
 80098dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80098e0:	4053      	eors	r3, r2
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e6:	e007      	b.n	80098f8 <mbedtls_internal_aes_encrypt+0x3c0>
 80098e8:	24000448 	.word	0x24000448
 80098ec:	24000848 	.word	0x24000848
 80098f0:	24000c48 	.word	0x24000c48
 80098f4:	24001048 	.word	0x24001048
 80098f8:	1d1a      	adds	r2, r3, #4
 80098fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	4979      	ldr	r1, [pc, #484]	@ (8009ae8 <mbedtls_internal_aes_encrypt+0x5b0>)
 8009904:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009908:	405a      	eors	r2, r3
 800990a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990c:	0a1b      	lsrs	r3, r3, #8
 800990e:	b2db      	uxtb	r3, r3
 8009910:	4976      	ldr	r1, [pc, #472]	@ (8009aec <mbedtls_internal_aes_encrypt+0x5b4>)
 8009912:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009916:	405a      	eors	r2, r3
 8009918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991a:	0c1b      	lsrs	r3, r3, #16
 800991c:	b2db      	uxtb	r3, r3
 800991e:	4974      	ldr	r1, [pc, #464]	@ (8009af0 <mbedtls_internal_aes_encrypt+0x5b8>)
 8009920:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009924:	405a      	eors	r2, r3
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	0e1b      	lsrs	r3, r3, #24
 800992a:	4972      	ldr	r1, [pc, #456]	@ (8009af4 <mbedtls_internal_aes_encrypt+0x5bc>)
 800992c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009930:	4053      	eors	r3, r2
 8009932:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8009934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009936:	1d1a      	adds	r2, r3, #4
 8009938:	633a      	str	r2, [r7, #48]	@ 0x30
 800993a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	b2d2      	uxtb	r2, r2
 8009940:	496d      	ldr	r1, [pc, #436]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009942:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8009944:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	0a1b      	lsrs	r3, r3, #8
 800994a:	b2db      	uxtb	r3, r3
 800994c:	496a      	ldr	r1, [pc, #424]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 800994e:	5ccb      	ldrb	r3, [r1, r3]
 8009950:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8009952:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	0c1b      	lsrs	r3, r3, #16
 8009958:	b2db      	uxtb	r3, r3
 800995a:	4967      	ldr	r1, [pc, #412]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 800995c:	5ccb      	ldrb	r3, [r1, r3]
 800995e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009960:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	0e1b      	lsrs	r3, r3, #24
 8009966:	4964      	ldr	r1, [pc, #400]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009968:	5ccb      	ldrb	r3, [r1, r3]
 800996a:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 800996c:	4053      	eors	r3, r2
 800996e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8009970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009972:	1d1a      	adds	r2, r3, #4
 8009974:	633a      	str	r2, [r7, #48]	@ 0x30
 8009976:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	495e      	ldr	r1, [pc, #376]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 800997e:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8009980:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	0a1b      	lsrs	r3, r3, #8
 8009986:	b2db      	uxtb	r3, r3
 8009988:	495b      	ldr	r1, [pc, #364]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 800998a:	5ccb      	ldrb	r3, [r1, r3]
 800998c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800998e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	0c1b      	lsrs	r3, r3, #16
 8009994:	b2db      	uxtb	r3, r3
 8009996:	4958      	ldr	r1, [pc, #352]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009998:	5ccb      	ldrb	r3, [r1, r3]
 800999a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800999c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	0e1b      	lsrs	r3, r3, #24
 80099a2:	4955      	ldr	r1, [pc, #340]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 80099a4:	5ccb      	ldrb	r3, [r1, r3]
 80099a6:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 80099a8:	4053      	eors	r3, r2
 80099aa:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	1d1a      	adds	r2, r3, #4
 80099b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80099b2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	494f      	ldr	r1, [pc, #316]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 80099ba:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 80099bc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	0a1b      	lsrs	r3, r3, #8
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	494c      	ldr	r1, [pc, #304]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 80099c6:	5ccb      	ldrb	r3, [r1, r3]
 80099c8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 80099ca:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	0c1b      	lsrs	r3, r3, #16
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	4949      	ldr	r1, [pc, #292]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 80099d4:	5ccb      	ldrb	r3, [r1, r3]
 80099d6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80099d8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	0e1b      	lsrs	r3, r3, #24
 80099de:	4946      	ldr	r1, [pc, #280]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 80099e0:	5ccb      	ldrb	r3, [r1, r3]
 80099e2:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 80099e4:	4053      	eors	r3, r2
 80099e6:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	1d1a      	adds	r2, r3, #4
 80099ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80099ee:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 80099f0:	693a      	ldr	r2, [r7, #16]
 80099f2:	b2d2      	uxtb	r2, r2
 80099f4:	4940      	ldr	r1, [pc, #256]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 80099f6:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 80099f8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	0a1b      	lsrs	r3, r3, #8
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	493d      	ldr	r1, [pc, #244]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a02:	5ccb      	ldrb	r3, [r1, r3]
 8009a04:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8009a06:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	493a      	ldr	r1, [pc, #232]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a10:	5ccb      	ldrb	r3, [r1, r3]
 8009a12:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009a14:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	0e1b      	lsrs	r3, r3, #24
 8009a1a:	4937      	ldr	r1, [pc, #220]	@ (8009af8 <mbedtls_internal_aes_encrypt+0x5c0>)
 8009a1c:	5ccb      	ldrb	r3, [r1, r3]
 8009a1e:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8009a20:	4053      	eors	r3, r2
 8009a22:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8009a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	701a      	strb	r2, [r3, #0]
 8009a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2e:	0a1a      	lsrs	r2, r3, #8
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3301      	adds	r3, #1
 8009a34:	b2d2      	uxtb	r2, r2
 8009a36:	701a      	strb	r2, [r3, #0]
 8009a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3a:	0c1a      	lsrs	r2, r3, #16
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	3302      	adds	r3, #2
 8009a40:	b2d2      	uxtb	r2, r2
 8009a42:	701a      	strb	r2, [r3, #0]
 8009a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a46:	0e1a      	lsrs	r2, r3, #24
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3303      	adds	r3, #3
 8009a4c:	b2d2      	uxtb	r2, r2
 8009a4e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3304      	adds	r3, #4
 8009a54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	701a      	strb	r2, [r3, #0]
 8009a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5c:	0a1a      	lsrs	r2, r3, #8
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3305      	adds	r3, #5
 8009a62:	b2d2      	uxtb	r2, r2
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	0c1a      	lsrs	r2, r3, #16
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3306      	adds	r3, #6
 8009a6e:	b2d2      	uxtb	r2, r2
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a74:	0e1a      	lsrs	r2, r3, #24
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	3307      	adds	r3, #7
 8009a7a:	b2d2      	uxtb	r2, r2
 8009a7c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3308      	adds	r3, #8
 8009a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a84:	b2d2      	uxtb	r2, r2
 8009a86:	701a      	strb	r2, [r3, #0]
 8009a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8a:	0a1a      	lsrs	r2, r3, #8
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	3309      	adds	r3, #9
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	701a      	strb	r2, [r3, #0]
 8009a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a96:	0c1a      	lsrs	r2, r3, #16
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	330a      	adds	r3, #10
 8009a9c:	b2d2      	uxtb	r2, r2
 8009a9e:	701a      	strb	r2, [r3, #0]
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa2:	0e1a      	lsrs	r2, r3, #24
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	330b      	adds	r3, #11
 8009aa8:	b2d2      	uxtb	r2, r2
 8009aaa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	330c      	adds	r3, #12
 8009ab0:	6a3a      	ldr	r2, [r7, #32]
 8009ab2:	b2d2      	uxtb	r2, r2
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	0a1a      	lsrs	r2, r3, #8
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	330d      	adds	r3, #13
 8009abe:	b2d2      	uxtb	r2, r2
 8009ac0:	701a      	strb	r2, [r3, #0]
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	0c1a      	lsrs	r2, r3, #16
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	330e      	adds	r3, #14
 8009aca:	b2d2      	uxtb	r2, r2
 8009acc:	701a      	strb	r2, [r3, #0]
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	0e1a      	lsrs	r2, r3, #24
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	330f      	adds	r3, #15
 8009ad6:	b2d2      	uxtb	r2, r2
 8009ad8:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	373c      	adds	r7, #60	@ 0x3c
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	24000448 	.word	0x24000448
 8009aec:	24000848 	.word	0x24000848
 8009af0:	24000c48 	.word	0x24000c48
 8009af4:	24001048 	.word	0x24001048
 8009af8:	24000348 	.word	0x24000348

08009afc <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8009afc:	b480      	push	{r7}
 8009afe:	b08f      	sub	sp, #60	@ 0x3c
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	3301      	adds	r3, #1
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	021b      	lsls	r3, r3, #8
 8009b1c:	431a      	orrs	r2, r3
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	3302      	adds	r3, #2
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	041b      	lsls	r3, r3, #16
 8009b26:	431a      	orrs	r2, r3
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	3303      	adds	r3, #3
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	061b      	lsls	r3, r3, #24
 8009b30:	4313      	orrs	r3, r2
 8009b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	1d1a      	adds	r2, r3, #4
 8009b38:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b3e:	4053      	eors	r3, r2
 8009b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	3304      	adds	r3, #4
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	3305      	adds	r3, #5
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	021b      	lsls	r3, r3, #8
 8009b52:	431a      	orrs	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	3306      	adds	r3, #6
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	041b      	lsls	r3, r3, #16
 8009b5c:	431a      	orrs	r2, r3
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	3307      	adds	r3, #7
 8009b62:	781b      	ldrb	r3, [r3, #0]
 8009b64:	061b      	lsls	r3, r3, #24
 8009b66:	4313      	orrs	r3, r2
 8009b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	1d1a      	adds	r2, r3, #4
 8009b6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b74:	4053      	eors	r3, r2
 8009b76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	3308      	adds	r3, #8
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	3309      	adds	r3, #9
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	021b      	lsls	r3, r3, #8
 8009b88:	431a      	orrs	r2, r3
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	330a      	adds	r3, #10
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	041b      	lsls	r3, r3, #16
 8009b92:	431a      	orrs	r2, r3
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	330b      	adds	r3, #11
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	061b      	lsls	r3, r3, #24
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba2:	1d1a      	adds	r2, r3, #4
 8009ba4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009baa:	4053      	eors	r3, r2
 8009bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	330c      	adds	r3, #12
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	330d      	adds	r3, #13
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	021b      	lsls	r3, r3, #8
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	330e      	adds	r3, #14
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	041b      	lsls	r3, r3, #16
 8009bc8:	431a      	orrs	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	330f      	adds	r3, #15
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	061b      	lsls	r3, r3, #24
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	623b      	str	r3, [r7, #32]
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd8:	1d1a      	adds	r2, r3, #4
 8009bda:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	6a3a      	ldr	r2, [r7, #32]
 8009be0:	4053      	eors	r3, r2
 8009be2:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	105b      	asrs	r3, r3, #1
 8009bea:	3b01      	subs	r3, #1
 8009bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bee:	e0fa      	b.n	8009de6 <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf2:	1d1a      	adds	r2, r3, #4
 8009bf4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	49ab      	ldr	r1, [pc, #684]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009bfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c02:	405a      	eors	r2, r3
 8009c04:	6a3b      	ldr	r3, [r7, #32]
 8009c06:	0a1b      	lsrs	r3, r3, #8
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	49a9      	ldr	r1, [pc, #676]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009c0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c10:	405a      	eors	r2, r3
 8009c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c14:	0c1b      	lsrs	r3, r3, #16
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	49a6      	ldr	r1, [pc, #664]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009c1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c1e:	405a      	eors	r2, r3
 8009c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c22:	0e1b      	lsrs	r3, r3, #24
 8009c24:	49a4      	ldr	r1, [pc, #656]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009c26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c2a:	4053      	eors	r3, r2
 8009c2c:	61fb      	str	r3, [r7, #28]
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	1d1a      	adds	r2, r3, #4
 8009c32:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	499c      	ldr	r1, [pc, #624]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009c3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c40:	405a      	eors	r2, r3
 8009c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c44:	0a1b      	lsrs	r3, r3, #8
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	4999      	ldr	r1, [pc, #612]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009c4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c4e:	405a      	eors	r2, r3
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	0c1b      	lsrs	r3, r3, #16
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	4997      	ldr	r1, [pc, #604]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009c58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c5c:	405a      	eors	r2, r3
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c60:	0e1b      	lsrs	r3, r3, #24
 8009c62:	4995      	ldr	r1, [pc, #596]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009c64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c68:	4053      	eors	r3, r2
 8009c6a:	61bb      	str	r3, [r7, #24]
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6e:	1d1a      	adds	r2, r3, #4
 8009c70:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	498c      	ldr	r1, [pc, #560]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009c7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c7e:	405a      	eors	r2, r3
 8009c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c82:	0a1b      	lsrs	r3, r3, #8
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	498a      	ldr	r1, [pc, #552]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009c88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c8c:	405a      	eors	r2, r3
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	0c1b      	lsrs	r3, r3, #16
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	4987      	ldr	r1, [pc, #540]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009c96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009c9a:	405a      	eors	r2, r3
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	0e1b      	lsrs	r3, r3, #24
 8009ca0:	4985      	ldr	r1, [pc, #532]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009ca2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ca6:	4053      	eors	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]
 8009caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cac:	1d1a      	adds	r2, r3, #4
 8009cae:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	497d      	ldr	r1, [pc, #500]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009cb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cbc:	405a      	eors	r2, r3
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc0:	0a1b      	lsrs	r3, r3, #8
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	497a      	ldr	r1, [pc, #488]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009cc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cca:	405a      	eors	r2, r3
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	0c1b      	lsrs	r3, r3, #16
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	4978      	ldr	r1, [pc, #480]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009cd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cd8:	405a      	eors	r2, r3
 8009cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cdc:	0e1b      	lsrs	r3, r3, #24
 8009cde:	4976      	ldr	r1, [pc, #472]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009ce0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ce4:	4053      	eors	r3, r2
 8009ce6:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cea:	1d1a      	adds	r2, r3, #4
 8009cec:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	496d      	ldr	r1, [pc, #436]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009cf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009cfa:	405a      	eors	r2, r3
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	496b      	ldr	r1, [pc, #428]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009d04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d08:	405a      	eors	r2, r3
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	0c1b      	lsrs	r3, r3, #16
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	4968      	ldr	r1, [pc, #416]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009d12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d16:	405a      	eors	r2, r3
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	0e1b      	lsrs	r3, r3, #24
 8009d1c:	4966      	ldr	r1, [pc, #408]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009d1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d22:	4053      	eors	r3, r2
 8009d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	1d1a      	adds	r2, r3, #4
 8009d2a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	495e      	ldr	r1, [pc, #376]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009d34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d38:	405a      	eors	r2, r3
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	0a1b      	lsrs	r3, r3, #8
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	495b      	ldr	r1, [pc, #364]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009d42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d46:	405a      	eors	r2, r3
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	0c1b      	lsrs	r3, r3, #16
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	4959      	ldr	r1, [pc, #356]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009d50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d54:	405a      	eors	r2, r3
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	0e1b      	lsrs	r3, r3, #24
 8009d5a:	4957      	ldr	r1, [pc, #348]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009d5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d60:	4053      	eors	r3, r2
 8009d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d66:	1d1a      	adds	r2, r3, #4
 8009d68:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	494e      	ldr	r1, [pc, #312]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009d72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d76:	405a      	eors	r2, r3
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	0a1b      	lsrs	r3, r3, #8
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	494c      	ldr	r1, [pc, #304]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009d80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d84:	405a      	eors	r2, r3
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	0c1b      	lsrs	r3, r3, #16
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	4949      	ldr	r1, [pc, #292]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009d8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d92:	405a      	eors	r2, r3
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	0e1b      	lsrs	r3, r3, #24
 8009d98:	4947      	ldr	r1, [pc, #284]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009d9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d9e:	4053      	eors	r3, r2
 8009da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da4:	1d1a      	adds	r2, r3, #4
 8009da6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	493f      	ldr	r1, [pc, #252]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009db0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009db4:	405a      	eors	r2, r3
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	0a1b      	lsrs	r3, r3, #8
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	493c      	ldr	r1, [pc, #240]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009dbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009dc2:	405a      	eors	r2, r3
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	0c1b      	lsrs	r3, r3, #16
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	493a      	ldr	r1, [pc, #232]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009dcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009dd0:	405a      	eors	r2, r3
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	0e1b      	lsrs	r3, r3, #24
 8009dd6:	4938      	ldr	r1, [pc, #224]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009dd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ddc:	4053      	eors	r3, r2
 8009dde:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8009de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de2:	3b01      	subs	r3, #1
 8009de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f73f af01 	bgt.w	8009bf0 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	1d1a      	adds	r2, r3, #4
 8009df2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	492c      	ldr	r1, [pc, #176]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009dfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e00:	405a      	eors	r2, r3
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	0a1b      	lsrs	r3, r3, #8
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	4929      	ldr	r1, [pc, #164]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009e0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e0e:	405a      	eors	r2, r3
 8009e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e12:	0c1b      	lsrs	r3, r3, #16
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	4927      	ldr	r1, [pc, #156]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009e18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e1c:	405a      	eors	r2, r3
 8009e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e20:	0e1b      	lsrs	r3, r3, #24
 8009e22:	4925      	ldr	r1, [pc, #148]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009e24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e28:	4053      	eors	r3, r2
 8009e2a:	61fb      	str	r3, [r7, #28]
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2e:	1d1a      	adds	r2, r3, #4
 8009e30:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	491c      	ldr	r1, [pc, #112]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009e3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e3e:	405a      	eors	r2, r3
 8009e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e42:	0a1b      	lsrs	r3, r3, #8
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	491a      	ldr	r1, [pc, #104]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009e48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e4c:	405a      	eors	r2, r3
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	0c1b      	lsrs	r3, r3, #16
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	4917      	ldr	r1, [pc, #92]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009e56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e5a:	405a      	eors	r2, r3
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5e:	0e1b      	lsrs	r3, r3, #24
 8009e60:	4915      	ldr	r1, [pc, #84]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009e62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e66:	4053      	eors	r3, r2
 8009e68:	61bb      	str	r3, [r7, #24]
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	1d1a      	adds	r2, r3, #4
 8009e6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	490d      	ldr	r1, [pc, #52]	@ (8009eac <mbedtls_internal_aes_decrypt+0x3b0>)
 8009e78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e7c:	405a      	eors	r2, r3
 8009e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e80:	0a1b      	lsrs	r3, r3, #8
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	490a      	ldr	r1, [pc, #40]	@ (8009eb0 <mbedtls_internal_aes_decrypt+0x3b4>)
 8009e86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e8a:	405a      	eors	r2, r3
 8009e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e8e:	0c1b      	lsrs	r3, r3, #16
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	4908      	ldr	r1, [pc, #32]	@ (8009eb4 <mbedtls_internal_aes_decrypt+0x3b8>)
 8009e94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e98:	405a      	eors	r2, r3
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	0e1b      	lsrs	r3, r3, #24
 8009e9e:	4906      	ldr	r1, [pc, #24]	@ (8009eb8 <mbedtls_internal_aes_decrypt+0x3bc>)
 8009ea0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ea4:	4053      	eors	r3, r2
 8009ea6:	617b      	str	r3, [r7, #20]
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	e007      	b.n	8009ebc <mbedtls_internal_aes_decrypt+0x3c0>
 8009eac:	24001548 	.word	0x24001548
 8009eb0:	24001948 	.word	0x24001948
 8009eb4:	24001d48 	.word	0x24001d48
 8009eb8:	24002148 	.word	0x24002148
 8009ebc:	1d1a      	adds	r2, r3, #4
 8009ebe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	6a3b      	ldr	r3, [r7, #32]
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	4979      	ldr	r1, [pc, #484]	@ (800a0ac <mbedtls_internal_aes_decrypt+0x5b0>)
 8009ec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ecc:	405a      	eors	r2, r3
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	0a1b      	lsrs	r3, r3, #8
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	4976      	ldr	r1, [pc, #472]	@ (800a0b0 <mbedtls_internal_aes_decrypt+0x5b4>)
 8009ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009eda:	405a      	eors	r2, r3
 8009edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ede:	0c1b      	lsrs	r3, r3, #16
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	4974      	ldr	r1, [pc, #464]	@ (800a0b4 <mbedtls_internal_aes_decrypt+0x5b8>)
 8009ee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ee8:	405a      	eors	r2, r3
 8009eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eec:	0e1b      	lsrs	r3, r3, #24
 8009eee:	4972      	ldr	r1, [pc, #456]	@ (800a0b8 <mbedtls_internal_aes_decrypt+0x5bc>)
 8009ef0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009ef4:	4053      	eors	r3, r2
 8009ef6:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efa:	1d1a      	adds	r2, r3, #4
 8009efc:	633a      	str	r2, [r7, #48]	@ 0x30
 8009efe:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8009f00:	69fa      	ldr	r2, [r7, #28]
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	496d      	ldr	r1, [pc, #436]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f06:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8009f08:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	0a1b      	lsrs	r3, r3, #8
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	496a      	ldr	r1, [pc, #424]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f12:	5ccb      	ldrb	r3, [r1, r3]
 8009f14:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8009f16:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	0c1b      	lsrs	r3, r3, #16
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	4967      	ldr	r1, [pc, #412]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f20:	5ccb      	ldrb	r3, [r1, r3]
 8009f22:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f24:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	0e1b      	lsrs	r3, r3, #24
 8009f2a:	4964      	ldr	r1, [pc, #400]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f2c:	5ccb      	ldrb	r3, [r1, r3]
 8009f2e:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8009f30:	4053      	eors	r3, r2
 8009f32:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8009f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f36:	1d1a      	adds	r2, r3, #4
 8009f38:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f3a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	495e      	ldr	r1, [pc, #376]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f42:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8009f44:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	0a1b      	lsrs	r3, r3, #8
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	495b      	ldr	r1, [pc, #364]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f4e:	5ccb      	ldrb	r3, [r1, r3]
 8009f50:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8009f52:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	0c1b      	lsrs	r3, r3, #16
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	4958      	ldr	r1, [pc, #352]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f5c:	5ccb      	ldrb	r3, [r1, r3]
 8009f5e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f60:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	0e1b      	lsrs	r3, r3, #24
 8009f66:	4955      	ldr	r1, [pc, #340]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f68:	5ccb      	ldrb	r3, [r1, r3]
 8009f6a:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8009f6c:	4053      	eors	r3, r2
 8009f6e:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8009f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f72:	1d1a      	adds	r2, r3, #4
 8009f74:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f76:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8009f78:	697a      	ldr	r2, [r7, #20]
 8009f7a:	b2d2      	uxtb	r2, r2
 8009f7c:	494f      	ldr	r1, [pc, #316]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f7e:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8009f80:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	0a1b      	lsrs	r3, r3, #8
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	494c      	ldr	r1, [pc, #304]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f8a:	5ccb      	ldrb	r3, [r1, r3]
 8009f8c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8009f8e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	0c1b      	lsrs	r3, r3, #16
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	4949      	ldr	r1, [pc, #292]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009f98:	5ccb      	ldrb	r3, [r1, r3]
 8009f9a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8009f9c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	0e1b      	lsrs	r3, r3, #24
 8009fa2:	4946      	ldr	r1, [pc, #280]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fa4:	5ccb      	ldrb	r3, [r1, r3]
 8009fa6:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8009fa8:	4053      	eors	r3, r2
 8009faa:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8009fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fae:	1d1a      	adds	r2, r3, #4
 8009fb0:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fb2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	b2d2      	uxtb	r2, r2
 8009fb8:	4940      	ldr	r1, [pc, #256]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fba:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8009fbc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	0a1b      	lsrs	r3, r3, #8
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	493d      	ldr	r1, [pc, #244]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fc6:	5ccb      	ldrb	r3, [r1, r3]
 8009fc8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8009fca:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	0c1b      	lsrs	r3, r3, #16
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	493a      	ldr	r1, [pc, #232]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fd4:	5ccb      	ldrb	r3, [r1, r3]
 8009fd6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8009fd8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	0e1b      	lsrs	r3, r3, #24
 8009fde:	4937      	ldr	r1, [pc, #220]	@ (800a0bc <mbedtls_internal_aes_decrypt+0x5c0>)
 8009fe0:	5ccb      	ldrb	r3, [r1, r3]
 8009fe2:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8009fe4:	4053      	eors	r3, r2
 8009fe6:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8009fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	701a      	strb	r2, [r3, #0]
 8009ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff2:	0a1a      	lsrs	r2, r3, #8
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	b2d2      	uxtb	r2, r2
 8009ffa:	701a      	strb	r2, [r3, #0]
 8009ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffe:	0c1a      	lsrs	r2, r3, #16
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3302      	adds	r3, #2
 800a004:	b2d2      	uxtb	r2, r2
 800a006:	701a      	strb	r2, [r3, #0]
 800a008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00a:	0e1a      	lsrs	r2, r3, #24
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3303      	adds	r3, #3
 800a010:	b2d2      	uxtb	r2, r2
 800a012:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3304      	adds	r3, #4
 800a018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a020:	0a1a      	lsrs	r2, r3, #8
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	3305      	adds	r3, #5
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02c:	0c1a      	lsrs	r2, r3, #16
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3306      	adds	r3, #6
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a038:	0e1a      	lsrs	r2, r3, #24
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	3307      	adds	r3, #7
 800a03e:	b2d2      	uxtb	r2, r2
 800a040:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	3308      	adds	r3, #8
 800a046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a048:	b2d2      	uxtb	r2, r2
 800a04a:	701a      	strb	r2, [r3, #0]
 800a04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04e:	0a1a      	lsrs	r2, r3, #8
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3309      	adds	r3, #9
 800a054:	b2d2      	uxtb	r2, r2
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a05a:	0c1a      	lsrs	r2, r3, #16
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	330a      	adds	r3, #10
 800a060:	b2d2      	uxtb	r2, r2
 800a062:	701a      	strb	r2, [r3, #0]
 800a064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a066:	0e1a      	lsrs	r2, r3, #24
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	330b      	adds	r3, #11
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	330c      	adds	r3, #12
 800a074:	6a3a      	ldr	r2, [r7, #32]
 800a076:	b2d2      	uxtb	r2, r2
 800a078:	701a      	strb	r2, [r3, #0]
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	0a1a      	lsrs	r2, r3, #8
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	330d      	adds	r3, #13
 800a082:	b2d2      	uxtb	r2, r2
 800a084:	701a      	strb	r2, [r3, #0]
 800a086:	6a3b      	ldr	r3, [r7, #32]
 800a088:	0c1a      	lsrs	r2, r3, #16
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	330e      	adds	r3, #14
 800a08e:	b2d2      	uxtb	r2, r2
 800a090:	701a      	strb	r2, [r3, #0]
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	0e1a      	lsrs	r2, r3, #24
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	330f      	adds	r3, #15
 800a09a:	b2d2      	uxtb	r2, r2
 800a09c:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	373c      	adds	r7, #60	@ 0x3c
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	24001548 	.word	0x24001548
 800a0b0:	24001948 	.word	0x24001948
 800a0b4:	24001d48 	.word	0x24001d48
 800a0b8:	24002148 	.word	0x24002148
 800a0bc:	24001448 	.word	0x24001448

0800a0c0 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d106      	bne.n	800a0e2 <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800a0d4:	683a      	ldr	r2, [r7, #0]
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7ff fa2d 	bl	8009538 <mbedtls_internal_aes_encrypt>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	e005      	b.n	800a0ee <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800a0e2:	683a      	ldr	r2, [r7, #0]
 800a0e4:	6879      	ldr	r1, [r7, #4]
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff fd08 	bl	8009afc <mbedtls_internal_aes_decrypt>
 800a0ec:	4603      	mov	r3, r0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 800a0f6:	b5b0      	push	{r4, r5, r7, lr}
 800a0f8:	b08a      	sub	sp, #40	@ 0x28
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	60b9      	str	r1, [r7, #8]
 800a100:	607a      	str	r2, [r7, #4]
 800a102:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f003 030f 	and.w	r3, r3, #15
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800a10e:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800a112:	e06d      	b.n	800a1f0 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d166      	bne.n	800a1e8 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 800a11a:	e036      	b.n	800a18a <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 800a11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11e:	f107 0414 	add.w	r4, r7, #20
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	6859      	ldr	r1, [r3, #4]
 800a126:	689a      	ldr	r2, [r3, #8]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 800a12c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a12e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a130:	68b9      	ldr	r1, [r7, #8]
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7ff ffc4 	bl	800a0c0 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 800a138:	2300      	movs	r3, #0
 800a13a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a13c:	e010      	b.n	800a160 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800a13e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a140:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a142:	4413      	add	r3, r2
 800a144:	7819      	ldrb	r1, [r3, #0]
 800a146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	4413      	add	r3, r2
 800a14c:	781a      	ldrb	r2, [r3, #0]
 800a14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a150:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a152:	4403      	add	r3, r0
 800a154:	404a      	eors	r2, r1
 800a156:	b2d2      	uxtb	r2, r2
 800a158:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800a15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15c:	3301      	adds	r3, #1
 800a15e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a162:	2b0f      	cmp	r3, #15
 800a164:	ddeb      	ble.n	800a13e <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	461d      	mov	r5, r3
 800a16a:	f107 0414 	add.w	r4, r7, #20
 800a16e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a170:	6028      	str	r0, [r5, #0]
 800a172:	6069      	str	r1, [r5, #4]
 800a174:	60aa      	str	r2, [r5, #8]
 800a176:	60eb      	str	r3, [r5, #12]

            input  += 16;
 800a178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17a:	3310      	adds	r3, #16
 800a17c:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 800a17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a180:	3310      	adds	r3, #16
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3b10      	subs	r3, #16
 800a188:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d1c5      	bne.n	800a11c <mbedtls_aes_crypt_cbc+0x26>
 800a190:	e02d      	b.n	800a1ee <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 800a192:	2300      	movs	r3, #0
 800a194:	627b      	str	r3, [r7, #36]	@ 0x24
 800a196:	e010      	b.n	800a1ba <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800a198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a19c:	4413      	add	r3, r2
 800a19e:	7819      	ldrb	r1, [r3, #0]
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	781a      	ldrb	r2, [r3, #0]
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a1ac:	4403      	add	r3, r0
 800a1ae:	404a      	eors	r2, r1
 800a1b0:	b2d2      	uxtb	r2, r2
 800a1b2:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	2b0f      	cmp	r3, #15
 800a1be:	ddeb      	ble.n	800a198 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800a1c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a1c4:	68b9      	ldr	r1, [r7, #8]
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff ff7a 	bl	800a0c0 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 800a1cc:	2210      	movs	r2, #16
 800a1ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1d0:	6838      	ldr	r0, [r7, #0]
 800a1d2:	f00b fc47 	bl	8015a64 <memcpy>

            input  += 16;
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d8:	3310      	adds	r3, #16
 800a1da:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 800a1dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1de:	3310      	adds	r3, #16
 800a1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3b10      	subs	r3, #16
 800a1e6:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1d1      	bne.n	800a192 <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3728      	adds	r7, #40	@ 0x28
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bdb0      	pop	{r4, r5, r7, pc}

0800a1f8 <mbedtls_mpi_zeroize>:
#define BITS_TO_LIMBS(i)  ( (i) / biL + ( (i) % biL != 0 ) )
#define CHARS_TO_LIMBS(i) ( (i) / ciL + ( (i) % ciL != 0 ) )

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_mpi_zeroize( mbedtls_mpi_uint *v, size_t n )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
    mbedtls_platform_zeroize( v, ciL * n );
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f009 fabf 	bl	801378c <mbedtls_platform_zeroize>
}
 800a20e:	bf00      	nop
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <mbedtls_mpi_init>:

/*
 * Initialize one MPI
 */
void mbedtls_mpi_init( mbedtls_mpi *X )
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
    MPI_VALIDATE( X != NULL );

    X->s = 1;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	601a      	str	r2, [r3, #0]
    X->n = 0;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	609a      	str	r2, [r3, #8]
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <mbedtls_mpi_free>:

/*
 * Unallocate one MPI
 */
void mbedtls_mpi_free( mbedtls_mpi *X )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
    if( X == NULL )
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d01a      	beq.n	800a280 <mbedtls_mpi_free+0x44>
        return;

    if( X->p != NULL )
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00c      	beq.n	800a26c <mbedtls_mpi_free+0x30>
    {
        mbedtls_mpi_zeroize( X->p, X->n );
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	689a      	ldr	r2, [r3, #8]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	4619      	mov	r1, r3
 800a25c:	4610      	mov	r0, r2
 800a25e:	f7ff ffcb 	bl	800a1f8 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	4618      	mov	r0, r3
 800a268:	f00b fab6 	bl	80157d8 <free>
    }

    X->s = 1;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	601a      	str	r2, [r3, #0]
    X->n = 0;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	605a      	str	r2, [r3, #4]
    X->p = NULL;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	609a      	str	r2, [r3, #8]
 800a27e:	e000      	b.n	800a282 <mbedtls_mpi_free+0x46>
        return;
 800a280:	bf00      	nop
}
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <mbedtls_mpi_grow>:

/*
 * Enlarge to the specified number of limbs
 */
int mbedtls_mpi_grow( mbedtls_mpi *X, size_t nblimbs )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a298:	4293      	cmp	r3, r2
 800a29a:	d902      	bls.n	800a2a2 <mbedtls_mpi_grow+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a29c:	f06f 030f 	mvn.w	r3, #15
 800a2a0:	e031      	b.n	800a306 <mbedtls_mpi_grow+0x7e>

    if( X->n < nblimbs )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d92b      	bls.n	800a304 <mbedtls_mpi_grow+0x7c>
    {
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
 800a2ac:	2104      	movs	r1, #4
 800a2ae:	6838      	ldr	r0, [r7, #0]
 800a2b0:	f00b fa76 	bl	80157a0 <calloc>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	60fb      	str	r3, [r7, #12]
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d102      	bne.n	800a2c4 <mbedtls_mpi_grow+0x3c>
            return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a2be:	f06f 030f 	mvn.w	r3, #15
 800a2c2:	e020      	b.n	800a306 <mbedtls_mpi_grow+0x7e>

        if( X->p != NULL )
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d015      	beq.n	800a2f8 <mbedtls_mpi_grow+0x70>
        {
            memcpy( p, X->p, X->n * ciL );
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6899      	ldr	r1, [r3, #8]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f00b fbc3 	bl	8015a64 <memcpy>
            mbedtls_mpi_zeroize( X->p, X->n );
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	f7ff ff85 	bl	800a1f8 <mbedtls_mpi_zeroize>
            mbedtls_free( X->p );
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f00b fa70 	bl	80157d8 <free>
        }

        X->n = nblimbs;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	683a      	ldr	r2, [r7, #0]
 800a2fc:	605a      	str	r2, [r3, #4]
        X->p = p;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	609a      	str	r2, [r3, #8]
    }

    return( 0 );
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3710      	adds	r7, #16
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <mbedtls_mpi_shrink>:
/*
 * Resize down as much as possible,
 * while keeping at least the specified number of limbs
 */
int mbedtls_mpi_shrink( mbedtls_mpi *X, size_t nblimbs )
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *p;
    size_t i;
    MPI_VALIDATE_RET( X != NULL );

    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a31e:	4293      	cmp	r3, r2
 800a320:	d902      	bls.n	800a328 <mbedtls_mpi_shrink+0x1a>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a322:	f06f 030f 	mvn.w	r3, #15
 800a326:	e054      	b.n	800a3d2 <mbedtls_mpi_shrink+0xc4>

    /* Actually resize up in this case */
    if( X->n <= nblimbs )
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d305      	bcc.n	800a33e <mbedtls_mpi_shrink+0x30>
        return( mbedtls_mpi_grow( X, nblimbs ) );
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7ff ffa7 	bl	800a288 <mbedtls_mpi_grow>
 800a33a:	4603      	mov	r3, r0
 800a33c:	e049      	b.n	800a3d2 <mbedtls_mpi_shrink+0xc4>

    for( i = X->n - 1; i > 0; i-- )
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	3b01      	subs	r3, #1
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	e00a      	b.n	800a35e <mbedtls_mpi_shrink+0x50>
        if( X->p[i] != 0 )
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689a      	ldr	r2, [r3, #8]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	4413      	add	r3, r2
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d106      	bne.n	800a366 <mbedtls_mpi_shrink+0x58>
    for( i = X->n - 1; i > 0; i-- )
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1f1      	bne.n	800a348 <mbedtls_mpi_shrink+0x3a>
 800a364:	e000      	b.n	800a368 <mbedtls_mpi_shrink+0x5a>
            break;
 800a366:	bf00      	nop
    i++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3301      	adds	r3, #1
 800a36c:	60fb      	str	r3, [r7, #12]

    if( i < nblimbs )
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	429a      	cmp	r2, r3
 800a374:	d201      	bcs.n	800a37a <mbedtls_mpi_shrink+0x6c>
        i = nblimbs;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	60fb      	str	r3, [r7, #12]

    if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( i, ciL ) ) == NULL )
 800a37a:	2104      	movs	r1, #4
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f00b fa0f 	bl	80157a0 <calloc>
 800a382:	4603      	mov	r3, r0
 800a384:	60bb      	str	r3, [r7, #8]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d102      	bne.n	800a392 <mbedtls_mpi_shrink+0x84>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
 800a38c:	f06f 030f 	mvn.w	r3, #15
 800a390:	e01f      	b.n	800a3d2 <mbedtls_mpi_shrink+0xc4>

    if( X->p != NULL )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d014      	beq.n	800a3c4 <mbedtls_mpi_shrink+0xb6>
    {
        memcpy( p, X->p, i * ciL );
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6899      	ldr	r1, [r3, #8]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	68b8      	ldr	r0, [r7, #8]
 800a3a6:	f00b fb5d 	bl	8015a64 <memcpy>
        mbedtls_mpi_zeroize( X->p, X->n );
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	689a      	ldr	r2, [r3, #8]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7ff ff1f 	bl	800a1f8 <mbedtls_mpi_zeroize>
        mbedtls_free( X->p );
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f00b fa0a 	bl	80157d8 <free>
    }

    X->n = i;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68fa      	ldr	r2, [r7, #12]
 800a3c8:	605a      	str	r2, [r3, #4]
    X->p = p;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68ba      	ldr	r2, [r7, #8]
 800a3ce:	609a      	str	r2, [r3, #8]

    return( 0 );
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <mbedtls_mpi_copy>:

/*
 * Copy the contents of Y into X
 */
int mbedtls_mpi_copy( mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
    int ret = 0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	60fb      	str	r3, [r7, #12]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d101      	bne.n	800a3f4 <mbedtls_mpi_copy+0x1a>
        return( 0 );
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e04a      	b.n	800a48a <mbedtls_mpi_copy+0xb0>

    if( Y->p == NULL )
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d104      	bne.n	800a406 <mbedtls_mpi_copy+0x2c>
    {
        mbedtls_mpi_free( X );
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7ff ff1d 	bl	800a23c <mbedtls_mpi_free>
        return( 0 );
 800a402:	2300      	movs	r3, #0
 800a404:	e041      	b.n	800a48a <mbedtls_mpi_copy+0xb0>
    }

    for( i = Y->n - 1; i > 0; i-- )
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	60bb      	str	r3, [r7, #8]
 800a40e:	e00a      	b.n	800a426 <mbedtls_mpi_copy+0x4c>
        if( Y->p[i] != 0 )
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d106      	bne.n	800a42e <mbedtls_mpi_copy+0x54>
    for( i = Y->n - 1; i > 0; i-- )
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	3b01      	subs	r3, #1
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1f1      	bne.n	800a410 <mbedtls_mpi_copy+0x36>
 800a42c:	e000      	b.n	800a430 <mbedtls_mpi_copy+0x56>
            break;
 800a42e:	bf00      	nop
    i++;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	3301      	adds	r3, #1
 800a434:	60bb      	str	r3, [r7, #8]

    X->s = Y->s;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	601a      	str	r2, [r3, #0]

    if( X->n < i )
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	429a      	cmp	r2, r3
 800a446:	d908      	bls.n	800a45a <mbedtls_mpi_copy+0x80>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
 800a448:	68b9      	ldr	r1, [r7, #8]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff ff1c 	bl	800a288 <mbedtls_mpi_grow>
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00e      	beq.n	800a476 <mbedtls_mpi_copy+0x9c>
 800a458:	e016      	b.n	800a488 <mbedtls_mpi_copy+0xae>
    }
    else
    {
        memset( X->p + i, 0, ( X->n - i ) * ciL );
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689a      	ldr	r2, [r3, #8]
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	18d0      	adds	r0, r2, r3
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685a      	ldr	r2, [r3, #4]
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	461a      	mov	r2, r3
 800a470:	2100      	movs	r1, #0
 800a472:	f00b fab3 	bl	80159dc <memset>
    }

    memcpy( X->p, Y->p, i * ciL );
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6898      	ldr	r0, [r3, #8]
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	6899      	ldr	r1, [r3, #8]
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	461a      	mov	r2, r3
 800a484:	f00b faee 	bl	8015a64 <memcpy>

cleanup:

    return( ret );
 800a488:	68fb      	ldr	r3, [r7, #12]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <mbedtls_mpi_safe_cond_assign>:
 * Conditionally assign X = Y, without leaking information
 * about whether the assignment was made or not.
 * (Leaking information about the respective sizes of X and Y is ok however.)
 */
int mbedtls_mpi_safe_cond_assign( mbedtls_mpi *X, const mbedtls_mpi *Y, unsigned char assign )
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b086      	sub	sp, #24
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	60b9      	str	r1, [r7, #8]
 800a49c:	4613      	mov	r3, r2
 800a49e:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	613b      	str	r3, [r7, #16]
    size_t i;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    /* make sure assign is 0 or 1 in a time-constant manner */
    assign = (assign | (unsigned char)-assign) >> 7;
 800a4a4:	79fb      	ldrb	r3, [r7, #7]
 800a4a6:	425b      	negs	r3, r3
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	09db      	lsrs	r3, r3, #7
 800a4b2:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7ff fee4 	bl	800a288 <mbedtls_mpi_grow>
 800a4c0:	6138      	str	r0, [r7, #16]
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d150      	bne.n	800a56a <mbedtls_mpi_safe_cond_assign+0xd8>

    X->s = X->s * ( 1 - assign ) + Y->s * assign;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	79fa      	ldrb	r2, [r7, #7]
 800a4ce:	f1c2 0201 	rsb	r2, r2, #1
 800a4d2:	fb03 f202 	mul.w	r2, r3, r2
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	79f9      	ldrb	r1, [r7, #7]
 800a4dc:	fb01 f303 	mul.w	r3, r1, r3
 800a4e0:	441a      	add	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	601a      	str	r2, [r3, #0]

    for( i = 0; i < Y->n; i++ )
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	617b      	str	r3, [r7, #20]
 800a4ea:	e01d      	b.n	800a528 <mbedtls_mpi_safe_cond_assign+0x96>
        X->p[i] = X->p[i] * ( 1 - assign ) + Y->p[i] * assign;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689a      	ldr	r2, [r3, #8]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	79fa      	ldrb	r2, [r7, #7]
 800a4fa:	f1c2 0201 	rsb	r2, r2, #1
 800a4fe:	fb02 f103 	mul.w	r1, r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	689a      	ldr	r2, [r3, #8]
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	79fa      	ldrb	r2, [r7, #7]
 800a510:	fb03 f202 	mul.w	r2, r3, r2
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	6898      	ldr	r0, [r3, #8]
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	009b      	lsls	r3, r3, #2
 800a51c:	4403      	add	r3, r0
 800a51e:	440a      	add	r2, r1
 800a520:	601a      	str	r2, [r3, #0]
    for( i = 0; i < Y->n; i++ )
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	3301      	adds	r3, #1
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	697a      	ldr	r2, [r7, #20]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d3dc      	bcc.n	800a4ec <mbedtls_mpi_safe_cond_assign+0x5a>

    for( ; i < X->n; i++ )
 800a532:	e014      	b.n	800a55e <mbedtls_mpi_safe_cond_assign+0xcc>
        X->p[i] *= ( 1 - assign );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	4413      	add	r3, r2
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	79fb      	ldrb	r3, [r7, #7]
 800a542:	f1c3 0301 	rsb	r3, r3, #1
 800a546:	4618      	mov	r0, r3
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6899      	ldr	r1, [r3, #8]
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	440b      	add	r3, r1
 800a552:	fb00 f202 	mul.w	r2, r0, r2
 800a556:	601a      	str	r2, [r3, #0]
    for( ; i < X->n; i++ )
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	3301      	adds	r3, #1
 800a55c:	617b      	str	r3, [r7, #20]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	429a      	cmp	r2, r3
 800a566:	d3e5      	bcc.n	800a534 <mbedtls_mpi_safe_cond_assign+0xa2>

cleanup:
 800a568:	bf00      	nop
    return( ret );
 800a56a:	693b      	ldr	r3, [r7, #16]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3718      	adds	r7, #24
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <mbedtls_mpi_safe_cond_swap>:
 * about whether the swap was made or not.
 * Here it is not ok to simply swap the pointers, which whould lead to
 * different memory access patterns when X and Y are used afterwards.
 */
int mbedtls_mpi_safe_cond_swap( mbedtls_mpi *X, mbedtls_mpi *Y, unsigned char swap )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	71fb      	strb	r3, [r7, #7]
    size_t i;
    mbedtls_mpi_uint tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    if( X == Y )
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	429a      	cmp	r2, r3
 800a588:	d101      	bne.n	800a58e <mbedtls_mpi_safe_cond_swap+0x1a>
        return( 0 );
 800a58a:	2300      	movs	r3, #0
 800a58c:	e080      	b.n	800a690 <mbedtls_mpi_safe_cond_swap+0x11c>

    /* make sure swap is 0 or 1 in a time-constant manner */
    swap = (swap | (unsigned char)-swap) >> 7;
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	425b      	negs	r3, r3
 800a592:	b2da      	uxtb	r2, r3
 800a594:	79fb      	ldrb	r3, [r7, #7]
 800a596:	4313      	orrs	r3, r2
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	09db      	lsrs	r3, r3, #7
 800a59c:	71fb      	strb	r3, [r7, #7]

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, Y->n ) );
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7ff fe6f 	bl	800a288 <mbedtls_mpi_grow>
 800a5aa:	61f8      	str	r0, [r7, #28]
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d16d      	bne.n	800a68e <mbedtls_mpi_safe_cond_swap+0x11a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( Y, X->n ) );
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	68b8      	ldr	r0, [r7, #8]
 800a5ba:	f7ff fe65 	bl	800a288 <mbedtls_mpi_grow>
 800a5be:	61f8      	str	r0, [r7, #28]
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d163      	bne.n	800a68e <mbedtls_mpi_safe_cond_swap+0x11a>

    s = X->s;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	617b      	str	r3, [r7, #20]
    X->s = X->s * ( 1 - swap ) + Y->s * swap;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	79fa      	ldrb	r2, [r7, #7]
 800a5d2:	f1c2 0201 	rsb	r2, r2, #1
 800a5d6:	fb03 f202 	mul.w	r2, r3, r2
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	79f9      	ldrb	r1, [r7, #7]
 800a5e0:	fb01 f303 	mul.w	r3, r1, r3
 800a5e4:	441a      	add	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	601a      	str	r2, [r3, #0]
    Y->s = Y->s * ( 1 - swap ) +    s * swap;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	79fa      	ldrb	r2, [r7, #7]
 800a5f0:	f1c2 0201 	rsb	r2, r2, #1
 800a5f4:	fb03 f202 	mul.w	r2, r3, r2
 800a5f8:	79fb      	ldrb	r3, [r7, #7]
 800a5fa:	6979      	ldr	r1, [r7, #20]
 800a5fc:	fb01 f303 	mul.w	r3, r1, r3
 800a600:	441a      	add	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	601a      	str	r2, [r3, #0]


    for( i = 0; i < X->n; i++ )
 800a606:	2300      	movs	r3, #0
 800a608:	61bb      	str	r3, [r7, #24]
 800a60a:	e03a      	b.n	800a682 <mbedtls_mpi_safe_cond_swap+0x10e>
    {
        tmp = X->p[i];
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4413      	add	r3, r2
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	613b      	str	r3, [r7, #16]
        X->p[i] = X->p[i] * ( 1 - swap ) + Y->p[i] * swap;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	689a      	ldr	r2, [r3, #8]
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	4413      	add	r3, r2
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	79fa      	ldrb	r2, [r7, #7]
 800a628:	f1c2 0201 	rsb	r2, r2, #1
 800a62c:	fb02 f103 	mul.w	r1, r2, r3
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	689a      	ldr	r2, [r3, #8]
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	79fa      	ldrb	r2, [r7, #7]
 800a63e:	fb03 f202 	mul.w	r2, r3, r2
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6898      	ldr	r0, [r3, #8]
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	4403      	add	r3, r0
 800a64c:	440a      	add	r2, r1
 800a64e:	601a      	str	r2, [r3, #0]
        Y->p[i] = Y->p[i] * ( 1 - swap ) +     tmp * swap;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	689a      	ldr	r2, [r3, #8]
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	79fa      	ldrb	r2, [r7, #7]
 800a65e:	f1c2 0201 	rsb	r2, r2, #1
 800a662:	fb02 f103 	mul.w	r1, r2, r3
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	fb03 f202 	mul.w	r2, r3, r2
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	6898      	ldr	r0, [r3, #8]
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4403      	add	r3, r0
 800a678:	440a      	add	r2, r1
 800a67a:	601a      	str	r2, [r3, #0]
    for( i = 0; i < X->n; i++ )
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	3301      	adds	r3, #1
 800a680:	61bb      	str	r3, [r7, #24]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d3bf      	bcc.n	800a60c <mbedtls_mpi_safe_cond_swap+0x98>
    }

cleanup:
 800a68c:	bf00      	nop
    return( ret );
 800a68e:	69fb      	ldr	r3, [r7, #28]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3720      	adds	r7, #32
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <mbedtls_mpi_lset>:

/*
 * Set value from integer
 */
int mbedtls_mpi_lset( mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
    int ret;
    MPI_VALIDATE_RET( X != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7ff fdef 	bl	800a288 <mbedtls_mpi_grow>
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d119      	bne.n	800a6e6 <mbedtls_mpi_lset+0x4e>
    memset( X->p, 0, X->n * ciL );
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6898      	ldr	r0, [r3, #8]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	461a      	mov	r2, r3
 800a6be:	2100      	movs	r1, #0
 800a6c0:	f00b f98c 	bl	80159dc <memset>

    X->p[0] = ( z < 0 ) ? -z : z;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a6ca:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	da02      	bge.n	800a6e0 <mbedtls_mpi_lset+0x48>
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295
 800a6de:	e000      	b.n	800a6e2 <mbedtls_mpi_lset+0x4a>
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 800a6e6:	68fb      	ldr	r3, [r7, #12]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <mbedtls_mpi_get_bit>:

/*
 * Get a specific bit
 */
int mbedtls_mpi_get_bit( const mbedtls_mpi *X, size_t pos )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
    MPI_VALIDATE_RET( X != NULL );

    if( X->n * biL <= pos )
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	015b      	lsls	r3, r3, #5
 800a700:	683a      	ldr	r2, [r7, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d301      	bcc.n	800a70a <mbedtls_mpi_get_bit+0x1a>
        return( 0 );
 800a706:	2300      	movs	r3, #0
 800a708:	e00d      	b.n	800a726 <mbedtls_mpi_get_bit+0x36>

    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	689a      	ldr	r2, [r3, #8]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	095b      	lsrs	r3, r3, #5
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4413      	add	r3, r2
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	f003 031f 	and.w	r3, r3, #31
 800a71e:	fa22 f303 	lsr.w	r3, r2, r3
 800a722:	f003 0301 	and.w	r3, r3, #1
}
 800a726:	4618      	mov	r0, r3
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <mbedtls_mpi_set_bit>:

/*
 * Set a bit to a specific value of 0 or 1
 */
int mbedtls_mpi_set_bit( mbedtls_mpi *X, size_t pos, unsigned char val )
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b088      	sub	sp, #32
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	4613      	mov	r3, r2
 800a73e:	71fb      	strb	r3, [r7, #7]
    int ret = 0;
 800a740:	2300      	movs	r3, #0
 800a742:	61fb      	str	r3, [r7, #28]
    size_t off = pos / biL;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	095b      	lsrs	r3, r3, #5
 800a748:	61bb      	str	r3, [r7, #24]
    size_t idx = pos % biL;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	f003 031f 	and.w	r3, r3, #31
 800a750:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    if( val != 0 && val != 1 )
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d005      	beq.n	800a764 <mbedtls_mpi_set_bit+0x32>
 800a758:	79fb      	ldrb	r3, [r7, #7]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d002      	beq.n	800a764 <mbedtls_mpi_set_bit+0x32>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a75e:	f06f 0303 	mvn.w	r3, #3
 800a762:	e037      	b.n	800a7d4 <mbedtls_mpi_set_bit+0xa2>

    if( X->n * biL <= pos )
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	015b      	lsls	r3, r3, #5
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d30e      	bcc.n	800a78e <mbedtls_mpi_set_bit+0x5c>
    {
        if( val == 0 )
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <mbedtls_mpi_set_bit+0x48>
            return( 0 );
 800a776:	2300      	movs	r3, #0
 800a778:	e02c      	b.n	800a7d4 <mbedtls_mpi_set_bit+0xa2>

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, off + 1 ) );
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	3301      	adds	r3, #1
 800a77e:	4619      	mov	r1, r3
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f7ff fd81 	bl	800a288 <mbedtls_mpi_grow>
 800a786:	61f8      	str	r0, [r7, #28]
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d121      	bne.n	800a7d2 <mbedtls_mpi_set_bit+0xa0>
    }

    X->p[off] &= ~( (mbedtls_mpi_uint) 0x01 << idx );
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689a      	ldr	r2, [r3, #8]
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	6819      	ldr	r1, [r3, #0]
 800a79a:	2201      	movs	r2, #1
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a2:	43da      	mvns	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6898      	ldr	r0, [r3, #8]
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4403      	add	r3, r0
 800a7ae:	400a      	ands	r2, r1
 800a7b0:	601a      	str	r2, [r3, #0]
    X->p[off] |= (mbedtls_mpi_uint) val << idx;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	689a      	ldr	r2, [r3, #8]
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	009b      	lsls	r3, r3, #2
 800a7ba:	4413      	add	r3, r2
 800a7bc:	6819      	ldr	r1, [r3, #0]
 800a7be:	79fa      	ldrb	r2, [r7, #7]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	409a      	lsls	r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	6898      	ldr	r0, [r3, #8]
 800a7c8:	69bb      	ldr	r3, [r7, #24]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	4403      	add	r3, r0
 800a7ce:	430a      	orrs	r2, r1
 800a7d0:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 800a7d2:	69fb      	ldr	r3, [r7, #28]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3720      	adds	r7, #32
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <mbedtls_mpi_lsb>:

/*
 * Return the number of less significant zero-bits
 */
size_t mbedtls_mpi_lsb( const mbedtls_mpi *X )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
    size_t i, j, count = 0;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]
    MBEDTLS_INTERNAL_VALIDATE_RET( X != NULL, 0 );

    for( i = 0; i < X->n; i++ )
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	e01d      	b.n	800a82a <mbedtls_mpi_lsb+0x4e>
        for( j = 0; j < biL; j++, count++ )
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	e014      	b.n	800a81e <mbedtls_mpi_lsb+0x42>
            if( ( ( X->p[i] >> j ) & 1 ) != 0 )
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	689a      	ldr	r2, [r3, #8]
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	fa22 f303 	lsr.w	r3, r2, r3
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <mbedtls_mpi_lsb+0x36>
                return( count );
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	e011      	b.n	800a836 <mbedtls_mpi_lsb+0x5a>
        for( j = 0; j < biL; j++, count++ )
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	3301      	adds	r3, #1
 800a816:	613b      	str	r3, [r7, #16]
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	3301      	adds	r3, #1
 800a81c:	60fb      	str	r3, [r7, #12]
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	2b1f      	cmp	r3, #31
 800a822:	d9e7      	bls.n	800a7f4 <mbedtls_mpi_lsb+0x18>
    for( i = 0; i < X->n; i++ )
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	3301      	adds	r3, #1
 800a828:	617b      	str	r3, [r7, #20]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	429a      	cmp	r2, r3
 800a832:	d3dc      	bcc.n	800a7ee <mbedtls_mpi_lsb+0x12>

    return( 0 );
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	371c      	adds	r7, #28
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <mbedtls_clz>:

/*
 * Count leading zero bits in a given integer
 */
static size_t mbedtls_clz( const mbedtls_mpi_uint x )
{
 800a842:	b480      	push	{r7}
 800a844:	b085      	sub	sp, #20
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
    size_t j;
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
 800a84a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a84e:	60bb      	str	r3, [r7, #8]

    for( j = 0; j < biL; j++ )
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	e00a      	b.n	800a86c <mbedtls_clz+0x2a>
    {
        if( x & mask ) break;
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4013      	ands	r3, r2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d109      	bne.n	800a874 <mbedtls_clz+0x32>

        mask >>= 1;
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	085b      	lsrs	r3, r3, #1
 800a864:	60bb      	str	r3, [r7, #8]
    for( j = 0; j < biL; j++ )
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3301      	adds	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2b1f      	cmp	r3, #31
 800a870:	d9f1      	bls.n	800a856 <mbedtls_clz+0x14>
 800a872:	e000      	b.n	800a876 <mbedtls_clz+0x34>
        if( x & mask ) break;
 800a874:	bf00      	nop
    }

    return j;
 800a876:	68fb      	ldr	r3, [r7, #12]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <mbedtls_mpi_bitlen>:

/*
 * Return the number of bits
 */
size_t mbedtls_mpi_bitlen( const mbedtls_mpi *X )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
    size_t i, j;

    if( X->n == 0 )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <mbedtls_mpi_bitlen+0x14>
        return( 0 );
 800a894:	2300      	movs	r3, #0
 800a896:	e025      	b.n	800a8e4 <mbedtls_mpi_bitlen+0x60>

    for( i = X->n - 1; i > 0; i-- )
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	e00a      	b.n	800a8b8 <mbedtls_mpi_bitlen+0x34>
        if( X->p[i] != 0 )
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	689a      	ldr	r2, [r3, #8]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4413      	add	r3, r2
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <mbedtls_mpi_bitlen+0x3c>
    for( i = X->n - 1; i > 0; i-- )
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1f1      	bne.n	800a8a2 <mbedtls_mpi_bitlen+0x1e>
 800a8be:	e000      	b.n	800a8c2 <mbedtls_mpi_bitlen+0x3e>
            break;
 800a8c0:	bf00      	nop

    j = biL - mbedtls_clz( X->p[i] );
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	689a      	ldr	r2, [r3, #8]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	009b      	lsls	r3, r3, #2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7ff ffb7 	bl	800a842 <mbedtls_clz>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f1c3 0320 	rsb	r3, r3, #32
 800a8da:	60bb      	str	r3, [r7, #8]

    return( ( i * biL ) + j );
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	4413      	add	r3, r2
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <mbedtls_mpi_size>:

/*
 * Return the total size in bytes
 */
size_t mbedtls_mpi_size( const mbedtls_mpi *X )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f7ff ffc5 	bl	800a884 <mbedtls_mpi_bitlen>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	3307      	adds	r3, #7
 800a8fe:	08db      	lsrs	r3, r3, #3
}
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <mpi_get_digit>:

/*
 * Convert an ASCII character to digit value
 */
static int mpi_get_digit( mbedtls_mpi_uint *d, int radix, char c )
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	4613      	mov	r3, r2
 800a914:	71fb      	strb	r3, [r7, #7]
    *d = 255;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	22ff      	movs	r2, #255	@ 0xff
 800a91a:	601a      	str	r2, [r3, #0]

    if( c >= 0x30 && c <= 0x39 ) *d = c - 0x30;
 800a91c:	79fb      	ldrb	r3, [r7, #7]
 800a91e:	2b2f      	cmp	r3, #47	@ 0x2f
 800a920:	d907      	bls.n	800a932 <mpi_get_digit+0x2a>
 800a922:	79fb      	ldrb	r3, [r7, #7]
 800a924:	2b39      	cmp	r3, #57	@ 0x39
 800a926:	d804      	bhi.n	800a932 <mpi_get_digit+0x2a>
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	3b30      	subs	r3, #48	@ 0x30
 800a92c:	461a      	mov	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	601a      	str	r2, [r3, #0]
    if( c >= 0x41 && c <= 0x46 ) *d = c - 0x37;
 800a932:	79fb      	ldrb	r3, [r7, #7]
 800a934:	2b40      	cmp	r3, #64	@ 0x40
 800a936:	d907      	bls.n	800a948 <mpi_get_digit+0x40>
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	2b46      	cmp	r3, #70	@ 0x46
 800a93c:	d804      	bhi.n	800a948 <mpi_get_digit+0x40>
 800a93e:	79fb      	ldrb	r3, [r7, #7]
 800a940:	3b37      	subs	r3, #55	@ 0x37
 800a942:	461a      	mov	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	601a      	str	r2, [r3, #0]
    if( c >= 0x61 && c <= 0x66 ) *d = c - 0x57;
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	2b60      	cmp	r3, #96	@ 0x60
 800a94c:	d907      	bls.n	800a95e <mpi_get_digit+0x56>
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	2b66      	cmp	r3, #102	@ 0x66
 800a952:	d804      	bhi.n	800a95e <mpi_get_digit+0x56>
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	3b57      	subs	r3, #87	@ 0x57
 800a958:	461a      	mov	r2, r3
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	601a      	str	r2, [r3, #0]

    if( *d >= (mbedtls_mpi_uint) radix )
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	429a      	cmp	r2, r3
 800a966:	d302      	bcc.n	800a96e <mpi_get_digit+0x66>
        return( MBEDTLS_ERR_MPI_INVALID_CHARACTER );
 800a968:	f06f 0305 	mvn.w	r3, #5
 800a96c:	e000      	b.n	800a970 <mpi_get_digit+0x68>

    return( 0 );
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <mbedtls_mpi_read_string>:

/*
 * Import from an ASCII string
 */
int mbedtls_mpi_read_string( mbedtls_mpi *X, int radix, const char *s )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08e      	sub	sp, #56	@ 0x38
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint d;
    mbedtls_mpi T;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( s != NULL );

    if( radix < 2 || radix > 16 )
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	dd02      	ble.n	800a994 <mbedtls_mpi_read_string+0x18>
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2b10      	cmp	r3, #16
 800a992:	dd02      	ble.n	800a99a <mbedtls_mpi_read_string+0x1e>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a994:	f06f 0303 	mvn.w	r3, #3
 800a998:	e0cf      	b.n	800ab3a <mbedtls_mpi_read_string+0x1be>

    mbedtls_mpi_init( &T );
 800a99a:	f107 0314 	add.w	r3, r7, #20
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7ff fc39 	bl	800a216 <mbedtls_mpi_init>

    slen = strlen( s );
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7f5 fcb3 	bl	8000310 <strlen>
 800a9aa:	62b8      	str	r0, [r7, #40]	@ 0x28

    if( radix == 16 )
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2b10      	cmp	r3, #16
 800a9b0:	d166      	bne.n	800aa80 <mbedtls_mpi_read_string+0x104>
    {
        if( slen > MPI_SIZE_T_MAX >> 2 )
 800a9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9b8:	d302      	bcc.n	800a9c0 <mbedtls_mpi_read_string+0x44>
            return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800a9ba:	f06f 0303 	mvn.w	r3, #3
 800a9be:	e0bc      	b.n	800ab3a <mbedtls_mpi_read_string+0x1be>

        n = BITS_TO_LIMBS( slen << 2 );
 800a9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	095b      	lsrs	r3, r3, #5
 800a9c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9c8:	f002 0207 	and.w	r2, r2, #7
 800a9cc:	2a00      	cmp	r2, #0
 800a9ce:	bf14      	ite	ne
 800a9d0:	2201      	movne	r2, #1
 800a9d2:	2200      	moveq	r2, #0
 800a9d4:	b2d2      	uxtb	r2, r2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	627b      	str	r3, [r7, #36]	@ 0x24

        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, n ) );
 800a9da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f7ff fc53 	bl	800a288 <mbedtls_mpi_grow>
 800a9e2:	6378      	str	r0, [r7, #52]	@ 0x34
 800a9e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f040 80a1 	bne.w	800ab2e <mbedtls_mpi_read_string+0x1b2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7ff fe52 	bl	800a698 <mbedtls_mpi_lset>
 800a9f4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a9f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f040 8098 	bne.w	800ab2e <mbedtls_mpi_read_string+0x1b2>

        for( i = slen, j = 0; i > 0; i--, j++ )
 800a9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa00:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa02:	2300      	movs	r3, #0
 800aa04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa06:	e037      	b.n	800aa78 <mbedtls_mpi_read_string+0xfc>
        {
            if( i == 1 && s[i - 1] == '-' )
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d10b      	bne.n	800aa26 <mbedtls_mpi_read_string+0xaa>
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa10:	3b01      	subs	r3, #1
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	4413      	add	r3, r2
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa1a:	d104      	bne.n	800aa26 <mbedtls_mpi_read_string+0xaa>
            {
                X->s = -1;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa22:	601a      	str	r2, [r3, #0]
                break;
 800aa24:	e083      	b.n	800ab2e <mbedtls_mpi_read_string+0x1b2>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i - 1] ) );
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	f107 0320 	add.w	r3, r7, #32
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7ff ff66 	bl	800a908 <mpi_get_digit>
 800aa3c:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d174      	bne.n	800ab2e <mbedtls_mpi_read_string+0x1b2>
            X->p[j / ( 2 * ciL )] |= d << ( ( j % ( 2 * ciL ) ) << 2 );
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6899      	ldr	r1, [r3, #8]
 800aa48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4a:	08db      	lsrs	r3, r3, #3
 800aa4c:	009a      	lsls	r2, r3, #2
 800aa4e:	440a      	add	r2, r1
 800aa50:	6811      	ldr	r1, [r2, #0]
 800aa52:	6a38      	ldr	r0, [r7, #32]
 800aa54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa56:	0092      	lsls	r2, r2, #2
 800aa58:	f002 021c 	and.w	r2, r2, #28
 800aa5c:	fa00 f202 	lsl.w	r2, r0, r2
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	6880      	ldr	r0, [r0, #8]
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4403      	add	r3, r0
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	601a      	str	r2, [r3, #0]
        for( i = slen, j = 0; i > 0; i--, j++ )
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa74:	3301      	adds	r3, #1
 800aa76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1c4      	bne.n	800aa08 <mbedtls_mpi_read_string+0x8c>
 800aa7e:	e056      	b.n	800ab2e <mbedtls_mpi_read_string+0x1b2>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800aa80:	2100      	movs	r1, #0
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff fe08 	bl	800a698 <mbedtls_mpi_lset>
 800aa88:	6378      	str	r0, [r7, #52]	@ 0x34
 800aa8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d14e      	bne.n	800ab2e <mbedtls_mpi_read_string+0x1b2>

        for( i = 0; i < slen; i++ )
 800aa90:	2300      	movs	r3, #0
 800aa92:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa94:	e046      	b.n	800ab24 <mbedtls_mpi_read_string+0x1a8>
        {
            if( i == 0 && s[i] == '-' )
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10a      	bne.n	800aab2 <mbedtls_mpi_read_string+0x136>
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa0:	4413      	add	r3, r2
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	2b2d      	cmp	r3, #45	@ 0x2d
 800aaa6:	d104      	bne.n	800aab2 <mbedtls_mpi_read_string+0x136>
            {
                X->s = -1;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f04f 32ff 	mov.w	r2, #4294967295
 800aaae:	601a      	str	r2, [r3, #0]
                continue;
 800aab0:	e035      	b.n	800ab1e <mbedtls_mpi_read_string+0x1a2>
            }

            MBEDTLS_MPI_CHK( mpi_get_digit( &d, radix, s[i] ) );
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab6:	4413      	add	r3, r2
 800aab8:	781a      	ldrb	r2, [r3, #0]
 800aaba:	f107 0320 	add.w	r3, r7, #32
 800aabe:	68b9      	ldr	r1, [r7, #8]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff ff21 	bl	800a908 <mpi_get_digit>
 800aac6:	6378      	str	r0, [r7, #52]	@ 0x34
 800aac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d12f      	bne.n	800ab2e <mbedtls_mpi_read_string+0x1b2>
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T, X, radix ) );
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	f107 0314 	add.w	r3, r7, #20
 800aad4:	68f9      	ldr	r1, [r7, #12]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f002 f9c6 	bl	800ce68 <mbedtls_mpi_mul_int>
 800aadc:	6378      	str	r0, [r7, #52]	@ 0x34
 800aade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d124      	bne.n	800ab2e <mbedtls_mpi_read_string+0x1b2>

            if( X->s == 1 )
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d10c      	bne.n	800ab06 <mbedtls_mpi_read_string+0x18a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_int( X, &T, d ) );
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f107 0314 	add.w	r3, r7, #20
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f000 fd1c 	bl	800b534 <mbedtls_mpi_add_int>
 800aafc:	6378      	str	r0, [r7, #52]	@ 0x34
 800aafe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00c      	beq.n	800ab1e <mbedtls_mpi_read_string+0x1a2>
 800ab04:	e013      	b.n	800ab2e <mbedtls_mpi_read_string+0x1b2>
            }
            else
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( X, &T, d ) );
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	f107 0314 	add.w	r3, r7, #20
 800ab0e:	4619      	mov	r1, r3
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f000 fd33 	bl	800b57c <mbedtls_mpi_sub_int>
 800ab16:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d107      	bne.n	800ab2e <mbedtls_mpi_read_string+0x1b2>
        for( i = 0; i < slen; i++ )
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab20:	3301      	adds	r3, #1
 800ab22:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d3b4      	bcc.n	800aa96 <mbedtls_mpi_read_string+0x11a>
            }
        }
    }

cleanup:
 800ab2c:	bf00      	nop

    mbedtls_mpi_free( &T );
 800ab2e:	f107 0314 	add.w	r3, r7, #20
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff fb82 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800ab38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3738      	adds	r7, #56	@ 0x38
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <mpi_uint_bigendian_to_host>:
        tmp |= ( x & 0xFF ) << ( ( ciL - 1 - i ) << 3 );
    return( tmp );
}

static mbedtls_mpi_uint mpi_uint_bigendian_to_host( mbedtls_mpi_uint x )
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
#if defined(have_bswap)
    /* The compiler is hopefully able to statically evaluate this! */
    switch( sizeof(mbedtls_mpi_uint) )
    {
        case 4:
            return( __builtin_bswap32(x) );
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	ba1b      	rev	r3, r3
#endif /* __BYTE_ORDER__ */

    /* Fall back to C-based reordering if we don't know the byte order
     * or we couldn't use a compiler-specific builtin. */
    return( mpi_uint_bigendian_to_host_c( x ) );
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <mpi_bigendian_to_host>:

static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b086      	sub	sp, #24
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	6039      	str	r1, [r7, #0]
    mbedtls_mpi_uint *cur_limb_left;
    mbedtls_mpi_uint *cur_limb_right;
    if( limbs == 0 )
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d026      	beq.n	800abb8 <mpi_bigendian_to_host+0x5e>
     * For that, simultaneously traverse the limbs from left to right
     * and from right to left, as long as the left index is not bigger
     * than the right index (it's not a problem if limbs is odd and the
     * indices coincide in the last iteration).
     */
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	617b      	str	r3, [r7, #20]
 800ab6e:	683a      	ldr	r2, [r7, #0]
 800ab70:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	613b      	str	r3, [r7, #16]
 800ab7e:	e016      	b.n	800abae <mpi_bigendian_to_host+0x54>
         cur_limb_left++, cur_limb_right-- )
    {
        mbedtls_mpi_uint tmp;
        /* Note that if cur_limb_left == cur_limb_right,
         * this code effectively swaps the bytes only once. */
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7ff ffdc 	bl	800ab42 <mpi_uint_bigendian_to_host>
 800ab8a:	60f8      	str	r0, [r7, #12]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff ffd6 	bl	800ab42 <mpi_uint_bigendian_to_host>
 800ab96:	4602      	mov	r2, r0
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	601a      	str	r2, [r3, #0]
        *cur_limb_right = tmp;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	601a      	str	r2, [r3, #0]
         cur_limb_left++, cur_limb_right-- )
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	3304      	adds	r3, #4
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	3b04      	subs	r3, #4
 800abac:	613b      	str	r3, [r7, #16]
         cur_limb_left <= cur_limb_right;
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d9e4      	bls.n	800ab80 <mpi_bigendian_to_host+0x26>
 800abb6:	e000      	b.n	800abba <mpi_bigendian_to_host+0x60>
        return;
 800abb8:	bf00      	nop
    }
}
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <mbedtls_mpi_read_binary>:

/*
 * Import X from unsigned binary data, big endian
 */
int mbedtls_mpi_read_binary( mbedtls_mpi *X, const unsigned char *buf, size_t buflen )
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
    int ret;
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	089b      	lsrs	r3, r3, #2
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	f002 0203 	and.w	r2, r2, #3
 800abd6:	2a00      	cmp	r2, #0
 800abd8:	bf14      	ite	ne
 800abda:	2201      	movne	r2, #1
 800abdc:	2200      	moveq	r2, #0
 800abde:	b2d2      	uxtb	r2, r2
 800abe0:	4413      	add	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - buflen;
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	009a      	lsls	r2, r3, #2
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( buflen == 0 || buf != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	69ba      	ldr	r2, [r7, #24]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d00d      	beq.n	800ac14 <mbedtls_mpi_read_binary+0x54>
    {
        mbedtls_mpi_free( X );
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff fb1f 	bl	800a23c <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	f7ff fb09 	bl	800a216 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800ac04:	69b9      	ldr	r1, [r7, #24]
 800ac06:	68f8      	ldr	r0, [r7, #12]
 800ac08:	f7ff fb3e 	bl	800a288 <mbedtls_mpi_grow>
 800ac0c:	61f8      	str	r0, [r7, #28]
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d11d      	bne.n	800ac50 <mbedtls_mpi_read_binary+0x90>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800ac14:	2100      	movs	r1, #0
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f7ff fd3e 	bl	800a698 <mbedtls_mpi_lset>
 800ac1c:	61f8      	str	r0, [r7, #28]
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d115      	bne.n	800ac50 <mbedtls_mpi_read_binary+0x90>

    /* Avoid calling `memcpy` with NULL source argument,
     * even if buflen is 0. */
    if( buf != NULL )
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d011      	beq.n	800ac4e <mbedtls_mpi_read_binary+0x8e>
    {
        Xp = (unsigned char*) X->p;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	613b      	str	r3, [r7, #16]
        memcpy( Xp + overhead, buf, buflen );
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	4413      	add	r3, r2
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	68b9      	ldr	r1, [r7, #8]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f00a ff12 	bl	8015a64 <memcpy>

        mpi_bigendian_to_host( X->p, limbs );
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	69b9      	ldr	r1, [r7, #24]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7ff ff87 	bl	800ab5a <mpi_bigendian_to_host>
 800ac4c:	e000      	b.n	800ac50 <mbedtls_mpi_read_binary+0x90>
    }

cleanup:
 800ac4e:	bf00      	nop

    return( ret );
 800ac50:	69fb      	ldr	r3, [r7, #28]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3720      	adds	r7, #32
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <mbedtls_mpi_shift_l>:

/*
 * Left-shift: X <<= count
 */
int mbedtls_mpi_shift_l( mbedtls_mpi *X, size_t count )
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b088      	sub	sp, #32
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	6039      	str	r1, [r7, #0]
    int ret;
    size_t i, v0, t1;
    mbedtls_mpi_uint r0 = 0, r1;
 800ac64:	2300      	movs	r3, #0
 800ac66:	617b      	str	r3, [r7, #20]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count / (biL    );
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	095b      	lsrs	r3, r3, #5
 800ac6c:	613b      	str	r3, [r7, #16]
    t1 = count & (biL - 1);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	f003 031f 	and.w	r3, r3, #31
 800ac74:	60fb      	str	r3, [r7, #12]

    i = mbedtls_mpi_bitlen( X ) + count;
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7ff fe04 	bl	800a884 <mbedtls_mpi_bitlen>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	4413      	add	r3, r2
 800ac82:	61bb      	str	r3, [r7, #24]

    if( X->n * biL < i )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	015b      	lsls	r3, r3, #5
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d912      	bls.n	800acb6 <mbedtls_mpi_shift_l+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	095b      	lsrs	r3, r3, #5
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	f002 021f 	and.w	r2, r2, #31
 800ac9a:	2a00      	cmp	r2, #0
 800ac9c:	bf14      	ite	ne
 800ac9e:	2201      	movne	r2, #1
 800aca0:	2200      	moveq	r2, #0
 800aca2:	b2d2      	uxtb	r2, r2
 800aca4:	4413      	add	r3, r2
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff faed 	bl	800a288 <mbedtls_mpi_grow>
 800acae:	61f8      	str	r0, [r7, #28]
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d16e      	bne.n	800ad94 <mbedtls_mpi_shift_l+0x13a>

    ret = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	61fb      	str	r3, [r7, #28]

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d02f      	beq.n	800ad20 <mbedtls_mpi_shift_l+0xc6>
    {
        for( i = X->n; i > v0; i-- )
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	61bb      	str	r3, [r7, #24]
 800acc6:	e016      	b.n	800acf6 <mbedtls_mpi_shift_l+0x9c>
            X->p[i - 1] = X->p[i - v0 - 1];
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	689a      	ldr	r2, [r3, #8]
 800accc:	69b9      	ldr	r1, [r7, #24]
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	1ac9      	subs	r1, r1, r3
 800acd2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800acd6:	440b      	add	r3, r1
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	441a      	add	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6899      	ldr	r1, [r3, #8]
 800ace0:	69b8      	ldr	r0, [r7, #24]
 800ace2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ace6:	4403      	add	r3, r0
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	440b      	add	r3, r1
 800acec:	6812      	ldr	r2, [r2, #0]
 800acee:	601a      	str	r2, [r3, #0]
        for( i = X->n; i > v0; i-- )
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	61bb      	str	r3, [r7, #24]
 800acf6:	69ba      	ldr	r2, [r7, #24]
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d8e4      	bhi.n	800acc8 <mbedtls_mpi_shift_l+0x6e>

        for( ; i > 0; i-- )
 800acfe:	e00c      	b.n	800ad1a <mbedtls_mpi_shift_l+0xc0>
            X->p[i - 1] = 0;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	689a      	ldr	r2, [r3, #8]
 800ad04:	69b9      	ldr	r1, [r7, #24]
 800ad06:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ad0a:	440b      	add	r3, r1
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
        for( ; i > 0; i-- )
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	3b01      	subs	r3, #1
 800ad18:	61bb      	str	r3, [r7, #24]
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1ef      	bne.n	800ad00 <mbedtls_mpi_shift_l+0xa6>
    }

    /*
     * shift by count % limb_size
     */
    if( t1 > 0 )
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d035      	beq.n	800ad92 <mbedtls_mpi_shift_l+0x138>
    {
        for( i = v0; i < X->n; i++ )
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	61bb      	str	r3, [r7, #24]
 800ad2a:	e02d      	b.n	800ad88 <mbedtls_mpi_shift_l+0x12e>
        {
            r1 = X->p[i] >> (biL - t1);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689a      	ldr	r2, [r3, #8]
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f1c3 0320 	rsb	r3, r3, #32
 800ad3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad42:	60bb      	str	r3, [r7, #8]
            X->p[i] <<= t1;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689a      	ldr	r2, [r3, #8]
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	4413      	add	r3, r2
 800ad4e:	6819      	ldr	r1, [r3, #0]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	689a      	ldr	r2, [r3, #8]
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	fa01 f202 	lsl.w	r2, r1, r2
 800ad60:	601a      	str	r2, [r3, #0]
            X->p[i] |= r0;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	689a      	ldr	r2, [r3, #8]
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	6819      	ldr	r1, [r3, #0]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	689a      	ldr	r2, [r3, #8]
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	009b      	lsls	r3, r3, #2
 800ad76:	4413      	add	r3, r2
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	430a      	orrs	r2, r1
 800ad7c:	601a      	str	r2, [r3, #0]
            r0 = r1;
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	617b      	str	r3, [r7, #20]
        for( i = v0; i < X->n; i++ )
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	3301      	adds	r3, #1
 800ad86:	61bb      	str	r3, [r7, #24]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	69ba      	ldr	r2, [r7, #24]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d3cc      	bcc.n	800ad2c <mbedtls_mpi_shift_l+0xd2>
        }
    }

cleanup:
 800ad92:	bf00      	nop

    return( ret );
 800ad94:	69fb      	ldr	r3, [r7, #28]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3720      	adds	r7, #32
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <mbedtls_mpi_shift_r>:

/*
 * Right-shift: X >>= count
 */
int mbedtls_mpi_shift_r( mbedtls_mpi *X, size_t count )
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b088      	sub	sp, #32
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	6039      	str	r1, [r7, #0]
    size_t i, v0, v1;
    mbedtls_mpi_uint r0 = 0, r1;
 800ada8:	2300      	movs	r3, #0
 800adaa:	61bb      	str	r3, [r7, #24]
    MPI_VALIDATE_RET( X != NULL );

    v0 = count /  biL;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	095b      	lsrs	r3, r3, #5
 800adb0:	617b      	str	r3, [r7, #20]
    v1 = count & (biL - 1);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	f003 031f 	and.w	r3, r3, #31
 800adb8:	613b      	str	r3, [r7, #16]

    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d807      	bhi.n	800add4 <mbedtls_mpi_shift_r+0x36>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d108      	bne.n	800ade0 <mbedtls_mpi_shift_r+0x42>
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d005      	beq.n	800ade0 <mbedtls_mpi_shift_r+0x42>
        return mbedtls_mpi_lset( X, 0 );
 800add4:	2100      	movs	r1, #0
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f7ff fc5e 	bl	800a698 <mbedtls_mpi_lset>
 800addc:	4603      	mov	r3, r0
 800adde:	e075      	b.n	800aecc <mbedtls_mpi_shift_r+0x12e>

    /*
     * shift by count / limb_size
     */
    if( v0 > 0 )
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d02a      	beq.n	800ae3c <mbedtls_mpi_shift_r+0x9e>
    {
        for( i = 0; i < X->n - v0; i++ )
 800ade6:	2300      	movs	r3, #0
 800ade8:	61fb      	str	r3, [r7, #28]
 800adea:	e010      	b.n	800ae0e <mbedtls_mpi_shift_r+0x70>
            X->p[i] = X->p[i + v0];
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	69f9      	ldr	r1, [r7, #28]
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	440b      	add	r3, r1
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	441a      	add	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6899      	ldr	r1, [r3, #8]
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	440b      	add	r3, r1
 800ae04:	6812      	ldr	r2, [r2, #0]
 800ae06:	601a      	str	r2, [r3, #0]
        for( i = 0; i < X->n - v0; i++ )
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	61fb      	str	r3, [r7, #28]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	1ad3      	subs	r3, r2, r3
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d3e7      	bcc.n	800adec <mbedtls_mpi_shift_r+0x4e>

        for( ; i < X->n; i++ )
 800ae1c:	e009      	b.n	800ae32 <mbedtls_mpi_shift_r+0x94>
            X->p[i] = 0;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	689a      	ldr	r2, [r3, #8]
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	2200      	movs	r2, #0
 800ae2a:	601a      	str	r2, [r3, #0]
        for( ; i < X->n; i++ )
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	61fb      	str	r3, [r7, #28]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	69fa      	ldr	r2, [r7, #28]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d3f0      	bcc.n	800ae1e <mbedtls_mpi_shift_r+0x80>
    }

    /*
     * shift by count % limb_size
     */
    if( v1 > 0 )
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d043      	beq.n	800aeca <mbedtls_mpi_shift_r+0x12c>
    {
        for( i = X->n; i > 0; i-- )
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	61fb      	str	r3, [r7, #28]
 800ae48:	e03c      	b.n	800aec4 <mbedtls_mpi_shift_r+0x126>
        {
            r1 = X->p[i - 1] << (biL - v1);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689a      	ldr	r2, [r3, #8]
 800ae4e:	69f9      	ldr	r1, [r7, #28]
 800ae50:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae54:	440b      	add	r3, r1
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	f1c3 0320 	rsb	r3, r3, #32
 800ae62:	fa02 f303 	lsl.w	r3, r2, r3
 800ae66:	60fb      	str	r3, [r7, #12]
            X->p[i - 1] >>= v1;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	69f9      	ldr	r1, [r7, #28]
 800ae6e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae72:	440b      	add	r3, r1
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	4413      	add	r3, r2
 800ae78:	6819      	ldr	r1, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	689a      	ldr	r2, [r3, #8]
 800ae7e:	69f8      	ldr	r0, [r7, #28]
 800ae80:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae84:	4403      	add	r3, r0
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4413      	add	r3, r2
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	fa21 f202 	lsr.w	r2, r1, r2
 800ae90:	601a      	str	r2, [r3, #0]
            X->p[i - 1] |= r0;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	689a      	ldr	r2, [r3, #8]
 800ae96:	69f9      	ldr	r1, [r7, #28]
 800ae98:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ae9c:	440b      	add	r3, r1
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	4413      	add	r3, r2
 800aea2:	6819      	ldr	r1, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	69f8      	ldr	r0, [r7, #28]
 800aeaa:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aeae:	4403      	add	r3, r0
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	69ba      	ldr	r2, [r7, #24]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	601a      	str	r2, [r3, #0]
            r0 = r1;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	61bb      	str	r3, [r7, #24]
        for( i = X->n; i > 0; i-- )
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	61fb      	str	r3, [r7, #28]
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1bf      	bne.n	800ae4a <mbedtls_mpi_shift_r+0xac>
        }
    }

    return( 0 );
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3720      	adds	r7, #32
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <mbedtls_mpi_cmp_abs>:

/*
 * Compare unsigned values
 */
int mbedtls_mpi_cmp_abs( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	e00d      	b.n	800af02 <mbedtls_mpi_cmp_abs+0x2e>
        if( X->p[i - 1] != 0 )
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	689a      	ldr	r2, [r3, #8]
 800aeea:	68f9      	ldr	r1, [r7, #12]
 800aeec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aef0:	440b      	add	r3, r1
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d106      	bne.n	800af0a <mbedtls_mpi_cmp_abs+0x36>
    for( i = X->n; i > 0; i-- )
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3b01      	subs	r3, #1
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1ee      	bne.n	800aee6 <mbedtls_mpi_cmp_abs+0x12>
 800af08:	e000      	b.n	800af0c <mbedtls_mpi_cmp_abs+0x38>
            break;
 800af0a:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	60bb      	str	r3, [r7, #8]
 800af12:	e00d      	b.n	800af30 <mbedtls_mpi_cmp_abs+0x5c>
        if( Y->p[j - 1] != 0 )
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	68b9      	ldr	r1, [r7, #8]
 800af1a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af1e:	440b      	add	r3, r1
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d106      	bne.n	800af38 <mbedtls_mpi_cmp_abs+0x64>
    for( j = Y->n; j > 0; j-- )
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	3b01      	subs	r3, #1
 800af2e:	60bb      	str	r3, [r7, #8]
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d1ee      	bne.n	800af14 <mbedtls_mpi_cmp_abs+0x40>
 800af36:	e000      	b.n	800af3a <mbedtls_mpi_cmp_abs+0x66>
            break;
 800af38:	bf00      	nop

    if( i == 0 && j == 0 )
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d104      	bne.n	800af4a <mbedtls_mpi_cmp_abs+0x76>
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <mbedtls_mpi_cmp_abs+0x76>
        return( 0 );
 800af46:	2300      	movs	r3, #0
 800af48:	e040      	b.n	800afcc <mbedtls_mpi_cmp_abs+0xf8>

    if( i > j ) return(  1 );
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d901      	bls.n	800af56 <mbedtls_mpi_cmp_abs+0x82>
 800af52:	2301      	movs	r3, #1
 800af54:	e03a      	b.n	800afcc <mbedtls_mpi_cmp_abs+0xf8>
    if( j > i ) return( -1 );
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d932      	bls.n	800afc4 <mbedtls_mpi_cmp_abs+0xf0>
 800af5e:	f04f 33ff 	mov.w	r3, #4294967295
 800af62:	e033      	b.n	800afcc <mbedtls_mpi_cmp_abs+0xf8>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689a      	ldr	r2, [r3, #8]
 800af68:	68f9      	ldr	r1, [r7, #12]
 800af6a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af6e:	440b      	add	r3, r1
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	681a      	ldr	r2, [r3, #0]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	6899      	ldr	r1, [r3, #8]
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af80:	4403      	add	r3, r0
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	440b      	add	r3, r1
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d901      	bls.n	800af90 <mbedtls_mpi_cmp_abs+0xbc>
 800af8c:	2301      	movs	r3, #1
 800af8e:	e01d      	b.n	800afcc <mbedtls_mpi_cmp_abs+0xf8>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	68f9      	ldr	r1, [r7, #12]
 800af96:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800af9a:	440b      	add	r3, r1
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	6899      	ldr	r1, [r3, #8]
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800afac:	4403      	add	r3, r0
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	440b      	add	r3, r1
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d202      	bcs.n	800afbe <mbedtls_mpi_cmp_abs+0xea>
 800afb8:	f04f 33ff 	mov.w	r3, #4294967295
 800afbc:	e006      	b.n	800afcc <mbedtls_mpi_cmp_abs+0xf8>
    for( ; i > 0; i-- )
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	60fb      	str	r3, [r7, #12]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1cc      	bne.n	800af64 <mbedtls_mpi_cmp_abs+0x90>
    }

    return( 0 );
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <mbedtls_mpi_cmp_mpi>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_mpi( const mbedtls_mpi *X, const mbedtls_mpi *Y )
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
    size_t i, j;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( Y != NULL );

    for( i = X->n; i > 0; i-- )
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	e00d      	b.n	800b006 <mbedtls_mpi_cmp_mpi+0x2e>
        if( X->p[i - 1] != 0 )
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800aff4:	440b      	add	r3, r1
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d106      	bne.n	800b00e <mbedtls_mpi_cmp_mpi+0x36>
    for( i = X->n; i > 0; i-- )
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3b01      	subs	r3, #1
 800b004:	60fb      	str	r3, [r7, #12]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1ee      	bne.n	800afea <mbedtls_mpi_cmp_mpi+0x12>
 800b00c:	e000      	b.n	800b010 <mbedtls_mpi_cmp_mpi+0x38>
            break;
 800b00e:	bf00      	nop

    for( j = Y->n; j > 0; j-- )
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	60bb      	str	r3, [r7, #8]
 800b016:	e00d      	b.n	800b034 <mbedtls_mpi_cmp_mpi+0x5c>
        if( Y->p[j - 1] != 0 )
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	689a      	ldr	r2, [r3, #8]
 800b01c:	68b9      	ldr	r1, [r7, #8]
 800b01e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b022:	440b      	add	r3, r1
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	4413      	add	r3, r2
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <mbedtls_mpi_cmp_mpi+0x64>
    for( j = Y->n; j > 0; j-- )
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	3b01      	subs	r3, #1
 800b032:	60bb      	str	r3, [r7, #8]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1ee      	bne.n	800b018 <mbedtls_mpi_cmp_mpi+0x40>
 800b03a:	e000      	b.n	800b03e <mbedtls_mpi_cmp_mpi+0x66>
            break;
 800b03c:	bf00      	nop

    if( i == 0 && j == 0 )
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d104      	bne.n	800b04e <mbedtls_mpi_cmp_mpi+0x76>
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <mbedtls_mpi_cmp_mpi+0x76>
        return( 0 );
 800b04a:	2300      	movs	r3, #0
 800b04c:	e059      	b.n	800b102 <mbedtls_mpi_cmp_mpi+0x12a>

    if( i > j ) return(  X->s );
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	429a      	cmp	r2, r3
 800b054:	d902      	bls.n	800b05c <mbedtls_mpi_cmp_mpi+0x84>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	e052      	b.n	800b102 <mbedtls_mpi_cmp_mpi+0x12a>
    if( j > i ) return( -Y->s );
 800b05c:	68ba      	ldr	r2, [r7, #8]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	429a      	cmp	r2, r3
 800b062:	d903      	bls.n	800b06c <mbedtls_mpi_cmp_mpi+0x94>
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	425b      	negs	r3, r3
 800b06a:	e04a      	b.n	800b102 <mbedtls_mpi_cmp_mpi+0x12a>

    if( X->s > 0 && Y->s < 0 ) return(  1 );
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	dd05      	ble.n	800b080 <mbedtls_mpi_cmp_mpi+0xa8>
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	da01      	bge.n	800b080 <mbedtls_mpi_cmp_mpi+0xa8>
 800b07c:	2301      	movs	r3, #1
 800b07e:	e040      	b.n	800b102 <mbedtls_mpi_cmp_mpi+0x12a>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	dd38      	ble.n	800b0fa <mbedtls_mpi_cmp_mpi+0x122>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	da34      	bge.n	800b0fa <mbedtls_mpi_cmp_mpi+0x122>
 800b090:	f04f 33ff 	mov.w	r3, #4294967295
 800b094:	e035      	b.n	800b102 <mbedtls_mpi_cmp_mpi+0x12a>

    for( ; i > 0; i-- )
    {
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	689a      	ldr	r2, [r3, #8]
 800b09a:	68f9      	ldr	r1, [r7, #12]
 800b09c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b0a0:	440b      	add	r3, r1
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	6899      	ldr	r1, [r3, #8]
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b0b2:	4403      	add	r3, r0
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	440b      	add	r3, r1
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d902      	bls.n	800b0c4 <mbedtls_mpi_cmp_mpi+0xec>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	e01e      	b.n	800b102 <mbedtls_mpi_cmp_mpi+0x12a>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	689a      	ldr	r2, [r3, #8]
 800b0c8:	68f9      	ldr	r1, [r7, #12]
 800b0ca:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b0ce:	440b      	add	r3, r1
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	6899      	ldr	r1, [r3, #8]
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b0e0:	4403      	add	r3, r0
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	440b      	add	r3, r1
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d203      	bcs.n	800b0f4 <mbedtls_mpi_cmp_mpi+0x11c>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	425b      	negs	r3, r3
 800b0f2:	e006      	b.n	800b102 <mbedtls_mpi_cmp_mpi+0x12a>
    for( ; i > 0; i-- )
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	60fb      	str	r3, [r7, #12]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1ca      	bne.n	800b096 <mbedtls_mpi_cmp_mpi+0xbe>
    }

    return( 0 );
 800b100:	2300      	movs	r3, #0
}
 800b102:	4618      	mov	r0, r3
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <mbedtls_mpi_cmp_int>:

/*
 * Compare signed values
 */
int mbedtls_mpi_cmp_int( const mbedtls_mpi *X, mbedtls_mpi_sint z )
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b086      	sub	sp, #24
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	6039      	str	r1, [r7, #0]
    mbedtls_mpi Y;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );

    *p  = ( z < 0 ) ? -z : z;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	bfb8      	it	lt
 800b11e:	425b      	neglt	r3, r3
 800b120:	60bb      	str	r3, [r7, #8]
    Y.s = ( z < 0 ) ? -1 : 1;
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	da02      	bge.n	800b12e <mbedtls_mpi_cmp_int+0x20>
 800b128:	f04f 33ff 	mov.w	r3, #4294967295
 800b12c:	e000      	b.n	800b130 <mbedtls_mpi_cmp_int+0x22>
 800b12e:	2301      	movs	r3, #1
 800b130:	60fb      	str	r3, [r7, #12]
    Y.n = 1;
 800b132:	2301      	movs	r3, #1
 800b134:	613b      	str	r3, [r7, #16]
    Y.p = p;
 800b136:	f107 0308 	add.w	r3, r7, #8
 800b13a:	617b      	str	r3, [r7, #20]

    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
 800b13c:	f107 030c 	add.w	r3, r7, #12
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7ff ff48 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800b148:	4603      	mov	r3, r0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <mbedtls_mpi_add_abs>:

/*
 * Unsigned addition: X = |A| + |B|  (HAC 14.7)
 */
int mbedtls_mpi_add_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b08c      	sub	sp, #48	@ 0x30
 800b156:	af00      	add	r7, sp, #0
 800b158:	60f8      	str	r0, [r7, #12]
 800b15a:	60b9      	str	r1, [r7, #8]
 800b15c:	607a      	str	r2, [r7, #4]
    mbedtls_mpi_uint *o, *p, c, tmp;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( X == B )
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	429a      	cmp	r2, r3
 800b164:	d105      	bne.n	800b172 <mbedtls_mpi_add_abs+0x20>
    {
        const mbedtls_mpi *T = A; A = X; B = T;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	617b      	str	r3, [r7, #20]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	60bb      	str	r3, [r7, #8]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	429a      	cmp	r2, r3
 800b178:	d008      	beq.n	800b18c <mbedtls_mpi_add_abs+0x3a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800b17a:	68b9      	ldr	r1, [r7, #8]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f7ff f92c 	bl	800a3da <mbedtls_mpi_copy>
 800b182:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b186:	2b00      	cmp	r3, #0
 800b188:	f040 808d 	bne.w	800b2a6 <mbedtls_mpi_add_abs+0x154>

    /*
     * X should always be positive as a result of unsigned additions.
     */
    X->s = 1;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2201      	movs	r2, #1
 800b190:	601a      	str	r2, [r3, #0]

    for( j = B->n; j > 0; j-- )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	627b      	str	r3, [r7, #36]	@ 0x24
 800b198:	e00d      	b.n	800b1b6 <mbedtls_mpi_add_abs+0x64>
        if( B->p[j - 1] != 0 )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	689a      	ldr	r2, [r3, #8]
 800b19e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1a0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b1a4:	440b      	add	r3, r1
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d106      	bne.n	800b1be <mbedtls_mpi_add_abs+0x6c>
    for( j = B->n; j > 0; j-- )
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1ee      	bne.n	800b19a <mbedtls_mpi_add_abs+0x48>
 800b1bc:	e000      	b.n	800b1c0 <mbedtls_mpi_add_abs+0x6e>
            break;
 800b1be:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
 800b1c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff f860 	bl	800a288 <mbedtls_mpi_grow>
 800b1c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d16a      	bne.n	800b2a6 <mbedtls_mpi_add_abs+0x154>

    o = B->p; p = X->p; c = 0;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	623b      	str	r3, [r7, #32]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	61fb      	str	r3, [r7, #28]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	61bb      	str	r3, [r7, #24]

    /*
     * tmp is used because it might happen that p == o
     */
    for( i = 0; i < j; i++, o++, p++ )
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1e4:	e02c      	b.n	800b240 <mbedtls_mpi_add_abs+0xee>
    {
        tmp= *o;
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	613b      	str	r3, [r7, #16]
        *p +=  c; c  = ( *p <  c );
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	441a      	add	r2, r3
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	601a      	str	r2, [r3, #0]
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	bf8c      	ite	hi
 800b202:	2301      	movhi	r3, #1
 800b204:	2300      	movls	r3, #0
 800b206:	b2db      	uxtb	r3, r3
 800b208:	61bb      	str	r3, [r7, #24]
        *p += tmp; c += ( *p < tmp );
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	441a      	add	r2, r3
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	bf8c      	ite	hi
 800b220:	2301      	movhi	r3, #1
 800b222:	2300      	movls	r3, #0
 800b224:	b2db      	uxtb	r3, r3
 800b226:	461a      	mov	r2, r3
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	4413      	add	r3, r2
 800b22c:	61bb      	str	r3, [r7, #24]
    for( i = 0; i < j; i++, o++, p++ )
 800b22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b230:	3301      	adds	r3, #1
 800b232:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b234:	6a3b      	ldr	r3, [r7, #32]
 800b236:	3304      	adds	r3, #4
 800b238:	623b      	str	r3, [r7, #32]
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	3304      	adds	r3, #4
 800b23e:	61fb      	str	r3, [r7, #28]
 800b240:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b244:	429a      	cmp	r2, r3
 800b246:	d3ce      	bcc.n	800b1e6 <mbedtls_mpi_add_abs+0x94>
    }

    while( c != 0 )
 800b248:	e029      	b.n	800b29e <mbedtls_mpi_add_abs+0x14c>
    {
        if( i >= X->n )
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b250:	429a      	cmp	r2, r3
 800b252:	d30f      	bcc.n	800b274 <mbedtls_mpi_add_abs+0x122>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
 800b254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b256:	3301      	adds	r3, #1
 800b258:	4619      	mov	r1, r3
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f7ff f814 	bl	800a288 <mbedtls_mpi_grow>
 800b260:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d11e      	bne.n	800b2a6 <mbedtls_mpi_add_abs+0x154>
            p = X->p + i;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	689a      	ldr	r2, [r3, #8]
 800b26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4413      	add	r3, r2
 800b272:	61fb      	str	r3, [r7, #28]
        }

        *p += c; c = ( *p < c ); i++; p++;
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	441a      	add	r2, r3
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	429a      	cmp	r2, r3
 800b288:	bf8c      	ite	hi
 800b28a:	2301      	movhi	r3, #1
 800b28c:	2300      	movls	r3, #0
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	61bb      	str	r3, [r7, #24]
 800b292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b294:	3301      	adds	r3, #1
 800b296:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	3304      	adds	r3, #4
 800b29c:	61fb      	str	r3, [r7, #28]
    while( c != 0 )
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d1d2      	bne.n	800b24a <mbedtls_mpi_add_abs+0xf8>
    }

cleanup:
 800b2a4:	bf00      	nop

    return( ret );
 800b2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3730      	adds	r7, #48	@ 0x30
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <mpi_sub_hlp>:

/*
 * Helper for mbedtls_mpi subtraction
 */
static void mpi_sub_hlp( size_t n, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d )
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b089      	sub	sp, #36	@ 0x24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
 800b2bc:	2300      	movs	r3, #0
 800b2be:	61bb      	str	r3, [r7, #24]
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	e02b      	b.n	800b31e <mpi_sub_hlp+0x6e>
    {
        z = ( *d <  c );     *d -=  c;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69ba      	ldr	r2, [r7, #24]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	bf8c      	ite	hi
 800b2d0:	2301      	movhi	r3, #1
 800b2d2:	2300      	movls	r3, #0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	617b      	str	r3, [r7, #20]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	1ad2      	subs	r2, r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	601a      	str	r2, [r3, #0]
        c = ( *d < *s ) + z; *d -= *s;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	bf34      	ite	cc
 800b2f0:	2301      	movcc	r3, #1
 800b2f2:	2300      	movcs	r3, #0
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	61bb      	str	r3, [r7, #24]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	1ad2      	subs	r2, r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	601a      	str	r2, [r3, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	3301      	adds	r3, #1
 800b310:	61fb      	str	r3, [r7, #28]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	3304      	adds	r3, #4
 800b316:	60bb      	str	r3, [r7, #8]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3304      	adds	r3, #4
 800b31c:	607b      	str	r3, [r7, #4]
 800b31e:	69fa      	ldr	r2, [r7, #28]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	429a      	cmp	r2, r3
 800b324:	d3cf      	bcc.n	800b2c6 <mpi_sub_hlp+0x16>
    }

    while( c != 0 )
 800b326:	e013      	b.n	800b350 <mpi_sub_hlp+0xa0>
    {
        z = ( *d < c ); *d -= c;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	69ba      	ldr	r2, [r7, #24]
 800b32e:	429a      	cmp	r2, r3
 800b330:	bf8c      	ite	hi
 800b332:	2301      	movhi	r3, #1
 800b334:	2300      	movls	r3, #0
 800b336:	b2db      	uxtb	r3, r3
 800b338:	617b      	str	r3, [r7, #20]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	1ad2      	subs	r2, r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	601a      	str	r2, [r3, #0]
        c = z; d++;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	61bb      	str	r3, [r7, #24]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	3304      	adds	r3, #4
 800b34e:	607b      	str	r3, [r7, #4]
    while( c != 0 )
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1e8      	bne.n	800b328 <mpi_sub_hlp+0x78>
    }
}
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	3724      	adds	r7, #36	@ 0x24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <mbedtls_mpi_sub_abs>:

/*
 * Unsigned subtraction: X = |A| - |B|  (HAC 14.9)
 */
int mbedtls_mpi_sub_abs( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b08a      	sub	sp, #40	@ 0x28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
    size_t n;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800b370:	6879      	ldr	r1, [r7, #4]
 800b372:	68b8      	ldr	r0, [r7, #8]
 800b374:	f7ff fdae 	bl	800aed4 <mbedtls_mpi_cmp_abs>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	da02      	bge.n	800b384 <mbedtls_mpi_sub_abs+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800b37e:	f06f 0309 	mvn.w	r3, #9
 800b382:	e04b      	b.n	800b41c <mbedtls_mpi_sub_abs+0xb8>

    mbedtls_mpi_init( &TB );
 800b384:	f107 0314 	add.w	r3, r7, #20
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe ff44 	bl	800a216 <mbedtls_mpi_init>

    if( X == B )
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	429a      	cmp	r2, r3
 800b394:	d10c      	bne.n	800b3b0 <mbedtls_mpi_sub_abs+0x4c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800b396:	f107 0314 	add.w	r3, r7, #20
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7ff f81c 	bl	800a3da <mbedtls_mpi_copy>
 800b3a2:	6278      	str	r0, [r7, #36]	@ 0x24
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d132      	bne.n	800b410 <mbedtls_mpi_sub_abs+0xac>
        B = &TB;
 800b3aa:	f107 0314 	add.w	r3, r7, #20
 800b3ae:	607b      	str	r3, [r7, #4]
    }

    if( X != A )
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d007      	beq.n	800b3c8 <mbedtls_mpi_sub_abs+0x64>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
 800b3b8:	68b9      	ldr	r1, [r7, #8]
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f7ff f80d 	bl	800a3da <mbedtls_mpi_copy>
 800b3c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d123      	bne.n	800b410 <mbedtls_mpi_sub_abs+0xac>

    /*
     * X should always be positive as a result of unsigned subtractions.
     */
    X->s = 1;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	601a      	str	r2, [r3, #0]

    ret = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	627b      	str	r3, [r7, #36]	@ 0x24

    for( n = B->n; n > 0; n-- )
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	623b      	str	r3, [r7, #32]
 800b3d8:	e00d      	b.n	800b3f6 <mbedtls_mpi_sub_abs+0x92>
        if( B->p[n - 1] != 0 )
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	689a      	ldr	r2, [r3, #8]
 800b3de:	6a39      	ldr	r1, [r7, #32]
 800b3e0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b3e4:	440b      	add	r3, r1
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d106      	bne.n	800b3fe <mbedtls_mpi_sub_abs+0x9a>
    for( n = B->n; n > 0; n-- )
 800b3f0:	6a3b      	ldr	r3, [r7, #32]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	623b      	str	r3, [r7, #32]
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1ee      	bne.n	800b3da <mbedtls_mpi_sub_abs+0x76>
 800b3fc:	e000      	b.n	800b400 <mbedtls_mpi_sub_abs+0x9c>
            break;
 800b3fe:	bf00      	nop

    mpi_sub_hlp( n, B->p, X->p );
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6899      	ldr	r1, [r3, #8]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	461a      	mov	r2, r3
 800b40a:	6a38      	ldr	r0, [r7, #32]
 800b40c:	f7ff ff50 	bl	800b2b0 <mpi_sub_hlp>

cleanup:

    mbedtls_mpi_free( &TB );
 800b410:	f107 0314 	add.w	r3, r7, #20
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe ff11 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800b41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3728      	adds	r7, #40	@ 0x28
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <mbedtls_mpi_add_mpi>:

/*
 * Signed addition: X = A + B
 */
int mbedtls_mpi_add_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	60b9      	str	r1, [r7, #8]
 800b42e:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	613b      	str	r3, [r7, #16]
    if( A->s * B->s < 0 )
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	6812      	ldr	r2, [r2, #0]
 800b43e:	fb02 f303 	mul.w	r3, r2, r3
 800b442:	2b00      	cmp	r3, #0
 800b444:	da21      	bge.n	800b48a <mbedtls_mpi_add_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	68b8      	ldr	r0, [r7, #8]
 800b44a:	f7ff fd43 	bl	800aed4 <mbedtls_mpi_cmp_abs>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	db0c      	blt.n	800b46e <mbedtls_mpi_add_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f7ff ff83 	bl	800b364 <mbedtls_mpi_sub_abs>
 800b45e:	6178      	str	r0, [r7, #20]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d11d      	bne.n	800b4a2 <mbedtls_mpi_add_mpi+0x7e>
            X->s =  s;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	601a      	str	r2, [r3, #0]
 800b46c:	e019      	b.n	800b4a2 <mbedtls_mpi_add_mpi+0x7e>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	6879      	ldr	r1, [r7, #4]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f7ff ff76 	bl	800b364 <mbedtls_mpi_sub_abs>
 800b478:	6178      	str	r0, [r7, #20]
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d110      	bne.n	800b4a2 <mbedtls_mpi_add_mpi+0x7e>
            X->s = -s;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	425a      	negs	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	601a      	str	r2, [r3, #0]
 800b488:	e00b      	b.n	800b4a2 <mbedtls_mpi_add_mpi+0x7e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	68b9      	ldr	r1, [r7, #8]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7ff fe5f 	bl	800b152 <mbedtls_mpi_add_abs>
 800b494:	6178      	str	r0, [r7, #20]
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d102      	bne.n	800b4a2 <mbedtls_mpi_add_mpi+0x7e>
        X->s = s;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 800b4a2:	697b      	ldr	r3, [r7, #20]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <mbedtls_mpi_sub_mpi>:

/*
 * Signed subtraction: X = A - B
 */
int mbedtls_mpi_sub_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
    int ret, s;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    s = A->s;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	613b      	str	r3, [r7, #16]
    if( A->s * B->s > 0 )
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	6812      	ldr	r2, [r2, #0]
 800b4c6:	fb02 f303 	mul.w	r3, r2, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	dd21      	ble.n	800b512 <mbedtls_mpi_sub_mpi+0x66>
    {
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
 800b4ce:	6879      	ldr	r1, [r7, #4]
 800b4d0:	68b8      	ldr	r0, [r7, #8]
 800b4d2:	f7ff fcff 	bl	800aed4 <mbedtls_mpi_cmp_abs>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	db0c      	blt.n	800b4f6 <mbedtls_mpi_sub_mpi+0x4a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	68b9      	ldr	r1, [r7, #8]
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f7ff ff3f 	bl	800b364 <mbedtls_mpi_sub_abs>
 800b4e6:	6178      	str	r0, [r7, #20]
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d11d      	bne.n	800b52a <mbedtls_mpi_sub_mpi+0x7e>
            X->s =  s;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	601a      	str	r2, [r3, #0]
 800b4f4:	e019      	b.n	800b52a <mbedtls_mpi_sub_mpi+0x7e>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f7ff ff32 	bl	800b364 <mbedtls_mpi_sub_abs>
 800b500:	6178      	str	r0, [r7, #20]
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d110      	bne.n	800b52a <mbedtls_mpi_sub_mpi+0x7e>
            X->s = -s;
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	425a      	negs	r2, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	e00b      	b.n	800b52a <mbedtls_mpi_sub_mpi+0x7e>
        }
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	68b9      	ldr	r1, [r7, #8]
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f7ff fe1b 	bl	800b152 <mbedtls_mpi_add_abs>
 800b51c:	6178      	str	r0, [r7, #20]
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d102      	bne.n	800b52a <mbedtls_mpi_sub_mpi+0x7e>
        X->s = s;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	601a      	str	r2, [r3, #0]
    }

cleanup:

    return( ret );
 800b52a:	697b      	ldr	r3, [r7, #20]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3718      	adds	r7, #24
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <mbedtls_mpi_add_int>:

/*
 * Signed addition: X = A + b
 */
int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b088      	sub	sp, #32
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	bfb8      	it	lt
 800b546:	425b      	neglt	r3, r3
 800b548:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	da02      	bge.n	800b556 <mbedtls_mpi_add_int+0x22>
 800b550:	f04f 33ff 	mov.w	r3, #4294967295
 800b554:	e000      	b.n	800b558 <mbedtls_mpi_add_int+0x24>
 800b556:	2301      	movs	r3, #1
 800b558:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800b55a:	2301      	movs	r3, #1
 800b55c:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800b55e:	f107 0310 	add.w	r3, r7, #16
 800b562:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_add_mpi( X, A, &_B ) );
 800b564:	f107 0314 	add.w	r3, r7, #20
 800b568:	461a      	mov	r2, r3
 800b56a:	68b9      	ldr	r1, [r7, #8]
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f7ff ff59 	bl	800b424 <mbedtls_mpi_add_mpi>
 800b572:	4603      	mov	r3, r0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3720      	adds	r7, #32
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <mbedtls_mpi_sub_int>:

/*
 * Signed subtraction: X = A - b
 */
int mbedtls_mpi_sub_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b088      	sub	sp, #32
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    p[0] = ( b < 0 ) ? -b : b;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	bfb8      	it	lt
 800b58e:	425b      	neglt	r3, r3
 800b590:	613b      	str	r3, [r7, #16]
    _B.s = ( b < 0 ) ? -1 : 1;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	da02      	bge.n	800b59e <mbedtls_mpi_sub_int+0x22>
 800b598:	f04f 33ff 	mov.w	r3, #4294967295
 800b59c:	e000      	b.n	800b5a0 <mbedtls_mpi_sub_int+0x24>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800b5a6:	f107 0310 	add.w	r3, r7, #16
 800b5aa:	61fb      	str	r3, [r7, #28]

    return( mbedtls_mpi_sub_mpi( X, A, &_B ) );
 800b5ac:	f107 0314 	add.w	r3, r7, #20
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	68b9      	ldr	r1, [r7, #8]
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f7ff ff79 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800b5ba:	4603      	mov	r3, r0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3720      	adds	r7, #32
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b09f      	sub	sp, #124	@ 0x7c
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	603b      	str	r3, [r7, #0]
    mbedtls_mpi_uint c = 0, t = 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	677b      	str	r3, [r7, #116]	@ 0x74
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	673b      	str	r3, [r7, #112]	@ 0x70
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
 800b5da:	f000 bf49 	b.w	800c470 <mpi_mul_hlp+0xeac>
    {
        MULADDC_INIT
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	0c1b      	lsrs	r3, r3, #16
 800b5e8:	62bb      	str	r3, [r7, #40]	@ 0x28
        MULADDC_CORE   MULADDC_CORE
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	0c1b      	lsrs	r3, r3, #16
 800b5f8:	623b      	str	r3, [r7, #32]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	60bb      	str	r3, [r7, #8]
 800b600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b604:	fb02 f303 	mul.w	r3, r2, r3
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b60e:	fb02 f303 	mul.w	r3, r2, r3
 800b612:	61bb      	str	r3, [r7, #24]
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b618:	fb02 f303 	mul.w	r3, r2, r3
 800b61c:	617b      	str	r3, [r7, #20]
 800b61e:	6a3b      	ldr	r3, [r7, #32]
 800b620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b622:	fb02 f303 	mul.w	r3, r2, r3
 800b626:	613b      	str	r3, [r7, #16]
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	0c1b      	lsrs	r3, r3, #16
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	4413      	add	r3, r2
 800b630:	613b      	str	r3, [r7, #16]
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	0c1b      	lsrs	r3, r3, #16
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	4413      	add	r3, r2
 800b63a:	613b      	str	r3, [r7, #16]
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	041b      	lsls	r3, r3, #16
 800b640:	61fb      	str	r3, [r7, #28]
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	041b      	lsls	r3, r3, #16
 800b646:	617b      	str	r3, [r7, #20]
 800b648:	69ba      	ldr	r2, [r7, #24]
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	4413      	add	r3, r2
 800b64e:	61bb      	str	r3, [r7, #24]
 800b650:	69ba      	ldr	r2, [r7, #24]
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	429a      	cmp	r2, r3
 800b656:	bf34      	ite	cc
 800b658:	2301      	movcc	r3, #1
 800b65a:	2300      	movcs	r3, #0
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	461a      	mov	r2, r3
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	4413      	add	r3, r2
 800b664:	613b      	str	r3, [r7, #16]
 800b666:	69ba      	ldr	r2, [r7, #24]
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	4413      	add	r3, r2
 800b66c:	61bb      	str	r3, [r7, #24]
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	429a      	cmp	r2, r3
 800b674:	bf34      	ite	cc
 800b676:	2301      	movcc	r3, #1
 800b678:	2300      	movcs	r3, #0
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	461a      	mov	r2, r3
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	4413      	add	r3, r2
 800b682:	613b      	str	r3, [r7, #16]
 800b684:	69ba      	ldr	r2, [r7, #24]
 800b686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b688:	4413      	add	r3, r2
 800b68a:	61bb      	str	r3, [r7, #24]
 800b68c:	69ba      	ldr	r2, [r7, #24]
 800b68e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b690:	429a      	cmp	r2, r3
 800b692:	bf34      	ite	cc
 800b694:	2301      	movcc	r3, #1
 800b696:	2300      	movcs	r3, #0
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	461a      	mov	r2, r3
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	4413      	add	r3, r2
 800b6a0:	613b      	str	r3, [r7, #16]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	69ba      	ldr	r2, [r7, #24]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	61bb      	str	r3, [r7, #24]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	69ba      	ldr	r2, [r7, #24]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	bf34      	ite	cc
 800b6b6:	2301      	movcc	r3, #1
 800b6b8:	2300      	movcs	r3, #0
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	461a      	mov	r2, r3
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	613b      	str	r3, [r7, #16]
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	677b      	str	r3, [r7, #116]	@ 0x74
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	1d1a      	adds	r2, r3, #4
 800b6cc:	607a      	str	r2, [r7, #4]
 800b6ce:	69ba      	ldr	r2, [r7, #24]
 800b6d0:	601a      	str	r2, [r3, #0]
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	0c1b      	lsrs	r3, r3, #16
 800b6e0:	623b      	str	r3, [r7, #32]
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	60bb      	str	r3, [r7, #8]
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6ec:	fb02 f303 	mul.w	r3, r2, r3
 800b6f0:	61fb      	str	r3, [r7, #28]
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b6f6:	fb02 f303 	mul.w	r3, r2, r3
 800b6fa:	61bb      	str	r3, [r7, #24]
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b700:	fb02 f303 	mul.w	r3, r2, r3
 800b704:	617b      	str	r3, [r7, #20]
 800b706:	6a3b      	ldr	r3, [r7, #32]
 800b708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b70a:	fb02 f303 	mul.w	r3, r2, r3
 800b70e:	613b      	str	r3, [r7, #16]
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	0c1b      	lsrs	r3, r3, #16
 800b714:	693a      	ldr	r2, [r7, #16]
 800b716:	4413      	add	r3, r2
 800b718:	613b      	str	r3, [r7, #16]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	0c1b      	lsrs	r3, r3, #16
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4413      	add	r3, r2
 800b722:	613b      	str	r3, [r7, #16]
 800b724:	69fb      	ldr	r3, [r7, #28]
 800b726:	041b      	lsls	r3, r3, #16
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	041b      	lsls	r3, r3, #16
 800b72e:	617b      	str	r3, [r7, #20]
 800b730:	69ba      	ldr	r2, [r7, #24]
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	4413      	add	r3, r2
 800b736:	61bb      	str	r3, [r7, #24]
 800b738:	69ba      	ldr	r2, [r7, #24]
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	bf34      	ite	cc
 800b740:	2301      	movcc	r3, #1
 800b742:	2300      	movcs	r3, #0
 800b744:	b2db      	uxtb	r3, r3
 800b746:	461a      	mov	r2, r3
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	4413      	add	r3, r2
 800b74c:	613b      	str	r3, [r7, #16]
 800b74e:	69ba      	ldr	r2, [r7, #24]
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	4413      	add	r3, r2
 800b754:	61bb      	str	r3, [r7, #24]
 800b756:	69ba      	ldr	r2, [r7, #24]
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	bf34      	ite	cc
 800b75e:	2301      	movcc	r3, #1
 800b760:	2300      	movcs	r3, #0
 800b762:	b2db      	uxtb	r3, r3
 800b764:	461a      	mov	r2, r3
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	4413      	add	r3, r2
 800b76a:	613b      	str	r3, [r7, #16]
 800b76c:	69ba      	ldr	r2, [r7, #24]
 800b76e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b770:	4413      	add	r3, r2
 800b772:	61bb      	str	r3, [r7, #24]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b778:	429a      	cmp	r2, r3
 800b77a:	bf34      	ite	cc
 800b77c:	2301      	movcc	r3, #1
 800b77e:	2300      	movcs	r3, #0
 800b780:	b2db      	uxtb	r3, r3
 800b782:	461a      	mov	r2, r3
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	4413      	add	r3, r2
 800b788:	613b      	str	r3, [r7, #16]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	69ba      	ldr	r2, [r7, #24]
 800b790:	4413      	add	r3, r2
 800b792:	61bb      	str	r3, [r7, #24]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	69ba      	ldr	r2, [r7, #24]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	bf34      	ite	cc
 800b79e:	2301      	movcc	r3, #1
 800b7a0:	2300      	movcs	r3, #0
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	613b      	str	r3, [r7, #16]
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	677b      	str	r3, [r7, #116]	@ 0x74
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	1d1a      	adds	r2, r3, #4
 800b7b4:	607a      	str	r2, [r7, #4]
 800b7b6:	69ba      	ldr	r2, [r7, #24]
 800b7b8:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	0c1b      	lsrs	r3, r3, #16
 800b7c8:	623b      	str	r3, [r7, #32]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	60bb      	str	r3, [r7, #8]
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7d4:	fb02 f303 	mul.w	r3, r2, r3
 800b7d8:	61fb      	str	r3, [r7, #28]
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7de:	fb02 f303 	mul.w	r3, r2, r3
 800b7e2:	61bb      	str	r3, [r7, #24]
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7e8:	fb02 f303 	mul.w	r3, r2, r3
 800b7ec:	617b      	str	r3, [r7, #20]
 800b7ee:	6a3b      	ldr	r3, [r7, #32]
 800b7f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7f2:	fb02 f303 	mul.w	r3, r2, r3
 800b7f6:	613b      	str	r3, [r7, #16]
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	0c1b      	lsrs	r3, r3, #16
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	4413      	add	r3, r2
 800b800:	613b      	str	r3, [r7, #16]
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	0c1b      	lsrs	r3, r3, #16
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	4413      	add	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	041b      	lsls	r3, r3, #16
 800b810:	61fb      	str	r3, [r7, #28]
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	041b      	lsls	r3, r3, #16
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	4413      	add	r3, r2
 800b81e:	61bb      	str	r3, [r7, #24]
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	429a      	cmp	r2, r3
 800b826:	bf34      	ite	cc
 800b828:	2301      	movcc	r3, #1
 800b82a:	2300      	movcs	r3, #0
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	461a      	mov	r2, r3
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	4413      	add	r3, r2
 800b834:	613b      	str	r3, [r7, #16]
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	4413      	add	r3, r2
 800b83c:	61bb      	str	r3, [r7, #24]
 800b83e:	69ba      	ldr	r2, [r7, #24]
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	429a      	cmp	r2, r3
 800b844:	bf34      	ite	cc
 800b846:	2301      	movcc	r3, #1
 800b848:	2300      	movcs	r3, #0
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	461a      	mov	r2, r3
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	4413      	add	r3, r2
 800b852:	613b      	str	r3, [r7, #16]
 800b854:	69ba      	ldr	r2, [r7, #24]
 800b856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b858:	4413      	add	r3, r2
 800b85a:	61bb      	str	r3, [r7, #24]
 800b85c:	69ba      	ldr	r2, [r7, #24]
 800b85e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b860:	429a      	cmp	r2, r3
 800b862:	bf34      	ite	cc
 800b864:	2301      	movcc	r3, #1
 800b866:	2300      	movcs	r3, #0
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	461a      	mov	r2, r3
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	4413      	add	r3, r2
 800b870:	613b      	str	r3, [r7, #16]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	69ba      	ldr	r2, [r7, #24]
 800b878:	4413      	add	r3, r2
 800b87a:	61bb      	str	r3, [r7, #24]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	69ba      	ldr	r2, [r7, #24]
 800b882:	429a      	cmp	r2, r3
 800b884:	bf34      	ite	cc
 800b886:	2301      	movcc	r3, #1
 800b888:	2300      	movcs	r3, #0
 800b88a:	b2db      	uxtb	r3, r3
 800b88c:	461a      	mov	r2, r3
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	4413      	add	r3, r2
 800b892:	613b      	str	r3, [r7, #16]
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	677b      	str	r3, [r7, #116]	@ 0x74
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	1d1a      	adds	r2, r3, #4
 800b89c:	607a      	str	r2, [r7, #4]
 800b89e:	69ba      	ldr	r2, [r7, #24]
 800b8a0:	601a      	str	r2, [r3, #0]
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	0c1b      	lsrs	r3, r3, #16
 800b8b0:	623b      	str	r3, [r7, #32]
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	60bb      	str	r3, [r7, #8]
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8bc:	fb02 f303 	mul.w	r3, r2, r3
 800b8c0:	61fb      	str	r3, [r7, #28]
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8c6:	fb02 f303 	mul.w	r3, r2, r3
 800b8ca:	61bb      	str	r3, [r7, #24]
 800b8cc:	6a3b      	ldr	r3, [r7, #32]
 800b8ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8d0:	fb02 f303 	mul.w	r3, r2, r3
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8da:	fb02 f303 	mul.w	r3, r2, r3
 800b8de:	613b      	str	r3, [r7, #16]
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	0c1b      	lsrs	r3, r3, #16
 800b8e4:	693a      	ldr	r2, [r7, #16]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	613b      	str	r3, [r7, #16]
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	0c1b      	lsrs	r3, r3, #16
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	613b      	str	r3, [r7, #16]
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	041b      	lsls	r3, r3, #16
 800b8f8:	61fb      	str	r3, [r7, #28]
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	041b      	lsls	r3, r3, #16
 800b8fe:	617b      	str	r3, [r7, #20]
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	4413      	add	r3, r2
 800b906:	61bb      	str	r3, [r7, #24]
 800b908:	69ba      	ldr	r2, [r7, #24]
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	bf34      	ite	cc
 800b910:	2301      	movcc	r3, #1
 800b912:	2300      	movcs	r3, #0
 800b914:	b2db      	uxtb	r3, r3
 800b916:	461a      	mov	r2, r3
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	4413      	add	r3, r2
 800b91c:	613b      	str	r3, [r7, #16]
 800b91e:	69ba      	ldr	r2, [r7, #24]
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	4413      	add	r3, r2
 800b924:	61bb      	str	r3, [r7, #24]
 800b926:	69ba      	ldr	r2, [r7, #24]
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	bf34      	ite	cc
 800b92e:	2301      	movcc	r3, #1
 800b930:	2300      	movcs	r3, #0
 800b932:	b2db      	uxtb	r3, r3
 800b934:	461a      	mov	r2, r3
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	4413      	add	r3, r2
 800b93a:	613b      	str	r3, [r7, #16]
 800b93c:	69ba      	ldr	r2, [r7, #24]
 800b93e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b940:	4413      	add	r3, r2
 800b942:	61bb      	str	r3, [r7, #24]
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b948:	429a      	cmp	r2, r3
 800b94a:	bf34      	ite	cc
 800b94c:	2301      	movcc	r3, #1
 800b94e:	2300      	movcs	r3, #0
 800b950:	b2db      	uxtb	r3, r3
 800b952:	461a      	mov	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	4413      	add	r3, r2
 800b958:	613b      	str	r3, [r7, #16]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69ba      	ldr	r2, [r7, #24]
 800b960:	4413      	add	r3, r2
 800b962:	61bb      	str	r3, [r7, #24]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	69ba      	ldr	r2, [r7, #24]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	bf34      	ite	cc
 800b96e:	2301      	movcc	r3, #1
 800b970:	2300      	movcs	r3, #0
 800b972:	b2db      	uxtb	r3, r3
 800b974:	461a      	mov	r2, r3
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	4413      	add	r3, r2
 800b97a:	613b      	str	r3, [r7, #16]
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	677b      	str	r3, [r7, #116]	@ 0x74
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	1d1a      	adds	r2, r3, #4
 800b984:	607a      	str	r2, [r7, #4]
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	b29b      	uxth	r3, r3
 800b990:	627b      	str	r3, [r7, #36]	@ 0x24
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	0c1b      	lsrs	r3, r3, #16
 800b998:	623b      	str	r3, [r7, #32]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	3304      	adds	r3, #4
 800b99e:	60bb      	str	r3, [r7, #8]
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9a4:	fb02 f303 	mul.w	r3, r2, r3
 800b9a8:	61fb      	str	r3, [r7, #28]
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9ae:	fb02 f303 	mul.w	r3, r2, r3
 800b9b2:	61bb      	str	r3, [r7, #24]
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9b8:	fb02 f303 	mul.w	r3, r2, r3
 800b9bc:	617b      	str	r3, [r7, #20]
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9c2:	fb02 f303 	mul.w	r3, r2, r3
 800b9c6:	613b      	str	r3, [r7, #16]
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	0c1b      	lsrs	r3, r3, #16
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	613b      	str	r3, [r7, #16]
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	0c1b      	lsrs	r3, r3, #16
 800b9d6:	693a      	ldr	r2, [r7, #16]
 800b9d8:	4413      	add	r3, r2
 800b9da:	613b      	str	r3, [r7, #16]
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	041b      	lsls	r3, r3, #16
 800b9e0:	61fb      	str	r3, [r7, #28]
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	041b      	lsls	r3, r3, #16
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	69ba      	ldr	r2, [r7, #24]
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	61bb      	str	r3, [r7, #24]
 800b9f0:	69ba      	ldr	r2, [r7, #24]
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	bf34      	ite	cc
 800b9f8:	2301      	movcc	r3, #1
 800b9fa:	2300      	movcs	r3, #0
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	461a      	mov	r2, r3
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	4413      	add	r3, r2
 800ba04:	613b      	str	r3, [r7, #16]
 800ba06:	69ba      	ldr	r2, [r7, #24]
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	61bb      	str	r3, [r7, #24]
 800ba0e:	69ba      	ldr	r2, [r7, #24]
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	bf34      	ite	cc
 800ba16:	2301      	movcc	r3, #1
 800ba18:	2300      	movcs	r3, #0
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	4413      	add	r3, r2
 800ba22:	613b      	str	r3, [r7, #16]
 800ba24:	69ba      	ldr	r2, [r7, #24]
 800ba26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba28:	4413      	add	r3, r2
 800ba2a:	61bb      	str	r3, [r7, #24]
 800ba2c:	69ba      	ldr	r2, [r7, #24]
 800ba2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba30:	429a      	cmp	r2, r3
 800ba32:	bf34      	ite	cc
 800ba34:	2301      	movcc	r3, #1
 800ba36:	2300      	movcs	r3, #0
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	4413      	add	r3, r2
 800ba40:	613b      	str	r3, [r7, #16]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	69ba      	ldr	r2, [r7, #24]
 800ba48:	4413      	add	r3, r2
 800ba4a:	61bb      	str	r3, [r7, #24]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	69ba      	ldr	r2, [r7, #24]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	bf34      	ite	cc
 800ba56:	2301      	movcc	r3, #1
 800ba58:	2300      	movcs	r3, #0
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	4413      	add	r3, r2
 800ba62:	613b      	str	r3, [r7, #16]
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	1d1a      	adds	r2, r3, #4
 800ba6c:	607a      	str	r2, [r7, #4]
 800ba6e:	69ba      	ldr	r2, [r7, #24]
 800ba70:	601a      	str	r2, [r3, #0]
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	0c1b      	lsrs	r3, r3, #16
 800ba80:	623b      	str	r3, [r7, #32]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	3304      	adds	r3, #4
 800ba86:	60bb      	str	r3, [r7, #8]
 800ba88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ba8c:	fb02 f303 	mul.w	r3, r2, r3
 800ba90:	61fb      	str	r3, [r7, #28]
 800ba92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba96:	fb02 f303 	mul.w	r3, r2, r3
 800ba9a:	61bb      	str	r3, [r7, #24]
 800ba9c:	6a3b      	ldr	r3, [r7, #32]
 800ba9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baa0:	fb02 f303 	mul.w	r3, r2, r3
 800baa4:	617b      	str	r3, [r7, #20]
 800baa6:	6a3b      	ldr	r3, [r7, #32]
 800baa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800baaa:	fb02 f303 	mul.w	r3, r2, r3
 800baae:	613b      	str	r3, [r7, #16]
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	0c1b      	lsrs	r3, r3, #16
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	4413      	add	r3, r2
 800bab8:	613b      	str	r3, [r7, #16]
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	0c1b      	lsrs	r3, r3, #16
 800babe:	693a      	ldr	r2, [r7, #16]
 800bac0:	4413      	add	r3, r2
 800bac2:	613b      	str	r3, [r7, #16]
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	041b      	lsls	r3, r3, #16
 800bac8:	61fb      	str	r3, [r7, #28]
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	041b      	lsls	r3, r3, #16
 800bace:	617b      	str	r3, [r7, #20]
 800bad0:	69ba      	ldr	r2, [r7, #24]
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	4413      	add	r3, r2
 800bad6:	61bb      	str	r3, [r7, #24]
 800bad8:	69ba      	ldr	r2, [r7, #24]
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	429a      	cmp	r2, r3
 800bade:	bf34      	ite	cc
 800bae0:	2301      	movcc	r3, #1
 800bae2:	2300      	movcs	r3, #0
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	461a      	mov	r2, r3
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	4413      	add	r3, r2
 800baec:	613b      	str	r3, [r7, #16]
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	4413      	add	r3, r2
 800baf4:	61bb      	str	r3, [r7, #24]
 800baf6:	69ba      	ldr	r2, [r7, #24]
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	bf34      	ite	cc
 800bafe:	2301      	movcc	r3, #1
 800bb00:	2300      	movcs	r3, #0
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	461a      	mov	r2, r3
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	4413      	add	r3, r2
 800bb0a:	613b      	str	r3, [r7, #16]
 800bb0c:	69ba      	ldr	r2, [r7, #24]
 800bb0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb10:	4413      	add	r3, r2
 800bb12:	61bb      	str	r3, [r7, #24]
 800bb14:	69ba      	ldr	r2, [r7, #24]
 800bb16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	bf34      	ite	cc
 800bb1c:	2301      	movcc	r3, #1
 800bb1e:	2300      	movcs	r3, #0
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	461a      	mov	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	4413      	add	r3, r2
 800bb28:	613b      	str	r3, [r7, #16]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	4413      	add	r3, r2
 800bb32:	61bb      	str	r3, [r7, #24]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	69ba      	ldr	r2, [r7, #24]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	bf34      	ite	cc
 800bb3e:	2301      	movcc	r3, #1
 800bb40:	2300      	movcs	r3, #0
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	461a      	mov	r2, r3
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	4413      	add	r3, r2
 800bb4a:	613b      	str	r3, [r7, #16]
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	677b      	str	r3, [r7, #116]	@ 0x74
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	1d1a      	adds	r2, r3, #4
 800bb54:	607a      	str	r2, [r7, #4]
 800bb56:	69ba      	ldr	r2, [r7, #24]
 800bb58:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	0c1b      	lsrs	r3, r3, #16
 800bb68:	623b      	str	r3, [r7, #32]
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	60bb      	str	r3, [r7, #8]
 800bb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb74:	fb02 f303 	mul.w	r3, r2, r3
 800bb78:	61fb      	str	r3, [r7, #28]
 800bb7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb7e:	fb02 f303 	mul.w	r3, r2, r3
 800bb82:	61bb      	str	r3, [r7, #24]
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb88:	fb02 f303 	mul.w	r3, r2, r3
 800bb8c:	617b      	str	r3, [r7, #20]
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb92:	fb02 f303 	mul.w	r3, r2, r3
 800bb96:	613b      	str	r3, [r7, #16]
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	0c1b      	lsrs	r3, r3, #16
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	4413      	add	r3, r2
 800bba0:	613b      	str	r3, [r7, #16]
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	0c1b      	lsrs	r3, r3, #16
 800bba6:	693a      	ldr	r2, [r7, #16]
 800bba8:	4413      	add	r3, r2
 800bbaa:	613b      	str	r3, [r7, #16]
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	041b      	lsls	r3, r3, #16
 800bbb0:	61fb      	str	r3, [r7, #28]
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	041b      	lsls	r3, r3, #16
 800bbb6:	617b      	str	r3, [r7, #20]
 800bbb8:	69ba      	ldr	r2, [r7, #24]
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	61bb      	str	r3, [r7, #24]
 800bbc0:	69ba      	ldr	r2, [r7, #24]
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	bf34      	ite	cc
 800bbc8:	2301      	movcc	r3, #1
 800bbca:	2300      	movcs	r3, #0
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	461a      	mov	r2, r3
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	613b      	str	r3, [r7, #16]
 800bbd6:	69ba      	ldr	r2, [r7, #24]
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	4413      	add	r3, r2
 800bbdc:	61bb      	str	r3, [r7, #24]
 800bbde:	69ba      	ldr	r2, [r7, #24]
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	bf34      	ite	cc
 800bbe6:	2301      	movcc	r3, #1
 800bbe8:	2300      	movcs	r3, #0
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	461a      	mov	r2, r3
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	613b      	str	r3, [r7, #16]
 800bbf4:	69ba      	ldr	r2, [r7, #24]
 800bbf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbf8:	4413      	add	r3, r2
 800bbfa:	61bb      	str	r3, [r7, #24]
 800bbfc:	69ba      	ldr	r2, [r7, #24]
 800bbfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc00:	429a      	cmp	r2, r3
 800bc02:	bf34      	ite	cc
 800bc04:	2301      	movcc	r3, #1
 800bc06:	2300      	movcs	r3, #0
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	4413      	add	r3, r2
 800bc10:	613b      	str	r3, [r7, #16]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	69ba      	ldr	r2, [r7, #24]
 800bc18:	4413      	add	r3, r2
 800bc1a:	61bb      	str	r3, [r7, #24]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	69ba      	ldr	r2, [r7, #24]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	bf34      	ite	cc
 800bc26:	2301      	movcc	r3, #1
 800bc28:	2300      	movcs	r3, #0
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	4413      	add	r3, r2
 800bc32:	613b      	str	r3, [r7, #16]
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	677b      	str	r3, [r7, #116]	@ 0x74
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	1d1a      	adds	r2, r3, #4
 800bc3c:	607a      	str	r2, [r7, #4]
 800bc3e:	69ba      	ldr	r2, [r7, #24]
 800bc40:	601a      	str	r2, [r3, #0]
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	0c1b      	lsrs	r3, r3, #16
 800bc50:	623b      	str	r3, [r7, #32]
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	3304      	adds	r3, #4
 800bc56:	60bb      	str	r3, [r7, #8]
 800bc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc5c:	fb02 f303 	mul.w	r3, r2, r3
 800bc60:	61fb      	str	r3, [r7, #28]
 800bc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc66:	fb02 f303 	mul.w	r3, r2, r3
 800bc6a:	61bb      	str	r3, [r7, #24]
 800bc6c:	6a3b      	ldr	r3, [r7, #32]
 800bc6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc70:	fb02 f303 	mul.w	r3, r2, r3
 800bc74:	617b      	str	r3, [r7, #20]
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc7a:	fb02 f303 	mul.w	r3, r2, r3
 800bc7e:	613b      	str	r3, [r7, #16]
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	0c1b      	lsrs	r3, r3, #16
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	4413      	add	r3, r2
 800bc88:	613b      	str	r3, [r7, #16]
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	0c1b      	lsrs	r3, r3, #16
 800bc8e:	693a      	ldr	r2, [r7, #16]
 800bc90:	4413      	add	r3, r2
 800bc92:	613b      	str	r3, [r7, #16]
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	041b      	lsls	r3, r3, #16
 800bc98:	61fb      	str	r3, [r7, #28]
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	041b      	lsls	r3, r3, #16
 800bc9e:	617b      	str	r3, [r7, #20]
 800bca0:	69ba      	ldr	r2, [r7, #24]
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	4413      	add	r3, r2
 800bca6:	61bb      	str	r3, [r7, #24]
 800bca8:	69ba      	ldr	r2, [r7, #24]
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	bf34      	ite	cc
 800bcb0:	2301      	movcc	r3, #1
 800bcb2:	2300      	movcs	r3, #0
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	4413      	add	r3, r2
 800bcbc:	613b      	str	r3, [r7, #16]
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	61bb      	str	r3, [r7, #24]
 800bcc6:	69ba      	ldr	r2, [r7, #24]
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	bf34      	ite	cc
 800bcce:	2301      	movcc	r3, #1
 800bcd0:	2300      	movcs	r3, #0
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	4413      	add	r3, r2
 800bcda:	613b      	str	r3, [r7, #16]
 800bcdc:	69ba      	ldr	r2, [r7, #24]
 800bcde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bce0:	4413      	add	r3, r2
 800bce2:	61bb      	str	r3, [r7, #24]
 800bce4:	69ba      	ldr	r2, [r7, #24]
 800bce6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bce8:	429a      	cmp	r2, r3
 800bcea:	bf34      	ite	cc
 800bcec:	2301      	movcc	r3, #1
 800bcee:	2300      	movcs	r3, #0
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	613b      	str	r3, [r7, #16]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	69ba      	ldr	r2, [r7, #24]
 800bd00:	4413      	add	r3, r2
 800bd02:	61bb      	str	r3, [r7, #24]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	69ba      	ldr	r2, [r7, #24]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	bf34      	ite	cc
 800bd0e:	2301      	movcc	r3, #1
 800bd10:	2300      	movcs	r3, #0
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	461a      	mov	r2, r3
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	4413      	add	r3, r2
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	677b      	str	r3, [r7, #116]	@ 0x74
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	1d1a      	adds	r2, r3, #4
 800bd24:	607a      	str	r2, [r7, #4]
 800bd26:	69ba      	ldr	r2, [r7, #24]
 800bd28:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	0c1b      	lsrs	r3, r3, #16
 800bd38:	623b      	str	r3, [r7, #32]
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	3304      	adds	r3, #4
 800bd3e:	60bb      	str	r3, [r7, #8]
 800bd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd44:	fb02 f303 	mul.w	r3, r2, r3
 800bd48:	61fb      	str	r3, [r7, #28]
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd4e:	fb02 f303 	mul.w	r3, r2, r3
 800bd52:	61bb      	str	r3, [r7, #24]
 800bd54:	6a3b      	ldr	r3, [r7, #32]
 800bd56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd58:	fb02 f303 	mul.w	r3, r2, r3
 800bd5c:	617b      	str	r3, [r7, #20]
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bd62:	fb02 f303 	mul.w	r3, r2, r3
 800bd66:	613b      	str	r3, [r7, #16]
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	0c1b      	lsrs	r3, r3, #16
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	4413      	add	r3, r2
 800bd70:	613b      	str	r3, [r7, #16]
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	0c1b      	lsrs	r3, r3, #16
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	4413      	add	r3, r2
 800bd7a:	613b      	str	r3, [r7, #16]
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	041b      	lsls	r3, r3, #16
 800bd80:	61fb      	str	r3, [r7, #28]
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	041b      	lsls	r3, r3, #16
 800bd86:	617b      	str	r3, [r7, #20]
 800bd88:	69ba      	ldr	r2, [r7, #24]
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	61bb      	str	r3, [r7, #24]
 800bd90:	69ba      	ldr	r2, [r7, #24]
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	bf34      	ite	cc
 800bd98:	2301      	movcc	r3, #1
 800bd9a:	2300      	movcs	r3, #0
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	461a      	mov	r2, r3
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	4413      	add	r3, r2
 800bda4:	613b      	str	r3, [r7, #16]
 800bda6:	69ba      	ldr	r2, [r7, #24]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	4413      	add	r3, r2
 800bdac:	61bb      	str	r3, [r7, #24]
 800bdae:	69ba      	ldr	r2, [r7, #24]
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	bf34      	ite	cc
 800bdb6:	2301      	movcc	r3, #1
 800bdb8:	2300      	movcs	r3, #0
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	613b      	str	r3, [r7, #16]
 800bdc4:	69ba      	ldr	r2, [r7, #24]
 800bdc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdc8:	4413      	add	r3, r2
 800bdca:	61bb      	str	r3, [r7, #24]
 800bdcc:	69ba      	ldr	r2, [r7, #24]
 800bdce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	bf34      	ite	cc
 800bdd4:	2301      	movcc	r3, #1
 800bdd6:	2300      	movcs	r3, #0
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	461a      	mov	r2, r3
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	4413      	add	r3, r2
 800bde0:	613b      	str	r3, [r7, #16]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	69ba      	ldr	r2, [r7, #24]
 800bde8:	4413      	add	r3, r2
 800bdea:	61bb      	str	r3, [r7, #24]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	69ba      	ldr	r2, [r7, #24]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	bf34      	ite	cc
 800bdf6:	2301      	movcc	r3, #1
 800bdf8:	2300      	movcs	r3, #0
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	4413      	add	r3, r2
 800be02:	613b      	str	r3, [r7, #16]
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	677b      	str	r3, [r7, #116]	@ 0x74
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	1d1a      	adds	r2, r3, #4
 800be0c:	607a      	str	r2, [r7, #4]
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	b29b      	uxth	r3, r3
 800be18:	627b      	str	r3, [r7, #36]	@ 0x24
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	0c1b      	lsrs	r3, r3, #16
 800be20:	623b      	str	r3, [r7, #32]
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	3304      	adds	r3, #4
 800be26:	60bb      	str	r3, [r7, #8]
 800be28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be2c:	fb02 f303 	mul.w	r3, r2, r3
 800be30:	61fb      	str	r3, [r7, #28]
 800be32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be36:	fb02 f303 	mul.w	r3, r2, r3
 800be3a:	61bb      	str	r3, [r7, #24]
 800be3c:	6a3b      	ldr	r3, [r7, #32]
 800be3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be40:	fb02 f303 	mul.w	r3, r2, r3
 800be44:	617b      	str	r3, [r7, #20]
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be4a:	fb02 f303 	mul.w	r3, r2, r3
 800be4e:	613b      	str	r3, [r7, #16]
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	0c1b      	lsrs	r3, r3, #16
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	4413      	add	r3, r2
 800be58:	613b      	str	r3, [r7, #16]
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	0c1b      	lsrs	r3, r3, #16
 800be5e:	693a      	ldr	r2, [r7, #16]
 800be60:	4413      	add	r3, r2
 800be62:	613b      	str	r3, [r7, #16]
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	041b      	lsls	r3, r3, #16
 800be68:	61fb      	str	r3, [r7, #28]
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	041b      	lsls	r3, r3, #16
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	69ba      	ldr	r2, [r7, #24]
 800be72:	69fb      	ldr	r3, [r7, #28]
 800be74:	4413      	add	r3, r2
 800be76:	61bb      	str	r3, [r7, #24]
 800be78:	69ba      	ldr	r2, [r7, #24]
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	bf34      	ite	cc
 800be80:	2301      	movcc	r3, #1
 800be82:	2300      	movcs	r3, #0
 800be84:	b2db      	uxtb	r3, r3
 800be86:	461a      	mov	r2, r3
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	4413      	add	r3, r2
 800be8c:	613b      	str	r3, [r7, #16]
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	4413      	add	r3, r2
 800be94:	61bb      	str	r3, [r7, #24]
 800be96:	69ba      	ldr	r2, [r7, #24]
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	bf34      	ite	cc
 800be9e:	2301      	movcc	r3, #1
 800bea0:	2300      	movcs	r3, #0
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	461a      	mov	r2, r3
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	4413      	add	r3, r2
 800beaa:	613b      	str	r3, [r7, #16]
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800beb0:	4413      	add	r3, r2
 800beb2:	61bb      	str	r3, [r7, #24]
 800beb4:	69ba      	ldr	r2, [r7, #24]
 800beb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800beb8:	429a      	cmp	r2, r3
 800beba:	bf34      	ite	cc
 800bebc:	2301      	movcc	r3, #1
 800bebe:	2300      	movcs	r3, #0
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	461a      	mov	r2, r3
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	4413      	add	r3, r2
 800bec8:	613b      	str	r3, [r7, #16]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	69ba      	ldr	r2, [r7, #24]
 800bed0:	4413      	add	r3, r2
 800bed2:	61bb      	str	r3, [r7, #24]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	69ba      	ldr	r2, [r7, #24]
 800beda:	429a      	cmp	r2, r3
 800bedc:	bf34      	ite	cc
 800bede:	2301      	movcc	r3, #1
 800bee0:	2300      	movcs	r3, #0
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	461a      	mov	r2, r3
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	4413      	add	r3, r2
 800beea:	613b      	str	r3, [r7, #16]
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	677b      	str	r3, [r7, #116]	@ 0x74
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	1d1a      	adds	r2, r3, #4
 800bef4:	607a      	str	r2, [r7, #4]
 800bef6:	69ba      	ldr	r2, [r7, #24]
 800bef8:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	b29b      	uxth	r3, r3
 800bf00:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	0c1b      	lsrs	r3, r3, #16
 800bf08:	623b      	str	r3, [r7, #32]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	3304      	adds	r3, #4
 800bf0e:	60bb      	str	r3, [r7, #8]
 800bf10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf14:	fb02 f303 	mul.w	r3, r2, r3
 800bf18:	61fb      	str	r3, [r7, #28]
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf1e:	fb02 f303 	mul.w	r3, r2, r3
 800bf22:	61bb      	str	r3, [r7, #24]
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf28:	fb02 f303 	mul.w	r3, r2, r3
 800bf2c:	617b      	str	r3, [r7, #20]
 800bf2e:	6a3b      	ldr	r3, [r7, #32]
 800bf30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf32:	fb02 f303 	mul.w	r3, r2, r3
 800bf36:	613b      	str	r3, [r7, #16]
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	0c1b      	lsrs	r3, r3, #16
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	4413      	add	r3, r2
 800bf40:	613b      	str	r3, [r7, #16]
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	0c1b      	lsrs	r3, r3, #16
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	4413      	add	r3, r2
 800bf4a:	613b      	str	r3, [r7, #16]
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	041b      	lsls	r3, r3, #16
 800bf50:	61fb      	str	r3, [r7, #28]
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	041b      	lsls	r3, r3, #16
 800bf56:	617b      	str	r3, [r7, #20]
 800bf58:	69ba      	ldr	r2, [r7, #24]
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	61bb      	str	r3, [r7, #24]
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	429a      	cmp	r2, r3
 800bf66:	bf34      	ite	cc
 800bf68:	2301      	movcc	r3, #1
 800bf6a:	2300      	movcs	r3, #0
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	461a      	mov	r2, r3
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	4413      	add	r3, r2
 800bf74:	613b      	str	r3, [r7, #16]
 800bf76:	69ba      	ldr	r2, [r7, #24]
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	61bb      	str	r3, [r7, #24]
 800bf7e:	69ba      	ldr	r2, [r7, #24]
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	bf34      	ite	cc
 800bf86:	2301      	movcc	r3, #1
 800bf88:	2300      	movcs	r3, #0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	4413      	add	r3, r2
 800bf92:	613b      	str	r3, [r7, #16]
 800bf94:	69ba      	ldr	r2, [r7, #24]
 800bf96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bf98:	4413      	add	r3, r2
 800bf9a:	61bb      	str	r3, [r7, #24]
 800bf9c:	69ba      	ldr	r2, [r7, #24]
 800bf9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	bf34      	ite	cc
 800bfa4:	2301      	movcc	r3, #1
 800bfa6:	2300      	movcs	r3, #0
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	461a      	mov	r2, r3
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	4413      	add	r3, r2
 800bfb0:	613b      	str	r3, [r7, #16]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	69ba      	ldr	r2, [r7, #24]
 800bfb8:	4413      	add	r3, r2
 800bfba:	61bb      	str	r3, [r7, #24]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	69ba      	ldr	r2, [r7, #24]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	bf34      	ite	cc
 800bfc6:	2301      	movcc	r3, #1
 800bfc8:	2300      	movcs	r3, #0
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	461a      	mov	r2, r3
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	677b      	str	r3, [r7, #116]	@ 0x74
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	1d1a      	adds	r2, r3, #4
 800bfdc:	607a      	str	r2, [r7, #4]
 800bfde:	69ba      	ldr	r2, [r7, #24]
 800bfe0:	601a      	str	r2, [r3, #0]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	0c1b      	lsrs	r3, r3, #16
 800bff0:	623b      	str	r3, [r7, #32]
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	3304      	adds	r3, #4
 800bff6:	60bb      	str	r3, [r7, #8]
 800bff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bffc:	fb02 f303 	mul.w	r3, r2, r3
 800c000:	61fb      	str	r3, [r7, #28]
 800c002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c006:	fb02 f303 	mul.w	r3, r2, r3
 800c00a:	61bb      	str	r3, [r7, #24]
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c010:	fb02 f303 	mul.w	r3, r2, r3
 800c014:	617b      	str	r3, [r7, #20]
 800c016:	6a3b      	ldr	r3, [r7, #32]
 800c018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c01a:	fb02 f303 	mul.w	r3, r2, r3
 800c01e:	613b      	str	r3, [r7, #16]
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	0c1b      	lsrs	r3, r3, #16
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	4413      	add	r3, r2
 800c028:	613b      	str	r3, [r7, #16]
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	0c1b      	lsrs	r3, r3, #16
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	4413      	add	r3, r2
 800c032:	613b      	str	r3, [r7, #16]
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	041b      	lsls	r3, r3, #16
 800c038:	61fb      	str	r3, [r7, #28]
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	041b      	lsls	r3, r3, #16
 800c03e:	617b      	str	r3, [r7, #20]
 800c040:	69ba      	ldr	r2, [r7, #24]
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	4413      	add	r3, r2
 800c046:	61bb      	str	r3, [r7, #24]
 800c048:	69ba      	ldr	r2, [r7, #24]
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	bf34      	ite	cc
 800c050:	2301      	movcc	r3, #1
 800c052:	2300      	movcs	r3, #0
 800c054:	b2db      	uxtb	r3, r3
 800c056:	461a      	mov	r2, r3
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	4413      	add	r3, r2
 800c05c:	613b      	str	r3, [r7, #16]
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	4413      	add	r3, r2
 800c064:	61bb      	str	r3, [r7, #24]
 800c066:	69ba      	ldr	r2, [r7, #24]
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	bf34      	ite	cc
 800c06e:	2301      	movcc	r3, #1
 800c070:	2300      	movcs	r3, #0
 800c072:	b2db      	uxtb	r3, r3
 800c074:	461a      	mov	r2, r3
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	4413      	add	r3, r2
 800c07a:	613b      	str	r3, [r7, #16]
 800c07c:	69ba      	ldr	r2, [r7, #24]
 800c07e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c080:	4413      	add	r3, r2
 800c082:	61bb      	str	r3, [r7, #24]
 800c084:	69ba      	ldr	r2, [r7, #24]
 800c086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c088:	429a      	cmp	r2, r3
 800c08a:	bf34      	ite	cc
 800c08c:	2301      	movcc	r3, #1
 800c08e:	2300      	movcs	r3, #0
 800c090:	b2db      	uxtb	r3, r3
 800c092:	461a      	mov	r2, r3
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	4413      	add	r3, r2
 800c098:	613b      	str	r3, [r7, #16]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	69ba      	ldr	r2, [r7, #24]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	61bb      	str	r3, [r7, #24]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	69ba      	ldr	r2, [r7, #24]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	bf34      	ite	cc
 800c0ae:	2301      	movcc	r3, #1
 800c0b0:	2300      	movcs	r3, #0
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	613b      	str	r3, [r7, #16]
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	677b      	str	r3, [r7, #116]	@ 0x74
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	1d1a      	adds	r2, r3, #4
 800c0c4:	607a      	str	r2, [r7, #4]
 800c0c6:	69ba      	ldr	r2, [r7, #24]
 800c0c8:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	0c1b      	lsrs	r3, r3, #16
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	60bb      	str	r3, [r7, #8]
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0e4:	fb02 f303 	mul.w	r3, r2, r3
 800c0e8:	61fb      	str	r3, [r7, #28]
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0ee:	fb02 f303 	mul.w	r3, r2, r3
 800c0f2:	61bb      	str	r3, [r7, #24]
 800c0f4:	6a3b      	ldr	r3, [r7, #32]
 800c0f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0f8:	fb02 f303 	mul.w	r3, r2, r3
 800c0fc:	617b      	str	r3, [r7, #20]
 800c0fe:	6a3b      	ldr	r3, [r7, #32]
 800c100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c102:	fb02 f303 	mul.w	r3, r2, r3
 800c106:	613b      	str	r3, [r7, #16]
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	0c1b      	lsrs	r3, r3, #16
 800c10c:	693a      	ldr	r2, [r7, #16]
 800c10e:	4413      	add	r3, r2
 800c110:	613b      	str	r3, [r7, #16]
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	0c1b      	lsrs	r3, r3, #16
 800c116:	693a      	ldr	r2, [r7, #16]
 800c118:	4413      	add	r3, r2
 800c11a:	613b      	str	r3, [r7, #16]
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	041b      	lsls	r3, r3, #16
 800c120:	61fb      	str	r3, [r7, #28]
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	041b      	lsls	r3, r3, #16
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	69ba      	ldr	r2, [r7, #24]
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	4413      	add	r3, r2
 800c12e:	61bb      	str	r3, [r7, #24]
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	429a      	cmp	r2, r3
 800c136:	bf34      	ite	cc
 800c138:	2301      	movcc	r3, #1
 800c13a:	2300      	movcs	r3, #0
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	461a      	mov	r2, r3
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	4413      	add	r3, r2
 800c144:	613b      	str	r3, [r7, #16]
 800c146:	69ba      	ldr	r2, [r7, #24]
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	4413      	add	r3, r2
 800c14c:	61bb      	str	r3, [r7, #24]
 800c14e:	69ba      	ldr	r2, [r7, #24]
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	429a      	cmp	r2, r3
 800c154:	bf34      	ite	cc
 800c156:	2301      	movcc	r3, #1
 800c158:	2300      	movcs	r3, #0
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	461a      	mov	r2, r3
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	4413      	add	r3, r2
 800c162:	613b      	str	r3, [r7, #16]
 800c164:	69ba      	ldr	r2, [r7, #24]
 800c166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c168:	4413      	add	r3, r2
 800c16a:	61bb      	str	r3, [r7, #24]
 800c16c:	69ba      	ldr	r2, [r7, #24]
 800c16e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c170:	429a      	cmp	r2, r3
 800c172:	bf34      	ite	cc
 800c174:	2301      	movcc	r3, #1
 800c176:	2300      	movcs	r3, #0
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	461a      	mov	r2, r3
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	4413      	add	r3, r2
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	69ba      	ldr	r2, [r7, #24]
 800c188:	4413      	add	r3, r2
 800c18a:	61bb      	str	r3, [r7, #24]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	429a      	cmp	r2, r3
 800c194:	bf34      	ite	cc
 800c196:	2301      	movcc	r3, #1
 800c198:	2300      	movcs	r3, #0
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	461a      	mov	r2, r3
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	613b      	str	r3, [r7, #16]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	1d1a      	adds	r2, r3, #4
 800c1ac:	607a      	str	r2, [r7, #4]
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	601a      	str	r2, [r3, #0]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	0c1b      	lsrs	r3, r3, #16
 800c1c0:	623b      	str	r3, [r7, #32]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	60bb      	str	r3, [r7, #8]
 800c1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1cc:	fb02 f303 	mul.w	r3, r2, r3
 800c1d0:	61fb      	str	r3, [r7, #28]
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1d6:	fb02 f303 	mul.w	r3, r2, r3
 800c1da:	61bb      	str	r3, [r7, #24]
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1e0:	fb02 f303 	mul.w	r3, r2, r3
 800c1e4:	617b      	str	r3, [r7, #20]
 800c1e6:	6a3b      	ldr	r3, [r7, #32]
 800c1e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1ea:	fb02 f303 	mul.w	r3, r2, r3
 800c1ee:	613b      	str	r3, [r7, #16]
 800c1f0:	69fb      	ldr	r3, [r7, #28]
 800c1f2:	0c1b      	lsrs	r3, r3, #16
 800c1f4:	693a      	ldr	r2, [r7, #16]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	613b      	str	r3, [r7, #16]
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	0c1b      	lsrs	r3, r3, #16
 800c1fe:	693a      	ldr	r2, [r7, #16]
 800c200:	4413      	add	r3, r2
 800c202:	613b      	str	r3, [r7, #16]
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	041b      	lsls	r3, r3, #16
 800c208:	61fb      	str	r3, [r7, #28]
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	041b      	lsls	r3, r3, #16
 800c20e:	617b      	str	r3, [r7, #20]
 800c210:	69ba      	ldr	r2, [r7, #24]
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	4413      	add	r3, r2
 800c216:	61bb      	str	r3, [r7, #24]
 800c218:	69ba      	ldr	r2, [r7, #24]
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	bf34      	ite	cc
 800c220:	2301      	movcc	r3, #1
 800c222:	2300      	movcs	r3, #0
 800c224:	b2db      	uxtb	r3, r3
 800c226:	461a      	mov	r2, r3
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	4413      	add	r3, r2
 800c22c:	613b      	str	r3, [r7, #16]
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	4413      	add	r3, r2
 800c234:	61bb      	str	r3, [r7, #24]
 800c236:	69ba      	ldr	r2, [r7, #24]
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	bf34      	ite	cc
 800c23e:	2301      	movcc	r3, #1
 800c240:	2300      	movcs	r3, #0
 800c242:	b2db      	uxtb	r3, r3
 800c244:	461a      	mov	r2, r3
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	4413      	add	r3, r2
 800c24a:	613b      	str	r3, [r7, #16]
 800c24c:	69ba      	ldr	r2, [r7, #24]
 800c24e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c250:	4413      	add	r3, r2
 800c252:	61bb      	str	r3, [r7, #24]
 800c254:	69ba      	ldr	r2, [r7, #24]
 800c256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c258:	429a      	cmp	r2, r3
 800c25a:	bf34      	ite	cc
 800c25c:	2301      	movcc	r3, #1
 800c25e:	2300      	movcs	r3, #0
 800c260:	b2db      	uxtb	r3, r3
 800c262:	461a      	mov	r2, r3
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	4413      	add	r3, r2
 800c268:	613b      	str	r3, [r7, #16]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	69ba      	ldr	r2, [r7, #24]
 800c270:	4413      	add	r3, r2
 800c272:	61bb      	str	r3, [r7, #24]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	69ba      	ldr	r2, [r7, #24]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	bf34      	ite	cc
 800c27e:	2301      	movcc	r3, #1
 800c280:	2300      	movcs	r3, #0
 800c282:	b2db      	uxtb	r3, r3
 800c284:	461a      	mov	r2, r3
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	4413      	add	r3, r2
 800c28a:	613b      	str	r3, [r7, #16]
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	1d1a      	adds	r2, r3, #4
 800c294:	607a      	str	r2, [r7, #4]
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	0c1b      	lsrs	r3, r3, #16
 800c2a8:	623b      	str	r3, [r7, #32]
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	60bb      	str	r3, [r7, #8]
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2b4:	fb02 f303 	mul.w	r3, r2, r3
 800c2b8:	61fb      	str	r3, [r7, #28]
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2be:	fb02 f303 	mul.w	r3, r2, r3
 800c2c2:	61bb      	str	r3, [r7, #24]
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2c8:	fb02 f303 	mul.w	r3, r2, r3
 800c2cc:	617b      	str	r3, [r7, #20]
 800c2ce:	6a3b      	ldr	r3, [r7, #32]
 800c2d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2d2:	fb02 f303 	mul.w	r3, r2, r3
 800c2d6:	613b      	str	r3, [r7, #16]
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	0c1b      	lsrs	r3, r3, #16
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	4413      	add	r3, r2
 800c2e0:	613b      	str	r3, [r7, #16]
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	0c1b      	lsrs	r3, r3, #16
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	613b      	str	r3, [r7, #16]
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	041b      	lsls	r3, r3, #16
 800c2f0:	61fb      	str	r3, [r7, #28]
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	041b      	lsls	r3, r3, #16
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	4413      	add	r3, r2
 800c2fe:	61bb      	str	r3, [r7, #24]
 800c300:	69ba      	ldr	r2, [r7, #24]
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	429a      	cmp	r2, r3
 800c306:	bf34      	ite	cc
 800c308:	2301      	movcc	r3, #1
 800c30a:	2300      	movcs	r3, #0
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	461a      	mov	r2, r3
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	4413      	add	r3, r2
 800c314:	613b      	str	r3, [r7, #16]
 800c316:	69ba      	ldr	r2, [r7, #24]
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	4413      	add	r3, r2
 800c31c:	61bb      	str	r3, [r7, #24]
 800c31e:	69ba      	ldr	r2, [r7, #24]
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	429a      	cmp	r2, r3
 800c324:	bf34      	ite	cc
 800c326:	2301      	movcc	r3, #1
 800c328:	2300      	movcs	r3, #0
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	461a      	mov	r2, r3
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	4413      	add	r3, r2
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	69ba      	ldr	r2, [r7, #24]
 800c336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c338:	4413      	add	r3, r2
 800c33a:	61bb      	str	r3, [r7, #24]
 800c33c:	69ba      	ldr	r2, [r7, #24]
 800c33e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c340:	429a      	cmp	r2, r3
 800c342:	bf34      	ite	cc
 800c344:	2301      	movcc	r3, #1
 800c346:	2300      	movcs	r3, #0
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	461a      	mov	r2, r3
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	4413      	add	r3, r2
 800c350:	613b      	str	r3, [r7, #16]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	69ba      	ldr	r2, [r7, #24]
 800c358:	4413      	add	r3, r2
 800c35a:	61bb      	str	r3, [r7, #24]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	69ba      	ldr	r2, [r7, #24]
 800c362:	429a      	cmp	r2, r3
 800c364:	bf34      	ite	cc
 800c366:	2301      	movcc	r3, #1
 800c368:	2300      	movcs	r3, #0
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	461a      	mov	r2, r3
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	4413      	add	r3, r2
 800c372:	613b      	str	r3, [r7, #16]
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	677b      	str	r3, [r7, #116]	@ 0x74
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	1d1a      	adds	r2, r3, #4
 800c37c:	607a      	str	r2, [r7, #4]
 800c37e:	69ba      	ldr	r2, [r7, #24]
 800c380:	601a      	str	r2, [r3, #0]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	b29b      	uxth	r3, r3
 800c388:	627b      	str	r3, [r7, #36]	@ 0x24
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	0c1b      	lsrs	r3, r3, #16
 800c390:	623b      	str	r3, [r7, #32]
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	3304      	adds	r3, #4
 800c396:	60bb      	str	r3, [r7, #8]
 800c398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c39c:	fb02 f303 	mul.w	r3, r2, r3
 800c3a0:	61fb      	str	r3, [r7, #28]
 800c3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3a6:	fb02 f303 	mul.w	r3, r2, r3
 800c3aa:	61bb      	str	r3, [r7, #24]
 800c3ac:	6a3b      	ldr	r3, [r7, #32]
 800c3ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3b0:	fb02 f303 	mul.w	r3, r2, r3
 800c3b4:	617b      	str	r3, [r7, #20]
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3ba:	fb02 f303 	mul.w	r3, r2, r3
 800c3be:	613b      	str	r3, [r7, #16]
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	0c1b      	lsrs	r3, r3, #16
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	613b      	str	r3, [r7, #16]
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	0c1b      	lsrs	r3, r3, #16
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	613b      	str	r3, [r7, #16]
 800c3d4:	69fb      	ldr	r3, [r7, #28]
 800c3d6:	041b      	lsls	r3, r3, #16
 800c3d8:	61fb      	str	r3, [r7, #28]
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	041b      	lsls	r3, r3, #16
 800c3de:	617b      	str	r3, [r7, #20]
 800c3e0:	69ba      	ldr	r2, [r7, #24]
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	61bb      	str	r3, [r7, #24]
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	bf34      	ite	cc
 800c3f0:	2301      	movcc	r3, #1
 800c3f2:	2300      	movcs	r3, #0
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	613b      	str	r3, [r7, #16]
 800c3fe:	69ba      	ldr	r2, [r7, #24]
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	4413      	add	r3, r2
 800c404:	61bb      	str	r3, [r7, #24]
 800c406:	69ba      	ldr	r2, [r7, #24]
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	bf34      	ite	cc
 800c40e:	2301      	movcc	r3, #1
 800c410:	2300      	movcs	r3, #0
 800c412:	b2db      	uxtb	r3, r3
 800c414:	461a      	mov	r2, r3
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	4413      	add	r3, r2
 800c41a:	613b      	str	r3, [r7, #16]
 800c41c:	69ba      	ldr	r2, [r7, #24]
 800c41e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c420:	4413      	add	r3, r2
 800c422:	61bb      	str	r3, [r7, #24]
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c428:	429a      	cmp	r2, r3
 800c42a:	bf34      	ite	cc
 800c42c:	2301      	movcc	r3, #1
 800c42e:	2300      	movcs	r3, #0
 800c430:	b2db      	uxtb	r3, r3
 800c432:	461a      	mov	r2, r3
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	4413      	add	r3, r2
 800c438:	613b      	str	r3, [r7, #16]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	69ba      	ldr	r2, [r7, #24]
 800c440:	4413      	add	r3, r2
 800c442:	61bb      	str	r3, [r7, #24]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	69ba      	ldr	r2, [r7, #24]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	bf34      	ite	cc
 800c44e:	2301      	movcc	r3, #1
 800c450:	2300      	movcs	r3, #0
 800c452:	b2db      	uxtb	r3, r3
 800c454:	461a      	mov	r2, r3
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	4413      	add	r3, r2
 800c45a:	613b      	str	r3, [r7, #16]
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	1d1a      	adds	r2, r3, #4
 800c464:	607a      	str	r2, [r7, #4]
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	601a      	str	r2, [r3, #0]
    for( ; i >= 16; i -= 16 )
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	3b10      	subs	r3, #16
 800c46e:	60fb      	str	r3, [r7, #12]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2b0f      	cmp	r3, #15
 800c474:	f63f a8b3 	bhi.w	800b5de <mpi_mul_hlp+0x1a>
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
 800c478:	e3a8      	b.n	800cbcc <mpi_mul_hlp+0x1608>
    {
        MULADDC_INIT
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	0c1b      	lsrs	r3, r3, #16
 800c484:	64bb      	str	r3, [r7, #72]	@ 0x48
        MULADDC_CORE   MULADDC_CORE
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	0c1b      	lsrs	r3, r3, #16
 800c494:	643b      	str	r3, [r7, #64]	@ 0x40
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	3304      	adds	r3, #4
 800c49a:	60bb      	str	r3, [r7, #8]
 800c49c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c49e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4a0:	fb02 f303 	mul.w	r3, r2, r3
 800c4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c4aa:	fb02 f303 	mul.w	r3, r2, r3
 800c4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c4b4:	fb02 f303 	mul.w	r3, r2, r3
 800c4b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4be:	fb02 f303 	mul.w	r3, r2, r3
 800c4c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4c6:	0c1b      	lsrs	r3, r3, #16
 800c4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4ca:	4413      	add	r3, r2
 800c4cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4d0:	0c1b      	lsrs	r3, r3, #16
 800c4d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4d4:	4413      	add	r3, r2
 800c4d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4da:	041b      	lsls	r3, r3, #16
 800c4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4e0:	041b      	lsls	r3, r3, #16
 800c4e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e8:	4413      	add	r3, r2
 800c4ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	bf34      	ite	cc
 800c4f4:	2301      	movcc	r3, #1
 800c4f6:	2300      	movcs	r3, #0
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4fe:	4413      	add	r3, r2
 800c500:	633b      	str	r3, [r7, #48]	@ 0x30
 800c502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c506:	4413      	add	r3, r2
 800c508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c50a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c50e:	429a      	cmp	r2, r3
 800c510:	bf34      	ite	cc
 800c512:	2301      	movcc	r3, #1
 800c514:	2300      	movcs	r3, #0
 800c516:	b2db      	uxtb	r3, r3
 800c518:	461a      	mov	r2, r3
 800c51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c51c:	4413      	add	r3, r2
 800c51e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c522:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c524:	4413      	add	r3, r2
 800c526:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c52a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c52c:	429a      	cmp	r2, r3
 800c52e:	bf34      	ite	cc
 800c530:	2301      	movcc	r3, #1
 800c532:	2300      	movcs	r3, #0
 800c534:	b2db      	uxtb	r3, r3
 800c536:	461a      	mov	r2, r3
 800c538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53a:	4413      	add	r3, r2
 800c53c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c544:	4413      	add	r3, r2
 800c546:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c54e:	429a      	cmp	r2, r3
 800c550:	bf34      	ite	cc
 800c552:	2301      	movcc	r3, #1
 800c554:	2300      	movcs	r3, #0
 800c556:	b2db      	uxtb	r3, r3
 800c558:	461a      	mov	r2, r3
 800c55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55c:	4413      	add	r3, r2
 800c55e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c562:	677b      	str	r3, [r7, #116]	@ 0x74
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	1d1a      	adds	r2, r3, #4
 800c568:	607a      	str	r2, [r7, #4]
 800c56a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	b29b      	uxth	r3, r3
 800c574:	647b      	str	r3, [r7, #68]	@ 0x44
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	0c1b      	lsrs	r3, r3, #16
 800c57c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	3304      	adds	r3, #4
 800c582:	60bb      	str	r3, [r7, #8]
 800c584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c588:	fb02 f303 	mul.w	r3, r2, r3
 800c58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c58e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c590:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c592:	fb02 f303 	mul.w	r3, r2, r3
 800c596:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c598:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c59a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c59c:	fb02 f303 	mul.w	r3, r2, r3
 800c5a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5a6:	fb02 f303 	mul.w	r3, r2, r3
 800c5aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ae:	0c1b      	lsrs	r3, r3, #16
 800c5b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5b2:	4413      	add	r3, r2
 800c5b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5b8:	0c1b      	lsrs	r3, r3, #16
 800c5ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5bc:	4413      	add	r3, r2
 800c5be:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c2:	041b      	lsls	r3, r3, #16
 800c5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5c8:	041b      	lsls	r3, r3, #16
 800c5ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d0:	4413      	add	r3, r2
 800c5d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	bf34      	ite	cc
 800c5dc:	2301      	movcc	r3, #1
 800c5de:	2300      	movcs	r3, #0
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e6:	4413      	add	r3, r2
 800c5e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ee:	4413      	add	r3, r2
 800c5f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	bf34      	ite	cc
 800c5fa:	2301      	movcc	r3, #1
 800c5fc:	2300      	movcs	r3, #0
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	461a      	mov	r2, r3
 800c602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c604:	4413      	add	r3, r2
 800c606:	633b      	str	r3, [r7, #48]	@ 0x30
 800c608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c60a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c60c:	4413      	add	r3, r2
 800c60e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c610:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c614:	429a      	cmp	r2, r3
 800c616:	bf34      	ite	cc
 800c618:	2301      	movcc	r3, #1
 800c61a:	2300      	movcs	r3, #0
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	461a      	mov	r2, r3
 800c620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c622:	4413      	add	r3, r2
 800c624:	633b      	str	r3, [r7, #48]	@ 0x30
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c62c:	4413      	add	r3, r2
 800c62e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c636:	429a      	cmp	r2, r3
 800c638:	bf34      	ite	cc
 800c63a:	2301      	movcc	r3, #1
 800c63c:	2300      	movcs	r3, #0
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	461a      	mov	r2, r3
 800c642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c644:	4413      	add	r3, r2
 800c646:	633b      	str	r3, [r7, #48]	@ 0x30
 800c648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	1d1a      	adds	r2, r3, #4
 800c650:	607a      	str	r2, [r7, #4]
 800c652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c654:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	0c1b      	lsrs	r3, r3, #16
 800c664:	643b      	str	r3, [r7, #64]	@ 0x40
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	3304      	adds	r3, #4
 800c66a:	60bb      	str	r3, [r7, #8]
 800c66c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c66e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c670:	fb02 f303 	mul.w	r3, r2, r3
 800c674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c67a:	fb02 f303 	mul.w	r3, r2, r3
 800c67e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c682:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c684:	fb02 f303 	mul.w	r3, r2, r3
 800c688:	637b      	str	r3, [r7, #52]	@ 0x34
 800c68a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c68c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c68e:	fb02 f303 	mul.w	r3, r2, r3
 800c692:	633b      	str	r3, [r7, #48]	@ 0x30
 800c694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c696:	0c1b      	lsrs	r3, r3, #16
 800c698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c69a:	4413      	add	r3, r2
 800c69c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6a0:	0c1b      	lsrs	r3, r3, #16
 800c6a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6a4:	4413      	add	r3, r2
 800c6a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6aa:	041b      	lsls	r3, r3, #16
 800c6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6b0:	041b      	lsls	r3, r3, #16
 800c6b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6b8:	4413      	add	r3, r2
 800c6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	bf34      	ite	cc
 800c6c4:	2301      	movcc	r3, #1
 800c6c6:	2300      	movcs	r3, #0
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ce:	4413      	add	r3, r2
 800c6d0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6d6:	4413      	add	r3, r2
 800c6d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	bf34      	ite	cc
 800c6e2:	2301      	movcc	r3, #1
 800c6e4:	2300      	movcs	r3, #0
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6ec:	4413      	add	r3, r2
 800c6ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6f4:	4413      	add	r3, r2
 800c6f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	bf34      	ite	cc
 800c700:	2301      	movcc	r3, #1
 800c702:	2300      	movcs	r3, #0
 800c704:	b2db      	uxtb	r3, r3
 800c706:	461a      	mov	r2, r3
 800c708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70a:	4413      	add	r3, r2
 800c70c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c714:	4413      	add	r3, r2
 800c716:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c71e:	429a      	cmp	r2, r3
 800c720:	bf34      	ite	cc
 800c722:	2301      	movcc	r3, #1
 800c724:	2300      	movcs	r3, #0
 800c726:	b2db      	uxtb	r3, r3
 800c728:	461a      	mov	r2, r3
 800c72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72c:	4413      	add	r3, r2
 800c72e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c732:	677b      	str	r3, [r7, #116]	@ 0x74
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	1d1a      	adds	r2, r3, #4
 800c738:	607a      	str	r2, [r7, #4]
 800c73a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	b29b      	uxth	r3, r3
 800c744:	647b      	str	r3, [r7, #68]	@ 0x44
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	0c1b      	lsrs	r3, r3, #16
 800c74c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	3304      	adds	r3, #4
 800c752:	60bb      	str	r3, [r7, #8]
 800c754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c758:	fb02 f303 	mul.w	r3, r2, r3
 800c75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c75e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c760:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c762:	fb02 f303 	mul.w	r3, r2, r3
 800c766:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c76a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c76c:	fb02 f303 	mul.w	r3, r2, r3
 800c770:	637b      	str	r3, [r7, #52]	@ 0x34
 800c772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c774:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c776:	fb02 f303 	mul.w	r3, r2, r3
 800c77a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c77c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c77e:	0c1b      	lsrs	r3, r3, #16
 800c780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c782:	4413      	add	r3, r2
 800c784:	633b      	str	r3, [r7, #48]	@ 0x30
 800c786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c788:	0c1b      	lsrs	r3, r3, #16
 800c78a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c78c:	4413      	add	r3, r2
 800c78e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c792:	041b      	lsls	r3, r3, #16
 800c794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c798:	041b      	lsls	r3, r3, #16
 800c79a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c79c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7a0:	4413      	add	r3, r2
 800c7a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	bf34      	ite	cc
 800c7ac:	2301      	movcc	r3, #1
 800c7ae:	2300      	movcs	r3, #0
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b6:	4413      	add	r3, r2
 800c7b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7be:	4413      	add	r3, r2
 800c7c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	bf34      	ite	cc
 800c7ca:	2301      	movcc	r3, #1
 800c7cc:	2300      	movcs	r3, #0
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d4:	4413      	add	r3, r2
 800c7d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7dc:	4413      	add	r3, r2
 800c7de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	bf34      	ite	cc
 800c7e8:	2301      	movcc	r3, #1
 800c7ea:	2300      	movcs	r3, #0
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f2:	4413      	add	r3, r2
 800c7f4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7fc:	4413      	add	r3, r2
 800c7fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c806:	429a      	cmp	r2, r3
 800c808:	bf34      	ite	cc
 800c80a:	2301      	movcc	r3, #1
 800c80c:	2300      	movcs	r3, #0
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	461a      	mov	r2, r3
 800c812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c814:	4413      	add	r3, r2
 800c816:	633b      	str	r3, [r7, #48]	@ 0x30
 800c818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c81a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	1d1a      	adds	r2, r3, #4
 800c820:	607a      	str	r2, [r7, #4]
 800c822:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c824:	601a      	str	r2, [r3, #0]

        MULADDC_CORE   MULADDC_CORE
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	0c1b      	lsrs	r3, r3, #16
 800c834:	643b      	str	r3, [r7, #64]	@ 0x40
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	3304      	adds	r3, #4
 800c83a:	60bb      	str	r3, [r7, #8]
 800c83c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c83e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c840:	fb02 f303 	mul.w	r3, r2, r3
 800c844:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c84a:	fb02 f303 	mul.w	r3, r2, r3
 800c84e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c852:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c854:	fb02 f303 	mul.w	r3, r2, r3
 800c858:	637b      	str	r3, [r7, #52]	@ 0x34
 800c85a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c85c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c85e:	fb02 f303 	mul.w	r3, r2, r3
 800c862:	633b      	str	r3, [r7, #48]	@ 0x30
 800c864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c866:	0c1b      	lsrs	r3, r3, #16
 800c868:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c86a:	4413      	add	r3, r2
 800c86c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c86e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c870:	0c1b      	lsrs	r3, r3, #16
 800c872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c874:	4413      	add	r3, r2
 800c876:	633b      	str	r3, [r7, #48]	@ 0x30
 800c878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c87a:	041b      	lsls	r3, r3, #16
 800c87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c880:	041b      	lsls	r3, r3, #16
 800c882:	637b      	str	r3, [r7, #52]	@ 0x34
 800c884:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c888:	4413      	add	r3, r2
 800c88a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c88c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c88e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c890:	429a      	cmp	r2, r3
 800c892:	bf34      	ite	cc
 800c894:	2301      	movcc	r3, #1
 800c896:	2300      	movcs	r3, #0
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	461a      	mov	r2, r3
 800c89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89e:	4413      	add	r3, r2
 800c8a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a6:	4413      	add	r3, r2
 800c8a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	bf34      	ite	cc
 800c8b2:	2301      	movcc	r3, #1
 800c8b4:	2300      	movcs	r3, #0
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8bc:	4413      	add	r3, r2
 800c8be:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8c4:	4413      	add	r3, r2
 800c8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	bf34      	ite	cc
 800c8d0:	2301      	movcc	r3, #1
 800c8d2:	2300      	movcs	r3, #0
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8da:	4413      	add	r3, r2
 800c8dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8e4:	4413      	add	r3, r2
 800c8e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	bf34      	ite	cc
 800c8f2:	2301      	movcc	r3, #1
 800c8f4:	2300      	movcs	r3, #0
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fc:	4413      	add	r3, r2
 800c8fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800c900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c902:	677b      	str	r3, [r7, #116]	@ 0x74
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	1d1a      	adds	r2, r3, #4
 800c908:	607a      	str	r2, [r7, #4]
 800c90a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	b29b      	uxth	r3, r3
 800c914:	647b      	str	r3, [r7, #68]	@ 0x44
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	0c1b      	lsrs	r3, r3, #16
 800c91c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	3304      	adds	r3, #4
 800c922:	60bb      	str	r3, [r7, #8]
 800c924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c928:	fb02 f303 	mul.w	r3, r2, r3
 800c92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c92e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c930:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c932:	fb02 f303 	mul.w	r3, r2, r3
 800c936:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c938:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c93a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c93c:	fb02 f303 	mul.w	r3, r2, r3
 800c940:	637b      	str	r3, [r7, #52]	@ 0x34
 800c942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c944:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c946:	fb02 f303 	mul.w	r3, r2, r3
 800c94a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c94c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c94e:	0c1b      	lsrs	r3, r3, #16
 800c950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c952:	4413      	add	r3, r2
 800c954:	633b      	str	r3, [r7, #48]	@ 0x30
 800c956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c958:	0c1b      	lsrs	r3, r3, #16
 800c95a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c95c:	4413      	add	r3, r2
 800c95e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c962:	041b      	lsls	r3, r3, #16
 800c964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c968:	041b      	lsls	r3, r3, #16
 800c96a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c96c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c970:	4413      	add	r3, r2
 800c972:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c978:	429a      	cmp	r2, r3
 800c97a:	bf34      	ite	cc
 800c97c:	2301      	movcc	r3, #1
 800c97e:	2300      	movcs	r3, #0
 800c980:	b2db      	uxtb	r3, r3
 800c982:	461a      	mov	r2, r3
 800c984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c986:	4413      	add	r3, r2
 800c988:	633b      	str	r3, [r7, #48]	@ 0x30
 800c98a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c98e:	4413      	add	r3, r2
 800c990:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c992:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c996:	429a      	cmp	r2, r3
 800c998:	bf34      	ite	cc
 800c99a:	2301      	movcc	r3, #1
 800c99c:	2300      	movcs	r3, #0
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a4:	4413      	add	r3, r2
 800c9a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9ac:	4413      	add	r3, r2
 800c9ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	bf34      	ite	cc
 800c9b8:	2301      	movcc	r3, #1
 800c9ba:	2300      	movcs	r3, #0
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	461a      	mov	r2, r3
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c2:	4413      	add	r3, r2
 800c9c4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9cc:	4413      	add	r3, r2
 800c9ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	bf34      	ite	cc
 800c9da:	2301      	movcc	r3, #1
 800c9dc:	2300      	movcs	r3, #0
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	461a      	mov	r2, r3
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e4:	4413      	add	r3, r2
 800c9e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	1d1a      	adds	r2, r3, #4
 800c9f0:	607a      	str	r2, [r7, #4]
 800c9f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9f4:	601a      	str	r2, [r3, #0]
        MULADDC_CORE   MULADDC_CORE
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	0c1b      	lsrs	r3, r3, #16
 800ca04:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	60bb      	str	r3, [r7, #8]
 800ca0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca10:	fb02 f303 	mul.w	r3, r2, r3
 800ca14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca1a:	fb02 f303 	mul.w	r3, r2, r3
 800ca1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca24:	fb02 f303 	mul.w	r3, r2, r3
 800ca28:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca2e:	fb02 f303 	mul.w	r3, r2, r3
 800ca32:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca36:	0c1b      	lsrs	r3, r3, #16
 800ca38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca3a:	4413      	add	r3, r2
 800ca3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca40:	0c1b      	lsrs	r3, r3, #16
 800ca42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca44:	4413      	add	r3, r2
 800ca46:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca4a:	041b      	lsls	r3, r3, #16
 800ca4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca50:	041b      	lsls	r3, r3, #16
 800ca52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca58:	4413      	add	r3, r2
 800ca5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca60:	429a      	cmp	r2, r3
 800ca62:	bf34      	ite	cc
 800ca64:	2301      	movcc	r3, #1
 800ca66:	2300      	movcs	r3, #0
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6e:	4413      	add	r3, r2
 800ca70:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca76:	4413      	add	r3, r2
 800ca78:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	bf34      	ite	cc
 800ca82:	2301      	movcc	r3, #1
 800ca84:	2300      	movcs	r3, #0
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	461a      	mov	r2, r3
 800ca8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca8c:	4413      	add	r3, r2
 800ca8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca94:	4413      	add	r3, r2
 800ca96:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	bf34      	ite	cc
 800caa0:	2301      	movcc	r3, #1
 800caa2:	2300      	movcs	r3, #0
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	461a      	mov	r2, r3
 800caa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caaa:	4413      	add	r3, r2
 800caac:	633b      	str	r3, [r7, #48]	@ 0x30
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cab4:	4413      	add	r3, r2
 800cab6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cabe:	429a      	cmp	r2, r3
 800cac0:	bf34      	ite	cc
 800cac2:	2301      	movcc	r3, #1
 800cac4:	2300      	movcs	r3, #0
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	461a      	mov	r2, r3
 800caca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cacc:	4413      	add	r3, r2
 800cace:	633b      	str	r3, [r7, #48]	@ 0x30
 800cad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cad2:	677b      	str	r3, [r7, #116]	@ 0x74
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	1d1a      	adds	r2, r3, #4
 800cad8:	607a      	str	r2, [r7, #4]
 800cada:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cadc:	601a      	str	r2, [r3, #0]
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	0c1b      	lsrs	r3, r3, #16
 800caec:	643b      	str	r3, [r7, #64]	@ 0x40
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	3304      	adds	r3, #4
 800caf2:	60bb      	str	r3, [r7, #8]
 800caf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800caf8:	fb02 f303 	mul.w	r3, r2, r3
 800cafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cafe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb02:	fb02 f303 	mul.w	r3, r2, r3
 800cb06:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb0c:	fb02 f303 	mul.w	r3, r2, r3
 800cb10:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb16:	fb02 f303 	mul.w	r3, r2, r3
 800cb1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb1e:	0c1b      	lsrs	r3, r3, #16
 800cb20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb22:	4413      	add	r3, r2
 800cb24:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb28:	0c1b      	lsrs	r3, r3, #16
 800cb2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb2c:	4413      	add	r3, r2
 800cb2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb32:	041b      	lsls	r3, r3, #16
 800cb34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb38:	041b      	lsls	r3, r3, #16
 800cb3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb40:	4413      	add	r3, r2
 800cb42:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	bf34      	ite	cc
 800cb4c:	2301      	movcc	r3, #1
 800cb4e:	2300      	movcs	r3, #0
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	461a      	mov	r2, r3
 800cb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb56:	4413      	add	r3, r2
 800cb58:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb5e:	4413      	add	r3, r2
 800cb60:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb66:	429a      	cmp	r2, r3
 800cb68:	bf34      	ite	cc
 800cb6a:	2301      	movcc	r3, #1
 800cb6c:	2300      	movcs	r3, #0
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb74:	4413      	add	r3, r2
 800cb76:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb7c:	4413      	add	r3, r2
 800cb7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cb80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cb84:	429a      	cmp	r2, r3
 800cb86:	bf34      	ite	cc
 800cb88:	2301      	movcc	r3, #1
 800cb8a:	2300      	movcs	r3, #0
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	461a      	mov	r2, r3
 800cb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb92:	4413      	add	r3, r2
 800cb94:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb9c:	4413      	add	r3, r2
 800cb9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cba6:	429a      	cmp	r2, r3
 800cba8:	bf34      	ite	cc
 800cbaa:	2301      	movcc	r3, #1
 800cbac:	2300      	movcs	r3, #0
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb4:	4413      	add	r3, r2
 800cbb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbba:	677b      	str	r3, [r7, #116]	@ 0x74
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	1d1a      	adds	r2, r3, #4
 800cbc0:	607a      	str	r2, [r7, #4]
 800cbc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbc4:	601a      	str	r2, [r3, #0]
    for( ; i >= 8; i -= 8 )
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	3b08      	subs	r3, #8
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2b07      	cmp	r3, #7
 800cbd0:	f63f ac53 	bhi.w	800c47a <mpi_mul_hlp+0xeb6>
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
 800cbd4:	e07c      	b.n	800ccd0 <mpi_mul_hlp+0x170c>
    {
        MULADDC_INIT
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	0c1b      	lsrs	r3, r3, #16
 800cbe0:	66bb      	str	r3, [r7, #104]	@ 0x68
        MULADDC_CORE
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	667b      	str	r3, [r7, #100]	@ 0x64
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	0c1b      	lsrs	r3, r3, #16
 800cbf0:	663b      	str	r3, [r7, #96]	@ 0x60
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	60bb      	str	r3, [r7, #8]
 800cbf8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cbfa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cbfc:	fb02 f303 	mul.w	r3, r2, r3
 800cc00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc06:	fb02 f303 	mul.w	r3, r2, r3
 800cc0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cc10:	fb02 f303 	mul.w	r3, r2, r3
 800cc14:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc18:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cc1a:	fb02 f303 	mul.w	r3, r2, r3
 800cc1e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc22:	0c1b      	lsrs	r3, r3, #16
 800cc24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc26:	4413      	add	r3, r2
 800cc28:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc2c:	0c1b      	lsrs	r3, r3, #16
 800cc2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc30:	4413      	add	r3, r2
 800cc32:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc36:	041b      	lsls	r3, r3, #16
 800cc38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc3c:	041b      	lsls	r3, r3, #16
 800cc3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc44:	4413      	add	r3, r2
 800cc46:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	bf34      	ite	cc
 800cc50:	2301      	movcc	r3, #1
 800cc52:	2300      	movcs	r3, #0
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	461a      	mov	r2, r3
 800cc58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc5a:	4413      	add	r3, r2
 800cc5c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc62:	4413      	add	r3, r2
 800cc64:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	bf34      	ite	cc
 800cc6e:	2301      	movcc	r3, #1
 800cc70:	2300      	movcs	r3, #0
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	461a      	mov	r2, r3
 800cc76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc78:	4413      	add	r3, r2
 800cc7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc80:	4413      	add	r3, r2
 800cc82:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	bf34      	ite	cc
 800cc8c:	2301      	movcc	r3, #1
 800cc8e:	2300      	movcs	r3, #0
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	461a      	mov	r2, r3
 800cc94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc96:	4413      	add	r3, r2
 800cc98:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cca0:	4413      	add	r3, r2
 800cca2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	bf34      	ite	cc
 800ccae:	2301      	movcc	r3, #1
 800ccb0:	2300      	movcs	r3, #0
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccb8:	4413      	add	r3, r2
 800ccba:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccbe:	677b      	str	r3, [r7, #116]	@ 0x74
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	1d1a      	adds	r2, r3, #4
 800ccc4:	607a      	str	r2, [r7, #4]
 800ccc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ccc8:	601a      	str	r2, [r3, #0]
    for( ; i > 0; i-- )
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f47f af7f 	bne.w	800cbd6 <mpi_mul_hlp+0x1612>
        MULADDC_STOP
    }
#endif /* MULADDC_HUIT */

    t++;
 800ccd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ccda:	3301      	adds	r3, #1
 800ccdc:	673b      	str	r3, [r7, #112]	@ 0x70

    do {
        *d += c; c = ( *d < c ); d++;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cce4:	441a      	add	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	bf8c      	ite	hi
 800ccf4:	2301      	movhi	r3, #1
 800ccf6:	2300      	movls	r3, #0
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	677b      	str	r3, [r7, #116]	@ 0x74
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	3304      	adds	r3, #4
 800cd00:	607b      	str	r3, [r7, #4]
    }
    while( c != 0 );
 800cd02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1ea      	bne.n	800ccde <mpi_mul_hlp+0x171a>
}
 800cd08:	bf00      	nop
 800cd0a:	bf00      	nop
 800cd0c:	377c      	adds	r7, #124	@ 0x7c
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <mbedtls_mpi_mul_mpi>:

/*
 * Baseline multiplication: X = A * B  (HAC 14.12)
 */
int mbedtls_mpi_mul_mpi( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800cd16:	b590      	push	{r4, r7, lr}
 800cd18:	b08f      	sub	sp, #60	@ 0x3c
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	60f8      	str	r0, [r7, #12]
 800cd1e:	60b9      	str	r1, [r7, #8]
 800cd20:	607a      	str	r2, [r7, #4]
    mbedtls_mpi TA, TB;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800cd22:	f107 0320 	add.w	r3, r7, #32
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fd fa75 	bl	800a216 <mbedtls_mpi_init>
 800cd2c:	f107 0314 	add.w	r3, r7, #20
 800cd30:	4618      	mov	r0, r3
 800cd32:	f7fd fa70 	bl	800a216 <mbedtls_mpi_init>

    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d10c      	bne.n	800cd58 <mbedtls_mpi_mul_mpi+0x42>
 800cd3e:	f107 0320 	add.w	r3, r7, #32
 800cd42:	68b9      	ldr	r1, [r7, #8]
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fd fb48 	bl	800a3da <mbedtls_mpi_copy>
 800cd4a:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d17b      	bne.n	800ce4a <mbedtls_mpi_mul_mpi+0x134>
 800cd52:	f107 0320 	add.w	r3, r7, #32
 800cd56:	60bb      	str	r3, [r7, #8]
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d10c      	bne.n	800cd7a <mbedtls_mpi_mul_mpi+0x64>
 800cd60:	f107 0314 	add.w	r3, r7, #20
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fd fb37 	bl	800a3da <mbedtls_mpi_copy>
 800cd6c:	6378      	str	r0, [r7, #52]	@ 0x34
 800cd6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d16a      	bne.n	800ce4a <mbedtls_mpi_mul_mpi+0x134>
 800cd74:	f107 0314 	add.w	r3, r7, #20
 800cd78:	607b      	str	r3, [r7, #4]

    for( i = A->n; i > 0; i-- )
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd80:	e00d      	b.n	800cd9e <mbedtls_mpi_mul_mpi+0x88>
        if( A->p[i - 1] != 0 )
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	689a      	ldr	r2, [r3, #8]
 800cd86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd88:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cd8c:	440b      	add	r3, r1
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d106      	bne.n	800cda6 <mbedtls_mpi_mul_mpi+0x90>
    for( i = A->n; i > 0; i-- )
 800cd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1ee      	bne.n	800cd82 <mbedtls_mpi_mul_mpi+0x6c>
 800cda4:	e000      	b.n	800cda8 <mbedtls_mpi_mul_mpi+0x92>
            break;
 800cda6:	bf00      	nop

    for( j = B->n; j > 0; j-- )
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdae:	e00d      	b.n	800cdcc <mbedtls_mpi_mul_mpi+0xb6>
        if( B->p[j - 1] != 0 )
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	689a      	ldr	r2, [r3, #8]
 800cdb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdb6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cdba:	440b      	add	r3, r1
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4413      	add	r3, r2
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <mbedtls_mpi_mul_mpi+0xbe>
    for( j = B->n; j > 0; j-- )
 800cdc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1ee      	bne.n	800cdb0 <mbedtls_mpi_mul_mpi+0x9a>
 800cdd2:	e000      	b.n	800cdd6 <mbedtls_mpi_mul_mpi+0xc0>
            break;
 800cdd4:	bf00      	nop

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
 800cdd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	4413      	add	r3, r2
 800cddc:	4619      	mov	r1, r3
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f7fd fa52 	bl	800a288 <mbedtls_mpi_grow>
 800cde4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cde6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d12e      	bne.n	800ce4a <mbedtls_mpi_mul_mpi+0x134>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800cdec:	2100      	movs	r1, #0
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f7fd fc52 	bl	800a698 <mbedtls_mpi_lset>
 800cdf4:	6378      	str	r0, [r7, #52]	@ 0x34
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d126      	bne.n	800ce4a <mbedtls_mpi_mul_mpi+0x134>

    for( ; j > 0; j-- )
 800cdfc:	e01a      	b.n	800ce34 <mbedtls_mpi_mul_mpi+0x11e>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	6898      	ldr	r0, [r3, #8]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	689a      	ldr	r2, [r3, #8]
 800ce06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce08:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ce0c:	440b      	add	r3, r1
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	18d4      	adds	r4, r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	689a      	ldr	r2, [r3, #8]
 800ce16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce18:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ce1c:	440b      	add	r3, r1
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4413      	add	r3, r2
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4622      	mov	r2, r4
 800ce26:	4601      	mov	r1, r0
 800ce28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ce2a:	f7fe fbcb 	bl	800b5c4 <mpi_mul_hlp>
    for( ; j > 0; j-- )
 800ce2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce30:	3b01      	subs	r3, #1
 800ce32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1e1      	bne.n	800cdfe <mbedtls_mpi_mul_mpi+0xe8>

    X->s = A->s * B->s;
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	6812      	ldr	r2, [r2, #0]
 800ce42:	fb03 f202 	mul.w	r2, r3, r2
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	601a      	str	r2, [r3, #0]

cleanup:

    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
 800ce4a:	f107 0314 	add.w	r3, r7, #20
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fd f9f4 	bl	800a23c <mbedtls_mpi_free>
 800ce54:	f107 0320 	add.w	r3, r7, #32
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fd f9ef 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	373c      	adds	r7, #60	@ 0x3c
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd90      	pop	{r4, r7, pc}

0800ce68 <mbedtls_mpi_mul_int>:

/*
 * Baseline multiplication: X = A * b
 */
int mbedtls_mpi_mul_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_uint b )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b088      	sub	sp, #32
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
    mbedtls_mpi _B;
    mbedtls_mpi_uint p[1];
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );

    _B.s = 1;
 800ce74:	2301      	movs	r3, #1
 800ce76:	617b      	str	r3, [r7, #20]
    _B.n = 1;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	61bb      	str	r3, [r7, #24]
    _B.p = p;
 800ce7c:	f107 0310 	add.w	r3, r7, #16
 800ce80:	61fb      	str	r3, [r7, #28]
    p[0] = b;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	613b      	str	r3, [r7, #16]

    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
 800ce86:	f107 0314 	add.w	r3, r7, #20
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	68b9      	ldr	r1, [r7, #8]
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f7ff ff41 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800ce94:	4603      	mov	r3, r0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3720      	adds	r7, #32
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <mbedtls_int_div_int>:
 * Unsigned integer divide - double mbedtls_mpi_uint dividend, u1/u0, and
 * mbedtls_mpi_uint divisor, d
 */
static mbedtls_mpi_uint mbedtls_int_div_int( mbedtls_mpi_uint u1,
            mbedtls_mpi_uint u0, mbedtls_mpi_uint d, mbedtls_mpi_uint *r )
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b090      	sub	sp, #64	@ 0x40
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	60f8      	str	r0, [r7, #12]
 800cea6:	60b9      	str	r1, [r7, #8]
 800cea8:	607a      	str	r2, [r7, #4]
 800ceaa:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_HAVE_UDBL)
    mbedtls_t_udbl dividend, quotient;
#else
    const mbedtls_mpi_uint radix = (mbedtls_mpi_uint) 1 << biH;
 800ceac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ceb0:	633b      	str	r3, [r7, #48]	@ 0x30
    const mbedtls_mpi_uint uint_halfword_mask = ( (mbedtls_mpi_uint) 1 << biH ) - 1;
 800ceb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ceb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

    /*
     * Check for overflow
     */
    if( 0 == d || u1 >= d )
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d003      	beq.n	800cec6 <mbedtls_int_div_int+0x28>
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d309      	bcc.n	800ceda <mbedtls_int_div_int+0x3c>
    {
        if (r != NULL) *r = ~0;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d003      	beq.n	800ced4 <mbedtls_int_div_int+0x36>
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	f04f 32ff 	mov.w	r2, #4294967295
 800ced2:	601a      	str	r2, [r3, #0]

        return ( ~0 );
 800ced4:	f04f 33ff 	mov.w	r3, #4294967295
 800ced8:	e0a7      	b.n	800d02a <mbedtls_int_div_int+0x18c>
     */

    /*
     * Normalize the divisor, d, and dividend, u0, u1
     */
    s = mbedtls_clz( d );
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7fd fcb1 	bl	800a842 <mbedtls_clz>
 800cee0:	62b8      	str	r0, [r7, #40]	@ 0x28
    d = d << s;
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceea:	607b      	str	r3, [r7, #4]

    u1 = u1 << s;
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef0:	fa02 f303 	lsl.w	r3, r2, r3
 800cef4:	60fb      	str	r3, [r7, #12]
    u1 |= ( u0 >> ( biL - s ) ) & ( -(mbedtls_mpi_sint)s >> ( biL - 1 ) );
 800cef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef8:	f1c3 0320 	rsb	r3, r3, #32
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	fa22 f303 	lsr.w	r3, r2, r3
 800cf02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf04:	4252      	negs	r2, r2
 800cf06:	17d2      	asrs	r2, r2, #31
 800cf08:	4013      	ands	r3, r2
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	60fb      	str	r3, [r7, #12]
    u0 =  u0 << s;
 800cf10:	68ba      	ldr	r2, [r7, #8]
 800cf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf14:	fa02 f303 	lsl.w	r3, r2, r3
 800cf18:	60bb      	str	r3, [r7, #8]

    d1 = d >> biH;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	0c1b      	lsrs	r3, r3, #16
 800cf1e:	627b      	str	r3, [r7, #36]	@ 0x24
    d0 = d & uint_halfword_mask;
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf24:	4013      	ands	r3, r2
 800cf26:	623b      	str	r3, [r7, #32]

    u0_msw = u0 >> biH;
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	0c1b      	lsrs	r3, r3, #16
 800cf2c:	61fb      	str	r3, [r7, #28]
    u0_lsw = u0 & uint_halfword_mask;
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf32:	4013      	ands	r3, r2
 800cf34:	61bb      	str	r3, [r7, #24]

    /*
     * Find the first quotient and remainder
     */
    q1 = u1 / d1;
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf3e:	63bb      	str	r3, [r7, #56]	@ 0x38
    r0 = u1 - d1 * q1;
 800cf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf44:	fb02 f303 	mul.w	r3, r2, r3
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	637b      	str	r3, [r7, #52]	@ 0x34

    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 800cf4e:	e00a      	b.n	800cf66 <mbedtls_int_div_int+0xc8>
    {
        q1 -= 1;
 800cf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf52:	3b01      	subs	r3, #1
 800cf54:	63bb      	str	r3, [r7, #56]	@ 0x38
        r0 += d1;
 800cf56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5a:	4413      	add	r3, r2
 800cf5c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ( r0 >= radix ) break;
 800cf5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d210      	bcs.n	800cf88 <mbedtls_int_div_int+0xea>
    while( q1 >= radix || ( q1 * d0 > radix * r0 + u0_msw ) )
 800cf66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d2f0      	bcs.n	800cf50 <mbedtls_int_div_int+0xb2>
 800cf6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf70:	6a3a      	ldr	r2, [r7, #32]
 800cf72:	fb03 f202 	mul.w	r2, r3, r2
 800cf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf78:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf7a:	fb03 f101 	mul.w	r1, r3, r1
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	440b      	add	r3, r1
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d8e4      	bhi.n	800cf50 <mbedtls_int_div_int+0xb2>
 800cf86:	e000      	b.n	800cf8a <mbedtls_int_div_int+0xec>
        if ( r0 >= radix ) break;
 800cf88:	bf00      	nop
    }

    rAX = ( u1 * radix ) + ( u0_msw - q1 * d );
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf8e:	fb03 f202 	mul.w	r2, r3, r2
 800cf92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	fb01 f303 	mul.w	r3, r1, r3
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	69fa      	ldr	r2, [r7, #28]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	617b      	str	r3, [r7, #20]
    q0 = rAX / d1;
 800cfa2:	697a      	ldr	r2, [r7, #20]
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfa6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    r0 = rAX - q0 * d1;
 800cfac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfb0:	fb02 f303 	mul.w	r3, r2, r3
 800cfb4:	697a      	ldr	r2, [r7, #20]
 800cfb6:	1ad3      	subs	r3, r2, r3
 800cfb8:	637b      	str	r3, [r7, #52]	@ 0x34

    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 800cfba:	e00a      	b.n	800cfd2 <mbedtls_int_div_int+0x134>
    {
        q0 -= 1;
 800cfbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfbe:	3b01      	subs	r3, #1
 800cfc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        r0 += d1;
 800cfc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc6:	4413      	add	r3, r2
 800cfc8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ( r0 >= radix ) break;
 800cfca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cfcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d210      	bcs.n	800cff4 <mbedtls_int_div_int+0x156>
    while( q0 >= radix || ( q0 * d0 > radix * r0 + u0_lsw ) )
 800cfd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d2f0      	bcs.n	800cfbc <mbedtls_int_div_int+0x11e>
 800cfda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfdc:	6a3a      	ldr	r2, [r7, #32]
 800cfde:	fb03 f202 	mul.w	r2, r3, r2
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cfe6:	fb03 f101 	mul.w	r1, r3, r1
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	440b      	add	r3, r1
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d8e4      	bhi.n	800cfbc <mbedtls_int_div_int+0x11e>
 800cff2:	e000      	b.n	800cff6 <mbedtls_int_div_int+0x158>
        if ( r0 >= radix ) break;
 800cff4:	bf00      	nop
    }

    if (r != NULL)
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00e      	beq.n	800d01a <mbedtls_int_div_int+0x17c>
        *r = ( rAX * radix + u0_lsw - q0 * d ) >> s;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d000:	fb03 f202 	mul.w	r2, r3, r2
 800d004:	69bb      	ldr	r3, [r7, #24]
 800d006:	441a      	add	r2, r3
 800d008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d00a:	6879      	ldr	r1, [r7, #4]
 800d00c:	fb01 f303 	mul.w	r3, r1, r3
 800d010:	1ad2      	subs	r2, r2, r3
 800d012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d014:	40da      	lsrs	r2, r3
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	601a      	str	r2, [r3, #0]

    quotient = q1 * radix + q0;
 800d01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d01c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d01e:	fb02 f303 	mul.w	r3, r2, r3
 800d022:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d024:	4413      	add	r3, r2
 800d026:	613b      	str	r3, [r7, #16]

    return quotient;
 800d028:	693b      	ldr	r3, [r7, #16]
#endif
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3740      	adds	r7, #64	@ 0x40
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
	...

0800d034 <mbedtls_mpi_div_mpi>:
/*
 * Division by mbedtls_mpi: A = Q * B + R  (HAC 14.20)
 */
int mbedtls_mpi_div_mpi( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A,
                         const mbedtls_mpi *B )
{
 800d034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d036:	b099      	sub	sp, #100	@ 0x64
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
 800d040:	603b      	str	r3, [r7, #0]
    size_t i, n, t, k;
    mbedtls_mpi X, Y, Z, T1, T2;
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
 800d042:	2100      	movs	r1, #0
 800d044:	6838      	ldr	r0, [r7, #0]
 800d046:	f7fe f862 	bl	800b10e <mbedtls_mpi_cmp_int>
 800d04a:	4603      	mov	r3, r0
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d102      	bne.n	800d056 <mbedtls_mpi_div_mpi+0x22>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
 800d050:	f06f 030b 	mvn.w	r3, #11
 800d054:	e289      	b.n	800d56a <mbedtls_mpi_div_mpi+0x536>

    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800d056:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fd f8db 	bl	800a216 <mbedtls_mpi_init>
 800d060:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d064:	4618      	mov	r0, r3
 800d066:	f7fd f8d6 	bl	800a216 <mbedtls_mpi_init>
 800d06a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fd f8d1 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 );
 800d074:	f107 031c 	add.w	r3, r7, #28
 800d078:	4618      	mov	r0, r3
 800d07a:	f7fd f8cc 	bl	800a216 <mbedtls_mpi_init>
 800d07e:	f107 0310 	add.w	r3, r7, #16
 800d082:	4618      	mov	r0, r3
 800d084:	f7fd f8c7 	bl	800a216 <mbedtls_mpi_init>

    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
 800d088:	6839      	ldr	r1, [r7, #0]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7fd ff22 	bl	800aed4 <mbedtls_mpi_cmp_abs>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	da19      	bge.n	800d0ca <mbedtls_mpi_div_mpi+0x96>
    {
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d008      	beq.n	800d0ae <mbedtls_mpi_div_mpi+0x7a>
 800d09c:	2100      	movs	r1, #0
 800d09e:	68f8      	ldr	r0, [r7, #12]
 800d0a0:	f7fd fafa 	bl	800a698 <mbedtls_mpi_lset>
 800d0a4:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d0a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f040 8244 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d008      	beq.n	800d0c6 <mbedtls_mpi_div_mpi+0x92>
 800d0b4:	6879      	ldr	r1, [r7, #4]
 800d0b6:	68b8      	ldr	r0, [r7, #8]
 800d0b8:	f7fd f98f 	bl	800a3da <mbedtls_mpi_copy>
 800d0bc:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d0be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f040 8238 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
        return( 0 );
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	e24f      	b.n	800d56a <mbedtls_mpi_div_mpi+0x536>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
 800d0ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d0ce:	6879      	ldr	r1, [r7, #4]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7fd f982 	bl	800a3da <mbedtls_mpi_copy>
 800d0d6:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d0d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	f040 822b 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
 800d0e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fd f977 	bl	800a3da <mbedtls_mpi_copy>
 800d0ec:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d0ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 8220 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
    X.s = Y.s = 1;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0fc:	643b      	str	r3, [r7, #64]	@ 0x40

    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	1c9a      	adds	r2, r3, #2
 800d104:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d108:	4611      	mov	r1, r2
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fd f8bc 	bl	800a288 <mbedtls_mpi_grow>
 800d110:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d112:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d114:	2b00      	cmp	r3, #0
 800d116:	f040 820e 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
 800d11a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d11e:	2100      	movs	r1, #0
 800d120:	4618      	mov	r0, r3
 800d122:	f7fd fab9 	bl	800a698 <mbedtls_mpi_lset>
 800d126:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d128:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f040 8203 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
 800d130:	f107 031c 	add.w	r3, r7, #28
 800d134:	2102      	movs	r1, #2
 800d136:	4618      	mov	r0, r3
 800d138:	f7fd f8a6 	bl	800a288 <mbedtls_mpi_grow>
 800d13c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d13e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d140:	2b00      	cmp	r3, #0
 800d142:	f040 81f8 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
 800d146:	f107 0310 	add.w	r3, r7, #16
 800d14a:	2103      	movs	r1, #3
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fd f89b 	bl	800a288 <mbedtls_mpi_grow>
 800d152:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d156:	2b00      	cmp	r3, #0
 800d158:	f040 81ed 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>

    k = mbedtls_mpi_bitlen( &Y ) % biL;
 800d15c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d160:	4618      	mov	r0, r3
 800d162:	f7fd fb8f 	bl	800a884 <mbedtls_mpi_bitlen>
 800d166:	4603      	mov	r3, r0
 800d168:	f003 031f 	and.w	r3, r3, #31
 800d16c:	657b      	str	r3, [r7, #84]	@ 0x54
    if( k < biL - 1 )
 800d16e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d170:	2b1e      	cmp	r3, #30
 800d172:	d819      	bhi.n	800d1a8 <mbedtls_mpi_div_mpi+0x174>
    {
        k = biL - 1 - k;
 800d174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d176:	f1c3 031f 	rsb	r3, r3, #31
 800d17a:	657b      	str	r3, [r7, #84]	@ 0x54
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
 800d17c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d180:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d182:	4618      	mov	r0, r3
 800d184:	f7fd fd69 	bl	800ac5a <mbedtls_mpi_shift_l>
 800d188:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d18a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f040 81d2 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
 800d192:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d196:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d198:	4618      	mov	r0, r3
 800d19a:	f7fd fd5e 	bl	800ac5a <mbedtls_mpi_shift_l>
 800d19e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d1a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <mbedtls_mpi_div_mpi+0x178>
 800d1a6:	e1c6      	b.n	800d536 <mbedtls_mpi_div_mpi+0x502>
    }
    else k = 0;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	657b      	str	r3, [r7, #84]	@ 0x54

    n = X.n - 1;
 800d1ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	653b      	str	r3, [r7, #80]	@ 0x50
    t = Y.n - 1;
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
 800d1b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1bc:	1ad3      	subs	r3, r2, r3
 800d1be:	015a      	lsls	r2, r3, #5
 800d1c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d1c4:	4611      	mov	r1, r2
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fd fd47 	bl	800ac5a <mbedtls_mpi_shift_l>
 800d1cc:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d1ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f040 81b0 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>

    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800d1d6:	e016      	b.n	800d206 <mbedtls_mpi_div_mpi+0x1d2>
    {
        Z.p[n - t]++;
 800d1d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d1dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1de:	1acb      	subs	r3, r1, r3
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4413      	add	r3, r2
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	3201      	adds	r2, #1
 800d1e8:	601a      	str	r2, [r3, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
 800d1ea:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d1ee:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d1f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fe f958 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800d1fc:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d1fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d200:	2b00      	cmp	r3, #0
 800d202:	f040 8198 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
 800d206:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d20a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d20e:	4611      	mov	r1, r2
 800d210:	4618      	mov	r0, r3
 800d212:	f7fd fee1 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	dadd      	bge.n	800d1d8 <mbedtls_mpi_div_mpi+0x1a4>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
 800d21c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d21e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	015a      	lsls	r2, r3, #5
 800d224:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d228:	4611      	mov	r1, r2
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fd fdb7 	bl	800ad9e <mbedtls_mpi_shift_r>
 800d230:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d234:	2b00      	cmp	r3, #0
 800d236:	f040 817e 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>

    for( i = n; i > t ; i-- )
 800d23a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d23c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d23e:	e13a      	b.n	800d4b6 <mbedtls_mpi_div_mpi+0x482>
    {
        if( X.p[i] >= Y.p[t] )
 800d240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	4413      	add	r3, r2
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d24c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	440b      	add	r3, r1
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	429a      	cmp	r2, r3
 800d256:	d30c      	bcc.n	800d272 <mbedtls_mpi_div_mpi+0x23e>
            Z.p[i - t - 1] = ~0;
 800d258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d25a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d25c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d25e:	1ac9      	subs	r1, r1, r3
 800d260:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d264:	440b      	add	r3, r1
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	f04f 32ff 	mov.w	r2, #4294967295
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	e021      	b.n	800d2b6 <mbedtls_mpi_div_mpi+0x282>
        else
        {
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800d272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d274:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	6818      	ldr	r0, [r3, #0]
 800d27c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d27e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d280:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d284:	440b      	add	r3, r1
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	4413      	add	r3, r2
 800d28a:	681d      	ldr	r5, [r3, #0]
                                                            Y.p[t], NULL);
 800d28c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d28e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4413      	add	r3, r2
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
 800d294:	681e      	ldr	r6, [r3, #0]
 800d296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d298:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d29a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d29c:	1ac9      	subs	r1, r1, r3
 800d29e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2a2:	440b      	add	r3, r1
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	18d4      	adds	r4, r2, r3
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	4632      	mov	r2, r6
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	f7ff fdf6 	bl	800ce9e <mbedtls_int_div_int>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	6023      	str	r3, [r4, #0]
        }

        Z.p[i - t - 1]++;
 800d2b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2b8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2bc:	1ac9      	subs	r1, r1, r3
 800d2be:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2c2:	440b      	add	r3, r1
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	3201      	adds	r2, #1
 800d2cc:	601a      	str	r2, [r3, #0]
        do
        {
            Z.p[i - t - 1]--;
 800d2ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d2d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2d4:	1ac9      	subs	r1, r1, r3
 800d2d6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d2da:	440b      	add	r3, r1
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	3a01      	subs	r2, #1
 800d2e4:	601a      	str	r2, [r3, #0]

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
 800d2e6:	f107 031c 	add.w	r3, r7, #28
 800d2ea:	2100      	movs	r1, #0
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fd f9d3 	bl	800a698 <mbedtls_mpi_lset>
 800d2f2:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d2f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f040 811d 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
 800d2fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d008      	beq.n	800d314 <mbedtls_mpi_div_mpi+0x2e0>
 800d302:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d304:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800d306:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d30a:	440b      	add	r3, r1
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	e000      	b.n	800d316 <mbedtls_mpi_div_mpi+0x2e2>
 800d314:	2300      	movs	r3, #0
 800d316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d318:	6013      	str	r3, [r2, #0]
            T1.p[1] = Y.p[t];
 800d31a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	441a      	add	r2, r3
 800d322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d324:	3304      	adds	r3, #4
 800d326:	6812      	ldr	r2, [r2, #0]
 800d328:	601a      	str	r2, [r3, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
 800d32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d32c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d32e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d330:	1ac9      	subs	r1, r1, r3
 800d332:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d336:	440b      	add	r3, r1
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	f107 011c 	add.w	r1, r7, #28
 800d342:	f107 031c 	add.w	r3, r7, #28
 800d346:	4618      	mov	r0, r3
 800d348:	f7ff fd8e 	bl	800ce68 <mbedtls_mpi_mul_int>
 800d34c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d34e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d350:	2b00      	cmp	r3, #0
 800d352:	f040 80f0 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>

            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
 800d356:	f107 0310 	add.w	r3, r7, #16
 800d35a:	2100      	movs	r1, #0
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fd f99b 	bl	800a698 <mbedtls_mpi_lset>
 800d362:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d364:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d366:	2b00      	cmp	r3, #0
 800d368:	f040 80e5 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
 800d36c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d907      	bls.n	800d382 <mbedtls_mpi_div_mpi+0x34e>
 800d372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d374:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d376:	4b7f      	ldr	r3, [pc, #508]	@ (800d574 <mbedtls_mpi_div_mpi+0x540>)
 800d378:	440b      	add	r3, r1
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	e000      	b.n	800d384 <mbedtls_mpi_div_mpi+0x350>
 800d382:	2300      	movs	r3, #0
 800d384:	69ba      	ldr	r2, [r7, #24]
 800d386:	6013      	str	r3, [r2, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
 800d388:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d008      	beq.n	800d3a0 <mbedtls_mpi_div_mpi+0x36c>
 800d38e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d390:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d392:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d396:	440b      	add	r3, r1
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	e000      	b.n	800d3a2 <mbedtls_mpi_div_mpi+0x36e>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	69ba      	ldr	r2, [r7, #24]
 800d3a4:	3204      	adds	r2, #4
 800d3a6:	6013      	str	r3, [r2, #0]
            T2.p[2] = X.p[i];
 800d3a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d3aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	441a      	add	r2, r3
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	6812      	ldr	r2, [r2, #0]
 800d3b6:	601a      	str	r2, [r3, #0]
        }
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
 800d3b8:	f107 0210 	add.w	r2, r7, #16
 800d3bc:	f107 031c 	add.w	r3, r7, #28
 800d3c0:	4611      	mov	r1, r2
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fd fe08 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f73f af7f 	bgt.w	800d2ce <mbedtls_mpi_div_mpi+0x29a>

        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
 800d3d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3d2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d3d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3d6:	1ac9      	subs	r1, r1, r3
 800d3d8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d3dc:	440b      	add	r3, r1
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4413      	add	r3, r2
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800d3e8:	f107 031c 	add.w	r3, r7, #28
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7ff fd3b 	bl	800ce68 <mbedtls_mpi_mul_int>
 800d3f2:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d3f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	f040 809d 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
 800d3fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	015a      	lsls	r2, r3, #5
 800d406:	f107 031c 	add.w	r3, r7, #28
 800d40a:	4611      	mov	r1, r2
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fd fc24 	bl	800ac5a <mbedtls_mpi_shift_l>
 800d412:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d414:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d416:	2b00      	cmp	r3, #0
 800d418:	f040 808d 	bne.w	800d536 <mbedtls_mpi_div_mpi+0x502>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
 800d41c:	f107 021c 	add.w	r2, r7, #28
 800d420:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d424:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fe f83f 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800d42e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d430:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d432:	2b00      	cmp	r3, #0
 800d434:	d17f      	bne.n	800d536 <mbedtls_mpi_div_mpi+0x502>

        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
 800d436:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d43a:	2100      	movs	r1, #0
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fd fe66 	bl	800b10e <mbedtls_mpi_cmp_int>
 800d442:	4603      	mov	r3, r0
 800d444:	2b00      	cmp	r3, #0
 800d446:	da33      	bge.n	800d4b0 <mbedtls_mpi_div_mpi+0x47c>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
 800d448:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d44c:	f107 031c 	add.w	r3, r7, #28
 800d450:	4611      	mov	r1, r2
 800d452:	4618      	mov	r0, r3
 800d454:	f7fc ffc1 	bl	800a3da <mbedtls_mpi_copy>
 800d458:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d45a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d16a      	bne.n	800d536 <mbedtls_mpi_div_mpi+0x502>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
 800d460:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	3b01      	subs	r3, #1
 800d468:	015a      	lsls	r2, r3, #5
 800d46a:	f107 031c 	add.w	r3, r7, #28
 800d46e:	4611      	mov	r1, r2
 800d470:	4618      	mov	r0, r3
 800d472:	f7fd fbf2 	bl	800ac5a <mbedtls_mpi_shift_l>
 800d476:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d478:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d15b      	bne.n	800d536 <mbedtls_mpi_div_mpi+0x502>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
 800d47e:	f107 021c 	add.w	r2, r7, #28
 800d482:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d486:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fd ffca 	bl	800b424 <mbedtls_mpi_add_mpi>
 800d490:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d492:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d494:	2b00      	cmp	r3, #0
 800d496:	d14e      	bne.n	800d536 <mbedtls_mpi_div_mpi+0x502>
            Z.p[i - t - 1]--;
 800d498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d49a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d49c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d49e:	1ac9      	subs	r1, r1, r3
 800d4a0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d4a4:	440b      	add	r3, r1
 800d4a6:	009b      	lsls	r3, r3, #2
 800d4a8:	4413      	add	r3, r2
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	3a01      	subs	r2, #1
 800d4ae:	601a      	str	r2, [r3, #0]
    for( i = n; i > t ; i-- )
 800d4b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d4b2:	3b01      	subs	r3, #1
 800d4b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	f63f aec0 	bhi.w	800d240 <mbedtls_mpi_div_mpi+0x20c>
        }
    }

    if( Q != NULL )
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d011      	beq.n	800d4ea <mbedtls_mpi_div_mpi+0x4b6>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
 800d4c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f7fc ff84 	bl	800a3da <mbedtls_mpi_copy>
 800d4d2:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d4d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d12d      	bne.n	800d536 <mbedtls_mpi_div_mpi+0x502>
        Q->s = A->s * B->s;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	6812      	ldr	r2, [r2, #0]
 800d4e2:	fb03 f202 	mul.w	r2, r3, r2
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	601a      	str	r2, [r3, #0]
    }

    if( R != NULL )
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d021      	beq.n	800d534 <mbedtls_mpi_div_mpi+0x500>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
 800d4f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d4f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fd fc51 	bl	800ad9e <mbedtls_mpi_shift_r>
 800d4fc:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d4fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d500:	2b00      	cmp	r3, #0
 800d502:	d118      	bne.n	800d536 <mbedtls_mpi_div_mpi+0x502>
        X.s = A->s;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	643b      	str	r3, [r7, #64]	@ 0x40
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
 800d50a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d50e:	4619      	mov	r1, r3
 800d510:	68b8      	ldr	r0, [r7, #8]
 800d512:	f7fc ff62 	bl	800a3da <mbedtls_mpi_copy>
 800d516:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800d518:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10b      	bne.n	800d536 <mbedtls_mpi_div_mpi+0x502>

        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
 800d51e:	2100      	movs	r1, #0
 800d520:	68b8      	ldr	r0, [r7, #8]
 800d522:	f7fd fdf4 	bl	800b10e <mbedtls_mpi_cmp_int>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d103      	bne.n	800d534 <mbedtls_mpi_div_mpi+0x500>
            R->s = 1;
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2201      	movs	r2, #1
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	e000      	b.n	800d536 <mbedtls_mpi_div_mpi+0x502>
    }

cleanup:
 800d534:	bf00      	nop

    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800d536:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fc fe7e 	bl	800a23c <mbedtls_mpi_free>
 800d540:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d544:	4618      	mov	r0, r3
 800d546:	f7fc fe79 	bl	800a23c <mbedtls_mpi_free>
 800d54a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fc fe74 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
 800d554:	f107 031c 	add.w	r3, r7, #28
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fc fe6f 	bl	800a23c <mbedtls_mpi_free>
 800d55e:	f107 0310 	add.w	r3, r7, #16
 800d562:	4618      	mov	r0, r3
 800d564:	f7fc fe6a 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800d568:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3764      	adds	r7, #100	@ 0x64
 800d56e:	46bd      	mov	sp, r7
 800d570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d572:	bf00      	nop
 800d574:	3ffffffe 	.word	0x3ffffffe

0800d578 <mbedtls_mpi_mod_mpi>:

/*
 * Modulo: R = A mod B
 */
int mbedtls_mpi_mod_mpi( mbedtls_mpi *R, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b086      	sub	sp, #24
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
    int ret;
    MPI_VALIDATE_RET( R != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
 800d584:	2100      	movs	r1, #0
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7fd fdc1 	bl	800b10e <mbedtls_mpi_cmp_int>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	da02      	bge.n	800d598 <mbedtls_mpi_mod_mpi+0x20>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
 800d592:	f06f 0309 	mvn.w	r3, #9
 800d596:	e02d      	b.n	800d5f4 <mbedtls_mpi_mod_mpi+0x7c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	68f9      	ldr	r1, [r7, #12]
 800d59e:	2000      	movs	r0, #0
 800d5a0:	f7ff fd48 	bl	800d034 <mbedtls_mpi_div_mpi>
 800d5a4:	6178      	str	r0, [r7, #20]
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d122      	bne.n	800d5f2 <mbedtls_mpi_mod_mpi+0x7a>

    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800d5ac:	e008      	b.n	800d5c0 <mbedtls_mpi_mod_mpi+0x48>
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	68f9      	ldr	r1, [r7, #12]
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f7fd ff36 	bl	800b424 <mbedtls_mpi_add_mpi>
 800d5b8:	6178      	str	r0, [r7, #20]
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d118      	bne.n	800d5f2 <mbedtls_mpi_mod_mpi+0x7a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f7fd fda3 	bl	800b10e <mbedtls_mpi_cmp_int>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	dbef      	blt.n	800d5ae <mbedtls_mpi_mod_mpi+0x36>

    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800d5ce:	e008      	b.n	800d5e2 <mbedtls_mpi_mod_mpi+0x6a>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	68f9      	ldr	r1, [r7, #12]
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f7fd ff69 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800d5da:	6178      	str	r0, [r7, #20]
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d107      	bne.n	800d5f2 <mbedtls_mpi_mod_mpi+0x7a>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f7fd fcf7 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	daef      	bge.n	800d5d0 <mbedtls_mpi_mod_mpi+0x58>

cleanup:
 800d5f0:	bf00      	nop

    return( ret );
 800d5f2:	697b      	ldr	r3, [r7, #20]
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3718      	adds	r7, #24
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <mbedtls_mpi_gcd>:

/*
 * Greatest common divisor: G = gcd(A, B)  (HAC 14.54)
 */
int mbedtls_mpi_gcd( mbedtls_mpi *G, const mbedtls_mpi *A, const mbedtls_mpi *B )
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b090      	sub	sp, #64	@ 0x40
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]

    MPI_VALIDATE_RET( G != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( B != NULL );

    mbedtls_mpi_init( &TG ); mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TB );
 800d608:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fc fe02 	bl	800a216 <mbedtls_mpi_init>
 800d612:	f107 031c 	add.w	r3, r7, #28
 800d616:	4618      	mov	r0, r3
 800d618:	f7fc fdfd 	bl	800a216 <mbedtls_mpi_init>
 800d61c:	f107 0310 	add.w	r3, r7, #16
 800d620:	4618      	mov	r0, r3
 800d622:	f7fc fdf8 	bl	800a216 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) );
 800d626:	f107 031c 	add.w	r3, r7, #28
 800d62a:	68b9      	ldr	r1, [r7, #8]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fc fed4 	bl	800a3da <mbedtls_mpi_copy>
 800d632:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d636:	2b00      	cmp	r3, #0
 800d638:	f040 80ae 	bne.w	800d798 <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
 800d63c:	f107 0310 	add.w	r3, r7, #16
 800d640:	6879      	ldr	r1, [r7, #4]
 800d642:	4618      	mov	r0, r3
 800d644:	f7fc fec9 	bl	800a3da <mbedtls_mpi_copy>
 800d648:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f040 80a3 	bne.w	800d798 <mbedtls_mpi_gcd+0x19c>

    lz = mbedtls_mpi_lsb( &TA );
 800d652:	f107 031c 	add.w	r3, r7, #28
 800d656:	4618      	mov	r0, r3
 800d658:	f7fd f8c0 	bl	800a7dc <mbedtls_mpi_lsb>
 800d65c:	63b8      	str	r0, [r7, #56]	@ 0x38
    lzt = mbedtls_mpi_lsb( &TB );
 800d65e:	f107 0310 	add.w	r3, r7, #16
 800d662:	4618      	mov	r0, r3
 800d664:	f7fd f8ba 	bl	800a7dc <mbedtls_mpi_lsb>
 800d668:	6378      	str	r0, [r7, #52]	@ 0x34

    if( lzt < lz )
 800d66a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d66e:	429a      	cmp	r2, r3
 800d670:	d201      	bcs.n	800d676 <mbedtls_mpi_gcd+0x7a>
        lz = lzt;
 800d672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d674:	63bb      	str	r3, [r7, #56]	@ 0x38

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, lz ) );
 800d676:	f107 031c 	add.w	r3, r7, #28
 800d67a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7fd fb8e 	bl	800ad9e <mbedtls_mpi_shift_r>
 800d682:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d686:	2b00      	cmp	r3, #0
 800d688:	f040 8086 	bne.w	800d798 <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, lz ) );
 800d68c:	f107 0310 	add.w	r3, r7, #16
 800d690:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d692:	4618      	mov	r0, r3
 800d694:	f7fd fb83 	bl	800ad9e <mbedtls_mpi_shift_r>
 800d698:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d69a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d17b      	bne.n	800d798 <mbedtls_mpi_gcd+0x19c>

    TA.s = TB.s = 1;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	613b      	str	r3, [r7, #16]
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	61fb      	str	r3, [r7, #28]

    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800d6a8:	e059      	b.n	800d75e <mbedtls_mpi_gcd+0x162>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, mbedtls_mpi_lsb( &TA ) ) );
 800d6aa:	f107 031c 	add.w	r3, r7, #28
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fd f894 	bl	800a7dc <mbedtls_mpi_lsb>
 800d6b4:	4602      	mov	r2, r0
 800d6b6:	f107 031c 	add.w	r3, r7, #28
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fd fb6e 	bl	800ad9e <mbedtls_mpi_shift_r>
 800d6c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d166      	bne.n	800d798 <mbedtls_mpi_gcd+0x19c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, mbedtls_mpi_lsb( &TB ) ) );
 800d6ca:	f107 0310 	add.w	r3, r7, #16
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fd f884 	bl	800a7dc <mbedtls_mpi_lsb>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	f107 0310 	add.w	r3, r7, #16
 800d6da:	4611      	mov	r1, r2
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fd fb5e 	bl	800ad9e <mbedtls_mpi_shift_r>
 800d6e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d6e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d156      	bne.n	800d798 <mbedtls_mpi_gcd+0x19c>

        if( mbedtls_mpi_cmp_mpi( &TA, &TB ) >= 0 )
 800d6ea:	f107 0210 	add.w	r2, r7, #16
 800d6ee:	f107 031c 	add.w	r3, r7, #28
 800d6f2:	4611      	mov	r1, r2
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fd fc6f 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	db17      	blt.n	800d730 <mbedtls_mpi_gcd+0x134>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TA, &TA, &TB ) );
 800d700:	f107 0210 	add.w	r2, r7, #16
 800d704:	f107 011c 	add.w	r1, r7, #28
 800d708:	f107 031c 	add.w	r3, r7, #28
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7fd fe29 	bl	800b364 <mbedtls_mpi_sub_abs>
 800d712:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d716:	2b00      	cmp	r3, #0
 800d718:	d13e      	bne.n	800d798 <mbedtls_mpi_gcd+0x19c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TA, 1 ) );
 800d71a:	f107 031c 	add.w	r3, r7, #28
 800d71e:	2101      	movs	r1, #1
 800d720:	4618      	mov	r0, r3
 800d722:	f7fd fb3c 	bl	800ad9e <mbedtls_mpi_shift_r>
 800d726:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d017      	beq.n	800d75e <mbedtls_mpi_gcd+0x162>
 800d72e:	e033      	b.n	800d798 <mbedtls_mpi_gcd+0x19c>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( &TB, &TB, &TA ) );
 800d730:	f107 021c 	add.w	r2, r7, #28
 800d734:	f107 0110 	add.w	r1, r7, #16
 800d738:	f107 0310 	add.w	r3, r7, #16
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fd fe11 	bl	800b364 <mbedtls_mpi_sub_abs>
 800d742:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d746:	2b00      	cmp	r3, #0
 800d748:	d126      	bne.n	800d798 <mbedtls_mpi_gcd+0x19c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TB, 1 ) );
 800d74a:	f107 0310 	add.w	r3, r7, #16
 800d74e:	2101      	movs	r1, #1
 800d750:	4618      	mov	r0, r3
 800d752:	f7fd fb24 	bl	800ad9e <mbedtls_mpi_shift_r>
 800d756:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d11c      	bne.n	800d798 <mbedtls_mpi_gcd+0x19c>
    while( mbedtls_mpi_cmp_int( &TA, 0 ) != 0 )
 800d75e:	f107 031c 	add.w	r3, r7, #28
 800d762:	2100      	movs	r1, #0
 800d764:	4618      	mov	r0, r3
 800d766:	f7fd fcd2 	bl	800b10e <mbedtls_mpi_cmp_int>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d19c      	bne.n	800d6aa <mbedtls_mpi_gcd+0xae>
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &TB, lz ) );
 800d770:	f107 0310 	add.w	r3, r7, #16
 800d774:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d776:	4618      	mov	r0, r3
 800d778:	f7fd fa6f 	bl	800ac5a <mbedtls_mpi_shift_l>
 800d77c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d77e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d780:	2b00      	cmp	r3, #0
 800d782:	d109      	bne.n	800d798 <mbedtls_mpi_gcd+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( G, &TB ) );
 800d784:	f107 0310 	add.w	r3, r7, #16
 800d788:	4619      	mov	r1, r3
 800d78a:	68f8      	ldr	r0, [r7, #12]
 800d78c:	f7fc fe25 	bl	800a3da <mbedtls_mpi_copy>
 800d790:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800d792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d794:	2b00      	cmp	r3, #0

cleanup:
 800d796:	bf00      	nop

    mbedtls_mpi_free( &TG ); mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TB );
 800d798:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fc fd4d 	bl	800a23c <mbedtls_mpi_free>
 800d7a2:	f107 031c 	add.w	r3, r7, #28
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fc fd48 	bl	800a23c <mbedtls_mpi_free>
 800d7ac:	f107 0310 	add.w	r3, r7, #16
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fc fd43 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800d7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3740      	adds	r7, #64	@ 0x40
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <mbedtls_mpi_fill_random>:
 * deterministic, eg for tests).
 */
int mbedtls_mpi_fill_random( mbedtls_mpi *X, size_t size,
                     int (*f_rng)(void *, unsigned char *, size_t),
                     void *p_rng )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b088      	sub	sp, #32
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
 800d7cc:	603b      	str	r3, [r7, #0]
    int ret;
    size_t const limbs = CHARS_TO_LIMBS( size );
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	089b      	lsrs	r3, r3, #2
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	f002 0203 	and.w	r2, r2, #3
 800d7d8:	2a00      	cmp	r2, #0
 800d7da:	bf14      	ite	ne
 800d7dc:	2201      	movne	r2, #1
 800d7de:	2200      	moveq	r2, #0
 800d7e0:	b2d2      	uxtb	r2, r2
 800d7e2:	4413      	add	r3, r2
 800d7e4:	61bb      	str	r3, [r7, #24]
    size_t const overhead = ( limbs * ciL ) - size;
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	009a      	lsls	r2, r3, #2
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	1ad3      	subs	r3, r2, r3
 800d7ee:	617b      	str	r3, [r7, #20]

    MPI_VALIDATE_RET( X     != NULL );
    MPI_VALIDATE_RET( f_rng != NULL );

    /* Ensure that target MPI has exactly the necessary number of limbs */
    if( X->n != limbs )
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	69ba      	ldr	r2, [r7, #24]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d00d      	beq.n	800d816 <mbedtls_mpi_fill_random+0x56>
    {
        mbedtls_mpi_free( X );
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f7fc fd1e 	bl	800a23c <mbedtls_mpi_free>
        mbedtls_mpi_init( X );
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f7fc fd08 	bl	800a216 <mbedtls_mpi_init>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
 800d806:	69b9      	ldr	r1, [r7, #24]
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f7fc fd3d 	bl	800a288 <mbedtls_mpi_grow>
 800d80e:	61f8      	str	r0, [r7, #28]
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d117      	bne.n	800d846 <mbedtls_mpi_fill_random+0x86>
    }
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
 800d816:	2100      	movs	r1, #0
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f7fc ff3d 	bl	800a698 <mbedtls_mpi_lset>
 800d81e:	61f8      	str	r0, [r7, #28]
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10f      	bne.n	800d846 <mbedtls_mpi_fill_random+0x86>

    Xp = (unsigned char*) X->p;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	613b      	str	r3, [r7, #16]
    f_rng( p_rng, Xp + overhead, size );
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	18d1      	adds	r1, r2, r3
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	68ba      	ldr	r2, [r7, #8]
 800d836:	6838      	ldr	r0, [r7, #0]
 800d838:	4798      	blx	r3

    mpi_bigendian_to_host( X->p, limbs );
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	69b9      	ldr	r1, [r7, #24]
 800d840:	4618      	mov	r0, r3
 800d842:	f7fd f98a 	bl	800ab5a <mpi_bigendian_to_host>

cleanup:
    return( ret );
 800d846:	69fb      	ldr	r3, [r7, #28]
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3720      	adds	r7, #32
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <mbedtls_mpi_inv_mod>:

/*
 * Modular inverse: X = A^-1 mod N  (HAC 14.61 / 14.64)
 */
int mbedtls_mpi_inv_mod( mbedtls_mpi *X, const mbedtls_mpi *A, const mbedtls_mpi *N )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b0a0      	sub	sp, #128	@ 0x80
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
    mbedtls_mpi G, TA, TU, U1, U2, TB, TV, V1, V2;
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 1 ) <= 0 )
 800d85c:	2101      	movs	r1, #1
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7fd fc55 	bl	800b10e <mbedtls_mpi_cmp_int>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	dc02      	bgt.n	800d870 <mbedtls_mpi_inv_mod+0x20>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
 800d86a:	f06f 0303 	mvn.w	r3, #3
 800d86e:	e209      	b.n	800dc84 <mbedtls_mpi_inv_mod+0x434>

    mbedtls_mpi_init( &TA ); mbedtls_mpi_init( &TU ); mbedtls_mpi_init( &U1 ); mbedtls_mpi_init( &U2 );
 800d870:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d874:	4618      	mov	r0, r3
 800d876:	f7fc fcce 	bl	800a216 <mbedtls_mpi_init>
 800d87a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fc fcc9 	bl	800a216 <mbedtls_mpi_init>
 800d884:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fc fcc4 	bl	800a216 <mbedtls_mpi_init>
 800d88e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d892:	4618      	mov	r0, r3
 800d894:	f7fc fcbf 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &G ); mbedtls_mpi_init( &TB ); mbedtls_mpi_init( &TV );
 800d898:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7fc fcba 	bl	800a216 <mbedtls_mpi_init>
 800d8a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fc fcb5 	bl	800a216 <mbedtls_mpi_init>
 800d8ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7fc fcb0 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &V1 ); mbedtls_mpi_init( &V2 );
 800d8b6:	f107 031c 	add.w	r3, r7, #28
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7fc fcab 	bl	800a216 <mbedtls_mpi_init>
 800d8c0:	f107 0310 	add.w	r3, r7, #16
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fc fca6 	bl	800a216 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_gcd( &G, A, N ) );
 800d8ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	68b9      	ldr	r1, [r7, #8]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7ff fe92 	bl	800d5fc <mbedtls_mpi_gcd>
 800d8d8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d8da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f040 81a3 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>

    if( mbedtls_mpi_cmp_int( &G, 1 ) != 0 )
 800d8e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d8e6:	2101      	movs	r1, #1
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7fd fc10 	bl	800b10e <mbedtls_mpi_cmp_int>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d003      	beq.n	800d8fc <mbedtls_mpi_inv_mod+0xac>
    {
        ret = MBEDTLS_ERR_MPI_NOT_ACCEPTABLE;
 800d8f4:	f06f 030d 	mvn.w	r3, #13
 800d8f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
        goto cleanup;
 800d8fa:	e195      	b.n	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &TA, A, N ) );
 800d8fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	68b9      	ldr	r1, [r7, #8]
 800d904:	4618      	mov	r0, r3
 800d906:	f7ff fe37 	bl	800d578 <mbedtls_mpi_mod_mpi>
 800d90a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d90c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f040 818a 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TU, &TA ) );
 800d914:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800d918:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d91c:	4611      	mov	r1, r2
 800d91e:	4618      	mov	r0, r3
 800d920:	f7fc fd5b 	bl	800a3da <mbedtls_mpi_copy>
 800d924:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d926:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d928:	2b00      	cmp	r3, #0
 800d92a:	f040 817d 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, N ) );
 800d92e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800d932:	6879      	ldr	r1, [r7, #4]
 800d934:	4618      	mov	r0, r3
 800d936:	f7fc fd50 	bl	800a3da <mbedtls_mpi_copy>
 800d93a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d93c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f040 8172 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TV, N ) );
 800d944:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d948:	6879      	ldr	r1, [r7, #4]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fc fd45 	bl	800a3da <mbedtls_mpi_copy>
 800d950:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d952:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d954:	2b00      	cmp	r3, #0
 800d956:	f040 8167 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U1, 1 ) );
 800d95a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d95e:	2101      	movs	r1, #1
 800d960:	4618      	mov	r0, r3
 800d962:	f7fc fe99 	bl	800a698 <mbedtls_mpi_lset>
 800d966:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d968:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	f040 815c 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &U2, 0 ) );
 800d970:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d974:	2100      	movs	r1, #0
 800d976:	4618      	mov	r0, r3
 800d978:	f7fc fe8e 	bl	800a698 <mbedtls_mpi_lset>
 800d97c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d97e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d980:	2b00      	cmp	r3, #0
 800d982:	f040 8151 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V1, 0 ) );
 800d986:	f107 031c 	add.w	r3, r7, #28
 800d98a:	2100      	movs	r1, #0
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fc fe83 	bl	800a698 <mbedtls_mpi_lset>
 800d992:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d994:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d996:	2b00      	cmp	r3, #0
 800d998:	f040 8146 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &V2, 1 ) );
 800d99c:	f107 0310 	add.w	r3, r7, #16
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fc fe78 	bl	800a698 <mbedtls_mpi_lset>
 800d9a8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f040 813b 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>

    do
    {
        while( ( TU.p[0] & 1 ) == 0 )
 800d9b2:	e048      	b.n	800da46 <mbedtls_mpi_inv_mod+0x1f6>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TU, 1 ) );
 800d9b4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800d9b8:	2101      	movs	r1, #1
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fd f9ef 	bl	800ad9e <mbedtls_mpi_shift_r>
 800d9c0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f040 812f 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>

            if( ( U1.p[0] & 1 ) != 0 || ( U2.p[0] & 1 ) != 0 )
 800d9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f003 0301 	and.w	r3, r3, #1
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d105      	bne.n	800d9e2 <mbedtls_mpi_inv_mod+0x192>
 800d9d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d01b      	beq.n	800da1a <mbedtls_mpi_inv_mod+0x1ca>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &U1, &U1, &TB ) );
 800d9e2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800d9e6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800d9ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fd fd18 	bl	800b424 <mbedtls_mpi_add_mpi>
 800d9f4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800d9f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f040 8115 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &TA ) );
 800d9fe:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800da02:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800da06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fd fd4e 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800da10:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da14:	2b00      	cmp	r3, #0
 800da16:	f040 8107 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U1, 1 ) );
 800da1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800da1e:	2101      	movs	r1, #1
 800da20:	4618      	mov	r0, r3
 800da22:	f7fd f9bc 	bl	800ad9e <mbedtls_mpi_shift_r>
 800da26:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da28:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f040 80fc 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &U2, 1 ) );
 800da30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800da34:	2101      	movs	r1, #1
 800da36:	4618      	mov	r0, r3
 800da38:	f7fd f9b1 	bl	800ad9e <mbedtls_mpi_shift_r>
 800da3c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da40:	2b00      	cmp	r3, #0
 800da42:	f040 80f1 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
        while( ( TU.p[0] & 1 ) == 0 )
 800da46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f003 0301 	and.w	r3, r3, #1
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0b0      	beq.n	800d9b4 <mbedtls_mpi_inv_mod+0x164>
        }

        while( ( TV.p[0] & 1 ) == 0 )
 800da52:	e048      	b.n	800dae6 <mbedtls_mpi_inv_mod+0x296>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &TV, 1 ) );
 800da54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800da58:	2101      	movs	r1, #1
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fd f99f 	bl	800ad9e <mbedtls_mpi_shift_r>
 800da60:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da64:	2b00      	cmp	r3, #0
 800da66:	f040 80df 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>

            if( ( V1.p[0] & 1 ) != 0 || ( V2.p[0] & 1 ) != 0 )
 800da6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f003 0301 	and.w	r3, r3, #1
 800da72:	2b00      	cmp	r3, #0
 800da74:	d105      	bne.n	800da82 <mbedtls_mpi_inv_mod+0x232>
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f003 0301 	and.w	r3, r3, #1
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d01b      	beq.n	800daba <mbedtls_mpi_inv_mod+0x26a>
            {
                MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, &TB ) );
 800da82:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800da86:	f107 011c 	add.w	r1, r7, #28
 800da8a:	f107 031c 	add.w	r3, r7, #28
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fd fcc8 	bl	800b424 <mbedtls_mpi_add_mpi>
 800da94:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800da96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f040 80c5 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
                MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &TA ) );
 800da9e:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800daa2:	f107 0110 	add.w	r1, r7, #16
 800daa6:	f107 0310 	add.w	r3, r7, #16
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fd fcfe 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800dab0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dab2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f040 80b7 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
            }

            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V1, 1 ) );
 800daba:	f107 031c 	add.w	r3, r7, #28
 800dabe:	2101      	movs	r1, #1
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7fd f96c 	bl	800ad9e <mbedtls_mpi_shift_r>
 800dac6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dac8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800daca:	2b00      	cmp	r3, #0
 800dacc:	f040 80ac 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &V2, 1 ) );
 800dad0:	f107 0310 	add.w	r3, r7, #16
 800dad4:	2101      	movs	r1, #1
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fd f961 	bl	800ad9e <mbedtls_mpi_shift_r>
 800dadc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dade:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f040 80a1 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
        while( ( TV.p[0] & 1 ) == 0 )
 800dae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0301 	and.w	r3, r3, #1
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d0b0      	beq.n	800da54 <mbedtls_mpi_inv_mod+0x204>
        }

        if( mbedtls_mpi_cmp_mpi( &TU, &TV ) >= 0 )
 800daf2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800daf6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dafa:	4611      	mov	r1, r2
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fd fa6b 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	db28      	blt.n	800db5a <mbedtls_mpi_inv_mod+0x30a>
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TU, &TU, &TV ) );
 800db08:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800db0c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800db10:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800db14:	4618      	mov	r0, r3
 800db16:	f7fd fcc9 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800db1a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f040 8082 	bne.w	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U1, &U1, &V1 ) );
 800db24:	f107 021c 	add.w	r2, r7, #28
 800db28:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800db2c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800db30:	4618      	mov	r0, r3
 800db32:	f7fd fcbb 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800db36:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db38:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d174      	bne.n	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U2, &U2, &V2 ) );
 800db3e:	f107 0210 	add.w	r2, r7, #16
 800db42:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800db46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fd fcae 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800db50:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db54:	2b00      	cmp	r3, #0
 800db56:	d027      	beq.n	800dba8 <mbedtls_mpi_inv_mod+0x358>
 800db58:	e066      	b.n	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &TV, &TV, &TU ) );
 800db5a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800db5e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800db62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800db66:	4618      	mov	r0, r3
 800db68:	f7fd fca0 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800db6c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db70:	2b00      	cmp	r3, #0
 800db72:	d159      	bne.n	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, &U1 ) );
 800db74:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800db78:	f107 011c 	add.w	r1, r7, #28
 800db7c:	f107 031c 	add.w	r3, r7, #28
 800db80:	4618      	mov	r0, r3
 800db82:	f7fd fc93 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800db86:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800db88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d14c      	bne.n	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V2, &V2, &U2 ) );
 800db8e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800db92:	f107 0110 	add.w	r1, r7, #16
 800db96:	f107 0310 	add.w	r3, r7, #16
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7fd fc86 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800dba0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dba2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d13f      	bne.n	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
        }
    }
    while( mbedtls_mpi_cmp_int( &TU, 0 ) != 0 );
 800dba8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dbac:	2100      	movs	r1, #0
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fd faad 	bl	800b10e <mbedtls_mpi_cmp_int>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	f47f af45 	bne.w	800da46 <mbedtls_mpi_inv_mod+0x1f6>

    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800dbbc:	e00b      	b.n	800dbd6 <mbedtls_mpi_inv_mod+0x386>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &V1, &V1, N ) );
 800dbbe:	f107 011c 	add.w	r1, r7, #28
 800dbc2:	f107 031c 	add.w	r3, r7, #28
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fd fc2b 	bl	800b424 <mbedtls_mpi_add_mpi>
 800dbce:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dbd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d128      	bne.n	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
    while( mbedtls_mpi_cmp_int( &V1, 0 ) < 0 )
 800dbd6:	f107 031c 	add.w	r3, r7, #28
 800dbda:	2100      	movs	r1, #0
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fd fa96 	bl	800b10e <mbedtls_mpi_cmp_int>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	dbea      	blt.n	800dbbe <mbedtls_mpi_inv_mod+0x36e>

    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800dbe8:	e00b      	b.n	800dc02 <mbedtls_mpi_inv_mod+0x3b2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &V1, &V1, N ) );
 800dbea:	f107 011c 	add.w	r1, r7, #28
 800dbee:	f107 031c 	add.w	r3, r7, #28
 800dbf2:	687a      	ldr	r2, [r7, #4]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fd fc59 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800dbfa:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dbfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d112      	bne.n	800dc28 <mbedtls_mpi_inv_mod+0x3d8>
    while( mbedtls_mpi_cmp_mpi( &V1, N ) >= 0 )
 800dc02:	f107 031c 	add.w	r3, r7, #28
 800dc06:	6879      	ldr	r1, [r7, #4]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fd f9e5 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	daea      	bge.n	800dbea <mbedtls_mpi_inv_mod+0x39a>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &V1 ) );
 800dc14:	f107 031c 	add.w	r3, r7, #28
 800dc18:	4619      	mov	r1, r3
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f7fc fbdd 	bl	800a3da <mbedtls_mpi_copy>
 800dc20:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800dc22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dc24:	2b00      	cmp	r3, #0

cleanup:
 800dc26:	bf00      	nop

    mbedtls_mpi_free( &TA ); mbedtls_mpi_free( &TU ); mbedtls_mpi_free( &U1 ); mbedtls_mpi_free( &U2 );
 800dc28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fc fb05 	bl	800a23c <mbedtls_mpi_free>
 800dc32:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fc fb00 	bl	800a23c <mbedtls_mpi_free>
 800dc3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fc fafb 	bl	800a23c <mbedtls_mpi_free>
 800dc46:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fc faf6 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &G ); mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TV );
 800dc50:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fc faf1 	bl	800a23c <mbedtls_mpi_free>
 800dc5a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fc faec 	bl	800a23c <mbedtls_mpi_free>
 800dc64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fc fae7 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &V1 ); mbedtls_mpi_free( &V2 );
 800dc6e:	f107 031c 	add.w	r3, r7, #28
 800dc72:	4618      	mov	r0, r3
 800dc74:	f7fc fae2 	bl	800a23c <mbedtls_mpi_free>
 800dc78:	f107 0310 	add.w	r3, r7, #16
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fc fadd 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800dc82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3780      	adds	r7, #128	@ 0x80
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}

0800dc8c <derive_mpi>:
 * Derive a suitable integer for group grp from a buffer of length len
 * SEC1 4.1.3 step 5 aka SEC1 4.1.4 step 3
 */
static int derive_mpi( const mbedtls_ecp_group *grp, mbedtls_mpi *x,
                       const unsigned char *buf, size_t blen )
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b088      	sub	sp, #32
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	607a      	str	r2, [r7, #4]
 800dc98:	603b      	str	r3, [r7, #0]
    int ret;
    size_t n_size = ( grp->nbits + 7 ) / 8;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dc9e:	3307      	adds	r3, #7
 800dca0:	08db      	lsrs	r3, r3, #3
 800dca2:	61bb      	str	r3, [r7, #24]
    size_t use_size = blen > n_size ? n_size : blen;
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	bf28      	it	cs
 800dcac:	4613      	movcs	r3, r2
 800dcae:	617b      	str	r3, [r7, #20]

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( x, buf, use_size ) );
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	6879      	ldr	r1, [r7, #4]
 800dcb4:	68b8      	ldr	r0, [r7, #8]
 800dcb6:	f7fc ff83 	bl	800abc0 <mbedtls_mpi_read_binary>
 800dcba:	61f8      	str	r0, [r7, #28]
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d126      	bne.n	800dd10 <derive_mpi+0x84>
    if( use_size * 8 > grp->nbits )
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	00da      	lsls	r2, r3, #3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d90c      	bls.n	800dce8 <derive_mpi+0x5c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( x, use_size * 8 - grp->nbits ) );
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	00da      	lsls	r2, r3, #3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dcd6:	1ad3      	subs	r3, r2, r3
 800dcd8:	4619      	mov	r1, r3
 800dcda:	68b8      	ldr	r0, [r7, #8]
 800dcdc:	f7fd f85f 	bl	800ad9e <mbedtls_mpi_shift_r>
 800dce0:	61f8      	str	r0, [r7, #28]
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d113      	bne.n	800dd10 <derive_mpi+0x84>

    /* While at it, reduce modulo N */
    if( mbedtls_mpi_cmp_mpi( x, &grp->N ) >= 0 )
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	334c      	adds	r3, #76	@ 0x4c
 800dcec:	4619      	mov	r1, r3
 800dcee:	68b8      	ldr	r0, [r7, #8]
 800dcf0:	f7fd f972 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	db09      	blt.n	800dd0e <derive_mpi+0x82>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( x, x, &grp->N ) );
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	334c      	adds	r3, #76	@ 0x4c
 800dcfe:	461a      	mov	r2, r3
 800dd00:	68b9      	ldr	r1, [r7, #8]
 800dd02:	68b8      	ldr	r0, [r7, #8]
 800dd04:	f7fd fbd2 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800dd08:	61f8      	str	r0, [r7, #28]
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	2b00      	cmp	r3, #0

cleanup:
 800dd0e:	bf00      	nop
    return( ret );
 800dd10:	69fb      	ldr	r3, [r7, #28]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3720      	adds	r7, #32
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
	...

0800dd1c <ecdsa_verify_restartable>:
static int ecdsa_verify_restartable( mbedtls_ecp_group *grp,
                                     const unsigned char *buf, size_t blen,
                                     const mbedtls_ecp_point *Q,
                                     const mbedtls_mpi *r, const mbedtls_mpi *s,
                                     mbedtls_ecdsa_restart_ctx *rs_ctx )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b0a0      	sub	sp, #128	@ 0x80
 800dd20:	af04      	add	r7, sp, #16
 800dd22:	60f8      	str	r0, [r7, #12]
 800dd24:	60b9      	str	r1, [r7, #8]
 800dd26:	607a      	str	r2, [r7, #4]
 800dd28:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi e, s_inv, u1, u2;
    mbedtls_ecp_point R;
    mbedtls_mpi *pu1 = &u1, *pu2 = &u2;
 800dd2a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dd2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dd30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dd34:	667b      	str	r3, [r7, #100]	@ 0x64

    mbedtls_ecp_point_init( &R );
 800dd36:	f107 0310 	add.w	r3, r7, #16
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f000 f927 	bl	800df8e <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &e ); mbedtls_mpi_init( &s_inv );
 800dd40:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7fc fa66 	bl	800a216 <mbedtls_mpi_init>
 800dd4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fc fa61 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &u1 ); mbedtls_mpi_init( &u2 );
 800dd54:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f7fc fa5c 	bl	800a216 <mbedtls_mpi_init>
 800dd5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fc fa57 	bl	800a216 <mbedtls_mpi_init>

    /* Fail cleanly on curves such as Curve25519 that can't be used for ECDSA */
    if( grp->N.p == NULL )
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <ecdsa_verify_restartable+0x58>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800dd70:	4b60      	ldr	r3, [pc, #384]	@ (800def4 <ecdsa_verify_restartable+0x1d8>)
 800dd72:	e0bb      	b.n	800deec <ecdsa_verify_restartable+0x1d0>
#endif /* MBEDTLS_ECP_RESTARTABLE */

    /*
     * Step 1: make sure r and s are in range 1..n-1
     */
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800dd74:	2101      	movs	r1, #1
 800dd76:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800dd78:	f7fd f9c9 	bl	800b10e <mbedtls_mpi_cmp_int>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	db18      	blt.n	800ddb4 <ecdsa_verify_restartable+0x98>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	334c      	adds	r3, #76	@ 0x4c
 800dd86:	4619      	mov	r1, r3
 800dd88:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800dd8a:	f7fd f925 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	da0f      	bge.n	800ddb4 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800dd94:	2101      	movs	r1, #1
 800dd96:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800dd98:	f7fd f9b9 	bl	800b10e <mbedtls_mpi_cmp_int>
 800dd9c:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( r, 1 ) < 0 || mbedtls_mpi_cmp_mpi( r, &grp->N ) >= 0 ||
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	db08      	blt.n	800ddb4 <ecdsa_verify_restartable+0x98>
        mbedtls_mpi_cmp_int( s, 1 ) < 0 || mbedtls_mpi_cmp_mpi( s, &grp->N ) >= 0 )
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	334c      	adds	r3, #76	@ 0x4c
 800dda6:	4619      	mov	r1, r3
 800dda8:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800ddaa:	f7fd f915 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	db02      	blt.n	800ddba <ecdsa_verify_restartable+0x9e>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800ddb4:	4b50      	ldr	r3, [pc, #320]	@ (800def8 <ecdsa_verify_restartable+0x1dc>)
 800ddb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800ddb8:	e07e      	b.n	800deb8 <ecdsa_verify_restartable+0x19c>
    }

    /*
     * Step 3: derive MPI from hashed message
     */
    MBEDTLS_MPI_CHK( derive_mpi( grp, &e, buf, blen ) );
 800ddba:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	f7ff ff62 	bl	800dc8c <derive_mpi>
 800ddc8:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800ddca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d173      	bne.n	800deb8 <ecdsa_verify_restartable+0x19c>
    /*
     * Step 4: u1 = e / s mod n, u2 = r / s mod n
     */
    ECDSA_BUDGET( MBEDTLS_ECP_OPS_CHK + MBEDTLS_ECP_OPS_INV + 2 );

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &s_inv, s, &grp->N ) );
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800ddd6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ddda:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7ff fd37 	bl	800d850 <mbedtls_mpi_inv_mod>
 800dde2:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800dde4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d166      	bne.n	800deb8 <ecdsa_verify_restartable+0x19c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu1, &e, &s_inv ) );
 800ddea:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800ddee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800ddf6:	f7fe ff8e 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800ddfa:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800ddfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d15a      	bne.n	800deb8 <ecdsa_verify_restartable+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu1, pu1, &grp->N ) );
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	334c      	adds	r3, #76	@ 0x4c
 800de06:	461a      	mov	r2, r3
 800de08:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800de0a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800de0c:	f7ff fbb4 	bl	800d578 <mbedtls_mpi_mod_mpi>
 800de10:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de14:	2b00      	cmp	r3, #0
 800de16:	d14f      	bne.n	800deb8 <ecdsa_verify_restartable+0x19c>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( pu2, r, &s_inv ) );
 800de18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800de1c:	461a      	mov	r2, r3
 800de1e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800de20:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800de22:	f7fe ff78 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800de26:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d144      	bne.n	800deb8 <ecdsa_verify_restartable+0x19c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( pu2, pu2, &grp->N ) );
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	334c      	adds	r3, #76	@ 0x4c
 800de32:	461a      	mov	r2, r3
 800de34:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800de36:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800de38:	f7ff fb9e 	bl	800d578 <mbedtls_mpi_mod_mpi>
 800de3c:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de40:	2b00      	cmp	r3, #0
 800de42:	d139      	bne.n	800deb8 <ecdsa_verify_restartable+0x19c>
muladd:
#endif
    /*
     * Step 5: R = u1 G + u2 Q
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_muladd_restartable( grp,
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800de4a:	f107 0110 	add.w	r1, r7, #16
 800de4e:	2300      	movs	r3, #0
 800de50:	9302      	str	r3, [sp, #8]
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800de58:	9300      	str	r3, [sp, #0]
 800de5a:	4613      	mov	r3, r2
 800de5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f002 fff4 	bl	8010e4c <mbedtls_ecp_muladd_restartable>
 800de64:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d125      	bne.n	800deb8 <ecdsa_verify_restartable+0x19c>
                     &R, pu1, &grp->G, pu2, Q, ECDSA_RS_ECP ) );

    if( mbedtls_ecp_is_zero( &R ) )
 800de6c:	f107 0310 	add.w	r3, r7, #16
 800de70:	4618      	mov	r0, r3
 800de72:	f000 f9cb 	bl	800e20c <mbedtls_ecp_is_zero>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d002      	beq.n	800de82 <ecdsa_verify_restartable+0x166>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800de7c:	4b1e      	ldr	r3, [pc, #120]	@ (800def8 <ecdsa_verify_restartable+0x1dc>)
 800de7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800de80:	e01a      	b.n	800deb8 <ecdsa_verify_restartable+0x19c>

    /*
     * Step 6: convert xR to an integer (no-op)
     * Step 7: reduce xR mod n (gives v)
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &R.X, &R.X, &grp->N ) );
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 800de88:	f107 0110 	add.w	r1, r7, #16
 800de8c:	f107 0310 	add.w	r3, r7, #16
 800de90:	4618      	mov	r0, r3
 800de92:	f7ff fb71 	bl	800d578 <mbedtls_mpi_mod_mpi>
 800de96:	66f8      	str	r0, [r7, #108]	@ 0x6c
 800de98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10c      	bne.n	800deb8 <ecdsa_verify_restartable+0x19c>

    /*
     * Step 8: check if v (that is, R.X) is equal to r
     */
    if( mbedtls_mpi_cmp_mpi( &R.X, r ) != 0 )
 800de9e:	f107 0310 	add.w	r3, r7, #16
 800dea2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fd f897 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800deaa:	4603      	mov	r3, r0
 800deac:	2b00      	cmp	r3, #0
 800deae:	d002      	beq.n	800deb6 <ecdsa_verify_restartable+0x19a>
    {
        ret = MBEDTLS_ERR_ECP_VERIFY_FAILED;
 800deb0:	4b11      	ldr	r3, [pc, #68]	@ (800def8 <ecdsa_verify_restartable+0x1dc>)
 800deb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        goto cleanup;
 800deb4:	e000      	b.n	800deb8 <ecdsa_verify_restartable+0x19c>
    }

cleanup:
 800deb6:	bf00      	nop
    mbedtls_ecp_point_free( &R );
 800deb8:	f107 0310 	add.w	r3, r7, #16
 800debc:	4618      	mov	r0, r3
 800debe:	f000 f8d1 	bl	800e064 <mbedtls_ecp_point_free>
    mbedtls_mpi_free( &e ); mbedtls_mpi_free( &s_inv );
 800dec2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fc f9b8 	bl	800a23c <mbedtls_mpi_free>
 800decc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fc f9b3 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &u1 ); mbedtls_mpi_free( &u2 );
 800ded6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fc f9ae 	bl	800a23c <mbedtls_mpi_free>
 800dee0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fc f9a9 	bl	800a23c <mbedtls_mpi_free>

    ECDSA_RS_LEAVE( ver );

    return( ret );
 800deea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 800deec:	4618      	mov	r0, r3
 800deee:	3770      	adds	r7, #112	@ 0x70
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}
 800def4:	ffffb080 	.word	0xffffb080
 800def8:	ffffb200 	.word	0xffffb200

0800defc <mbedtls_ecdsa_verify>:
int mbedtls_ecdsa_verify( mbedtls_ecp_group *grp,
                          const unsigned char *buf, size_t blen,
                          const mbedtls_ecp_point *Q,
                          const mbedtls_mpi *r,
                          const mbedtls_mpi *s)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b088      	sub	sp, #32
 800df00:	af04      	add	r7, sp, #16
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
 800df08:	603b      	str	r3, [r7, #0]
    ECDSA_VALIDATE_RET( Q   != NULL );
    ECDSA_VALIDATE_RET( r   != NULL );
    ECDSA_VALIDATE_RET( s   != NULL );
    ECDSA_VALIDATE_RET( buf != NULL || blen == 0 );

    return( ecdsa_verify_restartable( grp, buf, blen, Q, r, s, NULL ) );
 800df0a:	2300      	movs	r3, #0
 800df0c:	9302      	str	r3, [sp, #8]
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	9301      	str	r3, [sp, #4]
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	9300      	str	r3, [sp, #0]
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	68b9      	ldr	r1, [r7, #8]
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f7ff fefd 	bl	800dd1c <ecdsa_verify_restartable>
 800df22:	4603      	mov	r3, r0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <mbedtls_ecdsa_init>:

/*
 * Initialize context
 */
void mbedtls_ecdsa_init( mbedtls_ecdsa_context *ctx )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
    ECDSA_VALIDATE( ctx != NULL );

    mbedtls_ecp_keypair_init( ctx );
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 f87f 	bl	800e038 <mbedtls_ecp_keypair_init>
}
 800df3a:	bf00      	nop
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <mbedtls_ecdsa_free>:

/*
 * Free context
 */
void mbedtls_ecdsa_free( mbedtls_ecdsa_context *ctx )
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b082      	sub	sp, #8
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d003      	beq.n	800df58 <mbedtls_ecdsa_free+0x16>
        return;

    mbedtls_ecp_keypair_free( ctx );
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 f8ed 	bl	800e130 <mbedtls_ecp_keypair_free>
 800df56:	e000      	b.n	800df5a <mbedtls_ecdsa_free+0x18>
        return;
 800df58:	bf00      	nop
}
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <ecp_get_type>:

/*
 * Get the type of a curve
 */
static inline ecp_curve_type ecp_get_type( const mbedtls_ecp_group *grp )
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
    if( grp->G.X.p == NULL )
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d101      	bne.n	800df74 <ecp_get_type+0x14>
        return( ECP_TYPE_NONE );
 800df70:	2300      	movs	r3, #0
 800df72:	e006      	b.n	800df82 <ecp_get_type+0x22>

    if( grp->G.Y.p == NULL )
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d101      	bne.n	800df80 <ecp_get_type+0x20>
        return( ECP_TYPE_MONTGOMERY );
 800df7c:	2302      	movs	r3, #2
 800df7e:	e000      	b.n	800df82 <ecp_get_type+0x22>
    else
        return( ECP_TYPE_SHORT_WEIERSTRASS );
 800df80:	2301      	movs	r3, #1
}
 800df82:	4618      	mov	r0, r3
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr

0800df8e <mbedtls_ecp_point_init>:

/*
 * Initialize (the components of) a point
 */
void mbedtls_ecp_point_init( mbedtls_ecp_point *pt )
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b082      	sub	sp, #8
 800df92:	af00      	add	r7, sp, #0
 800df94:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( pt != NULL );

    mbedtls_mpi_init( &pt->X );
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fc f93c 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Y );
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	330c      	adds	r3, #12
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f7fc f937 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &pt->Z );
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	3318      	adds	r3, #24
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fc f932 	bl	800a216 <mbedtls_mpi_init>
}
 800dfb2:	bf00      	nop
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <mbedtls_ecp_group_init>:

/*
 * Initialize (the components of) a group
 */
void mbedtls_ecp_group_init( mbedtls_ecp_group *grp )
{
 800dfba:	b580      	push	{r7, lr}
 800dfbc:	b082      	sub	sp, #8
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( grp != NULL );

    grp->id = MBEDTLS_ECP_DP_NONE;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	701a      	strb	r2, [r3, #0]
    mbedtls_mpi_init( &grp->P );
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	3304      	adds	r3, #4
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7fc f922 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->A );
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	3310      	adds	r3, #16
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7fc f91d 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &grp->B );
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	331c      	adds	r3, #28
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fc f918 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &grp->G );
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	3328      	adds	r3, #40	@ 0x28
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7ff ffcf 	bl	800df8e <mbedtls_ecp_point_init>
    mbedtls_mpi_init( &grp->N );
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	334c      	adds	r3, #76	@ 0x4c
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fc f90e 	bl	800a216 <mbedtls_mpi_init>
    grp->pbits = 0;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	659a      	str	r2, [r3, #88]	@ 0x58
    grp->nbits = 0;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	65da      	str	r2, [r3, #92]	@ 0x5c
    grp->h = 0;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2200      	movs	r2, #0
 800e00a:	661a      	str	r2, [r3, #96]	@ 0x60
    grp->modp = NULL;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2200      	movs	r2, #0
 800e010:	665a      	str	r2, [r3, #100]	@ 0x64
    grp->t_pre = NULL;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	669a      	str	r2, [r3, #104]	@ 0x68
    grp->t_post = NULL;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	66da      	str	r2, [r3, #108]	@ 0x6c
    grp->t_data = NULL;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2200      	movs	r2, #0
 800e022:	671a      	str	r2, [r3, #112]	@ 0x70
    grp->T = NULL;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	675a      	str	r2, [r3, #116]	@ 0x74
    grp->T_size = 0;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2200      	movs	r2, #0
 800e02e:	679a      	str	r2, [r3, #120]	@ 0x78
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <mbedtls_ecp_keypair_init>:

/*
 * Initialize (the components of) a key pair
 */
void mbedtls_ecp_keypair_init( mbedtls_ecp_keypair *key )
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE( key != NULL );

    mbedtls_ecp_group_init( &key->grp );
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4618      	mov	r0, r3
 800e044:	f7ff ffb9 	bl	800dfba <mbedtls_ecp_group_init>
    mbedtls_mpi_init( &key->d );
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	337c      	adds	r3, #124	@ 0x7c
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7fc f8e2 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_ecp_point_init( &key->Q );
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	3388      	adds	r3, #136	@ 0x88
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff ff99 	bl	800df8e <mbedtls_ecp_point_init>
}
 800e05c:	bf00      	nop
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <mbedtls_ecp_point_free>:

/*
 * Unallocate (the components of) a point
 */
void mbedtls_ecp_point_free( mbedtls_ecp_point *pt )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
    if( pt == NULL )
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00e      	beq.n	800e090 <mbedtls_ecp_point_free+0x2c>
        return;

    mbedtls_mpi_free( &( pt->X ) );
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	4618      	mov	r0, r3
 800e076:	f7fc f8e1 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Y ) );
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	330c      	adds	r3, #12
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fc f8dc 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &( pt->Z ) );
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	3318      	adds	r3, #24
 800e088:	4618      	mov	r0, r3
 800e08a:	f7fc f8d7 	bl	800a23c <mbedtls_mpi_free>
 800e08e:	e000      	b.n	800e092 <mbedtls_ecp_point_free+0x2e>
        return;
 800e090:	bf00      	nop
}
 800e092:	3708      	adds	r7, #8
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <mbedtls_ecp_group_free>:

/*
 * Unallocate (the components of) a group
 */
void mbedtls_ecp_group_free( mbedtls_ecp_group *grp )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
    size_t i;

    if( grp == NULL )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d040      	beq.n	800e128 <mbedtls_ecp_group_free+0x90>
        return;

    if( grp->h != 1 )
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d018      	beq.n	800e0e0 <mbedtls_ecp_group_free+0x48>
    {
        mbedtls_mpi_free( &grp->P );
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3304      	adds	r3, #4
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fc f8c2 	bl	800a23c <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->A );
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	3310      	adds	r3, #16
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fc f8bd 	bl	800a23c <mbedtls_mpi_free>
        mbedtls_mpi_free( &grp->B );
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	331c      	adds	r3, #28
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fc f8b8 	bl	800a23c <mbedtls_mpi_free>
        mbedtls_ecp_point_free( &grp->G );
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	3328      	adds	r3, #40	@ 0x28
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7ff ffc7 	bl	800e064 <mbedtls_ecp_point_free>
        mbedtls_mpi_free( &grp->N );
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	334c      	adds	r3, #76	@ 0x4c
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fc f8ae 	bl	800a23c <mbedtls_mpi_free>
    }

    if( grp->T != NULL )
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d01a      	beq.n	800e11e <mbedtls_ecp_group_free+0x86>
    {
        for( i = 0; i < grp->T_size; i++ )
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	60fb      	str	r3, [r7, #12]
 800e0ec:	e00d      	b.n	800e10a <mbedtls_ecp_group_free+0x72>
            mbedtls_ecp_point_free( &grp->T[i] );
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6f59      	ldr	r1, [r3, #116]	@ 0x74
 800e0f2:	68fa      	ldr	r2, [r7, #12]
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	00db      	lsls	r3, r3, #3
 800e0f8:	4413      	add	r3, r2
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	440b      	add	r3, r1
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7ff ffb0 	bl	800e064 <mbedtls_ecp_point_free>
        for( i = 0; i < grp->T_size; i++ )
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	3301      	adds	r3, #1
 800e108:	60fb      	str	r3, [r7, #12]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e10e:	68fa      	ldr	r2, [r7, #12]
 800e110:	429a      	cmp	r2, r3
 800e112:	d3ec      	bcc.n	800e0ee <mbedtls_ecp_group_free+0x56>
        mbedtls_free( grp->T );
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e118:	4618      	mov	r0, r3
 800e11a:	f007 fb5d 	bl	80157d8 <free>
    }

    mbedtls_platform_zeroize( grp, sizeof( mbedtls_ecp_group ) );
 800e11e:	217c      	movs	r1, #124	@ 0x7c
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f005 fb33 	bl	801378c <mbedtls_platform_zeroize>
 800e126:	e000      	b.n	800e12a <mbedtls_ecp_group_free+0x92>
        return;
 800e128:	bf00      	nop
}
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <mbedtls_ecp_keypair_free>:

/*
 * Unallocate (the components of) a key pair
 */
void mbedtls_ecp_keypair_free( mbedtls_ecp_keypair *key )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
    if( key == NULL )
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00e      	beq.n	800e15c <mbedtls_ecp_keypair_free+0x2c>
        return;

    mbedtls_ecp_group_free( &key->grp );
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	4618      	mov	r0, r3
 800e142:	f7ff ffa9 	bl	800e098 <mbedtls_ecp_group_free>
    mbedtls_mpi_free( &key->d );
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	337c      	adds	r3, #124	@ 0x7c
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fc f876 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_ecp_point_free( &key->Q );
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	3388      	adds	r3, #136	@ 0x88
 800e154:	4618      	mov	r0, r3
 800e156:	f7ff ff85 	bl	800e064 <mbedtls_ecp_point_free>
 800e15a:	e000      	b.n	800e15e <mbedtls_ecp_keypair_free+0x2e>
        return;
 800e15c:	bf00      	nop
}
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <mbedtls_ecp_copy>:

/*
 * Copy the contents of a point
 */
int mbedtls_ecp_copy( mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
    int ret;
    ECP_VALIDATE_RET( P != NULL );
    ECP_VALIDATE_RET( Q != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->X, &Q->X ) );
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	683a      	ldr	r2, [r7, #0]
 800e172:	4611      	mov	r1, r2
 800e174:	4618      	mov	r0, r3
 800e176:	f7fc f930 	bl	800a3da <mbedtls_mpi_copy>
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d119      	bne.n	800e1b6 <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Y, &Q->Y ) );
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f103 020c 	add.w	r2, r3, #12
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	330c      	adds	r3, #12
 800e18c:	4619      	mov	r1, r3
 800e18e:	4610      	mov	r0, r2
 800e190:	f7fc f923 	bl	800a3da <mbedtls_mpi_copy>
 800e194:	60f8      	str	r0, [r7, #12]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d10c      	bne.n	800e1b6 <mbedtls_ecp_copy+0x52>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &P->Z, &Q->Z ) );
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f103 0218 	add.w	r2, r3, #24
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	3318      	adds	r3, #24
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	4610      	mov	r0, r2
 800e1aa:	f7fc f916 	bl	800a3da <mbedtls_mpi_copy>
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b00      	cmp	r3, #0

cleanup:
 800e1b4:	bf00      	nop
    return( ret );
 800e1b6:	68fb      	ldr	r3, [r7, #12]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3710      	adds	r7, #16
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <mbedtls_ecp_set_zero>:

/*
 * Set point to zero
 */
int mbedtls_ecp_set_zero( mbedtls_ecp_point *pt )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b084      	sub	sp, #16
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
    int ret;
    ECP_VALIDATE_RET( pt != NULL );

    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->X , 1 ) );
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2101      	movs	r1, #1
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fc fa63 	bl	800a698 <mbedtls_mpi_lset>
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d113      	bne.n	800e202 <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Y , 1 ) );
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	330c      	adds	r3, #12
 800e1de:	2101      	movs	r1, #1
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fc fa59 	bl	800a698 <mbedtls_mpi_lset>
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d109      	bne.n	800e202 <mbedtls_ecp_set_zero+0x42>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z , 0 ) );
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	3318      	adds	r3, #24
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fc fa4f 	bl	800a698 <mbedtls_mpi_lset>
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2b00      	cmp	r3, #0

cleanup:
 800e200:	bf00      	nop
    return( ret );
 800e202:	68fb      	ldr	r3, [r7, #12]
}
 800e204:	4618      	mov	r0, r3
 800e206:	3710      	adds	r7, #16
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <mbedtls_ecp_is_zero>:

/*
 * Tell if a point is zero
 */
int mbedtls_ecp_is_zero( mbedtls_ecp_point *pt )
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
    ECP_VALIDATE_RET( pt != NULL );

    return( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 );
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	3318      	adds	r3, #24
 800e218:	2100      	movs	r1, #0
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fc ff77 	bl	800b10e <mbedtls_mpi_cmp_int>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	bf0c      	ite	eq
 800e226:	2301      	moveq	r3, #1
 800e228:	2300      	movne	r3, #0
 800e22a:	b2db      	uxtb	r3, r3
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <ecp_modp>:
 * See the documentation of struct mbedtls_ecp_group.
 *
 * This function is in the critial loop for mbedtls_ecp_mul, so pay attention to perf.
 */
static int ecp_modp( mbedtls_mpi *N, const mbedtls_ecp_group *grp )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
    int ret;

    if( grp->modp == NULL )
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e242:	2b00      	cmp	r3, #0
 800e244:	d108      	bne.n	800e258 <ecp_modp+0x24>
        return( mbedtls_mpi_mod_mpi( N, N, &grp->P ) );
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	3304      	adds	r3, #4
 800e24a:	461a      	mov	r2, r3
 800e24c:	6879      	ldr	r1, [r7, #4]
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff f992 	bl	800d578 <mbedtls_mpi_mod_mpi>
 800e254:	4603      	mov	r3, r0
 800e256:	e04b      	b.n	800e2f0 <ecp_modp+0xbc>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	da06      	bge.n	800e26e <ecp_modp+0x3a>
 800e260:	2100      	movs	r1, #0
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7fc ff53 	bl	800b10e <mbedtls_mpi_cmp_int>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d108      	bne.n	800e280 <ecp_modp+0x4c>
        mbedtls_mpi_bitlen( N ) > 2 * grp->pbits )
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7fc fb08 	bl	800a884 <mbedtls_mpi_bitlen>
 800e274:	4602      	mov	r2, r0
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e27a:	005b      	lsls	r3, r3, #1
    if( ( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 ) ||
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d901      	bls.n	800e284 <ecp_modp+0x50>
    {
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800e280:	4b1d      	ldr	r3, [pc, #116]	@ (800e2f8 <ecp_modp+0xc4>)
 800e282:	e035      	b.n	800e2f0 <ecp_modp+0xbc>
    }

    MBEDTLS_MPI_CHK( grp->modp( N ) );
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	4798      	blx	r3
 800e28c:	60f8      	str	r0, [r7, #12]
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d12c      	bne.n	800e2ee <ecp_modp+0xba>

    /* N->s < 0 is a much faster test, which fails only if N is 0 */
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800e294:	e00a      	b.n	800e2ac <ecp_modp+0x78>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &grp->P ) );
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	3304      	adds	r3, #4
 800e29a:	461a      	mov	r2, r3
 800e29c:	6879      	ldr	r1, [r7, #4]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7fd f8c0 	bl	800b424 <mbedtls_mpi_add_mpi>
 800e2a4:	60f8      	str	r0, [r7, #12]
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d120      	bne.n	800e2ee <ecp_modp+0xba>
    while( N->s < 0 && mbedtls_mpi_cmp_int( N, 0 ) != 0 )
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	da12      	bge.n	800e2da <ecp_modp+0xa6>
 800e2b4:	2100      	movs	r1, #0
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7fc ff29 	bl	800b10e <mbedtls_mpi_cmp_int>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1e9      	bne.n	800e296 <ecp_modp+0x62>

    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800e2c2:	e00a      	b.n	800e2da <ecp_modp+0xa6>
        /* we known P, N and the result are positive */
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, N, &grp->P ) );
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	6879      	ldr	r1, [r7, #4]
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7fd f849 	bl	800b364 <mbedtls_mpi_sub_abs>
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d109      	bne.n	800e2ee <ecp_modp+0xba>
    while( mbedtls_mpi_cmp_mpi( N, &grp->P ) >= 0 )
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7fc fe79 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	daeb      	bge.n	800e2c4 <ecp_modp+0x90>

cleanup:
 800e2ec:	bf00      	nop
    return( ret );
 800e2ee:	68fb      	ldr	r3, [r7, #12]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	ffffb080 	.word	0xffffb080

0800e2fc <ecp_normalize_jac>:
/*
 * Normalize jacobian coordinates so that Z == 0 || Z == 1  (GECC 3.2.1)
 * Cost: 1N := 1I + 3M + 1S
 */
static int ecp_normalize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt )
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b08a      	sub	sp, #40	@ 0x28
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi Zi, ZZi;

    if( mbedtls_mpi_cmp_int( &pt->Z, 0 ) == 0 )
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	3318      	adds	r3, #24
 800e30a:	2100      	movs	r1, #0
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fc fefe 	bl	800b10e <mbedtls_mpi_cmp_int>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d101      	bne.n	800e31c <ecp_normalize_jac+0x20>
        return( 0 );
 800e318:	2300      	movs	r3, #0
 800e31a:	e09b      	b.n	800e454 <ecp_normalize_jac+0x158>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac( grp, pt ) );
#endif /* MBEDTLS_ECP_NORMALIZE_JAC_ALT */

    mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800e31c:	f107 0318 	add.w	r3, r7, #24
 800e320:	4618      	mov	r0, r3
 800e322:	f7fb ff78 	bl	800a216 <mbedtls_mpi_init>
 800e326:	f107 030c 	add.w	r3, r7, #12
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fb ff73 	bl	800a216 <mbedtls_mpi_init>

    /*
     * X = X / Z^2  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &Zi,      &pt->Z,     &grp->P ) );
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	f103 0118 	add.w	r1, r3, #24
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	1d1a      	adds	r2, r3, #4
 800e33a:	f107 0318 	add.w	r3, r7, #24
 800e33e:	4618      	mov	r0, r3
 800e340:	f7ff fa86 	bl	800d850 <mbedtls_mpi_inv_mod>
 800e344:	6278      	str	r0, [r7, #36]	@ 0x24
 800e346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d178      	bne.n	800e43e <ecp_normalize_jac+0x142>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,        &Zi     ) ); MOD_MUL( ZZi );
 800e34c:	f107 0218 	add.w	r2, r7, #24
 800e350:	f107 0118 	add.w	r1, r7, #24
 800e354:	f107 030c 	add.w	r3, r7, #12
 800e358:	4618      	mov	r0, r3
 800e35a:	f7fe fcdc 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e35e:	6278      	str	r0, [r7, #36]	@ 0x24
 800e360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e362:	2b00      	cmp	r3, #0
 800e364:	d16b      	bne.n	800e43e <ecp_normalize_jac+0x142>
 800e366:	f107 030c 	add.w	r3, r7, #12
 800e36a:	6879      	ldr	r1, [r7, #4]
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7ff ff61 	bl	800e234 <ecp_modp>
 800e372:	6278      	str	r0, [r7, #36]	@ 0x24
 800e374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e376:	2b00      	cmp	r3, #0
 800e378:	d161      	bne.n	800e43e <ecp_normalize_jac+0x142>
 800e37a:	4b38      	ldr	r3, [pc, #224]	@ (800e45c <ecp_normalize_jac+0x160>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3301      	adds	r3, #1
 800e380:	4a36      	ldr	r2, [pc, #216]	@ (800e45c <ecp_normalize_jac+0x160>)
 800e382:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ZZi    ) ); MOD_MUL( pt->X );
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	f107 020c 	add.w	r2, r7, #12
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fe fcc2 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e392:	6278      	str	r0, [r7, #36]	@ 0x24
 800e394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e396:	2b00      	cmp	r3, #0
 800e398:	d151      	bne.n	800e43e <ecp_normalize_jac+0x142>
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	6879      	ldr	r1, [r7, #4]
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7ff ff48 	bl	800e234 <ecp_modp>
 800e3a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d148      	bne.n	800e43e <ecp_normalize_jac+0x142>
 800e3ac:	4b2b      	ldr	r3, [pc, #172]	@ (800e45c <ecp_normalize_jac+0x160>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	4a2a      	ldr	r2, [pc, #168]	@ (800e45c <ecp_normalize_jac+0x160>)
 800e3b4:	6013      	str	r3, [r2, #0]

    /*
     * Y = Y / Z^3  mod p
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ZZi    ) ); MOD_MUL( pt->Y );
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	f103 000c 	add.w	r0, r3, #12
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	330c      	adds	r3, #12
 800e3c0:	f107 020c 	add.w	r2, r7, #12
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	f7fe fca6 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e3ca:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d135      	bne.n	800e43e <ecp_normalize_jac+0x142>
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	330c      	adds	r3, #12
 800e3d6:	6879      	ldr	r1, [r7, #4]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7ff ff2b 	bl	800e234 <ecp_modp>
 800e3de:	6278      	str	r0, [r7, #36]	@ 0x24
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d12b      	bne.n	800e43e <ecp_normalize_jac+0x142>
 800e3e6:	4b1d      	ldr	r3, [pc, #116]	@ (800e45c <ecp_normalize_jac+0x160>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	4a1b      	ldr	r2, [pc, #108]	@ (800e45c <ecp_normalize_jac+0x160>)
 800e3ee:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &Zi     ) ); MOD_MUL( pt->Y );
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	f103 000c 	add.w	r0, r3, #12
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	330c      	adds	r3, #12
 800e3fa:	f107 0218 	add.w	r2, r7, #24
 800e3fe:	4619      	mov	r1, r3
 800e400:	f7fe fc89 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e404:	6278      	str	r0, [r7, #36]	@ 0x24
 800e406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d118      	bne.n	800e43e <ecp_normalize_jac+0x142>
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	330c      	adds	r3, #12
 800e410:	6879      	ldr	r1, [r7, #4]
 800e412:	4618      	mov	r0, r3
 800e414:	f7ff ff0e 	bl	800e234 <ecp_modp>
 800e418:	6278      	str	r0, [r7, #36]	@ 0x24
 800e41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d10e      	bne.n	800e43e <ecp_normalize_jac+0x142>
 800e420:	4b0e      	ldr	r3, [pc, #56]	@ (800e45c <ecp_normalize_jac+0x160>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	3301      	adds	r3, #1
 800e426:	4a0d      	ldr	r2, [pc, #52]	@ (800e45c <ecp_normalize_jac+0x160>)
 800e428:	6013      	str	r3, [r2, #0]

    /*
     * Z = 1
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &pt->Z, 1 ) );
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	3318      	adds	r3, #24
 800e42e:	2101      	movs	r1, #1
 800e430:	4618      	mov	r0, r3
 800e432:	f7fc f931 	bl	800a698 <mbedtls_mpi_lset>
 800e436:	6278      	str	r0, [r7, #36]	@ 0x24
 800e438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e43a:	2b00      	cmp	r3, #0

cleanup:
 800e43c:	bf00      	nop

    mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800e43e:	f107 0318 	add.w	r3, r7, #24
 800e442:	4618      	mov	r0, r3
 800e444:	f7fb fefa 	bl	800a23c <mbedtls_mpi_free>
 800e448:	f107 030c 	add.w	r3, r7, #12
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fb fef5 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800e452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e454:	4618      	mov	r0, r3
 800e456:	3728      	adds	r7, #40	@ 0x28
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	2400257c 	.word	0x2400257c

0800e460 <ecp_normalize_jac_many>:
 *
 * Cost: 1N(t) := 1I + (6t - 3)M + 1S
 */
static int ecp_normalize_jac_many( const mbedtls_ecp_group *grp,
                                   mbedtls_ecp_point *T[], size_t T_size )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b090      	sub	sp, #64	@ 0x40
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi *c, u, Zi, ZZi;

    if( T_size < 2 )
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d807      	bhi.n	800e482 <ecp_normalize_jac_many+0x22>
        return( ecp_normalize_jac( grp, *T ) );
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	4619      	mov	r1, r3
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f7ff ff3f 	bl	800e2fc <ecp_normalize_jac>
 800e47e:	4603      	mov	r3, r0
 800e480:	e1de      	b.n	800e840 <ecp_normalize_jac_many+0x3e0>
#if defined(MBEDTLS_ECP_NORMALIZE_JAC_MANY_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_jac_many( grp, T, T_size ) );
#endif

    if( ( c = mbedtls_calloc( T_size, sizeof( mbedtls_mpi ) ) ) == NULL )
 800e482:	210c      	movs	r1, #12
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f007 f98b 	bl	80157a0 <calloc>
 800e48a:	4603      	mov	r3, r0
 800e48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e490:	2b00      	cmp	r3, #0
 800e492:	d101      	bne.n	800e498 <ecp_normalize_jac_many+0x38>
        return( MBEDTLS_ERR_ECP_ALLOC_FAILED );
 800e494:	4b4b      	ldr	r3, [pc, #300]	@ (800e5c4 <ecp_normalize_jac_many+0x164>)
 800e496:	e1d3      	b.n	800e840 <ecp_normalize_jac_many+0x3e0>

    for( i = 0; i < T_size; i++ )
 800e498:	2300      	movs	r3, #0
 800e49a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e49c:	e00d      	b.n	800e4ba <ecp_normalize_jac_many+0x5a>
        mbedtls_mpi_init( &c[i] );
 800e49e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	005b      	lsls	r3, r3, #1
 800e4a4:	4413      	add	r3, r2
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4ac:	4413      	add	r3, r2
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fb feb1 	bl	800a216 <mbedtls_mpi_init>
    for( i = 0; i < T_size; i++ )
 800e4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e4ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d3ed      	bcc.n	800e49e <ecp_normalize_jac_many+0x3e>

    mbedtls_mpi_init( &u ); mbedtls_mpi_init( &Zi ); mbedtls_mpi_init( &ZZi );
 800e4c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fb fea5 	bl	800a216 <mbedtls_mpi_init>
 800e4cc:	f107 031c 	add.w	r3, r7, #28
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7fb fea0 	bl	800a216 <mbedtls_mpi_init>
 800e4d6:	f107 0310 	add.w	r3, r7, #16
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fb fe9b 	bl	800a216 <mbedtls_mpi_init>

    /*
     * c[i] = Z_0 * ... * Z_i
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &c[0], &T[0]->Z ) );
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	3318      	adds	r3, #24
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e4ea:	f7fb ff76 	bl	800a3da <mbedtls_mpi_copy>
 800e4ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e4f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f040 817c 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
    for( i = 1; i < T_size; i++ )
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e4fc:	e036      	b.n	800e56c <ecp_normalize_jac_many+0x10c>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &c[i], &c[i-1], &T[i]->Z ) );
 800e4fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e500:	4613      	mov	r3, r2
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	4413      	add	r3, r2
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	461a      	mov	r2, r3
 800e50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e50c:	1898      	adds	r0, r3, r2
 800e50e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e510:	4613      	mov	r3, r2
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	4413      	add	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	3b0c      	subs	r3, #12
 800e51a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e51c:	18d1      	adds	r1, r2, r3
 800e51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	4413      	add	r3, r2
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3318      	adds	r3, #24
 800e52a:	461a      	mov	r2, r3
 800e52c:	f7fe fbf3 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e530:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e534:	2b00      	cmp	r3, #0
 800e536:	f040 815b 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
        MOD_MUL( c[i] );
 800e53a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e53c:	4613      	mov	r3, r2
 800e53e:	005b      	lsls	r3, r3, #1
 800e540:	4413      	add	r3, r2
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	461a      	mov	r2, r3
 800e546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e548:	4413      	add	r3, r2
 800e54a:	68f9      	ldr	r1, [r7, #12]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7ff fe71 	bl	800e234 <ecp_modp>
 800e552:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e556:	2b00      	cmp	r3, #0
 800e558:	f040 814a 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
 800e55c:	4b1a      	ldr	r3, [pc, #104]	@ (800e5c8 <ecp_normalize_jac_many+0x168>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3301      	adds	r3, #1
 800e562:	4a19      	ldr	r2, [pc, #100]	@ (800e5c8 <ecp_normalize_jac_many+0x168>)
 800e564:	6013      	str	r3, [r2, #0]
    for( i = 1; i < T_size; i++ )
 800e566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e568:	3301      	adds	r3, #1
 800e56a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e56c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	429a      	cmp	r2, r3
 800e572:	d3c4      	bcc.n	800e4fe <ecp_normalize_jac_many+0x9e>
    }

    /*
     * u = 1 / (Z_0 * ... * Z_n) mod P
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &u, &c[T_size-1], &grp->P ) );
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	4613      	mov	r3, r2
 800e578:	005b      	lsls	r3, r3, #1
 800e57a:	4413      	add	r3, r2
 800e57c:	009b      	lsls	r3, r3, #2
 800e57e:	3b0c      	subs	r3, #12
 800e580:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e582:	18d1      	adds	r1, r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	1d1a      	adds	r2, r3, #4
 800e588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7ff f95f 	bl	800d850 <mbedtls_mpi_inv_mod>
 800e592:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e596:	2b00      	cmp	r3, #0
 800e598:	f040 812a 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>

    for( i = T_size - 1; ; i-- )
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	3b01      	subs	r3, #1
 800e5a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    {
        /*
         * Zi = 1 / Z_i mod p
         * u = 1 / (Z_0 * ... * Z_i) mod P
         */
        if( i == 0 ) {
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d111      	bne.n	800e5cc <ecp_normalize_jac_many+0x16c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Zi, &u ) );
 800e5a8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800e5ac:	f107 031c 	add.w	r3, r7, #28
 800e5b0:	4611      	mov	r1, r2
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fb ff11 	bl	800a3da <mbedtls_mpi_copy>
 800e5b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e5ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d04c      	beq.n	800e65a <ecp_normalize_jac_many+0x1fa>
 800e5c0:	e116      	b.n	800e7f0 <ecp_normalize_jac_many+0x390>
 800e5c2:	bf00      	nop
 800e5c4:	ffffb280 	.word	0xffffb280
 800e5c8:	2400257c 	.word	0x2400257c
        }
        else
        {
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Zi, &u, &c[i-1]  ) ); MOD_MUL( Zi );
 800e5cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	4413      	add	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	3b0c      	subs	r3, #12
 800e5d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5da:	441a      	add	r2, r3
 800e5dc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e5e0:	f107 031c 	add.w	r3, r7, #28
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fe fb96 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e5ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f040 80fe 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
 800e5f4:	f107 031c 	add.w	r3, r7, #28
 800e5f8:	68f9      	ldr	r1, [r7, #12]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7ff fe1a 	bl	800e234 <ecp_modp>
 800e600:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e604:	2b00      	cmp	r3, #0
 800e606:	f040 80f3 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
 800e60a:	4b8f      	ldr	r3, [pc, #572]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	3301      	adds	r3, #1
 800e610:	4a8d      	ldr	r2, [pc, #564]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e612:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &u,  &u, &T[i]->Z ) ); MOD_MUL( u );
 800e614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	4413      	add	r3, r2
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f103 0218 	add.w	r2, r3, #24
 800e622:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e626:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fe fb73 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e630:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e634:	2b00      	cmp	r3, #0
 800e636:	f040 80db 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
 800e63a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e63e:	68f9      	ldr	r1, [r7, #12]
 800e640:	4618      	mov	r0, r3
 800e642:	f7ff fdf7 	bl	800e234 <ecp_modp>
 800e646:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f040 80d0 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
 800e650:	4b7d      	ldr	r3, [pc, #500]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3301      	adds	r3, #1
 800e656:	4a7c      	ldr	r2, [pc, #496]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e658:	6013      	str	r3, [r2, #0]
        }

        /*
         * proceed as in normalize()
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ZZi,     &Zi,      &Zi  ) ); MOD_MUL( ZZi );
 800e65a:	f107 021c 	add.w	r2, r7, #28
 800e65e:	f107 011c 	add.w	r1, r7, #28
 800e662:	f107 0310 	add.w	r3, r7, #16
 800e666:	4618      	mov	r0, r3
 800e668:	f7fe fb55 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e66c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e670:	2b00      	cmp	r3, #0
 800e672:	f040 80bd 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
 800e676:	f107 0310 	add.w	r3, r7, #16
 800e67a:	68f9      	ldr	r1, [r7, #12]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7ff fdd9 	bl	800e234 <ecp_modp>
 800e682:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e686:	2b00      	cmp	r3, #0
 800e688:	f040 80b2 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
 800e68c:	4b6e      	ldr	r3, [pc, #440]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3301      	adds	r3, #1
 800e692:	4a6d      	ldr	r2, [pc, #436]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e694:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->X, &T[i]->X, &ZZi ) ); MOD_MUL( T[i]->X );
 800e696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	4413      	add	r3, r2
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a4:	009b      	lsls	r3, r3, #2
 800e6a6:	68ba      	ldr	r2, [r7, #8]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	f107 0310 	add.w	r3, r7, #16
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	f7fe fb2f 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e6b8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f040 8097 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
 800e6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	68ba      	ldr	r2, [r7, #8]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68f9      	ldr	r1, [r7, #12]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff fdb0 	bl	800e234 <ecp_modp>
 800e6d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e6d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f040 8089 	bne.w	800e7f0 <ecp_normalize_jac_many+0x390>
 800e6de:	4b5a      	ldr	r3, [pc, #360]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	4a58      	ldr	r2, [pc, #352]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e6e6:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &ZZi ) ); MOD_MUL( T[i]->Y );
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f103 000c 	add.w	r0, r3, #12
 800e6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	330c      	adds	r3, #12
 800e702:	f107 0210 	add.w	r2, r7, #16
 800e706:	4619      	mov	r1, r3
 800e708:	f7fe fb05 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e70c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e70e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e710:	2b00      	cmp	r3, #0
 800e712:	d16d      	bne.n	800e7f0 <ecp_normalize_jac_many+0x390>
 800e714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	68ba      	ldr	r2, [r7, #8]
 800e71a:	4413      	add	r3, r2
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	330c      	adds	r3, #12
 800e720:	68f9      	ldr	r1, [r7, #12]
 800e722:	4618      	mov	r0, r3
 800e724:	f7ff fd86 	bl	800e234 <ecp_modp>
 800e728:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e72a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d15f      	bne.n	800e7f0 <ecp_normalize_jac_many+0x390>
 800e730:	4b45      	ldr	r3, [pc, #276]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3301      	adds	r3, #1
 800e736:	4a44      	ldr	r2, [pc, #272]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e738:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T[i]->Y, &T[i]->Y, &Zi  ) ); MOD_MUL( T[i]->Y );
 800e73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	4413      	add	r3, r2
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f103 000c 	add.w	r0, r3, #12
 800e748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	68ba      	ldr	r2, [r7, #8]
 800e74e:	4413      	add	r3, r2
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	330c      	adds	r3, #12
 800e754:	f107 021c 	add.w	r2, r7, #28
 800e758:	4619      	mov	r1, r3
 800e75a:	f7fe fadc 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e75e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e762:	2b00      	cmp	r3, #0
 800e764:	d144      	bne.n	800e7f0 <ecp_normalize_jac_many+0x390>
 800e766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e768:	009b      	lsls	r3, r3, #2
 800e76a:	68ba      	ldr	r2, [r7, #8]
 800e76c:	4413      	add	r3, r2
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	330c      	adds	r3, #12
 800e772:	68f9      	ldr	r1, [r7, #12]
 800e774:	4618      	mov	r0, r3
 800e776:	f7ff fd5d 	bl	800e234 <ecp_modp>
 800e77a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e77c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d136      	bne.n	800e7f0 <ecp_normalize_jac_many+0x390>
 800e782:	4b31      	ldr	r3, [pc, #196]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	3301      	adds	r3, #1
 800e788:	4a2f      	ldr	r2, [pc, #188]	@ (800e848 <ecp_normalize_jac_many+0x3e8>)
 800e78a:	6013      	str	r3, [r2, #0]
         * Post-precessing: reclaim some memory by shrinking coordinates
         * - not storing Z (always 1)
         * - shrinking other coordinates, but still keeping the same number of
         *   limbs as P, as otherwise it will too likely be regrown too fast.
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->X, grp->P.n ) );
 800e78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78e:	009b      	lsls	r3, r3, #2
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	4413      	add	r3, r2
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	461a      	mov	r2, r3
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	689b      	ldr	r3, [r3, #8]
 800e79c:	4619      	mov	r1, r3
 800e79e:	4610      	mov	r0, r2
 800e7a0:	f7fb fdb5 	bl	800a30e <mbedtls_mpi_shrink>
 800e7a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e7a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d121      	bne.n	800e7f0 <ecp_normalize_jac_many+0x390>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shrink( &T[i]->Y, grp->P.n ) );
 800e7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	4413      	add	r3, r2
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f103 020c 	add.w	r2, r3, #12
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	689b      	ldr	r3, [r3, #8]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	4610      	mov	r0, r2
 800e7c2:	f7fb fda4 	bl	800a30e <mbedtls_mpi_shrink>
 800e7c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e7c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d110      	bne.n	800e7f0 <ecp_normalize_jac_many+0x390>
        mbedtls_mpi_free( &T[i]->Z );
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	68ba      	ldr	r2, [r7, #8]
 800e7d4:	4413      	add	r3, r2
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	3318      	adds	r3, #24
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fb fd2e 	bl	800a23c <mbedtls_mpi_free>

        if( i == 0 )
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d003      	beq.n	800e7ee <ecp_normalize_jac_many+0x38e>
    for( i = T_size - 1; ; i-- )
 800e7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if( i == 0 ) {
 800e7ec:	e6d9      	b.n	800e5a2 <ecp_normalize_jac_many+0x142>
            break;
 800e7ee:	bf00      	nop
    }

cleanup:

    mbedtls_mpi_free( &u ); mbedtls_mpi_free( &Zi ); mbedtls_mpi_free( &ZZi );
 800e7f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fb fd21 	bl	800a23c <mbedtls_mpi_free>
 800e7fa:	f107 031c 	add.w	r3, r7, #28
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7fb fd1c 	bl	800a23c <mbedtls_mpi_free>
 800e804:	f107 0310 	add.w	r3, r7, #16
 800e808:	4618      	mov	r0, r3
 800e80a:	f7fb fd17 	bl	800a23c <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800e80e:	2300      	movs	r3, #0
 800e810:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e812:	e00d      	b.n	800e830 <ecp_normalize_jac_many+0x3d0>
        mbedtls_mpi_free( &c[i] );
 800e814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e816:	4613      	mov	r3, r2
 800e818:	005b      	lsls	r3, r3, #1
 800e81a:	4413      	add	r3, r2
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	461a      	mov	r2, r3
 800e820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e822:	4413      	add	r3, r2
 800e824:	4618      	mov	r0, r3
 800e826:	f7fb fd09 	bl	800a23c <mbedtls_mpi_free>
    for( i = 0; i < T_size; i++ )
 800e82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82c:	3301      	adds	r3, #1
 800e82e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e830:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	429a      	cmp	r2, r3
 800e836:	d3ed      	bcc.n	800e814 <ecp_normalize_jac_many+0x3b4>
    mbedtls_free( c );
 800e838:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800e83a:	f006 ffcd 	bl	80157d8 <free>

    return( ret );
 800e83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e840:	4618      	mov	r0, r3
 800e842:	3740      	adds	r7, #64	@ 0x40
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	2400257c 	.word	0x2400257c

0800e84c <ecp_safe_invert_jac>:
 * "inv" must be 0 (don't invert) or 1 (invert) or the result will be invalid
 */
static int ecp_safe_invert_jac( const mbedtls_ecp_group *grp,
                            mbedtls_ecp_point *Q,
                            unsigned char inv )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b08a      	sub	sp, #40	@ 0x28
 800e850:	af00      	add	r7, sp, #0
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	4613      	mov	r3, r2
 800e858:	71fb      	strb	r3, [r7, #7]
    int ret;
    unsigned char nonzero;
    mbedtls_mpi mQY;

    mbedtls_mpi_init( &mQY );
 800e85a:	f107 0314 	add.w	r3, r7, #20
 800e85e:	4618      	mov	r0, r3
 800e860:	f7fb fcd9 	bl	800a216 <mbedtls_mpi_init>

    /* Use the fact that -Q.Y mod P = P - Q.Y unless Q.Y == 0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mQY, &grp->P, &Q->Y ) );
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	1d19      	adds	r1, r3, #4
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	f103 020c 	add.w	r2, r3, #12
 800e86e:	f107 0314 	add.w	r3, r7, #20
 800e872:	4618      	mov	r0, r3
 800e874:	f7fc fe1a 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800e878:	6278      	str	r0, [r7, #36]	@ 0x24
 800e87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d11e      	bne.n	800e8be <ecp_safe_invert_jac+0x72>
    nonzero = mbedtls_mpi_cmp_int( &Q->Y, 0 ) != 0;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	330c      	adds	r3, #12
 800e884:	2100      	movs	r1, #0
 800e886:	4618      	mov	r0, r3
 800e888:	f7fc fc41 	bl	800b10e <mbedtls_mpi_cmp_int>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	bf14      	ite	ne
 800e892:	2301      	movne	r3, #1
 800e894:	2300      	moveq	r3, #0
 800e896:	b2db      	uxtb	r3, r3
 800e898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &Q->Y, &mQY, inv & nonzero ) );
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	f103 000c 	add.w	r0, r3, #12
 800e8a2:	79fa      	ldrb	r2, [r7, #7]
 800e8a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	f107 0314 	add.w	r3, r7, #20
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	f7fb fdee 	bl	800a492 <mbedtls_mpi_safe_cond_assign>
 800e8b6:	6278      	str	r0, [r7, #36]	@ 0x24
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ba:	2b00      	cmp	r3, #0

cleanup:
 800e8bc:	bf00      	nop
    mbedtls_mpi_free( &mQY );
 800e8be:	f107 0314 	add.w	r3, r7, #20
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fb fcba 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3728      	adds	r7, #40	@ 0x28
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
	...

0800e8d4 <ecp_double_jac>:
 *             4M + 4S          (A == -3)
 *             3M + 6S + 1a     otherwise
 */
static int ecp_double_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                           const mbedtls_ecp_point *P )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b092      	sub	sp, #72	@ 0x48
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	60f8      	str	r0, [r7, #12]
 800e8dc:	60b9      	str	r1, [r7, #8]
 800e8de:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_mpi M, S, T, U;

#if defined(MBEDTLS_SELF_TEST)
    dbl_count++;
 800e8e0:	4b7e      	ldr	r3, [pc, #504]	@ (800eadc <ecp_double_jac+0x208>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	4a7d      	ldr	r2, [pc, #500]	@ (800eadc <ecp_double_jac+0x208>)
 800e8e8:	6013      	str	r3, [r2, #0]
#if defined(MBEDTLS_ECP_DOUBLE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_jac( grp, R, P ) );
#endif /* MBEDTLS_ECP_DOUBLE_JAC_ALT */

    mbedtls_mpi_init( &M ); mbedtls_mpi_init( &S ); mbedtls_mpi_init( &T ); mbedtls_mpi_init( &U );
 800e8ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fb fc91 	bl	800a216 <mbedtls_mpi_init>
 800e8f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f7fb fc8c 	bl	800a216 <mbedtls_mpi_init>
 800e8fe:	f107 0320 	add.w	r3, r7, #32
 800e902:	4618      	mov	r0, r3
 800e904:	f7fb fc87 	bl	800a216 <mbedtls_mpi_init>
 800e908:	f107 0314 	add.w	r3, r7, #20
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fb fc82 	bl	800a216 <mbedtls_mpi_init>

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	699b      	ldr	r3, [r3, #24]
 800e916:	2b00      	cmp	r3, #0
 800e918:	f040 80b5 	bne.w	800ea86 <ecp_double_jac+0x1b2>
    {
        /* M = 3(X + Z^2)(X - Z^2) */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f103 0118 	add.w	r1, r3, #24
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f103 0218 	add.w	r2, r3, #24
 800e928:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e92c:	4618      	mov	r0, r3
 800e92e:	f7fe f9f2 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800e932:	6478      	str	r0, [r7, #68]	@ 0x44
 800e934:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e936:	2b00      	cmp	r3, #0
 800e938:	f040 838b 	bne.w	800f052 <ecp_double_jac+0x77e>
 800e93c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e940:	68f9      	ldr	r1, [r7, #12]
 800e942:	4618      	mov	r0, r3
 800e944:	f7ff fc76 	bl	800e234 <ecp_modp>
 800e948:	6478      	str	r0, [r7, #68]	@ 0x44
 800e94a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f040 8380 	bne.w	800f052 <ecp_double_jac+0x77e>
 800e952:	4b63      	ldr	r3, [pc, #396]	@ (800eae0 <ecp_double_jac+0x20c>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3301      	adds	r3, #1
 800e958:	4a61      	ldr	r2, [pc, #388]	@ (800eae0 <ecp_double_jac+0x20c>)
 800e95a:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &T,  &P->X,  &S      ) ); MOD_ADD( T );
 800e95c:	6879      	ldr	r1, [r7, #4]
 800e95e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e962:	f107 0320 	add.w	r3, r7, #32
 800e966:	4618      	mov	r0, r3
 800e968:	f7fc fd5c 	bl	800b424 <mbedtls_mpi_add_mpi>
 800e96c:	6478      	str	r0, [r7, #68]	@ 0x44
 800e96e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e970:	2b00      	cmp	r3, #0
 800e972:	f040 836e 	bne.w	800f052 <ecp_double_jac+0x77e>
 800e976:	e00d      	b.n	800e994 <ecp_double_jac+0xc0>
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	1d1a      	adds	r2, r3, #4
 800e97c:	f107 0120 	add.w	r1, r7, #32
 800e980:	f107 0320 	add.w	r3, r7, #32
 800e984:	4618      	mov	r0, r3
 800e986:	f7fc fced 	bl	800b364 <mbedtls_mpi_sub_abs>
 800e98a:	6478      	str	r0, [r7, #68]	@ 0x44
 800e98c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f040 835f 	bne.w	800f052 <ecp_double_jac+0x77e>
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	1d1a      	adds	r2, r3, #4
 800e998:	f107 0320 	add.w	r3, r7, #32
 800e99c:	4611      	mov	r1, r2
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7fc fb1a 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	dae6      	bge.n	800e978 <ecp_double_jac+0xa4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &U,  &P->X,  &S      ) ); MOD_SUB( U );
 800e9aa:	6879      	ldr	r1, [r7, #4]
 800e9ac:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800e9b0:	f107 0314 	add.w	r3, r7, #20
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fc fd79 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800e9ba:	6478      	str	r0, [r7, #68]	@ 0x44
 800e9bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	f040 8347 	bne.w	800f052 <ecp_double_jac+0x77e>
 800e9c4:	e00d      	b.n	800e9e2 <ecp_double_jac+0x10e>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	1d1a      	adds	r2, r3, #4
 800e9ca:	f107 0114 	add.w	r1, r7, #20
 800e9ce:	f107 0314 	add.w	r3, r7, #20
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f7fc fd26 	bl	800b424 <mbedtls_mpi_add_mpi>
 800e9d8:	6478      	str	r0, [r7, #68]	@ 0x44
 800e9da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f040 8338 	bne.w	800f052 <ecp_double_jac+0x77e>
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	da08      	bge.n	800e9fa <ecp_double_jac+0x126>
 800e9e8:	f107 0314 	add.w	r3, r7, #20
 800e9ec:	2100      	movs	r1, #0
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fc fb8d 	bl	800b10e <mbedtls_mpi_cmp_int>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d1e5      	bne.n	800e9c6 <ecp_double_jac+0xf2>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &U      ) ); MOD_MUL( S );
 800e9fa:	f107 0214 	add.w	r2, r7, #20
 800e9fe:	f107 0120 	add.w	r1, r7, #32
 800ea02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fe f985 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800ea0c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f040 831e 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ea16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ea1a:	68f9      	ldr	r1, [r7, #12]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7ff fc09 	bl	800e234 <ecp_modp>
 800ea22:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f040 8313 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ea2c:	4b2c      	ldr	r3, [pc, #176]	@ (800eae0 <ecp_double_jac+0x20c>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	3301      	adds	r3, #1
 800ea32:	4a2b      	ldr	r2, [pc, #172]	@ (800eae0 <ecp_double_jac+0x20c>)
 800ea34:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800ea36:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ea3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ea3e:	2203      	movs	r2, #3
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7fe fa11 	bl	800ce68 <mbedtls_mpi_mul_int>
 800ea46:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f040 8301 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ea50:	e00d      	b.n	800ea6e <ecp_double_jac+0x19a>
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	1d1a      	adds	r2, r3, #4
 800ea56:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ea5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f7fc fc80 	bl	800b364 <mbedtls_mpi_sub_abs>
 800ea64:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	f040 82f2 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	1d1a      	adds	r2, r3, #4
 800ea72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ea76:	4611      	mov	r1, r2
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fc faad 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	dae6      	bge.n	800ea52 <ecp_double_jac+0x17e>
 800ea84:	e0d6      	b.n	800ec34 <ecp_double_jac+0x360>
    }
    else
    {
        /* M = 3.X^2 */
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &P->X   ) ); MOD_MUL( S );
 800ea86:	6879      	ldr	r1, [r7, #4]
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7fe f941 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800ea94:	6478      	str	r0, [r7, #68]	@ 0x44
 800ea96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f040 82da 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ea9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eaa2:	68f9      	ldr	r1, [r7, #12]
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff fbc5 	bl	800e234 <ecp_modp>
 800eaaa:	6478      	str	r0, [r7, #68]	@ 0x44
 800eaac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f040 82cf 	bne.w	800f052 <ecp_double_jac+0x77e>
 800eab4:	4b0a      	ldr	r3, [pc, #40]	@ (800eae0 <ecp_double_jac+0x20c>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	3301      	adds	r3, #1
 800eaba:	4a09      	ldr	r2, [pc, #36]	@ (800eae0 <ecp_double_jac+0x20c>)
 800eabc:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M,  &S,     3       ) ); MOD_ADD( M );
 800eabe:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eac2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eac6:	2203      	movs	r2, #3
 800eac8:	4618      	mov	r0, r3
 800eaca:	f7fe f9cd 	bl	800ce68 <mbedtls_mpi_mul_int>
 800eace:	6478      	str	r0, [r7, #68]	@ 0x44
 800ead0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	f040 82bd 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ead8:	e012      	b.n	800eb00 <ecp_double_jac+0x22c>
 800eada:	bf00      	nop
 800eadc:	24002578 	.word	0x24002578
 800eae0:	2400257c 	.word	0x2400257c
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	1d1a      	adds	r2, r3, #4
 800eae8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800eaec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fc fc37 	bl	800b364 <mbedtls_mpi_sub_abs>
 800eaf6:	6478      	str	r0, [r7, #68]	@ 0x44
 800eaf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f040 82a9 	bne.w	800f052 <ecp_double_jac+0x77e>
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	1d1a      	adds	r2, r3, #4
 800eb04:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800eb08:	4611      	mov	r1, r2
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fc fa64 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	dae6      	bge.n	800eae4 <ecp_double_jac+0x210>

        /* Optimize away for "koblitz" curves with A = 0 */
        if( mbedtls_mpi_cmp_int( &grp->A, 0 ) != 0 )
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	3310      	adds	r3, #16
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fc faf6 	bl	800b10e <mbedtls_mpi_cmp_int>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f000 8085 	beq.w	800ec34 <ecp_double_jac+0x360>
        {
            /* M += A.Z^4 */
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->Z,  &P->Z   ) ); MOD_MUL( S );
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f103 0118 	add.w	r1, r3, #24
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f103 0218 	add.w	r2, r3, #24
 800eb36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7fe f8eb 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800eb40:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f040 8284 	bne.w	800f052 <ecp_double_jac+0x77e>
 800eb4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eb4e:	68f9      	ldr	r1, [r7, #12]
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7ff fb6f 	bl	800e234 <ecp_modp>
 800eb56:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	f040 8279 	bne.w	800f052 <ecp_double_jac+0x77e>
 800eb60:	4bb0      	ldr	r3, [pc, #704]	@ (800ee24 <ecp_double_jac+0x550>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	3301      	adds	r3, #1
 800eb66:	4aaf      	ldr	r2, [pc, #700]	@ (800ee24 <ecp_double_jac+0x550>)
 800eb68:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &S,     &S      ) ); MOD_MUL( T );
 800eb6a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800eb6e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eb72:	f107 0320 	add.w	r3, r7, #32
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7fe f8cd 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800eb7c:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	f040 8266 	bne.w	800f052 <ecp_double_jac+0x77e>
 800eb86:	f107 0320 	add.w	r3, r7, #32
 800eb8a:	68f9      	ldr	r1, [r7, #12]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7ff fb51 	bl	800e234 <ecp_modp>
 800eb92:	6478      	str	r0, [r7, #68]	@ 0x44
 800eb94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f040 825b 	bne.w	800f052 <ecp_double_jac+0x77e>
 800eb9c:	4ba1      	ldr	r3, [pc, #644]	@ (800ee24 <ecp_double_jac+0x550>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3301      	adds	r3, #1
 800eba2:	4aa0      	ldr	r2, [pc, #640]	@ (800ee24 <ecp_double_jac+0x550>)
 800eba4:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &T,     &grp->A ) ); MOD_MUL( S );
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f103 0210 	add.w	r2, r3, #16
 800ebac:	f107 0120 	add.w	r1, r7, #32
 800ebb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fe f8ae 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800ebba:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f040 8247 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ebc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ebc8:	68f9      	ldr	r1, [r7, #12]
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7ff fb32 	bl	800e234 <ecp_modp>
 800ebd0:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f040 823c 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ebda:	4b92      	ldr	r3, [pc, #584]	@ (800ee24 <ecp_double_jac+0x550>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	3301      	adds	r3, #1
 800ebe0:	4a90      	ldr	r2, [pc, #576]	@ (800ee24 <ecp_double_jac+0x550>)
 800ebe2:	6013      	str	r3, [r2, #0]
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M,  &M,     &S      ) ); MOD_ADD( M );
 800ebe4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ebe8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ebec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fc fc17 	bl	800b424 <mbedtls_mpi_add_mpi>
 800ebf6:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f040 8229 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ec00:	e00d      	b.n	800ec1e <ecp_double_jac+0x34a>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	1d1a      	adds	r2, r3, #4
 800ec06:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800ec0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fc fba8 	bl	800b364 <mbedtls_mpi_sub_abs>
 800ec14:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f040 821a 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	1d1a      	adds	r2, r3, #4
 800ec22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ec26:	4611      	mov	r1, r2
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7fc f9d5 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	dae6      	bge.n	800ec02 <ecp_double_jac+0x32e>
        }
    }

    /* S = 4.X.Y^2 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &P->Y,  &P->Y   ) ); MOD_MUL( T );
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f103 010c 	add.w	r1, r3, #12
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f103 020c 	add.w	r2, r3, #12
 800ec40:	f107 0320 	add.w	r3, r7, #32
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fe f866 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800ec4a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	f040 81ff 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ec54:	f107 0320 	add.w	r3, r7, #32
 800ec58:	68f9      	ldr	r1, [r7, #12]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7ff faea 	bl	800e234 <ecp_modp>
 800ec60:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	f040 81f4 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ec6a:	4b6e      	ldr	r3, [pc, #440]	@ (800ee24 <ecp_double_jac+0x550>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	4a6c      	ldr	r2, [pc, #432]	@ (800ee24 <ecp_double_jac+0x550>)
 800ec72:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T,  1               ) ); MOD_ADD( T );
 800ec74:	f107 0320 	add.w	r3, r7, #32
 800ec78:	2101      	movs	r1, #1
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fb ffed 	bl	800ac5a <mbedtls_mpi_shift_l>
 800ec80:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f040 81e4 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ec8a:	e00d      	b.n	800eca8 <ecp_double_jac+0x3d4>
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	1d1a      	adds	r2, r3, #4
 800ec90:	f107 0120 	add.w	r1, r7, #32
 800ec94:	f107 0320 	add.w	r3, r7, #32
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fc fb63 	bl	800b364 <mbedtls_mpi_sub_abs>
 800ec9e:	6478      	str	r0, [r7, #68]	@ 0x44
 800eca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f040 81d5 	bne.w	800f052 <ecp_double_jac+0x77e>
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	1d1a      	adds	r2, r3, #4
 800ecac:	f107 0320 	add.w	r3, r7, #32
 800ecb0:	4611      	mov	r1, r2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fc f990 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	dae6      	bge.n	800ec8c <ecp_double_jac+0x3b8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &P->X,  &T      ) ); MOD_MUL( S );
 800ecbe:	6879      	ldr	r1, [r7, #4]
 800ecc0:	f107 0220 	add.w	r2, r7, #32
 800ecc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7fe f824 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800ecce:	6478      	str	r0, [r7, #68]	@ 0x44
 800ecd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f040 81bd 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ecd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ecdc:	68f9      	ldr	r1, [r7, #12]
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7ff faa8 	bl	800e234 <ecp_modp>
 800ece4:	6478      	str	r0, [r7, #68]	@ 0x44
 800ece6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f040 81b2 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ecee:	4b4d      	ldr	r3, [pc, #308]	@ (800ee24 <ecp_double_jac+0x550>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	4a4b      	ldr	r2, [pc, #300]	@ (800ee24 <ecp_double_jac+0x550>)
 800ecf6:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &S,  1               ) ); MOD_ADD( S );
 800ecf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ecfc:	2101      	movs	r1, #1
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f7fb ffab 	bl	800ac5a <mbedtls_mpi_shift_l>
 800ed04:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	f040 81a2 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ed0e:	e00d      	b.n	800ed2c <ecp_double_jac+0x458>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	1d1a      	adds	r2, r3, #4
 800ed14:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ed18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fc fb21 	bl	800b364 <mbedtls_mpi_sub_abs>
 800ed22:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	f040 8193 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	1d1a      	adds	r2, r3, #4
 800ed30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed34:	4611      	mov	r1, r2
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7fc f94e 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	dae6      	bge.n	800ed10 <ecp_double_jac+0x43c>

    /* U = 8.Y^4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &T,     &T      ) ); MOD_MUL( U );
 800ed42:	f107 0220 	add.w	r2, r7, #32
 800ed46:	f107 0120 	add.w	r1, r7, #32
 800ed4a:	f107 0314 	add.w	r3, r7, #20
 800ed4e:	4618      	mov	r0, r3
 800ed50:	f7fd ffe1 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800ed54:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	f040 817a 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ed5e:	f107 0314 	add.w	r3, r7, #20
 800ed62:	68f9      	ldr	r1, [r7, #12]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7ff fa65 	bl	800e234 <ecp_modp>
 800ed6a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f040 816f 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ed74:	4b2b      	ldr	r3, [pc, #172]	@ (800ee24 <ecp_double_jac+0x550>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	4a2a      	ldr	r2, [pc, #168]	@ (800ee24 <ecp_double_jac+0x550>)
 800ed7c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800ed7e:	f107 0314 	add.w	r3, r7, #20
 800ed82:	2101      	movs	r1, #1
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7fb ff68 	bl	800ac5a <mbedtls_mpi_shift_l>
 800ed8a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ed8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f040 815f 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ed94:	e00d      	b.n	800edb2 <ecp_double_jac+0x4de>
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	1d1a      	adds	r2, r3, #4
 800ed9a:	f107 0114 	add.w	r1, r7, #20
 800ed9e:	f107 0314 	add.w	r3, r7, #20
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fc fade 	bl	800b364 <mbedtls_mpi_sub_abs>
 800eda8:	6478      	str	r0, [r7, #68]	@ 0x44
 800edaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edac:	2b00      	cmp	r3, #0
 800edae:	f040 8150 	bne.w	800f052 <ecp_double_jac+0x77e>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	1d1a      	adds	r2, r3, #4
 800edb6:	f107 0314 	add.w	r3, r7, #20
 800edba:	4611      	mov	r1, r2
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7fc f90b 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	dae6      	bge.n	800ed96 <ecp_double_jac+0x4c2>

    /* T = M^2 - 2.S */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T,  &M,     &M      ) ); MOD_MUL( T );
 800edc8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800edcc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800edd0:	f107 0320 	add.w	r3, r7, #32
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fd ff9e 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800edda:	6478      	str	r0, [r7, #68]	@ 0x44
 800eddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edde:	2b00      	cmp	r3, #0
 800ede0:	f040 8137 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ede4:	f107 0320 	add.w	r3, r7, #32
 800ede8:	68f9      	ldr	r1, [r7, #12]
 800edea:	4618      	mov	r0, r3
 800edec:	f7ff fa22 	bl	800e234 <ecp_modp>
 800edf0:	6478      	str	r0, [r7, #68]	@ 0x44
 800edf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f040 812c 	bne.w	800f052 <ecp_double_jac+0x77e>
 800edfa:	4b0a      	ldr	r3, [pc, #40]	@ (800ee24 <ecp_double_jac+0x550>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	3301      	adds	r3, #1
 800ee00:	4a08      	ldr	r2, [pc, #32]	@ (800ee24 <ecp_double_jac+0x550>)
 800ee02:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800ee04:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ee08:	f107 0120 	add.w	r1, r7, #32
 800ee0c:	f107 0320 	add.w	r3, r7, #32
 800ee10:	4618      	mov	r0, r3
 800ee12:	f7fc fb4b 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800ee16:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	f040 8119 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ee20:	e010      	b.n	800ee44 <ecp_double_jac+0x570>
 800ee22:	bf00      	nop
 800ee24:	2400257c 	.word	0x2400257c
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	1d1a      	adds	r2, r3, #4
 800ee2c:	f107 0120 	add.w	r1, r7, #32
 800ee30:	f107 0320 	add.w	r3, r7, #32
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fc faf5 	bl	800b424 <mbedtls_mpi_add_mpi>
 800ee3a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	f040 8107 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ee44:	6a3b      	ldr	r3, [r7, #32]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	da08      	bge.n	800ee5c <ecp_double_jac+0x588>
 800ee4a:	f107 0320 	add.w	r3, r7, #32
 800ee4e:	2100      	movs	r1, #0
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7fc f95c 	bl	800b10e <mbedtls_mpi_cmp_int>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d1e5      	bne.n	800ee28 <ecp_double_jac+0x554>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T,  &T,     &S      ) ); MOD_SUB( T );
 800ee5c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ee60:	f107 0120 	add.w	r1, r7, #32
 800ee64:	f107 0320 	add.w	r3, r7, #32
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fc fb1f 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800ee6e:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	f040 80ed 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ee78:	e00d      	b.n	800ee96 <ecp_double_jac+0x5c2>
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	1d1a      	adds	r2, r3, #4
 800ee7e:	f107 0120 	add.w	r1, r7, #32
 800ee82:	f107 0320 	add.w	r3, r7, #32
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fc facc 	bl	800b424 <mbedtls_mpi_add_mpi>
 800ee8c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ee8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f040 80de 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ee96:	6a3b      	ldr	r3, [r7, #32]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	da08      	bge.n	800eeae <ecp_double_jac+0x5da>
 800ee9c:	f107 0320 	add.w	r3, r7, #32
 800eea0:	2100      	movs	r1, #0
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fc f933 	bl	800b10e <mbedtls_mpi_cmp_int>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d1e5      	bne.n	800ee7a <ecp_double_jac+0x5a6>

    /* S = M(S - T) - U */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &T      ) ); MOD_SUB( S );
 800eeae:	f107 0220 	add.w	r2, r7, #32
 800eeb2:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eeb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fc faf6 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800eec0:	6478      	str	r0, [r7, #68]	@ 0x44
 800eec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f040 80c4 	bne.w	800f052 <ecp_double_jac+0x77e>
 800eeca:	e00d      	b.n	800eee8 <ecp_double_jac+0x614>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	1d1a      	adds	r2, r3, #4
 800eed0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800eed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fc faa3 	bl	800b424 <mbedtls_mpi_add_mpi>
 800eede:	6478      	str	r0, [r7, #68]	@ 0x44
 800eee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	f040 80b5 	bne.w	800f052 <ecp_double_jac+0x77e>
 800eee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	da08      	bge.n	800ef00 <ecp_double_jac+0x62c>
 800eeee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800eef2:	2100      	movs	r1, #0
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7fc f90a 	bl	800b10e <mbedtls_mpi_cmp_int>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1e5      	bne.n	800eecc <ecp_double_jac+0x5f8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S,  &S,     &M      ) ); MOD_MUL( S );
 800ef00:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800ef04:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ef08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fd ff02 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800ef12:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f040 809b 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ef1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef20:	68f9      	ldr	r1, [r7, #12]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7ff f986 	bl	800e234 <ecp_modp>
 800ef28:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f040 8090 	bne.w	800f052 <ecp_double_jac+0x77e>
 800ef32:	4b54      	ldr	r3, [pc, #336]	@ (800f084 <ecp_double_jac+0x7b0>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	3301      	adds	r3, #1
 800ef38:	4a52      	ldr	r2, [pc, #328]	@ (800f084 <ecp_double_jac+0x7b0>)
 800ef3a:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S,  &S,     &U      ) ); MOD_SUB( S );
 800ef3c:	f107 0214 	add.w	r2, r7, #20
 800ef40:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ef44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7fc faaf 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800ef4e:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d17d      	bne.n	800f052 <ecp_double_jac+0x77e>
 800ef56:	e00c      	b.n	800ef72 <ecp_double_jac+0x69e>
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	1d1a      	adds	r2, r3, #4
 800ef5c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800ef60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7fc fa5d 	bl	800b424 <mbedtls_mpi_add_mpi>
 800ef6a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ef6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d16f      	bne.n	800f052 <ecp_double_jac+0x77e>
 800ef72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	da08      	bge.n	800ef8a <ecp_double_jac+0x6b6>
 800ef78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fc f8c5 	bl	800b10e <mbedtls_mpi_cmp_int>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d1e6      	bne.n	800ef58 <ecp_double_jac+0x684>

    /* U = 2.Y.Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &U,  &P->Y,  &P->Z   ) ); MOD_MUL( U );
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f103 010c 	add.w	r1, r3, #12
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f103 0218 	add.w	r2, r3, #24
 800ef96:	f107 0314 	add.w	r3, r7, #20
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fd febb 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800efa0:	6478      	str	r0, [r7, #68]	@ 0x44
 800efa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d154      	bne.n	800f052 <ecp_double_jac+0x77e>
 800efa8:	f107 0314 	add.w	r3, r7, #20
 800efac:	68f9      	ldr	r1, [r7, #12]
 800efae:	4618      	mov	r0, r3
 800efb0:	f7ff f940 	bl	800e234 <ecp_modp>
 800efb4:	6478      	str	r0, [r7, #68]	@ 0x44
 800efb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d14a      	bne.n	800f052 <ecp_double_jac+0x77e>
 800efbc:	4b31      	ldr	r3, [pc, #196]	@ (800f084 <ecp_double_jac+0x7b0>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	3301      	adds	r3, #1
 800efc2:	4a30      	ldr	r2, [pc, #192]	@ (800f084 <ecp_double_jac+0x7b0>)
 800efc4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &U,  1               ) ); MOD_ADD( U );
 800efc6:	f107 0314 	add.w	r3, r7, #20
 800efca:	2101      	movs	r1, #1
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fb fe44 	bl	800ac5a <mbedtls_mpi_shift_l>
 800efd2:	6478      	str	r0, [r7, #68]	@ 0x44
 800efd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d13b      	bne.n	800f052 <ecp_double_jac+0x77e>
 800efda:	e00c      	b.n	800eff6 <ecp_double_jac+0x722>
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	1d1a      	adds	r2, r3, #4
 800efe0:	f107 0114 	add.w	r1, r7, #20
 800efe4:	f107 0314 	add.w	r3, r7, #20
 800efe8:	4618      	mov	r0, r3
 800efea:	f7fc f9bb 	bl	800b364 <mbedtls_mpi_sub_abs>
 800efee:	6478      	str	r0, [r7, #68]	@ 0x44
 800eff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d12d      	bne.n	800f052 <ecp_double_jac+0x77e>
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	1d1a      	adds	r2, r3, #4
 800effa:	f107 0314 	add.w	r3, r7, #20
 800effe:	4611      	mov	r1, r2
 800f000:	4618      	mov	r0, r3
 800f002:	f7fb ffe9 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	dae7      	bge.n	800efdc <ecp_double_jac+0x708>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &T ) );
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	f107 0220 	add.w	r2, r7, #32
 800f012:	4611      	mov	r1, r2
 800f014:	4618      	mov	r0, r3
 800f016:	f7fb f9e0 	bl	800a3da <mbedtls_mpi_copy>
 800f01a:	6478      	str	r0, [r7, #68]	@ 0x44
 800f01c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d117      	bne.n	800f052 <ecp_double_jac+0x77e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &S ) );
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	330c      	adds	r3, #12
 800f026:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f02a:	4611      	mov	r1, r2
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7fb f9d4 	bl	800a3da <mbedtls_mpi_copy>
 800f032:	6478      	str	r0, [r7, #68]	@ 0x44
 800f034:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f036:	2b00      	cmp	r3, #0
 800f038:	d10b      	bne.n	800f052 <ecp_double_jac+0x77e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &U ) );
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	3318      	adds	r3, #24
 800f03e:	f107 0214 	add.w	r2, r7, #20
 800f042:	4611      	mov	r1, r2
 800f044:	4618      	mov	r0, r3
 800f046:	f7fb f9c8 	bl	800a3da <mbedtls_mpi_copy>
 800f04a:	6478      	str	r0, [r7, #68]	@ 0x44
 800f04c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f04e:	2b00      	cmp	r3, #0

cleanup:
 800f050:	bf00      	nop
    mbedtls_mpi_free( &M ); mbedtls_mpi_free( &S ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &U );
 800f052:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f056:	4618      	mov	r0, r3
 800f058:	f7fb f8f0 	bl	800a23c <mbedtls_mpi_free>
 800f05c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f060:	4618      	mov	r0, r3
 800f062:	f7fb f8eb 	bl	800a23c <mbedtls_mpi_free>
 800f066:	f107 0320 	add.w	r3, r7, #32
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fb f8e6 	bl	800a23c <mbedtls_mpi_free>
 800f070:	f107 0314 	add.w	r3, r7, #20
 800f074:	4618      	mov	r0, r3
 800f076:	f7fb f8e1 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800f07a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3748      	adds	r7, #72	@ 0x48
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	2400257c 	.word	0x2400257c

0800f088 <ecp_add_mixed>:
 *
 * Cost: 1A := 8M + 3S
 */
static int ecp_add_mixed( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                          const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b09a      	sub	sp, #104	@ 0x68
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
 800f094:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi T1, T2, T3, T4, X, Y, Z;

#if defined(MBEDTLS_SELF_TEST)
    add_count++;
 800f096:	4ba2      	ldr	r3, [pc, #648]	@ (800f320 <ecp_add_mixed+0x298>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	3301      	adds	r3, #1
 800f09c:	4aa0      	ldr	r2, [pc, #640]	@ (800f320 <ecp_add_mixed+0x298>)
 800f09e:	6013      	str	r3, [r2, #0]
#endif /* MBEDTLS_ECP_ADD_MIXED_ALT */

    /*
     * Trivial cases: P == 0 or Q == 0 (case 1)
     */
    if( mbedtls_mpi_cmp_int( &P->Z, 0 ) == 0 )
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	3318      	adds	r3, #24
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fc f831 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d105      	bne.n	800f0be <ecp_add_mixed+0x36>
        return( mbedtls_ecp_copy( R, Q ) );
 800f0b2:	6839      	ldr	r1, [r7, #0]
 800f0b4:	68b8      	ldr	r0, [r7, #8]
 800f0b6:	f7ff f855 	bl	800e164 <mbedtls_ecp_copy>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	e318      	b.n	800f6f0 <ecp_add_mixed+0x668>

    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 0 ) == 0 )
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	6a1b      	ldr	r3, [r3, #32]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00e      	beq.n	800f0e4 <ecp_add_mixed+0x5c>
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	3318      	adds	r3, #24
 800f0ca:	2100      	movs	r1, #0
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fc f81e 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d105      	bne.n	800f0e4 <ecp_add_mixed+0x5c>
        return( mbedtls_ecp_copy( R, P ) );
 800f0d8:	6879      	ldr	r1, [r7, #4]
 800f0da:	68b8      	ldr	r0, [r7, #8]
 800f0dc:	f7ff f842 	bl	800e164 <mbedtls_ecp_copy>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	e305      	b.n	800f6f0 <ecp_add_mixed+0x668>

    /*
     * Make sure Q coordinates are normalized
     */
    if( Q->Z.p != NULL && mbedtls_mpi_cmp_int( &Q->Z, 1 ) != 0 )
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	6a1b      	ldr	r3, [r3, #32]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d00a      	beq.n	800f102 <ecp_add_mixed+0x7a>
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	3318      	adds	r3, #24
 800f0f0:	2101      	movs	r1, #1
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fc f80b 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d001      	beq.n	800f102 <ecp_add_mixed+0x7a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800f0fe:	4b89      	ldr	r3, [pc, #548]	@ (800f324 <ecp_add_mixed+0x29c>)
 800f100:	e2f6      	b.n	800f6f0 <ecp_add_mixed+0x668>

    mbedtls_mpi_init( &T1 ); mbedtls_mpi_init( &T2 ); mbedtls_mpi_init( &T3 ); mbedtls_mpi_init( &T4 );
 800f102:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f106:	4618      	mov	r0, r3
 800f108:	f7fb f885 	bl	800a216 <mbedtls_mpi_init>
 800f10c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f110:	4618      	mov	r0, r3
 800f112:	f7fb f880 	bl	800a216 <mbedtls_mpi_init>
 800f116:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7fb f87b 	bl	800a216 <mbedtls_mpi_init>
 800f120:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f124:	4618      	mov	r0, r3
 800f126:	f7fb f876 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &X ); mbedtls_mpi_init( &Y ); mbedtls_mpi_init( &Z );
 800f12a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fb f871 	bl	800a216 <mbedtls_mpi_init>
 800f134:	f107 031c 	add.w	r3, r7, #28
 800f138:	4618      	mov	r0, r3
 800f13a:	f7fb f86c 	bl	800a216 <mbedtls_mpi_init>
 800f13e:	f107 0310 	add.w	r3, r7, #16
 800f142:	4618      	mov	r0, r3
 800f144:	f7fb f867 	bl	800a216 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &P->Z,  &P->Z ) );  MOD_MUL( T1 );
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f103 0118 	add.w	r1, r3, #24
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f103 0218 	add.w	r2, r3, #24
 800f154:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fd fddc 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f15e:	6678      	str	r0, [r7, #100]	@ 0x64
 800f160:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f162:	2b00      	cmp	r3, #0
 800f164:	f040 82a0 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f168:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f16c:	68f9      	ldr	r1, [r7, #12]
 800f16e:	4618      	mov	r0, r3
 800f170:	f7ff f860 	bl	800e234 <ecp_modp>
 800f174:	6678      	str	r0, [r7, #100]	@ 0x64
 800f176:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f040 8295 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f17e:	4b6a      	ldr	r3, [pc, #424]	@ (800f328 <ecp_add_mixed+0x2a0>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	3301      	adds	r3, #1
 800f184:	4a68      	ldr	r2, [pc, #416]	@ (800f328 <ecp_add_mixed+0x2a0>)
 800f186:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T1,    &P->Z ) );  MOD_MUL( T2 );
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f103 0218 	add.w	r2, r3, #24
 800f18e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f192:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f196:	4618      	mov	r0, r3
 800f198:	f7fd fdbd 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f19c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f19e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	f040 8281 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f1a6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f1aa:	68f9      	ldr	r1, [r7, #12]
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7ff f841 	bl	800e234 <ecp_modp>
 800f1b2:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f040 8276 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f1bc:	4b5a      	ldr	r3, [pc, #360]	@ (800f328 <ecp_add_mixed+0x2a0>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	4a59      	ldr	r2, [pc, #356]	@ (800f328 <ecp_add_mixed+0x2a0>)
 800f1c4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T1,  &T1,    &Q->X ) );  MOD_MUL( T1 );
 800f1c6:	683a      	ldr	r2, [r7, #0]
 800f1c8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f1cc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7fd fda0 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f1d6:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f040 8264 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f1e0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f1e4:	68f9      	ldr	r1, [r7, #12]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7ff f824 	bl	800e234 <ecp_modp>
 800f1ec:	6678      	str	r0, [r7, #100]	@ 0x64
 800f1ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f040 8259 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f1f6:	4b4c      	ldr	r3, [pc, #304]	@ (800f328 <ecp_add_mixed+0x2a0>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	4a4a      	ldr	r2, [pc, #296]	@ (800f328 <ecp_add_mixed+0x2a0>)
 800f1fe:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T2,  &T2,    &Q->Y ) );  MOD_MUL( T2 );
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	f103 020c 	add.w	r2, r3, #12
 800f206:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f20a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fd fd81 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f214:	6678      	str	r0, [r7, #100]	@ 0x64
 800f216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f040 8245 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f21e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f222:	68f9      	ldr	r1, [r7, #12]
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff f805 	bl	800e234 <ecp_modp>
 800f22a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f22c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f040 823a 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f234:	4b3c      	ldr	r3, [pc, #240]	@ (800f328 <ecp_add_mixed+0x2a0>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	3301      	adds	r3, #1
 800f23a:	4a3b      	ldr	r2, [pc, #236]	@ (800f328 <ecp_add_mixed+0x2a0>)
 800f23c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T1,  &T1,    &P->X ) );  MOD_SUB( T1 );
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f244:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fc f92f 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800f24e:	6678      	str	r0, [r7, #100]	@ 0x64
 800f250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f252:	2b00      	cmp	r3, #0
 800f254:	f040 8228 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f258:	e00d      	b.n	800f276 <ecp_add_mixed+0x1ee>
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	1d1a      	adds	r2, r3, #4
 800f25e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f262:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f266:	4618      	mov	r0, r3
 800f268:	f7fc f8dc 	bl	800b424 <mbedtls_mpi_add_mpi>
 800f26c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f26e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f270:	2b00      	cmp	r3, #0
 800f272:	f040 8219 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f278:	2b00      	cmp	r3, #0
 800f27a:	da08      	bge.n	800f28e <ecp_add_mixed+0x206>
 800f27c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f280:	2100      	movs	r1, #0
 800f282:	4618      	mov	r0, r3
 800f284:	f7fb ff43 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1e5      	bne.n	800f25a <ecp_add_mixed+0x1d2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T2,  &T2,    &P->Y ) );  MOD_SUB( T2 );
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f103 020c 	add.w	r2, r3, #12
 800f294:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f298:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fc f905 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800f2a2:	6678      	str	r0, [r7, #100]	@ 0x64
 800f2a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f040 81fe 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f2ac:	e00d      	b.n	800f2ca <ecp_add_mixed+0x242>
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	1d1a      	adds	r2, r3, #4
 800f2b2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f2b6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fc f8b2 	bl	800b424 <mbedtls_mpi_add_mpi>
 800f2c0:	6678      	str	r0, [r7, #100]	@ 0x64
 800f2c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	f040 81ef 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f2ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	da08      	bge.n	800f2e2 <ecp_add_mixed+0x25a>
 800f2d0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fb ff19 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d1e5      	bne.n	800f2ae <ecp_add_mixed+0x226>

    /* Special cases (2) and (3) */
    if( mbedtls_mpi_cmp_int( &T1, 0 ) == 0 )
 800f2e2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f2e6:	2100      	movs	r1, #0
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fb ff10 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d11b      	bne.n	800f32c <ecp_add_mixed+0x2a4>
    {
        if( mbedtls_mpi_cmp_int( &T2, 0 ) == 0 )
 800f2f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fb ff07 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d106      	bne.n	800f314 <ecp_add_mixed+0x28c>
        {
            ret = ecp_double_jac( grp, R, P );
 800f306:	687a      	ldr	r2, [r7, #4]
 800f308:	68b9      	ldr	r1, [r7, #8]
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f7ff fae2 	bl	800e8d4 <ecp_double_jac>
 800f310:	6678      	str	r0, [r7, #100]	@ 0x64
            goto cleanup;
 800f312:	e1c9      	b.n	800f6a8 <ecp_add_mixed+0x620>
        }
        else
        {
            ret = mbedtls_ecp_set_zero( R );
 800f314:	68b8      	ldr	r0, [r7, #8]
 800f316:	f7fe ff53 	bl	800e1c0 <mbedtls_ecp_set_zero>
 800f31a:	6678      	str	r0, [r7, #100]	@ 0x64
            goto cleanup;
 800f31c:	e1c4      	b.n	800f6a8 <ecp_add_mixed+0x620>
 800f31e:	bf00      	nop
 800f320:	24002574 	.word	0x24002574
 800f324:	ffffb080 	.word	0xffffb080
 800f328:	2400257c 	.word	0x2400257c
        }
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &Z,   &P->Z,  &T1   ) );  MOD_MUL( Z  );
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f103 0118 	add.w	r1, r3, #24
 800f332:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f336:	f107 0310 	add.w	r3, r7, #16
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7fd fceb 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f340:	6678      	str	r0, [r7, #100]	@ 0x64
 800f342:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f344:	2b00      	cmp	r3, #0
 800f346:	f040 81af 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f34a:	f107 0310 	add.w	r3, r7, #16
 800f34e:	68f9      	ldr	r1, [r7, #12]
 800f350:	4618      	mov	r0, r3
 800f352:	f7fe ff6f 	bl	800e234 <ecp_modp>
 800f356:	6678      	str	r0, [r7, #100]	@ 0x64
 800f358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f040 81a4 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f360:	4bb2      	ldr	r3, [pc, #712]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	3301      	adds	r3, #1
 800f366:	4ab1      	ldr	r2, [pc, #708]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f368:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T1,    &T1   ) );  MOD_MUL( T3 );
 800f36a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f36e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f372:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f376:	4618      	mov	r0, r3
 800f378:	f7fd fccd 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f37c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f37e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f380:	2b00      	cmp	r3, #0
 800f382:	f040 8191 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f386:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f38a:	68f9      	ldr	r1, [r7, #12]
 800f38c:	4618      	mov	r0, r3
 800f38e:	f7fe ff51 	bl	800e234 <ecp_modp>
 800f392:	6678      	str	r0, [r7, #100]	@ 0x64
 800f394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f396:	2b00      	cmp	r3, #0
 800f398:	f040 8186 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f39c:	4ba3      	ldr	r3, [pc, #652]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	4aa2      	ldr	r2, [pc, #648]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f3a4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T3,    &T1   ) );  MOD_MUL( T4 );
 800f3a6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f3aa:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f3ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7fd fcaf 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f3b8:	6678      	str	r0, [r7, #100]	@ 0x64
 800f3ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f040 8173 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f3c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f3c6:	68f9      	ldr	r1, [r7, #12]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7fe ff33 	bl	800e234 <ecp_modp>
 800f3ce:	6678      	str	r0, [r7, #100]	@ 0x64
 800f3d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	f040 8168 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f3d8:	4b94      	ldr	r3, [pc, #592]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	3301      	adds	r3, #1
 800f3de:	4a93      	ldr	r2, [pc, #588]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f3e0:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &P->X ) );  MOD_MUL( T3 );
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f3e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fd fc92 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f3f2:	6678      	str	r0, [r7, #100]	@ 0x64
 800f3f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	f040 8156 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f3fc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f400:	68f9      	ldr	r1, [r7, #12]
 800f402:	4618      	mov	r0, r3
 800f404:	f7fe ff16 	bl	800e234 <ecp_modp>
 800f408:	6678      	str	r0, [r7, #100]	@ 0x64
 800f40a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f040 814b 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f412:	4b86      	ldr	r3, [pc, #536]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	3301      	adds	r3, #1
 800f418:	4a84      	ldr	r2, [pc, #528]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f41a:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1,  &T3,    2     ) );  MOD_ADD( T1 );
 800f41c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f420:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f424:	2202      	movs	r2, #2
 800f426:	4618      	mov	r0, r3
 800f428:	f7fd fd1e 	bl	800ce68 <mbedtls_mpi_mul_int>
 800f42c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f42e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f430:	2b00      	cmp	r3, #0
 800f432:	f040 8139 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f436:	e00d      	b.n	800f454 <ecp_add_mixed+0x3cc>
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	1d1a      	adds	r2, r3, #4
 800f43c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f440:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f444:	4618      	mov	r0, r3
 800f446:	f7fb ff8d 	bl	800b364 <mbedtls_mpi_sub_abs>
 800f44a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f44c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f040 812a 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	1d1a      	adds	r2, r3, #4
 800f458:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f45c:	4611      	mov	r1, r2
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fb fdba 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800f464:	4603      	mov	r3, r0
 800f466:	2b00      	cmp	r3, #0
 800f468:	dae6      	bge.n	800f438 <ecp_add_mixed+0x3b0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &X,   &T2,    &T2   ) );  MOD_MUL( X  );
 800f46a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f46e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800f472:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f476:	4618      	mov	r0, r3
 800f478:	f7fd fc4d 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f47c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f47e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f480:	2b00      	cmp	r3, #0
 800f482:	f040 8111 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f486:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f48a:	68f9      	ldr	r1, [r7, #12]
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fe fed1 	bl	800e234 <ecp_modp>
 800f492:	6678      	str	r0, [r7, #100]	@ 0x64
 800f494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f496:	2b00      	cmp	r3, #0
 800f498:	f040 8106 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f49c:	4b63      	ldr	r3, [pc, #396]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	4a62      	ldr	r2, [pc, #392]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f4a4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T1   ) );  MOD_SUB( X  );
 800f4a6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800f4aa:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f4ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fb fffa 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800f4b8:	6678      	str	r0, [r7, #100]	@ 0x64
 800f4ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f040 80f3 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f4c2:	e00d      	b.n	800f4e0 <ecp_add_mixed+0x458>
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	1d1a      	adds	r2, r3, #4
 800f4c8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f4cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fb ffa7 	bl	800b424 <mbedtls_mpi_add_mpi>
 800f4d6:	6678      	str	r0, [r7, #100]	@ 0x64
 800f4d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f040 80e4 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	da08      	bge.n	800f4f8 <ecp_add_mixed+0x470>
 800f4e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7fb fe0e 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d1e5      	bne.n	800f4c4 <ecp_add_mixed+0x43c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X,   &X,     &T4   ) );  MOD_SUB( X  );
 800f4f8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f4fc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f500:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f504:	4618      	mov	r0, r3
 800f506:	f7fb ffd1 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800f50a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f50c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f040 80ca 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f514:	e00d      	b.n	800f532 <ecp_add_mixed+0x4aa>
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	1d1a      	adds	r2, r3, #4
 800f51a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f51e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f522:	4618      	mov	r0, r3
 800f524:	f7fb ff7e 	bl	800b424 <mbedtls_mpi_add_mpi>
 800f528:	6678      	str	r0, [r7, #100]	@ 0x64
 800f52a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	f040 80bb 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f534:	2b00      	cmp	r3, #0
 800f536:	da08      	bge.n	800f54a <ecp_add_mixed+0x4c2>
 800f538:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f53c:	2100      	movs	r1, #0
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fb fde5 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1e5      	bne.n	800f516 <ecp_add_mixed+0x48e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &T3,  &T3,    &X    ) );  MOD_SUB( T3 );
 800f54a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f54e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f552:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f556:	4618      	mov	r0, r3
 800f558:	f7fb ffa8 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800f55c:	6678      	str	r0, [r7, #100]	@ 0x64
 800f55e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f560:	2b00      	cmp	r3, #0
 800f562:	f040 80a1 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f566:	e00d      	b.n	800f584 <ecp_add_mixed+0x4fc>
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	1d1a      	adds	r2, r3, #4
 800f56c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f570:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f574:	4618      	mov	r0, r3
 800f576:	f7fb ff55 	bl	800b424 <mbedtls_mpi_add_mpi>
 800f57a:	6678      	str	r0, [r7, #100]	@ 0x64
 800f57c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f040 8092 	bne.w	800f6a8 <ecp_add_mixed+0x620>
 800f584:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f586:	2b00      	cmp	r3, #0
 800f588:	da08      	bge.n	800f59c <ecp_add_mixed+0x514>
 800f58a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f58e:	2100      	movs	r1, #0
 800f590:	4618      	mov	r0, r3
 800f592:	f7fb fdbc 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d1e5      	bne.n	800f568 <ecp_add_mixed+0x4e0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T3,  &T3,    &T2   ) );  MOD_MUL( T3 );
 800f59c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f5a0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f5a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fd fbb4 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f5ae:	6678      	str	r0, [r7, #100]	@ 0x64
 800f5b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d178      	bne.n	800f6a8 <ecp_add_mixed+0x620>
 800f5b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f5ba:	68f9      	ldr	r1, [r7, #12]
 800f5bc:	4618      	mov	r0, r3
 800f5be:	f7fe fe39 	bl	800e234 <ecp_modp>
 800f5c2:	6678      	str	r0, [r7, #100]	@ 0x64
 800f5c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d16e      	bne.n	800f6a8 <ecp_add_mixed+0x620>
 800f5ca:	4b18      	ldr	r3, [pc, #96]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	4a16      	ldr	r2, [pc, #88]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f5d2:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &T4,  &T4,    &P->Y ) );  MOD_MUL( T4 );
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f103 020c 	add.w	r2, r3, #12
 800f5da:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800f5de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fd fb97 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f5e8:	6678      	str	r0, [r7, #100]	@ 0x64
 800f5ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d15b      	bne.n	800f6a8 <ecp_add_mixed+0x620>
 800f5f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f5f4:	68f9      	ldr	r1, [r7, #12]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fe fe1c 	bl	800e234 <ecp_modp>
 800f5fc:	6678      	str	r0, [r7, #100]	@ 0x64
 800f5fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f600:	2b00      	cmp	r3, #0
 800f602:	d151      	bne.n	800f6a8 <ecp_add_mixed+0x620>
 800f604:	4b09      	ldr	r3, [pc, #36]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	3301      	adds	r3, #1
 800f60a:	4a08      	ldr	r2, [pc, #32]	@ (800f62c <ecp_add_mixed+0x5a4>)
 800f60c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &Y,   &T3,    &T4   ) );  MOD_SUB( Y  );
 800f60e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f612:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800f616:	f107 031c 	add.w	r3, r7, #28
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fb ff46 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800f620:	6678      	str	r0, [r7, #100]	@ 0x64
 800f622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f624:	2b00      	cmp	r3, #0
 800f626:	d13f      	bne.n	800f6a8 <ecp_add_mixed+0x620>
 800f628:	e00f      	b.n	800f64a <ecp_add_mixed+0x5c2>
 800f62a:	bf00      	nop
 800f62c:	2400257c 	.word	0x2400257c
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	1d1a      	adds	r2, r3, #4
 800f634:	f107 011c 	add.w	r1, r7, #28
 800f638:	f107 031c 	add.w	r3, r7, #28
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fb fef1 	bl	800b424 <mbedtls_mpi_add_mpi>
 800f642:	6678      	str	r0, [r7, #100]	@ 0x64
 800f644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f646:	2b00      	cmp	r3, #0
 800f648:	d12e      	bne.n	800f6a8 <ecp_add_mixed+0x620>
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	da08      	bge.n	800f662 <ecp_add_mixed+0x5da>
 800f650:	f107 031c 	add.w	r3, r7, #28
 800f654:	2100      	movs	r1, #0
 800f656:	4618      	mov	r0, r3
 800f658:	f7fb fd59 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1e6      	bne.n	800f630 <ecp_add_mixed+0x5a8>

    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->X, &X ) );
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800f668:	4611      	mov	r1, r2
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fa feb5 	bl	800a3da <mbedtls_mpi_copy>
 800f670:	6678      	str	r0, [r7, #100]	@ 0x64
 800f672:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f674:	2b00      	cmp	r3, #0
 800f676:	d117      	bne.n	800f6a8 <ecp_add_mixed+0x620>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Y, &Y ) );
 800f678:	68bb      	ldr	r3, [r7, #8]
 800f67a:	330c      	adds	r3, #12
 800f67c:	f107 021c 	add.w	r2, r7, #28
 800f680:	4611      	mov	r1, r2
 800f682:	4618      	mov	r0, r3
 800f684:	f7fa fea9 	bl	800a3da <mbedtls_mpi_copy>
 800f688:	6678      	str	r0, [r7, #100]	@ 0x64
 800f68a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d10b      	bne.n	800f6a8 <ecp_add_mixed+0x620>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &R->Z, &Z ) );
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	3318      	adds	r3, #24
 800f694:	f107 0210 	add.w	r2, r7, #16
 800f698:	4611      	mov	r1, r2
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fa fe9d 	bl	800a3da <mbedtls_mpi_copy>
 800f6a0:	6678      	str	r0, [r7, #100]	@ 0x64
 800f6a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f6a4:	2b00      	cmp	r3, #0

cleanup:
 800f6a6:	bf00      	nop

    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 ); mbedtls_mpi_free( &T3 ); mbedtls_mpi_free( &T4 );
 800f6a8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fa fdc5 	bl	800a23c <mbedtls_mpi_free>
 800f6b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fa fdc0 	bl	800a23c <mbedtls_mpi_free>
 800f6bc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fa fdbb 	bl	800a23c <mbedtls_mpi_free>
 800f6c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	f7fa fdb6 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
 800f6d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7fa fdb1 	bl	800a23c <mbedtls_mpi_free>
 800f6da:	f107 031c 	add.w	r3, r7, #28
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fa fdac 	bl	800a23c <mbedtls_mpi_free>
 800f6e4:	f107 0310 	add.w	r3, r7, #16
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7fa fda7 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800f6ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3768      	adds	r7, #104	@ 0x68
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <ecp_randomize_jac>:
 *
 * This countermeasure was first suggested in [2].
 */
static int ecp_randomize_jac( const mbedtls_ecp_group *grp, mbedtls_ecp_point *pt,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b08e      	sub	sp, #56	@ 0x38
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
 800f704:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l, ll;
    size_t p_size;
    int count = 0;
 800f706:	2300      	movs	r3, #0
 800f708:	633b      	str	r3, [r7, #48]	@ 0x30
#if defined(MBEDTLS_ECP_RANDOMIZE_JAC_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_jac( grp, pt, f_rng, p_rng ) );
#endif /* MBEDTLS_ECP_RANDOMIZE_JAC_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f70e:	3307      	adds	r3, #7
 800f710:	08db      	lsrs	r3, r3, #3
 800f712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mbedtls_mpi_init( &l ); mbedtls_mpi_init( &ll );
 800f714:	f107 0320 	add.w	r3, r7, #32
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fa fd7c 	bl	800a216 <mbedtls_mpi_init>
 800f71e:	f107 0314 	add.w	r3, r7, #20
 800f722:	4618      	mov	r0, r3
 800f724:	f7fa fd77 	bl	800a216 <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 800f728:	f107 0020 	add.w	r0, r7, #32
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f732:	f7fe f845 	bl	800d7c0 <mbedtls_mpi_fill_random>
 800f736:	6378      	str	r0, [r7, #52]	@ 0x34
 800f738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	f040 80b2 	bne.w	800f8a4 <ecp_randomize_jac+0x1ac>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800f740:	e00a      	b.n	800f758 <ecp_randomize_jac+0x60>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 800f742:	f107 0320 	add.w	r3, r7, #32
 800f746:	2101      	movs	r1, #1
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fb fb28 	bl	800ad9e <mbedtls_mpi_shift_r>
 800f74e:	6378      	str	r0, [r7, #52]	@ 0x34
 800f750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f752:	2b00      	cmp	r3, #0
 800f754:	f040 80a6 	bne.w	800f8a4 <ecp_randomize_jac+0x1ac>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	1d1a      	adds	r2, r3, #4
 800f75c:	f107 0320 	add.w	r3, r7, #32
 800f760:	4611      	mov	r1, r2
 800f762:	4618      	mov	r0, r3
 800f764:	f7fb fc38 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	dae9      	bge.n	800f742 <ecp_randomize_jac+0x4a>

        if( count++ > 10 )
 800f76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f770:	1c5a      	adds	r2, r3, #1
 800f772:	633a      	str	r2, [r7, #48]	@ 0x30
 800f774:	2b0a      	cmp	r3, #10
 800f776:	dd01      	ble.n	800f77c <ecp_randomize_jac+0x84>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 800f778:	4b52      	ldr	r3, [pc, #328]	@ (800f8c4 <ecp_randomize_jac+0x1cc>)
 800f77a:	e09e      	b.n	800f8ba <ecp_randomize_jac+0x1c2>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 800f77c:	f107 0320 	add.w	r3, r7, #32
 800f780:	2101      	movs	r1, #1
 800f782:	4618      	mov	r0, r3
 800f784:	f7fb fcc3 	bl	800b10e <mbedtls_mpi_cmp_int>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	ddcc      	ble.n	800f728 <ecp_randomize_jac+0x30>

    /* Z = l * Z */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Z,   &pt->Z,     &l  ) ); MOD_MUL( pt->Z );
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	f103 0018 	add.w	r0, r3, #24
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	3318      	adds	r3, #24
 800f798:	f107 0220 	add.w	r2, r7, #32
 800f79c:	4619      	mov	r1, r3
 800f79e:	f7fd faba 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f7a2:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d17c      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	3318      	adds	r3, #24
 800f7ae:	68f9      	ldr	r1, [r7, #12]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fe fd3f 	bl	800e234 <ecp_modp>
 800f7b6:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d172      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f7be:	4b42      	ldr	r3, [pc, #264]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	3301      	adds	r3, #1
 800f7c4:	4a40      	ldr	r2, [pc, #256]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f7c6:	6013      	str	r3, [r2, #0]

    /* X = l^2 * X */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &l,         &l  ) ); MOD_MUL( ll );
 800f7c8:	f107 0220 	add.w	r2, r7, #32
 800f7cc:	f107 0120 	add.w	r1, r7, #32
 800f7d0:	f107 0314 	add.w	r3, r7, #20
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fd fa9e 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f7da:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d160      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f7e2:	f107 0314 	add.w	r3, r7, #20
 800f7e6:	68f9      	ldr	r1, [r7, #12]
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fe fd23 	bl	800e234 <ecp_modp>
 800f7ee:	6378      	str	r0, [r7, #52]	@ 0x34
 800f7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d156      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f7f6:	4b34      	ldr	r3, [pc, #208]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	4a32      	ldr	r2, [pc, #200]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f7fe:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->X,   &pt->X,     &ll ) ); MOD_MUL( pt->X );
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	68b9      	ldr	r1, [r7, #8]
 800f804:	f107 0214 	add.w	r2, r7, #20
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fd fa84 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f80e:	6378      	str	r0, [r7, #52]	@ 0x34
 800f810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f812:	2b00      	cmp	r3, #0
 800f814:	d146      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	68f9      	ldr	r1, [r7, #12]
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7fe fd0a 	bl	800e234 <ecp_modp>
 800f820:	6378      	str	r0, [r7, #52]	@ 0x34
 800f822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f824:	2b00      	cmp	r3, #0
 800f826:	d13d      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f828:	4b27      	ldr	r3, [pc, #156]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3301      	adds	r3, #1
 800f82e:	4a26      	ldr	r2, [pc, #152]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f830:	6013      	str	r3, [r2, #0]

    /* Y = l^3 * Y */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &ll,      &ll,        &l  ) ); MOD_MUL( ll );
 800f832:	f107 0220 	add.w	r2, r7, #32
 800f836:	f107 0114 	add.w	r1, r7, #20
 800f83a:	f107 0314 	add.w	r3, r7, #20
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fd fa69 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f844:	6378      	str	r0, [r7, #52]	@ 0x34
 800f846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d12b      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f84c:	f107 0314 	add.w	r3, r7, #20
 800f850:	68f9      	ldr	r1, [r7, #12]
 800f852:	4618      	mov	r0, r3
 800f854:	f7fe fcee 	bl	800e234 <ecp_modp>
 800f858:	6378      	str	r0, [r7, #52]	@ 0x34
 800f85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d121      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f860:	4b19      	ldr	r3, [pc, #100]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	3301      	adds	r3, #1
 800f866:	4a18      	ldr	r2, [pc, #96]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f868:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &pt->Y,   &pt->Y,     &ll ) ); MOD_MUL( pt->Y );
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	f103 000c 	add.w	r0, r3, #12
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	330c      	adds	r3, #12
 800f874:	f107 0214 	add.w	r2, r7, #20
 800f878:	4619      	mov	r1, r3
 800f87a:	f7fd fa4c 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 800f87e:	6378      	str	r0, [r7, #52]	@ 0x34
 800f880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f882:	2b00      	cmp	r3, #0
 800f884:	d10e      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	330c      	adds	r3, #12
 800f88a:	68f9      	ldr	r1, [r7, #12]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7fe fcd1 	bl	800e234 <ecp_modp>
 800f892:	6378      	str	r0, [r7, #52]	@ 0x34
 800f894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f896:	2b00      	cmp	r3, #0
 800f898:	d104      	bne.n	800f8a4 <ecp_randomize_jac+0x1ac>
 800f89a:	4b0b      	ldr	r3, [pc, #44]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	4a09      	ldr	r2, [pc, #36]	@ (800f8c8 <ecp_randomize_jac+0x1d0>)
 800f8a2:	6013      	str	r3, [r2, #0]

cleanup:
    mbedtls_mpi_free( &l ); mbedtls_mpi_free( &ll );
 800f8a4:	f107 0320 	add.w	r3, r7, #32
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fa fcc7 	bl	800a23c <mbedtls_mpi_free>
 800f8ae:	f107 0314 	add.w	r3, r7, #20
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	f7fa fcc2 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800f8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3738      	adds	r7, #56	@ 0x38
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	ffffb300 	.word	0xffffb300
 800f8c8:	2400257c 	.word	0x2400257c

0800f8cc <ecp_comb_recode_core>:
 * - m is the MPI, expected to be odd and such that bitlength(m) <= w * d
 *   (the result will be incorrect if these assumptions are not satisfied)
 */
static void ecp_comb_recode_core( unsigned char x[], size_t d,
                                  unsigned char w, const mbedtls_mpi *m )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b088      	sub	sp, #32
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	603b      	str	r3, [r7, #0]
 800f8d8:	4613      	mov	r3, r2
 800f8da:	71fb      	strb	r3, [r7, #7]
    size_t i, j;
    unsigned char c, cc, adjust;

    memset( x, 0, d+1 );
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f006 f879 	bl	80159dc <memset>

    /* First get the classical comb values (except for x_d = 0) */
    for( i = 0; i < d; i++ )
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	61fb      	str	r3, [r7, #28]
 800f8ee:	e027      	b.n	800f940 <ecp_comb_recode_core+0x74>
        for( j = 0; j < w; j++ )
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	61bb      	str	r3, [r7, #24]
 800f8f4:	e01d      	b.n	800f932 <ecp_comb_recode_core+0x66>
            x[i] |= mbedtls_mpi_get_bit( m, i + d * j ) << j;
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	69ba      	ldr	r2, [r7, #24]
 800f8fa:	fb03 f202 	mul.w	r2, r3, r2
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	4413      	add	r3, r2
 800f902:	4619      	mov	r1, r3
 800f904:	6838      	ldr	r0, [r7, #0]
 800f906:	f7fa fef3 	bl	800a6f0 <mbedtls_mpi_get_bit>
 800f90a:	4602      	mov	r2, r0
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	fa02 f103 	lsl.w	r1, r2, r3
 800f912:	68fa      	ldr	r2, [r7, #12]
 800f914:	69fb      	ldr	r3, [r7, #28]
 800f916:	4413      	add	r3, r2
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	b25a      	sxtb	r2, r3
 800f91c:	b24b      	sxtb	r3, r1
 800f91e:	4313      	orrs	r3, r2
 800f920:	b259      	sxtb	r1, r3
 800f922:	68fa      	ldr	r2, [r7, #12]
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	4413      	add	r3, r2
 800f928:	b2ca      	uxtb	r2, r1
 800f92a:	701a      	strb	r2, [r3, #0]
        for( j = 0; j < w; j++ )
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	3301      	adds	r3, #1
 800f930:	61bb      	str	r3, [r7, #24]
 800f932:	79fb      	ldrb	r3, [r7, #7]
 800f934:	69ba      	ldr	r2, [r7, #24]
 800f936:	429a      	cmp	r2, r3
 800f938:	d3dd      	bcc.n	800f8f6 <ecp_comb_recode_core+0x2a>
    for( i = 0; i < d; i++ )
 800f93a:	69fb      	ldr	r3, [r7, #28]
 800f93c:	3301      	adds	r3, #1
 800f93e:	61fb      	str	r3, [r7, #28]
 800f940:	69fa      	ldr	r2, [r7, #28]
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	429a      	cmp	r2, r3
 800f946:	d3d3      	bcc.n	800f8f0 <ecp_comb_recode_core+0x24>

    /* Now make sure x_1 .. x_d are odd */
    c = 0;
 800f948:	2300      	movs	r3, #0
 800f94a:	75fb      	strb	r3, [r7, #23]
    for( i = 1; i <= d; i++ )
 800f94c:	2301      	movs	r3, #1
 800f94e:	61fb      	str	r3, [r7, #28]
 800f950:	e060      	b.n	800fa14 <ecp_comb_recode_core+0x148>
    {
        /* Add carry and update it */
        cc   = x[i] & c;
 800f952:	68fa      	ldr	r2, [r7, #12]
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	4413      	add	r3, r2
 800f958:	781a      	ldrb	r2, [r3, #0]
 800f95a:	7dfb      	ldrb	r3, [r7, #23]
 800f95c:	4013      	ands	r3, r2
 800f95e:	75bb      	strb	r3, [r7, #22]
        x[i] = x[i] ^ c;
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	4413      	add	r3, r2
 800f966:	7819      	ldrb	r1, [r3, #0]
 800f968:	68fa      	ldr	r2, [r7, #12]
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	4413      	add	r3, r2
 800f96e:	7dfa      	ldrb	r2, [r7, #23]
 800f970:	404a      	eors	r2, r1
 800f972:	b2d2      	uxtb	r2, r2
 800f974:	701a      	strb	r2, [r3, #0]
        c = cc;
 800f976:	7dbb      	ldrb	r3, [r7, #22]
 800f978:	75fb      	strb	r3, [r7, #23]

        /* Adjust if needed, avoiding branches */
        adjust = 1 - ( x[i] & 0x01 );
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	4413      	add	r3, r2
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	f003 0301 	and.w	r3, r3, #1
 800f986:	2b00      	cmp	r3, #0
 800f988:	bf0c      	ite	eq
 800f98a:	2301      	moveq	r3, #1
 800f98c:	2300      	movne	r3, #0
 800f98e:	b2db      	uxtb	r3, r3
 800f990:	757b      	strb	r3, [r7, #21]
        c   |= x[i] & ( x[i-1] * adjust );
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	4413      	add	r3, r2
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	b25a      	sxtb	r2, r3
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	3b01      	subs	r3, #1
 800f9a0:	68f9      	ldr	r1, [r7, #12]
 800f9a2:	440b      	add	r3, r1
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	7d79      	ldrb	r1, [r7, #21]
 800f9a8:	fb11 f303 	smulbb	r3, r1, r3
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	b25b      	sxtb	r3, r3
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	b25a      	sxtb	r2, r3
 800f9b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	b25b      	sxtb	r3, r3
 800f9bc:	75fb      	strb	r3, [r7, #23]
        x[i] = x[i] ^ ( x[i-1] * adjust );
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	4413      	add	r3, r2
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	b25a      	sxtb	r2, r3
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	68f9      	ldr	r1, [r7, #12]
 800f9ce:	440b      	add	r3, r1
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	7d79      	ldrb	r1, [r7, #21]
 800f9d4:	fb11 f303 	smulbb	r3, r1, r3
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	b25b      	sxtb	r3, r3
 800f9dc:	4053      	eors	r3, r2
 800f9de:	b259      	sxtb	r1, r3
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	69fb      	ldr	r3, [r7, #28]
 800f9e4:	4413      	add	r3, r2
 800f9e6:	b2ca      	uxtb	r2, r1
 800f9e8:	701a      	strb	r2, [r3, #0]
        x[i-1] |= adjust << 7;
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	68fa      	ldr	r2, [r7, #12]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	b25a      	sxtb	r2, r3
 800f9f6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800f9fa:	01db      	lsls	r3, r3, #7
 800f9fc:	b25b      	sxtb	r3, r3
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	b259      	sxtb	r1, r3
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	3b01      	subs	r3, #1
 800fa06:	68fa      	ldr	r2, [r7, #12]
 800fa08:	4413      	add	r3, r2
 800fa0a:	b2ca      	uxtb	r2, r1
 800fa0c:	701a      	strb	r2, [r3, #0]
    for( i = 1; i <= d; i++ )
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	3301      	adds	r3, #1
 800fa12:	61fb      	str	r3, [r7, #28]
 800fa14:	69fa      	ldr	r2, [r7, #28]
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	429a      	cmp	r2, r3
 800fa1a:	d99a      	bls.n	800f952 <ecp_comb_recode_core+0x86>
    }
}
 800fa1c:	bf00      	nop
 800fa1e:	bf00      	nop
 800fa20:	3720      	adds	r7, #32
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <ecp_precompute_comb>:
 */
static int ecp_precompute_comb( const mbedtls_ecp_group *grp,
                                mbedtls_ecp_point T[], const mbedtls_ecp_point *P,
                                unsigned char w, size_t d,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b0a8      	sub	sp, #160	@ 0xa0
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	60f8      	str	r0, [r7, #12]
 800fa2e:	60b9      	str	r1, [r7, #8]
 800fa30:	607a      	str	r2, [r7, #4]
 800fa32:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char i;
    size_t j = 0;
 800fa34:	2300      	movs	r3, #0
 800fa36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const unsigned char T_size = 1U << ( w - 1 );
 800fa3a:	78fb      	ldrb	r3, [r7, #3]
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	2201      	movs	r2, #1
 800fa40:	fa02 f303 	lsl.w	r3, r2, r3
 800fa44:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
#endif
    /*
     * Set T[0] = P and
     * T[2^{l-1}] = 2^{dl} P for l = 1 .. w-1 (this is not the final value)
     */
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &T[0], P ) );
 800fa48:	6879      	ldr	r1, [r7, #4]
 800fa4a:	68b8      	ldr	r0, [r7, #8]
 800fa4c:	f7fe fb8a 	bl	800e164 <mbedtls_ecp_copy>
 800fa50:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fa54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f040 8102 	bne.w	800fc62 <ecp_precompute_comb+0x23c>
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL && rs_ctx->rsm->i != 0 )
        j = rs_ctx->rsm->i;
    else
#endif
        j = 0;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for( ; j < d * ( w - 1 ); j++ )
 800fa64:	e04d      	b.n	800fb02 <ecp_precompute_comb+0xdc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL );

        i = 1U << ( j / d );
 800fa66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fa6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fa6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa72:	2201      	movs	r2, #1
 800fa74:	fa02 f303 	lsl.w	r3, r2, r3
 800fa78:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
        cur = T + i;
 800fa7c:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fa80:	4613      	mov	r3, r2
 800fa82:	00db      	lsls	r3, r3, #3
 800fa84:	4413      	add	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	461a      	mov	r2, r3
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	4413      	add	r3, r2
 800fa8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        if( j % d == 0 )
 800fa92:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fa96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fa9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa9e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800faa2:	fb01 f202 	mul.w	r2, r1, r2
 800faa6:	1a9b      	subs	r3, r3, r2
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d117      	bne.n	800fadc <ecp_precompute_comb+0xb6>
            MBEDTLS_MPI_CHK( mbedtls_ecp_copy( cur, T + ( i >> 1 ) ) );
 800faac:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fab0:	085b      	lsrs	r3, r3, #1
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	461a      	mov	r2, r3
 800fab6:	4613      	mov	r3, r2
 800fab8:	00db      	lsls	r3, r3, #3
 800faba:	4413      	add	r3, r2
 800fabc:	009b      	lsls	r3, r3, #2
 800fabe:	461a      	mov	r2, r3
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	4413      	add	r3, r2
 800fac4:	4619      	mov	r1, r3
 800fac6:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800faca:	f7fe fb4b 	bl	800e164 <mbedtls_ecp_copy>
 800face:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f040 80c3 	bne.w	800fc62 <ecp_precompute_comb+0x23c>

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, cur, cur ) );
 800fadc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fae0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	f7fe fef5 	bl	800e8d4 <ecp_double_jac>
 800faea:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800faee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	f040 80b5 	bne.w	800fc62 <ecp_precompute_comb+0x23c>
    for( ; j < d * ( w - 1 ); j++ )
 800faf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fafc:	3301      	adds	r3, #1
 800fafe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fb02:	78fb      	ldrb	r3, [r7, #3]
 800fb04:	3b01      	subs	r3, #1
 800fb06:	461a      	mov	r2, r3
 800fb08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800fb0c:	fb02 f303 	mul.w	r3, r2, r3
 800fb10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb14:	429a      	cmp	r2, r3
 800fb16:	d3a6      	bcc.n	800fa66 <ecp_precompute_comb+0x40>
#endif
    /*
     * Normalize current elements in T. As T has holes,
     * use an auxiliary array of pointers to elements in T.
     */
    j = 0;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    for( i = 1; i < T_size; i <<= 1 )
 800fb1e:	2301      	movs	r3, #1
 800fb20:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fb24:	e017      	b.n	800fb56 <ecp_precompute_comb+0x130>
        TT[j++] = T + i;
 800fb26:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fb2a:	4613      	mov	r3, r2
 800fb2c:	00db      	lsls	r3, r3, #3
 800fb2e:	4413      	add	r3, r2
 800fb30:	009b      	lsls	r3, r3, #2
 800fb32:	4619      	mov	r1, r3
 800fb34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fb38:	1c5a      	adds	r2, r3, #1
 800fb3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fb3e:	68ba      	ldr	r2, [r7, #8]
 800fb40:	440a      	add	r2, r1
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	33a0      	adds	r3, #160	@ 0xa0
 800fb46:	443b      	add	r3, r7
 800fb48:	f843 2c90 	str.w	r2, [r3, #-144]
    for( i = 1; i < T_size; i <<= 1 )
 800fb4c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fb50:	005b      	lsls	r3, r3, #1
 800fb52:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fb56:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fb5a:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d3e1      	bcc.n	800fb26 <ecp_precompute_comb+0x100>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800fb62:	f107 0310 	add.w	r3, r7, #16
 800fb66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fb6a:	4619      	mov	r1, r3
 800fb6c:	68f8      	ldr	r0, [r7, #12]
 800fb6e:	f7fe fc77 	bl	800e460 <ecp_normalize_jac_many>
 800fb72:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fb76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d171      	bne.n	800fc62 <ecp_precompute_comb+0x23c>
     * Compute the remaining ones using the minimal number of additions
     * Be careful to update T[2^l] only after using it!
     */
    MBEDTLS_ECP_BUDGET( ( T_size - 1 ) * MBEDTLS_ECP_OPS_ADD );

    for( i = 1; i < T_size; i <<= 1 )
 800fb7e:	2301      	movs	r3, #1
 800fb80:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fb84:	e038      	b.n	800fbf8 <ecp_precompute_comb+0x1d2>
    {
        j = i;
 800fb86:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fb8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        while( j-- )
 800fb8e:	e027      	b.n	800fbe0 <ecp_precompute_comb+0x1ba>
            MBEDTLS_MPI_CHK( ecp_add_mixed( grp, &T[i + j], &T[j], &T[i] ) );
 800fb90:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fb94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fb98:	441a      	add	r2, r3
 800fb9a:	4613      	mov	r3, r2
 800fb9c:	00db      	lsls	r3, r3, #3
 800fb9e:	4413      	add	r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	461a      	mov	r2, r3
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	1899      	adds	r1, r3, r2
 800fba8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fbac:	4613      	mov	r3, r2
 800fbae:	00db      	lsls	r3, r3, #3
 800fbb0:	4413      	add	r3, r2
 800fbb2:	009b      	lsls	r3, r3, #2
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	1898      	adds	r0, r3, r2
 800fbba:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	00db      	lsls	r3, r3, #3
 800fbc2:	4413      	add	r3, r2
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	4413      	add	r3, r2
 800fbcc:	4602      	mov	r2, r0
 800fbce:	68f8      	ldr	r0, [r7, #12]
 800fbd0:	f7ff fa5a 	bl	800f088 <ecp_add_mixed>
 800fbd4:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fbd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d140      	bne.n	800fc62 <ecp_precompute_comb+0x23c>
        while( j-- )
 800fbe0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fbe4:	1e5a      	subs	r2, r3, #1
 800fbe6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d1d0      	bne.n	800fb90 <ecp_precompute_comb+0x16a>
    for( i = 1; i < T_size; i <<= 1 )
 800fbee:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800fbf2:	005b      	lsls	r3, r3, #1
 800fbf4:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
 800fbf8:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 800fbfc:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d3c0      	bcc.n	800fb86 <ecp_precompute_comb+0x160>
    /*
     * Normalize final elements in T. Even though there are no holes now, we
     * still need the auxiliary array for homogeneity with the previous
     * call. Also, skip T[0] which is already normalised, being a copy of P.
     */
    for( j = 0; j + 1 < T_size; j++ )
 800fc04:	2300      	movs	r3, #0
 800fc06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fc0a:	e015      	b.n	800fc38 <ecp_precompute_comb+0x212>
        TT[j] = T + j + 1;
 800fc0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc10:	1c5a      	adds	r2, r3, #1
 800fc12:	4613      	mov	r3, r2
 800fc14:	00db      	lsls	r3, r3, #3
 800fc16:	4413      	add	r3, r2
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	441a      	add	r2, r3
 800fc20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	33a0      	adds	r3, #160	@ 0xa0
 800fc28:	443b      	add	r3, r7
 800fc2a:	f843 2c90 	str.w	r2, [r3, #-144]
    for( j = 0; j + 1 < T_size; j++ )
 800fc2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc32:	3301      	adds	r3, #1
 800fc34:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fc38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800fc3c:	1c5a      	adds	r2, r3, #1
 800fc3e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d3e2      	bcc.n	800fc0c <ecp_precompute_comb+0x1e6>

    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV + 6 * j - 2 );

    MBEDTLS_MPI_CHK( ecp_normalize_jac_many( grp, TT, j ) );
 800fc46:	f107 0310 	add.w	r3, r7, #16
 800fc4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fc4e:	4619      	mov	r1, r3
 800fc50:	68f8      	ldr	r0, [r7, #12]
 800fc52:	f7fe fc05 	bl	800e460 <ecp_normalize_jac_many>
 800fc56:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 800fc5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fc5e:	2b00      	cmp	r3, #0

cleanup:
 800fc60:	bf00      	nop
        if( rs_ctx->rsm->state == ecp_rsm_pre_dbl )
            rs_ctx->rsm->i = j;
    }
#endif

    return( ret );
 800fc62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	37a0      	adds	r7, #160	@ 0xa0
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <ecp_select_comb>:
 * See ecp_comb_recode_core() for background
 */
static int ecp_select_comb( const mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                            const mbedtls_ecp_point T[], unsigned char T_size,
                            unsigned char i )
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	b086      	sub	sp, #24
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	60f8      	str	r0, [r7, #12]
 800fc76:	60b9      	str	r1, [r7, #8]
 800fc78:	607a      	str	r2, [r7, #4]
 800fc7a:	70fb      	strb	r3, [r7, #3]
    int ret;
    unsigned char ii, j;

    /* Ignore the "sign" bit and scale down */
    ii =  ( i & 0x7Fu ) >> 1;
 800fc7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fc80:	085b      	lsrs	r3, r3, #1
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc88:	74bb      	strb	r3, [r7, #18]

    /* Read the whole table to thwart cache-based timing attacks */
    for( j = 0; j < T_size; j++ )
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	74fb      	strb	r3, [r7, #19]
 800fc8e:	e035      	b.n	800fcfc <ecp_select_comb+0x8e>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->X, &T[j].X, j == ii ) );
 800fc90:	68b8      	ldr	r0, [r7, #8]
 800fc92:	7cfa      	ldrb	r2, [r7, #19]
 800fc94:	4613      	mov	r3, r2
 800fc96:	00db      	lsls	r3, r3, #3
 800fc98:	4413      	add	r3, r2
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4413      	add	r3, r2
 800fca2:	4619      	mov	r1, r3
 800fca4:	7cfa      	ldrb	r2, [r7, #19]
 800fca6:	7cbb      	ldrb	r3, [r7, #18]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	bf0c      	ite	eq
 800fcac:	2301      	moveq	r3, #1
 800fcae:	2300      	movne	r3, #0
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	f7fa fbed 	bl	800a492 <mbedtls_mpi_safe_cond_assign>
 800fcb8:	6178      	str	r0, [r7, #20]
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d12e      	bne.n	800fd1e <ecp_select_comb+0xb0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &R->Y, &T[j].Y, j == ii ) );
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	f103 000c 	add.w	r0, r3, #12
 800fcc6:	7cfa      	ldrb	r2, [r7, #19]
 800fcc8:	4613      	mov	r3, r2
 800fcca:	00db      	lsls	r3, r3, #3
 800fccc:	4413      	add	r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	f103 010c 	add.w	r1, r3, #12
 800fcda:	7cfa      	ldrb	r2, [r7, #19]
 800fcdc:	7cbb      	ldrb	r3, [r7, #18]
 800fcde:	429a      	cmp	r2, r3
 800fce0:	bf0c      	ite	eq
 800fce2:	2301      	moveq	r3, #1
 800fce4:	2300      	movne	r3, #0
 800fce6:	b2db      	uxtb	r3, r3
 800fce8:	461a      	mov	r2, r3
 800fcea:	f7fa fbd2 	bl	800a492 <mbedtls_mpi_safe_cond_assign>
 800fcee:	6178      	str	r0, [r7, #20]
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d113      	bne.n	800fd1e <ecp_select_comb+0xb0>
    for( j = 0; j < T_size; j++ )
 800fcf6:	7cfb      	ldrb	r3, [r7, #19]
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	74fb      	strb	r3, [r7, #19]
 800fcfc:	7cfa      	ldrb	r2, [r7, #19]
 800fcfe:	78fb      	ldrb	r3, [r7, #3]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d3c5      	bcc.n	800fc90 <ecp_select_comb+0x22>
    }

    /* Safely invert result if i is "negative" */
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, R, i >> 7 ) );
 800fd04:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fd08:	09db      	lsrs	r3, r3, #7
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	68b9      	ldr	r1, [r7, #8]
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f7fe fd9b 	bl	800e84c <ecp_safe_invert_jac>
 800fd16:	6178      	str	r0, [r7, #20]
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	2b00      	cmp	r3, #0

cleanup:
 800fd1c:	bf00      	nop
    return( ret );
 800fd1e:	697b      	ldr	r3, [r7, #20]
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3718      	adds	r7, #24
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}

0800fd28 <ecp_mul_comb_core>:
                              const mbedtls_ecp_point T[], unsigned char T_size,
                              const unsigned char x[], size_t d,
                              int (*f_rng)(void *, unsigned char *, size_t),
                              void *p_rng,
                              mbedtls_ecp_restart_ctx *rs_ctx )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b092      	sub	sp, #72	@ 0x48
 800fd2c:	af02      	add	r7, sp, #8
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	607a      	str	r2, [r7, #4]
 800fd34:	70fb      	strb	r3, [r7, #3]
    int ret;
    mbedtls_ecp_point Txi;
    size_t i;

    mbedtls_ecp_point_init( &Txi );
 800fd36:	f107 0314 	add.w	r3, r7, #20
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fe f927 	bl	800df8e <mbedtls_ecp_point_init>
    }
    else
#endif
    {
        /* Start with a non-zero point and randomize its coordinates */
        i = d;
 800fd40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd42:	63bb      	str	r3, [r7, #56]	@ 0x38
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, R, T, T_size, x[i] ) );
 800fd44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fd46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd48:	4413      	add	r3, r2
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	78fa      	ldrb	r2, [r7, #3]
 800fd4e:	9300      	str	r3, [sp, #0]
 800fd50:	4613      	mov	r3, r2
 800fd52:	687a      	ldr	r2, [r7, #4]
 800fd54:	68b9      	ldr	r1, [r7, #8]
 800fd56:	68f8      	ldr	r0, [r7, #12]
 800fd58:	f7ff ff89 	bl	800fc6e <ecp_select_comb>
 800fd5c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fd5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d143      	bne.n	800fdec <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 1 ) );
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	3318      	adds	r3, #24
 800fd68:	2101      	movs	r1, #1
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7fa fc94 	bl	800a698 <mbedtls_mpi_lset>
 800fd70:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fd72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d139      	bne.n	800fdec <ecp_mul_comb_core+0xc4>
        if( f_rng != 0 )
 800fd78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d032      	beq.n	800fde4 <ecp_mul_comb_core+0xbc>
            MBEDTLS_MPI_CHK( ecp_randomize_jac( grp, R, f_rng, p_rng ) );
 800fd7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fd80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fd82:	68b9      	ldr	r1, [r7, #8]
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f7ff fcb7 	bl	800f6f8 <ecp_randomize_jac>
 800fd8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fd8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d12c      	bne.n	800fdec <ecp_mul_comb_core+0xc4>
    }

    while( i != 0 )
 800fd92:	e027      	b.n	800fde4 <ecp_mul_comb_core+0xbc>
    {
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_DBL + MBEDTLS_ECP_OPS_ADD );
        --i;
 800fd94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd96:	3b01      	subs	r3, #1
 800fd98:	63bb      	str	r3, [r7, #56]	@ 0x38

        MBEDTLS_MPI_CHK( ecp_double_jac( grp, R, R ) );
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	68b9      	ldr	r1, [r7, #8]
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f7fe fd98 	bl	800e8d4 <ecp_double_jac>
 800fda4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fda6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d11f      	bne.n	800fdec <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( ecp_select_comb( grp, &Txi, T, T_size, x[i] ) );
 800fdac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fdae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb0:	4413      	add	r3, r2
 800fdb2:	781b      	ldrb	r3, [r3, #0]
 800fdb4:	78fa      	ldrb	r2, [r7, #3]
 800fdb6:	f107 0114 	add.w	r1, r7, #20
 800fdba:	9300      	str	r3, [sp, #0]
 800fdbc:	4613      	mov	r3, r2
 800fdbe:	687a      	ldr	r2, [r7, #4]
 800fdc0:	68f8      	ldr	r0, [r7, #12]
 800fdc2:	f7ff ff54 	bl	800fc6e <ecp_select_comb>
 800fdc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fdc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d10e      	bne.n	800fdec <ecp_mul_comb_core+0xc4>
        MBEDTLS_MPI_CHK( ecp_add_mixed( grp, R, R, &Txi ) );
 800fdce:	f107 0314 	add.w	r3, r7, #20
 800fdd2:	68ba      	ldr	r2, [r7, #8]
 800fdd4:	68b9      	ldr	r1, [r7, #8]
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f7ff f956 	bl	800f088 <ecp_add_mixed>
 800fddc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800fdde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d103      	bne.n	800fdec <ecp_mul_comb_core+0xc4>
    while( i != 0 )
 800fde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d1d4      	bne.n	800fd94 <ecp_mul_comb_core+0x6c>
    }

cleanup:
 800fdea:	bf00      	nop

    mbedtls_ecp_point_free( &Txi );
 800fdec:	f107 0314 	add.w	r3, r7, #20
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fe f937 	bl	800e064 <mbedtls_ecp_point_free>
        rs_ctx->rsm->i = i;
        /* no need to save R, already pointing to rs_ctx->rsm->R */
    }
#endif

    return( ret );
 800fdf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3740      	adds	r7, #64	@ 0x40
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <ecp_comb_recode_scalar>:
                                   const mbedtls_mpi *m,
                                   unsigned char k[COMB_MAX_D + 1],
                                   size_t d,
                                   unsigned char w,
                                   unsigned char *parity_trick )
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b08c      	sub	sp, #48	@ 0x30
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	60f8      	str	r0, [r7, #12]
 800fe08:	60b9      	str	r1, [r7, #8]
 800fe0a:	607a      	str	r2, [r7, #4]
 800fe0c:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi M, mm;

    mbedtls_mpi_init( &M );
 800fe0e:	f107 0320 	add.w	r3, r7, #32
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fa f9ff 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &mm );
 800fe18:	f107 0314 	add.w	r3, r7, #20
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fa f9fa 	bl	800a216 <mbedtls_mpi_init>

    /* N is always odd (see above), just make extra sure */
    if( mbedtls_mpi_get_bit( &grp->N, 0 ) != 1 )
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	334c      	adds	r3, #76	@ 0x4c
 800fe26:	2100      	movs	r1, #0
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fa fc61 	bl	800a6f0 <mbedtls_mpi_get_bit>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d001      	beq.n	800fe38 <ecp_comb_recode_scalar+0x38>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 800fe34:	4b24      	ldr	r3, [pc, #144]	@ (800fec8 <ecp_comb_recode_scalar+0xc8>)
 800fe36:	e043      	b.n	800fec0 <ecp_comb_recode_scalar+0xc0>

    /* do we need the parity trick? */
    *parity_trick = ( mbedtls_mpi_get_bit( m, 0 ) == 0 );
 800fe38:	2100      	movs	r1, #0
 800fe3a:	68b8      	ldr	r0, [r7, #8]
 800fe3c:	f7fa fc58 	bl	800a6f0 <mbedtls_mpi_get_bit>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	bf0c      	ite	eq
 800fe46:	2301      	moveq	r3, #1
 800fe48:	2300      	movne	r3, #0
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe50:	701a      	strb	r2, [r3, #0]

    /* execute parity fix in constant time */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &M, m ) );
 800fe52:	f107 0320 	add.w	r3, r7, #32
 800fe56:	68b9      	ldr	r1, [r7, #8]
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fa fabe 	bl	800a3da <mbedtls_mpi_copy>
 800fe5e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fe60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d121      	bne.n	800feaa <ecp_comb_recode_scalar+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &mm, &grp->N, m ) );
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800fe6c:	f107 0314 	add.w	r3, r7, #20
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fb fb1a 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 800fe78:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fe7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d114      	bne.n	800feaa <ecp_comb_recode_scalar+0xaa>
    MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_assign( &M, &mm, *parity_trick ) );
 800fe80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe82:	781a      	ldrb	r2, [r3, #0]
 800fe84:	f107 0114 	add.w	r1, r7, #20
 800fe88:	f107 0320 	add.w	r3, r7, #32
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7fa fb00 	bl	800a492 <mbedtls_mpi_safe_cond_assign>
 800fe92:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800fe94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d107      	bne.n	800feaa <ecp_comb_recode_scalar+0xaa>

    /* actual scalar recoding */
    ecp_comb_recode_core( k, d, w, &M );
 800fe9a:	f107 0320 	add.w	r3, r7, #32
 800fe9e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fea2:	6839      	ldr	r1, [r7, #0]
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f7ff fd11 	bl	800f8cc <ecp_comb_recode_core>

cleanup:
    mbedtls_mpi_free( &mm );
 800feaa:	f107 0314 	add.w	r3, r7, #20
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fa f9c4 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &M );
 800feb4:	f107 0320 	add.w	r3, r7, #32
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fa f9bf 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 800febe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3730      	adds	r7, #48	@ 0x30
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	ffffb080 	.word	0xffffb080

0800fecc <ecp_mul_comb_after_precomp>:
                                unsigned char w,
                                size_t d,
                                int (*f_rng)(void *, unsigned char *, size_t),
                                void *p_rng,
                                mbedtls_ecp_restart_ctx *rs_ctx )
{
 800fecc:	b590      	push	{r4, r7, lr}
 800fece:	b0cf      	sub	sp, #316	@ 0x13c
 800fed0:	af06      	add	r7, sp, #24
 800fed2:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 800fed6:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800feda:	6020      	str	r0, [r4, #0]
 800fedc:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800fee0:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800fee4:	6001      	str	r1, [r0, #0]
 800fee6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800feea:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800feee:	600a      	str	r2, [r1, #0]
 800fef0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800fef4:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800fef8:	6013      	str	r3, [r2, #0]
    int ret;
    unsigned char parity_trick;
    unsigned char k[COMB_MAX_D + 1];
    mbedtls_ecp_point *RR = R;
 800fefa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fefe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        if( rs_ctx->rsm->state == ecp_rsm_final_norm )
            goto final_norm;
    }
#endif

    MBEDTLS_MPI_CHK( ecp_comb_recode_scalar( grp, m, k, d, w,
 800ff08:	f107 0210 	add.w	r2, r7, #16
 800ff0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff10:	f5a3 718e 	sub.w	r1, r3, #284	@ 0x11c
 800ff14:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff18:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800ff1c:	f207 1317 	addw	r3, r7, #279	@ 0x117
 800ff20:	9301      	str	r3, [sp, #4]
 800ff22:	f897 3134 	ldrb.w	r3, [r7, #308]	@ 0x134
 800ff26:	9300      	str	r3, [sp, #0]
 800ff28:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ff2c:	6809      	ldr	r1, [r1, #0]
 800ff2e:	6800      	ldr	r0, [r0, #0]
 800ff30:	f7ff ff66 	bl	800fe00 <ecp_comb_recode_scalar>
 800ff34:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ff38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d145      	bne.n	800ffcc <ecp_mul_comb_after_precomp+0x100>
                                            &parity_trick ) );
    MBEDTLS_MPI_CHK( ecp_mul_comb_core( grp, RR, T, T_size, k, d,
 800ff40:	f897 1130 	ldrb.w	r1, [r7, #304]	@ 0x130
 800ff44:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff48:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 800ff4c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff50:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800ff54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800ff58:	9304      	str	r3, [sp, #16]
 800ff5a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ff5e:	9303      	str	r3, [sp, #12]
 800ff60:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800ff64:	9302      	str	r3, [sp, #8]
 800ff66:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ff6a:	9301      	str	r3, [sp, #4]
 800ff6c:	f107 0310 	add.w	r3, r7, #16
 800ff70:	9300      	str	r3, [sp, #0]
 800ff72:	460b      	mov	r3, r1
 800ff74:	6812      	ldr	r2, [r2, #0]
 800ff76:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800ff7a:	6800      	ldr	r0, [r0, #0]
 800ff7c:	f7ff fed4 	bl	800fd28 <ecp_mul_comb_core>
 800ff80:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ff84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d11f      	bne.n	800ffcc <ecp_mul_comb_after_precomp+0x100>
                                        f_rng, p_rng, rs_ctx ) );
    MBEDTLS_MPI_CHK( ecp_safe_invert_jac( grp, RR, parity_trick ) );
 800ff8c:	f897 2117 	ldrb.w	r2, [r7, #279]	@ 0x117
 800ff90:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ff94:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ff98:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800ff9c:	6818      	ldr	r0, [r3, #0]
 800ff9e:	f7fe fc55 	bl	800e84c <ecp_safe_invert_jac>
 800ffa2:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ffa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d10e      	bne.n	800ffcc <ecp_mul_comb_after_precomp+0x100>
        rs_ctx->rsm->state = ecp_rsm_final_norm;

final_norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, RR ) );
 800ffae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ffb2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ffb6:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800ffba:	6818      	ldr	r0, [r3, #0]
 800ffbc:	f7fe f99e 	bl	800e2fc <ecp_normalize_jac>
 800ffc0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
 800ffc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ffc8:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->rsm != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, RR ) );
#endif

cleanup:
 800ffca:	bf00      	nop
    return( ret );
 800ffcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
}
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd90      	pop	{r4, r7, pc}

0800ffda <ecp_pick_window_size>:
/*
 * Pick window size based on curve size and whether we optimize for base point
 */
static unsigned char ecp_pick_window_size( const mbedtls_ecp_group *grp,
                                           unsigned char p_eq_g )
{
 800ffda:	b480      	push	{r7}
 800ffdc:	b085      	sub	sp, #20
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
 800ffe2:	460b      	mov	r3, r1
 800ffe4:	70fb      	strb	r3, [r7, #3]
    /*
     * Minimize the number of multiplications, that is minimize
     * 10 * d * w + 18 * 2^(w-1) + 11 * d + 7 * w, with d = ceil( nbits / w )
     * (see costs of the various parts, with 1S = 1M)
     */
    w = grp->nbits >= 384 ? 5 : 4;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ffea:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 800ffee:	d301      	bcc.n	800fff4 <ecp_pick_window_size+0x1a>
 800fff0:	2305      	movs	r3, #5
 800fff2:	e000      	b.n	800fff6 <ecp_pick_window_size+0x1c>
 800fff4:	2304      	movs	r3, #4
 800fff6:	73fb      	strb	r3, [r7, #15]
    /*
     * If P == G, pre-compute a bit more, since this may be re-used later.
     * Just adding one avoids upping the cost of the first mul too much,
     * and the memory cost too.
     */
    if( p_eq_g )
 800fff8:	78fb      	ldrb	r3, [r7, #3]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d002      	beq.n	8010004 <ecp_pick_window_size+0x2a>
        w++;
 800fffe:	7bfb      	ldrb	r3, [r7, #15]
 8010000:	3301      	adds	r3, #1
 8010002:	73fb      	strb	r3, [r7, #15]

    /*
     * Make sure w is within bounds.
     * (The last test is useful only for very small curves in the test suite.)
     */
    if( w > MBEDTLS_ECP_WINDOW_SIZE )
 8010004:	7bfb      	ldrb	r3, [r7, #15]
 8010006:	2b06      	cmp	r3, #6
 8010008:	d901      	bls.n	801000e <ecp_pick_window_size+0x34>
        w = MBEDTLS_ECP_WINDOW_SIZE;
 801000a:	2306      	movs	r3, #6
 801000c:	73fb      	strb	r3, [r7, #15]
    if( w >= grp->nbits )
 801000e:	7bfa      	ldrb	r2, [r7, #15]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010014:	429a      	cmp	r2, r3
 8010016:	d301      	bcc.n	801001c <ecp_pick_window_size+0x42>
        w = 2;
 8010018:	2302      	movs	r3, #2
 801001a:	73fb      	strb	r3, [r7, #15]

    return( w );
 801001c:	7bfb      	ldrb	r3, [r7, #15]
}
 801001e:	4618      	mov	r0, r3
 8010020:	3714      	adds	r7, #20
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
	...

0801002c <ecp_mul_comb>:
static int ecp_mul_comb( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                         const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                         int (*f_rng)(void *, unsigned char *, size_t),
                         void *p_rng,
                         mbedtls_ecp_restart_ctx *rs_ctx )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b090      	sub	sp, #64	@ 0x40
 8010030:	af06      	add	r7, sp, #24
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	607a      	str	r2, [r7, #4]
 8010038:	603b      	str	r3, [r7, #0]

    ECP_RS_ENTER( rsm );

    /* Is P the base point ? */
#if MBEDTLS_ECP_FIXED_POINT_OPTIM == 1
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	f103 020c 	add.w	r2, r3, #12
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	3334      	adds	r3, #52	@ 0x34
 8010044:	4619      	mov	r1, r3
 8010046:	4610      	mov	r0, r2
 8010048:	f7fa ffc6 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d10b      	bne.n	801006a <ecp_mul_comb+0x3e>
               mbedtls_mpi_cmp_mpi( &P->X, &grp->G.X ) == 0 );
 8010052:	683a      	ldr	r2, [r7, #0]
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	3328      	adds	r3, #40	@ 0x28
 8010058:	4619      	mov	r1, r3
 801005a:	4610      	mov	r0, r2
 801005c:	f7fa ffbc 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 8010060:	4603      	mov	r3, r0
    p_eq_g = ( mbedtls_mpi_cmp_mpi( &P->Y, &grp->G.Y ) == 0 &&
 8010062:	2b00      	cmp	r3, #0
 8010064:	d101      	bne.n	801006a <ecp_mul_comb+0x3e>
 8010066:	2301      	movs	r3, #1
 8010068:	e000      	b.n	801006c <ecp_mul_comb+0x40>
 801006a:	2300      	movs	r3, #0
 801006c:	76fb      	strb	r3, [r7, #27]
#else
    p_eq_g = 0;
#endif

    /* Pick window size and deduce related sizes */
    w = ecp_pick_window_size( grp, p_eq_g );
 801006e:	7efb      	ldrb	r3, [r7, #27]
 8010070:	4619      	mov	r1, r3
 8010072:	68f8      	ldr	r0, [r7, #12]
 8010074:	f7ff ffb1 	bl	800ffda <ecp_pick_window_size>
 8010078:	4603      	mov	r3, r0
 801007a:	76bb      	strb	r3, [r7, #26]
    T_size = 1U << ( w - 1 );
 801007c:	7ebb      	ldrb	r3, [r7, #26]
 801007e:	3b01      	subs	r3, #1
 8010080:	2201      	movs	r2, #1
 8010082:	fa02 f303 	lsl.w	r3, r2, r3
 8010086:	767b      	strb	r3, [r7, #25]
    d = ( grp->nbits + w - 1 ) / w;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801008c:	7ebb      	ldrb	r3, [r7, #26]
 801008e:	4413      	add	r3, r2
 8010090:	1e5a      	subs	r2, r3, #1
 8010092:	7ebb      	ldrb	r3, [r7, #26]
 8010094:	fbb2 f3f3 	udiv	r3, r2, r3
 8010098:	617b      	str	r3, [r7, #20]

    /* Pre-computed table: do we have it already for the base point? */
    if( p_eq_g && grp->T != NULL )
 801009a:	7efb      	ldrb	r3, [r7, #27]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d00a      	beq.n	80100b6 <ecp_mul_comb+0x8a>
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d006      	beq.n	80100b6 <ecp_mul_comb+0x8a>
    {
        /* second pointer to the same table, will be deleted on exit */
        T = grp->T;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100ac:	61fb      	str	r3, [r7, #28]
        T_ok = 1;
 80100ae:	2301      	movs	r3, #1
 80100b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80100b4:	e029      	b.n	801010a <ecp_mul_comb+0xde>
    }
    else
#endif
    /* Allocate table if we didn't have any */
    {
        T = mbedtls_calloc( T_size, sizeof( mbedtls_ecp_point ) );
 80100b6:	7e7b      	ldrb	r3, [r7, #25]
 80100b8:	2124      	movs	r1, #36	@ 0x24
 80100ba:	4618      	mov	r0, r3
 80100bc:	f005 fb70 	bl	80157a0 <calloc>
 80100c0:	4603      	mov	r3, r0
 80100c2:	61fb      	str	r3, [r7, #28]
        if( T == NULL )
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d102      	bne.n	80100d0 <ecp_mul_comb+0xa4>
        {
            ret = MBEDTLS_ERR_ECP_ALLOC_FAILED;
 80100ca:	4b42      	ldr	r3, [pc, #264]	@ (80101d4 <ecp_mul_comb+0x1a8>)
 80100cc:	627b      	str	r3, [r7, #36]	@ 0x24
            goto cleanup;
 80100ce:	e04e      	b.n	801016e <ecp_mul_comb+0x142>
        }

        for( i = 0; i < T_size; i++ )
 80100d0:	2300      	movs	r3, #0
 80100d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80100d6:	e010      	b.n	80100fa <ecp_mul_comb+0xce>
            mbedtls_ecp_point_init( &T[i] );
 80100d8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80100dc:	4613      	mov	r3, r2
 80100de:	00db      	lsls	r3, r3, #3
 80100e0:	4413      	add	r3, r2
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	461a      	mov	r2, r3
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	4413      	add	r3, r2
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fd ff4f 	bl	800df8e <mbedtls_ecp_point_init>
        for( i = 0; i < T_size; i++ )
 80100f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80100f4:	3301      	adds	r3, #1
 80100f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80100fa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80100fe:	7e7b      	ldrb	r3, [r7, #25]
 8010100:	429a      	cmp	r2, r3
 8010102:	d3e9      	bcc.n	80100d8 <ecp_mul_comb+0xac>

        T_ok = 0;
 8010104:	2300      	movs	r3, #0
 8010106:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    }

    /* Compute table (or finish computing it) if not done already */
    if( !T_ok )
 801010a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801010e:	2b00      	cmp	r3, #0
 8010110:	d117      	bne.n	8010142 <ecp_mul_comb+0x116>
    {
        MBEDTLS_MPI_CHK( ecp_precompute_comb( grp, T, P, w, d, rs_ctx ) );
 8010112:	7eba      	ldrb	r2, [r7, #26]
 8010114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010116:	9301      	str	r3, [sp, #4]
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	9300      	str	r3, [sp, #0]
 801011c:	4613      	mov	r3, r2
 801011e:	683a      	ldr	r2, [r7, #0]
 8010120:	69f9      	ldr	r1, [r7, #28]
 8010122:	68f8      	ldr	r0, [r7, #12]
 8010124:	f7ff fc7f 	bl	800fa26 <ecp_precompute_comb>
 8010128:	6278      	str	r0, [r7, #36]	@ 0x24
 801012a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801012c:	2b00      	cmp	r3, #0
 801012e:	d11e      	bne.n	801016e <ecp_mul_comb+0x142>

        if( p_eq_g )
 8010130:	7efb      	ldrb	r3, [r7, #27]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d005      	beq.n	8010142 <ecp_mul_comb+0x116>
        {
            /* almost transfer ownership of T to the group, but keep a copy of
             * the pointer to use for calling the next function more easily */
            grp->T = T;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	69fa      	ldr	r2, [r7, #28]
 801013a:	675a      	str	r2, [r3, #116]	@ 0x74
            grp->T_size = T_size;
 801013c:	7e7a      	ldrb	r2, [r7, #25]
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	679a      	str	r2, [r3, #120]	@ 0x78
        }
    }

    /* Actual comb multiplication using precomputed points */
    MBEDTLS_MPI_CHK( ecp_mul_comb_after_precomp( grp, R, m,
 8010142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010144:	9305      	str	r3, [sp, #20]
 8010146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010148:	9304      	str	r3, [sp, #16]
 801014a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801014c:	9303      	str	r3, [sp, #12]
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	9302      	str	r3, [sp, #8]
 8010152:	7ebb      	ldrb	r3, [r7, #26]
 8010154:	9301      	str	r3, [sp, #4]
 8010156:	7e7b      	ldrb	r3, [r7, #25]
 8010158:	9300      	str	r3, [sp, #0]
 801015a:	69fb      	ldr	r3, [r7, #28]
 801015c:	687a      	ldr	r2, [r7, #4]
 801015e:	68b9      	ldr	r1, [r7, #8]
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f7ff feb3 	bl	800fecc <ecp_mul_comb_after_precomp>
 8010166:	6278      	str	r0, [r7, #36]	@ 0x24
 8010168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801016a:	2b00      	cmp	r3, #0
                                                 T, T_size, w, d,
                                                 f_rng, p_rng, rs_ctx ) );

cleanup:
 801016c:	bf00      	nop

    /* does T belong to the group? */
    if( T == grp->T )
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010172:	69fa      	ldr	r2, [r7, #28]
 8010174:	429a      	cmp	r2, r3
 8010176:	d101      	bne.n	801017c <ecp_mul_comb+0x150>
        T = NULL;
 8010178:	2300      	movs	r3, #0
 801017a:	61fb      	str	r3, [r7, #28]
        T = NULL;
    }
#endif

    /* did T belong to us? then let's destroy it! */
    if( T != NULL )
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d01c      	beq.n	80101bc <ecp_mul_comb+0x190>
    {
        for( i = 0; i < T_size; i++ )
 8010182:	2300      	movs	r3, #0
 8010184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8010188:	e010      	b.n	80101ac <ecp_mul_comb+0x180>
            mbedtls_ecp_point_free( &T[i] );
 801018a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 801018e:	4613      	mov	r3, r2
 8010190:	00db      	lsls	r3, r3, #3
 8010192:	4413      	add	r3, r2
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	461a      	mov	r2, r3
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	4413      	add	r3, r2
 801019c:	4618      	mov	r0, r3
 801019e:	f7fd ff61 	bl	800e064 <mbedtls_ecp_point_free>
        for( i = 0; i < T_size; i++ )
 80101a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80101a6:	3301      	adds	r3, #1
 80101a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80101ac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80101b0:	7e7b      	ldrb	r3, [r7, #25]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d3e9      	bcc.n	801018a <ecp_mul_comb+0x15e>
        mbedtls_free( T );
 80101b6:	69f8      	ldr	r0, [r7, #28]
 80101b8:	f005 fb0e 	bl	80157d8 <free>
    /* don't free R while in progress in case R == P */
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( ret != MBEDTLS_ERR_ECP_IN_PROGRESS )
#endif
    /* prevent caller from using invalid value */
    if( ret != 0 )
 80101bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d002      	beq.n	80101c8 <ecp_mul_comb+0x19c>
        mbedtls_ecp_point_free( R );
 80101c2:	68b8      	ldr	r0, [r7, #8]
 80101c4:	f7fd ff4e 	bl	800e064 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( rsm );

    return( ret );
 80101c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3728      	adds	r7, #40	@ 0x28
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	ffffb280 	.word	0xffffb280

080101d8 <ecp_normalize_mxz>:
/*
 * Normalize Montgomery x/z coordinates: X = X/Z, Z = 1
 * Cost: 1M + 1I
 */
static int ecp_normalize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P )
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b084      	sub	sp, #16
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
#if defined(MBEDTLS_ECP_NORMALIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_normalize_mxz( grp, P ) );
#endif /* MBEDTLS_ECP_NORMALIZE_MXZ_ALT */

    MBEDTLS_MPI_CHK( mbedtls_mpi_inv_mod( &P->Z, &P->Z, &grp->P ) );
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	f103 0018 	add.w	r0, r3, #24
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	f103 0118 	add.w	r1, r3, #24
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	3304      	adds	r3, #4
 80101f2:	461a      	mov	r2, r3
 80101f4:	f7fd fb2c 	bl	800d850 <mbedtls_mpi_inv_mod>
 80101f8:	60f8      	str	r0, [r7, #12]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d122      	bne.n	8010246 <ecp_normalize_mxz+0x6e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &P->Z ) ); MOD_MUL( P->X );
 8010200:	6838      	ldr	r0, [r7, #0]
 8010202:	6839      	ldr	r1, [r7, #0]
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	3318      	adds	r3, #24
 8010208:	461a      	mov	r2, r3
 801020a:	f7fc fd84 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d117      	bne.n	8010246 <ecp_normalize_mxz+0x6e>
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	6879      	ldr	r1, [r7, #4]
 801021a:	4618      	mov	r0, r3
 801021c:	f7fe f80a 	bl	800e234 <ecp_modp>
 8010220:	60f8      	str	r0, [r7, #12]
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d10e      	bne.n	8010246 <ecp_normalize_mxz+0x6e>
 8010228:	4b09      	ldr	r3, [pc, #36]	@ (8010250 <ecp_normalize_mxz+0x78>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	3301      	adds	r3, #1
 801022e:	4a08      	ldr	r2, [pc, #32]	@ (8010250 <ecp_normalize_mxz+0x78>)
 8010230:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &P->Z, 1 ) );
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	3318      	adds	r3, #24
 8010236:	2101      	movs	r1, #1
 8010238:	4618      	mov	r0, r3
 801023a:	f7fa fa2d 	bl	800a698 <mbedtls_mpi_lset>
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2b00      	cmp	r3, #0

cleanup:
 8010244:	bf00      	nop
    return( ret );
 8010246:	68fb      	ldr	r3, [r7, #12]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3710      	adds	r7, #16
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	2400257c 	.word	0x2400257c

08010254 <ecp_randomize_mxz>:
 * This countermeasure was first suggested in [2].
 * Cost: 2M
 */
static int ecp_randomize_mxz( const mbedtls_ecp_group *grp, mbedtls_ecp_point *P,
                int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b08a      	sub	sp, #40	@ 0x28
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	607a      	str	r2, [r7, #4]
 8010260:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_mpi l;
    size_t p_size;
    int count = 0;
 8010262:	2300      	movs	r3, #0
 8010264:	623b      	str	r3, [r7, #32]
#if defined(MBEDTLS_ECP_RANDOMIZE_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_randomize_mxz( grp, P, f_rng, p_rng );
#endif /* MBEDTLS_ECP_RANDOMIZE_MXZ_ALT */

    p_size = ( grp->pbits + 7 ) / 8;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801026a:	3307      	adds	r3, #7
 801026c:	08db      	lsrs	r3, r3, #3
 801026e:	61fb      	str	r3, [r7, #28]
    mbedtls_mpi_init( &l );
 8010270:	f107 0310 	add.w	r3, r7, #16
 8010274:	4618      	mov	r0, r3
 8010276:	f7f9 ffce 	bl	800a216 <mbedtls_mpi_init>

    /* Generate l such that 1 < l < p */
    do
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_fill_random( &l, p_size, f_rng, p_rng ) );
 801027a:	f107 0010 	add.w	r0, r7, #16
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	69f9      	ldr	r1, [r7, #28]
 8010284:	f7fd fa9c 	bl	800d7c0 <mbedtls_mpi_fill_random>
 8010288:	6278      	str	r0, [r7, #36]	@ 0x24
 801028a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801028c:	2b00      	cmp	r3, #0
 801028e:	d15b      	bne.n	8010348 <ecp_randomize_mxz+0xf4>

        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 8010290:	e009      	b.n	80102a6 <ecp_randomize_mxz+0x52>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &l, 1 ) );
 8010292:	f107 0310 	add.w	r3, r7, #16
 8010296:	2101      	movs	r1, #1
 8010298:	4618      	mov	r0, r3
 801029a:	f7fa fd80 	bl	800ad9e <mbedtls_mpi_shift_r>
 801029e:	6278      	str	r0, [r7, #36]	@ 0x24
 80102a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d150      	bne.n	8010348 <ecp_randomize_mxz+0xf4>
        while( mbedtls_mpi_cmp_mpi( &l, &grp->P ) >= 0 )
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	1d1a      	adds	r2, r3, #4
 80102aa:	f107 0310 	add.w	r3, r7, #16
 80102ae:	4611      	mov	r1, r2
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fa fe91 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	daea      	bge.n	8010292 <ecp_randomize_mxz+0x3e>

        if( count++ > 10 )
 80102bc:	6a3b      	ldr	r3, [r7, #32]
 80102be:	1c5a      	adds	r2, r3, #1
 80102c0:	623a      	str	r2, [r7, #32]
 80102c2:	2b0a      	cmp	r3, #10
 80102c4:	dd01      	ble.n	80102ca <ecp_randomize_mxz+0x76>
            return( MBEDTLS_ERR_ECP_RANDOM_FAILED );
 80102c6:	4b25      	ldr	r3, [pc, #148]	@ (801035c <ecp_randomize_mxz+0x108>)
 80102c8:	e044      	b.n	8010354 <ecp_randomize_mxz+0x100>
    }
    while( mbedtls_mpi_cmp_int( &l, 1 ) <= 0 );
 80102ca:	f107 0310 	add.w	r3, r7, #16
 80102ce:	2101      	movs	r1, #1
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fa ff1c 	bl	800b10e <mbedtls_mpi_cmp_int>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	ddce      	ble.n	801027a <ecp_randomize_mxz+0x26>

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->X, &P->X, &l ) ); MOD_MUL( P->X );
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	68b9      	ldr	r1, [r7, #8]
 80102e0:	f107 0210 	add.w	r2, r7, #16
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fc fd16 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 80102ea:	6278      	str	r0, [r7, #36]	@ 0x24
 80102ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d12a      	bne.n	8010348 <ecp_randomize_mxz+0xf4>
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	68f9      	ldr	r1, [r7, #12]
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fd ff9c 	bl	800e234 <ecp_modp>
 80102fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80102fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010300:	2b00      	cmp	r3, #0
 8010302:	d121      	bne.n	8010348 <ecp_randomize_mxz+0xf4>
 8010304:	4b16      	ldr	r3, [pc, #88]	@ (8010360 <ecp_randomize_mxz+0x10c>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	3301      	adds	r3, #1
 801030a:	4a15      	ldr	r2, [pc, #84]	@ (8010360 <ecp_randomize_mxz+0x10c>)
 801030c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &P->Z, &P->Z, &l ) ); MOD_MUL( P->Z );
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	f103 0018 	add.w	r0, r3, #24
 8010314:	68bb      	ldr	r3, [r7, #8]
 8010316:	3318      	adds	r3, #24
 8010318:	f107 0210 	add.w	r2, r7, #16
 801031c:	4619      	mov	r1, r3
 801031e:	f7fc fcfa 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 8010322:	6278      	str	r0, [r7, #36]	@ 0x24
 8010324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10e      	bne.n	8010348 <ecp_randomize_mxz+0xf4>
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	3318      	adds	r3, #24
 801032e:	68f9      	ldr	r1, [r7, #12]
 8010330:	4618      	mov	r0, r3
 8010332:	f7fd ff7f 	bl	800e234 <ecp_modp>
 8010336:	6278      	str	r0, [r7, #36]	@ 0x24
 8010338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801033a:	2b00      	cmp	r3, #0
 801033c:	d104      	bne.n	8010348 <ecp_randomize_mxz+0xf4>
 801033e:	4b08      	ldr	r3, [pc, #32]	@ (8010360 <ecp_randomize_mxz+0x10c>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	3301      	adds	r3, #1
 8010344:	4a06      	ldr	r2, [pc, #24]	@ (8010360 <ecp_randomize_mxz+0x10c>)
 8010346:	6013      	str	r3, [r2, #0]

cleanup:
    mbedtls_mpi_free( &l );
 8010348:	f107 0310 	add.w	r3, r7, #16
 801034c:	4618      	mov	r0, r3
 801034e:	f7f9 ff75 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 8010352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010354:	4618      	mov	r0, r3
 8010356:	3728      	adds	r7, #40	@ 0x28
 8010358:	46bd      	mov	sp, r7
 801035a:	bd80      	pop	{r7, pc}
 801035c:	ffffb300 	.word	0xffffb300
 8010360:	2400257c 	.word	0x2400257c

08010364 <ecp_double_add_mxz>:
 */
static int ecp_double_add_mxz( const mbedtls_ecp_group *grp,
                               mbedtls_ecp_point *R, mbedtls_ecp_point *S,
                               const mbedtls_ecp_point *P, const mbedtls_ecp_point *Q,
                               const mbedtls_mpi *d )
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b0a0      	sub	sp, #128	@ 0x80
 8010368:	af00      	add	r7, sp, #0
 801036a:	60f8      	str	r0, [r7, #12]
 801036c:	60b9      	str	r1, [r7, #8]
 801036e:	607a      	str	r2, [r7, #4]
 8010370:	603b      	str	r3, [r7, #0]
#if defined(MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT)
    if( mbedtls_internal_ecp_grp_capable( grp ) )
        return( mbedtls_internal_ecp_double_add_mxz( grp, R, S, P, Q, d ) );
#endif /* MBEDTLS_ECP_DOUBLE_ADD_MXZ_ALT */

    mbedtls_mpi_init( &A ); mbedtls_mpi_init( &AA ); mbedtls_mpi_init( &B );
 8010372:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8010376:	4618      	mov	r0, r3
 8010378:	f7f9 ff4d 	bl	800a216 <mbedtls_mpi_init>
 801037c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010380:	4618      	mov	r0, r3
 8010382:	f7f9 ff48 	bl	800a216 <mbedtls_mpi_init>
 8010386:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801038a:	4618      	mov	r0, r3
 801038c:	f7f9 ff43 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &BB ); mbedtls_mpi_init( &E ); mbedtls_mpi_init( &C );
 8010390:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8010394:	4618      	mov	r0, r3
 8010396:	f7f9 ff3e 	bl	800a216 <mbedtls_mpi_init>
 801039a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801039e:	4618      	mov	r0, r3
 80103a0:	f7f9 ff39 	bl	800a216 <mbedtls_mpi_init>
 80103a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7f9 ff34 	bl	800a216 <mbedtls_mpi_init>
    mbedtls_mpi_init( &D ); mbedtls_mpi_init( &DA ); mbedtls_mpi_init( &CB );
 80103ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80103b2:	4618      	mov	r0, r3
 80103b4:	f7f9 ff2f 	bl	800a216 <mbedtls_mpi_init>
 80103b8:	f107 031c 	add.w	r3, r7, #28
 80103bc:	4618      	mov	r0, r3
 80103be:	f7f9 ff2a 	bl	800a216 <mbedtls_mpi_init>
 80103c2:	f107 0310 	add.w	r3, r7, #16
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7f9 ff25 	bl	800a216 <mbedtls_mpi_init>

    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &A,    &P->X,   &P->Z ) ); MOD_ADD( A    );
 80103cc:	6839      	ldr	r1, [r7, #0]
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	f103 0218 	add.w	r2, r3, #24
 80103d4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fb f823 	bl	800b424 <mbedtls_mpi_add_mpi>
 80103de:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80103e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	f040 825c 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 80103e8:	e00d      	b.n	8010406 <ecp_double_add_mxz+0xa2>
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	1d1a      	adds	r2, r3, #4
 80103ee:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80103f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fa ffb4 	bl	800b364 <mbedtls_mpi_sub_abs>
 80103fc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80103fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010400:	2b00      	cmp	r3, #0
 8010402:	f040 824d 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	1d1a      	adds	r2, r3, #4
 801040a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801040e:	4611      	mov	r1, r2
 8010410:	4618      	mov	r0, r3
 8010412:	f7fa fde1 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	dae6      	bge.n	80103ea <ecp_double_add_mxz+0x86>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &AA,   &A,      &A    ) ); MOD_MUL( AA   );
 801041c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8010420:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8010424:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8010428:	4618      	mov	r0, r3
 801042a:	f7fc fc74 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 801042e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010430:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010432:	2b00      	cmp	r3, #0
 8010434:	f040 8234 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010438:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 801043c:	68f9      	ldr	r1, [r7, #12]
 801043e:	4618      	mov	r0, r3
 8010440:	f7fd fef8 	bl	800e234 <ecp_modp>
 8010444:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010446:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010448:	2b00      	cmp	r3, #0
 801044a:	f040 8229 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 801044e:	4ba5      	ldr	r3, [pc, #660]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	3301      	adds	r3, #1
 8010454:	4aa3      	ldr	r2, [pc, #652]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 8010456:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &B,    &P->X,   &P->Z ) ); MOD_SUB( B    );
 8010458:	6839      	ldr	r1, [r7, #0]
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	f103 0218 	add.w	r2, r3, #24
 8010460:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8010464:	4618      	mov	r0, r3
 8010466:	f7fb f821 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 801046a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801046c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801046e:	2b00      	cmp	r3, #0
 8010470:	f040 8216 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010474:	e00d      	b.n	8010492 <ecp_double_add_mxz+0x12e>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	1d1a      	adds	r2, r3, #4
 801047a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 801047e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8010482:	4618      	mov	r0, r3
 8010484:	f7fa ffce 	bl	800b424 <mbedtls_mpi_add_mpi>
 8010488:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801048a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801048c:	2b00      	cmp	r3, #0
 801048e:	f040 8207 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010494:	2b00      	cmp	r3, #0
 8010496:	da08      	bge.n	80104aa <ecp_double_add_mxz+0x146>
 8010498:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801049c:	2100      	movs	r1, #0
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fa fe35 	bl	800b10e <mbedtls_mpi_cmp_int>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d1e5      	bne.n	8010476 <ecp_double_add_mxz+0x112>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &BB,   &B,      &B    ) ); MOD_MUL( BB   );
 80104aa:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80104ae:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80104b2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7fc fc2d 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 80104bc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80104be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f040 81ed 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 80104c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80104ca:	68f9      	ldr	r1, [r7, #12]
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7fd feb1 	bl	800e234 <ecp_modp>
 80104d2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80104d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f040 81e2 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 80104dc:	4b81      	ldr	r3, [pc, #516]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	3301      	adds	r3, #1
 80104e2:	4a80      	ldr	r2, [pc, #512]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 80104e4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &E,    &AA,     &BB   ) ); MOD_SUB( E    );
 80104e6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80104ea:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80104ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fa ffda 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 80104f8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80104fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f040 81cf 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010502:	e00d      	b.n	8010520 <ecp_double_add_mxz+0x1bc>
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	1d1a      	adds	r2, r3, #4
 8010508:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801050c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010510:	4618      	mov	r0, r3
 8010512:	f7fa ff87 	bl	800b424 <mbedtls_mpi_add_mpi>
 8010516:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010518:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801051a:	2b00      	cmp	r3, #0
 801051c:	f040 81c0 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010522:	2b00      	cmp	r3, #0
 8010524:	da08      	bge.n	8010538 <ecp_double_add_mxz+0x1d4>
 8010526:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801052a:	2100      	movs	r1, #0
 801052c:	4618      	mov	r0, r3
 801052e:	f7fa fdee 	bl	800b10e <mbedtls_mpi_cmp_int>
 8010532:	4603      	mov	r3, r0
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1e5      	bne.n	8010504 <ecp_double_add_mxz+0x1a0>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &C,    &Q->X,   &Q->Z ) ); MOD_ADD( C    );
 8010538:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801053c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010540:	f103 0218 	add.w	r2, r3, #24
 8010544:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010548:	4618      	mov	r0, r3
 801054a:	f7fa ff6b 	bl	800b424 <mbedtls_mpi_add_mpi>
 801054e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010550:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010552:	2b00      	cmp	r3, #0
 8010554:	f040 81a4 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010558:	e00d      	b.n	8010576 <ecp_double_add_mxz+0x212>
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	1d1a      	adds	r2, r3, #4
 801055e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8010562:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8010566:	4618      	mov	r0, r3
 8010568:	f7fa fefc 	bl	800b364 <mbedtls_mpi_sub_abs>
 801056c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801056e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010570:	2b00      	cmp	r3, #0
 8010572:	f040 8195 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	1d1a      	adds	r2, r3, #4
 801057a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801057e:	4611      	mov	r1, r2
 8010580:	4618      	mov	r0, r3
 8010582:	f7fa fd29 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	dae6      	bge.n	801055a <ecp_double_add_mxz+0x1f6>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &D,    &Q->X,   &Q->Z ) ); MOD_SUB( D    );
 801058c:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8010590:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010594:	f103 0218 	add.w	r2, r3, #24
 8010598:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801059c:	4618      	mov	r0, r3
 801059e:	f7fa ff85 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 80105a2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80105a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	f040 817a 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 80105ac:	e00d      	b.n	80105ca <ecp_double_add_mxz+0x266>
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	1d1a      	adds	r2, r3, #4
 80105b2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80105b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fa ff32 	bl	800b424 <mbedtls_mpi_add_mpi>
 80105c0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80105c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f040 816b 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 80105ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	da08      	bge.n	80105e2 <ecp_double_add_mxz+0x27e>
 80105d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80105d4:	2100      	movs	r1, #0
 80105d6:	4618      	mov	r0, r3
 80105d8:	f7fa fd99 	bl	800b10e <mbedtls_mpi_cmp_int>
 80105dc:	4603      	mov	r3, r0
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d1e5      	bne.n	80105ae <ecp_double_add_mxz+0x24a>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &DA,   &D,      &A    ) ); MOD_MUL( DA   );
 80105e2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80105e6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80105ea:	f107 031c 	add.w	r3, r7, #28
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7fc fb91 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 80105f4:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80105f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	f040 8151 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 80105fe:	f107 031c 	add.w	r3, r7, #28
 8010602:	68f9      	ldr	r1, [r7, #12]
 8010604:	4618      	mov	r0, r3
 8010606:	f7fd fe15 	bl	800e234 <ecp_modp>
 801060a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801060c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801060e:	2b00      	cmp	r3, #0
 8010610:	f040 8146 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010614:	4b33      	ldr	r3, [pc, #204]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	3301      	adds	r3, #1
 801061a:	4a32      	ldr	r2, [pc, #200]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 801061c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &CB,   &C,      &B    ) ); MOD_MUL( CB   );
 801061e:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8010622:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8010626:	f107 0310 	add.w	r3, r7, #16
 801062a:	4618      	mov	r0, r3
 801062c:	f7fc fb73 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 8010630:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010632:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010634:	2b00      	cmp	r3, #0
 8010636:	f040 8133 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 801063a:	f107 0310 	add.w	r3, r7, #16
 801063e:	68f9      	ldr	r1, [r7, #12]
 8010640:	4618      	mov	r0, r3
 8010642:	f7fd fdf7 	bl	800e234 <ecp_modp>
 8010646:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010648:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801064a:	2b00      	cmp	r3, #0
 801064c:	f040 8128 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010650:	4b24      	ldr	r3, [pc, #144]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	3301      	adds	r3, #1
 8010656:	4a23      	ldr	r2, [pc, #140]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 8010658:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &S->X, &DA,     &CB   ) ); MOD_MUL( S->X );
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f107 0210 	add.w	r2, r7, #16
 8010660:	f107 011c 	add.w	r1, r7, #28
 8010664:	4618      	mov	r0, r3
 8010666:	f7fa fedd 	bl	800b424 <mbedtls_mpi_add_mpi>
 801066a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801066c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801066e:	2b00      	cmp	r3, #0
 8010670:	f040 8116 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	68f9      	ldr	r1, [r7, #12]
 8010678:	4618      	mov	r0, r3
 801067a:	f7fd fddb 	bl	800e234 <ecp_modp>
 801067e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010680:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010682:	2b00      	cmp	r3, #0
 8010684:	f040 810c 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010688:	4b16      	ldr	r3, [pc, #88]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	3301      	adds	r3, #1
 801068e:	4a15      	ldr	r2, [pc, #84]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 8010690:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->X, &S->X,   &S->X ) ); MOD_MUL( S->X );
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6879      	ldr	r1, [r7, #4]
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	4618      	mov	r0, r3
 801069a:	f7fc fb3c 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 801069e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80106a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f040 80fc 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	68f9      	ldr	r1, [r7, #12]
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7fd fdc1 	bl	800e234 <ecp_modp>
 80106b2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80106b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	f040 80f2 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 80106bc:	4b09      	ldr	r3, [pc, #36]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	3301      	adds	r3, #1
 80106c2:	4a08      	ldr	r2, [pc, #32]	@ (80106e4 <ecp_double_add_mxz+0x380>)
 80106c4:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &S->Z, &DA,     &CB   ) ); MOD_SUB( S->Z );
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	3318      	adds	r3, #24
 80106ca:	f107 0210 	add.w	r2, r7, #16
 80106ce:	f107 011c 	add.w	r1, r7, #28
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7fa feea 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 80106d8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80106da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80106dc:	2b00      	cmp	r3, #0
 80106de:	f040 80df 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 80106e2:	e011      	b.n	8010708 <ecp_double_add_mxz+0x3a4>
 80106e4:	2400257c 	.word	0x2400257c
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f103 0018 	add.w	r0, r3, #24
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f103 0118 	add.w	r1, r3, #24
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3304      	adds	r3, #4
 80106f8:	461a      	mov	r2, r3
 80106fa:	f7fa fe93 	bl	800b424 <mbedtls_mpi_add_mpi>
 80106fe:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010700:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010702:	2b00      	cmp	r3, #0
 8010704:	f040 80cc 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	699b      	ldr	r3, [r3, #24]
 801070c:	2b00      	cmp	r3, #0
 801070e:	da08      	bge.n	8010722 <ecp_double_add_mxz+0x3be>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	3318      	adds	r3, #24
 8010714:	2100      	movs	r1, #0
 8010716:	4618      	mov	r0, r3
 8010718:	f7fa fcf9 	bl	800b10e <mbedtls_mpi_cmp_int>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1e2      	bne.n	80106e8 <ecp_double_add_mxz+0x384>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, &S->Z,   &S->Z ) ); MOD_MUL( S->Z );
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f103 0018 	add.w	r0, r3, #24
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f103 0118 	add.w	r1, r3, #24
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	3318      	adds	r3, #24
 8010732:	461a      	mov	r2, r3
 8010734:	f7fc faef 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 8010738:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801073a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801073c:	2b00      	cmp	r3, #0
 801073e:	f040 80af 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	3318      	adds	r3, #24
 8010746:	68f9      	ldr	r1, [r7, #12]
 8010748:	4618      	mov	r0, r3
 801074a:	f7fd fd73 	bl	800e234 <ecp_modp>
 801074e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010750:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010752:	2b00      	cmp	r3, #0
 8010754:	f040 80a4 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010758:	4b6a      	ldr	r3, [pc, #424]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	3301      	adds	r3, #1
 801075e:	4a69      	ldr	r2, [pc, #420]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 8010760:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &S->Z, d,       &S->Z ) ); MOD_MUL( S->Z );
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f103 0018 	add.w	r0, r3, #24
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	3318      	adds	r3, #24
 801076c:	461a      	mov	r2, r3
 801076e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8010772:	f7fc fad0 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 8010776:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010778:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801077a:	2b00      	cmp	r3, #0
 801077c:	f040 8090 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	3318      	adds	r3, #24
 8010784:	68f9      	ldr	r1, [r7, #12]
 8010786:	4618      	mov	r0, r3
 8010788:	f7fd fd54 	bl	800e234 <ecp_modp>
 801078c:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801078e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010790:	2b00      	cmp	r3, #0
 8010792:	f040 8085 	bne.w	80108a0 <ecp_double_add_mxz+0x53c>
 8010796:	4b5b      	ldr	r3, [pc, #364]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	3301      	adds	r3, #1
 801079c:	4a59      	ldr	r2, [pc, #356]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 801079e:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->X, &AA,     &BB   ) ); MOD_MUL( R->X );
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80107a6:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fc fab3 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 80107b0:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80107b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d173      	bne.n	80108a0 <ecp_double_add_mxz+0x53c>
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	68f9      	ldr	r1, [r7, #12]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fd fd39 	bl	800e234 <ecp_modp>
 80107c2:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80107c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d16a      	bne.n	80108a0 <ecp_double_add_mxz+0x53c>
 80107ca:	4b4e      	ldr	r3, [pc, #312]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	3301      	adds	r3, #1
 80107d0:	4a4c      	ldr	r2, [pc, #304]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 80107d2:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &grp->A, &E    ) ); MOD_MUL( R->Z );
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	f103 0018 	add.w	r0, r3, #24
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	3310      	adds	r3, #16
 80107de:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80107e2:	4619      	mov	r1, r3
 80107e4:	f7fc fa97 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 80107e8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80107ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d157      	bne.n	80108a0 <ecp_double_add_mxz+0x53c>
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	3318      	adds	r3, #24
 80107f4:	68f9      	ldr	r1, [r7, #12]
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7fd fd1c 	bl	800e234 <ecp_modp>
 80107fc:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80107fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010800:	2b00      	cmp	r3, #0
 8010802:	d14d      	bne.n	80108a0 <ecp_double_add_mxz+0x53c>
 8010804:	4b3f      	ldr	r3, [pc, #252]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	3301      	adds	r3, #1
 801080a:	4a3e      	ldr	r2, [pc, #248]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 801080c:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &R->Z, &BB,     &R->Z ) ); MOD_ADD( R->Z );
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	f103 0018 	add.w	r0, r3, #24
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	f103 0218 	add.w	r2, r3, #24
 801081a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801081e:	4619      	mov	r1, r3
 8010820:	f7fa fe00 	bl	800b424 <mbedtls_mpi_add_mpi>
 8010824:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010826:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010828:	2b00      	cmp	r3, #0
 801082a:	d139      	bne.n	80108a0 <ecp_double_add_mxz+0x53c>
 801082c:	e00e      	b.n	801084c <ecp_double_add_mxz+0x4e8>
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	f103 0018 	add.w	r0, r3, #24
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	f103 0118 	add.w	r1, r3, #24
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	3304      	adds	r3, #4
 801083e:	461a      	mov	r2, r3
 8010840:	f7fa fd90 	bl	800b364 <mbedtls_mpi_sub_abs>
 8010844:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010846:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010848:	2b00      	cmp	r3, #0
 801084a:	d129      	bne.n	80108a0 <ecp_double_add_mxz+0x53c>
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	f103 0218 	add.w	r2, r3, #24
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	3304      	adds	r3, #4
 8010856:	4619      	mov	r1, r3
 8010858:	4610      	mov	r0, r2
 801085a:	f7fa fbbd 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 801085e:	4603      	mov	r3, r0
 8010860:	2b00      	cmp	r3, #0
 8010862:	dae4      	bge.n	801082e <ecp_double_add_mxz+0x4ca>
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &R->Z, &E,      &R->Z ) ); MOD_MUL( R->Z );
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	f103 0018 	add.w	r0, r3, #24
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	f103 0218 	add.w	r2, r3, #24
 8010870:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010874:	4619      	mov	r1, r3
 8010876:	f7fc fa4e 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 801087a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801087c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801087e:	2b00      	cmp	r3, #0
 8010880:	d10e      	bne.n	80108a0 <ecp_double_add_mxz+0x53c>
 8010882:	68bb      	ldr	r3, [r7, #8]
 8010884:	3318      	adds	r3, #24
 8010886:	68f9      	ldr	r1, [r7, #12]
 8010888:	4618      	mov	r0, r3
 801088a:	f7fd fcd3 	bl	800e234 <ecp_modp>
 801088e:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8010890:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010892:	2b00      	cmp	r3, #0
 8010894:	d104      	bne.n	80108a0 <ecp_double_add_mxz+0x53c>
 8010896:	4b1b      	ldr	r3, [pc, #108]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	3301      	adds	r3, #1
 801089c:	4a19      	ldr	r2, [pc, #100]	@ (8010904 <ecp_double_add_mxz+0x5a0>)
 801089e:	6013      	str	r3, [r2, #0]

cleanup:
    mbedtls_mpi_free( &A ); mbedtls_mpi_free( &AA ); mbedtls_mpi_free( &B );
 80108a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7f9 fcc9 	bl	800a23c <mbedtls_mpi_free>
 80108aa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7f9 fcc4 	bl	800a23c <mbedtls_mpi_free>
 80108b4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7f9 fcbf 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &BB ); mbedtls_mpi_free( &E ); mbedtls_mpi_free( &C );
 80108be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7f9 fcba 	bl	800a23c <mbedtls_mpi_free>
 80108c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7f9 fcb5 	bl	800a23c <mbedtls_mpi_free>
 80108d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7f9 fcb0 	bl	800a23c <mbedtls_mpi_free>
    mbedtls_mpi_free( &D ); mbedtls_mpi_free( &DA ); mbedtls_mpi_free( &CB );
 80108dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7f9 fcab 	bl	800a23c <mbedtls_mpi_free>
 80108e6:	f107 031c 	add.w	r3, r7, #28
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7f9 fca6 	bl	800a23c <mbedtls_mpi_free>
 80108f0:	f107 0310 	add.w	r3, r7, #16
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7f9 fca1 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 80108fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3780      	adds	r7, #128	@ 0x80
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	2400257c 	.word	0x2400257c

08010908 <ecp_mul_mxz>:
 */
static int ecp_mul_mxz( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
                        const mbedtls_mpi *m, const mbedtls_ecp_point *P,
                        int (*f_rng)(void *, unsigned char *, size_t),
                        void *p_rng )
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b096      	sub	sp, #88	@ 0x58
 801090c:	af02      	add	r7, sp, #8
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	60b9      	str	r1, [r7, #8]
 8010912:	607a      	str	r2, [r7, #4]
 8010914:	603b      	str	r3, [r7, #0]
    size_t i;
    unsigned char b;
    mbedtls_ecp_point RP;
    mbedtls_mpi PX;

    mbedtls_ecp_point_init( &RP ); mbedtls_mpi_init( &PX );
 8010916:	f107 0320 	add.w	r3, r7, #32
 801091a:	4618      	mov	r0, r3
 801091c:	f7fd fb37 	bl	800df8e <mbedtls_ecp_point_init>
 8010920:	f107 0314 	add.w	r3, r7, #20
 8010924:	4618      	mov	r0, r3
 8010926:	f7f9 fc76 	bl	800a216 <mbedtls_mpi_init>

    /* Save PX and read from P before writing to R, in case P == R */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &PX, &P->X ) );
 801092a:	683a      	ldr	r2, [r7, #0]
 801092c:	f107 0314 	add.w	r3, r7, #20
 8010930:	4611      	mov	r1, r2
 8010932:	4618      	mov	r0, r3
 8010934:	f7f9 fd51 	bl	800a3da <mbedtls_mpi_copy>
 8010938:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801093a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801093c:	2b00      	cmp	r3, #0
 801093e:	f040 80ac 	bne.w	8010a9a <ecp_mul_mxz+0x192>
    MBEDTLS_MPI_CHK( mbedtls_ecp_copy( &RP, P ) );
 8010942:	f107 0320 	add.w	r3, r7, #32
 8010946:	6839      	ldr	r1, [r7, #0]
 8010948:	4618      	mov	r0, r3
 801094a:	f7fd fc0b 	bl	800e164 <mbedtls_ecp_copy>
 801094e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010952:	2b00      	cmp	r3, #0
 8010954:	f040 80a1 	bne.w	8010a9a <ecp_mul_mxz+0x192>

    /* Set R to zero in modified x/z coordinates */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->X, 1 ) );
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	2101      	movs	r1, #1
 801095c:	4618      	mov	r0, r3
 801095e:	f7f9 fe9b 	bl	800a698 <mbedtls_mpi_lset>
 8010962:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010966:	2b00      	cmp	r3, #0
 8010968:	f040 8097 	bne.w	8010a9a <ecp_mul_mxz+0x192>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &R->Z, 0 ) );
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	3318      	adds	r3, #24
 8010970:	2100      	movs	r1, #0
 8010972:	4618      	mov	r0, r3
 8010974:	f7f9 fe90 	bl	800a698 <mbedtls_mpi_lset>
 8010978:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801097a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801097c:	2b00      	cmp	r3, #0
 801097e:	f040 808c 	bne.w	8010a9a <ecp_mul_mxz+0x192>
    mbedtls_mpi_free( &R->Y );
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	330c      	adds	r3, #12
 8010986:	4618      	mov	r0, r3
 8010988:	f7f9 fc58 	bl	800a23c <mbedtls_mpi_free>

    /* RP.X might be sligtly larger than P, so reduce it */
    MOD_ADD( RP.X );
 801098c:	e00c      	b.n	80109a8 <ecp_mul_mxz+0xa0>
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	1d1a      	adds	r2, r3, #4
 8010992:	f107 0120 	add.w	r1, r7, #32
 8010996:	f107 0320 	add.w	r3, r7, #32
 801099a:	4618      	mov	r0, r3
 801099c:	f7fa fce2 	bl	800b364 <mbedtls_mpi_sub_abs>
 80109a0:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80109a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d178      	bne.n	8010a9a <ecp_mul_mxz+0x192>
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	1d1a      	adds	r2, r3, #4
 80109ac:	f107 0320 	add.w	r3, r7, #32
 80109b0:	4611      	mov	r1, r2
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fa fb10 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 80109b8:	4603      	mov	r3, r0
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	dae7      	bge.n	801098e <ecp_mul_mxz+0x86>

    /* Randomize coordinates of the starting point */
    if( f_rng != NULL )
 80109be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d00a      	beq.n	80109da <ecp_mul_mxz+0xd2>
        MBEDTLS_MPI_CHK( ecp_randomize_mxz( grp, &RP, f_rng, p_rng ) );
 80109c4:	f107 0120 	add.w	r1, r7, #32
 80109c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80109ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80109cc:	68f8      	ldr	r0, [r7, #12]
 80109ce:	f7ff fc41 	bl	8010254 <ecp_randomize_mxz>
 80109d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80109d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d15f      	bne.n	8010a9a <ecp_mul_mxz+0x192>

    /* Loop invariant: R = result so far, RP = R + P */
    i = mbedtls_mpi_bitlen( m ); /* one past the (zero-based) most significant bit */
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7f9 ff52 	bl	800a884 <mbedtls_mpi_bitlen>
 80109e0:	64b8      	str	r0, [r7, #72]	@ 0x48
    while( i-- > 0 )
 80109e2:	e04d      	b.n	8010a80 <ecp_mul_mxz+0x178>
    {
        b = mbedtls_mpi_get_bit( m, i );
 80109e4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f7f9 fe82 	bl	800a6f0 <mbedtls_mpi_get_bit>
 80109ec:	4603      	mov	r3, r0
 80109ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
         * which is:
         *  if (b) double_add( RP, R, RP, R )
         *  else   double_add( R, RP, R, RP )
         * but using safe conditional swaps to avoid leaks
         */
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80109f8:	f107 0120 	add.w	r1, r7, #32
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7f9 fdb9 	bl	800a574 <mbedtls_mpi_safe_cond_swap>
 8010a02:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d147      	bne.n	8010a9a <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	f103 0018 	add.w	r0, r3, #24
 8010a10:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010a14:	f107 0320 	add.w	r3, r7, #32
 8010a18:	3318      	adds	r3, #24
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	f7f9 fdaa 	bl	800a574 <mbedtls_mpi_safe_cond_swap>
 8010a20:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d138      	bne.n	8010a9a <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( ecp_double_add_mxz( grp, R, &RP, R, &RP, &PX ) );
 8010a28:	f107 0220 	add.w	r2, r7, #32
 8010a2c:	f107 0314 	add.w	r3, r7, #20
 8010a30:	9301      	str	r3, [sp, #4]
 8010a32:	f107 0320 	add.w	r3, r7, #32
 8010a36:	9300      	str	r3, [sp, #0]
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	68b9      	ldr	r1, [r7, #8]
 8010a3c:	68f8      	ldr	r0, [r7, #12]
 8010a3e:	f7ff fc91 	bl	8010364 <ecp_double_add_mxz>
 8010a42:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d127      	bne.n	8010a9a <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->X, &RP.X, b ) );
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010a50:	f107 0120 	add.w	r1, r7, #32
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7f9 fd8d 	bl	800a574 <mbedtls_mpi_safe_cond_swap>
 8010a5a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d11b      	bne.n	8010a9a <ecp_mul_mxz+0x192>
        MBEDTLS_MPI_CHK( mbedtls_mpi_safe_cond_swap( &R->Z, &RP.Z, b ) );
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	f103 0018 	add.w	r0, r3, #24
 8010a68:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8010a6c:	f107 0320 	add.w	r3, r7, #32
 8010a70:	3318      	adds	r3, #24
 8010a72:	4619      	mov	r1, r3
 8010a74:	f7f9 fd7e 	bl	800a574 <mbedtls_mpi_safe_cond_swap>
 8010a78:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d10c      	bne.n	8010a9a <ecp_mul_mxz+0x192>
    while( i-- > 0 )
 8010a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010a82:	1e5a      	subs	r2, r3, #1
 8010a84:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d1ac      	bne.n	80109e4 <ecp_mul_mxz+0xdc>
    }

    MBEDTLS_MPI_CHK( ecp_normalize_mxz( grp, R ) );
 8010a8a:	68b9      	ldr	r1, [r7, #8]
 8010a8c:	68f8      	ldr	r0, [r7, #12]
 8010a8e:	f7ff fba3 	bl	80101d8 <ecp_normalize_mxz>
 8010a92:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8010a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a96:	2b00      	cmp	r3, #0

cleanup:
 8010a98:	bf00      	nop
    mbedtls_ecp_point_free( &RP ); mbedtls_mpi_free( &PX );
 8010a9a:	f107 0320 	add.w	r3, r7, #32
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7fd fae0 	bl	800e064 <mbedtls_ecp_point_free>
 8010aa4:	f107 0314 	add.w	r3, r7, #20
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7f9 fbc7 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 8010aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3750      	adds	r7, #80	@ 0x50
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <mbedtls_ecp_mul_restartable>:
 */
int mbedtls_ecp_mul_restartable( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             int (*f_rng)(void *, unsigned char *, size_t), void *p_rng,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b08a      	sub	sp, #40	@ 0x28
 8010abc:	af04      	add	r7, sp, #16
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	603b      	str	r3, [r7, #0]
    int ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010ac6:	4b21      	ldr	r3, [pc, #132]	@ (8010b4c <mbedtls_ecp_mul_restartable+0x94>)
 8010ac8:	617b      	str	r3, [r7, #20]
    {
        /* check_privkey is free */
        MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_CHK );

        /* Common sanity checks */
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_privkey( grp, m ) );
 8010aca:	6879      	ldr	r1, [r7, #4]
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f000 fa59 	bl	8010f84 <mbedtls_ecp_check_privkey>
 8010ad2:	6178      	str	r0, [r7, #20]
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d133      	bne.n	8010b42 <mbedtls_ecp_mul_restartable+0x8a>
        MBEDTLS_MPI_CHK( mbedtls_ecp_check_pubkey( grp, P ) );
 8010ada:	6839      	ldr	r1, [r7, #0]
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f000 fa1f 	bl	8010f20 <mbedtls_ecp_check_pubkey>
 8010ae2:	6178      	str	r0, [r7, #20]
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d12b      	bne.n	8010b42 <mbedtls_ecp_mul_restartable+0x8a>
    }

    ret = MBEDTLS_ERR_ECP_BAD_INPUT_DATA;
 8010aea:	4b18      	ldr	r3, [pc, #96]	@ (8010b4c <mbedtls_ecp_mul_restartable+0x94>)
 8010aec:	617b      	str	r3, [r7, #20]
#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 8010aee:	68f8      	ldr	r0, [r7, #12]
 8010af0:	f7fd fa36 	bl	800df60 <ecp_get_type>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b02      	cmp	r3, #2
 8010af8:	d10d      	bne.n	8010b16 <mbedtls_ecp_mul_restartable+0x5e>
        MBEDTLS_MPI_CHK( ecp_mul_mxz( grp, R, m, P, f_rng, p_rng ) );
 8010afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010afc:	9301      	str	r3, [sp, #4]
 8010afe:	6a3b      	ldr	r3, [r7, #32]
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	68b9      	ldr	r1, [r7, #8]
 8010b08:	68f8      	ldr	r0, [r7, #12]
 8010b0a:	f7ff fefd 	bl	8010908 <ecp_mul_mxz>
 8010b0e:	6178      	str	r0, [r7, #20]
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d115      	bne.n	8010b42 <mbedtls_ecp_mul_restartable+0x8a>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f7fd fa22 	bl	800df60 <ecp_get_type>
 8010b1c:	4603      	mov	r3, r0
 8010b1e:	2b01      	cmp	r3, #1
 8010b20:	d10e      	bne.n	8010b40 <mbedtls_ecp_mul_restartable+0x88>
        MBEDTLS_MPI_CHK( ecp_mul_comb( grp, R, m, P, f_rng, p_rng, rs_ctx ) );
 8010b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b24:	9302      	str	r3, [sp, #8]
 8010b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b28:	9301      	str	r3, [sp, #4]
 8010b2a:	6a3b      	ldr	r3, [r7, #32]
 8010b2c:	9300      	str	r3, [sp, #0]
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	68b9      	ldr	r1, [r7, #8]
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f7ff fa79 	bl	801002c <ecp_mul_comb>
 8010b3a:	6178      	str	r0, [r7, #20]
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	2b00      	cmp	r3, #0
#endif

cleanup:
 8010b40:	bf00      	nop
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL )
        rs_ctx->depth--;
#endif

    return( ret );
 8010b42:	697b      	ldr	r3, [r7, #20]
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3718      	adds	r7, #24
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}
 8010b4c:	ffffb080 	.word	0xffffb080

08010b50 <ecp_check_pubkey_sw>:
/*
 * Check that an affine point is valid as a public key,
 * short weierstrass curves (SEC1 3.2.3.1)
 */
static int ecp_check_pubkey_sw( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b08a      	sub	sp, #40	@ 0x28
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
    int ret;
    mbedtls_mpi YY, RHS;

    /* pt coordinates must be normalized for our checks */
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	2100      	movs	r1, #0
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fa fad5 	bl	800b10e <mbedtls_mpi_cmp_int>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	db1e      	blt.n	8010ba8 <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	330c      	adds	r3, #12
 8010b6e:	2100      	movs	r1, #0
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7fa facc 	bl	800b10e <mbedtls_mpi_cmp_int>
 8010b76:	4603      	mov	r3, r0
    if( mbedtls_mpi_cmp_int( &pt->X, 0 ) < 0 ||
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	db15      	blt.n	8010ba8 <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	3304      	adds	r3, #4
 8010b82:	4619      	mov	r1, r3
 8010b84:	4610      	mov	r0, r2
 8010b86:	f7fa fa27 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 8010b8a:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_int( &pt->Y, 0 ) < 0 ||
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	da0b      	bge.n	8010ba8 <ecp_check_pubkey_sw+0x58>
        mbedtls_mpi_cmp_mpi( &pt->Y, &grp->P ) >= 0 )
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	f103 020c 	add.w	r2, r3, #12
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	3304      	adds	r3, #4
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	4610      	mov	r0, r2
 8010b9e:	f7fa fa1b 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 8010ba2:	4603      	mov	r3, r0
        mbedtls_mpi_cmp_mpi( &pt->X, &grp->P ) >= 0 ||
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	db01      	blt.n	8010bac <ecp_check_pubkey_sw+0x5c>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010ba8:	4b7d      	ldr	r3, [pc, #500]	@ (8010da0 <ecp_check_pubkey_sw+0x250>)
 8010baa:	e0f5      	b.n	8010d98 <ecp_check_pubkey_sw+0x248>

    mbedtls_mpi_init( &YY ); mbedtls_mpi_init( &RHS );
 8010bac:	f107 0318 	add.w	r3, r7, #24
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	f7f9 fb30 	bl	800a216 <mbedtls_mpi_init>
 8010bb6:	f107 030c 	add.w	r3, r7, #12
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7f9 fb2b 	bl	800a216 <mbedtls_mpi_init>

    /*
     * YY = Y^2
     * RHS = X (X^2 + A) + B = X^3 + A X + B
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &YY,  &pt->Y,   &pt->Y  ) );  MOD_MUL( YY  );
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	f103 010c 	add.w	r1, r3, #12
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	f103 020c 	add.w	r2, r3, #12
 8010bcc:	f107 0318 	add.w	r3, r7, #24
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fc f8a0 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 8010bd6:	6278      	str	r0, [r7, #36]	@ 0x24
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f040 80d1 	bne.w	8010d82 <ecp_check_pubkey_sw+0x232>
 8010be0:	f107 0318 	add.w	r3, r7, #24
 8010be4:	6879      	ldr	r1, [r7, #4]
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fd fb24 	bl	800e234 <ecp_modp>
 8010bec:	6278      	str	r0, [r7, #36]	@ 0x24
 8010bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f040 80c6 	bne.w	8010d82 <ecp_check_pubkey_sw+0x232>
 8010bf6:	4b6b      	ldr	r3, [pc, #428]	@ (8010da4 <ecp_check_pubkey_sw+0x254>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	4a69      	ldr	r2, [pc, #420]	@ (8010da4 <ecp_check_pubkey_sw+0x254>)
 8010bfe:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &pt->X,   &pt->X  ) );  MOD_MUL( RHS );
 8010c00:	6839      	ldr	r1, [r7, #0]
 8010c02:	683a      	ldr	r2, [r7, #0]
 8010c04:	f107 030c 	add.w	r3, r7, #12
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fc f884 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 8010c0e:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f040 80b5 	bne.w	8010d82 <ecp_check_pubkey_sw+0x232>
 8010c18:	f107 030c 	add.w	r3, r7, #12
 8010c1c:	6879      	ldr	r1, [r7, #4]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fd fb08 	bl	800e234 <ecp_modp>
 8010c24:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f040 80aa 	bne.w	8010d82 <ecp_check_pubkey_sw+0x232>
 8010c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8010da4 <ecp_check_pubkey_sw+0x254>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	3301      	adds	r3, #1
 8010c34:	4a5b      	ldr	r2, [pc, #364]	@ (8010da4 <ecp_check_pubkey_sw+0x254>)
 8010c36:	6013      	str	r3, [r2, #0]

    /* Special case for A = -3 */
    if( grp->A.p == NULL )
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	699b      	ldr	r3, [r3, #24]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d128      	bne.n	8010c92 <ecp_check_pubkey_sw+0x142>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &RHS, &RHS, 3       ) );  MOD_SUB( RHS );
 8010c40:	f107 010c 	add.w	r1, r7, #12
 8010c44:	f107 030c 	add.w	r3, r7, #12
 8010c48:	2203      	movs	r2, #3
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fa fc96 	bl	800b57c <mbedtls_mpi_sub_int>
 8010c50:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	f040 8094 	bne.w	8010d82 <ecp_check_pubkey_sw+0x232>
 8010c5a:	e00d      	b.n	8010c78 <ecp_check_pubkey_sw+0x128>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	1d1a      	adds	r2, r3, #4
 8010c60:	f107 010c 	add.w	r1, r7, #12
 8010c64:	f107 030c 	add.w	r3, r7, #12
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7fa fbdb 	bl	800b424 <mbedtls_mpi_add_mpi>
 8010c6e:	6278      	str	r0, [r7, #36]	@ 0x24
 8010c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f040 8085 	bne.w	8010d82 <ecp_check_pubkey_sw+0x232>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	da30      	bge.n	8010ce0 <ecp_check_pubkey_sw+0x190>
 8010c7e:	f107 030c 	add.w	r3, r7, #12
 8010c82:	2100      	movs	r1, #0
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7fa fa42 	bl	800b10e <mbedtls_mpi_cmp_int>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d1e5      	bne.n	8010c5c <ecp_check_pubkey_sw+0x10c>
 8010c90:	e026      	b.n	8010ce0 <ecp_check_pubkey_sw+0x190>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS, &grp->A ) );  MOD_ADD( RHS );
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f103 0210 	add.w	r2, r3, #16
 8010c98:	f107 010c 	add.w	r1, r7, #12
 8010c9c:	f107 030c 	add.w	r3, r7, #12
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fa fbbf 	bl	800b424 <mbedtls_mpi_add_mpi>
 8010ca6:	6278      	str	r0, [r7, #36]	@ 0x24
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d169      	bne.n	8010d82 <ecp_check_pubkey_sw+0x232>
 8010cae:	e00c      	b.n	8010cca <ecp_check_pubkey_sw+0x17a>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	1d1a      	adds	r2, r3, #4
 8010cb4:	f107 010c 	add.w	r1, r7, #12
 8010cb8:	f107 030c 	add.w	r3, r7, #12
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fa fb51 	bl	800b364 <mbedtls_mpi_sub_abs>
 8010cc2:	6278      	str	r0, [r7, #36]	@ 0x24
 8010cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d15b      	bne.n	8010d82 <ecp_check_pubkey_sw+0x232>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	1d1a      	adds	r2, r3, #4
 8010cce:	f107 030c 	add.w	r3, r7, #12
 8010cd2:	4611      	mov	r1, r2
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7fa f97f 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	dae7      	bge.n	8010cb0 <ecp_check_pubkey_sw+0x160>
    }

    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &RHS, &RHS,     &pt->X  ) );  MOD_MUL( RHS );
 8010ce0:	683a      	ldr	r2, [r7, #0]
 8010ce2:	f107 010c 	add.w	r1, r7, #12
 8010ce6:	f107 030c 	add.w	r3, r7, #12
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fc f813 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 8010cf0:	6278      	str	r0, [r7, #36]	@ 0x24
 8010cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d144      	bne.n	8010d82 <ecp_check_pubkey_sw+0x232>
 8010cf8:	f107 030c 	add.w	r3, r7, #12
 8010cfc:	6879      	ldr	r1, [r7, #4]
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7fd fa98 	bl	800e234 <ecp_modp>
 8010d04:	6278      	str	r0, [r7, #36]	@ 0x24
 8010d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d13a      	bne.n	8010d82 <ecp_check_pubkey_sw+0x232>
 8010d0c:	4b25      	ldr	r3, [pc, #148]	@ (8010da4 <ecp_check_pubkey_sw+0x254>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	3301      	adds	r3, #1
 8010d12:	4a24      	ldr	r2, [pc, #144]	@ (8010da4 <ecp_check_pubkey_sw+0x254>)
 8010d14:	6013      	str	r3, [r2, #0]
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &RHS, &RHS,     &grp->B ) );  MOD_ADD( RHS );
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f103 021c 	add.w	r2, r3, #28
 8010d1c:	f107 010c 	add.w	r1, r7, #12
 8010d20:	f107 030c 	add.w	r3, r7, #12
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fa fb7d 	bl	800b424 <mbedtls_mpi_add_mpi>
 8010d2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d127      	bne.n	8010d82 <ecp_check_pubkey_sw+0x232>
 8010d32:	e00c      	b.n	8010d4e <ecp_check_pubkey_sw+0x1fe>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	1d1a      	adds	r2, r3, #4
 8010d38:	f107 010c 	add.w	r1, r7, #12
 8010d3c:	f107 030c 	add.w	r3, r7, #12
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7fa fb0f 	bl	800b364 <mbedtls_mpi_sub_abs>
 8010d46:	6278      	str	r0, [r7, #36]	@ 0x24
 8010d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d119      	bne.n	8010d82 <ecp_check_pubkey_sw+0x232>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	1d1a      	adds	r2, r3, #4
 8010d52:	f107 030c 	add.w	r3, r7, #12
 8010d56:	4611      	mov	r1, r2
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fa f93d 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	dae7      	bge.n	8010d34 <ecp_check_pubkey_sw+0x1e4>

    if( mbedtls_mpi_cmp_mpi( &YY, &RHS ) != 0 )
 8010d64:	f107 020c 	add.w	r2, r7, #12
 8010d68:	f107 0318 	add.w	r3, r7, #24
 8010d6c:	4611      	mov	r1, r2
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fa f932 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d002      	beq.n	8010d80 <ecp_check_pubkey_sw+0x230>
        ret = MBEDTLS_ERR_ECP_INVALID_KEY;
 8010d7a:	4b09      	ldr	r3, [pc, #36]	@ (8010da0 <ecp_check_pubkey_sw+0x250>)
 8010d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d7e:	e000      	b.n	8010d82 <ecp_check_pubkey_sw+0x232>

cleanup:
 8010d80:	bf00      	nop

    mbedtls_mpi_free( &YY ); mbedtls_mpi_free( &RHS );
 8010d82:	f107 0318 	add.w	r3, r7, #24
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7f9 fa58 	bl	800a23c <mbedtls_mpi_free>
 8010d8c:	f107 030c 	add.w	r3, r7, #12
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7f9 fa53 	bl	800a23c <mbedtls_mpi_free>

    return( ret );
 8010d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3728      	adds	r7, #40	@ 0x28
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	ffffb380 	.word	0xffffb380
 8010da4:	2400257c 	.word	0x2400257c

08010da8 <mbedtls_ecp_mul_shortcuts>:
static int mbedtls_ecp_mul_shortcuts( mbedtls_ecp_group *grp,
                                      mbedtls_ecp_point *R,
                                      const mbedtls_mpi *m,
                                      const mbedtls_ecp_point *P,
                                      mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b08a      	sub	sp, #40	@ 0x28
 8010dac:	af04      	add	r7, sp, #16
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	60b9      	str	r1, [r7, #8]
 8010db2:	607a      	str	r2, [r7, #4]
 8010db4:	603b      	str	r3, [r7, #0]
    int ret;

    if( mbedtls_mpi_cmp_int( m, 1 ) == 0 )
 8010db6:	2101      	movs	r1, #1
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f7fa f9a8 	bl	800b10e <mbedtls_mpi_cmp_int>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d107      	bne.n	8010dd4 <mbedtls_ecp_mul_shortcuts+0x2c>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8010dc4:	6839      	ldr	r1, [r7, #0]
 8010dc6:	68b8      	ldr	r0, [r7, #8]
 8010dc8:	f7fd f9cc 	bl	800e164 <mbedtls_ecp_copy>
 8010dcc:	6178      	str	r0, [r7, #20]
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	e036      	b.n	8010e42 <mbedtls_ecp_mul_shortcuts+0x9a>
    }
    else if( mbedtls_mpi_cmp_int( m, -1 ) == 0 )
 8010dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f7fa f998 	bl	800b10e <mbedtls_mpi_cmp_int>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d11e      	bne.n	8010e22 <mbedtls_ecp_mul_shortcuts+0x7a>
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, P ) );
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	68b8      	ldr	r0, [r7, #8]
 8010de8:	f7fd f9bc 	bl	800e164 <mbedtls_ecp_copy>
 8010dec:	6178      	str	r0, [r7, #20]
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d126      	bne.n	8010e42 <mbedtls_ecp_mul_shortcuts+0x9a>
        if( mbedtls_mpi_cmp_int( &R->Y, 0 ) != 0 )
 8010df4:	68bb      	ldr	r3, [r7, #8]
 8010df6:	330c      	adds	r3, #12
 8010df8:	2100      	movs	r1, #0
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fa f987 	bl	800b10e <mbedtls_mpi_cmp_int>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d01d      	beq.n	8010e42 <mbedtls_ecp_mul_shortcuts+0x9a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &R->Y, &grp->P, &R->Y ) );
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	f103 000c 	add.w	r0, r3, #12
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	1d19      	adds	r1, r3, #4
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	330c      	adds	r3, #12
 8010e14:	461a      	mov	r2, r3
 8010e16:	f7fa fb49 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 8010e1a:	6178      	str	r0, [r7, #20]
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	e00f      	b.n	8010e42 <mbedtls_ecp_mul_shortcuts+0x9a>
    }
    else
    {
        MBEDTLS_MPI_CHK( mbedtls_ecp_mul_restartable( grp, R, m, P,
 8010e22:	6a3b      	ldr	r3, [r7, #32]
 8010e24:	9302      	str	r3, [sp, #8]
 8010e26:	2300      	movs	r3, #0
 8010e28:	9301      	str	r3, [sp, #4]
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	9300      	str	r3, [sp, #0]
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	68b9      	ldr	r1, [r7, #8]
 8010e34:	68f8      	ldr	r0, [r7, #12]
 8010e36:	f7ff fe3f 	bl	8010ab8 <mbedtls_ecp_mul_restartable>
 8010e3a:	6178      	str	r0, [r7, #20]
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	2b00      	cmp	r3, #0
                                                      NULL, NULL, rs_ctx ) );
    }

cleanup:
 8010e40:	bf00      	nop
    return( ret );
 8010e42:	697b      	ldr	r3, [r7, #20]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3718      	adds	r7, #24
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <mbedtls_ecp_muladd_restartable>:
int mbedtls_ecp_muladd_restartable(
             mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
             const mbedtls_mpi *m, const mbedtls_ecp_point *P,
             const mbedtls_mpi *n, const mbedtls_ecp_point *Q,
             mbedtls_ecp_restart_ctx *rs_ctx )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b092      	sub	sp, #72	@ 0x48
 8010e50:	af02      	add	r7, sp, #8
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
 8010e58:	603b      	str	r3, [r7, #0]
    int ret;
    mbedtls_ecp_point mP;
    mbedtls_ecp_point *pmP = &mP;
 8010e5a:	f107 0310 	add.w	r3, r7, #16
 8010e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
    mbedtls_ecp_point *pR = R;
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	637b      	str	r3, [r7, #52]	@ 0x34
    ECP_VALIDATE_RET( m   != NULL );
    ECP_VALIDATE_RET( P   != NULL );
    ECP_VALIDATE_RET( n   != NULL );
    ECP_VALIDATE_RET( Q   != NULL );

    if( ecp_get_type( grp ) != ECP_TYPE_SHORT_WEIERSTRASS )
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f7fd f87b 	bl	800df60 <ecp_get_type>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d001      	beq.n	8010e74 <mbedtls_ecp_muladd_restartable+0x28>
        return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8010e70:	4b1d      	ldr	r3, [pc, #116]	@ (8010ee8 <mbedtls_ecp_muladd_restartable+0x9c>)
 8010e72:	e034      	b.n	8010ede <mbedtls_ecp_muladd_restartable+0x92>

    mbedtls_ecp_point_init( &mP );
 8010e74:	f107 0310 	add.w	r3, r7, #16
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7fd f888 	bl	800df8e <mbedtls_ecp_point_init>
        if( rs_ctx->ma->state == ecp_rsma_norm )
            goto norm;
    }
#endif /* MBEDTLS_ECP_RESTARTABLE */

    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pmP, m, P, rs_ctx ) );
 8010e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e80:	9300      	str	r3, [sp, #0]
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	687a      	ldr	r2, [r7, #4]
 8010e86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010e88:	68f8      	ldr	r0, [r7, #12]
 8010e8a:	f7ff ff8d 	bl	8010da8 <mbedtls_ecp_mul_shortcuts>
 8010e8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d11d      	bne.n	8010ed2 <mbedtls_ecp_muladd_restartable+0x86>
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        rs_ctx->ma->state = ecp_rsma_mul2;

mul2:
#endif
    MBEDTLS_MPI_CHK( mbedtls_ecp_mul_shortcuts( grp, pR,  n, Q, rs_ctx ) );
 8010e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010ea0:	68f8      	ldr	r0, [r7, #12]
 8010ea2:	f7ff ff81 	bl	8010da8 <mbedtls_ecp_mul_shortcuts>
 8010ea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d111      	bne.n	8010ed2 <mbedtls_ecp_muladd_restartable+0x86>
        rs_ctx->ma->state = ecp_rsma_add;

add:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_ADD );
    MBEDTLS_MPI_CHK( ecp_add_mixed( grp, pR, pmP, pR ) );
 8010eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010eb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010eb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010eb4:	68f8      	ldr	r0, [r7, #12]
 8010eb6:	f7fe f8e7 	bl	800f088 <ecp_add_mixed>
 8010eba:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d107      	bne.n	8010ed2 <mbedtls_ecp_muladd_restartable+0x86>
        rs_ctx->ma->state = ecp_rsma_norm;

norm:
#endif
    MBEDTLS_ECP_BUDGET( MBEDTLS_ECP_OPS_INV );
    MBEDTLS_MPI_CHK( ecp_normalize_jac( grp, pR ) );
 8010ec2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	f7fd fa19 	bl	800e2fc <ecp_normalize_jac>
 8010eca:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8010ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ece:	2b00      	cmp	r3, #0
#if defined(MBEDTLS_ECP_RESTARTABLE)
    if( rs_ctx != NULL && rs_ctx->ma != NULL )
        MBEDTLS_MPI_CHK( mbedtls_ecp_copy( R, pR ) );
#endif

cleanup:
 8010ed0:	bf00      	nop
#if defined(MBEDTLS_ECP_INTERNAL_ALT)
    if( is_grp_capable )
        mbedtls_internal_ecp_free( grp );
#endif /* MBEDTLS_ECP_INTERNAL_ALT */

    mbedtls_ecp_point_free( &mP );
 8010ed2:	f107 0310 	add.w	r3, r7, #16
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fd f8c4 	bl	800e064 <mbedtls_ecp_point_free>

    ECP_RS_LEAVE( ma );

    return( ret );
 8010edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3740      	adds	r7, #64	@ 0x40
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	ffffb180 	.word	0xffffb180

08010eec <ecp_check_pubkey_mx>:
#if defined(ECP_MONTGOMERY)
/*
 * Check validity of a public key for Montgomery curves with x-only schemes
 */
static int ecp_check_pubkey_mx( const mbedtls_ecp_group *grp, const mbedtls_ecp_point *pt )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b082      	sub	sp, #8
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
    /* [Curve25519 p. 5] Just check X is the correct number of bytes */
    /* Allow any public value, if it's too big then we'll just reduce it mod p
     * (RFC 7748 sec. 5 para. 3). */
    if( mbedtls_mpi_size( &pt->X ) > ( grp->nbits + 7 ) / 8 )
 8010ef6:	683b      	ldr	r3, [r7, #0]
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7f9 fcf7 	bl	800a8ec <mbedtls_mpi_size>
 8010efe:	4602      	mov	r2, r0
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010f04:	3307      	adds	r3, #7
 8010f06:	08db      	lsrs	r3, r3, #3
 8010f08:	429a      	cmp	r2, r3
 8010f0a:	d901      	bls.n	8010f10 <ecp_check_pubkey_mx+0x24>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010f0c:	4b03      	ldr	r3, [pc, #12]	@ (8010f1c <ecp_check_pubkey_mx+0x30>)
 8010f0e:	e000      	b.n	8010f12 <ecp_check_pubkey_mx+0x26>

    return( 0 );
 8010f10:	2300      	movs	r3, #0
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3708      	adds	r7, #8
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	ffffb380 	.word	0xffffb380

08010f20 <mbedtls_ecp_check_pubkey>:
/*
 * Check that a point is valid as a public key
 */
int mbedtls_ecp_check_pubkey( const mbedtls_ecp_group *grp,
                              const mbedtls_ecp_point *pt )
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( pt  != NULL );

    /* Must use affine coordinates */
    if( mbedtls_mpi_cmp_int( &pt->Z, 1 ) != 0 )
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	3318      	adds	r3, #24
 8010f2e:	2101      	movs	r1, #1
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7fa f8ec 	bl	800b10e <mbedtls_mpi_cmp_int>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d001      	beq.n	8010f40 <mbedtls_ecp_check_pubkey+0x20>
        return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8010f7c <mbedtls_ecp_check_pubkey+0x5c>)
 8010f3e:	e018      	b.n	8010f72 <mbedtls_ecp_check_pubkey+0x52>

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f7fd f80d 	bl	800df60 <ecp_get_type>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b02      	cmp	r3, #2
 8010f4a:	d105      	bne.n	8010f58 <mbedtls_ecp_check_pubkey+0x38>
        return( ecp_check_pubkey_mx( grp, pt ) );
 8010f4c:	6839      	ldr	r1, [r7, #0]
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f7ff ffcc 	bl	8010eec <ecp_check_pubkey_mx>
 8010f54:	4603      	mov	r3, r0
 8010f56:	e00c      	b.n	8010f72 <mbedtls_ecp_check_pubkey+0x52>
#endif
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f7fd f801 	bl	800df60 <ecp_get_type>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d105      	bne.n	8010f70 <mbedtls_ecp_check_pubkey+0x50>
        return( ecp_check_pubkey_sw( grp, pt ) );
 8010f64:	6839      	ldr	r1, [r7, #0]
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f7ff fdf2 	bl	8010b50 <ecp_check_pubkey_sw>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	e000      	b.n	8010f72 <mbedtls_ecp_check_pubkey+0x52>
#endif
    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8010f70:	4b03      	ldr	r3, [pc, #12]	@ (8010f80 <mbedtls_ecp_check_pubkey+0x60>)
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3708      	adds	r7, #8
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	ffffb380 	.word	0xffffb380
 8010f80:	ffffb080 	.word	0xffffb080

08010f84 <mbedtls_ecp_check_privkey>:
/*
 * Check that an mbedtls_mpi is valid as a private key
 */
int mbedtls_ecp_check_privkey( const mbedtls_ecp_group *grp,
                               const mbedtls_mpi *d )
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	b082      	sub	sp, #8
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]
    ECP_VALIDATE_RET( grp != NULL );
    ECP_VALIDATE_RET( d   != NULL );

#if defined(ECP_MONTGOMERY)
    if( ecp_get_type( grp ) == ECP_TYPE_MONTGOMERY )
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7fc ffe6 	bl	800df60 <ecp_get_type>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b02      	cmp	r3, #2
 8010f98:	d127      	bne.n	8010fea <mbedtls_ecp_check_privkey+0x66>
    {
        /* see RFC 7748 sec. 5 para. 5 */
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 8010f9a:	2100      	movs	r1, #0
 8010f9c:	6838      	ldr	r0, [r7, #0]
 8010f9e:	f7f9 fba7 	bl	800a6f0 <mbedtls_mpi_get_bit>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d10f      	bne.n	8010fc8 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 8010fa8:	2101      	movs	r1, #1
 8010faa:	6838      	ldr	r0, [r7, #0]
 8010fac:	f7f9 fba0 	bl	800a6f0 <mbedtls_mpi_get_bit>
 8010fb0:	4603      	mov	r3, r0
        if( mbedtls_mpi_get_bit( d, 0 ) != 0 ||
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d108      	bne.n	8010fc8 <mbedtls_ecp_check_privkey+0x44>
            mbedtls_mpi_bitlen( d ) - 1 != grp->nbits ) /* mbedtls_mpi_bitlen is one-based! */
 8010fb6:	6838      	ldr	r0, [r7, #0]
 8010fb8:	f7f9 fc64 	bl	800a884 <mbedtls_mpi_bitlen>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	1e5a      	subs	r2, r3, #1
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
            mbedtls_mpi_get_bit( d, 1 ) != 0 ||
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d001      	beq.n	8010fcc <mbedtls_ecp_check_privkey+0x48>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010fc8:	4b17      	ldr	r3, [pc, #92]	@ (8011028 <mbedtls_ecp_check_privkey+0xa4>)
 8010fca:	e029      	b.n	8011020 <mbedtls_ecp_check_privkey+0x9c>

        /* see [Curve25519] page 5 */
        if( grp->nbits == 254 && mbedtls_mpi_get_bit( d, 2 ) != 0 )
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010fd0:	2bfe      	cmp	r3, #254	@ 0xfe
 8010fd2:	d108      	bne.n	8010fe6 <mbedtls_ecp_check_privkey+0x62>
 8010fd4:	2102      	movs	r1, #2
 8010fd6:	6838      	ldr	r0, [r7, #0]
 8010fd8:	f7f9 fb8a 	bl	800a6f0 <mbedtls_mpi_get_bit>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d001      	beq.n	8010fe6 <mbedtls_ecp_check_privkey+0x62>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8010fe2:	4b11      	ldr	r3, [pc, #68]	@ (8011028 <mbedtls_ecp_check_privkey+0xa4>)
 8010fe4:	e01c      	b.n	8011020 <mbedtls_ecp_check_privkey+0x9c>

        return( 0 );
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	e01a      	b.n	8011020 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_MONTGOMERY */
#if defined(ECP_SHORTWEIERSTRASS)
    if( ecp_get_type( grp ) == ECP_TYPE_SHORT_WEIERSTRASS )
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	f7fc ffb8 	bl	800df60 <ecp_get_type>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b01      	cmp	r3, #1
 8010ff4:	d113      	bne.n	801101e <mbedtls_ecp_check_privkey+0x9a>
    {
        /* see SEC1 3.2 */
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8010ff6:	2101      	movs	r1, #1
 8010ff8:	6838      	ldr	r0, [r7, #0]
 8010ffa:	f7fa f888 	bl	800b10e <mbedtls_mpi_cmp_int>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	db08      	blt.n	8011016 <mbedtls_ecp_check_privkey+0x92>
            mbedtls_mpi_cmp_mpi( d, &grp->N ) >= 0 )
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	334c      	adds	r3, #76	@ 0x4c
 8011008:	4619      	mov	r1, r3
 801100a:	6838      	ldr	r0, [r7, #0]
 801100c:	f7f9 ffe4 	bl	800afd8 <mbedtls_mpi_cmp_mpi>
 8011010:	4603      	mov	r3, r0
        if( mbedtls_mpi_cmp_int( d, 1 ) < 0 ||
 8011012:	2b00      	cmp	r3, #0
 8011014:	db01      	blt.n	801101a <mbedtls_ecp_check_privkey+0x96>
            return( MBEDTLS_ERR_ECP_INVALID_KEY );
 8011016:	4b04      	ldr	r3, [pc, #16]	@ (8011028 <mbedtls_ecp_check_privkey+0xa4>)
 8011018:	e002      	b.n	8011020 <mbedtls_ecp_check_privkey+0x9c>
        else
            return( 0 );
 801101a:	2300      	movs	r3, #0
 801101c:	e000      	b.n	8011020 <mbedtls_ecp_check_privkey+0x9c>
    }
#endif /* ECP_SHORTWEIERSTRASS */

    return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801101e:	4b03      	ldr	r3, [pc, #12]	@ (801102c <mbedtls_ecp_check_privkey+0xa8>)
}
 8011020:	4618      	mov	r0, r3
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}
 8011028:	ffffb380 	.word	0xffffb380
 801102c:	ffffb080 	.word	0xffffb080

08011030 <ecp_mpi_load>:
/*
 * Create an MPI from embedded constants
 * (assumes len is an exact multiple of sizeof mbedtls_mpi_uint)
 */
static inline void ecp_mpi_load( mbedtls_mpi *X, const mbedtls_mpi_uint *p, size_t len )
{
 8011030:	b480      	push	{r7}
 8011032:	b085      	sub	sp, #20
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
    X->s = 1;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2201      	movs	r2, #1
 8011040:	601a      	str	r2, [r3, #0]
    X->n = len / sizeof( mbedtls_mpi_uint );
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	089a      	lsrs	r2, r3, #2
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	605a      	str	r2, [r3, #4]
    X->p = (mbedtls_mpi_uint *) p;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	68ba      	ldr	r2, [r7, #8]
 801104e:	609a      	str	r2, [r3, #8]
}
 8011050:	bf00      	nop
 8011052:	3714      	adds	r7, #20
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr

0801105c <ecp_mpi_set1>:

/*
 * Set an MPI to static value 1
 */
static inline void ecp_mpi_set1( mbedtls_mpi *X )
{
 801105c:	b480      	push	{r7}
 801105e:	b083      	sub	sp, #12
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint one[] = { 1 };
    X->s = 1;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2201      	movs	r2, #1
 8011068:	601a      	str	r2, [r3, #0]
    X->n = 1;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2201      	movs	r2, #1
 801106e:	605a      	str	r2, [r3, #4]
    X->p = one;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	4a04      	ldr	r2, [pc, #16]	@ (8011084 <ecp_mpi_set1+0x28>)
 8011074:	609a      	str	r2, [r3, #8]
}
 8011076:	bf00      	nop
 8011078:	370c      	adds	r7, #12
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	24000030 	.word	0x24000030

08011088 <ecp_group_load>:
                           const mbedtls_mpi_uint *a,  size_t alen,
                           const mbedtls_mpi_uint *b,  size_t blen,
                           const mbedtls_mpi_uint *gx, size_t gxlen,
                           const mbedtls_mpi_uint *gy, size_t gylen,
                           const mbedtls_mpi_uint *n,  size_t nlen)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b084      	sub	sp, #16
 801108c:	af00      	add	r7, sp, #0
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	607a      	str	r2, [r7, #4]
 8011094:	603b      	str	r3, [r7, #0]
    ecp_mpi_load( &grp->P, p, plen );
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	3304      	adds	r3, #4
 801109a:	687a      	ldr	r2, [r7, #4]
 801109c:	68b9      	ldr	r1, [r7, #8]
 801109e:	4618      	mov	r0, r3
 80110a0:	f7ff ffc6 	bl	8011030 <ecp_mpi_load>
    if( a != NULL )
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d006      	beq.n	80110b8 <ecp_group_load+0x30>
        ecp_mpi_load( &grp->A, a, alen );
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	3310      	adds	r3, #16
 80110ae:	69ba      	ldr	r2, [r7, #24]
 80110b0:	6839      	ldr	r1, [r7, #0]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7ff ffbc 	bl	8011030 <ecp_mpi_load>
    ecp_mpi_load( &grp->B, b, blen );
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	331c      	adds	r3, #28
 80110bc:	6a3a      	ldr	r2, [r7, #32]
 80110be:	69f9      	ldr	r1, [r7, #28]
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7ff ffb5 	bl	8011030 <ecp_mpi_load>
    ecp_mpi_load( &grp->N, n, nlen );
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	334c      	adds	r3, #76	@ 0x4c
 80110ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80110cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7ff ffae 	bl	8011030 <ecp_mpi_load>

    ecp_mpi_load( &grp->G.X, gx, gxlen );
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	3328      	adds	r3, #40	@ 0x28
 80110d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80110dc:	4618      	mov	r0, r3
 80110de:	f7ff ffa7 	bl	8011030 <ecp_mpi_load>
    ecp_mpi_load( &grp->G.Y, gy, gylen );
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	3334      	adds	r3, #52	@ 0x34
 80110e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80110e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7ff ffa0 	bl	8011030 <ecp_mpi_load>
    ecp_mpi_set1( &grp->G.Z );
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	3340      	adds	r3, #64	@ 0x40
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7ff ffb1 	bl	801105c <ecp_mpi_set1>

    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3304      	adds	r3, #4
 80110fe:	4618      	mov	r0, r3
 8011100:	f7f9 fbc0 	bl	800a884 <mbedtls_mpi_bitlen>
 8011104:	4602      	mov	r2, r0
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	659a      	str	r2, [r3, #88]	@ 0x58
    grp->nbits = mbedtls_mpi_bitlen( &grp->N );
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	334c      	adds	r3, #76	@ 0x4c
 801110e:	4618      	mov	r0, r3
 8011110:	f7f9 fbb8 	bl	800a884 <mbedtls_mpi_bitlen>
 8011114:	4602      	mov	r2, r0
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	65da      	str	r2, [r3, #92]	@ 0x5c

    grp->h = 1;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2201      	movs	r2, #1
 801111e:	661a      	str	r2, [r3, #96]	@ 0x60

    return( 0 );
 8011120:	2300      	movs	r3, #0
}
 8011122:	4618      	mov	r0, r3
 8011124:	3710      	adds	r7, #16
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
	...

0801112c <ecp_use_curve25519>:
#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
/*
 * Specialized function for creating the Curve25519 group
 */
static int ecp_use_curve25519( mbedtls_ecp_group *grp )
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b084      	sub	sp, #16
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
    int ret;

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "01DB42" ) );
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	3310      	adds	r3, #16
 8011138:	4a36      	ldr	r2, [pc, #216]	@ (8011214 <ecp_use_curve25519+0xe8>)
 801113a:	2110      	movs	r1, #16
 801113c:	4618      	mov	r0, r3
 801113e:	f7f9 fc1d 	bl	800a97c <mbedtls_mpi_read_string>
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d159      	bne.n	80111fe <ecp_use_curve25519+0xd2>

    /* P = 2^255 - 19 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	3304      	adds	r3, #4
 801114e:	2101      	movs	r1, #1
 8011150:	4618      	mov	r0, r3
 8011152:	f7f9 faa1 	bl	800a698 <mbedtls_mpi_lset>
 8011156:	60f8      	str	r0, [r7, #12]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d14f      	bne.n	80111fe <ecp_use_curve25519+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 255 ) );
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	3304      	adds	r3, #4
 8011162:	21ff      	movs	r1, #255	@ 0xff
 8011164:	4618      	mov	r0, r3
 8011166:	f7f9 fd78 	bl	800ac5a <mbedtls_mpi_shift_l>
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d145      	bne.n	80111fe <ecp_use_curve25519+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 19 ) );
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	1d18      	adds	r0, r3, #4
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	3304      	adds	r3, #4
 801117a:	2213      	movs	r2, #19
 801117c:	4619      	mov	r1, r3
 801117e:	f7fa f9fd 	bl	800b57c <mbedtls_mpi_sub_int>
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d139      	bne.n	80111fe <ecp_use_curve25519+0xd2>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	3304      	adds	r3, #4
 801118e:	4618      	mov	r0, r3
 8011190:	f7f9 fb78 	bl	800a884 <mbedtls_mpi_bitlen>
 8011194:	4602      	mov	r2, r0
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	659a      	str	r2, [r3, #88]	@ 0x58

    /* N = 2^252 + 27742317777372353535851937790883648493 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->N, 16,
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	334c      	adds	r3, #76	@ 0x4c
 801119e:	4a1e      	ldr	r2, [pc, #120]	@ (8011218 <ecp_use_curve25519+0xec>)
 80111a0:	2110      	movs	r1, #16
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7f9 fbea 	bl	800a97c <mbedtls_mpi_read_string>
 80111a8:	60f8      	str	r0, [r7, #12]
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d126      	bne.n	80111fe <ecp_use_curve25519+0xd2>
                                              "14DEF9DEA2F79CD65812631A5CF5D3ED" ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 252, 1 ) );
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	334c      	adds	r3, #76	@ 0x4c
 80111b4:	2201      	movs	r2, #1
 80111b6:	21fc      	movs	r1, #252	@ 0xfc
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7f9 faba 	bl	800a732 <mbedtls_mpi_set_bit>
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d11b      	bne.n	80111fe <ecp_use_curve25519+0xd2>

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 9 ) );
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	3328      	adds	r3, #40	@ 0x28
 80111ca:	2109      	movs	r1, #9
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7f9 fa63 	bl	800a698 <mbedtls_mpi_lset>
 80111d2:	60f8      	str	r0, [r7, #12]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d111      	bne.n	80111fe <ecp_use_curve25519+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	3340      	adds	r3, #64	@ 0x40
 80111de:	2101      	movs	r1, #1
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7f9 fa59 	bl	800a698 <mbedtls_mpi_lset>
 80111e6:	60f8      	str	r0, [r7, #12]
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d107      	bne.n	80111fe <ecp_use_curve25519+0xd2>
    mbedtls_mpi_free( &grp->G.Y );
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	3334      	adds	r3, #52	@ 0x34
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7f9 f822 	bl	800a23c <mbedtls_mpi_free>

    /* Actually, the required msb for private keys */
    grp->nbits = 254;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	22fe      	movs	r2, #254	@ 0xfe
 80111fc:	65da      	str	r2, [r3, #92]	@ 0x5c

cleanup:
    if( ret != 0 )
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d002      	beq.n	801120a <ecp_use_curve25519+0xde>
        mbedtls_ecp_group_free( grp );
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7fc ff47 	bl	800e098 <mbedtls_ecp_group_free>

    return( ret );
 801120a:	68fb      	ldr	r3, [r7, #12]
}
 801120c:	4618      	mov	r0, r3
 801120e:	3710      	adds	r7, #16
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	080164d0 	.word	0x080164d0
 8011218:	080164d8 	.word	0x080164d8

0801121c <ecp_use_curve448>:
#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
/*
 * Specialized function for creating the Curve448 group
 */
static int ecp_use_curve448( mbedtls_ecp_group *grp )
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b086      	sub	sp, #24
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
    mbedtls_mpi Ns;
    int ret;

    mbedtls_mpi_init( &Ns );
 8011224:	f107 0308 	add.w	r3, r7, #8
 8011228:	4618      	mov	r0, r3
 801122a:	f7f8 fff4 	bl	800a216 <mbedtls_mpi_init>

    /* Actually ( A + 2 ) / 4 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &grp->A, 16, "98AA" ) );
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	3310      	adds	r3, #16
 8011232:	4a4c      	ldr	r2, [pc, #304]	@ (8011364 <ecp_use_curve448+0x148>)
 8011234:	2110      	movs	r1, #16
 8011236:	4618      	mov	r0, r3
 8011238:	f7f9 fba0 	bl	800a97c <mbedtls_mpi_read_string>
 801123c:	6178      	str	r0, [r7, #20]
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d17f      	bne.n	8011344 <ecp_use_curve448+0x128>

    /* P = 2^448 - 2^224 - 1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->P, 1 ) );
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	3304      	adds	r3, #4
 8011248:	2101      	movs	r1, #1
 801124a:	4618      	mov	r0, r3
 801124c:	f7f9 fa24 	bl	800a698 <mbedtls_mpi_lset>
 8011250:	6178      	str	r0, [r7, #20]
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d175      	bne.n	8011344 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	3304      	adds	r3, #4
 801125c:	21e0      	movs	r1, #224	@ 0xe0
 801125e:	4618      	mov	r0, r3
 8011260:	f7f9 fcfb 	bl	800ac5a <mbedtls_mpi_shift_l>
 8011264:	6178      	str	r0, [r7, #20]
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d16b      	bne.n	8011344 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	1d18      	adds	r0, r3, #4
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	3304      	adds	r3, #4
 8011274:	2201      	movs	r2, #1
 8011276:	4619      	mov	r1, r3
 8011278:	f7fa f980 	bl	800b57c <mbedtls_mpi_sub_int>
 801127c:	6178      	str	r0, [r7, #20]
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d15f      	bne.n	8011344 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &grp->P, 224 ) );
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	3304      	adds	r3, #4
 8011288:	21e0      	movs	r1, #224	@ 0xe0
 801128a:	4618      	mov	r0, r3
 801128c:	f7f9 fce5 	bl	800ac5a <mbedtls_mpi_shift_l>
 8011290:	6178      	str	r0, [r7, #20]
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d155      	bne.n	8011344 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_int( &grp->P, &grp->P, 1 ) );
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	1d18      	adds	r0, r3, #4
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	3304      	adds	r3, #4
 80112a0:	2201      	movs	r2, #1
 80112a2:	4619      	mov	r1, r3
 80112a4:	f7fa f96a 	bl	800b57c <mbedtls_mpi_sub_int>
 80112a8:	6178      	str	r0, [r7, #20]
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d149      	bne.n	8011344 <ecp_use_curve448+0x128>
    grp->pbits = mbedtls_mpi_bitlen( &grp->P );
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	3304      	adds	r3, #4
 80112b4:	4618      	mov	r0, r3
 80112b6:	f7f9 fae5 	bl	800a884 <mbedtls_mpi_bitlen>
 80112ba:	4602      	mov	r2, r0
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Y intentionally not set, since we use x/z coordinates.
     * This is used as a marker to identify Montgomery curves! */
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.X, 5 ) );
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	3328      	adds	r3, #40	@ 0x28
 80112c4:	2105      	movs	r1, #5
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7f9 f9e6 	bl	800a698 <mbedtls_mpi_lset>
 80112cc:	6178      	str	r0, [r7, #20]
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d137      	bne.n	8011344 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &grp->G.Z, 1 ) );
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	3340      	adds	r3, #64	@ 0x40
 80112d8:	2101      	movs	r1, #1
 80112da:	4618      	mov	r0, r3
 80112dc:	f7f9 f9dc 	bl	800a698 <mbedtls_mpi_lset>
 80112e0:	6178      	str	r0, [r7, #20]
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d12d      	bne.n	8011344 <ecp_use_curve448+0x128>
    mbedtls_mpi_free( &grp->G.Y );
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	3334      	adds	r3, #52	@ 0x34
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7f8 ffa5 	bl	800a23c <mbedtls_mpi_free>

    /* N = 2^446 - 13818066809895115352007386748515426880336692474882178609894547503885 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( &grp->N, 446, 1 ) );
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	334c      	adds	r3, #76	@ 0x4c
 80112f6:	2201      	movs	r2, #1
 80112f8:	f44f 71df 	mov.w	r1, #446	@ 0x1be
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f9 fa18 	bl	800a732 <mbedtls_mpi_set_bit>
 8011302:	6178      	str	r0, [r7, #20]
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d11c      	bne.n	8011344 <ecp_use_curve448+0x128>
    MBEDTLS_MPI_CHK( mbedtls_mpi_read_string( &Ns, 16,
 801130a:	f107 0308 	add.w	r3, r7, #8
 801130e:	4a16      	ldr	r2, [pc, #88]	@ (8011368 <ecp_use_curve448+0x14c>)
 8011310:	2110      	movs	r1, #16
 8011312:	4618      	mov	r0, r3
 8011314:	f7f9 fb32 	bl	800a97c <mbedtls_mpi_read_string>
 8011318:	6178      	str	r0, [r7, #20]
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d111      	bne.n	8011344 <ecp_use_curve448+0x128>
                                              "8335DC163BB124B65129C96FDE933D8D723A70AADC873D6D54A7BB0D" ) );
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &grp->N, &grp->N, &Ns ) );
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	334c      	adds	r3, #76	@ 0x4c
 801132a:	f107 0208 	add.w	r2, r7, #8
 801132e:	4619      	mov	r1, r3
 8011330:	f7fa f8bc 	bl	800b4ac <mbedtls_mpi_sub_mpi>
 8011334:	6178      	str	r0, [r7, #20]
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d103      	bne.n	8011344 <ecp_use_curve448+0x128>

    /* Actually, the required msb for private keys */
    grp->nbits = 447;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f240 12bf 	movw	r2, #447	@ 0x1bf
 8011342:	65da      	str	r2, [r3, #92]	@ 0x5c

cleanup:
    mbedtls_mpi_free( &Ns );
 8011344:	f107 0308 	add.w	r3, r7, #8
 8011348:	4618      	mov	r0, r3
 801134a:	f7f8 ff77 	bl	800a23c <mbedtls_mpi_free>
    if( ret != 0 )
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d002      	beq.n	801135a <ecp_use_curve448+0x13e>
        mbedtls_ecp_group_free( grp );
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f7fc fe9f 	bl	800e098 <mbedtls_ecp_group_free>

    return( ret );
 801135a:	697b      	ldr	r3, [r7, #20]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3718      	adds	r7, #24
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	080164fc 	.word	0x080164fc
 8011368:	08016504 	.word	0x08016504

0801136c <mbedtls_ecp_group_load>:

/*
 * Set a group using well-known domain parameters
 */
int mbedtls_ecp_group_load( mbedtls_ecp_group *grp, mbedtls_ecp_group_id id )
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b08c      	sub	sp, #48	@ 0x30
 8011370:	af0a      	add	r7, sp, #40	@ 0x28
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	460b      	mov	r3, r1
 8011376:	70fb      	strb	r3, [r7, #3]
    ECP_VALIDATE_RET( grp != NULL );
    mbedtls_ecp_group_free( grp );
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f7fc fe8d 	bl	800e098 <mbedtls_ecp_group_free>

    grp->id = id;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	78fa      	ldrb	r2, [r7, #3]
 8011382:	701a      	strb	r2, [r3, #0]

    switch( id )
 8011384:	78fb      	ldrb	r3, [r7, #3]
 8011386:	3b01      	subs	r3, #1
 8011388:	2b0c      	cmp	r3, #12
 801138a:	f200 81e1 	bhi.w	8011750 <mbedtls_ecp_group_load+0x3e4>
 801138e:	a201      	add	r2, pc, #4	@ (adr r2, 8011394 <mbedtls_ecp_group_load+0x28>)
 8011390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011394:	080113c9 	.word	0x080113c9
 8011398:	08011403 	.word	0x08011403
 801139c:	0801143d 	.word	0x0801143d
 80113a0:	08011477 	.word	0x08011477
 80113a4:	080114b1 	.word	0x080114b1
 80113a8:	08011599 	.word	0x08011599
 80113ac:	080115cd 	.word	0x080115cd
 80113b0:	080116fd 	.word	0x080116fd
 80113b4:	08011731 	.word	0x08011731
 80113b8:	080114eb 	.word	0x080114eb
 80113bc:	08011525 	.word	0x08011525
 80113c0:	0801155f 	.word	0x0801155f
 80113c4:	08011741 	.word	0x08011741
    {
#if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP192R1:
            NIST_MODP( p192 );
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	4a8d      	ldr	r2, [pc, #564]	@ (8011600 <mbedtls_ecp_group_load+0x294>)
 80113cc:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp192r1 ) );
 80113ce:	2318      	movs	r3, #24
 80113d0:	9308      	str	r3, [sp, #32]
 80113d2:	4b8c      	ldr	r3, [pc, #560]	@ (8011604 <mbedtls_ecp_group_load+0x298>)
 80113d4:	9307      	str	r3, [sp, #28]
 80113d6:	2318      	movs	r3, #24
 80113d8:	9306      	str	r3, [sp, #24]
 80113da:	4b8b      	ldr	r3, [pc, #556]	@ (8011608 <mbedtls_ecp_group_load+0x29c>)
 80113dc:	9305      	str	r3, [sp, #20]
 80113de:	2318      	movs	r3, #24
 80113e0:	9304      	str	r3, [sp, #16]
 80113e2:	4b8a      	ldr	r3, [pc, #552]	@ (801160c <mbedtls_ecp_group_load+0x2a0>)
 80113e4:	9303      	str	r3, [sp, #12]
 80113e6:	2318      	movs	r3, #24
 80113e8:	9302      	str	r3, [sp, #8]
 80113ea:	4b89      	ldr	r3, [pc, #548]	@ (8011610 <mbedtls_ecp_group_load+0x2a4>)
 80113ec:	9301      	str	r3, [sp, #4]
 80113ee:	2300      	movs	r3, #0
 80113f0:	9300      	str	r3, [sp, #0]
 80113f2:	2300      	movs	r3, #0
 80113f4:	2218      	movs	r2, #24
 80113f6:	4987      	ldr	r1, [pc, #540]	@ (8011614 <mbedtls_ecp_group_load+0x2a8>)
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7ff fe45 	bl	8011088 <ecp_group_load>
 80113fe:	4603      	mov	r3, r0
 8011400:	e1aa      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP192R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP224R1:
            NIST_MODP( p224 );
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	4a84      	ldr	r2, [pc, #528]	@ (8011618 <mbedtls_ecp_group_load+0x2ac>)
 8011406:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp224r1 ) );
 8011408:	231c      	movs	r3, #28
 801140a:	9308      	str	r3, [sp, #32]
 801140c:	4b83      	ldr	r3, [pc, #524]	@ (801161c <mbedtls_ecp_group_load+0x2b0>)
 801140e:	9307      	str	r3, [sp, #28]
 8011410:	231c      	movs	r3, #28
 8011412:	9306      	str	r3, [sp, #24]
 8011414:	4b82      	ldr	r3, [pc, #520]	@ (8011620 <mbedtls_ecp_group_load+0x2b4>)
 8011416:	9305      	str	r3, [sp, #20]
 8011418:	231c      	movs	r3, #28
 801141a:	9304      	str	r3, [sp, #16]
 801141c:	4b81      	ldr	r3, [pc, #516]	@ (8011624 <mbedtls_ecp_group_load+0x2b8>)
 801141e:	9303      	str	r3, [sp, #12]
 8011420:	231c      	movs	r3, #28
 8011422:	9302      	str	r3, [sp, #8]
 8011424:	4b80      	ldr	r3, [pc, #512]	@ (8011628 <mbedtls_ecp_group_load+0x2bc>)
 8011426:	9301      	str	r3, [sp, #4]
 8011428:	2300      	movs	r3, #0
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	2300      	movs	r3, #0
 801142e:	2220      	movs	r2, #32
 8011430:	497e      	ldr	r1, [pc, #504]	@ (801162c <mbedtls_ecp_group_load+0x2c0>)
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f7ff fe28 	bl	8011088 <ecp_group_load>
 8011438:	4603      	mov	r3, r0
 801143a:	e18d      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP224R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256R1:
            NIST_MODP( p256 );
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	4a7c      	ldr	r2, [pc, #496]	@ (8011630 <mbedtls_ecp_group_load+0x2c4>)
 8011440:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp256r1 ) );
 8011442:	2320      	movs	r3, #32
 8011444:	9308      	str	r3, [sp, #32]
 8011446:	4b7b      	ldr	r3, [pc, #492]	@ (8011634 <mbedtls_ecp_group_load+0x2c8>)
 8011448:	9307      	str	r3, [sp, #28]
 801144a:	2320      	movs	r3, #32
 801144c:	9306      	str	r3, [sp, #24]
 801144e:	4b7a      	ldr	r3, [pc, #488]	@ (8011638 <mbedtls_ecp_group_load+0x2cc>)
 8011450:	9305      	str	r3, [sp, #20]
 8011452:	2320      	movs	r3, #32
 8011454:	9304      	str	r3, [sp, #16]
 8011456:	4b79      	ldr	r3, [pc, #484]	@ (801163c <mbedtls_ecp_group_load+0x2d0>)
 8011458:	9303      	str	r3, [sp, #12]
 801145a:	2320      	movs	r3, #32
 801145c:	9302      	str	r3, [sp, #8]
 801145e:	4b78      	ldr	r3, [pc, #480]	@ (8011640 <mbedtls_ecp_group_load+0x2d4>)
 8011460:	9301      	str	r3, [sp, #4]
 8011462:	2300      	movs	r3, #0
 8011464:	9300      	str	r3, [sp, #0]
 8011466:	2300      	movs	r3, #0
 8011468:	2220      	movs	r2, #32
 801146a:	4976      	ldr	r1, [pc, #472]	@ (8011644 <mbedtls_ecp_group_load+0x2d8>)
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7ff fe0b 	bl	8011088 <ecp_group_load>
 8011472:	4603      	mov	r3, r0
 8011474:	e170      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP384R1:
            NIST_MODP( p384 );
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4a73      	ldr	r2, [pc, #460]	@ (8011648 <mbedtls_ecp_group_load+0x2dc>)
 801147a:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp384r1 ) );
 801147c:	2330      	movs	r3, #48	@ 0x30
 801147e:	9308      	str	r3, [sp, #32]
 8011480:	4b72      	ldr	r3, [pc, #456]	@ (801164c <mbedtls_ecp_group_load+0x2e0>)
 8011482:	9307      	str	r3, [sp, #28]
 8011484:	2330      	movs	r3, #48	@ 0x30
 8011486:	9306      	str	r3, [sp, #24]
 8011488:	4b71      	ldr	r3, [pc, #452]	@ (8011650 <mbedtls_ecp_group_load+0x2e4>)
 801148a:	9305      	str	r3, [sp, #20]
 801148c:	2330      	movs	r3, #48	@ 0x30
 801148e:	9304      	str	r3, [sp, #16]
 8011490:	4b70      	ldr	r3, [pc, #448]	@ (8011654 <mbedtls_ecp_group_load+0x2e8>)
 8011492:	9303      	str	r3, [sp, #12]
 8011494:	2330      	movs	r3, #48	@ 0x30
 8011496:	9302      	str	r3, [sp, #8]
 8011498:	4b6f      	ldr	r3, [pc, #444]	@ (8011658 <mbedtls_ecp_group_load+0x2ec>)
 801149a:	9301      	str	r3, [sp, #4]
 801149c:	2300      	movs	r3, #0
 801149e:	9300      	str	r3, [sp, #0]
 80114a0:	2300      	movs	r3, #0
 80114a2:	2230      	movs	r2, #48	@ 0x30
 80114a4:	496d      	ldr	r1, [pc, #436]	@ (801165c <mbedtls_ecp_group_load+0x2f0>)
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f7ff fdee 	bl	8011088 <ecp_group_load>
 80114ac:	4603      	mov	r3, r0
 80114ae:	e153      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP384R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP521R1_ENABLED)
        case MBEDTLS_ECP_DP_SECP521R1:
            NIST_MODP( p521 );
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	4a6b      	ldr	r2, [pc, #428]	@ (8011660 <mbedtls_ecp_group_load+0x2f4>)
 80114b4:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP( secp521r1 ) );
 80114b6:	2344      	movs	r3, #68	@ 0x44
 80114b8:	9308      	str	r3, [sp, #32]
 80114ba:	4b6a      	ldr	r3, [pc, #424]	@ (8011664 <mbedtls_ecp_group_load+0x2f8>)
 80114bc:	9307      	str	r3, [sp, #28]
 80114be:	2344      	movs	r3, #68	@ 0x44
 80114c0:	9306      	str	r3, [sp, #24]
 80114c2:	4b69      	ldr	r3, [pc, #420]	@ (8011668 <mbedtls_ecp_group_load+0x2fc>)
 80114c4:	9305      	str	r3, [sp, #20]
 80114c6:	2344      	movs	r3, #68	@ 0x44
 80114c8:	9304      	str	r3, [sp, #16]
 80114ca:	4b68      	ldr	r3, [pc, #416]	@ (801166c <mbedtls_ecp_group_load+0x300>)
 80114cc:	9303      	str	r3, [sp, #12]
 80114ce:	2344      	movs	r3, #68	@ 0x44
 80114d0:	9302      	str	r3, [sp, #8]
 80114d2:	4b67      	ldr	r3, [pc, #412]	@ (8011670 <mbedtls_ecp_group_load+0x304>)
 80114d4:	9301      	str	r3, [sp, #4]
 80114d6:	2300      	movs	r3, #0
 80114d8:	9300      	str	r3, [sp, #0]
 80114da:	2300      	movs	r3, #0
 80114dc:	2244      	movs	r2, #68	@ 0x44
 80114de:	4965      	ldr	r1, [pc, #404]	@ (8011674 <mbedtls_ecp_group_load+0x308>)
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f7ff fdd1 	bl	8011088 <ecp_group_load>
 80114e6:	4603      	mov	r3, r0
 80114e8:	e136      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP521R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP192K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP192K1:
            grp->modp = ecp_mod_p192k1;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	4a62      	ldr	r2, [pc, #392]	@ (8011678 <mbedtls_ecp_group_load+0x30c>)
 80114ee:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP_A( secp192k1 ) );
 80114f0:	2318      	movs	r3, #24
 80114f2:	9308      	str	r3, [sp, #32]
 80114f4:	4b61      	ldr	r3, [pc, #388]	@ (801167c <mbedtls_ecp_group_load+0x310>)
 80114f6:	9307      	str	r3, [sp, #28]
 80114f8:	2318      	movs	r3, #24
 80114fa:	9306      	str	r3, [sp, #24]
 80114fc:	4b60      	ldr	r3, [pc, #384]	@ (8011680 <mbedtls_ecp_group_load+0x314>)
 80114fe:	9305      	str	r3, [sp, #20]
 8011500:	2318      	movs	r3, #24
 8011502:	9304      	str	r3, [sp, #16]
 8011504:	4b5f      	ldr	r3, [pc, #380]	@ (8011684 <mbedtls_ecp_group_load+0x318>)
 8011506:	9303      	str	r3, [sp, #12]
 8011508:	2304      	movs	r3, #4
 801150a:	9302      	str	r3, [sp, #8]
 801150c:	4b5e      	ldr	r3, [pc, #376]	@ (8011688 <mbedtls_ecp_group_load+0x31c>)
 801150e:	9301      	str	r3, [sp, #4]
 8011510:	2304      	movs	r3, #4
 8011512:	9300      	str	r3, [sp, #0]
 8011514:	4b5d      	ldr	r3, [pc, #372]	@ (801168c <mbedtls_ecp_group_load+0x320>)
 8011516:	2218      	movs	r2, #24
 8011518:	495d      	ldr	r1, [pc, #372]	@ (8011690 <mbedtls_ecp_group_load+0x324>)
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f7ff fdb4 	bl	8011088 <ecp_group_load>
 8011520:	4603      	mov	r3, r0
 8011522:	e119      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP192K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP224K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP224K1:
            grp->modp = ecp_mod_p224k1;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	4a5b      	ldr	r2, [pc, #364]	@ (8011694 <mbedtls_ecp_group_load+0x328>)
 8011528:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP_A( secp224k1 ) );
 801152a:	2320      	movs	r3, #32
 801152c:	9308      	str	r3, [sp, #32]
 801152e:	4b5a      	ldr	r3, [pc, #360]	@ (8011698 <mbedtls_ecp_group_load+0x32c>)
 8011530:	9307      	str	r3, [sp, #28]
 8011532:	231c      	movs	r3, #28
 8011534:	9306      	str	r3, [sp, #24]
 8011536:	4b59      	ldr	r3, [pc, #356]	@ (801169c <mbedtls_ecp_group_load+0x330>)
 8011538:	9305      	str	r3, [sp, #20]
 801153a:	231c      	movs	r3, #28
 801153c:	9304      	str	r3, [sp, #16]
 801153e:	4b58      	ldr	r3, [pc, #352]	@ (80116a0 <mbedtls_ecp_group_load+0x334>)
 8011540:	9303      	str	r3, [sp, #12]
 8011542:	2304      	movs	r3, #4
 8011544:	9302      	str	r3, [sp, #8]
 8011546:	4b57      	ldr	r3, [pc, #348]	@ (80116a4 <mbedtls_ecp_group_load+0x338>)
 8011548:	9301      	str	r3, [sp, #4]
 801154a:	2304      	movs	r3, #4
 801154c:	9300      	str	r3, [sp, #0]
 801154e:	4b56      	ldr	r3, [pc, #344]	@ (80116a8 <mbedtls_ecp_group_load+0x33c>)
 8011550:	221c      	movs	r2, #28
 8011552:	4956      	ldr	r1, [pc, #344]	@ (80116ac <mbedtls_ecp_group_load+0x340>)
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f7ff fd97 	bl	8011088 <ecp_group_load>
 801155a:	4603      	mov	r3, r0
 801155c:	e0fc      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP224K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_SECP256K1_ENABLED)
        case MBEDTLS_ECP_DP_SECP256K1:
            grp->modp = ecp_mod_p256k1;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	4a53      	ldr	r2, [pc, #332]	@ (80116b0 <mbedtls_ecp_group_load+0x344>)
 8011562:	665a      	str	r2, [r3, #100]	@ 0x64
            return( LOAD_GROUP_A( secp256k1 ) );
 8011564:	2320      	movs	r3, #32
 8011566:	9308      	str	r3, [sp, #32]
 8011568:	4b52      	ldr	r3, [pc, #328]	@ (80116b4 <mbedtls_ecp_group_load+0x348>)
 801156a:	9307      	str	r3, [sp, #28]
 801156c:	2320      	movs	r3, #32
 801156e:	9306      	str	r3, [sp, #24]
 8011570:	4b51      	ldr	r3, [pc, #324]	@ (80116b8 <mbedtls_ecp_group_load+0x34c>)
 8011572:	9305      	str	r3, [sp, #20]
 8011574:	2320      	movs	r3, #32
 8011576:	9304      	str	r3, [sp, #16]
 8011578:	4b50      	ldr	r3, [pc, #320]	@ (80116bc <mbedtls_ecp_group_load+0x350>)
 801157a:	9303      	str	r3, [sp, #12]
 801157c:	2304      	movs	r3, #4
 801157e:	9302      	str	r3, [sp, #8]
 8011580:	4b4f      	ldr	r3, [pc, #316]	@ (80116c0 <mbedtls_ecp_group_load+0x354>)
 8011582:	9301      	str	r3, [sp, #4]
 8011584:	2304      	movs	r3, #4
 8011586:	9300      	str	r3, [sp, #0]
 8011588:	4b4e      	ldr	r3, [pc, #312]	@ (80116c4 <mbedtls_ecp_group_load+0x358>)
 801158a:	2220      	movs	r2, #32
 801158c:	494e      	ldr	r1, [pc, #312]	@ (80116c8 <mbedtls_ecp_group_load+0x35c>)
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f7ff fd7a 	bl	8011088 <ecp_group_load>
 8011594:	4603      	mov	r3, r0
 8011596:	e0df      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_SECP256K1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP256R1_ENABLED)
        case MBEDTLS_ECP_DP_BP256R1:
            return( LOAD_GROUP_A( brainpoolP256r1 ) );
 8011598:	2320      	movs	r3, #32
 801159a:	9308      	str	r3, [sp, #32]
 801159c:	4b4b      	ldr	r3, [pc, #300]	@ (80116cc <mbedtls_ecp_group_load+0x360>)
 801159e:	9307      	str	r3, [sp, #28]
 80115a0:	2320      	movs	r3, #32
 80115a2:	9306      	str	r3, [sp, #24]
 80115a4:	4b4a      	ldr	r3, [pc, #296]	@ (80116d0 <mbedtls_ecp_group_load+0x364>)
 80115a6:	9305      	str	r3, [sp, #20]
 80115a8:	2320      	movs	r3, #32
 80115aa:	9304      	str	r3, [sp, #16]
 80115ac:	4b49      	ldr	r3, [pc, #292]	@ (80116d4 <mbedtls_ecp_group_load+0x368>)
 80115ae:	9303      	str	r3, [sp, #12]
 80115b0:	2320      	movs	r3, #32
 80115b2:	9302      	str	r3, [sp, #8]
 80115b4:	4b48      	ldr	r3, [pc, #288]	@ (80116d8 <mbedtls_ecp_group_load+0x36c>)
 80115b6:	9301      	str	r3, [sp, #4]
 80115b8:	2320      	movs	r3, #32
 80115ba:	9300      	str	r3, [sp, #0]
 80115bc:	4b47      	ldr	r3, [pc, #284]	@ (80116dc <mbedtls_ecp_group_load+0x370>)
 80115be:	2220      	movs	r2, #32
 80115c0:	4947      	ldr	r1, [pc, #284]	@ (80116e0 <mbedtls_ecp_group_load+0x374>)
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7ff fd60 	bl	8011088 <ecp_group_load>
 80115c8:	4603      	mov	r3, r0
 80115ca:	e0c5      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_BP256R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP384R1_ENABLED)
        case MBEDTLS_ECP_DP_BP384R1:
            return( LOAD_GROUP_A( brainpoolP384r1 ) );
 80115cc:	2330      	movs	r3, #48	@ 0x30
 80115ce:	9308      	str	r3, [sp, #32]
 80115d0:	4b44      	ldr	r3, [pc, #272]	@ (80116e4 <mbedtls_ecp_group_load+0x378>)
 80115d2:	9307      	str	r3, [sp, #28]
 80115d4:	2330      	movs	r3, #48	@ 0x30
 80115d6:	9306      	str	r3, [sp, #24]
 80115d8:	4b43      	ldr	r3, [pc, #268]	@ (80116e8 <mbedtls_ecp_group_load+0x37c>)
 80115da:	9305      	str	r3, [sp, #20]
 80115dc:	2330      	movs	r3, #48	@ 0x30
 80115de:	9304      	str	r3, [sp, #16]
 80115e0:	4b42      	ldr	r3, [pc, #264]	@ (80116ec <mbedtls_ecp_group_load+0x380>)
 80115e2:	9303      	str	r3, [sp, #12]
 80115e4:	2330      	movs	r3, #48	@ 0x30
 80115e6:	9302      	str	r3, [sp, #8]
 80115e8:	4b41      	ldr	r3, [pc, #260]	@ (80116f0 <mbedtls_ecp_group_load+0x384>)
 80115ea:	9301      	str	r3, [sp, #4]
 80115ec:	2330      	movs	r3, #48	@ 0x30
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	4b40      	ldr	r3, [pc, #256]	@ (80116f4 <mbedtls_ecp_group_load+0x388>)
 80115f2:	2230      	movs	r2, #48	@ 0x30
 80115f4:	4940      	ldr	r1, [pc, #256]	@ (80116f8 <mbedtls_ecp_group_load+0x38c>)
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f7ff fd46 	bl	8011088 <ecp_group_load>
 80115fc:	4603      	mov	r3, r0
 80115fe:	e0ab      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
 8011600:	08011867 	.word	0x08011867
 8011604:	08016a38 	.word	0x08016a38
 8011608:	08016a20 	.word	0x08016a20
 801160c:	08016a08 	.word	0x08016a08
 8011610:	080169f0 	.word	0x080169f0
 8011614:	080169d8 	.word	0x080169d8
 8011618:	08011a41 	.word	0x08011a41
 801161c:	08016ac4 	.word	0x08016ac4
 8011620:	08016aa8 	.word	0x08016aa8
 8011624:	08016a8c 	.word	0x08016a8c
 8011628:	08016a70 	.word	0x08016a70
 801162c:	08016a50 	.word	0x08016a50
 8011630:	08011ecf 	.word	0x08011ecf
 8011634:	08016b60 	.word	0x08016b60
 8011638:	08016b40 	.word	0x08016b40
 801163c:	08016b20 	.word	0x08016b20
 8011640:	08016b00 	.word	0x08016b00
 8011644:	08016ae0 	.word	0x08016ae0
 8011648:	08012705 	.word	0x08012705
 801164c:	08016c40 	.word	0x08016c40
 8011650:	08016c10 	.word	0x08016c10
 8011654:	08016be0 	.word	0x08016be0
 8011658:	08016bb0 	.word	0x08016bb0
 801165c:	08016b80 	.word	0x08016b80
 8011660:	080131b5 	.word	0x080131b5
 8011664:	08016d80 	.word	0x08016d80
 8011668:	08016d3c 	.word	0x08016d3c
 801166c:	08016cf8 	.word	0x08016cf8
 8011670:	08016cb4 	.word	0x08016cb4
 8011674:	08016c70 	.word	0x08016c70
 8011678:	08013709 	.word	0x08013709
 801167c:	08016e14 	.word	0x08016e14
 8011680:	08016dfc 	.word	0x08016dfc
 8011684:	08016de4 	.word	0x08016de4
 8011688:	08016de0 	.word	0x08016de0
 801168c:	08016ddc 	.word	0x08016ddc
 8011690:	08016dc4 	.word	0x08016dc4
 8011694:	08013735 	.word	0x08013735
 8011698:	08016e88 	.word	0x08016e88
 801169c:	08016e6c 	.word	0x08016e6c
 80116a0:	08016e50 	.word	0x08016e50
 80116a4:	08016e4c 	.word	0x08016e4c
 80116a8:	08016e48 	.word	0x08016e48
 80116ac:	08016e2c 	.word	0x08016e2c
 80116b0:	08013761 	.word	0x08013761
 80116b4:	08016f10 	.word	0x08016f10
 80116b8:	08016ef0 	.word	0x08016ef0
 80116bc:	08016ed0 	.word	0x08016ed0
 80116c0:	08016ecc 	.word	0x08016ecc
 80116c4:	08016ec8 	.word	0x08016ec8
 80116c8:	08016ea8 	.word	0x08016ea8
 80116cc:	08016fd0 	.word	0x08016fd0
 80116d0:	08016fb0 	.word	0x08016fb0
 80116d4:	08016f90 	.word	0x08016f90
 80116d8:	08016f70 	.word	0x08016f70
 80116dc:	08016f50 	.word	0x08016f50
 80116e0:	08016f30 	.word	0x08016f30
 80116e4:	080170e0 	.word	0x080170e0
 80116e8:	080170b0 	.word	0x080170b0
 80116ec:	08017080 	.word	0x08017080
 80116f0:	08017050 	.word	0x08017050
 80116f4:	08017020 	.word	0x08017020
 80116f8:	08016ff0 	.word	0x08016ff0
#endif /* MBEDTLS_ECP_DP_BP384R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_BP512R1_ENABLED)
        case MBEDTLS_ECP_DP_BP512R1:
            return( LOAD_GROUP_A( brainpoolP512r1 ) );
 80116fc:	2340      	movs	r3, #64	@ 0x40
 80116fe:	9308      	str	r3, [sp, #32]
 8011700:	4b17      	ldr	r3, [pc, #92]	@ (8011760 <mbedtls_ecp_group_load+0x3f4>)
 8011702:	9307      	str	r3, [sp, #28]
 8011704:	2340      	movs	r3, #64	@ 0x40
 8011706:	9306      	str	r3, [sp, #24]
 8011708:	4b16      	ldr	r3, [pc, #88]	@ (8011764 <mbedtls_ecp_group_load+0x3f8>)
 801170a:	9305      	str	r3, [sp, #20]
 801170c:	2340      	movs	r3, #64	@ 0x40
 801170e:	9304      	str	r3, [sp, #16]
 8011710:	4b15      	ldr	r3, [pc, #84]	@ (8011768 <mbedtls_ecp_group_load+0x3fc>)
 8011712:	9303      	str	r3, [sp, #12]
 8011714:	2340      	movs	r3, #64	@ 0x40
 8011716:	9302      	str	r3, [sp, #8]
 8011718:	4b14      	ldr	r3, [pc, #80]	@ (801176c <mbedtls_ecp_group_load+0x400>)
 801171a:	9301      	str	r3, [sp, #4]
 801171c:	2340      	movs	r3, #64	@ 0x40
 801171e:	9300      	str	r3, [sp, #0]
 8011720:	4b13      	ldr	r3, [pc, #76]	@ (8011770 <mbedtls_ecp_group_load+0x404>)
 8011722:	2240      	movs	r2, #64	@ 0x40
 8011724:	4913      	ldr	r1, [pc, #76]	@ (8011774 <mbedtls_ecp_group_load+0x408>)
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f7ff fcae 	bl	8011088 <ecp_group_load>
 801172c:	4603      	mov	r3, r0
 801172e:	e013      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_BP512R1_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE25519_ENABLED)
        case MBEDTLS_ECP_DP_CURVE25519:
            grp->modp = ecp_mod_p255;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	4a11      	ldr	r2, [pc, #68]	@ (8011778 <mbedtls_ecp_group_load+0x40c>)
 8011734:	665a      	str	r2, [r3, #100]	@ 0x64
            return( ecp_use_curve25519( grp ) );
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f7ff fcf8 	bl	801112c <ecp_use_curve25519>
 801173c:	4603      	mov	r3, r0
 801173e:	e00b      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_CURVE25519_ENABLED */

#if defined(MBEDTLS_ECP_DP_CURVE448_ENABLED)
        case MBEDTLS_ECP_DP_CURVE448:
            grp->modp = ecp_mod_p448;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	4a0e      	ldr	r2, [pc, #56]	@ (801177c <mbedtls_ecp_group_load+0x410>)
 8011744:	665a      	str	r2, [r3, #100]	@ 0x64
            return( ecp_use_curve448( grp ) );
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7ff fd68 	bl	801121c <ecp_use_curve448>
 801174c:	4603      	mov	r3, r0
 801174e:	e003      	b.n	8011758 <mbedtls_ecp_group_load+0x3ec>
#endif /* MBEDTLS_ECP_DP_CURVE448_ENABLED */

        default:
            mbedtls_ecp_group_free( grp );
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7fc fca1 	bl	800e098 <mbedtls_ecp_group_free>
            return( MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE );
 8011756:	4b0a      	ldr	r3, [pc, #40]	@ (8011780 <mbedtls_ecp_group_load+0x414>)
    }
}
 8011758:	4618      	mov	r0, r3
 801175a:	3708      	adds	r7, #8
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}
 8011760:	08017250 	.word	0x08017250
 8011764:	08017210 	.word	0x08017210
 8011768:	080171d0 	.word	0x080171d0
 801176c:	08017190 	.word	0x08017190
 8011770:	08017150 	.word	0x08017150
 8011774:	08017110 	.word	0x08017110
 8011778:	08013269 	.word	0x08013269
 801177c:	08013349 	.word	0x08013349
 8011780:	ffffb180 	.word	0xffffb180

08011784 <add64>:
 * use a mbedtls_mpi_uint * to designate such a chunk, and small loops to handle it.
 */

/* Add 64-bit chunks (dst += src) and update carry */
static inline void add64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *src, mbedtls_mpi_uint *carry )
{
 8011784:	b480      	push	{r7}
 8011786:	b087      	sub	sp, #28
 8011788:	af00      	add	r7, sp, #0
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	60b9      	str	r1, [r7, #8]
 801178e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    mbedtls_mpi_uint c = 0;
 8011790:	2300      	movs	r3, #0
 8011792:	613b      	str	r3, [r7, #16]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )
 8011794:	2300      	movs	r3, #0
 8011796:	75fb      	strb	r3, [r7, #23]
 8011798:	e02b      	b.n	80117f2 <add64+0x6e>
    {
        *dst += c;      c  = ( *dst < c );
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681a      	ldr	r2, [r3, #0]
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	441a      	add	r2, r3
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	601a      	str	r2, [r3, #0]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	693a      	ldr	r2, [r7, #16]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	bf8c      	ite	hi
 80117b0:	2301      	movhi	r3, #1
 80117b2:	2300      	movls	r3, #0
 80117b4:	b2db      	uxtb	r3, r3
 80117b6:	613b      	str	r3, [r7, #16]
        *dst += *src;   c += ( *dst < *src );
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	441a      	add	r2, r3
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	601a      	str	r2, [r3, #0]
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	bf34      	ite	cc
 80117d2:	2301      	movcc	r3, #1
 80117d4:	2300      	movcs	r3, #0
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	461a      	mov	r2, r3
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	4413      	add	r3, r2
 80117de:	613b      	str	r3, [r7, #16]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++, src++ )
 80117e0:	7dfb      	ldrb	r3, [r7, #23]
 80117e2:	3301      	adds	r3, #1
 80117e4:	75fb      	strb	r3, [r7, #23]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	3304      	adds	r3, #4
 80117ea:	60fb      	str	r3, [r7, #12]
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	3304      	adds	r3, #4
 80117f0:	60bb      	str	r3, [r7, #8]
 80117f2:	7dfb      	ldrb	r3, [r7, #23]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d9d0      	bls.n	801179a <add64+0x16>
    }
    *carry += c;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	693b      	ldr	r3, [r7, #16]
 80117fe:	441a      	add	r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	601a      	str	r2, [r3, #0]
}
 8011804:	bf00      	nop
 8011806:	371c      	adds	r7, #28
 8011808:	46bd      	mov	sp, r7
 801180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180e:	4770      	bx	lr

08011810 <carry64>:

/* Add carry to a 64-bit chunk and update carry */
static inline void carry64( mbedtls_mpi_uint *dst, mbedtls_mpi_uint *carry )
{
 8011810:	b480      	push	{r7}
 8011812:	b085      	sub	sp, #20
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
    unsigned char i;
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )
 801181a:	2300      	movs	r3, #0
 801181c:	73fb      	strb	r3, [r7, #15]
 801181e:	e018      	b.n	8011852 <carry64+0x42>
    {
        *dst += *carry;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	441a      	add	r2, r3
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	601a      	str	r2, [r3, #0]
        *carry  = ( *dst < *carry );
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	429a      	cmp	r2, r3
 8011838:	bf34      	ite	cc
 801183a:	2301      	movcc	r3, #1
 801183c:	2300      	movcs	r3, #0
 801183e:	b2db      	uxtb	r3, r3
 8011840:	461a      	mov	r2, r3
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 8 / sizeof( mbedtls_mpi_uint ); i++, dst++ )
 8011846:	7bfb      	ldrb	r3, [r7, #15]
 8011848:	3301      	adds	r3, #1
 801184a:	73fb      	strb	r3, [r7, #15]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	3304      	adds	r3, #4
 8011850:	607b      	str	r3, [r7, #4]
 8011852:	7bfb      	ldrb	r3, [r7, #15]
 8011854:	2b01      	cmp	r3, #1
 8011856:	d9e3      	bls.n	8011820 <carry64+0x10>
    }
}
 8011858:	bf00      	nop
 801185a:	bf00      	nop
 801185c:	3714      	adds	r7, #20
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr

08011866 <ecp_mod_p192>:

/*
 * Fast quasi-reduction modulo p192 (FIPS 186-3 D.2.1)
 */
static int ecp_mod_p192( mbedtls_mpi *N )
{
 8011866:	b580      	push	{r7, lr}
 8011868:	b086      	sub	sp, #24
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
    int ret;
    mbedtls_mpi_uint c = 0;
 801186e:	2300      	movs	r3, #0
 8011870:	60bb      	str	r3, [r7, #8]
    mbedtls_mpi_uint *p, *end;

    /* Make sure we have enough blocks so that A(5) is legal */
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( N, 6 * WIDTH ) );
 8011872:	210c      	movs	r1, #12
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f7f8 fd07 	bl	800a288 <mbedtls_mpi_grow>
 801187a:	6138      	str	r0, [r7, #16]
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d16b      	bne.n	801195a <ecp_mod_p192+0xf4>

    p = N->p;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	689b      	ldr	r3, [r3, #8]
 8011886:	617b      	str	r3, [r7, #20]
    end = p + N->n;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	009b      	lsls	r3, r3, #2
 801188e:	697a      	ldr	r2, [r7, #20]
 8011890:	4413      	add	r3, r2
 8011892:	60fb      	str	r3, [r7, #12]

    ADD( 3 ); ADD( 5 );             NEXT; // A0 += A3 + A5
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	689b      	ldr	r3, [r3, #8]
 8011898:	3318      	adds	r3, #24
 801189a:	f107 0208 	add.w	r2, r7, #8
 801189e:	4619      	mov	r1, r3
 80118a0:	6978      	ldr	r0, [r7, #20]
 80118a2:	f7ff ff6f 	bl	8011784 <add64>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	689b      	ldr	r3, [r3, #8]
 80118aa:	3328      	adds	r3, #40	@ 0x28
 80118ac:	f107 0208 	add.w	r2, r7, #8
 80118b0:	4619      	mov	r1, r3
 80118b2:	6978      	ldr	r0, [r7, #20]
 80118b4:	f7ff ff66 	bl	8011784 <add64>
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	3308      	adds	r3, #8
 80118bc:	617b      	str	r3, [r7, #20]
 80118be:	f107 0308 	add.w	r3, r7, #8
 80118c2:	4619      	mov	r1, r3
 80118c4:	6978      	ldr	r0, [r7, #20]
 80118c6:	f7ff ffa3 	bl	8011810 <carry64>
    ADD( 3 ); ADD( 4 ); ADD( 5 );   NEXT; // A1 += A3 + A4 + A5
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	3318      	adds	r3, #24
 80118d0:	f107 0208 	add.w	r2, r7, #8
 80118d4:	4619      	mov	r1, r3
 80118d6:	6978      	ldr	r0, [r7, #20]
 80118d8:	f7ff ff54 	bl	8011784 <add64>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	3320      	adds	r3, #32
 80118e2:	f107 0208 	add.w	r2, r7, #8
 80118e6:	4619      	mov	r1, r3
 80118e8:	6978      	ldr	r0, [r7, #20]
 80118ea:	f7ff ff4b 	bl	8011784 <add64>
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	689b      	ldr	r3, [r3, #8]
 80118f2:	3328      	adds	r3, #40	@ 0x28
 80118f4:	f107 0208 	add.w	r2, r7, #8
 80118f8:	4619      	mov	r1, r3
 80118fa:	6978      	ldr	r0, [r7, #20]
 80118fc:	f7ff ff42 	bl	8011784 <add64>
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	3308      	adds	r3, #8
 8011904:	617b      	str	r3, [r7, #20]
 8011906:	f107 0308 	add.w	r3, r7, #8
 801190a:	4619      	mov	r1, r3
 801190c:	6978      	ldr	r0, [r7, #20]
 801190e:	f7ff ff7f 	bl	8011810 <carry64>
    ADD( 4 ); ADD( 5 );             LAST; // A2 += A4 + A5
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	689b      	ldr	r3, [r3, #8]
 8011916:	3320      	adds	r3, #32
 8011918:	f107 0208 	add.w	r2, r7, #8
 801191c:	4619      	mov	r1, r3
 801191e:	6978      	ldr	r0, [r7, #20]
 8011920:	f7ff ff30 	bl	8011784 <add64>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	3328      	adds	r3, #40	@ 0x28
 801192a:	f107 0208 	add.w	r2, r7, #8
 801192e:	4619      	mov	r1, r3
 8011930:	6978      	ldr	r0, [r7, #20]
 8011932:	f7ff ff27 	bl	8011784 <add64>
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	3308      	adds	r3, #8
 801193a:	617b      	str	r3, [r7, #20]
 801193c:	68ba      	ldr	r2, [r7, #8]
 801193e:	697b      	ldr	r3, [r7, #20]
 8011940:	601a      	str	r2, [r3, #0]
 8011942:	e002      	b.n	801194a <ecp_mod_p192+0xe4>
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	2200      	movs	r2, #0
 8011948:	601a      	str	r2, [r3, #0]
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	3304      	adds	r3, #4
 801194e:	617b      	str	r3, [r7, #20]
 8011950:	697a      	ldr	r2, [r7, #20]
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	429a      	cmp	r2, r3
 8011956:	d3f5      	bcc.n	8011944 <ecp_mod_p192+0xde>

cleanup:
 8011958:	bf00      	nop
    return( ret );
 801195a:	693b      	ldr	r3, [r7, #16]
}
 801195c:	4618      	mov	r0, r3
 801195e:	3718      	adds	r7, #24
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <add32>:

/*
 * Helpers for addition and subtraction of chunks, with signed carry.
 */
static inline void add32( uint32_t *dst, uint32_t src, signed char *carry )
{
 8011964:	b480      	push	{r7}
 8011966:	b085      	sub	sp, #20
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
    *dst += src;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	441a      	add	r2, r3
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	601a      	str	r2, [r3, #0]
    *carry += ( *dst < src );
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f993 3000 	ldrsb.w	r3, [r3]
 8011982:	b2db      	uxtb	r3, r3
 8011984:	68fa      	ldr	r2, [r7, #12]
 8011986:	6812      	ldr	r2, [r2, #0]
 8011988:	68b9      	ldr	r1, [r7, #8]
 801198a:	4291      	cmp	r1, r2
 801198c:	bf8c      	ite	hi
 801198e:	2201      	movhi	r2, #1
 8011990:	2200      	movls	r2, #0
 8011992:	b2d2      	uxtb	r2, r2
 8011994:	4413      	add	r3, r2
 8011996:	b2db      	uxtb	r3, r3
 8011998:	b25a      	sxtb	r2, r3
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	701a      	strb	r2, [r3, #0]
}
 801199e:	bf00      	nop
 80119a0:	3714      	adds	r7, #20
 80119a2:	46bd      	mov	sp, r7
 80119a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a8:	4770      	bx	lr

080119aa <sub32>:

static inline void sub32( uint32_t *dst, uint32_t src, signed char *carry )
{
 80119aa:	b480      	push	{r7}
 80119ac:	b085      	sub	sp, #20
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	60f8      	str	r0, [r7, #12]
 80119b2:	60b9      	str	r1, [r7, #8]
 80119b4:	607a      	str	r2, [r7, #4]
    *carry -= ( *dst < src );
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f993 3000 	ldrsb.w	r3, [r3]
 80119bc:	b2db      	uxtb	r3, r3
 80119be:	68fa      	ldr	r2, [r7, #12]
 80119c0:	6812      	ldr	r2, [r2, #0]
 80119c2:	68b9      	ldr	r1, [r7, #8]
 80119c4:	4291      	cmp	r1, r2
 80119c6:	bf8c      	ite	hi
 80119c8:	2201      	movhi	r2, #1
 80119ca:	2200      	movls	r2, #0
 80119cc:	b2d2      	uxtb	r2, r2
 80119ce:	1a9b      	subs	r3, r3, r2
 80119d0:	b2db      	uxtb	r3, r3
 80119d2:	b25a      	sxtb	r2, r3
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	701a      	strb	r2, [r3, #0]
    *dst -= src;
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	1ad2      	subs	r2, r2, r3
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	601a      	str	r2, [r3, #0]
}
 80119e4:	bf00      	nop
 80119e6:	3714      	adds	r7, #20
 80119e8:	46bd      	mov	sp, r7
 80119ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ee:	4770      	bx	lr

080119f0 <fix_negative>:
/*
 * If the result is negative, we get it in the form
 * c * 2^(bits + 32) + N, with c negative and N positive shorter than 'bits'
 */
static inline int fix_negative( mbedtls_mpi *N, signed char c, mbedtls_mpi *C, size_t bits )
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b086      	sub	sp, #24
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	607a      	str	r2, [r7, #4]
 80119fa:	603b      	str	r3, [r7, #0]
 80119fc:	460b      	mov	r3, r1
 80119fe:	72fb      	strb	r3, [r7, #11]
#else
    if( bits == 224 )
        C->p[ C->n - 1 ] = ((mbedtls_mpi_uint) -c) << 32;
    else
#endif
        C->p[ C->n - 1 ] = (mbedtls_mpi_uint) -c;
 8011a00:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011a04:	4258      	negs	r0, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	689a      	ldr	r2, [r3, #8]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	6859      	ldr	r1, [r3, #4]
 8011a0e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011a12:	440b      	add	r3, r1
 8011a14:	009b      	lsls	r3, r3, #2
 8011a16:	4413      	add	r3, r2
 8011a18:	4602      	mov	r2, r0
 8011a1a:	601a      	str	r2, [r3, #0]

    /* N = - ( C - N ) */
    MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( N, C, N ) );
 8011a1c:	68fa      	ldr	r2, [r7, #12]
 8011a1e:	6879      	ldr	r1, [r7, #4]
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f7f9 fc9f 	bl	800b364 <mbedtls_mpi_sub_abs>
 8011a26:	6178      	str	r0, [r7, #20]
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d103      	bne.n	8011a36 <fix_negative+0x46>
    N->s = -1;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f04f 32ff 	mov.w	r2, #4294967295
 8011a34:	601a      	str	r2, [r3, #0]

cleanup:

    return( ret );
 8011a36:	697b      	ldr	r3, [r7, #20]
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	3718      	adds	r7, #24
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <ecp_mod_p224>:
#if defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED)
/*
 * Fast quasi-reduction modulo p224 (FIPS 186-3 D.2.2)
 */
static int ecp_mod_p224( mbedtls_mpi *N )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b092      	sub	sp, #72	@ 0x48
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
    INIT( 224 );
 8011a48:	2300      	movs	r3, #0
 8011a4a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011a4e:	2300      	movs	r3, #0
 8011a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a52:	23e0      	movs	r3, #224	@ 0xe0
 8011a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a56:	2301      	movs	r3, #1
 8011a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a5a:	2308      	movs	r3, #8
 8011a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011a5e:	f107 0308 	add.w	r3, r7, #8
 8011a62:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a66:	009a      	lsls	r2, r3, #2
 8011a68:	f107 0308 	add.w	r3, r7, #8
 8011a6c:	2100      	movs	r1, #0
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f003 ffb4 	bl	80159dc <memset>
 8011a74:	210e      	movs	r1, #14
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f7f8 fc06 	bl	800a288 <mbedtls_mpi_grow>
 8011a7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	f040 821f 	bne.w	8011ec4 <ecp_mod_p224+0x484>
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	689a      	ldr	r2, [r3, #8]
 8011a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a8c:	009b      	lsls	r3, r3, #2
 8011a8e:	4413      	add	r3, r2
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	637b      	str	r3, [r7, #52]	@ 0x34

    SUB(  7 ); SUB( 11 );               NEXT; // A0 += -A7 - A11
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	689b      	ldr	r3, [r3, #8]
 8011a98:	331c      	adds	r3, #28
 8011a9a:	6819      	ldr	r1, [r3, #0]
 8011a9c:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011aa0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7ff ff80 	bl	80119aa <sub32>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	689b      	ldr	r3, [r3, #8]
 8011aae:	332c      	adds	r3, #44	@ 0x2c
 8011ab0:	6819      	ldr	r1, [r3, #0]
 8011ab2:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011ab6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7ff ff75 	bl	80119aa <sub32>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	689a      	ldr	r2, [r3, #8]
 8011ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ac6:	009b      	lsls	r3, r3, #2
 8011ac8:	4413      	add	r3, r2
 8011aca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011acc:	601a      	str	r2, [r3, #0]
 8011ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	689a      	ldr	r2, [r3, #8]
 8011ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	4413      	add	r3, r2
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ae2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011ae6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011aea:	2300      	movs	r3, #0
 8011aec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011af0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	da0b      	bge.n	8011b10 <ecp_mod_p224+0xd0>
 8011af8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011afc:	425b      	negs	r3, r3
 8011afe:	4619      	mov	r1, r3
 8011b00:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b04:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7ff ff4e 	bl	80119aa <sub32>
 8011b0e:	e008      	b.n	8011b22 <ecp_mod_p224+0xe2>
 8011b10:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011b14:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b18:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7ff ff21 	bl	8011964 <add32>
    SUB(  8 ); SUB( 12 );               NEXT; // A1 += -A8 - A12
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	689b      	ldr	r3, [r3, #8]
 8011b26:	3320      	adds	r3, #32
 8011b28:	6819      	ldr	r1, [r3, #0]
 8011b2a:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b2e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7ff ff39 	bl	80119aa <sub32>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	689b      	ldr	r3, [r3, #8]
 8011b3c:	3330      	adds	r3, #48	@ 0x30
 8011b3e:	6819      	ldr	r1, [r3, #0]
 8011b40:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b44:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7ff ff2e 	bl	80119aa <sub32>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	689a      	ldr	r2, [r3, #8]
 8011b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	4413      	add	r3, r2
 8011b58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b5a:	601a      	str	r2, [r3, #0]
 8011b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b5e:	3301      	adds	r3, #1
 8011b60:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	689a      	ldr	r2, [r3, #8]
 8011b66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	4413      	add	r3, r2
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b70:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011b74:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011b78:	2300      	movs	r3, #0
 8011b7a:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011b7e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	da0b      	bge.n	8011b9e <ecp_mod_p224+0x15e>
 8011b86:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011b8a:	425b      	negs	r3, r3
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011b92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7ff ff07 	bl	80119aa <sub32>
 8011b9c:	e008      	b.n	8011bb0 <ecp_mod_p224+0x170>
 8011b9e:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011ba2:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011ba6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7ff feda 	bl	8011964 <add32>
    SUB(  9 ); SUB( 13 );               NEXT; // A2 += -A9 - A13
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	689b      	ldr	r3, [r3, #8]
 8011bb4:	3324      	adds	r3, #36	@ 0x24
 8011bb6:	6819      	ldr	r1, [r3, #0]
 8011bb8:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011bbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7ff fef2 	bl	80119aa <sub32>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	689b      	ldr	r3, [r3, #8]
 8011bca:	3334      	adds	r3, #52	@ 0x34
 8011bcc:	6819      	ldr	r1, [r3, #0]
 8011bce:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011bd2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7ff fee7 	bl	80119aa <sub32>
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	689a      	ldr	r2, [r3, #8]
 8011be0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011be2:	009b      	lsls	r3, r3, #2
 8011be4:	4413      	add	r3, r2
 8011be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011be8:	601a      	str	r2, [r3, #0]
 8011bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bec:	3301      	adds	r3, #1
 8011bee:	647b      	str	r3, [r7, #68]	@ 0x44
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	689a      	ldr	r2, [r3, #8]
 8011bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bf6:	009b      	lsls	r3, r3, #2
 8011bf8:	4413      	add	r3, r2
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bfe:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011c02:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011c06:	2300      	movs	r3, #0
 8011c08:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011c0c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	da0b      	bge.n	8011c2c <ecp_mod_p224+0x1ec>
 8011c14:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011c18:	425b      	negs	r3, r3
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7ff fec0 	bl	80119aa <sub32>
 8011c2a:	e008      	b.n	8011c3e <ecp_mod_p224+0x1fe>
 8011c2c:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011c30:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c34:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7ff fe93 	bl	8011964 <add32>
    SUB( 10 ); ADD(  7 ); ADD( 11 );    NEXT; // A3 += -A10 + A7 + A11
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	689b      	ldr	r3, [r3, #8]
 8011c42:	3328      	adds	r3, #40	@ 0x28
 8011c44:	6819      	ldr	r1, [r3, #0]
 8011c46:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f7ff feab 	bl	80119aa <sub32>
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	331c      	adds	r3, #28
 8011c5a:	6819      	ldr	r1, [r3, #0]
 8011c5c:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7ff fe7d 	bl	8011964 <add32>
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	689b      	ldr	r3, [r3, #8]
 8011c6e:	332c      	adds	r3, #44	@ 0x2c
 8011c70:	6819      	ldr	r1, [r3, #0]
 8011c72:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011c76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7ff fe72 	bl	8011964 <add32>
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	689a      	ldr	r2, [r3, #8]
 8011c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	4413      	add	r3, r2
 8011c8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011c8c:	601a      	str	r2, [r3, #0]
 8011c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c90:	3301      	adds	r3, #1
 8011c92:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	689a      	ldr	r2, [r3, #8]
 8011c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c9a:	009b      	lsls	r3, r3, #2
 8011c9c:	4413      	add	r3, r2
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ca2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011ca6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011caa:	2300      	movs	r3, #0
 8011cac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011cb0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	da0b      	bge.n	8011cd0 <ecp_mod_p224+0x290>
 8011cb8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011cbc:	425b      	negs	r3, r3
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011cc4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7ff fe6e 	bl	80119aa <sub32>
 8011cce:	e008      	b.n	8011ce2 <ecp_mod_p224+0x2a2>
 8011cd0:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011cd4:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011cd8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f7ff fe41 	bl	8011964 <add32>
    SUB( 11 ); ADD(  8 ); ADD( 12 );    NEXT; // A4 += -A11 + A8 + A12
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	689b      	ldr	r3, [r3, #8]
 8011ce6:	332c      	adds	r3, #44	@ 0x2c
 8011ce8:	6819      	ldr	r1, [r3, #0]
 8011cea:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011cee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f7ff fe59 	bl	80119aa <sub32>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	689b      	ldr	r3, [r3, #8]
 8011cfc:	3320      	adds	r3, #32
 8011cfe:	6819      	ldr	r1, [r3, #0]
 8011d00:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d04:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7ff fe2b 	bl	8011964 <add32>
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	3330      	adds	r3, #48	@ 0x30
 8011d14:	6819      	ldr	r1, [r3, #0]
 8011d16:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7ff fe20 	bl	8011964 <add32>
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	689a      	ldr	r2, [r3, #8]
 8011d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	4413      	add	r3, r2
 8011d2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d30:	601a      	str	r2, [r3, #0]
 8011d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d34:	3301      	adds	r3, #1
 8011d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	689a      	ldr	r2, [r3, #8]
 8011d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	4413      	add	r3, r2
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d46:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011d4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011d4e:	2300      	movs	r3, #0
 8011d50:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011d54:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	da0b      	bge.n	8011d74 <ecp_mod_p224+0x334>
 8011d5c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011d60:	425b      	negs	r3, r3
 8011d62:	4619      	mov	r1, r3
 8011d64:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d68:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7ff fe1c 	bl	80119aa <sub32>
 8011d72:	e008      	b.n	8011d86 <ecp_mod_p224+0x346>
 8011d74:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011d78:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7ff fdef 	bl	8011964 <add32>
    SUB( 12 ); ADD(  9 ); ADD( 13 );    NEXT; // A5 += -A12 + A9 + A13
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	689b      	ldr	r3, [r3, #8]
 8011d8a:	3330      	adds	r3, #48	@ 0x30
 8011d8c:	6819      	ldr	r1, [r3, #0]
 8011d8e:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011d92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7ff fe07 	bl	80119aa <sub32>
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	3324      	adds	r3, #36	@ 0x24
 8011da2:	6819      	ldr	r1, [r3, #0]
 8011da4:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011da8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7ff fdd9 	bl	8011964 <add32>
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	689b      	ldr	r3, [r3, #8]
 8011db6:	3334      	adds	r3, #52	@ 0x34
 8011db8:	6819      	ldr	r1, [r3, #0]
 8011dba:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011dbe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7ff fdce 	bl	8011964 <add32>
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	689a      	ldr	r2, [r3, #8]
 8011dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	4413      	add	r3, r2
 8011dd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011dd4:	601a      	str	r2, [r3, #0]
 8011dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011dd8:	3301      	adds	r3, #1
 8011dda:	647b      	str	r3, [r7, #68]	@ 0x44
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	689a      	ldr	r2, [r3, #8]
 8011de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	4413      	add	r3, r2
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8011dea:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8011dee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 8011df2:	2300      	movs	r3, #0
 8011df4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8011df8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	da0b      	bge.n	8011e18 <ecp_mod_p224+0x3d8>
 8011e00:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8011e04:	425b      	negs	r3, r3
 8011e06:	4619      	mov	r1, r3
 8011e08:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011e0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7ff fdca 	bl	80119aa <sub32>
 8011e16:	e008      	b.n	8011e2a <ecp_mod_p224+0x3ea>
 8011e18:	f997 103b 	ldrsb.w	r1, [r7, #59]	@ 0x3b
 8011e1c:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011e20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e24:	4618      	mov	r0, r3
 8011e26:	f7ff fd9d 	bl	8011964 <add32>
    SUB( 13 ); ADD( 10 );               LAST; // A6 += -A13 + A10
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	689b      	ldr	r3, [r3, #8]
 8011e2e:	3334      	adds	r3, #52	@ 0x34
 8011e30:	6819      	ldr	r1, [r3, #0]
 8011e32:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011e36:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7ff fdb5 	bl	80119aa <sub32>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	689b      	ldr	r3, [r3, #8]
 8011e44:	3328      	adds	r3, #40	@ 0x28
 8011e46:	6819      	ldr	r1, [r3, #0]
 8011e48:	f107 023a 	add.w	r2, r7, #58	@ 0x3a
 8011e4c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8011e50:	4618      	mov	r0, r3
 8011e52:	f7ff fd87 	bl	8011964 <add32>
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	689a      	ldr	r2, [r3, #8]
 8011e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	4413      	add	r3, r2
 8011e60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e62:	601a      	str	r2, [r3, #0]
 8011e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e66:	3301      	adds	r3, #1
 8011e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e6a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8011e6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011e72:	b25b      	sxtb	r3, r3
 8011e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	689a      	ldr	r2, [r3, #8]
 8011e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e7c:	009b      	lsls	r3, r3, #2
 8011e7e:	4413      	add	r3, r2
 8011e80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e82:	601a      	str	r2, [r3, #0]
 8011e84:	2300      	movs	r3, #0
 8011e86:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e88:	e006      	b.n	8011e98 <ecp_mod_p224+0x458>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	689a      	ldr	r2, [r3, #8]
 8011e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4413      	add	r3, r2
 8011e94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e96:	601a      	str	r2, [r3, #0]
 8011e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d3f0      	bcc.n	8011e8a <ecp_mod_p224+0x44a>
 8011ea8:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	da08      	bge.n	8011ec2 <ecp_mod_p224+0x482>
 8011eb0:	f997 103a 	ldrsb.w	r1, [r7, #58]	@ 0x3a
 8011eb4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7ff fd98 	bl	80119f0 <fix_negative>
 8011ec0:	e000      	b.n	8011ec4 <ecp_mod_p224+0x484>

cleanup:
 8011ec2:	bf00      	nop
    return( ret );
 8011ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3748      	adds	r7, #72	@ 0x48
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd80      	pop	{r7, pc}

08011ece <ecp_mod_p256>:
#if defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED)
/*
 * Fast quasi-reduction modulo p256 (FIPS 186-3 D.2.3)
 */
static int ecp_mod_p256( mbedtls_mpi *N )
{
 8011ece:	b580      	push	{r7, lr}
 8011ed0:	b094      	sub	sp, #80	@ 0x50
 8011ed2:	af00      	add	r7, sp, #0
 8011ed4:	6078      	str	r0, [r7, #4]
    INIT( 256 );
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011edc:	2300      	movs	r3, #0
 8011ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ee0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8011eea:	2309      	movs	r3, #9
 8011eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8011eee:	f107 030c 	add.w	r3, r7, #12
 8011ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ef6:	009a      	lsls	r2, r3, #2
 8011ef8:	f107 030c 	add.w	r3, r7, #12
 8011efc:	2100      	movs	r1, #0
 8011efe:	4618      	mov	r0, r3
 8011f00:	f003 fd6c 	bl	80159dc <memset>
 8011f04:	2110      	movs	r1, #16
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7f8 f9be 	bl	800a288 <mbedtls_mpi_grow>
 8011f0c:	6478      	str	r0, [r7, #68]	@ 0x44
 8011f0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	f040 83f2 	bne.w	80126fa <ecp_mod_p256+0x82c>
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	689a      	ldr	r2, [r3, #8]
 8011f1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f1c:	009b      	lsls	r3, r3, #2
 8011f1e:	4413      	add	r3, r2
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	63fb      	str	r3, [r7, #60]	@ 0x3c

    ADD(  8 ); ADD(  9 );
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	689b      	ldr	r3, [r3, #8]
 8011f28:	3320      	adds	r3, #32
 8011f2a:	6819      	ldr	r1, [r3, #0]
 8011f2c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7ff fd15 	bl	8011964 <add32>
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	3324      	adds	r3, #36	@ 0x24
 8011f40:	6819      	ldr	r1, [r3, #0]
 8011f42:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f46:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7ff fd0a 	bl	8011964 <add32>
    SUB( 11 ); SUB( 12 ); SUB( 13 ); SUB( 14 );             NEXT; // A0
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	689b      	ldr	r3, [r3, #8]
 8011f54:	332c      	adds	r3, #44	@ 0x2c
 8011f56:	6819      	ldr	r1, [r3, #0]
 8011f58:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7ff fd22 	bl	80119aa <sub32>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	689b      	ldr	r3, [r3, #8]
 8011f6a:	3330      	adds	r3, #48	@ 0x30
 8011f6c:	6819      	ldr	r1, [r3, #0]
 8011f6e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f72:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7ff fd17 	bl	80119aa <sub32>
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	689b      	ldr	r3, [r3, #8]
 8011f80:	3334      	adds	r3, #52	@ 0x34
 8011f82:	6819      	ldr	r1, [r3, #0]
 8011f84:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7ff fd0c 	bl	80119aa <sub32>
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	3338      	adds	r3, #56	@ 0x38
 8011f98:	6819      	ldr	r1, [r3, #0]
 8011f9a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011f9e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7ff fd01 	bl	80119aa <sub32>
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	689a      	ldr	r2, [r3, #8]
 8011fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fae:	009b      	lsls	r3, r3, #2
 8011fb0:	4413      	add	r3, r2
 8011fb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011fb4:	601a      	str	r2, [r3, #0]
 8011fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fb8:	3301      	adds	r3, #1
 8011fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	689a      	ldr	r2, [r3, #8]
 8011fc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	4413      	add	r3, r2
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011fca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8011fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011fd8:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	da0b      	bge.n	8011ff8 <ecp_mod_p256+0x12a>
 8011fe0:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8011fe4:	425b      	negs	r3, r3
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8011fec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7ff fcda 	bl	80119aa <sub32>
 8011ff6:	e008      	b.n	801200a <ecp_mod_p256+0x13c>
 8011ff8:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 8011ffc:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012000:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012004:	4618      	mov	r0, r3
 8012006:	f7ff fcad 	bl	8011964 <add32>

    ADD(  9 ); ADD( 10 );
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	689b      	ldr	r3, [r3, #8]
 801200e:	3324      	adds	r3, #36	@ 0x24
 8012010:	6819      	ldr	r1, [r3, #0]
 8012012:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012016:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801201a:	4618      	mov	r0, r3
 801201c:	f7ff fca2 	bl	8011964 <add32>
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	689b      	ldr	r3, [r3, #8]
 8012024:	3328      	adds	r3, #40	@ 0x28
 8012026:	6819      	ldr	r1, [r3, #0]
 8012028:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801202c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012030:	4618      	mov	r0, r3
 8012032:	f7ff fc97 	bl	8011964 <add32>
    SUB( 12 ); SUB( 13 ); SUB( 14 ); SUB( 15 );             NEXT; // A1
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	689b      	ldr	r3, [r3, #8]
 801203a:	3330      	adds	r3, #48	@ 0x30
 801203c:	6819      	ldr	r1, [r3, #0]
 801203e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012042:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012046:	4618      	mov	r0, r3
 8012048:	f7ff fcaf 	bl	80119aa <sub32>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	689b      	ldr	r3, [r3, #8]
 8012050:	3334      	adds	r3, #52	@ 0x34
 8012052:	6819      	ldr	r1, [r3, #0]
 8012054:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012058:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801205c:	4618      	mov	r0, r3
 801205e:	f7ff fca4 	bl	80119aa <sub32>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	689b      	ldr	r3, [r3, #8]
 8012066:	3338      	adds	r3, #56	@ 0x38
 8012068:	6819      	ldr	r1, [r3, #0]
 801206a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801206e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012072:	4618      	mov	r0, r3
 8012074:	f7ff fc99 	bl	80119aa <sub32>
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	689b      	ldr	r3, [r3, #8]
 801207c:	333c      	adds	r3, #60	@ 0x3c
 801207e:	6819      	ldr	r1, [r3, #0]
 8012080:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012084:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012088:	4618      	mov	r0, r3
 801208a:	f7ff fc8e 	bl	80119aa <sub32>
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	689a      	ldr	r2, [r3, #8]
 8012092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012094:	009b      	lsls	r3, r3, #2
 8012096:	4413      	add	r3, r2
 8012098:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801209a:	601a      	str	r2, [r3, #0]
 801209c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801209e:	3301      	adds	r3, #1
 80120a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	689a      	ldr	r2, [r3, #8]
 80120a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120a8:	009b      	lsls	r3, r3, #2
 80120aa:	4413      	add	r3, r2
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80120b0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80120b4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80120b8:	2300      	movs	r3, #0
 80120ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80120be:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	da0b      	bge.n	80120de <ecp_mod_p256+0x210>
 80120c6:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80120ca:	425b      	negs	r3, r3
 80120cc:	4619      	mov	r1, r3
 80120ce:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80120d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff fc67 	bl	80119aa <sub32>
 80120dc:	e008      	b.n	80120f0 <ecp_mod_p256+0x222>
 80120de:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80120e2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80120e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7ff fc3a 	bl	8011964 <add32>

    ADD( 10 ); ADD( 11 );
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	689b      	ldr	r3, [r3, #8]
 80120f4:	3328      	adds	r3, #40	@ 0x28
 80120f6:	6819      	ldr	r1, [r3, #0]
 80120f8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80120fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012100:	4618      	mov	r0, r3
 8012102:	f7ff fc2f 	bl	8011964 <add32>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	689b      	ldr	r3, [r3, #8]
 801210a:	332c      	adds	r3, #44	@ 0x2c
 801210c:	6819      	ldr	r1, [r3, #0]
 801210e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012112:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012116:	4618      	mov	r0, r3
 8012118:	f7ff fc24 	bl	8011964 <add32>
    SUB( 13 ); SUB( 14 ); SUB( 15 );                        NEXT; // A2
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	689b      	ldr	r3, [r3, #8]
 8012120:	3334      	adds	r3, #52	@ 0x34
 8012122:	6819      	ldr	r1, [r3, #0]
 8012124:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012128:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801212c:	4618      	mov	r0, r3
 801212e:	f7ff fc3c 	bl	80119aa <sub32>
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	689b      	ldr	r3, [r3, #8]
 8012136:	3338      	adds	r3, #56	@ 0x38
 8012138:	6819      	ldr	r1, [r3, #0]
 801213a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801213e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012142:	4618      	mov	r0, r3
 8012144:	f7ff fc31 	bl	80119aa <sub32>
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	689b      	ldr	r3, [r3, #8]
 801214c:	333c      	adds	r3, #60	@ 0x3c
 801214e:	6819      	ldr	r1, [r3, #0]
 8012150:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012154:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012158:	4618      	mov	r0, r3
 801215a:	f7ff fc26 	bl	80119aa <sub32>
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	689a      	ldr	r2, [r3, #8]
 8012162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012164:	009b      	lsls	r3, r3, #2
 8012166:	4413      	add	r3, r2
 8012168:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801216a:	601a      	str	r2, [r3, #0]
 801216c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801216e:	3301      	adds	r3, #1
 8012170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	689a      	ldr	r2, [r3, #8]
 8012176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012178:	009b      	lsls	r3, r3, #2
 801217a:	4413      	add	r3, r2
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012180:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8012184:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012188:	2300      	movs	r3, #0
 801218a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801218e:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 8012192:	2b00      	cmp	r3, #0
 8012194:	da0b      	bge.n	80121ae <ecp_mod_p256+0x2e0>
 8012196:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 801219a:	425b      	negs	r3, r3
 801219c:	4619      	mov	r1, r3
 801219e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7ff fbff 	bl	80119aa <sub32>
 80121ac:	e008      	b.n	80121c0 <ecp_mod_p256+0x2f2>
 80121ae:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80121b2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7ff fbd2 	bl	8011964 <add32>

    ADD( 11 ); ADD( 11 ); ADD( 12 ); ADD( 12 ); ADD( 13 );
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	689b      	ldr	r3, [r3, #8]
 80121c4:	332c      	adds	r3, #44	@ 0x2c
 80121c6:	6819      	ldr	r1, [r3, #0]
 80121c8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7ff fbc7 	bl	8011964 <add32>
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	689b      	ldr	r3, [r3, #8]
 80121da:	332c      	adds	r3, #44	@ 0x2c
 80121dc:	6819      	ldr	r1, [r3, #0]
 80121de:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121e2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7ff fbbc 	bl	8011964 <add32>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	689b      	ldr	r3, [r3, #8]
 80121f0:	3330      	adds	r3, #48	@ 0x30
 80121f2:	6819      	ldr	r1, [r3, #0]
 80121f4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80121f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7ff fbb1 	bl	8011964 <add32>
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	689b      	ldr	r3, [r3, #8]
 8012206:	3330      	adds	r3, #48	@ 0x30
 8012208:	6819      	ldr	r1, [r3, #0]
 801220a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801220e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012212:	4618      	mov	r0, r3
 8012214:	f7ff fba6 	bl	8011964 <add32>
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	689b      	ldr	r3, [r3, #8]
 801221c:	3334      	adds	r3, #52	@ 0x34
 801221e:	6819      	ldr	r1, [r3, #0]
 8012220:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012224:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012228:	4618      	mov	r0, r3
 801222a:	f7ff fb9b 	bl	8011964 <add32>
    SUB( 15 ); SUB(  8 ); SUB(  9 );                        NEXT; // A3
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	689b      	ldr	r3, [r3, #8]
 8012232:	333c      	adds	r3, #60	@ 0x3c
 8012234:	6819      	ldr	r1, [r3, #0]
 8012236:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801223a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801223e:	4618      	mov	r0, r3
 8012240:	f7ff fbb3 	bl	80119aa <sub32>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	3320      	adds	r3, #32
 801224a:	6819      	ldr	r1, [r3, #0]
 801224c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012250:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012254:	4618      	mov	r0, r3
 8012256:	f7ff fba8 	bl	80119aa <sub32>
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	689b      	ldr	r3, [r3, #8]
 801225e:	3324      	adds	r3, #36	@ 0x24
 8012260:	6819      	ldr	r1, [r3, #0]
 8012262:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012266:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801226a:	4618      	mov	r0, r3
 801226c:	f7ff fb9d 	bl	80119aa <sub32>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	689a      	ldr	r2, [r3, #8]
 8012274:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	4413      	add	r3, r2
 801227a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801227c:	601a      	str	r2, [r3, #0]
 801227e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012280:	3301      	adds	r3, #1
 8012282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	689a      	ldr	r2, [r3, #8]
 8012288:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	4413      	add	r3, r2
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012292:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8012296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801229a:	2300      	movs	r3, #0
 801229c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80122a0:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	da0b      	bge.n	80122c0 <ecp_mod_p256+0x3f2>
 80122a8:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80122ac:	425b      	negs	r3, r3
 80122ae:	4619      	mov	r1, r3
 80122b0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7ff fb76 	bl	80119aa <sub32>
 80122be:	e008      	b.n	80122d2 <ecp_mod_p256+0x404>
 80122c0:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80122c4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7ff fb49 	bl	8011964 <add32>

    ADD( 12 ); ADD( 12 ); ADD( 13 ); ADD( 13 ); ADD( 14 );
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	689b      	ldr	r3, [r3, #8]
 80122d6:	3330      	adds	r3, #48	@ 0x30
 80122d8:	6819      	ldr	r1, [r3, #0]
 80122da:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7ff fb3e 	bl	8011964 <add32>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	3330      	adds	r3, #48	@ 0x30
 80122ee:	6819      	ldr	r1, [r3, #0]
 80122f0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80122f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80122f8:	4618      	mov	r0, r3
 80122fa:	f7ff fb33 	bl	8011964 <add32>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	689b      	ldr	r3, [r3, #8]
 8012302:	3334      	adds	r3, #52	@ 0x34
 8012304:	6819      	ldr	r1, [r3, #0]
 8012306:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801230a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801230e:	4618      	mov	r0, r3
 8012310:	f7ff fb28 	bl	8011964 <add32>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	689b      	ldr	r3, [r3, #8]
 8012318:	3334      	adds	r3, #52	@ 0x34
 801231a:	6819      	ldr	r1, [r3, #0]
 801231c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012320:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012324:	4618      	mov	r0, r3
 8012326:	f7ff fb1d 	bl	8011964 <add32>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	689b      	ldr	r3, [r3, #8]
 801232e:	3338      	adds	r3, #56	@ 0x38
 8012330:	6819      	ldr	r1, [r3, #0]
 8012332:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012336:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801233a:	4618      	mov	r0, r3
 801233c:	f7ff fb12 	bl	8011964 <add32>
    SUB(  9 ); SUB( 10 );                                   NEXT; // A4
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	689b      	ldr	r3, [r3, #8]
 8012344:	3324      	adds	r3, #36	@ 0x24
 8012346:	6819      	ldr	r1, [r3, #0]
 8012348:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801234c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012350:	4618      	mov	r0, r3
 8012352:	f7ff fb2a 	bl	80119aa <sub32>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	689b      	ldr	r3, [r3, #8]
 801235a:	3328      	adds	r3, #40	@ 0x28
 801235c:	6819      	ldr	r1, [r3, #0]
 801235e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012362:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012366:	4618      	mov	r0, r3
 8012368:	f7ff fb1f 	bl	80119aa <sub32>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	689a      	ldr	r2, [r3, #8]
 8012370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012372:	009b      	lsls	r3, r3, #2
 8012374:	4413      	add	r3, r2
 8012376:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012378:	601a      	str	r2, [r3, #0]
 801237a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801237c:	3301      	adds	r3, #1
 801237e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	689a      	ldr	r2, [r3, #8]
 8012384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	4413      	add	r3, r2
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801238e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8012392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012396:	2300      	movs	r3, #0
 8012398:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801239c:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	da0b      	bge.n	80123bc <ecp_mod_p256+0x4ee>
 80123a4:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80123a8:	425b      	negs	r3, r3
 80123aa:	4619      	mov	r1, r3
 80123ac:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123b0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7ff faf8 	bl	80119aa <sub32>
 80123ba:	e008      	b.n	80123ce <ecp_mod_p256+0x500>
 80123bc:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80123c0:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7ff facb 	bl	8011964 <add32>

    ADD( 13 ); ADD( 13 ); ADD( 14 ); ADD( 14 ); ADD( 15 );
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	689b      	ldr	r3, [r3, #8]
 80123d2:	3334      	adds	r3, #52	@ 0x34
 80123d4:	6819      	ldr	r1, [r3, #0]
 80123d6:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123da:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123de:	4618      	mov	r0, r3
 80123e0:	f7ff fac0 	bl	8011964 <add32>
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	689b      	ldr	r3, [r3, #8]
 80123e8:	3334      	adds	r3, #52	@ 0x34
 80123ea:	6819      	ldr	r1, [r3, #0]
 80123ec:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80123f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7ff fab5 	bl	8011964 <add32>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	689b      	ldr	r3, [r3, #8]
 80123fe:	3338      	adds	r3, #56	@ 0x38
 8012400:	6819      	ldr	r1, [r3, #0]
 8012402:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012406:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801240a:	4618      	mov	r0, r3
 801240c:	f7ff faaa 	bl	8011964 <add32>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	689b      	ldr	r3, [r3, #8]
 8012414:	3338      	adds	r3, #56	@ 0x38
 8012416:	6819      	ldr	r1, [r3, #0]
 8012418:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801241c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012420:	4618      	mov	r0, r3
 8012422:	f7ff fa9f 	bl	8011964 <add32>
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	689b      	ldr	r3, [r3, #8]
 801242a:	333c      	adds	r3, #60	@ 0x3c
 801242c:	6819      	ldr	r1, [r3, #0]
 801242e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012432:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012436:	4618      	mov	r0, r3
 8012438:	f7ff fa94 	bl	8011964 <add32>
    SUB( 10 ); SUB( 11 );                                   NEXT; // A5
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	689b      	ldr	r3, [r3, #8]
 8012440:	3328      	adds	r3, #40	@ 0x28
 8012442:	6819      	ldr	r1, [r3, #0]
 8012444:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012448:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801244c:	4618      	mov	r0, r3
 801244e:	f7ff faac 	bl	80119aa <sub32>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	689b      	ldr	r3, [r3, #8]
 8012456:	332c      	adds	r3, #44	@ 0x2c
 8012458:	6819      	ldr	r1, [r3, #0]
 801245a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801245e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff faa1 	bl	80119aa <sub32>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	689a      	ldr	r2, [r3, #8]
 801246c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	4413      	add	r3, r2
 8012472:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012474:	601a      	str	r2, [r3, #0]
 8012476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012478:	3301      	adds	r3, #1
 801247a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	689a      	ldr	r2, [r3, #8]
 8012480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	4413      	add	r3, r2
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801248a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 801248e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012492:	2300      	movs	r3, #0
 8012494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8012498:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 801249c:	2b00      	cmp	r3, #0
 801249e:	da0b      	bge.n	80124b8 <ecp_mod_p256+0x5ea>
 80124a0:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80124a4:	425b      	negs	r3, r3
 80124a6:	4619      	mov	r1, r3
 80124a8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7ff fa7a 	bl	80119aa <sub32>
 80124b6:	e008      	b.n	80124ca <ecp_mod_p256+0x5fc>
 80124b8:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80124bc:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7ff fa4d 	bl	8011964 <add32>

    ADD( 14 ); ADD( 14 ); ADD( 15 ); ADD( 15 ); ADD( 14 ); ADD( 13 );
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	689b      	ldr	r3, [r3, #8]
 80124ce:	3338      	adds	r3, #56	@ 0x38
 80124d0:	6819      	ldr	r1, [r3, #0]
 80124d2:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124da:	4618      	mov	r0, r3
 80124dc:	f7ff fa42 	bl	8011964 <add32>
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	689b      	ldr	r3, [r3, #8]
 80124e4:	3338      	adds	r3, #56	@ 0x38
 80124e6:	6819      	ldr	r1, [r3, #0]
 80124e8:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80124ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7ff fa37 	bl	8011964 <add32>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	689b      	ldr	r3, [r3, #8]
 80124fa:	333c      	adds	r3, #60	@ 0x3c
 80124fc:	6819      	ldr	r1, [r3, #0]
 80124fe:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012502:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012506:	4618      	mov	r0, r3
 8012508:	f7ff fa2c 	bl	8011964 <add32>
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	689b      	ldr	r3, [r3, #8]
 8012510:	333c      	adds	r3, #60	@ 0x3c
 8012512:	6819      	ldr	r1, [r3, #0]
 8012514:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012518:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801251c:	4618      	mov	r0, r3
 801251e:	f7ff fa21 	bl	8011964 <add32>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	689b      	ldr	r3, [r3, #8]
 8012526:	3338      	adds	r3, #56	@ 0x38
 8012528:	6819      	ldr	r1, [r3, #0]
 801252a:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801252e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012532:	4618      	mov	r0, r3
 8012534:	f7ff fa16 	bl	8011964 <add32>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	689b      	ldr	r3, [r3, #8]
 801253c:	3334      	adds	r3, #52	@ 0x34
 801253e:	6819      	ldr	r1, [r3, #0]
 8012540:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012544:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012548:	4618      	mov	r0, r3
 801254a:	f7ff fa0b 	bl	8011964 <add32>
    SUB(  8 ); SUB(  9 );                                   NEXT; // A6
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	689b      	ldr	r3, [r3, #8]
 8012552:	3320      	adds	r3, #32
 8012554:	6819      	ldr	r1, [r3, #0]
 8012556:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801255a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801255e:	4618      	mov	r0, r3
 8012560:	f7ff fa23 	bl	80119aa <sub32>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	689b      	ldr	r3, [r3, #8]
 8012568:	3324      	adds	r3, #36	@ 0x24
 801256a:	6819      	ldr	r1, [r3, #0]
 801256c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012570:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012574:	4618      	mov	r0, r3
 8012576:	f7ff fa18 	bl	80119aa <sub32>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	689a      	ldr	r2, [r3, #8]
 801257e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012580:	009b      	lsls	r3, r3, #2
 8012582:	4413      	add	r3, r2
 8012584:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012586:	601a      	str	r2, [r3, #0]
 8012588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801258a:	3301      	adds	r3, #1
 801258c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	689a      	ldr	r2, [r3, #8]
 8012592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012594:	009b      	lsls	r3, r3, #2
 8012596:	4413      	add	r3, r2
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801259c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80125a0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80125a4:	2300      	movs	r3, #0
 80125a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80125aa:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	da0b      	bge.n	80125ca <ecp_mod_p256+0x6fc>
 80125b2:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
 80125b6:	425b      	negs	r3, r3
 80125b8:	4619      	mov	r1, r3
 80125ba:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80125be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7ff f9f1 	bl	80119aa <sub32>
 80125c8:	e008      	b.n	80125dc <ecp_mod_p256+0x70e>
 80125ca:	f997 1043 	ldrsb.w	r1, [r7, #67]	@ 0x43
 80125ce:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80125d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7ff f9c4 	bl	8011964 <add32>

    ADD( 15 ); ADD( 15 ); ADD( 15 ); ADD( 8 );
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	333c      	adds	r3, #60	@ 0x3c
 80125e2:	6819      	ldr	r1, [r3, #0]
 80125e4:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80125e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7ff f9b9 	bl	8011964 <add32>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	689b      	ldr	r3, [r3, #8]
 80125f6:	333c      	adds	r3, #60	@ 0x3c
 80125f8:	6819      	ldr	r1, [r3, #0]
 80125fa:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 80125fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff f9ae 	bl	8011964 <add32>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	689b      	ldr	r3, [r3, #8]
 801260c:	333c      	adds	r3, #60	@ 0x3c
 801260e:	6819      	ldr	r1, [r3, #0]
 8012610:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012614:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012618:	4618      	mov	r0, r3
 801261a:	f7ff f9a3 	bl	8011964 <add32>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	689b      	ldr	r3, [r3, #8]
 8012622:	3320      	adds	r3, #32
 8012624:	6819      	ldr	r1, [r3, #0]
 8012626:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801262a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801262e:	4618      	mov	r0, r3
 8012630:	f7ff f998 	bl	8011964 <add32>
    SUB( 10 ); SUB( 11 ); SUB( 12 ); SUB( 13 );             LAST; // A7
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	689b      	ldr	r3, [r3, #8]
 8012638:	3328      	adds	r3, #40	@ 0x28
 801263a:	6819      	ldr	r1, [r3, #0]
 801263c:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012640:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012644:	4618      	mov	r0, r3
 8012646:	f7ff f9b0 	bl	80119aa <sub32>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	689b      	ldr	r3, [r3, #8]
 801264e:	332c      	adds	r3, #44	@ 0x2c
 8012650:	6819      	ldr	r1, [r3, #0]
 8012652:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012656:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801265a:	4618      	mov	r0, r3
 801265c:	f7ff f9a5 	bl	80119aa <sub32>
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	689b      	ldr	r3, [r3, #8]
 8012664:	3330      	adds	r3, #48	@ 0x30
 8012666:	6819      	ldr	r1, [r3, #0]
 8012668:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 801266c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012670:	4618      	mov	r0, r3
 8012672:	f7ff f99a 	bl	80119aa <sub32>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	689b      	ldr	r3, [r3, #8]
 801267a:	3334      	adds	r3, #52	@ 0x34
 801267c:	6819      	ldr	r1, [r3, #0]
 801267e:	f107 0242 	add.w	r2, r7, #66	@ 0x42
 8012682:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8012686:	4618      	mov	r0, r3
 8012688:	f7ff f98f 	bl	80119aa <sub32>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	689a      	ldr	r2, [r3, #8]
 8012690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012692:	009b      	lsls	r3, r3, #2
 8012694:	4413      	add	r3, r2
 8012696:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012698:	601a      	str	r2, [r3, #0]
 801269a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801269c:	3301      	adds	r3, #1
 801269e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80126a0:	f997 3042 	ldrsb.w	r3, [r7, #66]	@ 0x42
 80126a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80126a8:	b25b      	sxtb	r3, r3
 80126aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	689a      	ldr	r2, [r3, #8]
 80126b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126b2:	009b      	lsls	r3, r3, #2
 80126b4:	4413      	add	r3, r2
 80126b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80126b8:	601a      	str	r2, [r3, #0]
 80126ba:	2300      	movs	r3, #0
 80126bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126be:	e006      	b.n	80126ce <ecp_mod_p256+0x800>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	689a      	ldr	r2, [r3, #8]
 80126c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126c6:	009b      	lsls	r3, r3, #2
 80126c8:	4413      	add	r3, r2
 80126ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80126cc:	601a      	str	r2, [r3, #0]
 80126ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126d0:	3301      	adds	r3, #1
 80126d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80126da:	429a      	cmp	r2, r3
 80126dc:	d3f0      	bcc.n	80126c0 <ecp_mod_p256+0x7f2>
 80126de:	f997 3042 	ldrsb.w	r3, [r7, #66]	@ 0x42
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	da08      	bge.n	80126f8 <ecp_mod_p256+0x82a>
 80126e6:	f997 1042 	ldrsb.w	r1, [r7, #66]	@ 0x42
 80126ea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80126ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7ff f97d 	bl	80119f0 <fix_negative>
 80126f6:	e000      	b.n	80126fa <ecp_mod_p256+0x82c>

cleanup:
 80126f8:	bf00      	nop
    return( ret );
 80126fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3750      	adds	r7, #80	@ 0x50
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <ecp_mod_p384>:
#if defined(MBEDTLS_ECP_DP_SECP384R1_ENABLED)
/*
 * Fast quasi-reduction modulo p384 (FIPS 186-3 D.2.4)
 */
static int ecp_mod_p384( mbedtls_mpi *N )
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b098      	sub	sp, #96	@ 0x60
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
    INIT( 384 );
 801270c:	2300      	movs	r3, #0
 801270e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012712:	2300      	movs	r3, #0
 8012714:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012716:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801271a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801271c:	2301      	movs	r3, #1
 801271e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012720:	230d      	movs	r3, #13
 8012722:	647b      	str	r3, [r7, #68]	@ 0x44
 8012724:	f107 030c 	add.w	r3, r7, #12
 8012728:	64bb      	str	r3, [r7, #72]	@ 0x48
 801272a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801272c:	009a      	lsls	r2, r3, #2
 801272e:	f107 030c 	add.w	r3, r7, #12
 8012732:	2100      	movs	r1, #0
 8012734:	4618      	mov	r0, r3
 8012736:	f003 f951 	bl	80159dc <memset>
 801273a:	2118      	movs	r1, #24
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f7f7 fda3 	bl	800a288 <mbedtls_mpi_grow>
 8012742:	6578      	str	r0, [r7, #84]	@ 0x54
 8012744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012746:	2b00      	cmp	r3, #0
 8012748:	f040 852f 	bne.w	80131aa <ecp_mod_p384+0xaa6>
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	689a      	ldr	r2, [r3, #8]
 8012750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	4413      	add	r3, r2
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	64fb      	str	r3, [r7, #76]	@ 0x4c

    ADD( 12 ); ADD( 21 ); ADD( 20 );
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	689b      	ldr	r3, [r3, #8]
 801275e:	3330      	adds	r3, #48	@ 0x30
 8012760:	6819      	ldr	r1, [r3, #0]
 8012762:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012766:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801276a:	4618      	mov	r0, r3
 801276c:	f7ff f8fa 	bl	8011964 <add32>
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	689b      	ldr	r3, [r3, #8]
 8012774:	3354      	adds	r3, #84	@ 0x54
 8012776:	6819      	ldr	r1, [r3, #0]
 8012778:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801277c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012780:	4618      	mov	r0, r3
 8012782:	f7ff f8ef 	bl	8011964 <add32>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	689b      	ldr	r3, [r3, #8]
 801278a:	3350      	adds	r3, #80	@ 0x50
 801278c:	6819      	ldr	r1, [r3, #0]
 801278e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012792:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012796:	4618      	mov	r0, r3
 8012798:	f7ff f8e4 	bl	8011964 <add32>
    SUB( 23 );                                              NEXT; // A0
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	335c      	adds	r3, #92	@ 0x5c
 80127a2:	6819      	ldr	r1, [r3, #0]
 80127a4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7ff f8fc 	bl	80119aa <sub32>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	689a      	ldr	r2, [r3, #8]
 80127b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	4413      	add	r3, r2
 80127bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80127be:	601a      	str	r2, [r3, #0]
 80127c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127c2:	3301      	adds	r3, #1
 80127c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	689a      	ldr	r2, [r3, #8]
 80127ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80127cc:	009b      	lsls	r3, r3, #2
 80127ce:	4413      	add	r3, r2
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80127d4:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80127d8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80127dc:	2300      	movs	r3, #0
 80127de:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80127e2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	da0b      	bge.n	8012802 <ecp_mod_p384+0xfe>
 80127ea:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80127ee:	425b      	negs	r3, r3
 80127f0:	4619      	mov	r1, r3
 80127f2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80127f6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7ff f8d5 	bl	80119aa <sub32>
 8012800:	e008      	b.n	8012814 <ecp_mod_p384+0x110>
 8012802:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012806:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801280a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801280e:	4618      	mov	r0, r3
 8012810:	f7ff f8a8 	bl	8011964 <add32>

    ADD( 13 ); ADD( 22 ); ADD( 23 );
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	689b      	ldr	r3, [r3, #8]
 8012818:	3334      	adds	r3, #52	@ 0x34
 801281a:	6819      	ldr	r1, [r3, #0]
 801281c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012820:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012824:	4618      	mov	r0, r3
 8012826:	f7ff f89d 	bl	8011964 <add32>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	689b      	ldr	r3, [r3, #8]
 801282e:	3358      	adds	r3, #88	@ 0x58
 8012830:	6819      	ldr	r1, [r3, #0]
 8012832:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012836:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801283a:	4618      	mov	r0, r3
 801283c:	f7ff f892 	bl	8011964 <add32>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	689b      	ldr	r3, [r3, #8]
 8012844:	335c      	adds	r3, #92	@ 0x5c
 8012846:	6819      	ldr	r1, [r3, #0]
 8012848:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801284c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012850:	4618      	mov	r0, r3
 8012852:	f7ff f887 	bl	8011964 <add32>
    SUB( 12 ); SUB( 20 );                                   NEXT; // A2
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	689b      	ldr	r3, [r3, #8]
 801285a:	3330      	adds	r3, #48	@ 0x30
 801285c:	6819      	ldr	r1, [r3, #0]
 801285e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012862:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012866:	4618      	mov	r0, r3
 8012868:	f7ff f89f 	bl	80119aa <sub32>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	689b      	ldr	r3, [r3, #8]
 8012870:	3350      	adds	r3, #80	@ 0x50
 8012872:	6819      	ldr	r1, [r3, #0]
 8012874:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012878:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801287c:	4618      	mov	r0, r3
 801287e:	f7ff f894 	bl	80119aa <sub32>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	689a      	ldr	r2, [r3, #8]
 8012886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012888:	009b      	lsls	r3, r3, #2
 801288a:	4413      	add	r3, r2
 801288c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801288e:	601a      	str	r2, [r3, #0]
 8012890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012892:	3301      	adds	r3, #1
 8012894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	689a      	ldr	r2, [r3, #8]
 801289a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	4413      	add	r3, r2
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128a4:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80128a8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80128ac:	2300      	movs	r3, #0
 80128ae:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80128b2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	da0b      	bge.n	80128d2 <ecp_mod_p384+0x1ce>
 80128ba:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80128be:	425b      	negs	r3, r3
 80128c0:	4619      	mov	r1, r3
 80128c2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80128c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7ff f86d 	bl	80119aa <sub32>
 80128d0:	e008      	b.n	80128e4 <ecp_mod_p384+0x1e0>
 80128d2:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 80128d6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80128da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80128de:	4618      	mov	r0, r3
 80128e0:	f7ff f840 	bl	8011964 <add32>

    ADD( 14 ); ADD( 23 );
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	689b      	ldr	r3, [r3, #8]
 80128e8:	3338      	adds	r3, #56	@ 0x38
 80128ea:	6819      	ldr	r1, [r3, #0]
 80128ec:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80128f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7ff f835 	bl	8011964 <add32>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	689b      	ldr	r3, [r3, #8]
 80128fe:	335c      	adds	r3, #92	@ 0x5c
 8012900:	6819      	ldr	r1, [r3, #0]
 8012902:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012906:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801290a:	4618      	mov	r0, r3
 801290c:	f7ff f82a 	bl	8011964 <add32>
    SUB( 13 ); SUB( 21 );                                   NEXT; // A2
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	689b      	ldr	r3, [r3, #8]
 8012914:	3334      	adds	r3, #52	@ 0x34
 8012916:	6819      	ldr	r1, [r3, #0]
 8012918:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801291c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012920:	4618      	mov	r0, r3
 8012922:	f7ff f842 	bl	80119aa <sub32>
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	689b      	ldr	r3, [r3, #8]
 801292a:	3354      	adds	r3, #84	@ 0x54
 801292c:	6819      	ldr	r1, [r3, #0]
 801292e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012932:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012936:	4618      	mov	r0, r3
 8012938:	f7ff f837 	bl	80119aa <sub32>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	689a      	ldr	r2, [r3, #8]
 8012940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012942:	009b      	lsls	r3, r3, #2
 8012944:	4413      	add	r3, r2
 8012946:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012948:	601a      	str	r2, [r3, #0]
 801294a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801294c:	3301      	adds	r3, #1
 801294e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	689a      	ldr	r2, [r3, #8]
 8012954:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012956:	009b      	lsls	r3, r3, #2
 8012958:	4413      	add	r3, r2
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801295e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012962:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012966:	2300      	movs	r3, #0
 8012968:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 801296c:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012970:	2b00      	cmp	r3, #0
 8012972:	da0b      	bge.n	801298c <ecp_mod_p384+0x288>
 8012974:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012978:	425b      	negs	r3, r3
 801297a:	4619      	mov	r1, r3
 801297c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012980:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012984:	4618      	mov	r0, r3
 8012986:	f7ff f810 	bl	80119aa <sub32>
 801298a:	e008      	b.n	801299e <ecp_mod_p384+0x29a>
 801298c:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012990:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012994:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012998:	4618      	mov	r0, r3
 801299a:	f7fe ffe3 	bl	8011964 <add32>

    ADD( 15 ); ADD( 12 ); ADD( 20 ); ADD( 21 );
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	689b      	ldr	r3, [r3, #8]
 80129a2:	333c      	adds	r3, #60	@ 0x3c
 80129a4:	6819      	ldr	r1, [r3, #0]
 80129a6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80129aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7fe ffd8 	bl	8011964 <add32>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	689b      	ldr	r3, [r3, #8]
 80129b8:	3330      	adds	r3, #48	@ 0x30
 80129ba:	6819      	ldr	r1, [r3, #0]
 80129bc:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80129c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7fe ffcd 	bl	8011964 <add32>
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	689b      	ldr	r3, [r3, #8]
 80129ce:	3350      	adds	r3, #80	@ 0x50
 80129d0:	6819      	ldr	r1, [r3, #0]
 80129d2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80129d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fe ffc2 	bl	8011964 <add32>
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	689b      	ldr	r3, [r3, #8]
 80129e4:	3354      	adds	r3, #84	@ 0x54
 80129e6:	6819      	ldr	r1, [r3, #0]
 80129e8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80129ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7fe ffb7 	bl	8011964 <add32>
    SUB( 14 ); SUB( 22 ); SUB( 23 );                        NEXT; // A3
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	689b      	ldr	r3, [r3, #8]
 80129fa:	3338      	adds	r3, #56	@ 0x38
 80129fc:	6819      	ldr	r1, [r3, #0]
 80129fe:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a02:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7fe ffcf 	bl	80119aa <sub32>
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	689b      	ldr	r3, [r3, #8]
 8012a10:	3358      	adds	r3, #88	@ 0x58
 8012a12:	6819      	ldr	r1, [r3, #0]
 8012a14:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fe ffc4 	bl	80119aa <sub32>
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	689b      	ldr	r3, [r3, #8]
 8012a26:	335c      	adds	r3, #92	@ 0x5c
 8012a28:	6819      	ldr	r1, [r3, #0]
 8012a2a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a2e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7fe ffb9 	bl	80119aa <sub32>
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	689a      	ldr	r2, [r3, #8]
 8012a3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a3e:	009b      	lsls	r3, r3, #2
 8012a40:	4413      	add	r3, r2
 8012a42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012a44:	601a      	str	r2, [r3, #0]
 8012a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a48:	3301      	adds	r3, #1
 8012a4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	689a      	ldr	r2, [r3, #8]
 8012a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012a52:	009b      	lsls	r3, r3, #2
 8012a54:	4413      	add	r3, r2
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012a5a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012a5e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012a62:	2300      	movs	r3, #0
 8012a64:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012a68:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	da0b      	bge.n	8012a88 <ecp_mod_p384+0x384>
 8012a70:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012a74:	425b      	negs	r3, r3
 8012a76:	4619      	mov	r1, r3
 8012a78:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7fe ff92 	bl	80119aa <sub32>
 8012a86:	e008      	b.n	8012a9a <ecp_mod_p384+0x396>
 8012a88:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012a8c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012a90:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7fe ff65 	bl	8011964 <add32>

    ADD( 21 ); ADD( 21 ); ADD( 16 ); ADD( 13 ); ADD( 12 ); ADD( 20 ); ADD( 22 );
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	689b      	ldr	r3, [r3, #8]
 8012a9e:	3354      	adds	r3, #84	@ 0x54
 8012aa0:	6819      	ldr	r1, [r3, #0]
 8012aa2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012aa6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7fe ff5a 	bl	8011964 <add32>
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	689b      	ldr	r3, [r3, #8]
 8012ab4:	3354      	adds	r3, #84	@ 0x54
 8012ab6:	6819      	ldr	r1, [r3, #0]
 8012ab8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012abc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7fe ff4f 	bl	8011964 <add32>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	689b      	ldr	r3, [r3, #8]
 8012aca:	3340      	adds	r3, #64	@ 0x40
 8012acc:	6819      	ldr	r1, [r3, #0]
 8012ace:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ad2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7fe ff44 	bl	8011964 <add32>
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	689b      	ldr	r3, [r3, #8]
 8012ae0:	3334      	adds	r3, #52	@ 0x34
 8012ae2:	6819      	ldr	r1, [r3, #0]
 8012ae4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ae8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fe ff39 	bl	8011964 <add32>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	689b      	ldr	r3, [r3, #8]
 8012af6:	3330      	adds	r3, #48	@ 0x30
 8012af8:	6819      	ldr	r1, [r3, #0]
 8012afa:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012afe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7fe ff2e 	bl	8011964 <add32>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	689b      	ldr	r3, [r3, #8]
 8012b0c:	3350      	adds	r3, #80	@ 0x50
 8012b0e:	6819      	ldr	r1, [r3, #0]
 8012b10:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7fe ff23 	bl	8011964 <add32>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	689b      	ldr	r3, [r3, #8]
 8012b22:	3358      	adds	r3, #88	@ 0x58
 8012b24:	6819      	ldr	r1, [r3, #0]
 8012b26:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7fe ff18 	bl	8011964 <add32>
    SUB( 15 ); SUB( 23 ); SUB( 23 );                        NEXT; // A4
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	689b      	ldr	r3, [r3, #8]
 8012b38:	333c      	adds	r3, #60	@ 0x3c
 8012b3a:	6819      	ldr	r1, [r3, #0]
 8012b3c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7fe ff30 	bl	80119aa <sub32>
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	689b      	ldr	r3, [r3, #8]
 8012b4e:	335c      	adds	r3, #92	@ 0x5c
 8012b50:	6819      	ldr	r1, [r3, #0]
 8012b52:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b56:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7fe ff25 	bl	80119aa <sub32>
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	689b      	ldr	r3, [r3, #8]
 8012b64:	335c      	adds	r3, #92	@ 0x5c
 8012b66:	6819      	ldr	r1, [r3, #0]
 8012b68:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012b6c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012b70:	4618      	mov	r0, r3
 8012b72:	f7fe ff1a 	bl	80119aa <sub32>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	689a      	ldr	r2, [r3, #8]
 8012b7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b7c:	009b      	lsls	r3, r3, #2
 8012b7e:	4413      	add	r3, r2
 8012b80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012b82:	601a      	str	r2, [r3, #0]
 8012b84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b86:	3301      	adds	r3, #1
 8012b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	689a      	ldr	r2, [r3, #8]
 8012b8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012b90:	009b      	lsls	r3, r3, #2
 8012b92:	4413      	add	r3, r2
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012b98:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012b9c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012ba6:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	da0b      	bge.n	8012bc6 <ecp_mod_p384+0x4c2>
 8012bae:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012bb2:	425b      	negs	r3, r3
 8012bb4:	4619      	mov	r1, r3
 8012bb6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012bba:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7fe fef3 	bl	80119aa <sub32>
 8012bc4:	e008      	b.n	8012bd8 <ecp_mod_p384+0x4d4>
 8012bc6:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012bca:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012bce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7fe fec6 	bl	8011964 <add32>

    ADD( 22 ); ADD( 22 ); ADD( 17 ); ADD( 14 ); ADD( 13 ); ADD( 21 ); ADD( 23 );
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	689b      	ldr	r3, [r3, #8]
 8012bdc:	3358      	adds	r3, #88	@ 0x58
 8012bde:	6819      	ldr	r1, [r3, #0]
 8012be0:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012be4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7fe febb 	bl	8011964 <add32>
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	689b      	ldr	r3, [r3, #8]
 8012bf2:	3358      	adds	r3, #88	@ 0x58
 8012bf4:	6819      	ldr	r1, [r3, #0]
 8012bf6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012bfa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7fe feb0 	bl	8011964 <add32>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	689b      	ldr	r3, [r3, #8]
 8012c08:	3344      	adds	r3, #68	@ 0x44
 8012c0a:	6819      	ldr	r1, [r3, #0]
 8012c0c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fe fea5 	bl	8011964 <add32>
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	689b      	ldr	r3, [r3, #8]
 8012c1e:	3338      	adds	r3, #56	@ 0x38
 8012c20:	6819      	ldr	r1, [r3, #0]
 8012c22:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c26:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fe fe9a 	bl	8011964 <add32>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	689b      	ldr	r3, [r3, #8]
 8012c34:	3334      	adds	r3, #52	@ 0x34
 8012c36:	6819      	ldr	r1, [r3, #0]
 8012c38:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c3c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fe fe8f 	bl	8011964 <add32>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	689b      	ldr	r3, [r3, #8]
 8012c4a:	3354      	adds	r3, #84	@ 0x54
 8012c4c:	6819      	ldr	r1, [r3, #0]
 8012c4e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7fe fe84 	bl	8011964 <add32>
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	689b      	ldr	r3, [r3, #8]
 8012c60:	335c      	adds	r3, #92	@ 0x5c
 8012c62:	6819      	ldr	r1, [r3, #0]
 8012c64:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c68:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7fe fe79 	bl	8011964 <add32>
    SUB( 16 );                                              NEXT; // A5
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	689b      	ldr	r3, [r3, #8]
 8012c76:	3340      	adds	r3, #64	@ 0x40
 8012c78:	6819      	ldr	r1, [r3, #0]
 8012c7a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012c7e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7fe fe91 	bl	80119aa <sub32>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	689a      	ldr	r2, [r3, #8]
 8012c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c8e:	009b      	lsls	r3, r3, #2
 8012c90:	4413      	add	r3, r2
 8012c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012c94:	601a      	str	r2, [r3, #0]
 8012c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c98:	3301      	adds	r3, #1
 8012c9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	689a      	ldr	r2, [r3, #8]
 8012ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	4413      	add	r3, r2
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012caa:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012cae:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012cb8:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	da0b      	bge.n	8012cd8 <ecp_mod_p384+0x5d4>
 8012cc0:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012cc4:	425b      	negs	r3, r3
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ccc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7fe fe6a 	bl	80119aa <sub32>
 8012cd6:	e008      	b.n	8012cea <ecp_mod_p384+0x5e6>
 8012cd8:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012cdc:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ce0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f7fe fe3d 	bl	8011964 <add32>

    ADD( 23 ); ADD( 23 ); ADD( 18 ); ADD( 15 ); ADD( 14 ); ADD( 22 );
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	689b      	ldr	r3, [r3, #8]
 8012cee:	335c      	adds	r3, #92	@ 0x5c
 8012cf0:	6819      	ldr	r1, [r3, #0]
 8012cf2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012cf6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7fe fe32 	bl	8011964 <add32>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	689b      	ldr	r3, [r3, #8]
 8012d04:	335c      	adds	r3, #92	@ 0x5c
 8012d06:	6819      	ldr	r1, [r3, #0]
 8012d08:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7fe fe27 	bl	8011964 <add32>
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	3348      	adds	r3, #72	@ 0x48
 8012d1c:	6819      	ldr	r1, [r3, #0]
 8012d1e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d22:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7fe fe1c 	bl	8011964 <add32>
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	689b      	ldr	r3, [r3, #8]
 8012d30:	333c      	adds	r3, #60	@ 0x3c
 8012d32:	6819      	ldr	r1, [r3, #0]
 8012d34:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d38:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7fe fe11 	bl	8011964 <add32>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	689b      	ldr	r3, [r3, #8]
 8012d46:	3338      	adds	r3, #56	@ 0x38
 8012d48:	6819      	ldr	r1, [r3, #0]
 8012d4a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d52:	4618      	mov	r0, r3
 8012d54:	f7fe fe06 	bl	8011964 <add32>
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	689b      	ldr	r3, [r3, #8]
 8012d5c:	3358      	adds	r3, #88	@ 0x58
 8012d5e:	6819      	ldr	r1, [r3, #0]
 8012d60:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d64:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f7fe fdfb 	bl	8011964 <add32>
    SUB( 17 );                                              NEXT; // A6
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	689b      	ldr	r3, [r3, #8]
 8012d72:	3344      	adds	r3, #68	@ 0x44
 8012d74:	6819      	ldr	r1, [r3, #0]
 8012d76:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012d7a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7fe fe13 	bl	80119aa <sub32>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	689a      	ldr	r2, [r3, #8]
 8012d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d8a:	009b      	lsls	r3, r3, #2
 8012d8c:	4413      	add	r3, r2
 8012d8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d94:	3301      	adds	r3, #1
 8012d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	689a      	ldr	r2, [r3, #8]
 8012d9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012d9e:	009b      	lsls	r3, r3, #2
 8012da0:	4413      	add	r3, r2
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012da6:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012daa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012dae:	2300      	movs	r3, #0
 8012db0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012db4:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	da0b      	bge.n	8012dd4 <ecp_mod_p384+0x6d0>
 8012dbc:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012dc0:	425b      	negs	r3, r3
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012dc8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f7fe fdec 	bl	80119aa <sub32>
 8012dd2:	e008      	b.n	8012de6 <ecp_mod_p384+0x6e2>
 8012dd4:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012dd8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ddc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7fe fdbf 	bl	8011964 <add32>

    ADD( 19 ); ADD( 16 ); ADD( 15 ); ADD( 23 );
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	689b      	ldr	r3, [r3, #8]
 8012dea:	334c      	adds	r3, #76	@ 0x4c
 8012dec:	6819      	ldr	r1, [r3, #0]
 8012dee:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012df2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fe fdb4 	bl	8011964 <add32>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	689b      	ldr	r3, [r3, #8]
 8012e00:	3340      	adds	r3, #64	@ 0x40
 8012e02:	6819      	ldr	r1, [r3, #0]
 8012e04:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e08:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7fe fda9 	bl	8011964 <add32>
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	689b      	ldr	r3, [r3, #8]
 8012e16:	333c      	adds	r3, #60	@ 0x3c
 8012e18:	6819      	ldr	r1, [r3, #0]
 8012e1a:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e1e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7fe fd9e 	bl	8011964 <add32>
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	689b      	ldr	r3, [r3, #8]
 8012e2c:	335c      	adds	r3, #92	@ 0x5c
 8012e2e:	6819      	ldr	r1, [r3, #0]
 8012e30:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7fe fd93 	bl	8011964 <add32>
    SUB( 18 );                                              NEXT; // A7
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	689b      	ldr	r3, [r3, #8]
 8012e42:	3348      	adds	r3, #72	@ 0x48
 8012e44:	6819      	ldr	r1, [r3, #0]
 8012e46:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e4a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7fe fdab 	bl	80119aa <sub32>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	689a      	ldr	r2, [r3, #8]
 8012e58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	4413      	add	r3, r2
 8012e5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012e60:	601a      	str	r2, [r3, #0]
 8012e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e64:	3301      	adds	r3, #1
 8012e66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	689a      	ldr	r2, [r3, #8]
 8012e6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e6e:	009b      	lsls	r3, r3, #2
 8012e70:	4413      	add	r3, r2
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012e76:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012e7a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012e7e:	2300      	movs	r3, #0
 8012e80:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012e84:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	da0b      	bge.n	8012ea4 <ecp_mod_p384+0x7a0>
 8012e8c:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012e90:	425b      	negs	r3, r3
 8012e92:	4619      	mov	r1, r3
 8012e94:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012e98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7fe fd84 	bl	80119aa <sub32>
 8012ea2:	e008      	b.n	8012eb6 <ecp_mod_p384+0x7b2>
 8012ea4:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012ea8:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012eac:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fe fd57 	bl	8011964 <add32>

    ADD( 20 ); ADD( 17 ); ADD( 16 );
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	689b      	ldr	r3, [r3, #8]
 8012eba:	3350      	adds	r3, #80	@ 0x50
 8012ebc:	6819      	ldr	r1, [r3, #0]
 8012ebe:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ec2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	f7fe fd4c 	bl	8011964 <add32>
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	689b      	ldr	r3, [r3, #8]
 8012ed0:	3344      	adds	r3, #68	@ 0x44
 8012ed2:	6819      	ldr	r1, [r3, #0]
 8012ed4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012ed8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7fe fd41 	bl	8011964 <add32>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	689b      	ldr	r3, [r3, #8]
 8012ee6:	3340      	adds	r3, #64	@ 0x40
 8012ee8:	6819      	ldr	r1, [r3, #0]
 8012eea:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012eee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7fe fd36 	bl	8011964 <add32>
    SUB( 19 );                                              NEXT; // A8
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	689b      	ldr	r3, [r3, #8]
 8012efc:	334c      	adds	r3, #76	@ 0x4c
 8012efe:	6819      	ldr	r1, [r3, #0]
 8012f00:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7fe fd4e 	bl	80119aa <sub32>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	689a      	ldr	r2, [r3, #8]
 8012f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f14:	009b      	lsls	r3, r3, #2
 8012f16:	4413      	add	r3, r2
 8012f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f1a:	601a      	str	r2, [r3, #0]
 8012f1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f1e:	3301      	adds	r3, #1
 8012f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	689a      	ldr	r2, [r3, #8]
 8012f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f28:	009b      	lsls	r3, r3, #2
 8012f2a:	4413      	add	r3, r2
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012f30:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012f34:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012f38:	2300      	movs	r3, #0
 8012f3a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012f3e:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	da0b      	bge.n	8012f5e <ecp_mod_p384+0x85a>
 8012f46:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012f4a:	425b      	negs	r3, r3
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7fe fd27 	bl	80119aa <sub32>
 8012f5c:	e008      	b.n	8012f70 <ecp_mod_p384+0x86c>
 8012f5e:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 8012f62:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f66:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fe fcfa 	bl	8011964 <add32>

    ADD( 21 ); ADD( 18 ); ADD( 17 );
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	689b      	ldr	r3, [r3, #8]
 8012f74:	3354      	adds	r3, #84	@ 0x54
 8012f76:	6819      	ldr	r1, [r3, #0]
 8012f78:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f7c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7fe fcef 	bl	8011964 <add32>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	689b      	ldr	r3, [r3, #8]
 8012f8a:	3348      	adds	r3, #72	@ 0x48
 8012f8c:	6819      	ldr	r1, [r3, #0]
 8012f8e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012f92:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7fe fce4 	bl	8011964 <add32>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	689b      	ldr	r3, [r3, #8]
 8012fa0:	3344      	adds	r3, #68	@ 0x44
 8012fa2:	6819      	ldr	r1, [r3, #0]
 8012fa4:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012fa8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012fac:	4618      	mov	r0, r3
 8012fae:	f7fe fcd9 	bl	8011964 <add32>
    SUB( 20 );                                              NEXT; // A9
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	689b      	ldr	r3, [r3, #8]
 8012fb6:	3350      	adds	r3, #80	@ 0x50
 8012fb8:	6819      	ldr	r1, [r3, #0]
 8012fba:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8012fbe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7fe fcf1 	bl	80119aa <sub32>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	689a      	ldr	r2, [r3, #8]
 8012fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fce:	009b      	lsls	r3, r3, #2
 8012fd0:	4413      	add	r3, r2
 8012fd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012fd4:	601a      	str	r2, [r3, #0]
 8012fd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fd8:	3301      	adds	r3, #1
 8012fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	689a      	ldr	r2, [r3, #8]
 8012fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012fe2:	009b      	lsls	r3, r3, #2
 8012fe4:	4413      	add	r3, r2
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012fea:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8012fee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8012ff8:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	da0b      	bge.n	8013018 <ecp_mod_p384+0x914>
 8013000:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8013004:	425b      	negs	r3, r3
 8013006:	4619      	mov	r1, r3
 8013008:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801300c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013010:	4618      	mov	r0, r3
 8013012:	f7fe fcca 	bl	80119aa <sub32>
 8013016:	e008      	b.n	801302a <ecp_mod_p384+0x926>
 8013018:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 801301c:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013020:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013024:	4618      	mov	r0, r3
 8013026:	f7fe fc9d 	bl	8011964 <add32>

    ADD( 22 ); ADD( 19 ); ADD( 18 );
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	689b      	ldr	r3, [r3, #8]
 801302e:	3358      	adds	r3, #88	@ 0x58
 8013030:	6819      	ldr	r1, [r3, #0]
 8013032:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013036:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801303a:	4618      	mov	r0, r3
 801303c:	f7fe fc92 	bl	8011964 <add32>
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	689b      	ldr	r3, [r3, #8]
 8013044:	334c      	adds	r3, #76	@ 0x4c
 8013046:	6819      	ldr	r1, [r3, #0]
 8013048:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801304c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013050:	4618      	mov	r0, r3
 8013052:	f7fe fc87 	bl	8011964 <add32>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	689b      	ldr	r3, [r3, #8]
 801305a:	3348      	adds	r3, #72	@ 0x48
 801305c:	6819      	ldr	r1, [r3, #0]
 801305e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013062:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013066:	4618      	mov	r0, r3
 8013068:	f7fe fc7c 	bl	8011964 <add32>
    SUB( 21 );                                              NEXT; // A10
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	689b      	ldr	r3, [r3, #8]
 8013070:	3354      	adds	r3, #84	@ 0x54
 8013072:	6819      	ldr	r1, [r3, #0]
 8013074:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013078:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801307c:	4618      	mov	r0, r3
 801307e:	f7fe fc94 	bl	80119aa <sub32>
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	689a      	ldr	r2, [r3, #8]
 8013086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	4413      	add	r3, r2
 801308c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801308e:	601a      	str	r2, [r3, #0]
 8013090:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013092:	3301      	adds	r3, #1
 8013094:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	689a      	ldr	r2, [r3, #8]
 801309a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801309c:	009b      	lsls	r3, r3, #2
 801309e:	4413      	add	r3, r2
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80130a4:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80130a8:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 80130ac:	2300      	movs	r3, #0
 80130ae:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80130b2:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	da0b      	bge.n	80130d2 <ecp_mod_p384+0x9ce>
 80130ba:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 80130be:	425b      	negs	r3, r3
 80130c0:	4619      	mov	r1, r3
 80130c2:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80130c6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7fe fc6d 	bl	80119aa <sub32>
 80130d0:	e008      	b.n	80130e4 <ecp_mod_p384+0x9e0>
 80130d2:	f997 1053 	ldrsb.w	r1, [r7, #83]	@ 0x53
 80130d6:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80130da:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fe fc40 	bl	8011964 <add32>

    ADD( 23 ); ADD( 20 ); ADD( 19 );
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	689b      	ldr	r3, [r3, #8]
 80130e8:	335c      	adds	r3, #92	@ 0x5c
 80130ea:	6819      	ldr	r1, [r3, #0]
 80130ec:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 80130f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fe fc35 	bl	8011964 <add32>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	689b      	ldr	r3, [r3, #8]
 80130fe:	3350      	adds	r3, #80	@ 0x50
 8013100:	6819      	ldr	r1, [r3, #0]
 8013102:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013106:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801310a:	4618      	mov	r0, r3
 801310c:	f7fe fc2a 	bl	8011964 <add32>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	689b      	ldr	r3, [r3, #8]
 8013114:	334c      	adds	r3, #76	@ 0x4c
 8013116:	6819      	ldr	r1, [r3, #0]
 8013118:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 801311c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013120:	4618      	mov	r0, r3
 8013122:	f7fe fc1f 	bl	8011964 <add32>
    SUB( 22 );                                              LAST; // A11
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	689b      	ldr	r3, [r3, #8]
 801312a:	3358      	adds	r3, #88	@ 0x58
 801312c:	6819      	ldr	r1, [r3, #0]
 801312e:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8013132:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013136:	4618      	mov	r0, r3
 8013138:	f7fe fc37 	bl	80119aa <sub32>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	689a      	ldr	r2, [r3, #8]
 8013140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4413      	add	r3, r2
 8013146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013148:	601a      	str	r2, [r3, #0]
 801314a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801314c:	3301      	adds	r3, #1
 801314e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013150:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 8013154:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013158:	b25b      	sxtb	r3, r3
 801315a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	689a      	ldr	r2, [r3, #8]
 8013160:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013162:	009b      	lsls	r3, r3, #2
 8013164:	4413      	add	r3, r2
 8013166:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013168:	601a      	str	r2, [r3, #0]
 801316a:	2300      	movs	r3, #0
 801316c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801316e:	e006      	b.n	801317e <ecp_mod_p384+0xa7a>
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	689a      	ldr	r2, [r3, #8]
 8013174:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013176:	009b      	lsls	r3, r3, #2
 8013178:	4413      	add	r3, r2
 801317a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801317c:	601a      	str	r2, [r3, #0]
 801317e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013180:	3301      	adds	r3, #1
 8013182:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801318a:	429a      	cmp	r2, r3
 801318c:	d3f0      	bcc.n	8013170 <ecp_mod_p384+0xa6c>
 801318e:	f997 3052 	ldrsb.w	r3, [r7, #82]	@ 0x52
 8013192:	2b00      	cmp	r3, #0
 8013194:	da08      	bge.n	80131a8 <ecp_mod_p384+0xaa4>
 8013196:	f997 1052 	ldrsb.w	r1, [r7, #82]	@ 0x52
 801319a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 801319e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f7fe fc25 	bl	80119f0 <fix_negative>
 80131a6:	e000      	b.n	80131aa <ecp_mod_p384+0xaa6>

cleanup:
 80131a8:	bf00      	nop
    return( ret );
 80131aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3760      	adds	r7, #96	@ 0x60
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}

080131b4 <ecp_mod_p521>:
/*
 * Fast quasi-reduction modulo p521 (FIPS 186-3 D.2.5)
 * Write N as A1 + 2^521 A0, return A0 + A1
 */
static int ecp_mod_p521( mbedtls_mpi *N )
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b09a      	sub	sp, #104	@ 0x68
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
    mbedtls_mpi_uint Mp[P521_WIDTH + 1];
    /* Worst case for the size of M is when mbedtls_mpi_uint is 16 bits:
     * we need to hold bits 513 to 1056, which is 34 limbs, that is
     * P521_WIDTH + 1. Otherwise P521_WIDTH is enough. */

    if( N->n < P521_WIDTH )
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	685b      	ldr	r3, [r3, #4]
 80131c0:	2b10      	cmp	r3, #16
 80131c2:	d801      	bhi.n	80131c8 <ecp_mod_p521+0x14>
        return( 0 );
 80131c4:	2300      	movs	r3, #0
 80131c6:	e04a      	b.n	801325e <ecp_mod_p521+0xaa>

    /* M = A1 */
    M.s = 1;
 80131c8:	2301      	movs	r3, #1
 80131ca:	657b      	str	r3, [r7, #84]	@ 0x54
    M.n = N->n - ( P521_WIDTH - 1 );
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	3b10      	subs	r3, #16
 80131d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    if( M.n > P521_WIDTH + 1 )
 80131d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80131d6:	2b12      	cmp	r3, #18
 80131d8:	d901      	bls.n	80131de <ecp_mod_p521+0x2a>
        M.n = P521_WIDTH + 1;
 80131da:	2312      	movs	r3, #18
 80131dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    M.p = Mp;
 80131de:	f107 030c 	add.w	r3, r7, #12
 80131e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    memcpy( Mp, N->p + P521_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	689b      	ldr	r3, [r3, #8]
 80131e8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80131ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80131ee:	009a      	lsls	r2, r3, #2
 80131f0:	f107 030c 	add.w	r3, r7, #12
 80131f4:	4618      	mov	r0, r3
 80131f6:	f002 fc35 	bl	8015a64 <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 521 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 80131fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80131fe:	2109      	movs	r1, #9
 8013200:	4618      	mov	r0, r3
 8013202:	f7f7 fdcc 	bl	800ad9e <mbedtls_mpi_shift_r>
 8013206:	6678      	str	r0, [r7, #100]	@ 0x64
 8013208:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801320a:	2b00      	cmp	r3, #0
 801320c:	d126      	bne.n	801325c <ecp_mod_p521+0xa8>

    /* N = A0 */
    N->p[P521_WIDTH - 1] &= P521_MASK;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	689b      	ldr	r3, [r3, #8]
 8013212:	3340      	adds	r3, #64	@ 0x40
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	689b      	ldr	r3, [r3, #8]
 801321a:	3340      	adds	r3, #64	@ 0x40
 801321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013220:	601a      	str	r2, [r3, #0]
    for( i = P521_WIDTH; i < N->n; i++ )
 8013222:	2311      	movs	r3, #17
 8013224:	663b      	str	r3, [r7, #96]	@ 0x60
 8013226:	e009      	b.n	801323c <ecp_mod_p521+0x88>
        N->p[i] = 0;
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	689a      	ldr	r2, [r3, #8]
 801322c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801322e:	009b      	lsls	r3, r3, #2
 8013230:	4413      	add	r3, r2
 8013232:	2200      	movs	r2, #0
 8013234:	601a      	str	r2, [r3, #0]
    for( i = P521_WIDTH; i < N->n; i++ )
 8013236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013238:	3301      	adds	r3, #1
 801323a:	663b      	str	r3, [r7, #96]	@ 0x60
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013242:	429a      	cmp	r2, r3
 8013244:	d3f0      	bcc.n	8013228 <ecp_mod_p521+0x74>

    /* N = A0 + A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013246:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801324a:	461a      	mov	r2, r3
 801324c:	6879      	ldr	r1, [r7, #4]
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f7f7 ff7f 	bl	800b152 <mbedtls_mpi_add_abs>
 8013254:	6678      	str	r0, [r7, #100]	@ 0x64
 8013256:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013258:	2b00      	cmp	r3, #0

cleanup:
 801325a:	bf00      	nop
    return( ret );
 801325c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 801325e:	4618      	mov	r0, r3
 8013260:	3768      	adds	r7, #104	@ 0x68
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
	...

08013268 <ecp_mod_p255>:
/*
 * Fast quasi-reduction modulo p255 = 2^255 - 19
 * Write N as A0 + 2^255 A1, return A0 + 19 * A1
 */
static int ecp_mod_p255( mbedtls_mpi *N )
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b092      	sub	sp, #72	@ 0x48
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi M;
    mbedtls_mpi_uint Mp[P255_WIDTH + 2];

    if( N->n < P255_WIDTH )
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	685b      	ldr	r3, [r3, #4]
 8013274:	2b07      	cmp	r3, #7
 8013276:	d801      	bhi.n	801327c <ecp_mod_p255+0x14>
        return( 0 );
 8013278:	2300      	movs	r3, #0
 801327a:	e05f      	b.n	801333c <ecp_mod_p255+0xd4>

    /* M = A1 */
    M.s = 1;
 801327c:	2301      	movs	r3, #1
 801327e:	637b      	str	r3, [r7, #52]	@ 0x34
    M.n = N->n - ( P255_WIDTH - 1 );
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	685b      	ldr	r3, [r3, #4]
 8013284:	3b07      	subs	r3, #7
 8013286:	63bb      	str	r3, [r7, #56]	@ 0x38
    if( M.n > P255_WIDTH + 1 )
 8013288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801328a:	2b09      	cmp	r3, #9
 801328c:	d901      	bls.n	8013292 <ecp_mod_p255+0x2a>
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 801328e:	4b2d      	ldr	r3, [pc, #180]	@ (8013344 <ecp_mod_p255+0xdc>)
 8013290:	e054      	b.n	801333c <ecp_mod_p255+0xd4>
    M.p = Mp;
 8013292:	f107 030c 	add.w	r3, r7, #12
 8013296:	63fb      	str	r3, [r7, #60]	@ 0x3c
    memset( Mp, 0, sizeof Mp );
 8013298:	f107 030c 	add.w	r3, r7, #12
 801329c:	2228      	movs	r2, #40	@ 0x28
 801329e:	2100      	movs	r1, #0
 80132a0:	4618      	mov	r0, r3
 80132a2:	f002 fb9b 	bl	80159dc <memset>
    memcpy( Mp, N->p + P255_WIDTH - 1, M.n * sizeof( mbedtls_mpi_uint ) );
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	689b      	ldr	r3, [r3, #8]
 80132aa:	f103 011c 	add.w	r1, r3, #28
 80132ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132b0:	009a      	lsls	r2, r3, #2
 80132b2:	f107 030c 	add.w	r3, r7, #12
 80132b6:	4618      	mov	r0, r3
 80132b8:	f002 fbd4 	bl	8015a64 <memcpy>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, 255 % ( 8 * sizeof( mbedtls_mpi_uint ) ) ) );
 80132bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80132c0:	211f      	movs	r1, #31
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7f7 fd6b 	bl	800ad9e <mbedtls_mpi_shift_r>
 80132c8:	6478      	str	r0, [r7, #68]	@ 0x44
 80132ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d134      	bne.n	801333a <ecp_mod_p255+0xd2>
    M.n++; /* Make room for multiplication by 19 */
 80132d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132d2:	3301      	adds	r3, #1
 80132d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* N = A0 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_set_bit( N, 255, 0 ) );
 80132d6:	2200      	movs	r2, #0
 80132d8:	21ff      	movs	r1, #255	@ 0xff
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f7f7 fa29 	bl	800a732 <mbedtls_mpi_set_bit>
 80132e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80132e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d128      	bne.n	801333a <ecp_mod_p255+0xd2>
    for( i = P255_WIDTH; i < N->n; i++ )
 80132e8:	2308      	movs	r3, #8
 80132ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80132ec:	e009      	b.n	8013302 <ecp_mod_p255+0x9a>
        N->p[i] = 0;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	689a      	ldr	r2, [r3, #8]
 80132f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132f4:	009b      	lsls	r3, r3, #2
 80132f6:	4413      	add	r3, r2
 80132f8:	2200      	movs	r2, #0
 80132fa:	601a      	str	r2, [r3, #0]
    for( i = P255_WIDTH; i < N->n; i++ )
 80132fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132fe:	3301      	adds	r3, #1
 8013300:	643b      	str	r3, [r7, #64]	@ 0x40
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013308:	429a      	cmp	r2, r3
 801330a:	d3f0      	bcc.n	80132ee <ecp_mod_p255+0x86>

    /* N = A0 + 19 * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &M, &M, 19 ) );
 801330c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8013310:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013314:	2213      	movs	r2, #19
 8013316:	4618      	mov	r0, r3
 8013318:	f7f9 fda6 	bl	800ce68 <mbedtls_mpi_mul_int>
 801331c:	6478      	str	r0, [r7, #68]	@ 0x44
 801331e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013320:	2b00      	cmp	r3, #0
 8013322:	d10a      	bne.n	801333a <ecp_mod_p255+0xd2>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 8013324:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013328:	461a      	mov	r2, r3
 801332a:	6879      	ldr	r1, [r7, #4]
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f7f7 ff10 	bl	800b152 <mbedtls_mpi_add_abs>
 8013332:	6478      	str	r0, [r7, #68]	@ 0x44
 8013334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013336:	2b00      	cmp	r3, #0

cleanup:
 8013338:	bf00      	nop
    return( ret );
 801333a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 801333c:	4618      	mov	r0, r3
 801333e:	3748      	adds	r7, #72	@ 0x48
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	ffffb080 	.word	0xffffb080

08013348 <ecp_mod_p448>:
 * arithmetic using the limbs directly as we do for the NIST primes above,
 * but for 64-bit targets it should use half the number of operations if we do
 * the reduction with 224-bit limbs, since mpi_add_mpi will then use 64-bit adds.
 */
static int ecp_mod_p448( mbedtls_mpi *N )
{
 8013348:	b5b0      	push	{r4, r5, r7, lr}
 801334a:	b0a8      	sub	sp, #160	@ 0xa0
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
    int ret;
    size_t i;
    mbedtls_mpi M, Q;
    mbedtls_mpi_uint Mp[P448_WIDTH + 1], Qp[P448_WIDTH];

    if( N->n <= P448_WIDTH )
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	2b0e      	cmp	r3, #14
 8013356:	d801      	bhi.n	801335c <ecp_mod_p448+0x14>
        return( 0 );
 8013358:	2300      	movs	r3, #0
 801335a:	e0be      	b.n	80134da <ecp_mod_p448+0x192>

    /* M = A1 */
    M.s = 1;
 801335c:	2301      	movs	r3, #1
 801335e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    M.n = N->n - ( P448_WIDTH );
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	685b      	ldr	r3, [r3, #4]
 8013366:	3b0e      	subs	r3, #14
 8013368:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if( M.n > P448_WIDTH )
 801336c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013370:	2b0e      	cmp	r3, #14
 8013372:	d901      	bls.n	8013378 <ecp_mod_p448+0x30>
        /* Shouldn't be called with N larger than 2^896! */
        return( MBEDTLS_ERR_ECP_BAD_INPUT_DATA );
 8013374:	4b5b      	ldr	r3, [pc, #364]	@ (80134e4 <ecp_mod_p448+0x19c>)
 8013376:	e0b0      	b.n	80134da <ecp_mod_p448+0x192>
    M.p = Mp;
 8013378:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801337c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    memset( Mp, 0, sizeof( Mp ) );
 8013380:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8013384:	223c      	movs	r2, #60	@ 0x3c
 8013386:	2100      	movs	r1, #0
 8013388:	4618      	mov	r0, r3
 801338a:	f002 fb27 	bl	80159dc <memset>
    memcpy( Mp, N->p + P448_WIDTH, M.n * sizeof( mbedtls_mpi_uint ) );
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	689b      	ldr	r3, [r3, #8]
 8013392:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8013396:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801339a:	009a      	lsls	r2, r3, #2
 801339c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80133a0:	4618      	mov	r0, r3
 80133a2:	f002 fb5f 	bl	8015a64 <memcpy>

    /* N = A0 */
    for( i = P448_WIDTH; i < N->n; i++ )
 80133a6:	230e      	movs	r3, #14
 80133a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80133ac:	e00c      	b.n	80133c8 <ecp_mod_p448+0x80>
        N->p[i] = 0;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	689a      	ldr	r2, [r3, #8]
 80133b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80133b6:	009b      	lsls	r3, r3, #2
 80133b8:	4413      	add	r3, r2
 80133ba:	2200      	movs	r2, #0
 80133bc:	601a      	str	r2, [r3, #0]
    for( i = P448_WIDTH; i < N->n; i++ )
 80133be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80133c2:	3301      	adds	r3, #1
 80133c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d3ec      	bcc.n	80133ae <ecp_mod_p448+0x66>

    /* N += A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 80133d4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80133d8:	461a      	mov	r2, r3
 80133da:	6879      	ldr	r1, [r7, #4]
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f7f8 f821 	bl	800b424 <mbedtls_mpi_add_mpi>
 80133e2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 80133e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d173      	bne.n	80134d6 <ecp_mod_p448+0x18e>

    /* Q = B1, N += B1 */
    Q = M;
 80133ee:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80133f2:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 80133f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80133f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Q.p = Qp;
 80133fc:	f107 030c 	add.w	r3, r7, #12
 8013400:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    memcpy( Qp, Mp, sizeof( Qp ) );
 8013404:	f107 040c 	add.w	r4, r7, #12
 8013408:	f107 0544 	add.w	r5, r7, #68	@ 0x44
 801340c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801340e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013418:	e895 0003 	ldmia.w	r5, {r0, r1}
 801341c:	e884 0003 	stmia.w	r4, {r0, r1}
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Q, 224 ) );
 8013420:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8013424:	21e0      	movs	r1, #224	@ 0xe0
 8013426:	4618      	mov	r0, r3
 8013428:	f7f7 fcb9 	bl	800ad9e <mbedtls_mpi_shift_r>
 801342c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 8013430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013434:	2b00      	cmp	r3, #0
 8013436:	d14e      	bne.n	80134d6 <ecp_mod_p448+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &Q ) );
 8013438:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801343c:	461a      	mov	r2, r3
 801343e:	6879      	ldr	r1, [r7, #4]
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f7f7 ffef 	bl	800b424 <mbedtls_mpi_add_mpi>
 8013446:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 801344a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801344e:	2b00      	cmp	r3, #0
 8013450:	d141      	bne.n	80134d6 <ecp_mod_p448+0x18e>

    /* M = (B0 + B1) * 2^224, N += M */
    if( sizeof( mbedtls_mpi_uint ) > 4 )
        Mp[P224_WIDTH_MIN] &= ( (mbedtls_mpi_uint)-1 ) >> ( P224_UNUSED_BITS );
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 8013452:	2307      	movs	r3, #7
 8013454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013458:	e00c      	b.n	8013474 <ecp_mod_p448+0x12c>
        Mp[i] = 0;
 801345a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801345e:	009b      	lsls	r3, r3, #2
 8013460:	33a0      	adds	r3, #160	@ 0xa0
 8013462:	443b      	add	r3, r7
 8013464:	2200      	movs	r2, #0
 8013466:	f843 2c5c 	str.w	r2, [r3, #-92]
    for( i = P224_WIDTH_MAX; i < M.n; ++i )
 801346a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801346e:	3301      	adds	r3, #1
 8013470:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013474:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013478:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801347c:	429a      	cmp	r2, r3
 801347e:	d3ec      	bcc.n	801345a <ecp_mod_p448+0x112>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &M, &M, &Q ) );
 8013480:	f107 0280 	add.w	r2, r7, #128	@ 0x80
 8013484:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8013488:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 801348c:	4618      	mov	r0, r3
 801348e:	f7f7 ffc9 	bl	800b424 <mbedtls_mpi_add_mpi>
 8013492:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 8013496:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801349a:	2b00      	cmp	r3, #0
 801349c:	d11b      	bne.n	80134d6 <ecp_mod_p448+0x18e>
    M.n = P448_WIDTH + 1; /* Make room for shifted carry bit from the addition */
 801349e:	230f      	movs	r3, #15
 80134a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &M, 224 ) );
 80134a4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80134a8:	21e0      	movs	r1, #224	@ 0xe0
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7f7 fbd5 	bl	800ac5a <mbedtls_mpi_shift_l>
 80134b0:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 80134b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d10c      	bne.n	80134d6 <ecp_mod_p448+0x18e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( N, N, &M ) );
 80134bc:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80134c0:	461a      	mov	r2, r3
 80134c2:	6879      	ldr	r1, [r7, #4]
 80134c4:	6878      	ldr	r0, [r7, #4]
 80134c6:	f7f7 ffad 	bl	800b424 <mbedtls_mpi_add_mpi>
 80134ca:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
 80134ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80134d2:	2b00      	cmp	r3, #0

cleanup:
 80134d4:	bf00      	nop
    return( ret );
 80134d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
}
 80134da:	4618      	mov	r0, r3
 80134dc:	37a0      	adds	r7, #160	@ 0xa0
 80134de:	46bd      	mov	sp, r7
 80134e0:	bdb0      	pop	{r4, r5, r7, pc}
 80134e2:	bf00      	nop
 80134e4:	ffffb080 	.word	0xffffb080

080134e8 <ecp_mod_koblitz>:
 */
#define P_KOBLITZ_MAX   ( 256 / 8 / sizeof( mbedtls_mpi_uint ) )  // Max limbs in P
#define P_KOBLITZ_R     ( 8 / sizeof( mbedtls_mpi_uint ) )        // Limbs in R
static inline int ecp_mod_koblitz( mbedtls_mpi *N, mbedtls_mpi_uint *Rp, size_t p_limbs,
                                   size_t adjust, size_t shift, mbedtls_mpi_uint mask )
{
 80134e8:	b580      	push	{r7, lr}
 80134ea:	b098      	sub	sp, #96	@ 0x60
 80134ec:	af00      	add	r7, sp, #0
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	60b9      	str	r1, [r7, #8]
 80134f2:	607a      	str	r2, [r7, #4]
 80134f4:	603b      	str	r3, [r7, #0]
    int ret;
    size_t i;
    mbedtls_mpi M, R;
    mbedtls_mpi_uint Mp[P_KOBLITZ_MAX + P_KOBLITZ_R + 1];

    if( N->n < p_limbs )
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d901      	bls.n	8013504 <ecp_mod_koblitz+0x1c>
        return( 0 );
 8013500:	2300      	movs	r3, #0
 8013502:	e0fd      	b.n	8013700 <ecp_mod_koblitz+0x218>

    /* Init R */
    R.s = 1;
 8013504:	2301      	movs	r3, #1
 8013506:	643b      	str	r3, [r7, #64]	@ 0x40
    R.p = Rp;
 8013508:	68bb      	ldr	r3, [r7, #8]
 801350a:	64bb      	str	r3, [r7, #72]	@ 0x48
    R.n = P_KOBLITZ_R;
 801350c:	2302      	movs	r3, #2
 801350e:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Common setup for M */
    M.s = 1;
 8013510:	2301      	movs	r3, #1
 8013512:	64fb      	str	r3, [r7, #76]	@ 0x4c
    M.p = Mp;
 8013514:	f107 0314 	add.w	r3, r7, #20
 8013518:	657b      	str	r3, [r7, #84]	@ 0x54

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	685a      	ldr	r2, [r3, #4]
 801351e:	6839      	ldr	r1, [r7, #0]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	1acb      	subs	r3, r1, r3
 8013524:	4413      	add	r3, r2
 8013526:	653b      	str	r3, [r7, #80]	@ 0x50
    if( M.n > p_limbs + adjust )
 8013528:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801352a:	6879      	ldr	r1, [r7, #4]
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	440b      	add	r3, r1
 8013530:	429a      	cmp	r2, r3
 8013532:	d903      	bls.n	801353c <ecp_mod_koblitz+0x54>
        M.n = p_limbs + adjust;
 8013534:	687a      	ldr	r2, [r7, #4]
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	4413      	add	r3, r2
 801353a:	653b      	str	r3, [r7, #80]	@ 0x50
    memset( Mp, 0, sizeof Mp );
 801353c:	f107 0314 	add.w	r3, r7, #20
 8013540:	222c      	movs	r2, #44	@ 0x2c
 8013542:	2100      	movs	r1, #0
 8013544:	4618      	mov	r0, r3
 8013546:	f002 fa49 	bl	80159dc <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	689a      	ldr	r2, [r3, #8]
 801354e:	6879      	ldr	r1, [r7, #4]
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	1acb      	subs	r3, r1, r3
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	18d1      	adds	r1, r2, r3
 8013558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801355a:	009a      	lsls	r2, r3, #2
 801355c:	f107 0314 	add.w	r3, r7, #20
 8013560:	4618      	mov	r0, r3
 8013562:	f002 fa7f 	bl	8015a64 <memcpy>
    if( shift != 0 )
 8013566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013568:	2b00      	cmp	r3, #0
 801356a:	d00a      	beq.n	8013582 <ecp_mod_koblitz+0x9a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 801356c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013570:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013572:	4618      	mov	r0, r3
 8013574:	f7f7 fc13 	bl	800ad9e <mbedtls_mpi_shift_r>
 8013578:	65f8      	str	r0, [r7, #92]	@ 0x5c
 801357a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801357c:	2b00      	cmp	r3, #0
 801357e:	f040 80be 	bne.w	80136fe <ecp_mod_koblitz+0x216>
    M.n += R.n; /* Make room for multiplication by R */
 8013582:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013586:	4413      	add	r3, r2
 8013588:	653b      	str	r3, [r7, #80]	@ 0x50

    /* N = A0 */
    if( mask != 0 )
 801358a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801358c:	2b00      	cmp	r3, #0
 801358e:	d013      	beq.n	80135b8 <ecp_mod_koblitz+0xd0>
        N->p[p_limbs - 1] &= mask;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	689a      	ldr	r2, [r3, #8]
 8013594:	6879      	ldr	r1, [r7, #4]
 8013596:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801359a:	440b      	add	r3, r1
 801359c:	009b      	lsls	r3, r3, #2
 801359e:	4413      	add	r3, r2
 80135a0:	6819      	ldr	r1, [r3, #0]
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	689a      	ldr	r2, [r3, #8]
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80135ac:	4403      	add	r3, r0
 80135ae:	009b      	lsls	r3, r3, #2
 80135b0:	4413      	add	r3, r2
 80135b2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80135b4:	400a      	ands	r2, r1
 80135b6:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80135bc:	e009      	b.n	80135d2 <ecp_mod_koblitz+0xea>
        N->p[i] = 0;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	689a      	ldr	r2, [r3, #8]
 80135c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80135c4:	009b      	lsls	r3, r3, #2
 80135c6:	4413      	add	r3, r2
 80135c8:	2200      	movs	r2, #0
 80135ca:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 80135cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80135ce:	3301      	adds	r3, #1
 80135d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80135d8:	429a      	cmp	r2, r3
 80135da:	d3f0      	bcc.n	80135be <ecp_mod_koblitz+0xd6>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 80135dc:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80135e0:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80135e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7f9 fb94 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 80135ee:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80135f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	f040 8083 	bne.w	80136fe <ecp_mod_koblitz+0x216>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 80135f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80135fc:	461a      	mov	r2, r3
 80135fe:	68f9      	ldr	r1, [r7, #12]
 8013600:	68f8      	ldr	r0, [r7, #12]
 8013602:	f7f7 fda6 	bl	800b152 <mbedtls_mpi_add_abs>
 8013606:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8013608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801360a:	2b00      	cmp	r3, #0
 801360c:	d177      	bne.n	80136fe <ecp_mod_koblitz+0x216>

    /* Second pass */

    /* M = A1 */
    M.n = N->n - ( p_limbs - adjust );
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	685a      	ldr	r2, [r3, #4]
 8013612:	6839      	ldr	r1, [r7, #0]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	1acb      	subs	r3, r1, r3
 8013618:	4413      	add	r3, r2
 801361a:	653b      	str	r3, [r7, #80]	@ 0x50
    if( M.n > p_limbs + adjust )
 801361c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801361e:	6879      	ldr	r1, [r7, #4]
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	440b      	add	r3, r1
 8013624:	429a      	cmp	r2, r3
 8013626:	d903      	bls.n	8013630 <ecp_mod_koblitz+0x148>
        M.n = p_limbs + adjust;
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	4413      	add	r3, r2
 801362e:	653b      	str	r3, [r7, #80]	@ 0x50
    memset( Mp, 0, sizeof Mp );
 8013630:	f107 0314 	add.w	r3, r7, #20
 8013634:	222c      	movs	r2, #44	@ 0x2c
 8013636:	2100      	movs	r1, #0
 8013638:	4618      	mov	r0, r3
 801363a:	f002 f9cf 	bl	80159dc <memset>
    memcpy( Mp, N->p + p_limbs - adjust, M.n * sizeof( mbedtls_mpi_uint ) );
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	689a      	ldr	r2, [r3, #8]
 8013642:	6879      	ldr	r1, [r7, #4]
 8013644:	683b      	ldr	r3, [r7, #0]
 8013646:	1acb      	subs	r3, r1, r3
 8013648:	009b      	lsls	r3, r3, #2
 801364a:	18d1      	adds	r1, r2, r3
 801364c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801364e:	009a      	lsls	r2, r3, #2
 8013650:	f107 0314 	add.w	r3, r7, #20
 8013654:	4618      	mov	r0, r3
 8013656:	f002 fa05 	bl	8015a64 <memcpy>
    if( shift != 0 )
 801365a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801365c:	2b00      	cmp	r3, #0
 801365e:	d009      	beq.n	8013674 <ecp_mod_koblitz+0x18c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &M, shift ) );
 8013660:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013664:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013666:	4618      	mov	r0, r3
 8013668:	f7f7 fb99 	bl	800ad9e <mbedtls_mpi_shift_r>
 801366c:	65f8      	str	r0, [r7, #92]	@ 0x5c
 801366e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013670:	2b00      	cmp	r3, #0
 8013672:	d144      	bne.n	80136fe <ecp_mod_koblitz+0x216>
    M.n += R.n; /* Make room for multiplication by R */
 8013674:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013678:	4413      	add	r3, r2
 801367a:	653b      	str	r3, [r7, #80]	@ 0x50

    /* N = A0 */
    if( mask != 0 )
 801367c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801367e:	2b00      	cmp	r3, #0
 8013680:	d013      	beq.n	80136aa <ecp_mod_koblitz+0x1c2>
        N->p[p_limbs - 1] &= mask;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	689a      	ldr	r2, [r3, #8]
 8013686:	6879      	ldr	r1, [r7, #4]
 8013688:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801368c:	440b      	add	r3, r1
 801368e:	009b      	lsls	r3, r3, #2
 8013690:	4413      	add	r3, r2
 8013692:	6819      	ldr	r1, [r3, #0]
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	689a      	ldr	r2, [r3, #8]
 8013698:	6878      	ldr	r0, [r7, #4]
 801369a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801369e:	4403      	add	r3, r0
 80136a0:	009b      	lsls	r3, r3, #2
 80136a2:	4413      	add	r3, r2
 80136a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80136a6:	400a      	ands	r2, r1
 80136a8:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80136ae:	e009      	b.n	80136c4 <ecp_mod_koblitz+0x1dc>
        N->p[i] = 0;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	689a      	ldr	r2, [r3, #8]
 80136b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80136b6:	009b      	lsls	r3, r3, #2
 80136b8:	4413      	add	r3, r2
 80136ba:	2200      	movs	r2, #0
 80136bc:	601a      	str	r2, [r3, #0]
    for( i = p_limbs; i < N->n; i++ )
 80136be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80136c0:	3301      	adds	r3, #1
 80136c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d3f0      	bcc.n	80136b0 <ecp_mod_koblitz+0x1c8>

    /* N = A0 + R * A1 */
    MBEDTLS_MPI_CHK( mbedtls_mpi_mul_mpi( &M, &M, &R ) );
 80136ce:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80136d2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80136d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80136da:	4618      	mov	r0, r3
 80136dc:	f7f9 fb1b 	bl	800cd16 <mbedtls_mpi_mul_mpi>
 80136e0:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80136e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d10a      	bne.n	80136fe <ecp_mod_koblitz+0x216>
    MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( N, N, &M ) );
 80136e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80136ec:	461a      	mov	r2, r3
 80136ee:	68f9      	ldr	r1, [r7, #12]
 80136f0:	68f8      	ldr	r0, [r7, #12]
 80136f2:	f7f7 fd2e 	bl	800b152 <mbedtls_mpi_add_abs>
 80136f6:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80136f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136fa:	2b00      	cmp	r3, #0

cleanup:
 80136fc:	bf00      	nop
    return( ret );
 80136fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8013700:	4618      	mov	r0, r3
 8013702:	3760      	adds	r7, #96	@ 0x60
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}

08013708 <ecp_mod_p192k1>:
/*
 * Fast quasi-reduction modulo p192k1 = 2^192 - R,
 * with R = 2^32 + 2^12 + 2^8 + 2^7 + 2^6 + 2^3 + 1 = 0x0100001119
 */
static int ecp_mod_p192k1( mbedtls_mpi *N )
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b084      	sub	sp, #16
 801370c:	af02      	add	r7, sp, #8
 801370e:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xC9, 0x11, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

    return( ecp_mod_koblitz( N, Rp, 192 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 8013710:	2300      	movs	r3, #0
 8013712:	9301      	str	r3, [sp, #4]
 8013714:	2300      	movs	r3, #0
 8013716:	9300      	str	r3, [sp, #0]
 8013718:	2300      	movs	r3, #0
 801371a:	2206      	movs	r2, #6
 801371c:	4904      	ldr	r1, [pc, #16]	@ (8013730 <ecp_mod_p192k1+0x28>)
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f7ff fee2 	bl	80134e8 <ecp_mod_koblitz>
 8013724:	4603      	mov	r3, r0
}
 8013726:	4618      	mov	r0, r3
 8013728:	3708      	adds	r7, #8
 801372a:	46bd      	mov	sp, r7
 801372c:	bd80      	pop	{r7, pc}
 801372e:	bf00      	nop
 8013730:	24000034 	.word	0x24000034

08013734 <ecp_mod_p224k1>:
/*
 * Fast quasi-reduction modulo p224k1 = 2^224 - R,
 * with R = 2^32 + 2^12 + 2^11 + 2^9 + 2^7 + 2^4 + 2 + 1 = 0x0100001A93
 */
static int ecp_mod_p224k1( mbedtls_mpi *N )
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b084      	sub	sp, #16
 8013738:	af02      	add	r7, sp, #8
 801373a:	6078      	str	r0, [r7, #4]
        BYTES_TO_T_UINT_8( 0x93, 0x1A, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };

#if defined(MBEDTLS_HAVE_INT64)
    return( ecp_mod_koblitz( N, Rp, 4, 1, 32, 0xFFFFFFFF ) );
#else
    return( ecp_mod_koblitz( N, Rp, 224 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 801373c:	2300      	movs	r3, #0
 801373e:	9301      	str	r3, [sp, #4]
 8013740:	2300      	movs	r3, #0
 8013742:	9300      	str	r3, [sp, #0]
 8013744:	2300      	movs	r3, #0
 8013746:	2207      	movs	r2, #7
 8013748:	4904      	ldr	r1, [pc, #16]	@ (801375c <ecp_mod_p224k1+0x28>)
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f7ff fecc 	bl	80134e8 <ecp_mod_koblitz>
 8013750:	4603      	mov	r3, r0
#endif
}
 8013752:	4618      	mov	r0, r3
 8013754:	3708      	adds	r7, #8
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
 801375a:	bf00      	nop
 801375c:	2400003c 	.word	0x2400003c

08013760 <ecp_mod_p256k1>:
/*
 * Fast quasi-reduction modulo p256k1 = 2^256 - R,
 * with R = 2^32 + 2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1 = 0x01000003D1
 */
static int ecp_mod_p256k1( mbedtls_mpi *N )
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b084      	sub	sp, #16
 8013764:	af02      	add	r7, sp, #8
 8013766:	6078      	str	r0, [r7, #4]
    static mbedtls_mpi_uint Rp[] = {
        BYTES_TO_T_UINT_8( 0xD1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 ) };
    return( ecp_mod_koblitz( N, Rp, 256 / 8 / sizeof( mbedtls_mpi_uint ), 0, 0, 0 ) );
 8013768:	2300      	movs	r3, #0
 801376a:	9301      	str	r3, [sp, #4]
 801376c:	2300      	movs	r3, #0
 801376e:	9300      	str	r3, [sp, #0]
 8013770:	2300      	movs	r3, #0
 8013772:	2208      	movs	r2, #8
 8013774:	4904      	ldr	r1, [pc, #16]	@ (8013788 <ecp_mod_p256k1+0x28>)
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f7ff feb6 	bl	80134e8 <ecp_mod_koblitz>
 801377c:	4603      	mov	r3, r0
}
 801377e:	4618      	mov	r0, r3
 8013780:	3708      	adds	r7, #8
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}
 8013786:	bf00      	nop
 8013788:	24000044 	.word	0x24000044

0801378c <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8013796:	4b05      	ldr	r3, [pc, #20]	@ (80137ac <mbedtls_platform_zeroize+0x20>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	683a      	ldr	r2, [r7, #0]
 801379c:	2100      	movs	r1, #0
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	4798      	blx	r3
}
 80137a2:	bf00      	nop
 80137a4:	3708      	adds	r7, #8
 80137a6:	46bd      	mov	sp, r7
 80137a8:	bd80      	pop	{r7, pc}
 80137aa:	bf00      	nop
 80137ac:	08017290 	.word	0x08017290

080137b0 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
 80137b8:	226c      	movs	r2, #108	@ 0x6c
 80137ba:	2100      	movs	r1, #0
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	f002 f90d 	bl	80159dc <memset>
}
 80137c2:	bf00      	nop
 80137c4:	3708      	adds	r7, #8
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}

080137ca <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 80137ca:	b580      	push	{r7, lr}
 80137cc:	b082      	sub	sp, #8
 80137ce:	af00      	add	r7, sp, #0
 80137d0:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d004      	beq.n	80137e2 <mbedtls_sha256_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha256_context ) );
 80137d8:	216c      	movs	r1, #108	@ 0x6c
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f7ff ffd6 	bl	801378c <mbedtls_platform_zeroize>
 80137e0:	e000      	b.n	80137e4 <mbedtls_sha256_free+0x1a>
        return;
 80137e2:	bf00      	nop
}
 80137e4:	3708      	adds	r7, #8
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
	...

080137ec <mbedtls_sha256_starts_ret>:

/*
 * SHA-256 context setup
 */
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 80137ec:	b480      	push	{r7}
 80137ee:	b083      	sub	sp, #12
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	2200      	movs	r2, #0
 80137fa:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2200      	movs	r2, #0
 8013800:	605a      	str	r2, [r3, #4]

    if( is224 == 0 )
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d118      	bne.n	801383a <mbedtls_sha256_starts_ret+0x4e>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	4a1d      	ldr	r2, [pc, #116]	@ (8013880 <mbedtls_sha256_starts_ret+0x94>)
 801380c:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0xBB67AE85;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	4a1c      	ldr	r2, [pc, #112]	@ (8013884 <mbedtls_sha256_starts_ret+0x98>)
 8013812:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3C6EF372;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	4a1c      	ldr	r2, [pc, #112]	@ (8013888 <mbedtls_sha256_starts_ret+0x9c>)
 8013818:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xA54FF53A;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4a1b      	ldr	r2, [pc, #108]	@ (801388c <mbedtls_sha256_starts_ret+0xa0>)
 801381e:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0x510E527F;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	4a1b      	ldr	r2, [pc, #108]	@ (8013890 <mbedtls_sha256_starts_ret+0xa4>)
 8013824:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x9B05688C;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	4a1a      	ldr	r2, [pc, #104]	@ (8013894 <mbedtls_sha256_starts_ret+0xa8>)
 801382a:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x1F83D9AB;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	4a1a      	ldr	r2, [pc, #104]	@ (8013898 <mbedtls_sha256_starts_ret+0xac>)
 8013830:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0x5BE0CD19;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4a19      	ldr	r2, [pc, #100]	@ (801389c <mbedtls_sha256_starts_ret+0xb0>)
 8013836:	625a      	str	r2, [r3, #36]	@ 0x24
 8013838:	e017      	b.n	801386a <mbedtls_sha256_starts_ret+0x7e>
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	4a18      	ldr	r2, [pc, #96]	@ (80138a0 <mbedtls_sha256_starts_ret+0xb4>)
 801383e:	609a      	str	r2, [r3, #8]
        ctx->state[1] = 0x367CD507;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	4a18      	ldr	r2, [pc, #96]	@ (80138a4 <mbedtls_sha256_starts_ret+0xb8>)
 8013844:	60da      	str	r2, [r3, #12]
        ctx->state[2] = 0x3070DD17;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	4a17      	ldr	r2, [pc, #92]	@ (80138a8 <mbedtls_sha256_starts_ret+0xbc>)
 801384a:	611a      	str	r2, [r3, #16]
        ctx->state[3] = 0xF70E5939;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	4a17      	ldr	r2, [pc, #92]	@ (80138ac <mbedtls_sha256_starts_ret+0xc0>)
 8013850:	615a      	str	r2, [r3, #20]
        ctx->state[4] = 0xFFC00B31;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	4a16      	ldr	r2, [pc, #88]	@ (80138b0 <mbedtls_sha256_starts_ret+0xc4>)
 8013856:	619a      	str	r2, [r3, #24]
        ctx->state[5] = 0x68581511;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	4a16      	ldr	r2, [pc, #88]	@ (80138b4 <mbedtls_sha256_starts_ret+0xc8>)
 801385c:	61da      	str	r2, [r3, #28]
        ctx->state[6] = 0x64F98FA7;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	4a15      	ldr	r2, [pc, #84]	@ (80138b8 <mbedtls_sha256_starts_ret+0xcc>)
 8013862:	621a      	str	r2, [r3, #32]
        ctx->state[7] = 0xBEFA4FA4;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	4a15      	ldr	r2, [pc, #84]	@ (80138bc <mbedtls_sha256_starts_ret+0xd0>)
 8013868:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    ctx->is224 = is224;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	683a      	ldr	r2, [r7, #0]
 801386e:	669a      	str	r2, [r3, #104]	@ 0x68

    return( 0 );
 8013870:	2300      	movs	r3, #0
}
 8013872:	4618      	mov	r0, r3
 8013874:	370c      	adds	r7, #12
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop
 8013880:	6a09e667 	.word	0x6a09e667
 8013884:	bb67ae85 	.word	0xbb67ae85
 8013888:	3c6ef372 	.word	0x3c6ef372
 801388c:	a54ff53a 	.word	0xa54ff53a
 8013890:	510e527f 	.word	0x510e527f
 8013894:	9b05688c 	.word	0x9b05688c
 8013898:	1f83d9ab 	.word	0x1f83d9ab
 801389c:	5be0cd19 	.word	0x5be0cd19
 80138a0:	c1059ed8 	.word	0xc1059ed8
 80138a4:	367cd507 	.word	0x367cd507
 80138a8:	3070dd17 	.word	0x3070dd17
 80138ac:	f70e5939 	.word	0xf70e5939
 80138b0:	ffc00b31 	.word	0xffc00b31
 80138b4:	68581511 	.word	0x68581511
 80138b8:	64f98fa7 	.word	0x64f98fa7
 80138bc:	befa4fa4 	.word	0xbefa4fa4

080138c0 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
 80138c0:	b490      	push	{r4, r7}
 80138c2:	b0ce      	sub	sp, #312	@ 0x138
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80138ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80138ce:	6018      	str	r0, [r3, #0]
 80138d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80138d4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80138d8:	6019      	str	r1, [r3, #0]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
 80138da:	2300      	movs	r3, #0
 80138dc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80138e0:	e016      	b.n	8013910 <mbedtls_internal_sha256_process+0x50>
        A[i] = ctx->state[i];
 80138e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80138e6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80138f0:	3202      	adds	r2, #2
 80138f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80138fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80138fe:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8013906:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801390a:	3301      	adds	r3, #1
 801390c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013910:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013914:	2b07      	cmp	r3, #7
 8013916:	d9e4      	bls.n	80138e2 <mbedtls_internal_sha256_process+0x22>

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
 8013918:	2300      	movs	r3, #0
 801391a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801391e:	e03e      	b.n	801399e <mbedtls_internal_sha256_process+0xde>
        GET_UINT32_BE( W[i], data, 4 * i );
 8013920:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013924:	009b      	lsls	r3, r3, #2
 8013926:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801392a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 801392e:	6812      	ldr	r2, [r2, #0]
 8013930:	4413      	add	r3, r2
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	061a      	lsls	r2, r3, #24
 8013936:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801393a:	009b      	lsls	r3, r3, #2
 801393c:	3301      	adds	r3, #1
 801393e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8013942:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8013946:	6809      	ldr	r1, [r1, #0]
 8013948:	440b      	add	r3, r1
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	041b      	lsls	r3, r3, #16
 801394e:	431a      	orrs	r2, r3
 8013950:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	3302      	adds	r3, #2
 8013958:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801395c:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8013960:	6809      	ldr	r1, [r1, #0]
 8013962:	440b      	add	r3, r1
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	021b      	lsls	r3, r3, #8
 8013968:	4313      	orrs	r3, r2
 801396a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801396e:	0092      	lsls	r2, r2, #2
 8013970:	3203      	adds	r2, #3
 8013972:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8013976:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 801397a:	6809      	ldr	r1, [r1, #0]
 801397c:	440a      	add	r2, r1
 801397e:	7812      	ldrb	r2, [r2, #0]
 8013980:	ea43 0102 	orr.w	r1, r3, r2
 8013984:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013988:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801398c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8013990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 16; i++ )
 8013994:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013998:	3301      	adds	r3, #1
 801399a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801399e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80139a2:	2b0f      	cmp	r3, #15
 80139a4:	d9bc      	bls.n	8013920 <mbedtls_internal_sha256_process+0x60>

    for( i = 0; i < 16; i += 8 )
 80139a6:	2300      	movs	r3, #0
 80139a8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80139ac:	f000 bcba 	b.w	8014324 <mbedtls_internal_sha256_process+0xa64>
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
 80139b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139b8:	69da      	ldr	r2, [r3, #28]
 80139ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139c2:	691b      	ldr	r3, [r3, #16]
 80139c4:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80139c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139d0:	691b      	ldr	r3, [r3, #16]
 80139d2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80139d6:	4059      	eors	r1, r3
 80139d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139e0:	691b      	ldr	r3, [r3, #16]
 80139e2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80139e6:	404b      	eors	r3, r1
 80139e8:	441a      	add	r2, r3
 80139ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139f2:	6999      	ldr	r1, [r3, #24]
 80139f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80139f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80139fc:	6918      	ldr	r0, [r3, #16]
 80139fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a06:	695c      	ldr	r4, [r3, #20]
 8013a08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a10:	699b      	ldr	r3, [r3, #24]
 8013a12:	4063      	eors	r3, r4
 8013a14:	4003      	ands	r3, r0
 8013a16:	404b      	eors	r3, r1
 8013a18:	441a      	add	r2, r3
 8013a1a:	49e0      	ldr	r1, [pc, #896]	@ (8013d9c <mbedtls_internal_sha256_process+0x4dc>)
 8013a1c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013a20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013a24:	441a      	add	r2, r3
 8013a26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013a2e:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8013a32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013a36:	4413      	add	r3, r2
 8013a38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013a3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a40:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013a4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013a58:	405a      	eors	r2, r3
 8013a5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a5e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013a68:	405a      	eors	r2, r3
 8013a6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a72:	6819      	ldr	r1, [r3, #0]
 8013a74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	4019      	ands	r1, r3
 8013a80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a88:	6898      	ldr	r0, [r3, #8]
 8013a8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a92:	681c      	ldr	r4, [r3, #0]
 8013a94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013a98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	4323      	orrs	r3, r4
 8013aa0:	4003      	ands	r3, r0
 8013aa2:	430b      	orrs	r3, r1
 8013aa4:	4413      	add	r3, r2
 8013aa6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013aaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013aae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ab2:	68da      	ldr	r2, [r3, #12]
 8013ab4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013ab8:	441a      	add	r2, r3
 8013aba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013abe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ac2:	60da      	str	r2, [r3, #12]
 8013ac4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013acc:	441a      	add	r2, r3
 8013ace:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ad2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ad6:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
 8013ad8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013adc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ae0:	699a      	ldr	r2, [r3, #24]
 8013ae2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ae6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013af0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013af4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013afe:	4059      	eors	r1, r3
 8013b00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013b0e:	404b      	eors	r3, r1
 8013b10:	441a      	add	r2, r3
 8013b12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b1a:	6959      	ldr	r1, [r3, #20]
 8013b1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b24:	68d8      	ldr	r0, [r3, #12]
 8013b26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b2e:	691c      	ldr	r4, [r3, #16]
 8013b30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b38:	695b      	ldr	r3, [r3, #20]
 8013b3a:	4063      	eors	r3, r4
 8013b3c:	4003      	ands	r3, r0
 8013b3e:	404b      	eors	r3, r1
 8013b40:	441a      	add	r2, r3
 8013b42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013b46:	3301      	adds	r3, #1
 8013b48:	4994      	ldr	r1, [pc, #592]	@ (8013d9c <mbedtls_internal_sha256_process+0x4dc>)
 8013b4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013b4e:	441a      	add	r2, r3
 8013b50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013b54:	1c59      	adds	r1, r3, #1
 8013b56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013b5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013b62:	4413      	add	r3, r2
 8013b64:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013b68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b70:	69db      	ldr	r3, [r3, #28]
 8013b72:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013b76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b7e:	69db      	ldr	r3, [r3, #28]
 8013b80:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013b84:	405a      	eors	r2, r3
 8013b86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b8e:	69db      	ldr	r3, [r3, #28]
 8013b90:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013b94:	405a      	eors	r2, r3
 8013b96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013b9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013b9e:	69d9      	ldr	r1, [r3, #28]
 8013ba0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ba4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	4019      	ands	r1, r3
 8013bac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bb0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bb4:	6858      	ldr	r0, [r3, #4]
 8013bb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bbe:	69dc      	ldr	r4, [r3, #28]
 8013bc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bc4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	4323      	orrs	r3, r4
 8013bcc:	4003      	ands	r3, r0
 8013bce:	430b      	orrs	r3, r1
 8013bd0:	4413      	add	r3, r2
 8013bd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013bd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bda:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bde:	689a      	ldr	r2, [r3, #8]
 8013be0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013be4:	441a      	add	r2, r3
 8013be6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013bee:	609a      	str	r2, [r3, #8]
 8013bf0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013bf8:	441a      	add	r2, r3
 8013bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013bfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c02:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
 8013c04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c0c:	695a      	ldr	r2, [r3, #20]
 8013c0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c16:	689b      	ldr	r3, [r3, #8]
 8013c18:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013c1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c24:	689b      	ldr	r3, [r3, #8]
 8013c26:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013c2a:	4059      	eors	r1, r3
 8013c2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c34:	689b      	ldr	r3, [r3, #8]
 8013c36:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013c3a:	404b      	eors	r3, r1
 8013c3c:	441a      	add	r2, r3
 8013c3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c46:	6919      	ldr	r1, [r3, #16]
 8013c48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c50:	6898      	ldr	r0, [r3, #8]
 8013c52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c5a:	68dc      	ldr	r4, [r3, #12]
 8013c5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c64:	691b      	ldr	r3, [r3, #16]
 8013c66:	4063      	eors	r3, r4
 8013c68:	4003      	ands	r3, r0
 8013c6a:	404b      	eors	r3, r1
 8013c6c:	441a      	add	r2, r3
 8013c6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013c72:	3302      	adds	r3, #2
 8013c74:	4949      	ldr	r1, [pc, #292]	@ (8013d9c <mbedtls_internal_sha256_process+0x4dc>)
 8013c76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013c7a:	441a      	add	r2, r3
 8013c7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013c80:	1c99      	adds	r1, r3, #2
 8013c82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013c8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c8e:	4413      	add	r3, r2
 8013c90:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013c94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013c98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013c9c:	699b      	ldr	r3, [r3, #24]
 8013c9e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013ca2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ca6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013caa:	699b      	ldr	r3, [r3, #24]
 8013cac:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013cb0:	405a      	eors	r2, r3
 8013cb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cb6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cba:	699b      	ldr	r3, [r3, #24]
 8013cbc:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013cc0:	405a      	eors	r2, r3
 8013cc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cca:	6999      	ldr	r1, [r3, #24]
 8013ccc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cd4:	69db      	ldr	r3, [r3, #28]
 8013cd6:	4019      	ands	r1, r3
 8013cd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cdc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ce0:	6818      	ldr	r0, [r3, #0]
 8013ce2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ce6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cea:	699c      	ldr	r4, [r3, #24]
 8013cec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013cf4:	69db      	ldr	r3, [r3, #28]
 8013cf6:	4323      	orrs	r3, r4
 8013cf8:	4003      	ands	r3, r0
 8013cfa:	430b      	orrs	r3, r1
 8013cfc:	4413      	add	r3, r2
 8013cfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d0a:	685a      	ldr	r2, [r3, #4]
 8013d0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013d10:	441a      	add	r2, r3
 8013d12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d1a:	605a      	str	r2, [r3, #4]
 8013d1c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013d24:	441a      	add	r2, r3
 8013d26:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d2a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d2e:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
 8013d30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d38:	691a      	ldr	r2, [r3, #16]
 8013d3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d4c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d50:	685b      	ldr	r3, [r3, #4]
 8013d52:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013d56:	4059      	eors	r1, r3
 8013d58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013d66:	404b      	eors	r3, r1
 8013d68:	441a      	add	r2, r3
 8013d6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d72:	68d9      	ldr	r1, [r3, #12]
 8013d74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d7c:	6858      	ldr	r0, [r3, #4]
 8013d7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d86:	689c      	ldr	r4, [r3, #8]
 8013d88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013d8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013d90:	68db      	ldr	r3, [r3, #12]
 8013d92:	4063      	eors	r3, r4
 8013d94:	4003      	ands	r3, r0
 8013d96:	404b      	eors	r3, r1
 8013d98:	441a      	add	r2, r3
 8013d9a:	e001      	b.n	8013da0 <mbedtls_internal_sha256_process+0x4e0>
 8013d9c:	08017294 	.word	0x08017294
 8013da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013da4:	3303      	adds	r3, #3
 8013da6:	49e0      	ldr	r1, [pc, #896]	@ (8014128 <mbedtls_internal_sha256_process+0x868>)
 8013da8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013dac:	441a      	add	r2, r3
 8013dae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013db2:	1cd9      	adds	r1, r3, #3
 8013db4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013db8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013dbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013dc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013dce:	695b      	ldr	r3, [r3, #20]
 8013dd0:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013dd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013dd8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ddc:	695b      	ldr	r3, [r3, #20]
 8013dde:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013de2:	405a      	eors	r2, r3
 8013de4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013de8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013dec:	695b      	ldr	r3, [r3, #20]
 8013dee:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013df2:	405a      	eors	r2, r3
 8013df4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013df8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013dfc:	6959      	ldr	r1, [r3, #20]
 8013dfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e06:	699b      	ldr	r3, [r3, #24]
 8013e08:	4019      	ands	r1, r3
 8013e0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e12:	69d8      	ldr	r0, [r3, #28]
 8013e14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e1c:	695c      	ldr	r4, [r3, #20]
 8013e1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e26:	699b      	ldr	r3, [r3, #24]
 8013e28:	4323      	orrs	r3, r4
 8013e2a:	4003      	ands	r3, r0
 8013e2c:	430b      	orrs	r3, r1
 8013e2e:	4413      	add	r3, r2
 8013e30:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013e34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e38:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013e42:	441a      	add	r2, r3
 8013e44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e4c:	601a      	str	r2, [r3, #0]
 8013e4e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013e56:	441a      	add	r2, r3
 8013e58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e60:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
 8013e62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e6a:	68da      	ldr	r2, [r3, #12]
 8013e6c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013e7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013e88:	4059      	eors	r1, r3
 8013e8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013e8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013e98:	404b      	eors	r3, r1
 8013e9a:	441a      	add	r2, r3
 8013e9c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ea0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ea4:	6899      	ldr	r1, [r3, #8]
 8013ea6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013eaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013eae:	6818      	ldr	r0, [r3, #0]
 8013eb0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013eb4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013eb8:	685c      	ldr	r4, [r3, #4]
 8013eba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ebe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013ec2:	689b      	ldr	r3, [r3, #8]
 8013ec4:	4063      	eors	r3, r4
 8013ec6:	4003      	ands	r3, r0
 8013ec8:	404b      	eors	r3, r1
 8013eca:	441a      	add	r2, r3
 8013ecc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013ed0:	3304      	adds	r3, #4
 8013ed2:	4995      	ldr	r1, [pc, #596]	@ (8014128 <mbedtls_internal_sha256_process+0x868>)
 8013ed4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013ed8:	441a      	add	r2, r3
 8013eda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013ede:	1d19      	adds	r1, r3, #4
 8013ee0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ee4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8013ee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013eec:	4413      	add	r3, r2
 8013eee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8013ef2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ef6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013efa:	691b      	ldr	r3, [r3, #16]
 8013efc:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8013f00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f08:	691b      	ldr	r3, [r3, #16]
 8013f0a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8013f0e:	405a      	eors	r2, r3
 8013f10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f18:	691b      	ldr	r3, [r3, #16]
 8013f1a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8013f1e:	405a      	eors	r2, r3
 8013f20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f28:	6919      	ldr	r1, [r3, #16]
 8013f2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f2e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f32:	695b      	ldr	r3, [r3, #20]
 8013f34:	4019      	ands	r1, r3
 8013f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f3e:	6998      	ldr	r0, [r3, #24]
 8013f40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f48:	691c      	ldr	r4, [r3, #16]
 8013f4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f52:	695b      	ldr	r3, [r3, #20]
 8013f54:	4323      	orrs	r3, r4
 8013f56:	4003      	ands	r3, r0
 8013f58:	430b      	orrs	r3, r1
 8013f5a:	4413      	add	r3, r2
 8013f5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013f60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f68:	69da      	ldr	r2, [r3, #28]
 8013f6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013f6e:	441a      	add	r2, r3
 8013f70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f78:	61da      	str	r2, [r3, #28]
 8013f7a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8013f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8013f82:	441a      	add	r2, r3
 8013f84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f8c:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
 8013f8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013f96:	689a      	ldr	r2, [r3, #8]
 8013f98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fa0:	69db      	ldr	r3, [r3, #28]
 8013fa2:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8013fa6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013faa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fae:	69db      	ldr	r3, [r3, #28]
 8013fb0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8013fb4:	4059      	eors	r1, r3
 8013fb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fbe:	69db      	ldr	r3, [r3, #28]
 8013fc0:	ea4f 6373 	mov.w	r3, r3, ror #25
 8013fc4:	404b      	eors	r3, r1
 8013fc6:	441a      	add	r2, r3
 8013fc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fd0:	6859      	ldr	r1, [r3, #4]
 8013fd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fda:	69d8      	ldr	r0, [r3, #28]
 8013fdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fe0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fe4:	681c      	ldr	r4, [r3, #0]
 8013fe6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013fea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8013fee:	685b      	ldr	r3, [r3, #4]
 8013ff0:	4063      	eors	r3, r4
 8013ff2:	4003      	ands	r3, r0
 8013ff4:	404b      	eors	r3, r1
 8013ff6:	441a      	add	r2, r3
 8013ff8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013ffc:	3305      	adds	r3, #5
 8013ffe:	494a      	ldr	r1, [pc, #296]	@ (8014128 <mbedtls_internal_sha256_process+0x868>)
 8014000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014004:	441a      	add	r2, r3
 8014006:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801400a:	1d59      	adds	r1, r3, #5
 801400c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014010:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014014:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014018:	4413      	add	r3, r2
 801401a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801401e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014022:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014026:	68db      	ldr	r3, [r3, #12]
 8014028:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801402c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014030:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014034:	68db      	ldr	r3, [r3, #12]
 8014036:	ea4f 3373 	mov.w	r3, r3, ror #13
 801403a:	405a      	eors	r2, r3
 801403c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014040:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801404a:	405a      	eors	r2, r3
 801404c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014050:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014054:	68d9      	ldr	r1, [r3, #12]
 8014056:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801405a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801405e:	691b      	ldr	r3, [r3, #16]
 8014060:	4019      	ands	r1, r3
 8014062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014066:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801406a:	6958      	ldr	r0, [r3, #20]
 801406c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014070:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014074:	68dc      	ldr	r4, [r3, #12]
 8014076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801407a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801407e:	691b      	ldr	r3, [r3, #16]
 8014080:	4323      	orrs	r3, r4
 8014082:	4003      	ands	r3, r0
 8014084:	430b      	orrs	r3, r1
 8014086:	4413      	add	r3, r2
 8014088:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 801408c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014090:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014094:	699a      	ldr	r2, [r3, #24]
 8014096:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801409a:	441a      	add	r2, r3
 801409c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140a4:	619a      	str	r2, [r3, #24]
 80140a6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80140aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80140ae:	441a      	add	r2, r3
 80140b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140b8:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
 80140ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140c2:	685a      	ldr	r2, [r3, #4]
 80140c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140cc:	699b      	ldr	r3, [r3, #24]
 80140ce:	ea4f 11b3 	mov.w	r1, r3, ror #6
 80140d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140da:	699b      	ldr	r3, [r3, #24]
 80140dc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80140e0:	4059      	eors	r1, r3
 80140e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140e6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140ea:	699b      	ldr	r3, [r3, #24]
 80140ec:	ea4f 6373 	mov.w	r3, r3, ror #25
 80140f0:	404b      	eors	r3, r1
 80140f2:	441a      	add	r2, r3
 80140f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80140f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80140fc:	6819      	ldr	r1, [r3, #0]
 80140fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014102:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014106:	6998      	ldr	r0, [r3, #24]
 8014108:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801410c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014110:	69dc      	ldr	r4, [r3, #28]
 8014112:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014116:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	4063      	eors	r3, r4
 801411e:	4003      	ands	r3, r0
 8014120:	404b      	eors	r3, r1
 8014122:	441a      	add	r2, r3
 8014124:	e002      	b.n	801412c <mbedtls_internal_sha256_process+0x86c>
 8014126:	bf00      	nop
 8014128:	08017294 	.word	0x08017294
 801412c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014130:	3306      	adds	r3, #6
 8014132:	4981      	ldr	r1, [pc, #516]	@ (8014338 <mbedtls_internal_sha256_process+0xa78>)
 8014134:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014138:	441a      	add	r2, r3
 801413a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801413e:	1d99      	adds	r1, r3, #6
 8014140:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014144:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014148:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801414c:	4413      	add	r3, r2
 801414e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014152:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014156:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801415a:	689b      	ldr	r3, [r3, #8]
 801415c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014160:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014164:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014168:	689b      	ldr	r3, [r3, #8]
 801416a:	ea4f 3373 	mov.w	r3, r3, ror #13
 801416e:	405a      	eors	r2, r3
 8014170:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014174:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014178:	689b      	ldr	r3, [r3, #8]
 801417a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801417e:	405a      	eors	r2, r3
 8014180:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014184:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014188:	6899      	ldr	r1, [r3, #8]
 801418a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801418e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014192:	68db      	ldr	r3, [r3, #12]
 8014194:	4019      	ands	r1, r3
 8014196:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801419a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801419e:	6918      	ldr	r0, [r3, #16]
 80141a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141a8:	689c      	ldr	r4, [r3, #8]
 80141aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141b2:	68db      	ldr	r3, [r3, #12]
 80141b4:	4323      	orrs	r3, r4
 80141b6:	4003      	ands	r3, r0
 80141b8:	430b      	orrs	r3, r1
 80141ba:	4413      	add	r3, r2
 80141bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80141c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141c8:	695a      	ldr	r2, [r3, #20]
 80141ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80141ce:	441a      	add	r2, r3
 80141d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141d8:	615a      	str	r2, [r3, #20]
 80141da:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80141de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80141e2:	441a      	add	r2, r3
 80141e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141ec:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
 80141ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80141fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014200:	695b      	ldr	r3, [r3, #20]
 8014202:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014206:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801420a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801420e:	695b      	ldr	r3, [r3, #20]
 8014210:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014214:	4059      	eors	r1, r3
 8014216:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801421a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801421e:	695b      	ldr	r3, [r3, #20]
 8014220:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014224:	404b      	eors	r3, r1
 8014226:	441a      	add	r2, r3
 8014228:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801422c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014230:	69d9      	ldr	r1, [r3, #28]
 8014232:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014236:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801423a:	6958      	ldr	r0, [r3, #20]
 801423c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014240:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014244:	699c      	ldr	r4, [r3, #24]
 8014246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801424a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801424e:	69db      	ldr	r3, [r3, #28]
 8014250:	4063      	eors	r3, r4
 8014252:	4003      	ands	r3, r0
 8014254:	404b      	eors	r3, r1
 8014256:	441a      	add	r2, r3
 8014258:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801425c:	3307      	adds	r3, #7
 801425e:	4936      	ldr	r1, [pc, #216]	@ (8014338 <mbedtls_internal_sha256_process+0xa78>)
 8014260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014264:	441a      	add	r2, r3
 8014266:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801426a:	1dd9      	adds	r1, r3, #7
 801426c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014270:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014274:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014278:	4413      	add	r3, r2
 801427a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801427e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014282:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014286:	685b      	ldr	r3, [r3, #4]
 8014288:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801428c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014290:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014294:	685b      	ldr	r3, [r3, #4]
 8014296:	ea4f 3373 	mov.w	r3, r3, ror #13
 801429a:	405a      	eors	r2, r3
 801429c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142a4:	685b      	ldr	r3, [r3, #4]
 80142a6:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80142aa:	405a      	eors	r2, r3
 80142ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142b4:	6859      	ldr	r1, [r3, #4]
 80142b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142be:	689b      	ldr	r3, [r3, #8]
 80142c0:	4019      	ands	r1, r3
 80142c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142c6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142ca:	68d8      	ldr	r0, [r3, #12]
 80142cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142d4:	685c      	ldr	r4, [r3, #4]
 80142d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142de:	689b      	ldr	r3, [r3, #8]
 80142e0:	4323      	orrs	r3, r4
 80142e2:	4003      	ands	r3, r0
 80142e4:	430b      	orrs	r3, r1
 80142e6:	4413      	add	r3, r2
 80142e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80142ec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80142f0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80142f4:	691a      	ldr	r2, [r3, #16]
 80142f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80142fa:	441a      	add	r2, r3
 80142fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014300:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014304:	611a      	str	r2, [r3, #16]
 8014306:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801430a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801430e:	441a      	add	r2, r3
 8014310:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014314:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014318:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 16; i += 8 )
 801431a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801431e:	3308      	adds	r3, #8
 8014320:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8014324:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014328:	2b0f      	cmp	r3, #15
 801432a:	f67f ab41 	bls.w	80139b0 <mbedtls_internal_sha256_process+0xf0>
    }

    for( i = 16; i < 64; i += 8 )
 801432e:	2310      	movs	r3, #16
 8014330:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8014334:	f000 bfd5 	b.w	80152e2 <mbedtls_internal_sha256_process+0x1a22>
 8014338:	08017294 	.word	0x08017294
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
 801433c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014344:	69da      	ldr	r2, [r3, #28]
 8014346:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801434a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801434e:	691b      	ldr	r3, [r3, #16]
 8014350:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014354:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014358:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801435c:	691b      	ldr	r3, [r3, #16]
 801435e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014362:	4059      	eors	r1, r3
 8014364:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014368:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801436c:	691b      	ldr	r3, [r3, #16]
 801436e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014372:	404b      	eors	r3, r1
 8014374:	441a      	add	r2, r3
 8014376:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801437a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801437e:	6999      	ldr	r1, [r3, #24]
 8014380:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014384:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014388:	6918      	ldr	r0, [r3, #16]
 801438a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801438e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014392:	695c      	ldr	r4, [r3, #20]
 8014394:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014398:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801439c:	699b      	ldr	r3, [r3, #24]
 801439e:	4063      	eors	r3, r4
 80143a0:	4003      	ands	r3, r0
 80143a2:	404b      	eors	r3, r1
 80143a4:	441a      	add	r2, r3
 80143a6:	49ec      	ldr	r1, [pc, #944]	@ (8014758 <mbedtls_internal_sha256_process+0xe98>)
 80143a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80143b0:	441a      	add	r2, r3
 80143b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143b6:	1e99      	subs	r1, r3, #2
 80143b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143bc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80143c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80143c4:	ea4f 4173 	mov.w	r1, r3, ror #17
 80143c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143cc:	1e98      	subs	r0, r3, #2
 80143ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80143d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80143da:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80143de:	4059      	eors	r1, r3
 80143e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143e4:	1e98      	subs	r0, r3, #2
 80143e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80143ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80143ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80143f2:	0a9b      	lsrs	r3, r3, #10
 80143f4:	4059      	eors	r1, r3
 80143f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80143fa:	1fd8      	subs	r0, r3, #7
 80143fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014400:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014404:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014408:	4419      	add	r1, r3
 801440a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801440e:	f1a3 000f 	sub.w	r0, r3, #15
 8014412:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014416:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801441a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801441e:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014422:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014426:	f1a3 040f 	sub.w	r4, r3, #15
 801442a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801442e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014432:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014436:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801443a:	4058      	eors	r0, r3
 801443c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014440:	f1a3 040f 	sub.w	r4, r3, #15
 8014444:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014448:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801444c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014450:	08db      	lsrs	r3, r3, #3
 8014452:	4043      	eors	r3, r0
 8014454:	4419      	add	r1, r3
 8014456:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801445a:	f1a3 0010 	sub.w	r0, r3, #16
 801445e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014462:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014466:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801446a:	18c8      	adds	r0, r1, r3
 801446c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014470:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014474:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014478:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 801447c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014480:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014484:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014488:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801448c:	4413      	add	r3, r2
 801448e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014492:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014496:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80144a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	ea4f 3373 	mov.w	r3, r3, ror #13
 80144ae:	405a      	eors	r2, r3
 80144b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80144be:	405a      	eors	r2, r3
 80144c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144c8:	6819      	ldr	r1, [r3, #0]
 80144ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144d2:	685b      	ldr	r3, [r3, #4]
 80144d4:	4019      	ands	r1, r3
 80144d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144de:	6898      	ldr	r0, [r3, #8]
 80144e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144e4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144e8:	681c      	ldr	r4, [r3, #0]
 80144ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	4323      	orrs	r3, r4
 80144f6:	4003      	ands	r3, r0
 80144f8:	430b      	orrs	r3, r1
 80144fa:	4413      	add	r3, r2
 80144fc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014500:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014504:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014508:	68da      	ldr	r2, [r3, #12]
 801450a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801450e:	441a      	add	r2, r3
 8014510:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014514:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014518:	60da      	str	r2, [r3, #12]
 801451a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801451e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014522:	441a      	add	r2, r3
 8014524:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014528:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801452c:	61da      	str	r2, [r3, #28]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
 801452e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014532:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014536:	699a      	ldr	r2, [r3, #24]
 8014538:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801453c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014540:	68db      	ldr	r3, [r3, #12]
 8014542:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014546:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801454a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801454e:	68db      	ldr	r3, [r3, #12]
 8014550:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014554:	4059      	eors	r1, r3
 8014556:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801455a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014564:	404b      	eors	r3, r1
 8014566:	441a      	add	r2, r3
 8014568:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801456c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014570:	6959      	ldr	r1, [r3, #20]
 8014572:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014576:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801457a:	68d8      	ldr	r0, [r3, #12]
 801457c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014580:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014584:	691c      	ldr	r4, [r3, #16]
 8014586:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801458a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801458e:	695b      	ldr	r3, [r3, #20]
 8014590:	4063      	eors	r3, r4
 8014592:	4003      	ands	r3, r0
 8014594:	404b      	eors	r3, r1
 8014596:	441a      	add	r2, r3
 8014598:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801459c:	3301      	adds	r3, #1
 801459e:	496e      	ldr	r1, [pc, #440]	@ (8014758 <mbedtls_internal_sha256_process+0xe98>)
 80145a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80145a4:	441a      	add	r2, r3
 80145a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145aa:	1e59      	subs	r1, r3, #1
 80145ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80145b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80145b8:	ea4f 4173 	mov.w	r1, r3, ror #17
 80145bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145c0:	1e58      	subs	r0, r3, #1
 80145c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80145ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80145ce:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80145d2:	4059      	eors	r1, r3
 80145d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145d8:	1e58      	subs	r0, r3, #1
 80145da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80145e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80145e6:	0a9b      	lsrs	r3, r3, #10
 80145e8:	4059      	eors	r1, r3
 80145ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145ee:	1f98      	subs	r0, r3, #6
 80145f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80145f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80145fc:	4419      	add	r1, r3
 80145fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014602:	f1a3 000e 	sub.w	r0, r3, #14
 8014606:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801460a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801460e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014612:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014616:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801461a:	f1a3 040e 	sub.w	r4, r3, #14
 801461e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014622:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014626:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801462a:	ea4f 43b3 	mov.w	r3, r3, ror #18
 801462e:	4058      	eors	r0, r3
 8014630:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014634:	f1a3 040e 	sub.w	r4, r3, #14
 8014638:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801463c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014640:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014644:	08db      	lsrs	r3, r3, #3
 8014646:	4043      	eors	r3, r0
 8014648:	18c8      	adds	r0, r1, r3
 801464a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801464e:	f1a3 010f 	sub.w	r1, r3, #15
 8014652:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014656:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801465a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801465e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014662:	3301      	adds	r3, #1
 8014664:	4408      	add	r0, r1
 8014666:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801466a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 801466e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014672:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014676:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 801467a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801467e:	4413      	add	r3, r2
 8014680:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014684:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014688:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801468c:	69db      	ldr	r3, [r3, #28]
 801468e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014692:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014696:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801469a:	69db      	ldr	r3, [r3, #28]
 801469c:	ea4f 3373 	mov.w	r3, r3, ror #13
 80146a0:	405a      	eors	r2, r3
 80146a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146aa:	69db      	ldr	r3, [r3, #28]
 80146ac:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80146b0:	405a      	eors	r2, r3
 80146b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146ba:	69d9      	ldr	r1, [r3, #28]
 80146bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	4019      	ands	r1, r3
 80146c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146d0:	6858      	ldr	r0, [r3, #4]
 80146d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146da:	69dc      	ldr	r4, [r3, #28]
 80146dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	4323      	orrs	r3, r4
 80146e8:	4003      	ands	r3, r0
 80146ea:	430b      	orrs	r3, r1
 80146ec:	4413      	add	r3, r2
 80146ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80146f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80146f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80146fa:	689a      	ldr	r2, [r3, #8]
 80146fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014700:	441a      	add	r2, r3
 8014702:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014706:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801470a:	609a      	str	r2, [r3, #8]
 801470c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014710:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014714:	441a      	add	r2, r3
 8014716:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801471a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801471e:	619a      	str	r2, [r3, #24]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
 8014720:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014724:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014728:	695a      	ldr	r2, [r3, #20]
 801472a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801472e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014732:	689b      	ldr	r3, [r3, #8]
 8014734:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014738:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801473c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014746:	4059      	eors	r1, r3
 8014748:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801474c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014750:	689b      	ldr	r3, [r3, #8]
 8014752:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014756:	e001      	b.n	801475c <mbedtls_internal_sha256_process+0xe9c>
 8014758:	08017294 	.word	0x08017294
 801475c:	404b      	eors	r3, r1
 801475e:	441a      	add	r2, r3
 8014760:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014764:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014768:	6919      	ldr	r1, [r3, #16]
 801476a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801476e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014772:	6898      	ldr	r0, [r3, #8]
 8014774:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014778:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801477c:	68dc      	ldr	r4, [r3, #12]
 801477e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014782:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014786:	691b      	ldr	r3, [r3, #16]
 8014788:	4063      	eors	r3, r4
 801478a:	4003      	ands	r3, r0
 801478c:	404b      	eors	r3, r1
 801478e:	441a      	add	r2, r3
 8014790:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014794:	3302      	adds	r3, #2
 8014796:	49ec      	ldr	r1, [pc, #944]	@ (8014b48 <mbedtls_internal_sha256_process+0x1288>)
 8014798:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801479c:	441a      	add	r2, r3
 801479e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147a6:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80147aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80147ae:	ea4f 4173 	mov.w	r1, r3, ror #17
 80147b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147ba:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80147be:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80147c2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80147c6:	4059      	eors	r1, r3
 80147c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147d0:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80147d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80147d8:	0a9b      	lsrs	r3, r3, #10
 80147da:	4059      	eors	r1, r3
 80147dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80147e0:	1f58      	subs	r0, r3, #5
 80147e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80147ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80147ee:	4419      	add	r1, r3
 80147f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80147f4:	f1a3 000d 	sub.w	r0, r3, #13
 80147f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147fc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014800:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014804:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014808:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801480c:	f1a3 040d 	sub.w	r4, r3, #13
 8014810:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014814:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014818:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801481c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014820:	4058      	eors	r0, r3
 8014822:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014826:	f1a3 040d 	sub.w	r4, r3, #13
 801482a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801482e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014832:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014836:	08db      	lsrs	r3, r3, #3
 8014838:	4043      	eors	r3, r0
 801483a:	18c8      	adds	r0, r1, r3
 801483c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014840:	f1a3 010e 	sub.w	r1, r3, #14
 8014844:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014848:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801484c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014850:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014854:	3302      	adds	r3, #2
 8014856:	4408      	add	r0, r1
 8014858:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801485c:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014860:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014864:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014868:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 801486c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014870:	4413      	add	r3, r2
 8014872:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014876:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801487a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801487e:	699b      	ldr	r3, [r3, #24]
 8014880:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014884:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014888:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801488c:	699b      	ldr	r3, [r3, #24]
 801488e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014892:	405a      	eors	r2, r3
 8014894:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014898:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801489c:	699b      	ldr	r3, [r3, #24]
 801489e:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80148a2:	405a      	eors	r2, r3
 80148a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148ac:	6999      	ldr	r1, [r3, #24]
 80148ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148b6:	69db      	ldr	r3, [r3, #28]
 80148b8:	4019      	ands	r1, r3
 80148ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148c2:	6818      	ldr	r0, [r3, #0]
 80148c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148cc:	699c      	ldr	r4, [r3, #24]
 80148ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148d6:	69db      	ldr	r3, [r3, #28]
 80148d8:	4323      	orrs	r3, r4
 80148da:	4003      	ands	r3, r0
 80148dc:	430b      	orrs	r3, r1
 80148de:	4413      	add	r3, r2
 80148e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80148e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148ec:	685a      	ldr	r2, [r3, #4]
 80148ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80148f2:	441a      	add	r2, r3
 80148f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148fc:	605a      	str	r2, [r3, #4]
 80148fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014902:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014906:	441a      	add	r2, r3
 8014908:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801490c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014910:	615a      	str	r2, [r3, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
 8014912:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014916:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801491a:	691a      	ldr	r2, [r3, #16]
 801491c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014920:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	ea4f 11b3 	mov.w	r1, r3, ror #6
 801492a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801492e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014932:	685b      	ldr	r3, [r3, #4]
 8014934:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014938:	4059      	eors	r1, r3
 801493a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801493e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014948:	404b      	eors	r3, r1
 801494a:	441a      	add	r2, r3
 801494c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014950:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014954:	68d9      	ldr	r1, [r3, #12]
 8014956:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801495a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801495e:	6858      	ldr	r0, [r3, #4]
 8014960:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014964:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014968:	689c      	ldr	r4, [r3, #8]
 801496a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801496e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	4063      	eors	r3, r4
 8014976:	4003      	ands	r3, r0
 8014978:	404b      	eors	r3, r1
 801497a:	441a      	add	r2, r3
 801497c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014980:	3303      	adds	r3, #3
 8014982:	4971      	ldr	r1, [pc, #452]	@ (8014b48 <mbedtls_internal_sha256_process+0x1288>)
 8014984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014988:	441a      	add	r2, r3
 801498a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801498e:	1c59      	adds	r1, r3, #1
 8014990:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014994:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014998:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801499c:	ea4f 4173 	mov.w	r1, r3, ror #17
 80149a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149a4:	1c58      	adds	r0, r3, #1
 80149a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80149ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80149b2:	ea4f 43f3 	mov.w	r3, r3, ror #19
 80149b6:	4059      	eors	r1, r3
 80149b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149bc:	1c58      	adds	r0, r3, #1
 80149be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80149c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80149ca:	0a9b      	lsrs	r3, r3, #10
 80149cc:	4059      	eors	r1, r3
 80149ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149d2:	1f18      	subs	r0, r3, #4
 80149d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80149dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80149e0:	4419      	add	r1, r3
 80149e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149e6:	f1a3 000c 	sub.w	r0, r3, #12
 80149ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80149ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80149f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80149f6:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80149fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149fe:	f1a3 040c 	sub.w	r4, r3, #12
 8014a02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014a0a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014a0e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014a12:	4058      	eors	r0, r3
 8014a14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a18:	f1a3 040c 	sub.w	r4, r3, #12
 8014a1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014a24:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014a28:	08db      	lsrs	r3, r3, #3
 8014a2a:	4043      	eors	r3, r0
 8014a2c:	18c8      	adds	r0, r1, r3
 8014a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a32:	f1a3 010d 	sub.w	r1, r3, #13
 8014a36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014a3e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a46:	3303      	adds	r3, #3
 8014a48:	4408      	add	r0, r1
 8014a4a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014a4e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014a52:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014a56:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014a5a:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014a5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014a62:	4413      	add	r3, r2
 8014a64:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014a68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a70:	695b      	ldr	r3, [r3, #20]
 8014a72:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014a76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a7a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a7e:	695b      	ldr	r3, [r3, #20]
 8014a80:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014a84:	405a      	eors	r2, r3
 8014a86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a8e:	695b      	ldr	r3, [r3, #20]
 8014a90:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014a94:	405a      	eors	r2, r3
 8014a96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014a9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014a9e:	6959      	ldr	r1, [r3, #20]
 8014aa0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014aa4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014aa8:	699b      	ldr	r3, [r3, #24]
 8014aaa:	4019      	ands	r1, r3
 8014aac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ab0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ab4:	69d8      	ldr	r0, [r3, #28]
 8014ab6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014aba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014abe:	695c      	ldr	r4, [r3, #20]
 8014ac0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ac4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ac8:	699b      	ldr	r3, [r3, #24]
 8014aca:	4323      	orrs	r3, r4
 8014acc:	4003      	ands	r3, r0
 8014ace:	430b      	orrs	r3, r1
 8014ad0:	4413      	add	r3, r2
 8014ad2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014ad6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ada:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ade:	681a      	ldr	r2, [r3, #0]
 8014ae0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014ae4:	441a      	add	r2, r3
 8014ae6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014aea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014aee:	601a      	str	r2, [r3, #0]
 8014af0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014af8:	441a      	add	r2, r3
 8014afa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014afe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b02:	611a      	str	r2, [r3, #16]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
 8014b04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b0c:	68da      	ldr	r2, [r3, #12]
 8014b0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014b1c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014b2a:	4059      	eors	r1, r3
 8014b2c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014b3a:	404b      	eors	r3, r1
 8014b3c:	441a      	add	r2, r3
 8014b3e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b42:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b46:	e001      	b.n	8014b4c <mbedtls_internal_sha256_process+0x128c>
 8014b48:	08017294 	.word	0x08017294
 8014b4c:	6899      	ldr	r1, [r3, #8]
 8014b4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b56:	6818      	ldr	r0, [r3, #0]
 8014b58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b60:	685c      	ldr	r4, [r3, #4]
 8014b62:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b66:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b6a:	689b      	ldr	r3, [r3, #8]
 8014b6c:	4063      	eors	r3, r4
 8014b6e:	4003      	ands	r3, r0
 8014b70:	404b      	eors	r3, r1
 8014b72:	441a      	add	r2, r3
 8014b74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b78:	3304      	adds	r3, #4
 8014b7a:	49ec      	ldr	r1, [pc, #944]	@ (8014f2c <mbedtls_internal_sha256_process+0x166c>)
 8014b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014b80:	441a      	add	r2, r3
 8014b82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b86:	1c99      	adds	r1, r3, #2
 8014b88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014b8c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014b90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014b94:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014b98:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014b9c:	1c98      	adds	r0, r3, #2
 8014b9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ba2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014ba6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014baa:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014bae:	4059      	eors	r1, r3
 8014bb0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bb4:	1c98      	adds	r0, r3, #2
 8014bb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bbe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014bc2:	0a9b      	lsrs	r3, r3, #10
 8014bc4:	4059      	eors	r1, r3
 8014bc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bca:	1ed8      	subs	r0, r3, #3
 8014bcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bd4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014bd8:	4419      	add	r1, r3
 8014bda:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bde:	f1a3 000b 	sub.w	r0, r3, #11
 8014be2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014be6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014bee:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014bf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014bf6:	f1a3 040b 	sub.w	r4, r3, #11
 8014bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014bfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014c02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014c06:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014c0a:	4058      	eors	r0, r3
 8014c0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c10:	f1a3 040b 	sub.w	r4, r3, #11
 8014c14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c18:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014c1c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014c20:	08db      	lsrs	r3, r3, #3
 8014c22:	4043      	eors	r3, r0
 8014c24:	18c8      	adds	r0, r1, r3
 8014c26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c2a:	f1a3 010c 	sub.w	r1, r3, #12
 8014c2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014c36:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014c3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014c3e:	3304      	adds	r3, #4
 8014c40:	4408      	add	r0, r1
 8014c42:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014c46:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014c4a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014c4e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014c52:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014c56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014c5a:	4413      	add	r3, r2
 8014c5c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014c60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c68:	691b      	ldr	r3, [r3, #16]
 8014c6a:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014c6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c76:	691b      	ldr	r3, [r3, #16]
 8014c78:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014c7c:	405a      	eors	r2, r3
 8014c7e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c82:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c86:	691b      	ldr	r3, [r3, #16]
 8014c88:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014c8c:	405a      	eors	r2, r3
 8014c8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014c96:	6919      	ldr	r1, [r3, #16]
 8014c98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014c9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ca0:	695b      	ldr	r3, [r3, #20]
 8014ca2:	4019      	ands	r1, r3
 8014ca4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ca8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cac:	6998      	ldr	r0, [r3, #24]
 8014cae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cb6:	691c      	ldr	r4, [r3, #16]
 8014cb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cbc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cc0:	695b      	ldr	r3, [r3, #20]
 8014cc2:	4323      	orrs	r3, r4
 8014cc4:	4003      	ands	r3, r0
 8014cc6:	430b      	orrs	r3, r1
 8014cc8:	4413      	add	r3, r2
 8014cca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014cce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cd2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cd6:	69da      	ldr	r2, [r3, #28]
 8014cd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014cdc:	441a      	add	r2, r3
 8014cde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ce2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ce6:	61da      	str	r2, [r3, #28]
 8014ce8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014cf0:	441a      	add	r2, r3
 8014cf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cf6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014cfa:	60da      	str	r2, [r3, #12]
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
 8014cfc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d04:	689a      	ldr	r2, [r3, #8]
 8014d06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d0e:	69db      	ldr	r3, [r3, #28]
 8014d10:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014d14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d18:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d1c:	69db      	ldr	r3, [r3, #28]
 8014d1e:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014d22:	4059      	eors	r1, r3
 8014d24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d2c:	69db      	ldr	r3, [r3, #28]
 8014d2e:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014d32:	404b      	eors	r3, r1
 8014d34:	441a      	add	r2, r3
 8014d36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d3e:	6859      	ldr	r1, [r3, #4]
 8014d40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d48:	69d8      	ldr	r0, [r3, #28]
 8014d4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d52:	681c      	ldr	r4, [r3, #0]
 8014d54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	4063      	eors	r3, r4
 8014d60:	4003      	ands	r3, r0
 8014d62:	404b      	eors	r3, r1
 8014d64:	441a      	add	r2, r3
 8014d66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d6a:	3305      	adds	r3, #5
 8014d6c:	496f      	ldr	r1, [pc, #444]	@ (8014f2c <mbedtls_internal_sha256_process+0x166c>)
 8014d6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014d72:	441a      	add	r2, r3
 8014d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d78:	1cd9      	adds	r1, r3, #3
 8014d7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d7e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014d82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014d86:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014d8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d8e:	1cd8      	adds	r0, r3, #3
 8014d90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d94:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014d98:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014d9c:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014da0:	4059      	eors	r1, r3
 8014da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014da6:	1cd8      	adds	r0, r3, #3
 8014da8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014db0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014db4:	0a9b      	lsrs	r3, r3, #10
 8014db6:	4059      	eors	r1, r3
 8014db8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014dbc:	1e98      	subs	r0, r3, #2
 8014dbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014dc6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014dca:	4419      	add	r1, r3
 8014dcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014dd0:	f1a3 000a 	sub.w	r0, r3, #10
 8014dd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dd8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014ddc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014de0:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014de4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014de8:	f1a3 040a 	sub.w	r4, r3, #10
 8014dec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014df0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014df4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014df8:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014dfc:	4058      	eors	r0, r3
 8014dfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e02:	f1a3 040a 	sub.w	r4, r3, #10
 8014e06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014e0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014e12:	08db      	lsrs	r3, r3, #3
 8014e14:	4043      	eors	r3, r0
 8014e16:	18c8      	adds	r0, r1, r3
 8014e18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e1c:	f1a3 010b 	sub.w	r1, r3, #11
 8014e20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e24:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014e28:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8014e2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e30:	3305      	adds	r3, #5
 8014e32:	4408      	add	r0, r1
 8014e34:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014e38:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014e3c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8014e40:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014e44:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8014e48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014e4c:	4413      	add	r3, r2
 8014e4e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014e52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e56:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e5a:	68db      	ldr	r3, [r3, #12]
 8014e5c:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8014e60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e68:	68db      	ldr	r3, [r3, #12]
 8014e6a:	ea4f 3373 	mov.w	r3, r3, ror #13
 8014e6e:	405a      	eors	r2, r3
 8014e70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e78:	68db      	ldr	r3, [r3, #12]
 8014e7a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8014e7e:	405a      	eors	r2, r3
 8014e80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e84:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e88:	68d9      	ldr	r1, [r3, #12]
 8014e8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e8e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e92:	691b      	ldr	r3, [r3, #16]
 8014e94:	4019      	ands	r1, r3
 8014e96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e9a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014e9e:	6958      	ldr	r0, [r3, #20]
 8014ea0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ea4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ea8:	68dc      	ldr	r4, [r3, #12]
 8014eaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014eae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014eb2:	691b      	ldr	r3, [r3, #16]
 8014eb4:	4323      	orrs	r3, r4
 8014eb6:	4003      	ands	r3, r0
 8014eb8:	430b      	orrs	r3, r1
 8014eba:	4413      	add	r3, r2
 8014ebc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8014ec0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ec4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ec8:	699a      	ldr	r2, [r3, #24]
 8014eca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014ece:	441a      	add	r2, r3
 8014ed0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ed4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ed8:	619a      	str	r2, [r3, #24]
 8014eda:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014ee2:	441a      	add	r2, r3
 8014ee4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ee8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014eec:	609a      	str	r2, [r3, #8]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
 8014eee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014ef2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ef6:	685a      	ldr	r2, [r3, #4]
 8014ef8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014efc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f00:	699b      	ldr	r3, [r3, #24]
 8014f02:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8014f06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f0e:	699b      	ldr	r3, [r3, #24]
 8014f10:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8014f14:	4059      	eors	r1, r3
 8014f16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f1e:	699b      	ldr	r3, [r3, #24]
 8014f20:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014f24:	404b      	eors	r3, r1
 8014f26:	441a      	add	r2, r3
 8014f28:	e002      	b.n	8014f30 <mbedtls_internal_sha256_process+0x1670>
 8014f2a:	bf00      	nop
 8014f2c:	08017294 	.word	0x08017294
 8014f30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f38:	6819      	ldr	r1, [r3, #0]
 8014f3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f42:	6998      	ldr	r0, [r3, #24]
 8014f44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f4c:	69dc      	ldr	r4, [r3, #28]
 8014f4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f52:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	4063      	eors	r3, r4
 8014f5a:	4003      	ands	r3, r0
 8014f5c:	404b      	eors	r3, r1
 8014f5e:	441a      	add	r2, r3
 8014f60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f64:	3306      	adds	r3, #6
 8014f66:	49e3      	ldr	r1, [pc, #908]	@ (80152f4 <mbedtls_internal_sha256_process+0x1a34>)
 8014f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014f6c:	441a      	add	r2, r3
 8014f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f72:	1d19      	adds	r1, r3, #4
 8014f74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f78:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014f7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014f80:	ea4f 4173 	mov.w	r1, r3, ror #17
 8014f84:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f88:	1d18      	adds	r0, r3, #4
 8014f8a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014f92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014f96:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014f9a:	4059      	eors	r1, r3
 8014f9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fa0:	1d18      	adds	r0, r3, #4
 8014fa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fa6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014faa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014fae:	0a9b      	lsrs	r3, r3, #10
 8014fb0:	4059      	eors	r1, r3
 8014fb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fb6:	1e58      	subs	r0, r3, #1
 8014fb8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fbc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014fc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014fc4:	4419      	add	r1, r3
 8014fc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fca:	f1a3 0009 	sub.w	r0, r3, #9
 8014fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014fd6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014fda:	ea4f 10f3 	mov.w	r0, r3, ror #7
 8014fde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fe2:	f1a3 0409 	sub.w	r4, r3, #9
 8014fe6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014fee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014ff2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014ff6:	4058      	eors	r0, r3
 8014ff8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ffc:	f1a3 0409 	sub.w	r4, r3, #9
 8015000:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015004:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015008:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801500c:	08db      	lsrs	r3, r3, #3
 801500e:	4043      	eors	r3, r0
 8015010:	18c8      	adds	r0, r1, r3
 8015012:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015016:	f1a3 010a 	sub.w	r1, r3, #10
 801501a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801501e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015022:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8015026:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801502a:	3306      	adds	r3, #6
 801502c:	4408      	add	r0, r1
 801502e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015032:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8015036:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801503a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801503e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8015042:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015046:	4413      	add	r3, r2
 8015048:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801504c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015050:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015054:	689b      	ldr	r3, [r3, #8]
 8015056:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801505a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801505e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015062:	689b      	ldr	r3, [r3, #8]
 8015064:	ea4f 3373 	mov.w	r3, r3, ror #13
 8015068:	405a      	eors	r2, r3
 801506a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801506e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015072:	689b      	ldr	r3, [r3, #8]
 8015074:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8015078:	405a      	eors	r2, r3
 801507a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801507e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015082:	6899      	ldr	r1, [r3, #8]
 8015084:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015088:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801508c:	68db      	ldr	r3, [r3, #12]
 801508e:	4019      	ands	r1, r3
 8015090:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015094:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015098:	6918      	ldr	r0, [r3, #16]
 801509a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801509e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150a2:	689c      	ldr	r4, [r3, #8]
 80150a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150ac:	68db      	ldr	r3, [r3, #12]
 80150ae:	4323      	orrs	r3, r4
 80150b0:	4003      	ands	r3, r0
 80150b2:	430b      	orrs	r3, r1
 80150b4:	4413      	add	r3, r2
 80150b6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80150ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150c2:	695a      	ldr	r2, [r3, #20]
 80150c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150c8:	441a      	add	r2, r3
 80150ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150d2:	615a      	str	r2, [r3, #20]
 80150d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80150d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150dc:	441a      	add	r2, r3
 80150de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150e2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150e6:	605a      	str	r2, [r3, #4]
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
 80150e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150f0:	681a      	ldr	r2, [r3, #0]
 80150f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150f6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150fa:	695b      	ldr	r3, [r3, #20]
 80150fc:	ea4f 11b3 	mov.w	r1, r3, ror #6
 8015100:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015104:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015108:	695b      	ldr	r3, [r3, #20]
 801510a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801510e:	4059      	eors	r1, r3
 8015110:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015114:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015118:	695b      	ldr	r3, [r3, #20]
 801511a:	ea4f 6373 	mov.w	r3, r3, ror #25
 801511e:	404b      	eors	r3, r1
 8015120:	441a      	add	r2, r3
 8015122:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015126:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801512a:	69d9      	ldr	r1, [r3, #28]
 801512c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015130:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015134:	6958      	ldr	r0, [r3, #20]
 8015136:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801513a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801513e:	699c      	ldr	r4, [r3, #24]
 8015140:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015144:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015148:	69db      	ldr	r3, [r3, #28]
 801514a:	4063      	eors	r3, r4
 801514c:	4003      	ands	r3, r0
 801514e:	404b      	eors	r3, r1
 8015150:	441a      	add	r2, r3
 8015152:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015156:	3307      	adds	r3, #7
 8015158:	4966      	ldr	r1, [pc, #408]	@ (80152f4 <mbedtls_internal_sha256_process+0x1a34>)
 801515a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801515e:	441a      	add	r2, r3
 8015160:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015164:	1d59      	adds	r1, r3, #5
 8015166:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801516a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801516e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015172:	ea4f 4173 	mov.w	r1, r3, ror #17
 8015176:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801517a:	1d58      	adds	r0, r3, #5
 801517c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015180:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015184:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015188:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801518c:	4059      	eors	r1, r3
 801518e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015192:	1d58      	adds	r0, r3, #5
 8015194:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015198:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801519c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80151a0:	0a9b      	lsrs	r3, r3, #10
 80151a2:	4059      	eors	r1, r3
 80151a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80151ac:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 80151b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80151b4:	4419      	add	r1, r3
 80151b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151ba:	f1a3 0008 	sub.w	r0, r3, #8
 80151be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151c2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80151c6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80151ca:	ea4f 10f3 	mov.w	r0, r3, ror #7
 80151ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151d2:	f1a3 0408 	sub.w	r4, r3, #8
 80151d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80151de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80151e2:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80151e6:	4058      	eors	r0, r3
 80151e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80151ec:	f1a3 0408 	sub.w	r4, r3, #8
 80151f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80151f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80151f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80151fc:	08db      	lsrs	r3, r3, #3
 80151fe:	4043      	eors	r3, r0
 8015200:	18c8      	adds	r0, r1, r3
 8015202:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015206:	f1a3 0109 	sub.w	r1, r3, #9
 801520a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801520e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8015212:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8015216:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801521a:	3307      	adds	r3, #7
 801521c:	4408      	add	r0, r1
 801521e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015222:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8015226:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 801522a:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801522e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8015232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015236:	4413      	add	r3, r2
 8015238:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801523c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015240:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801524a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801524e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	ea4f 3373 	mov.w	r3, r3, ror #13
 8015258:	405a      	eors	r2, r3
 801525a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801525e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8015268:	405a      	eors	r2, r3
 801526a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801526e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015272:	6859      	ldr	r1, [r3, #4]
 8015274:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015278:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801527c:	689b      	ldr	r3, [r3, #8]
 801527e:	4019      	ands	r1, r3
 8015280:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015284:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015288:	68d8      	ldr	r0, [r3, #12]
 801528a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801528e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015292:	685c      	ldr	r4, [r3, #4]
 8015294:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015298:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801529c:	689b      	ldr	r3, [r3, #8]
 801529e:	4323      	orrs	r3, r4
 80152a0:	4003      	ands	r3, r0
 80152a2:	430b      	orrs	r3, r1
 80152a4:	4413      	add	r3, r2
 80152a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80152aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152b2:	691a      	ldr	r2, [r3, #16]
 80152b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80152b8:	441a      	add	r2, r3
 80152ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152be:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152c2:	611a      	str	r2, [r3, #16]
 80152c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80152c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80152cc:	441a      	add	r2, r3
 80152ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80152d6:	601a      	str	r2, [r3, #0]
    for( i = 16; i < 64; i += 8 )
 80152d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80152dc:	3308      	adds	r3, #8
 80152de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80152e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80152e6:	2b3f      	cmp	r3, #63	@ 0x3f
 80152e8:	f67f a828 	bls.w	801433c <mbedtls_internal_sha256_process+0xa7c>
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
 80152ec:	2300      	movs	r3, #0
 80152ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80152f2:	e023      	b.n	801533c <mbedtls_internal_sha256_process+0x1a7c>
 80152f4:	08017294 	.word	0x08017294
        ctx->state[i] += A[i];
 80152f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80152fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8015306:	3202      	adds	r2, #2
 8015308:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801530c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015310:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015314:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8015318:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801531c:	18d1      	adds	r1, r2, r3
 801531e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015322:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801532c:	3202      	adds	r2, #2
 801532e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i = 0; i < 8; i++ )
 8015332:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015336:	3301      	adds	r3, #1
 8015338:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801533c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015340:	2b07      	cmp	r3, #7
 8015342:	d9d9      	bls.n	80152f8 <mbedtls_internal_sha256_process+0x1a38>

    return( 0 );
 8015344:	2300      	movs	r3, #0
}
 8015346:	4618      	mov	r0, r3
 8015348:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 801534c:	46bd      	mov	sp, r7
 801534e:	bc90      	pop	{r4, r7}
 8015350:	4770      	bx	lr
 8015352:	bf00      	nop

08015354 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 8015354:	b580      	push	{r7, lr}
 8015356:	b088      	sub	sp, #32
 8015358:	af00      	add	r7, sp, #0
 801535a:	60f8      	str	r0, [r7, #12]
 801535c:	60b9      	str	r1, [r7, #8]
 801535e:	607a      	str	r2, [r7, #4]
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d101      	bne.n	801536a <mbedtls_sha256_update_ret+0x16>
        return( 0 );
 8015366:	2300      	movs	r3, #0
 8015368:	e065      	b.n	8015436 <mbedtls_sha256_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015372:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 801537a:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	681a      	ldr	r2, [r3, #0]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	441a      	add	r2, r3
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	681a      	ldr	r2, [r3, #0]
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	687a      	ldr	r2, [r7, #4]
 8015396:	429a      	cmp	r2, r3
 8015398:	d904      	bls.n	80153a4 <mbedtls_sha256_update_ret+0x50>
        ctx->total[1]++;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	1c5a      	adds	r2, r3, #1
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 80153a4:	69fb      	ldr	r3, [r7, #28]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d034      	beq.n	8015414 <mbedtls_sha256_update_ret+0xc0>
 80153aa:	687a      	ldr	r2, [r7, #4]
 80153ac:	69bb      	ldr	r3, [r7, #24]
 80153ae:	429a      	cmp	r2, r3
 80153b0:	d330      	bcc.n	8015414 <mbedtls_sha256_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80153b8:	69fb      	ldr	r3, [r7, #28]
 80153ba:	4413      	add	r3, r2
 80153bc:	69ba      	ldr	r2, [r7, #24]
 80153be:	68b9      	ldr	r1, [r7, #8]
 80153c0:	4618      	mov	r0, r3
 80153c2:	f000 fb4f 	bl	8015a64 <memcpy>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	3328      	adds	r3, #40	@ 0x28
 80153ca:	4619      	mov	r1, r3
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f7fe fa77 	bl	80138c0 <mbedtls_internal_sha256_process>
 80153d2:	6178      	str	r0, [r7, #20]
 80153d4:	697b      	ldr	r3, [r7, #20]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d001      	beq.n	80153de <mbedtls_sha256_update_ret+0x8a>
            return( ret );
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	e02b      	b.n	8015436 <mbedtls_sha256_update_ret+0xe2>

        input += fill;
 80153de:	68ba      	ldr	r2, [r7, #8]
 80153e0:	69bb      	ldr	r3, [r7, #24]
 80153e2:	4413      	add	r3, r2
 80153e4:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 80153e6:	687a      	ldr	r2, [r7, #4]
 80153e8:	69bb      	ldr	r3, [r7, #24]
 80153ea:	1ad3      	subs	r3, r2, r3
 80153ec:	607b      	str	r3, [r7, #4]
        left = 0;
 80153ee:	2300      	movs	r3, #0
 80153f0:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 80153f2:	e00f      	b.n	8015414 <mbedtls_sha256_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
 80153f4:	68b9      	ldr	r1, [r7, #8]
 80153f6:	68f8      	ldr	r0, [r7, #12]
 80153f8:	f7fe fa62 	bl	80138c0 <mbedtls_internal_sha256_process>
 80153fc:	6178      	str	r0, [r7, #20]
 80153fe:	697b      	ldr	r3, [r7, #20]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d001      	beq.n	8015408 <mbedtls_sha256_update_ret+0xb4>
            return( ret );
 8015404:	697b      	ldr	r3, [r7, #20]
 8015406:	e016      	b.n	8015436 <mbedtls_sha256_update_ret+0xe2>

        input += 64;
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	3340      	adds	r3, #64	@ 0x40
 801540c:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	3b40      	subs	r3, #64	@ 0x40
 8015412:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	2b3f      	cmp	r3, #63	@ 0x3f
 8015418:	d8ec      	bhi.n	80153f4 <mbedtls_sha256_update_ret+0xa0>
    }

    if( ilen > 0 )
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d009      	beq.n	8015434 <mbedtls_sha256_update_ret+0xe0>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	4413      	add	r3, r2
 801542a:	687a      	ldr	r2, [r7, #4]
 801542c:	68b9      	ldr	r1, [r7, #8]
 801542e:	4618      	mov	r0, r3
 8015430:	f000 fb18 	bl	8015a64 <memcpy>

    return( 0 );
 8015434:	2300      	movs	r3, #0
}
 8015436:	4618      	mov	r0, r3
 8015438:	3720      	adds	r7, #32
 801543a:	46bd      	mov	sp, r7
 801543c:	bd80      	pop	{r7, pc}

0801543e <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 801543e:	b580      	push	{r7, lr}
 8015440:	b086      	sub	sp, #24
 8015442:	af00      	add	r7, sp, #0
 8015444:	6078      	str	r0, [r7, #4]
 8015446:	6039      	str	r1, [r7, #0]
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015450:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	1c5a      	adds	r2, r3, #1
 8015456:	617a      	str	r2, [r7, #20]
 8015458:	687a      	ldr	r2, [r7, #4]
 801545a:	4413      	add	r3, r2
 801545c:	2280      	movs	r2, #128	@ 0x80
 801545e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( used <= 56 )
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	2b38      	cmp	r3, #56	@ 0x38
 8015466:	d80c      	bhi.n	8015482 <mbedtls_sha256_finish_ret+0x44>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	18d0      	adds	r0, r2, r3
 8015472:	697b      	ldr	r3, [r7, #20]
 8015474:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8015478:	461a      	mov	r2, r3
 801547a:	2100      	movs	r1, #0
 801547c:	f000 faae 	bl	80159dc <memset>
 8015480:	e01e      	b.n	80154c0 <mbedtls_sha256_finish_ret+0x82>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	18d0      	adds	r0, r2, r3
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8015492:	461a      	mov	r2, r3
 8015494:	2100      	movs	r1, #0
 8015496:	f000 faa1 	bl	80159dc <memset>

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	3328      	adds	r3, #40	@ 0x28
 801549e:	4619      	mov	r1, r3
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7fe fa0d 	bl	80138c0 <mbedtls_internal_sha256_process>
 80154a6:	6138      	str	r0, [r7, #16]
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d001      	beq.n	80154b2 <mbedtls_sha256_finish_ret+0x74>
            return( ret );
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	e128      	b.n	8015704 <mbedtls_sha256_finish_ret+0x2c6>

        memset( ctx->buffer, 0, 56 );
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	3328      	adds	r3, #40	@ 0x28
 80154b6:	2238      	movs	r2, #56	@ 0x38
 80154b8:	2100      	movs	r1, #0
 80154ba:	4618      	mov	r0, r3
 80154bc:	f000 fa8e 	bl	80159dc <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	685b      	ldr	r3, [r3, #4]
 80154ca:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 80154cc:	4313      	orrs	r3, r2
 80154ce:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	00db      	lsls	r3, r3, #3
 80154d6:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_BE( high, ctx->buffer, 56 );
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	0e1b      	lsrs	r3, r3, #24
 80154dc:	b2da      	uxtb	r2, r3
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	0c1b      	lsrs	r3, r3, #16
 80154e8:	b2da      	uxtb	r2, r3
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	0a1b      	lsrs	r3, r3, #8
 80154f4:	b2da      	uxtb	r2, r3
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	b2da      	uxtb	r2, r3
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	0e1b      	lsrs	r3, r3, #24
 801550a:	b2da      	uxtb	r2, r3
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	0c1b      	lsrs	r3, r3, #16
 8015516:	b2da      	uxtb	r2, r3
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	0a1b      	lsrs	r3, r3, #8
 8015522:	b2da      	uxtb	r2, r3
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
 801552a:	68bb      	ldr	r3, [r7, #8]
 801552c:	b2da      	uxtb	r2, r3
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	3328      	adds	r3, #40	@ 0x28
 8015538:	4619      	mov	r1, r3
 801553a:	6878      	ldr	r0, [r7, #4]
 801553c:	f7fe f9c0 	bl	80138c0 <mbedtls_internal_sha256_process>
 8015540:	6138      	str	r0, [r7, #16]
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d001      	beq.n	801554c <mbedtls_sha256_finish_ret+0x10e>
        return( ret );
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	e0db      	b.n	8015704 <mbedtls_sha256_finish_ret+0x2c6>

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	689b      	ldr	r3, [r3, #8]
 8015550:	0e1b      	lsrs	r3, r3, #24
 8015552:	b2da      	uxtb	r2, r3
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	701a      	strb	r2, [r3, #0]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	689b      	ldr	r3, [r3, #8]
 801555c:	0c1a      	lsrs	r2, r3, #16
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	3301      	adds	r3, #1
 8015562:	b2d2      	uxtb	r2, r2
 8015564:	701a      	strb	r2, [r3, #0]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	689b      	ldr	r3, [r3, #8]
 801556a:	0a1a      	lsrs	r2, r3, #8
 801556c:	683b      	ldr	r3, [r7, #0]
 801556e:	3302      	adds	r3, #2
 8015570:	b2d2      	uxtb	r2, r2
 8015572:	701a      	strb	r2, [r3, #0]
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	689a      	ldr	r2, [r3, #8]
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	3303      	adds	r3, #3
 801557c:	b2d2      	uxtb	r2, r2
 801557e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	68db      	ldr	r3, [r3, #12]
 8015584:	0e1a      	lsrs	r2, r3, #24
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	3304      	adds	r3, #4
 801558a:	b2d2      	uxtb	r2, r2
 801558c:	701a      	strb	r2, [r3, #0]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	0c1a      	lsrs	r2, r3, #16
 8015594:	683b      	ldr	r3, [r7, #0]
 8015596:	3305      	adds	r3, #5
 8015598:	b2d2      	uxtb	r2, r2
 801559a:	701a      	strb	r2, [r3, #0]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	68db      	ldr	r3, [r3, #12]
 80155a0:	0a1a      	lsrs	r2, r3, #8
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	3306      	adds	r3, #6
 80155a6:	b2d2      	uxtb	r2, r2
 80155a8:	701a      	strb	r2, [r3, #0]
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	68da      	ldr	r2, [r3, #12]
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	3307      	adds	r3, #7
 80155b2:	b2d2      	uxtb	r2, r2
 80155b4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	691b      	ldr	r3, [r3, #16]
 80155ba:	0e1a      	lsrs	r2, r3, #24
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	3308      	adds	r3, #8
 80155c0:	b2d2      	uxtb	r2, r2
 80155c2:	701a      	strb	r2, [r3, #0]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	691b      	ldr	r3, [r3, #16]
 80155c8:	0c1a      	lsrs	r2, r3, #16
 80155ca:	683b      	ldr	r3, [r7, #0]
 80155cc:	3309      	adds	r3, #9
 80155ce:	b2d2      	uxtb	r2, r2
 80155d0:	701a      	strb	r2, [r3, #0]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	691b      	ldr	r3, [r3, #16]
 80155d6:	0a1a      	lsrs	r2, r3, #8
 80155d8:	683b      	ldr	r3, [r7, #0]
 80155da:	330a      	adds	r3, #10
 80155dc:	b2d2      	uxtb	r2, r2
 80155de:	701a      	strb	r2, [r3, #0]
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	691a      	ldr	r2, [r3, #16]
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	330b      	adds	r3, #11
 80155e8:	b2d2      	uxtb	r2, r2
 80155ea:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	695b      	ldr	r3, [r3, #20]
 80155f0:	0e1a      	lsrs	r2, r3, #24
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	330c      	adds	r3, #12
 80155f6:	b2d2      	uxtb	r2, r2
 80155f8:	701a      	strb	r2, [r3, #0]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	695b      	ldr	r3, [r3, #20]
 80155fe:	0c1a      	lsrs	r2, r3, #16
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	330d      	adds	r3, #13
 8015604:	b2d2      	uxtb	r2, r2
 8015606:	701a      	strb	r2, [r3, #0]
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	695b      	ldr	r3, [r3, #20]
 801560c:	0a1a      	lsrs	r2, r3, #8
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	330e      	adds	r3, #14
 8015612:	b2d2      	uxtb	r2, r2
 8015614:	701a      	strb	r2, [r3, #0]
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	695a      	ldr	r2, [r3, #20]
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	330f      	adds	r3, #15
 801561e:	b2d2      	uxtb	r2, r2
 8015620:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	699b      	ldr	r3, [r3, #24]
 8015626:	0e1a      	lsrs	r2, r3, #24
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	3310      	adds	r3, #16
 801562c:	b2d2      	uxtb	r2, r2
 801562e:	701a      	strb	r2, [r3, #0]
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	699b      	ldr	r3, [r3, #24]
 8015634:	0c1a      	lsrs	r2, r3, #16
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	3311      	adds	r3, #17
 801563a:	b2d2      	uxtb	r2, r2
 801563c:	701a      	strb	r2, [r3, #0]
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	699b      	ldr	r3, [r3, #24]
 8015642:	0a1a      	lsrs	r2, r3, #8
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	3312      	adds	r3, #18
 8015648:	b2d2      	uxtb	r2, r2
 801564a:	701a      	strb	r2, [r3, #0]
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	699a      	ldr	r2, [r3, #24]
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	3313      	adds	r3, #19
 8015654:	b2d2      	uxtb	r2, r2
 8015656:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	69db      	ldr	r3, [r3, #28]
 801565c:	0e1a      	lsrs	r2, r3, #24
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	3314      	adds	r3, #20
 8015662:	b2d2      	uxtb	r2, r2
 8015664:	701a      	strb	r2, [r3, #0]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	69db      	ldr	r3, [r3, #28]
 801566a:	0c1a      	lsrs	r2, r3, #16
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	3315      	adds	r3, #21
 8015670:	b2d2      	uxtb	r2, r2
 8015672:	701a      	strb	r2, [r3, #0]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	69db      	ldr	r3, [r3, #28]
 8015678:	0a1a      	lsrs	r2, r3, #8
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	3316      	adds	r3, #22
 801567e:	b2d2      	uxtb	r2, r2
 8015680:	701a      	strb	r2, [r3, #0]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	69da      	ldr	r2, [r3, #28]
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	3317      	adds	r3, #23
 801568a:	b2d2      	uxtb	r2, r2
 801568c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	6a1b      	ldr	r3, [r3, #32]
 8015692:	0e1a      	lsrs	r2, r3, #24
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	3318      	adds	r3, #24
 8015698:	b2d2      	uxtb	r2, r2
 801569a:	701a      	strb	r2, [r3, #0]
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	6a1b      	ldr	r3, [r3, #32]
 80156a0:	0c1a      	lsrs	r2, r3, #16
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	3319      	adds	r3, #25
 80156a6:	b2d2      	uxtb	r2, r2
 80156a8:	701a      	strb	r2, [r3, #0]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	6a1b      	ldr	r3, [r3, #32]
 80156ae:	0a1a      	lsrs	r2, r3, #8
 80156b0:	683b      	ldr	r3, [r7, #0]
 80156b2:	331a      	adds	r3, #26
 80156b4:	b2d2      	uxtb	r2, r2
 80156b6:	701a      	strb	r2, [r3, #0]
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	6a1a      	ldr	r2, [r3, #32]
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	331b      	adds	r3, #27
 80156c0:	b2d2      	uxtb	r2, r2
 80156c2:	701a      	strb	r2, [r3, #0]

    if( ctx->is224 == 0 )
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d11a      	bne.n	8015702 <mbedtls_sha256_finish_ret+0x2c4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156d0:	0e1a      	lsrs	r2, r3, #24
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	331c      	adds	r3, #28
 80156d6:	b2d2      	uxtb	r2, r2
 80156d8:	701a      	strb	r2, [r3, #0]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156de:	0c1a      	lsrs	r2, r3, #16
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	331d      	adds	r3, #29
 80156e4:	b2d2      	uxtb	r2, r2
 80156e6:	701a      	strb	r2, [r3, #0]
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156ec:	0a1a      	lsrs	r2, r3, #8
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	331e      	adds	r3, #30
 80156f2:	b2d2      	uxtb	r2, r2
 80156f4:	701a      	strb	r2, [r3, #0]
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	331f      	adds	r3, #31
 80156fe:	b2d2      	uxtb	r2, r2
 8015700:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8015702:	2300      	movs	r3, #0
}
 8015704:	4618      	mov	r0, r3
 8015706:	3718      	adds	r7, #24
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <mbedtls_sha256_ret>:
 */
int mbedtls_sha256_ret( const unsigned char *input,
                        size_t ilen,
                        unsigned char output[32],
                        int is224 )
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b0a0      	sub	sp, #128	@ 0x80
 8015710:	af00      	add	r7, sp, #0
 8015712:	60f8      	str	r0, [r7, #12]
 8015714:	60b9      	str	r1, [r7, #8]
 8015716:	607a      	str	r2, [r7, #4]
 8015718:	603b      	str	r3, [r7, #0]

    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha256_init( &ctx );
 801571a:	f107 0310 	add.w	r3, r7, #16
 801571e:	4618      	mov	r0, r3
 8015720:	f7fe f846 	bl	80137b0 <mbedtls_sha256_init>

    if( ( ret = mbedtls_sha256_starts_ret( &ctx, is224 ) ) != 0 )
 8015724:	f107 0310 	add.w	r3, r7, #16
 8015728:	6839      	ldr	r1, [r7, #0]
 801572a:	4618      	mov	r0, r3
 801572c:	f7fe f85e 	bl	80137ec <mbedtls_sha256_starts_ret>
 8015730:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8015732:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015734:	2b00      	cmp	r3, #0
 8015736:	d114      	bne.n	8015762 <mbedtls_sha256_ret+0x56>
        goto exit;

    if( ( ret = mbedtls_sha256_update_ret( &ctx, input, ilen ) ) != 0 )
 8015738:	f107 0310 	add.w	r3, r7, #16
 801573c:	68ba      	ldr	r2, [r7, #8]
 801573e:	68f9      	ldr	r1, [r7, #12]
 8015740:	4618      	mov	r0, r3
 8015742:	f7ff fe07 	bl	8015354 <mbedtls_sha256_update_ret>
 8015746:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8015748:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801574a:	2b00      	cmp	r3, #0
 801574c:	d10b      	bne.n	8015766 <mbedtls_sha256_ret+0x5a>
        goto exit;

    if( ( ret = mbedtls_sha256_finish_ret( &ctx, output ) ) != 0 )
 801574e:	f107 0310 	add.w	r3, r7, #16
 8015752:	6879      	ldr	r1, [r7, #4]
 8015754:	4618      	mov	r0, r3
 8015756:	f7ff fe72 	bl	801543e <mbedtls_sha256_finish_ret>
 801575a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801575c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801575e:	2b00      	cmp	r3, #0
        goto exit;

exit:
 8015760:	e002      	b.n	8015768 <mbedtls_sha256_ret+0x5c>
        goto exit;
 8015762:	bf00      	nop
 8015764:	e000      	b.n	8015768 <mbedtls_sha256_ret+0x5c>
        goto exit;
 8015766:	bf00      	nop
    mbedtls_sha256_free( &ctx );
 8015768:	f107 0310 	add.w	r3, r7, #16
 801576c:	4618      	mov	r0, r3
 801576e:	f7fe f82c 	bl	80137ca <mbedtls_sha256_free>

    return( ret );
 8015772:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
}
 8015774:	4618      	mov	r0, r3
 8015776:	3780      	adds	r7, #128	@ 0x80
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}

0801577c <mbedtls_sha256>:
#if !defined(MBEDTLS_DEPRECATED_REMOVED)
void mbedtls_sha256( const unsigned char *input,
                     size_t ilen,
                     unsigned char output[32],
                     int is224 )
{
 801577c:	b580      	push	{r7, lr}
 801577e:	b084      	sub	sp, #16
 8015780:	af00      	add	r7, sp, #0
 8015782:	60f8      	str	r0, [r7, #12]
 8015784:	60b9      	str	r1, [r7, #8]
 8015786:	607a      	str	r2, [r7, #4]
 8015788:	603b      	str	r3, [r7, #0]
    mbedtls_sha256_ret( input, ilen, output, is224 );
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	687a      	ldr	r2, [r7, #4]
 801578e:	68b9      	ldr	r1, [r7, #8]
 8015790:	68f8      	ldr	r0, [r7, #12]
 8015792:	f7ff ffbb 	bl	801570c <mbedtls_sha256_ret>
}
 8015796:	bf00      	nop
 8015798:	3710      	adds	r7, #16
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}
	...

080157a0 <calloc>:
 80157a0:	4b02      	ldr	r3, [pc, #8]	@ (80157ac <calloc+0xc>)
 80157a2:	460a      	mov	r2, r1
 80157a4:	4601      	mov	r1, r0
 80157a6:	6818      	ldr	r0, [r3, #0]
 80157a8:	f000 b802 	b.w	80157b0 <_calloc_r>
 80157ac:	2400004c 	.word	0x2400004c

080157b0 <_calloc_r>:
 80157b0:	b570      	push	{r4, r5, r6, lr}
 80157b2:	fba1 5402 	umull	r5, r4, r1, r2
 80157b6:	b934      	cbnz	r4, 80157c6 <_calloc_r+0x16>
 80157b8:	4629      	mov	r1, r5
 80157ba:	f000 f837 	bl	801582c <_malloc_r>
 80157be:	4606      	mov	r6, r0
 80157c0:	b928      	cbnz	r0, 80157ce <_calloc_r+0x1e>
 80157c2:	4630      	mov	r0, r6
 80157c4:	bd70      	pop	{r4, r5, r6, pc}
 80157c6:	220c      	movs	r2, #12
 80157c8:	6002      	str	r2, [r0, #0]
 80157ca:	2600      	movs	r6, #0
 80157cc:	e7f9      	b.n	80157c2 <_calloc_r+0x12>
 80157ce:	462a      	mov	r2, r5
 80157d0:	4621      	mov	r1, r4
 80157d2:	f000 f903 	bl	80159dc <memset>
 80157d6:	e7f4      	b.n	80157c2 <_calloc_r+0x12>

080157d8 <free>:
 80157d8:	4b02      	ldr	r3, [pc, #8]	@ (80157e4 <free+0xc>)
 80157da:	4601      	mov	r1, r0
 80157dc:	6818      	ldr	r0, [r3, #0]
 80157de:	f000 b94f 	b.w	8015a80 <_free_r>
 80157e2:	bf00      	nop
 80157e4:	2400004c 	.word	0x2400004c

080157e8 <sbrk_aligned>:
 80157e8:	b570      	push	{r4, r5, r6, lr}
 80157ea:	4e0f      	ldr	r6, [pc, #60]	@ (8015828 <sbrk_aligned+0x40>)
 80157ec:	460c      	mov	r4, r1
 80157ee:	6831      	ldr	r1, [r6, #0]
 80157f0:	4605      	mov	r5, r0
 80157f2:	b911      	cbnz	r1, 80157fa <sbrk_aligned+0x12>
 80157f4:	f000 f8fa 	bl	80159ec <_sbrk_r>
 80157f8:	6030      	str	r0, [r6, #0]
 80157fa:	4621      	mov	r1, r4
 80157fc:	4628      	mov	r0, r5
 80157fe:	f000 f8f5 	bl	80159ec <_sbrk_r>
 8015802:	1c43      	adds	r3, r0, #1
 8015804:	d103      	bne.n	801580e <sbrk_aligned+0x26>
 8015806:	f04f 34ff 	mov.w	r4, #4294967295
 801580a:	4620      	mov	r0, r4
 801580c:	bd70      	pop	{r4, r5, r6, pc}
 801580e:	1cc4      	adds	r4, r0, #3
 8015810:	f024 0403 	bic.w	r4, r4, #3
 8015814:	42a0      	cmp	r0, r4
 8015816:	d0f8      	beq.n	801580a <sbrk_aligned+0x22>
 8015818:	1a21      	subs	r1, r4, r0
 801581a:	4628      	mov	r0, r5
 801581c:	f000 f8e6 	bl	80159ec <_sbrk_r>
 8015820:	3001      	adds	r0, #1
 8015822:	d1f2      	bne.n	801580a <sbrk_aligned+0x22>
 8015824:	e7ef      	b.n	8015806 <sbrk_aligned+0x1e>
 8015826:	bf00      	nop
 8015828:	24002580 	.word	0x24002580

0801582c <_malloc_r>:
 801582c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015830:	1ccd      	adds	r5, r1, #3
 8015832:	f025 0503 	bic.w	r5, r5, #3
 8015836:	3508      	adds	r5, #8
 8015838:	2d0c      	cmp	r5, #12
 801583a:	bf38      	it	cc
 801583c:	250c      	movcc	r5, #12
 801583e:	2d00      	cmp	r5, #0
 8015840:	4606      	mov	r6, r0
 8015842:	db01      	blt.n	8015848 <_malloc_r+0x1c>
 8015844:	42a9      	cmp	r1, r5
 8015846:	d904      	bls.n	8015852 <_malloc_r+0x26>
 8015848:	230c      	movs	r3, #12
 801584a:	6033      	str	r3, [r6, #0]
 801584c:	2000      	movs	r0, #0
 801584e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015852:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015928 <_malloc_r+0xfc>
 8015856:	f000 f869 	bl	801592c <__malloc_lock>
 801585a:	f8d8 3000 	ldr.w	r3, [r8]
 801585e:	461c      	mov	r4, r3
 8015860:	bb44      	cbnz	r4, 80158b4 <_malloc_r+0x88>
 8015862:	4629      	mov	r1, r5
 8015864:	4630      	mov	r0, r6
 8015866:	f7ff ffbf 	bl	80157e8 <sbrk_aligned>
 801586a:	1c43      	adds	r3, r0, #1
 801586c:	4604      	mov	r4, r0
 801586e:	d158      	bne.n	8015922 <_malloc_r+0xf6>
 8015870:	f8d8 4000 	ldr.w	r4, [r8]
 8015874:	4627      	mov	r7, r4
 8015876:	2f00      	cmp	r7, #0
 8015878:	d143      	bne.n	8015902 <_malloc_r+0xd6>
 801587a:	2c00      	cmp	r4, #0
 801587c:	d04b      	beq.n	8015916 <_malloc_r+0xea>
 801587e:	6823      	ldr	r3, [r4, #0]
 8015880:	4639      	mov	r1, r7
 8015882:	4630      	mov	r0, r6
 8015884:	eb04 0903 	add.w	r9, r4, r3
 8015888:	f000 f8b0 	bl	80159ec <_sbrk_r>
 801588c:	4581      	cmp	r9, r0
 801588e:	d142      	bne.n	8015916 <_malloc_r+0xea>
 8015890:	6821      	ldr	r1, [r4, #0]
 8015892:	1a6d      	subs	r5, r5, r1
 8015894:	4629      	mov	r1, r5
 8015896:	4630      	mov	r0, r6
 8015898:	f7ff ffa6 	bl	80157e8 <sbrk_aligned>
 801589c:	3001      	adds	r0, #1
 801589e:	d03a      	beq.n	8015916 <_malloc_r+0xea>
 80158a0:	6823      	ldr	r3, [r4, #0]
 80158a2:	442b      	add	r3, r5
 80158a4:	6023      	str	r3, [r4, #0]
 80158a6:	f8d8 3000 	ldr.w	r3, [r8]
 80158aa:	685a      	ldr	r2, [r3, #4]
 80158ac:	bb62      	cbnz	r2, 8015908 <_malloc_r+0xdc>
 80158ae:	f8c8 7000 	str.w	r7, [r8]
 80158b2:	e00f      	b.n	80158d4 <_malloc_r+0xa8>
 80158b4:	6822      	ldr	r2, [r4, #0]
 80158b6:	1b52      	subs	r2, r2, r5
 80158b8:	d420      	bmi.n	80158fc <_malloc_r+0xd0>
 80158ba:	2a0b      	cmp	r2, #11
 80158bc:	d917      	bls.n	80158ee <_malloc_r+0xc2>
 80158be:	1961      	adds	r1, r4, r5
 80158c0:	42a3      	cmp	r3, r4
 80158c2:	6025      	str	r5, [r4, #0]
 80158c4:	bf18      	it	ne
 80158c6:	6059      	strne	r1, [r3, #4]
 80158c8:	6863      	ldr	r3, [r4, #4]
 80158ca:	bf08      	it	eq
 80158cc:	f8c8 1000 	streq.w	r1, [r8]
 80158d0:	5162      	str	r2, [r4, r5]
 80158d2:	604b      	str	r3, [r1, #4]
 80158d4:	4630      	mov	r0, r6
 80158d6:	f000 f82f 	bl	8015938 <__malloc_unlock>
 80158da:	f104 000b 	add.w	r0, r4, #11
 80158de:	1d23      	adds	r3, r4, #4
 80158e0:	f020 0007 	bic.w	r0, r0, #7
 80158e4:	1ac2      	subs	r2, r0, r3
 80158e6:	bf1c      	itt	ne
 80158e8:	1a1b      	subne	r3, r3, r0
 80158ea:	50a3      	strne	r3, [r4, r2]
 80158ec:	e7af      	b.n	801584e <_malloc_r+0x22>
 80158ee:	6862      	ldr	r2, [r4, #4]
 80158f0:	42a3      	cmp	r3, r4
 80158f2:	bf0c      	ite	eq
 80158f4:	f8c8 2000 	streq.w	r2, [r8]
 80158f8:	605a      	strne	r2, [r3, #4]
 80158fa:	e7eb      	b.n	80158d4 <_malloc_r+0xa8>
 80158fc:	4623      	mov	r3, r4
 80158fe:	6864      	ldr	r4, [r4, #4]
 8015900:	e7ae      	b.n	8015860 <_malloc_r+0x34>
 8015902:	463c      	mov	r4, r7
 8015904:	687f      	ldr	r7, [r7, #4]
 8015906:	e7b6      	b.n	8015876 <_malloc_r+0x4a>
 8015908:	461a      	mov	r2, r3
 801590a:	685b      	ldr	r3, [r3, #4]
 801590c:	42a3      	cmp	r3, r4
 801590e:	d1fb      	bne.n	8015908 <_malloc_r+0xdc>
 8015910:	2300      	movs	r3, #0
 8015912:	6053      	str	r3, [r2, #4]
 8015914:	e7de      	b.n	80158d4 <_malloc_r+0xa8>
 8015916:	230c      	movs	r3, #12
 8015918:	6033      	str	r3, [r6, #0]
 801591a:	4630      	mov	r0, r6
 801591c:	f000 f80c 	bl	8015938 <__malloc_unlock>
 8015920:	e794      	b.n	801584c <_malloc_r+0x20>
 8015922:	6005      	str	r5, [r0, #0]
 8015924:	e7d6      	b.n	80158d4 <_malloc_r+0xa8>
 8015926:	bf00      	nop
 8015928:	24002584 	.word	0x24002584

0801592c <__malloc_lock>:
 801592c:	4801      	ldr	r0, [pc, #4]	@ (8015934 <__malloc_lock+0x8>)
 801592e:	f000 b897 	b.w	8015a60 <__retarget_lock_acquire_recursive>
 8015932:	bf00      	nop
 8015934:	240026c4 	.word	0x240026c4

08015938 <__malloc_unlock>:
 8015938:	4801      	ldr	r0, [pc, #4]	@ (8015940 <__malloc_unlock+0x8>)
 801593a:	f000 b892 	b.w	8015a62 <__retarget_lock_release_recursive>
 801593e:	bf00      	nop
 8015940:	240026c4 	.word	0x240026c4

08015944 <siprintf>:
 8015944:	b40e      	push	{r1, r2, r3}
 8015946:	b510      	push	{r4, lr}
 8015948:	b09d      	sub	sp, #116	@ 0x74
 801594a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801594c:	9002      	str	r0, [sp, #8]
 801594e:	9006      	str	r0, [sp, #24]
 8015950:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015954:	480a      	ldr	r0, [pc, #40]	@ (8015980 <siprintf+0x3c>)
 8015956:	9107      	str	r1, [sp, #28]
 8015958:	9104      	str	r1, [sp, #16]
 801595a:	490a      	ldr	r1, [pc, #40]	@ (8015984 <siprintf+0x40>)
 801595c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015960:	9105      	str	r1, [sp, #20]
 8015962:	2400      	movs	r4, #0
 8015964:	a902      	add	r1, sp, #8
 8015966:	6800      	ldr	r0, [r0, #0]
 8015968:	9301      	str	r3, [sp, #4]
 801596a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801596c:	f000 f92e 	bl	8015bcc <_svfiprintf_r>
 8015970:	9b02      	ldr	r3, [sp, #8]
 8015972:	701c      	strb	r4, [r3, #0]
 8015974:	b01d      	add	sp, #116	@ 0x74
 8015976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801597a:	b003      	add	sp, #12
 801597c:	4770      	bx	lr
 801597e:	bf00      	nop
 8015980:	2400004c 	.word	0x2400004c
 8015984:	ffff0208 	.word	0xffff0208

08015988 <memcmp>:
 8015988:	b510      	push	{r4, lr}
 801598a:	3901      	subs	r1, #1
 801598c:	4402      	add	r2, r0
 801598e:	4290      	cmp	r0, r2
 8015990:	d101      	bne.n	8015996 <memcmp+0xe>
 8015992:	2000      	movs	r0, #0
 8015994:	e005      	b.n	80159a2 <memcmp+0x1a>
 8015996:	7803      	ldrb	r3, [r0, #0]
 8015998:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801599c:	42a3      	cmp	r3, r4
 801599e:	d001      	beq.n	80159a4 <memcmp+0x1c>
 80159a0:	1b18      	subs	r0, r3, r4
 80159a2:	bd10      	pop	{r4, pc}
 80159a4:	3001      	adds	r0, #1
 80159a6:	e7f2      	b.n	801598e <memcmp+0x6>

080159a8 <memmove>:
 80159a8:	4288      	cmp	r0, r1
 80159aa:	b510      	push	{r4, lr}
 80159ac:	eb01 0402 	add.w	r4, r1, r2
 80159b0:	d902      	bls.n	80159b8 <memmove+0x10>
 80159b2:	4284      	cmp	r4, r0
 80159b4:	4623      	mov	r3, r4
 80159b6:	d807      	bhi.n	80159c8 <memmove+0x20>
 80159b8:	1e43      	subs	r3, r0, #1
 80159ba:	42a1      	cmp	r1, r4
 80159bc:	d008      	beq.n	80159d0 <memmove+0x28>
 80159be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80159c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80159c6:	e7f8      	b.n	80159ba <memmove+0x12>
 80159c8:	4402      	add	r2, r0
 80159ca:	4601      	mov	r1, r0
 80159cc:	428a      	cmp	r2, r1
 80159ce:	d100      	bne.n	80159d2 <memmove+0x2a>
 80159d0:	bd10      	pop	{r4, pc}
 80159d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80159d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80159da:	e7f7      	b.n	80159cc <memmove+0x24>

080159dc <memset>:
 80159dc:	4402      	add	r2, r0
 80159de:	4603      	mov	r3, r0
 80159e0:	4293      	cmp	r3, r2
 80159e2:	d100      	bne.n	80159e6 <memset+0xa>
 80159e4:	4770      	bx	lr
 80159e6:	f803 1b01 	strb.w	r1, [r3], #1
 80159ea:	e7f9      	b.n	80159e0 <memset+0x4>

080159ec <_sbrk_r>:
 80159ec:	b538      	push	{r3, r4, r5, lr}
 80159ee:	4d06      	ldr	r5, [pc, #24]	@ (8015a08 <_sbrk_r+0x1c>)
 80159f0:	2300      	movs	r3, #0
 80159f2:	4604      	mov	r4, r0
 80159f4:	4608      	mov	r0, r1
 80159f6:	602b      	str	r3, [r5, #0]
 80159f8:	f7ec fabe 	bl	8001f78 <_sbrk>
 80159fc:	1c43      	adds	r3, r0, #1
 80159fe:	d102      	bne.n	8015a06 <_sbrk_r+0x1a>
 8015a00:	682b      	ldr	r3, [r5, #0]
 8015a02:	b103      	cbz	r3, 8015a06 <_sbrk_r+0x1a>
 8015a04:	6023      	str	r3, [r4, #0]
 8015a06:	bd38      	pop	{r3, r4, r5, pc}
 8015a08:	240026c0 	.word	0x240026c0

08015a0c <__errno>:
 8015a0c:	4b01      	ldr	r3, [pc, #4]	@ (8015a14 <__errno+0x8>)
 8015a0e:	6818      	ldr	r0, [r3, #0]
 8015a10:	4770      	bx	lr
 8015a12:	bf00      	nop
 8015a14:	2400004c 	.word	0x2400004c

08015a18 <__libc_init_array>:
 8015a18:	b570      	push	{r4, r5, r6, lr}
 8015a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8015a50 <__libc_init_array+0x38>)
 8015a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8015a54 <__libc_init_array+0x3c>)
 8015a1e:	1b64      	subs	r4, r4, r5
 8015a20:	10a4      	asrs	r4, r4, #2
 8015a22:	2600      	movs	r6, #0
 8015a24:	42a6      	cmp	r6, r4
 8015a26:	d109      	bne.n	8015a3c <__libc_init_array+0x24>
 8015a28:	4d0b      	ldr	r5, [pc, #44]	@ (8015a58 <__libc_init_array+0x40>)
 8015a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8015a5c <__libc_init_array+0x44>)
 8015a2c:	f000 fb8c 	bl	8016148 <_init>
 8015a30:	1b64      	subs	r4, r4, r5
 8015a32:	10a4      	asrs	r4, r4, #2
 8015a34:	2600      	movs	r6, #0
 8015a36:	42a6      	cmp	r6, r4
 8015a38:	d105      	bne.n	8015a46 <__libc_init_array+0x2e>
 8015a3a:	bd70      	pop	{r4, r5, r6, pc}
 8015a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a40:	4798      	blx	r3
 8015a42:	3601      	adds	r6, #1
 8015a44:	e7ee      	b.n	8015a24 <__libc_init_array+0xc>
 8015a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8015a4a:	4798      	blx	r3
 8015a4c:	3601      	adds	r6, #1
 8015a4e:	e7f2      	b.n	8015a36 <__libc_init_array+0x1e>
 8015a50:	080173d0 	.word	0x080173d0
 8015a54:	080173d0 	.word	0x080173d0
 8015a58:	080173d0 	.word	0x080173d0
 8015a5c:	080173d4 	.word	0x080173d4

08015a60 <__retarget_lock_acquire_recursive>:
 8015a60:	4770      	bx	lr

08015a62 <__retarget_lock_release_recursive>:
 8015a62:	4770      	bx	lr

08015a64 <memcpy>:
 8015a64:	440a      	add	r2, r1
 8015a66:	4291      	cmp	r1, r2
 8015a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8015a6c:	d100      	bne.n	8015a70 <memcpy+0xc>
 8015a6e:	4770      	bx	lr
 8015a70:	b510      	push	{r4, lr}
 8015a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015a7a:	4291      	cmp	r1, r2
 8015a7c:	d1f9      	bne.n	8015a72 <memcpy+0xe>
 8015a7e:	bd10      	pop	{r4, pc}

08015a80 <_free_r>:
 8015a80:	b538      	push	{r3, r4, r5, lr}
 8015a82:	4605      	mov	r5, r0
 8015a84:	2900      	cmp	r1, #0
 8015a86:	d041      	beq.n	8015b0c <_free_r+0x8c>
 8015a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a8c:	1f0c      	subs	r4, r1, #4
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	bfb8      	it	lt
 8015a92:	18e4      	addlt	r4, r4, r3
 8015a94:	f7ff ff4a 	bl	801592c <__malloc_lock>
 8015a98:	4a1d      	ldr	r2, [pc, #116]	@ (8015b10 <_free_r+0x90>)
 8015a9a:	6813      	ldr	r3, [r2, #0]
 8015a9c:	b933      	cbnz	r3, 8015aac <_free_r+0x2c>
 8015a9e:	6063      	str	r3, [r4, #4]
 8015aa0:	6014      	str	r4, [r2, #0]
 8015aa2:	4628      	mov	r0, r5
 8015aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015aa8:	f7ff bf46 	b.w	8015938 <__malloc_unlock>
 8015aac:	42a3      	cmp	r3, r4
 8015aae:	d908      	bls.n	8015ac2 <_free_r+0x42>
 8015ab0:	6820      	ldr	r0, [r4, #0]
 8015ab2:	1821      	adds	r1, r4, r0
 8015ab4:	428b      	cmp	r3, r1
 8015ab6:	bf01      	itttt	eq
 8015ab8:	6819      	ldreq	r1, [r3, #0]
 8015aba:	685b      	ldreq	r3, [r3, #4]
 8015abc:	1809      	addeq	r1, r1, r0
 8015abe:	6021      	streq	r1, [r4, #0]
 8015ac0:	e7ed      	b.n	8015a9e <_free_r+0x1e>
 8015ac2:	461a      	mov	r2, r3
 8015ac4:	685b      	ldr	r3, [r3, #4]
 8015ac6:	b10b      	cbz	r3, 8015acc <_free_r+0x4c>
 8015ac8:	42a3      	cmp	r3, r4
 8015aca:	d9fa      	bls.n	8015ac2 <_free_r+0x42>
 8015acc:	6811      	ldr	r1, [r2, #0]
 8015ace:	1850      	adds	r0, r2, r1
 8015ad0:	42a0      	cmp	r0, r4
 8015ad2:	d10b      	bne.n	8015aec <_free_r+0x6c>
 8015ad4:	6820      	ldr	r0, [r4, #0]
 8015ad6:	4401      	add	r1, r0
 8015ad8:	1850      	adds	r0, r2, r1
 8015ada:	4283      	cmp	r3, r0
 8015adc:	6011      	str	r1, [r2, #0]
 8015ade:	d1e0      	bne.n	8015aa2 <_free_r+0x22>
 8015ae0:	6818      	ldr	r0, [r3, #0]
 8015ae2:	685b      	ldr	r3, [r3, #4]
 8015ae4:	6053      	str	r3, [r2, #4]
 8015ae6:	4408      	add	r0, r1
 8015ae8:	6010      	str	r0, [r2, #0]
 8015aea:	e7da      	b.n	8015aa2 <_free_r+0x22>
 8015aec:	d902      	bls.n	8015af4 <_free_r+0x74>
 8015aee:	230c      	movs	r3, #12
 8015af0:	602b      	str	r3, [r5, #0]
 8015af2:	e7d6      	b.n	8015aa2 <_free_r+0x22>
 8015af4:	6820      	ldr	r0, [r4, #0]
 8015af6:	1821      	adds	r1, r4, r0
 8015af8:	428b      	cmp	r3, r1
 8015afa:	bf04      	itt	eq
 8015afc:	6819      	ldreq	r1, [r3, #0]
 8015afe:	685b      	ldreq	r3, [r3, #4]
 8015b00:	6063      	str	r3, [r4, #4]
 8015b02:	bf04      	itt	eq
 8015b04:	1809      	addeq	r1, r1, r0
 8015b06:	6021      	streq	r1, [r4, #0]
 8015b08:	6054      	str	r4, [r2, #4]
 8015b0a:	e7ca      	b.n	8015aa2 <_free_r+0x22>
 8015b0c:	bd38      	pop	{r3, r4, r5, pc}
 8015b0e:	bf00      	nop
 8015b10:	24002584 	.word	0x24002584

08015b14 <__ssputs_r>:
 8015b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b18:	688e      	ldr	r6, [r1, #8]
 8015b1a:	461f      	mov	r7, r3
 8015b1c:	42be      	cmp	r6, r7
 8015b1e:	680b      	ldr	r3, [r1, #0]
 8015b20:	4682      	mov	sl, r0
 8015b22:	460c      	mov	r4, r1
 8015b24:	4690      	mov	r8, r2
 8015b26:	d82d      	bhi.n	8015b84 <__ssputs_r+0x70>
 8015b28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015b2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015b30:	d026      	beq.n	8015b80 <__ssputs_r+0x6c>
 8015b32:	6965      	ldr	r5, [r4, #20]
 8015b34:	6909      	ldr	r1, [r1, #16]
 8015b36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015b3a:	eba3 0901 	sub.w	r9, r3, r1
 8015b3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015b42:	1c7b      	adds	r3, r7, #1
 8015b44:	444b      	add	r3, r9
 8015b46:	106d      	asrs	r5, r5, #1
 8015b48:	429d      	cmp	r5, r3
 8015b4a:	bf38      	it	cc
 8015b4c:	461d      	movcc	r5, r3
 8015b4e:	0553      	lsls	r3, r2, #21
 8015b50:	d527      	bpl.n	8015ba2 <__ssputs_r+0x8e>
 8015b52:	4629      	mov	r1, r5
 8015b54:	f7ff fe6a 	bl	801582c <_malloc_r>
 8015b58:	4606      	mov	r6, r0
 8015b5a:	b360      	cbz	r0, 8015bb6 <__ssputs_r+0xa2>
 8015b5c:	6921      	ldr	r1, [r4, #16]
 8015b5e:	464a      	mov	r2, r9
 8015b60:	f7ff ff80 	bl	8015a64 <memcpy>
 8015b64:	89a3      	ldrh	r3, [r4, #12]
 8015b66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b6e:	81a3      	strh	r3, [r4, #12]
 8015b70:	6126      	str	r6, [r4, #16]
 8015b72:	6165      	str	r5, [r4, #20]
 8015b74:	444e      	add	r6, r9
 8015b76:	eba5 0509 	sub.w	r5, r5, r9
 8015b7a:	6026      	str	r6, [r4, #0]
 8015b7c:	60a5      	str	r5, [r4, #8]
 8015b7e:	463e      	mov	r6, r7
 8015b80:	42be      	cmp	r6, r7
 8015b82:	d900      	bls.n	8015b86 <__ssputs_r+0x72>
 8015b84:	463e      	mov	r6, r7
 8015b86:	6820      	ldr	r0, [r4, #0]
 8015b88:	4632      	mov	r2, r6
 8015b8a:	4641      	mov	r1, r8
 8015b8c:	f7ff ff0c 	bl	80159a8 <memmove>
 8015b90:	68a3      	ldr	r3, [r4, #8]
 8015b92:	1b9b      	subs	r3, r3, r6
 8015b94:	60a3      	str	r3, [r4, #8]
 8015b96:	6823      	ldr	r3, [r4, #0]
 8015b98:	4433      	add	r3, r6
 8015b9a:	6023      	str	r3, [r4, #0]
 8015b9c:	2000      	movs	r0, #0
 8015b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ba2:	462a      	mov	r2, r5
 8015ba4:	f000 fa9a 	bl	80160dc <_realloc_r>
 8015ba8:	4606      	mov	r6, r0
 8015baa:	2800      	cmp	r0, #0
 8015bac:	d1e0      	bne.n	8015b70 <__ssputs_r+0x5c>
 8015bae:	6921      	ldr	r1, [r4, #16]
 8015bb0:	4650      	mov	r0, sl
 8015bb2:	f7ff ff65 	bl	8015a80 <_free_r>
 8015bb6:	230c      	movs	r3, #12
 8015bb8:	f8ca 3000 	str.w	r3, [sl]
 8015bbc:	89a3      	ldrh	r3, [r4, #12]
 8015bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015bc2:	81a3      	strh	r3, [r4, #12]
 8015bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8015bc8:	e7e9      	b.n	8015b9e <__ssputs_r+0x8a>
	...

08015bcc <_svfiprintf_r>:
 8015bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bd0:	4698      	mov	r8, r3
 8015bd2:	898b      	ldrh	r3, [r1, #12]
 8015bd4:	061b      	lsls	r3, r3, #24
 8015bd6:	b09d      	sub	sp, #116	@ 0x74
 8015bd8:	4607      	mov	r7, r0
 8015bda:	460d      	mov	r5, r1
 8015bdc:	4614      	mov	r4, r2
 8015bde:	d510      	bpl.n	8015c02 <_svfiprintf_r+0x36>
 8015be0:	690b      	ldr	r3, [r1, #16]
 8015be2:	b973      	cbnz	r3, 8015c02 <_svfiprintf_r+0x36>
 8015be4:	2140      	movs	r1, #64	@ 0x40
 8015be6:	f7ff fe21 	bl	801582c <_malloc_r>
 8015bea:	6028      	str	r0, [r5, #0]
 8015bec:	6128      	str	r0, [r5, #16]
 8015bee:	b930      	cbnz	r0, 8015bfe <_svfiprintf_r+0x32>
 8015bf0:	230c      	movs	r3, #12
 8015bf2:	603b      	str	r3, [r7, #0]
 8015bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8015bf8:	b01d      	add	sp, #116	@ 0x74
 8015bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bfe:	2340      	movs	r3, #64	@ 0x40
 8015c00:	616b      	str	r3, [r5, #20]
 8015c02:	2300      	movs	r3, #0
 8015c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8015c06:	2320      	movs	r3, #32
 8015c08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015c10:	2330      	movs	r3, #48	@ 0x30
 8015c12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015db0 <_svfiprintf_r+0x1e4>
 8015c16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015c1a:	f04f 0901 	mov.w	r9, #1
 8015c1e:	4623      	mov	r3, r4
 8015c20:	469a      	mov	sl, r3
 8015c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015c26:	b10a      	cbz	r2, 8015c2c <_svfiprintf_r+0x60>
 8015c28:	2a25      	cmp	r2, #37	@ 0x25
 8015c2a:	d1f9      	bne.n	8015c20 <_svfiprintf_r+0x54>
 8015c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8015c30:	d00b      	beq.n	8015c4a <_svfiprintf_r+0x7e>
 8015c32:	465b      	mov	r3, fp
 8015c34:	4622      	mov	r2, r4
 8015c36:	4629      	mov	r1, r5
 8015c38:	4638      	mov	r0, r7
 8015c3a:	f7ff ff6b 	bl	8015b14 <__ssputs_r>
 8015c3e:	3001      	adds	r0, #1
 8015c40:	f000 80a7 	beq.w	8015d92 <_svfiprintf_r+0x1c6>
 8015c44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015c46:	445a      	add	r2, fp
 8015c48:	9209      	str	r2, [sp, #36]	@ 0x24
 8015c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	f000 809f 	beq.w	8015d92 <_svfiprintf_r+0x1c6>
 8015c54:	2300      	movs	r3, #0
 8015c56:	f04f 32ff 	mov.w	r2, #4294967295
 8015c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015c5e:	f10a 0a01 	add.w	sl, sl, #1
 8015c62:	9304      	str	r3, [sp, #16]
 8015c64:	9307      	str	r3, [sp, #28]
 8015c66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015c6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8015c6c:	4654      	mov	r4, sl
 8015c6e:	2205      	movs	r2, #5
 8015c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c74:	484e      	ldr	r0, [pc, #312]	@ (8015db0 <_svfiprintf_r+0x1e4>)
 8015c76:	f7ea fb53 	bl	8000320 <memchr>
 8015c7a:	9a04      	ldr	r2, [sp, #16]
 8015c7c:	b9d8      	cbnz	r0, 8015cb6 <_svfiprintf_r+0xea>
 8015c7e:	06d0      	lsls	r0, r2, #27
 8015c80:	bf44      	itt	mi
 8015c82:	2320      	movmi	r3, #32
 8015c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c88:	0711      	lsls	r1, r2, #28
 8015c8a:	bf44      	itt	mi
 8015c8c:	232b      	movmi	r3, #43	@ 0x2b
 8015c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c92:	f89a 3000 	ldrb.w	r3, [sl]
 8015c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c98:	d015      	beq.n	8015cc6 <_svfiprintf_r+0xfa>
 8015c9a:	9a07      	ldr	r2, [sp, #28]
 8015c9c:	4654      	mov	r4, sl
 8015c9e:	2000      	movs	r0, #0
 8015ca0:	f04f 0c0a 	mov.w	ip, #10
 8015ca4:	4621      	mov	r1, r4
 8015ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015caa:	3b30      	subs	r3, #48	@ 0x30
 8015cac:	2b09      	cmp	r3, #9
 8015cae:	d94b      	bls.n	8015d48 <_svfiprintf_r+0x17c>
 8015cb0:	b1b0      	cbz	r0, 8015ce0 <_svfiprintf_r+0x114>
 8015cb2:	9207      	str	r2, [sp, #28]
 8015cb4:	e014      	b.n	8015ce0 <_svfiprintf_r+0x114>
 8015cb6:	eba0 0308 	sub.w	r3, r0, r8
 8015cba:	fa09 f303 	lsl.w	r3, r9, r3
 8015cbe:	4313      	orrs	r3, r2
 8015cc0:	9304      	str	r3, [sp, #16]
 8015cc2:	46a2      	mov	sl, r4
 8015cc4:	e7d2      	b.n	8015c6c <_svfiprintf_r+0xa0>
 8015cc6:	9b03      	ldr	r3, [sp, #12]
 8015cc8:	1d19      	adds	r1, r3, #4
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	9103      	str	r1, [sp, #12]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	bfbb      	ittet	lt
 8015cd2:	425b      	neglt	r3, r3
 8015cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8015cd8:	9307      	strge	r3, [sp, #28]
 8015cda:	9307      	strlt	r3, [sp, #28]
 8015cdc:	bfb8      	it	lt
 8015cde:	9204      	strlt	r2, [sp, #16]
 8015ce0:	7823      	ldrb	r3, [r4, #0]
 8015ce2:	2b2e      	cmp	r3, #46	@ 0x2e
 8015ce4:	d10a      	bne.n	8015cfc <_svfiprintf_r+0x130>
 8015ce6:	7863      	ldrb	r3, [r4, #1]
 8015ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8015cea:	d132      	bne.n	8015d52 <_svfiprintf_r+0x186>
 8015cec:	9b03      	ldr	r3, [sp, #12]
 8015cee:	1d1a      	adds	r2, r3, #4
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	9203      	str	r2, [sp, #12]
 8015cf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015cf8:	3402      	adds	r4, #2
 8015cfa:	9305      	str	r3, [sp, #20]
 8015cfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015dc0 <_svfiprintf_r+0x1f4>
 8015d00:	7821      	ldrb	r1, [r4, #0]
 8015d02:	2203      	movs	r2, #3
 8015d04:	4650      	mov	r0, sl
 8015d06:	f7ea fb0b 	bl	8000320 <memchr>
 8015d0a:	b138      	cbz	r0, 8015d1c <_svfiprintf_r+0x150>
 8015d0c:	9b04      	ldr	r3, [sp, #16]
 8015d0e:	eba0 000a 	sub.w	r0, r0, sl
 8015d12:	2240      	movs	r2, #64	@ 0x40
 8015d14:	4082      	lsls	r2, r0
 8015d16:	4313      	orrs	r3, r2
 8015d18:	3401      	adds	r4, #1
 8015d1a:	9304      	str	r3, [sp, #16]
 8015d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d20:	4824      	ldr	r0, [pc, #144]	@ (8015db4 <_svfiprintf_r+0x1e8>)
 8015d22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015d26:	2206      	movs	r2, #6
 8015d28:	f7ea fafa 	bl	8000320 <memchr>
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	d036      	beq.n	8015d9e <_svfiprintf_r+0x1d2>
 8015d30:	4b21      	ldr	r3, [pc, #132]	@ (8015db8 <_svfiprintf_r+0x1ec>)
 8015d32:	bb1b      	cbnz	r3, 8015d7c <_svfiprintf_r+0x1b0>
 8015d34:	9b03      	ldr	r3, [sp, #12]
 8015d36:	3307      	adds	r3, #7
 8015d38:	f023 0307 	bic.w	r3, r3, #7
 8015d3c:	3308      	adds	r3, #8
 8015d3e:	9303      	str	r3, [sp, #12]
 8015d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d42:	4433      	add	r3, r6
 8015d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8015d46:	e76a      	b.n	8015c1e <_svfiprintf_r+0x52>
 8015d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8015d4c:	460c      	mov	r4, r1
 8015d4e:	2001      	movs	r0, #1
 8015d50:	e7a8      	b.n	8015ca4 <_svfiprintf_r+0xd8>
 8015d52:	2300      	movs	r3, #0
 8015d54:	3401      	adds	r4, #1
 8015d56:	9305      	str	r3, [sp, #20]
 8015d58:	4619      	mov	r1, r3
 8015d5a:	f04f 0c0a 	mov.w	ip, #10
 8015d5e:	4620      	mov	r0, r4
 8015d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015d64:	3a30      	subs	r2, #48	@ 0x30
 8015d66:	2a09      	cmp	r2, #9
 8015d68:	d903      	bls.n	8015d72 <_svfiprintf_r+0x1a6>
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d0c6      	beq.n	8015cfc <_svfiprintf_r+0x130>
 8015d6e:	9105      	str	r1, [sp, #20]
 8015d70:	e7c4      	b.n	8015cfc <_svfiprintf_r+0x130>
 8015d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d76:	4604      	mov	r4, r0
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e7f0      	b.n	8015d5e <_svfiprintf_r+0x192>
 8015d7c:	ab03      	add	r3, sp, #12
 8015d7e:	9300      	str	r3, [sp, #0]
 8015d80:	462a      	mov	r2, r5
 8015d82:	4b0e      	ldr	r3, [pc, #56]	@ (8015dbc <_svfiprintf_r+0x1f0>)
 8015d84:	a904      	add	r1, sp, #16
 8015d86:	4638      	mov	r0, r7
 8015d88:	f3af 8000 	nop.w
 8015d8c:	1c42      	adds	r2, r0, #1
 8015d8e:	4606      	mov	r6, r0
 8015d90:	d1d6      	bne.n	8015d40 <_svfiprintf_r+0x174>
 8015d92:	89ab      	ldrh	r3, [r5, #12]
 8015d94:	065b      	lsls	r3, r3, #25
 8015d96:	f53f af2d 	bmi.w	8015bf4 <_svfiprintf_r+0x28>
 8015d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d9c:	e72c      	b.n	8015bf8 <_svfiprintf_r+0x2c>
 8015d9e:	ab03      	add	r3, sp, #12
 8015da0:	9300      	str	r3, [sp, #0]
 8015da2:	462a      	mov	r2, r5
 8015da4:	4b05      	ldr	r3, [pc, #20]	@ (8015dbc <_svfiprintf_r+0x1f0>)
 8015da6:	a904      	add	r1, sp, #16
 8015da8:	4638      	mov	r0, r7
 8015daa:	f000 f879 	bl	8015ea0 <_printf_i>
 8015dae:	e7ed      	b.n	8015d8c <_svfiprintf_r+0x1c0>
 8015db0:	08017394 	.word	0x08017394
 8015db4:	0801739e 	.word	0x0801739e
 8015db8:	00000000 	.word	0x00000000
 8015dbc:	08015b15 	.word	0x08015b15
 8015dc0:	0801739a 	.word	0x0801739a

08015dc4 <_printf_common>:
 8015dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dc8:	4616      	mov	r6, r2
 8015dca:	4698      	mov	r8, r3
 8015dcc:	688a      	ldr	r2, [r1, #8]
 8015dce:	690b      	ldr	r3, [r1, #16]
 8015dd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015dd4:	4293      	cmp	r3, r2
 8015dd6:	bfb8      	it	lt
 8015dd8:	4613      	movlt	r3, r2
 8015dda:	6033      	str	r3, [r6, #0]
 8015ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015de0:	4607      	mov	r7, r0
 8015de2:	460c      	mov	r4, r1
 8015de4:	b10a      	cbz	r2, 8015dea <_printf_common+0x26>
 8015de6:	3301      	adds	r3, #1
 8015de8:	6033      	str	r3, [r6, #0]
 8015dea:	6823      	ldr	r3, [r4, #0]
 8015dec:	0699      	lsls	r1, r3, #26
 8015dee:	bf42      	ittt	mi
 8015df0:	6833      	ldrmi	r3, [r6, #0]
 8015df2:	3302      	addmi	r3, #2
 8015df4:	6033      	strmi	r3, [r6, #0]
 8015df6:	6825      	ldr	r5, [r4, #0]
 8015df8:	f015 0506 	ands.w	r5, r5, #6
 8015dfc:	d106      	bne.n	8015e0c <_printf_common+0x48>
 8015dfe:	f104 0a19 	add.w	sl, r4, #25
 8015e02:	68e3      	ldr	r3, [r4, #12]
 8015e04:	6832      	ldr	r2, [r6, #0]
 8015e06:	1a9b      	subs	r3, r3, r2
 8015e08:	42ab      	cmp	r3, r5
 8015e0a:	dc26      	bgt.n	8015e5a <_printf_common+0x96>
 8015e0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015e10:	6822      	ldr	r2, [r4, #0]
 8015e12:	3b00      	subs	r3, #0
 8015e14:	bf18      	it	ne
 8015e16:	2301      	movne	r3, #1
 8015e18:	0692      	lsls	r2, r2, #26
 8015e1a:	d42b      	bmi.n	8015e74 <_printf_common+0xb0>
 8015e1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015e20:	4641      	mov	r1, r8
 8015e22:	4638      	mov	r0, r7
 8015e24:	47c8      	blx	r9
 8015e26:	3001      	adds	r0, #1
 8015e28:	d01e      	beq.n	8015e68 <_printf_common+0xa4>
 8015e2a:	6823      	ldr	r3, [r4, #0]
 8015e2c:	6922      	ldr	r2, [r4, #16]
 8015e2e:	f003 0306 	and.w	r3, r3, #6
 8015e32:	2b04      	cmp	r3, #4
 8015e34:	bf02      	ittt	eq
 8015e36:	68e5      	ldreq	r5, [r4, #12]
 8015e38:	6833      	ldreq	r3, [r6, #0]
 8015e3a:	1aed      	subeq	r5, r5, r3
 8015e3c:	68a3      	ldr	r3, [r4, #8]
 8015e3e:	bf0c      	ite	eq
 8015e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e44:	2500      	movne	r5, #0
 8015e46:	4293      	cmp	r3, r2
 8015e48:	bfc4      	itt	gt
 8015e4a:	1a9b      	subgt	r3, r3, r2
 8015e4c:	18ed      	addgt	r5, r5, r3
 8015e4e:	2600      	movs	r6, #0
 8015e50:	341a      	adds	r4, #26
 8015e52:	42b5      	cmp	r5, r6
 8015e54:	d11a      	bne.n	8015e8c <_printf_common+0xc8>
 8015e56:	2000      	movs	r0, #0
 8015e58:	e008      	b.n	8015e6c <_printf_common+0xa8>
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	4652      	mov	r2, sl
 8015e5e:	4641      	mov	r1, r8
 8015e60:	4638      	mov	r0, r7
 8015e62:	47c8      	blx	r9
 8015e64:	3001      	adds	r0, #1
 8015e66:	d103      	bne.n	8015e70 <_printf_common+0xac>
 8015e68:	f04f 30ff 	mov.w	r0, #4294967295
 8015e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e70:	3501      	adds	r5, #1
 8015e72:	e7c6      	b.n	8015e02 <_printf_common+0x3e>
 8015e74:	18e1      	adds	r1, r4, r3
 8015e76:	1c5a      	adds	r2, r3, #1
 8015e78:	2030      	movs	r0, #48	@ 0x30
 8015e7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015e7e:	4422      	add	r2, r4
 8015e80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015e84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015e88:	3302      	adds	r3, #2
 8015e8a:	e7c7      	b.n	8015e1c <_printf_common+0x58>
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	4622      	mov	r2, r4
 8015e90:	4641      	mov	r1, r8
 8015e92:	4638      	mov	r0, r7
 8015e94:	47c8      	blx	r9
 8015e96:	3001      	adds	r0, #1
 8015e98:	d0e6      	beq.n	8015e68 <_printf_common+0xa4>
 8015e9a:	3601      	adds	r6, #1
 8015e9c:	e7d9      	b.n	8015e52 <_printf_common+0x8e>
	...

08015ea0 <_printf_i>:
 8015ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ea4:	7e0f      	ldrb	r7, [r1, #24]
 8015ea6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015ea8:	2f78      	cmp	r7, #120	@ 0x78
 8015eaa:	4691      	mov	r9, r2
 8015eac:	4680      	mov	r8, r0
 8015eae:	460c      	mov	r4, r1
 8015eb0:	469a      	mov	sl, r3
 8015eb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015eb6:	d807      	bhi.n	8015ec8 <_printf_i+0x28>
 8015eb8:	2f62      	cmp	r7, #98	@ 0x62
 8015eba:	d80a      	bhi.n	8015ed2 <_printf_i+0x32>
 8015ebc:	2f00      	cmp	r7, #0
 8015ebe:	f000 80d1 	beq.w	8016064 <_printf_i+0x1c4>
 8015ec2:	2f58      	cmp	r7, #88	@ 0x58
 8015ec4:	f000 80b8 	beq.w	8016038 <_printf_i+0x198>
 8015ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015ecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015ed0:	e03a      	b.n	8015f48 <_printf_i+0xa8>
 8015ed2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015ed6:	2b15      	cmp	r3, #21
 8015ed8:	d8f6      	bhi.n	8015ec8 <_printf_i+0x28>
 8015eda:	a101      	add	r1, pc, #4	@ (adr r1, 8015ee0 <_printf_i+0x40>)
 8015edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015ee0:	08015f39 	.word	0x08015f39
 8015ee4:	08015f4d 	.word	0x08015f4d
 8015ee8:	08015ec9 	.word	0x08015ec9
 8015eec:	08015ec9 	.word	0x08015ec9
 8015ef0:	08015ec9 	.word	0x08015ec9
 8015ef4:	08015ec9 	.word	0x08015ec9
 8015ef8:	08015f4d 	.word	0x08015f4d
 8015efc:	08015ec9 	.word	0x08015ec9
 8015f00:	08015ec9 	.word	0x08015ec9
 8015f04:	08015ec9 	.word	0x08015ec9
 8015f08:	08015ec9 	.word	0x08015ec9
 8015f0c:	0801604b 	.word	0x0801604b
 8015f10:	08015f77 	.word	0x08015f77
 8015f14:	08016005 	.word	0x08016005
 8015f18:	08015ec9 	.word	0x08015ec9
 8015f1c:	08015ec9 	.word	0x08015ec9
 8015f20:	0801606d 	.word	0x0801606d
 8015f24:	08015ec9 	.word	0x08015ec9
 8015f28:	08015f77 	.word	0x08015f77
 8015f2c:	08015ec9 	.word	0x08015ec9
 8015f30:	08015ec9 	.word	0x08015ec9
 8015f34:	0801600d 	.word	0x0801600d
 8015f38:	6833      	ldr	r3, [r6, #0]
 8015f3a:	1d1a      	adds	r2, r3, #4
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	6032      	str	r2, [r6, #0]
 8015f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015f44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015f48:	2301      	movs	r3, #1
 8015f4a:	e09c      	b.n	8016086 <_printf_i+0x1e6>
 8015f4c:	6833      	ldr	r3, [r6, #0]
 8015f4e:	6820      	ldr	r0, [r4, #0]
 8015f50:	1d19      	adds	r1, r3, #4
 8015f52:	6031      	str	r1, [r6, #0]
 8015f54:	0606      	lsls	r6, r0, #24
 8015f56:	d501      	bpl.n	8015f5c <_printf_i+0xbc>
 8015f58:	681d      	ldr	r5, [r3, #0]
 8015f5a:	e003      	b.n	8015f64 <_printf_i+0xc4>
 8015f5c:	0645      	lsls	r5, r0, #25
 8015f5e:	d5fb      	bpl.n	8015f58 <_printf_i+0xb8>
 8015f60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015f64:	2d00      	cmp	r5, #0
 8015f66:	da03      	bge.n	8015f70 <_printf_i+0xd0>
 8015f68:	232d      	movs	r3, #45	@ 0x2d
 8015f6a:	426d      	negs	r5, r5
 8015f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015f70:	4858      	ldr	r0, [pc, #352]	@ (80160d4 <_printf_i+0x234>)
 8015f72:	230a      	movs	r3, #10
 8015f74:	e011      	b.n	8015f9a <_printf_i+0xfa>
 8015f76:	6821      	ldr	r1, [r4, #0]
 8015f78:	6833      	ldr	r3, [r6, #0]
 8015f7a:	0608      	lsls	r0, r1, #24
 8015f7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015f80:	d402      	bmi.n	8015f88 <_printf_i+0xe8>
 8015f82:	0649      	lsls	r1, r1, #25
 8015f84:	bf48      	it	mi
 8015f86:	b2ad      	uxthmi	r5, r5
 8015f88:	2f6f      	cmp	r7, #111	@ 0x6f
 8015f8a:	4852      	ldr	r0, [pc, #328]	@ (80160d4 <_printf_i+0x234>)
 8015f8c:	6033      	str	r3, [r6, #0]
 8015f8e:	bf14      	ite	ne
 8015f90:	230a      	movne	r3, #10
 8015f92:	2308      	moveq	r3, #8
 8015f94:	2100      	movs	r1, #0
 8015f96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015f9a:	6866      	ldr	r6, [r4, #4]
 8015f9c:	60a6      	str	r6, [r4, #8]
 8015f9e:	2e00      	cmp	r6, #0
 8015fa0:	db05      	blt.n	8015fae <_printf_i+0x10e>
 8015fa2:	6821      	ldr	r1, [r4, #0]
 8015fa4:	432e      	orrs	r6, r5
 8015fa6:	f021 0104 	bic.w	r1, r1, #4
 8015faa:	6021      	str	r1, [r4, #0]
 8015fac:	d04b      	beq.n	8016046 <_printf_i+0x1a6>
 8015fae:	4616      	mov	r6, r2
 8015fb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8015fb4:	fb03 5711 	mls	r7, r3, r1, r5
 8015fb8:	5dc7      	ldrb	r7, [r0, r7]
 8015fba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015fbe:	462f      	mov	r7, r5
 8015fc0:	42bb      	cmp	r3, r7
 8015fc2:	460d      	mov	r5, r1
 8015fc4:	d9f4      	bls.n	8015fb0 <_printf_i+0x110>
 8015fc6:	2b08      	cmp	r3, #8
 8015fc8:	d10b      	bne.n	8015fe2 <_printf_i+0x142>
 8015fca:	6823      	ldr	r3, [r4, #0]
 8015fcc:	07df      	lsls	r7, r3, #31
 8015fce:	d508      	bpl.n	8015fe2 <_printf_i+0x142>
 8015fd0:	6923      	ldr	r3, [r4, #16]
 8015fd2:	6861      	ldr	r1, [r4, #4]
 8015fd4:	4299      	cmp	r1, r3
 8015fd6:	bfde      	ittt	le
 8015fd8:	2330      	movle	r3, #48	@ 0x30
 8015fda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015fde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015fe2:	1b92      	subs	r2, r2, r6
 8015fe4:	6122      	str	r2, [r4, #16]
 8015fe6:	f8cd a000 	str.w	sl, [sp]
 8015fea:	464b      	mov	r3, r9
 8015fec:	aa03      	add	r2, sp, #12
 8015fee:	4621      	mov	r1, r4
 8015ff0:	4640      	mov	r0, r8
 8015ff2:	f7ff fee7 	bl	8015dc4 <_printf_common>
 8015ff6:	3001      	adds	r0, #1
 8015ff8:	d14a      	bne.n	8016090 <_printf_i+0x1f0>
 8015ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8015ffe:	b004      	add	sp, #16
 8016000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016004:	6823      	ldr	r3, [r4, #0]
 8016006:	f043 0320 	orr.w	r3, r3, #32
 801600a:	6023      	str	r3, [r4, #0]
 801600c:	4832      	ldr	r0, [pc, #200]	@ (80160d8 <_printf_i+0x238>)
 801600e:	2778      	movs	r7, #120	@ 0x78
 8016010:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016014:	6823      	ldr	r3, [r4, #0]
 8016016:	6831      	ldr	r1, [r6, #0]
 8016018:	061f      	lsls	r7, r3, #24
 801601a:	f851 5b04 	ldr.w	r5, [r1], #4
 801601e:	d402      	bmi.n	8016026 <_printf_i+0x186>
 8016020:	065f      	lsls	r7, r3, #25
 8016022:	bf48      	it	mi
 8016024:	b2ad      	uxthmi	r5, r5
 8016026:	6031      	str	r1, [r6, #0]
 8016028:	07d9      	lsls	r1, r3, #31
 801602a:	bf44      	itt	mi
 801602c:	f043 0320 	orrmi.w	r3, r3, #32
 8016030:	6023      	strmi	r3, [r4, #0]
 8016032:	b11d      	cbz	r5, 801603c <_printf_i+0x19c>
 8016034:	2310      	movs	r3, #16
 8016036:	e7ad      	b.n	8015f94 <_printf_i+0xf4>
 8016038:	4826      	ldr	r0, [pc, #152]	@ (80160d4 <_printf_i+0x234>)
 801603a:	e7e9      	b.n	8016010 <_printf_i+0x170>
 801603c:	6823      	ldr	r3, [r4, #0]
 801603e:	f023 0320 	bic.w	r3, r3, #32
 8016042:	6023      	str	r3, [r4, #0]
 8016044:	e7f6      	b.n	8016034 <_printf_i+0x194>
 8016046:	4616      	mov	r6, r2
 8016048:	e7bd      	b.n	8015fc6 <_printf_i+0x126>
 801604a:	6833      	ldr	r3, [r6, #0]
 801604c:	6825      	ldr	r5, [r4, #0]
 801604e:	6961      	ldr	r1, [r4, #20]
 8016050:	1d18      	adds	r0, r3, #4
 8016052:	6030      	str	r0, [r6, #0]
 8016054:	062e      	lsls	r6, r5, #24
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	d501      	bpl.n	801605e <_printf_i+0x1be>
 801605a:	6019      	str	r1, [r3, #0]
 801605c:	e002      	b.n	8016064 <_printf_i+0x1c4>
 801605e:	0668      	lsls	r0, r5, #25
 8016060:	d5fb      	bpl.n	801605a <_printf_i+0x1ba>
 8016062:	8019      	strh	r1, [r3, #0]
 8016064:	2300      	movs	r3, #0
 8016066:	6123      	str	r3, [r4, #16]
 8016068:	4616      	mov	r6, r2
 801606a:	e7bc      	b.n	8015fe6 <_printf_i+0x146>
 801606c:	6833      	ldr	r3, [r6, #0]
 801606e:	1d1a      	adds	r2, r3, #4
 8016070:	6032      	str	r2, [r6, #0]
 8016072:	681e      	ldr	r6, [r3, #0]
 8016074:	6862      	ldr	r2, [r4, #4]
 8016076:	2100      	movs	r1, #0
 8016078:	4630      	mov	r0, r6
 801607a:	f7ea f951 	bl	8000320 <memchr>
 801607e:	b108      	cbz	r0, 8016084 <_printf_i+0x1e4>
 8016080:	1b80      	subs	r0, r0, r6
 8016082:	6060      	str	r0, [r4, #4]
 8016084:	6863      	ldr	r3, [r4, #4]
 8016086:	6123      	str	r3, [r4, #16]
 8016088:	2300      	movs	r3, #0
 801608a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801608e:	e7aa      	b.n	8015fe6 <_printf_i+0x146>
 8016090:	6923      	ldr	r3, [r4, #16]
 8016092:	4632      	mov	r2, r6
 8016094:	4649      	mov	r1, r9
 8016096:	4640      	mov	r0, r8
 8016098:	47d0      	blx	sl
 801609a:	3001      	adds	r0, #1
 801609c:	d0ad      	beq.n	8015ffa <_printf_i+0x15a>
 801609e:	6823      	ldr	r3, [r4, #0]
 80160a0:	079b      	lsls	r3, r3, #30
 80160a2:	d413      	bmi.n	80160cc <_printf_i+0x22c>
 80160a4:	68e0      	ldr	r0, [r4, #12]
 80160a6:	9b03      	ldr	r3, [sp, #12]
 80160a8:	4298      	cmp	r0, r3
 80160aa:	bfb8      	it	lt
 80160ac:	4618      	movlt	r0, r3
 80160ae:	e7a6      	b.n	8015ffe <_printf_i+0x15e>
 80160b0:	2301      	movs	r3, #1
 80160b2:	4632      	mov	r2, r6
 80160b4:	4649      	mov	r1, r9
 80160b6:	4640      	mov	r0, r8
 80160b8:	47d0      	blx	sl
 80160ba:	3001      	adds	r0, #1
 80160bc:	d09d      	beq.n	8015ffa <_printf_i+0x15a>
 80160be:	3501      	adds	r5, #1
 80160c0:	68e3      	ldr	r3, [r4, #12]
 80160c2:	9903      	ldr	r1, [sp, #12]
 80160c4:	1a5b      	subs	r3, r3, r1
 80160c6:	42ab      	cmp	r3, r5
 80160c8:	dcf2      	bgt.n	80160b0 <_printf_i+0x210>
 80160ca:	e7eb      	b.n	80160a4 <_printf_i+0x204>
 80160cc:	2500      	movs	r5, #0
 80160ce:	f104 0619 	add.w	r6, r4, #25
 80160d2:	e7f5      	b.n	80160c0 <_printf_i+0x220>
 80160d4:	080173a5 	.word	0x080173a5
 80160d8:	080173b6 	.word	0x080173b6

080160dc <_realloc_r>:
 80160dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160e0:	4607      	mov	r7, r0
 80160e2:	4614      	mov	r4, r2
 80160e4:	460d      	mov	r5, r1
 80160e6:	b921      	cbnz	r1, 80160f2 <_realloc_r+0x16>
 80160e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160ec:	4611      	mov	r1, r2
 80160ee:	f7ff bb9d 	b.w	801582c <_malloc_r>
 80160f2:	b92a      	cbnz	r2, 8016100 <_realloc_r+0x24>
 80160f4:	f7ff fcc4 	bl	8015a80 <_free_r>
 80160f8:	4625      	mov	r5, r4
 80160fa:	4628      	mov	r0, r5
 80160fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016100:	f000 f81a 	bl	8016138 <_malloc_usable_size_r>
 8016104:	4284      	cmp	r4, r0
 8016106:	4606      	mov	r6, r0
 8016108:	d802      	bhi.n	8016110 <_realloc_r+0x34>
 801610a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801610e:	d8f4      	bhi.n	80160fa <_realloc_r+0x1e>
 8016110:	4621      	mov	r1, r4
 8016112:	4638      	mov	r0, r7
 8016114:	f7ff fb8a 	bl	801582c <_malloc_r>
 8016118:	4680      	mov	r8, r0
 801611a:	b908      	cbnz	r0, 8016120 <_realloc_r+0x44>
 801611c:	4645      	mov	r5, r8
 801611e:	e7ec      	b.n	80160fa <_realloc_r+0x1e>
 8016120:	42b4      	cmp	r4, r6
 8016122:	4622      	mov	r2, r4
 8016124:	4629      	mov	r1, r5
 8016126:	bf28      	it	cs
 8016128:	4632      	movcs	r2, r6
 801612a:	f7ff fc9b 	bl	8015a64 <memcpy>
 801612e:	4629      	mov	r1, r5
 8016130:	4638      	mov	r0, r7
 8016132:	f7ff fca5 	bl	8015a80 <_free_r>
 8016136:	e7f1      	b.n	801611c <_realloc_r+0x40>

08016138 <_malloc_usable_size_r>:
 8016138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801613c:	1f18      	subs	r0, r3, #4
 801613e:	2b00      	cmp	r3, #0
 8016140:	bfbc      	itt	lt
 8016142:	580b      	ldrlt	r3, [r1, r0]
 8016144:	18c0      	addlt	r0, r0, r3
 8016146:	4770      	bx	lr

08016148 <_init>:
 8016148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801614a:	bf00      	nop
 801614c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801614e:	bc08      	pop	{r3}
 8016150:	469e      	mov	lr, r3
 8016152:	4770      	bx	lr

08016154 <_fini>:
 8016154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016156:	bf00      	nop
 8016158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801615a:	bc08      	pop	{r3}
 801615c:	469e      	mov	lr, r3
 801615e:	4770      	bx	lr
